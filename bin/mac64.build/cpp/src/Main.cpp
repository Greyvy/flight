// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_entities_Player
#include <entities/Player.h>
#endif
#ifndef INCLUDED_luxe_Camera
#include <luxe/Camera.h>
#endif
#ifndef INCLUDED_luxe_Debug
#include <luxe/Debug.h>
#endif
#ifndef INCLUDED_luxe_Draw
#include <luxe/Draw.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_Game
#include <luxe/Game.h>
#endif
#ifndef INCLUDED_luxe_Input
#include <luxe/Input.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Screen
#include <luxe/Screen.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_RectangleGeometry
#include <phoenix/geometry/RectangleGeometry.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_21_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",21,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_26_config,"Main","config",0xf87c7637,"Main.config","Main.hx",26,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_40_ready,"Main","ready",0x62ede68e,"Main.ready","Main.hx",40,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_84_update,"Main","update",0xb7afa57e,"Main.update","Main.hx",84,0x087e5c05)

void Main_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_21_new)
HXLINE(  24)		this->height = (int)360;
HXLINE(  23)		this->width = (int)640;
HXLINE(  21)		super::__construct();
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x324965d0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x324965d0;
	} else {
		return inClassId==(int)0x332f6459;
	}
}

 ::Dynamic Main_obj::config( ::Dynamic config){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_26_config)
HXLINE(  28)		 ::Dynamic(config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__SetField(HX_("title",98,15,3b,10),HX_("luxe game",9c,14,33,b3),hx::paccDynamic);
HXLINE(  29)		 ::Dynamic(config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__SetField(HX_("width",06,b6,62,ca),this->width,hx::paccDynamic);
HXLINE(  30)		 ::Dynamic(config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__SetField(HX_("height",e7,07,4c,02),this->height,hx::paccDynamic);
HXLINE(  31)		 ::Dynamic(config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__SetField(HX_("fullscreen",3b,3a,b4,f9),false,hx::paccDynamic);
HXLINE(  33)		return config;
            	}


void Main_obj::ready(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_40_ready)
HXLINE(  41)		this->player =  ::entities::Player_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("pos",94,5d,55,00),::Luxe_obj::core->screen->get_mid())
            			->setFixed(1,HX_("name",4b,72,ff,48),HX_("Player",81,5f,4d,6c))));
HXLINE(  43)		 ::luxe::Camera _hx_tmp = ::Luxe_obj::camera;
HXDLIN(  43)		 ::phoenix::Vector this1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,this->width,this->height,null(),null());
HXDLIN(  43)		_hx_tmp->set_size(this1);
HXLINE(  44)		::Luxe_obj::camera->shake((int)12);
HXLINE(  47)		::Array< Float > _hx_tmp1 = ::Array_obj< Float >::__new(4)->init(0,(int)-1)->init(1,(int)0)->init(2,(::Luxe_obj::core->screen->get_w() + (int)2))->init(3,(int)30);
HXLINE(  48)		::Array< Float > _hx_tmp2 = ::Array_obj< Float >::__new(4)->init(0,(int)-1)->init(1,(int)30)->init(2,(int)30)->init(3,(::Luxe_obj::core->screen->get_h() - (int)60));
HXLINE(  49)		int _hx_tmp3 = (::Luxe_obj::core->screen->get_h() - (int)30);
HXDLIN(  49)		::Array< Float > _hx_tmp4 = ::Array_obj< Float >::__new(4)->init(0,(int)-1)->init(1,_hx_tmp3)->init(2,(::Luxe_obj::core->screen->get_w() + (int)2))->init(3,(int)30);
HXLINE(  50)		int _hx_tmp5 = (::Luxe_obj::core->screen->get_w() - (int)29);
HXLINE(  46)		this->walls = ::Array_obj< ::Dynamic>::__new(4)->init(0,_hx_tmp1)->init(1,_hx_tmp2)->init(2,_hx_tmp4)->init(3,::Array_obj< Float >::__new(4)->init(0,_hx_tmp5)->init(1,(int)30)->init(2,(int)30)->init(3,(::Luxe_obj::core->screen->get_h() - (int)60)));
HXLINE(  53)		{
HXLINE(  53)			int _g = (int)0;
HXDLIN(  53)			::Array< ::Dynamic> _g1 = this->walls;
HXDLIN(  53)			while((_g < _g1->length)){
HXLINE(  53)				::Array< Float > w = _g1->__get(_g).StaticCast< ::Array< Float > >();
HXDLIN(  53)				_g = (_g + (int)1);
HXLINE(  54)				 ::luxe::Draw _hx_tmp6 = ::Luxe_obj::draw;
HXLINE(  55)				Float w1 = w->__get((int)0);
HXDLIN(  55)				Float w2 = w->__get((int)1);
HXLINE(  56)				Float w3 = w->__get((int)2);
HXDLIN(  56)				Float w4 = w->__get((int)3);
HXLINE(  54)				_hx_tmp6->rectangle( ::Dynamic(hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("h",68,00,00,00),w4)
            					->setFixed(1,HX_("w",77,00,00,00),w3)
            					->setFixed(2,HX_("x",78,00,00,00),w1)
            					->setFixed(3,HX_("y",79,00,00,00),w2)
            					->setFixed(4,HX_("color",63,71,5c,4a), ::phoenix::Color_obj::__alloc( HX_CTX ,(int)1,(int)1,(int)1,(int)1))));
            			}
            		}
HXLINE(  62)		::Luxe_obj::input->bind_key(HX_("left",07,08,b0,47),(int)1073741904);
HXLINE(  63)		::Luxe_obj::input->bind_key(HX_("left",07,08,b0,47),(int)97);
HXLINE(  65)		::Luxe_obj::input->bind_key(HX_("up",5b,66,00,00),(int)1073741906);
HXLINE(  66)		::Luxe_obj::input->bind_key(HX_("up",5b,66,00,00),(int)119);
HXLINE(  68)		::Luxe_obj::input->bind_key(HX_("right",dc,0b,64,e9),(int)1073741903);
HXLINE(  69)		::Luxe_obj::input->bind_key(HX_("right",dc,0b,64,e9),(int)100);
HXLINE(  71)		::Luxe_obj::input->bind_key(HX_("down",62,f8,6d,42),(int)1073741905);
HXLINE(  72)		::Luxe_obj::input->bind_key(HX_("down",62,f8,6d,42),(int)115);
HXLINE(  74)		::Luxe_obj::input->bind_key(HX_("teleport",ab,a2,33,f3),(int)32);
            	}


void Main_obj::update(Float dt){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_84_update)
HXLINE(  85)		if (::Luxe_obj::input->keyreleased((int)48)) {
HXLINE(  86)			::Luxe_obj::core->debug->set_visible(!(::Luxe_obj::debug->visible));
            		}
HXLINE(  89)		 ::luxe::Camera _hx_tmp = ::Luxe_obj::camera;
HXDLIN(  89)		 ::Dynamic _x = this->player->get_pos()->x;
HXDLIN(  89)		 ::phoenix::Vector this1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_x,this->player->get_pos()->y,null(),null());
HXDLIN(  89)		_hx_tmp->set_center(this1);
            	}



hx::ObjectPtr< Main_obj > Main_obj::__new() {
	hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Main_obj > Main_obj::__alloc(hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

void Main_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Main);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(walls,"walls");
	 ::luxe::Game_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Main_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(walls,"walls");
	 ::luxe::Game_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Main_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"walls") ) { return hx::Val( walls ); }
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( ready_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"config") ) { return hx::Val( config_dyn() ); }
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Main_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"walls") ) { walls=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::entities::Player >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Main_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"));
	outFields->push(HX_HCSTRING("walls","\x29","\x0c","\x1f","\xc5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Main_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Main_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(Main_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::entities::Player*/ ,(int)offsetof(Main_obj,player),HX_HCSTRING("player","\x61","\xeb","\xb8","\x37")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Main_obj,walls),HX_HCSTRING("walls","\x29","\x0c","\x1f","\xc5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("config","\xc2","\x56","\xd2","\xc7"),
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("walls","\x29","\x0c","\x1f","\xc5"),
	HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::__mClass,"__mClass");
};

#endif

hx::Class Main_obj::__mClass;

void Main_obj::__register()
{
	hx::Object *dummy = new Main_obj;
	Main_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Main","\x59","\x64","\x2f","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

