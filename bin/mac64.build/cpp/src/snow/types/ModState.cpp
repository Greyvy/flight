// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_snow_types_ModState
#include <snow/types/ModState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_097a1ce7af24d9ae_856_new,"snow.types.ModState","new",0x9ab164a1,"snow.types.ModState.new","snow/types/Types.hx",856,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_097a1ce7af24d9ae_894_toString,"snow.types.ModState","toString",0xbb8b30cb,"snow.types.ModState.toString","snow/types/Types.hx",894,0x72b41ce7)
namespace snow{
namespace types{

void ModState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_097a1ce7af24d9ae_856_new)
HXLINE( 892)		this->meta = false;
HXLINE( 890)		this->alt = false;
HXLINE( 888)		this->shift = false;
HXLINE( 886)		this->ctrl = false;
HXLINE( 884)		this->mode = false;
HXLINE( 882)		this->caps = false;
HXLINE( 880)		this->num = false;
HXLINE( 878)		this->rmeta = false;
HXLINE( 876)		this->lmeta = false;
HXLINE( 874)		this->ralt = false;
HXLINE( 872)		this->lalt = false;
HXLINE( 870)		this->rctrl = false;
HXLINE( 868)		this->lctrl = false;
HXLINE( 866)		this->rshift = false;
HXLINE( 864)		this->lshift = false;
HXLINE( 862)		this->none = false;
            	}

Dynamic ModState_obj::__CreateEmpty() { return new ModState_obj; }

void *ModState_obj::_hx_vtable = 0;

Dynamic ModState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ModState_obj > _hx_result = new ModState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ModState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x61915fe5;
}

::String ModState_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_097a1ce7af24d9ae_894_toString)
HXLINE( 896)		::String _s = HX_("{ \"ModState\":true ",6e,4f,01,a6);
HXLINE( 898)		if (this->none) {
HXLINE( 898)			return (_s + HX_(", \"none\":true }",e9,d9,b0,85));
            		}
HXLINE( 900)		if (this->lshift) {
HXLINE( 900)			_s = (_s + HX_(", \"lshift\":true",6a,96,a2,64));
            		}
HXLINE( 901)		if (this->rshift) {
HXLINE( 901)			_s = (_s + HX_(", \"rshift\":true",24,28,1f,ef));
            		}
HXLINE( 902)		if (this->lctrl) {
HXLINE( 902)			_s = (_s + HX_(", \"lctrl\":true",0f,3f,34,87));
            		}
HXLINE( 903)		if (this->rctrl) {
HXLINE( 903)			_s = (_s + HX_(", \"rctrl\":true",95,c2,6a,8c));
            		}
HXLINE( 904)		if (this->lalt) {
HXLINE( 904)			_s = (_s + HX_(", \"lalt\":true",d1,65,d6,a2));
            		}
HXLINE( 905)		if (this->ralt) {
HXLINE( 905)			_s = (_s + HX_(", \"ralt\":true",0b,35,95,24));
            		}
HXLINE( 906)		if (this->lmeta) {
HXLINE( 906)			_s = (_s + HX_(", \"lmeta\":true",a9,90,f0,56));
            		}
HXLINE( 907)		if (this->rmeta) {
HXLINE( 907)			_s = (_s + HX_(", \"rmeta\":true",2f,14,27,5c));
            		}
HXLINE( 908)		if (this->num) {
HXLINE( 908)			_s = (_s + HX_(", \"num\":true",fe,92,68,b9));
            		}
HXLINE( 909)		if (this->caps) {
HXLINE( 909)			_s = (_s + HX_(", \"caps\":true",b5,80,6c,9b));
            		}
HXLINE( 910)		if (this->mode) {
HXLINE( 910)			_s = (_s + HX_(", \"mode\":true",77,15,ff,b2));
            		}
HXLINE( 911)		if (this->ctrl) {
HXLINE( 911)			_s = (_s + HX_(", \"ctrl\":true",bf,f0,a5,92));
            		}
HXLINE( 912)		if (this->shift) {
HXLINE( 912)			_s = (_s + HX_(", \"shift\":true",ba,5e,ac,5c));
            		}
HXLINE( 913)		if (this->alt) {
HXLINE( 913)			_s = (_s + HX_(", \"alt\":true",21,7a,76,23));
            		}
HXLINE( 914)		if (this->meta) {
HXLINE( 914)			_s = (_s + HX_(", \"meta\":true",59,42,62,62));
            		}
HXLINE( 916)		_s = (_s + HX_("}",7d,00,00,00));
HXLINE( 918)		return _s;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ModState_obj,toString,return )


ModState_obj::ModState_obj()
{
}

hx::Val ModState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"num") ) { return hx::Val( num ); }
		if (HX_FIELD_EQ(inName,"alt") ) { return hx::Val( alt ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"none") ) { return hx::Val( none ); }
		if (HX_FIELD_EQ(inName,"lalt") ) { return hx::Val( lalt ); }
		if (HX_FIELD_EQ(inName,"ralt") ) { return hx::Val( ralt ); }
		if (HX_FIELD_EQ(inName,"caps") ) { return hx::Val( caps ); }
		if (HX_FIELD_EQ(inName,"mode") ) { return hx::Val( mode ); }
		if (HX_FIELD_EQ(inName,"ctrl") ) { return hx::Val( ctrl ); }
		if (HX_FIELD_EQ(inName,"meta") ) { return hx::Val( meta ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lctrl") ) { return hx::Val( lctrl ); }
		if (HX_FIELD_EQ(inName,"rctrl") ) { return hx::Val( rctrl ); }
		if (HX_FIELD_EQ(inName,"lmeta") ) { return hx::Val( lmeta ); }
		if (HX_FIELD_EQ(inName,"rmeta") ) { return hx::Val( rmeta ); }
		if (HX_FIELD_EQ(inName,"shift") ) { return hx::Val( shift ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lshift") ) { return hx::Val( lshift ); }
		if (HX_FIELD_EQ(inName,"rshift") ) { return hx::Val( rshift ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ModState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"num") ) { num=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alt") ) { alt=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"none") ) { none=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lalt") ) { lalt=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ralt") ) { ralt=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caps") ) { caps=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mode") ) { mode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ctrl") ) { ctrl=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"meta") ) { meta=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lctrl") ) { lctrl=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rctrl") ) { rctrl=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lmeta") ) { lmeta=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rmeta") ) { rmeta=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shift") ) { shift=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lshift") ) { lshift=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rshift") ) { rshift=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ModState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("none","\xb8","\x12","\x0a","\x49"));
	outFields->push(HX_HCSTRING("lshift","\x96","\xe4","\xad","\xaa"));
	outFields->push(HX_HCSTRING("rshift","\xd0","\x0e","\xd2","\x10"));
	outFields->push(HX_HCSTRING("lctrl","\x17","\x2f","\x0f","\x71"));
	outFields->push(HX_HCSTRING("rctrl","\x1d","\xaa","\x76","\xe5"));
	outFields->push(HX_HCSTRING("lalt","\x3d","\x04","\xad","\x47"));
	outFields->push(HX_HCSTRING("ralt","\xf7","\x4b","\xa4","\x4b"));
	outFields->push(HX_HCSTRING("lmeta","\x31","\xf1","\x9f","\x77"));
	outFields->push(HX_HCSTRING("rmeta","\x37","\x6c","\x07","\xec"));
	outFields->push(HX_HCSTRING("num","\x46","\xde","\x53","\x00"));
	outFields->push(HX_HCSTRING("caps","\x21","\x1c","\xba","\x41"));
	outFields->push(HX_HCSTRING("mode","\x63","\xd3","\x60","\x48"));
	outFields->push(HX_HCSTRING("ctrl","\xab","\x88","\xc8","\x41"));
	outFields->push(HX_HCSTRING("shift","\x82","\xec","\x22","\x7c"));
	outFields->push(HX_HCSTRING("alt","\x29","\xf9","\x49","\x00"));
	outFields->push(HX_HCSTRING("meta","\xc5","\x4a","\x59","\x48"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ModState_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(ModState_obj,none),HX_HCSTRING("none","\xb8","\x12","\x0a","\x49")},
	{hx::fsBool,(int)offsetof(ModState_obj,lshift),HX_HCSTRING("lshift","\x96","\xe4","\xad","\xaa")},
	{hx::fsBool,(int)offsetof(ModState_obj,rshift),HX_HCSTRING("rshift","\xd0","\x0e","\xd2","\x10")},
	{hx::fsBool,(int)offsetof(ModState_obj,lctrl),HX_HCSTRING("lctrl","\x17","\x2f","\x0f","\x71")},
	{hx::fsBool,(int)offsetof(ModState_obj,rctrl),HX_HCSTRING("rctrl","\x1d","\xaa","\x76","\xe5")},
	{hx::fsBool,(int)offsetof(ModState_obj,lalt),HX_HCSTRING("lalt","\x3d","\x04","\xad","\x47")},
	{hx::fsBool,(int)offsetof(ModState_obj,ralt),HX_HCSTRING("ralt","\xf7","\x4b","\xa4","\x4b")},
	{hx::fsBool,(int)offsetof(ModState_obj,lmeta),HX_HCSTRING("lmeta","\x31","\xf1","\x9f","\x77")},
	{hx::fsBool,(int)offsetof(ModState_obj,rmeta),HX_HCSTRING("rmeta","\x37","\x6c","\x07","\xec")},
	{hx::fsBool,(int)offsetof(ModState_obj,num),HX_HCSTRING("num","\x46","\xde","\x53","\x00")},
	{hx::fsBool,(int)offsetof(ModState_obj,caps),HX_HCSTRING("caps","\x21","\x1c","\xba","\x41")},
	{hx::fsBool,(int)offsetof(ModState_obj,mode),HX_HCSTRING("mode","\x63","\xd3","\x60","\x48")},
	{hx::fsBool,(int)offsetof(ModState_obj,ctrl),HX_HCSTRING("ctrl","\xab","\x88","\xc8","\x41")},
	{hx::fsBool,(int)offsetof(ModState_obj,shift),HX_HCSTRING("shift","\x82","\xec","\x22","\x7c")},
	{hx::fsBool,(int)offsetof(ModState_obj,alt),HX_HCSTRING("alt","\x29","\xf9","\x49","\x00")},
	{hx::fsBool,(int)offsetof(ModState_obj,meta),HX_HCSTRING("meta","\xc5","\x4a","\x59","\x48")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ModState_obj_sStaticStorageInfo = 0;
#endif

static ::String ModState_obj_sMemberFields[] = {
	HX_HCSTRING("none","\xb8","\x12","\x0a","\x49"),
	HX_HCSTRING("lshift","\x96","\xe4","\xad","\xaa"),
	HX_HCSTRING("rshift","\xd0","\x0e","\xd2","\x10"),
	HX_HCSTRING("lctrl","\x17","\x2f","\x0f","\x71"),
	HX_HCSTRING("rctrl","\x1d","\xaa","\x76","\xe5"),
	HX_HCSTRING("lalt","\x3d","\x04","\xad","\x47"),
	HX_HCSTRING("ralt","\xf7","\x4b","\xa4","\x4b"),
	HX_HCSTRING("lmeta","\x31","\xf1","\x9f","\x77"),
	HX_HCSTRING("rmeta","\x37","\x6c","\x07","\xec"),
	HX_HCSTRING("num","\x46","\xde","\x53","\x00"),
	HX_HCSTRING("caps","\x21","\x1c","\xba","\x41"),
	HX_HCSTRING("mode","\x63","\xd3","\x60","\x48"),
	HX_HCSTRING("ctrl","\xab","\x88","\xc8","\x41"),
	HX_HCSTRING("shift","\x82","\xec","\x22","\x7c"),
	HX_HCSTRING("alt","\x29","\xf9","\x49","\x00"),
	HX_HCSTRING("meta","\xc5","\x4a","\x59","\x48"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void ModState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ModState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ModState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ModState_obj::__mClass,"__mClass");
};

#endif

hx::Class ModState_obj::__mClass;

void ModState_obj::__register()
{
	hx::Object *dummy = new ModState_obj;
	ModState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("snow.types.ModState","\x2f","\x80","\xe0","\xb1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ModState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ModState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ModState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ModState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace types
