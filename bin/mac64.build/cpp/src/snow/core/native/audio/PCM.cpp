// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_92958f0660df95c6
#define INCLUDED_92958f0660df95c6
#include "linc_sdl.h"
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_core_native_audio_AudioDataPCM
#include <snow/core/native/audio/AudioDataPCM.h>
#endif
#ifndef INCLUDED_snow_core_native_audio_PCM
#include <snow/core/native/audio/PCM.h>
#endif
#ifndef INCLUDED_snow_core_native_io_IO
#include <snow/core/native/io/IO.h>
#endif
#ifndef INCLUDED_snow_modules_interfaces_IO
#include <snow/modules/interfaces/IO.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_IO
#include <snow/modules/sdl/IO.h>
#endif
#ifndef INCLUDED_snow_systems_io_IO
#include <snow/systems/io/IO.h>
#endif
#ifndef INCLUDED_snow_types_AudioData
#include <snow/types/AudioData.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_92565853ff858776_96_from_file,"snow.core.native.audio.PCM","from_file",0x5899c712,"snow.core.native.audio.PCM.from_file","snow/core/native/audio/AudioDataPCM.hx",96,0x3523d5f7)
HX_LOCAL_STACK_FRAME(_hx_pos_92565853ff858776_130_from_bytes,"snow.core.native.audio.PCM","from_bytes",0xeaf39315,"snow.core.native.audio.PCM.from_bytes","snow/core/native/audio/AudioDataPCM.hx",130,0x3523d5f7)
namespace snow{
namespace core{
namespace native{
namespace audio{

void PCM_obj::__construct() { }

Dynamic PCM_obj::__CreateEmpty() { return new PCM_obj; }

void *PCM_obj::_hx_vtable = 0;

Dynamic PCM_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PCM_obj > _hx_result = new PCM_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PCM_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x23417d1d;
}

 ::snow::types::AudioData PCM_obj::from_file( ::snow::Snow app,::String _path,bool _is_stream){
            	HX_GC_STACKFRAME(&_hx_pos_92565853ff858776_96_from_file)
HXLINE(  98)		::cpp::Pointer<  SDL_RWops > _handle = app->io->module->file_handle(_path,HX_("rb",b0,63,00,00));
HXLINE(  99)		if (hx::IsNull( _handle )) {
HXLINE(  99)			return null();
            		}
HXLINE( 101)		::cpp::Pointer<  SDL_RWops > tmp = _handle;
HXDLIN( 101)		int _length = app->io->module->file_size(tmp);
HXLINE( 102)		 ::snow::api::buffers::ArrayBufferView _samples = null();
HXLINE( 104)		if (!(_is_stream)) {
HXLINE( 105)			 ::snow::api::buffers::ArrayBufferView this1;
HXDLIN( 105)			int _elements = _length;
HXDLIN( 105)			if ((_elements < (int)0)) {
HXLINE( 105)				_elements = (int)0;
            			}
HXDLIN( 105)			 ::snow::api::buffers::ArrayBufferView _view =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,(int)4);
HXDLIN( 105)			int _bytelen = (_elements * _view->bytesPerElement);
HXDLIN( 105)			_view->byteOffset = (int)0;
HXDLIN( 105)			_view->byteLength = _bytelen;
HXDLIN( 105)			::Array< unsigned char > this2 = ::Array_obj< unsigned char >::__new();
HXDLIN( 105)			if ((_bytelen > (int)0)) {
HXLINE( 105)				this2[(_bytelen - (int)1)] = (int)0;
            			}
HXDLIN( 105)			_view->buffer = this2;
HXDLIN( 105)			_view->length = _elements;
HXDLIN( 105)			this1 = _view;
HXDLIN( 105)			_samples = this1;
HXLINE( 106)			::cpp::Pointer<  SDL_RWops > tmp1 = _handle;
HXDLIN( 106)			int _read = app->io->module->file_read(tmp1,_samples,_length,(int)1);
HXLINE( 107)			if ((_read != _length)) {
HXLINE( 108)				_samples = null();
HXLINE( 109)				return null();
            			}
            		}
HXLINE( 116)		return  ::snow::core::native::audio::AudioDataPCM_obj::__alloc( HX_CTX ,app,_handle, ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("samples",09,c5,c9,83),_samples)
            			->setFixed(1,HX_("length",e6,94,07,9f),_length)
            			->setFixed(2,HX_("is_stream",75,7b,51,b6),_is_stream)
            			->setFixed(3,HX_("format",37,8f,8e,fd),(int)4)
            			->setFixed(4,HX_("id",db,5b,00,00),_path)
            			->setFixed(5,HX_("rate",e0,52,a4,4b),(int)44100)
            			->setFixed(6,HX_("channels",50,aa,ee,6a),(int)1)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PCM_obj,from_file,return )

 ::snow::types::AudioData PCM_obj::from_bytes( ::snow::Snow app,::String _id, ::snow::api::buffers::ArrayBufferView _bytes){
            	HX_GC_STACKFRAME(&_hx_pos_92565853ff858776_130_from_bytes)
HXDLIN( 130)		return  ::snow::core::native::audio::AudioDataPCM_obj::__alloc( HX_CTX ,app,null(), ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("samples",09,c5,c9,83),_bytes)
            			->setFixed(1,HX_("length",e6,94,07,9f),_bytes->length)
            			->setFixed(2,HX_("is_stream",75,7b,51,b6),false)
            			->setFixed(3,HX_("format",37,8f,8e,fd),(int)4)
            			->setFixed(4,HX_("id",db,5b,00,00),_id)
            			->setFixed(5,HX_("rate",e0,52,a4,4b),(int)44100)
            			->setFixed(6,HX_("channels",50,aa,ee,6a),(int)1)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PCM_obj,from_bytes,return )


PCM_obj::PCM_obj()
{
}

bool PCM_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"from_file") ) { outValue = from_file_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"from_bytes") ) { outValue = from_bytes_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *PCM_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *PCM_obj_sStaticStorageInfo = 0;
#endif

static void PCM_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PCM_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PCM_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PCM_obj::__mClass,"__mClass");
};

#endif

hx::Class PCM_obj::__mClass;

static ::String PCM_obj_sStaticFields[] = {
	HX_HCSTRING("from_file","\xb1","\x64","\x28","\x18"),
	HX_HCSTRING("from_bytes","\x96","\xe0","\x2e","\xc8"),
	::String(null())
};

void PCM_obj::__register()
{
	hx::Object *dummy = new PCM_obj;
	PCM_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("snow.core.native.audio.PCM","\x8f","\x2f","\xe1","\x5d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PCM_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PCM_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PCM_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< PCM_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PCM_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PCM_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PCM_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace core
} // end namespace native
} // end namespace audio
