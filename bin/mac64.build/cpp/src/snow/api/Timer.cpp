// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_0a05af74edef3e68
#define INCLUDED_0a05af74edef3e68
#include "linc_timestamp.h"
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_snow_api_Timer
#include <snow/api/Timer.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_Runtime
#include <snow/modules/sdl/Runtime.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_85b1fb275ca65ad7_15_new,"snow.api.Timer","new",0x41f1af18,"snow.api.Timer.new","snow/api/Timer.hx",15,0x0ea8a1da)
HX_LOCAL_STACK_FRAME(_hx_pos_85b1fb275ca65ad7_32___default_run,"snow.api.Timer","__default_run",0x373caf25,"snow.api.Timer.__default_run","snow/api/Timer.hx",32,0x0ea8a1da)
HX_LOCAL_STACK_FRAME(_hx_pos_85b1fb275ca65ad7_36_stop,"snow.api.Timer","stop",0x74e0f24a,"snow.api.Timer.stop","snow/api/Timer.hx",36,0x0ea8a1da)
HX_LOCAL_STACK_FRAME(_hx_pos_85b1fb275ca65ad7_24_measure,"snow.api.Timer","measure",0xf7899616,"snow.api.Timer.measure","snow/api/Timer.hx",24,0x0ea8a1da)
HX_LOCAL_STACK_FRAME(_hx_pos_85b1fb275ca65ad7_44_update,"snow.api.Timer","update",0x9c85aa51,"snow.api.Timer.update","snow/api/Timer.hx",44,0x0ea8a1da)
HX_LOCAL_STACK_FRAME(_hx_pos_85b1fb275ca65ad7_63_delay,"snow.api.Timer","delay",0x2303d43b,"snow.api.Timer.delay","snow/api/Timer.hx",63,0x0ea8a1da)
HX_LOCAL_STACK_FRAME(_hx_pos_85b1fb275ca65ad7_60_delay,"snow.api.Timer","delay",0x2303d43b,"snow.api.Timer.delay","snow/api/Timer.hx",60,0x0ea8a1da)
HX_LOCAL_STACK_FRAME(_hx_pos_85b1fb275ca65ad7_9_boot,"snow.api.Timer","boot",0x69a0867a,"snow.api.Timer.boot","snow/api/Timer.hx",9,0x0ea8a1da)
namespace snow{
namespace api{

void Timer_obj::__construct(Float _time){
            	HX_STACKFRAME(&_hx_pos_85b1fb275ca65ad7_15_new)
HXLINE(  17)		this->time = _time;
HXLINE(  18)		::snow::api::Timer_obj::running_timers->push(hx::ObjectPtr<OBJ_>(this));
HXLINE(  19)		Float _hx_tmp = linc::timestamp::now();
HXDLIN(  19)		this->fire_at = ((_hx_tmp - ::snow::modules::sdl::Runtime_obj::timestamp_start) + this->time);
HXLINE(  20)		this->running = true;
            	}

Dynamic Timer_obj::__CreateEmpty() { return new Timer_obj; }

void *Timer_obj::_hx_vtable = 0;

Dynamic Timer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Timer_obj > _hx_result = new Timer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Timer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x479eed4e;
}

HX_BEGIN_DEFAULT_FUNC(__default_run,Timer_obj)
void _hx_run(){
            	HX_STACKFRAME(&_hx_pos_85b1fb275ca65ad7_32___default_run)
            	}
HX_END_LOCAL_FUNC0((void))
HX_END_DEFAULT_FUNC

void Timer_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_85b1fb275ca65ad7_36_stop)
HXDLIN(  36)		if (this->running) {
HXLINE(  37)			this->running = false;
HXLINE(  38)			::snow::api::Timer_obj::running_timers->remove(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,stop,(void))

::Array< ::Dynamic> Timer_obj::running_timers;

 ::Dynamic Timer_obj::measure( ::Dynamic f, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_85b1fb275ca65ad7_24_measure)
HXLINE(  25)		Float t0 = linc::timestamp::now();
HXDLIN(  25)		Float t01 = (t0 - ::snow::modules::sdl::Runtime_obj::timestamp_start);
HXLINE(  26)		 ::Dynamic r = f();
HXLINE(  27)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  27)		Float _hx_tmp1 = linc::timestamp::now();
HXDLIN(  27)		_hx_tmp((((_hx_tmp1 - ::snow::modules::sdl::Runtime_obj::timestamp_start) - t01) + HX_("s",73,00,00,00)),pos);
HXLINE(  28)		return r;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Timer_obj,measure,return )

void Timer_obj::update(){
            	HX_STACKFRAME(&_hx_pos_85b1fb275ca65ad7_44_update)
HXLINE(  46)		Float now = linc::timestamp::now();
HXDLIN(  46)		Float now1 = (now - ::snow::modules::sdl::Runtime_obj::timestamp_start);
HXLINE(  48)		{
HXLINE(  48)			int _g = (int)0;
HXDLIN(  48)			::Array< ::Dynamic> _g1 = ::snow::api::Timer_obj::running_timers;
HXDLIN(  48)			while((_g < _g1->length)){
HXLINE(  48)				 ::snow::api::Timer timer = _g1->__get(_g).StaticCast<  ::snow::api::Timer >();
HXDLIN(  48)				_g = (_g + (int)1);
HXLINE(  49)				if (timer->running) {
HXLINE(  50)					if ((timer->fire_at < now1)) {
HXLINE(  51)						 ::snow::api::Timer timer1 = timer;
HXDLIN(  51)						timer1->fire_at = (timer1->fire_at + timer->time);
HXLINE(  52)						timer->run();
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,update,(void))

 ::snow::api::Timer Timer_obj::delay(Float _time, ::Dynamic _f){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::snow::api::Timer,t, ::Dynamic,_f) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_85b1fb275ca65ad7_63_delay)
HXLINE(  64)			t->stop();
HXLINE(  65)			_f();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_85b1fb275ca65ad7_60_delay)
HXLINE(  62)		 ::snow::api::Timer t =  ::snow::api::Timer_obj::__alloc( HX_CTX ,_time);
HXLINE(  63)		t->run =  ::Dynamic(new _hx_Closure_0(t,_f));
HXLINE(  68)		return t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Timer_obj,delay,return )


void Timer_obj::__alloc_dynamic_functions(hx::Ctx *_hx_ctx,Timer_obj *_hx_obj) {
	if (!_hx_obj->run.mPtr) _hx_obj->run = new __default_run(_hx_obj);
}
hx::ObjectPtr< Timer_obj > Timer_obj::__new(Float _time) {
	hx::ObjectPtr< Timer_obj > __this = new Timer_obj();
	__this->__construct(_time);
	return __this;
}

hx::ObjectPtr< Timer_obj > Timer_obj::__alloc(hx::Ctx *_hx_ctx,Float _time) {
	Timer_obj *__this = (Timer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Timer_obj), true, "snow.api.Timer"));
	*(void **)__this = Timer_obj::_hx_vtable;
	snow::api::Timer_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(_time);
	return __this;
}

Timer_obj::Timer_obj()
{
	run = new __default_run(this);
}

void Timer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Timer);
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(fire_at,"fire_at");
	HX_MARK_MEMBER_NAME(running,"running");
	HX_MARK_MEMBER_NAME(run,"run");
	HX_MARK_END_CLASS();
}

void Timer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(fire_at,"fire_at");
	HX_VISIT_MEMBER_NAME(running,"running");
	HX_VISIT_MEMBER_NAME(run,"run");
}

hx::Val Timer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fire_at") ) { return hx::Val( fire_at ); }
		if (HX_FIELD_EQ(inName,"running") ) { return hx::Val( running ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Timer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { outValue = delay_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { outValue = update_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"measure") ) { outValue = measure_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"running_timers") ) { outValue = ( running_timers ); return true; }
	}
	return false;
}

hx::Val Timer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { run=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fire_at") ) { fire_at=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"running") ) { running=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Timer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"running_timers") ) { running_timers=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void Timer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("fire_at","\x1c","\x4d","\xbf","\x73"));
	outFields->push(HX_HCSTRING("running","\xff","\x6d","\x69","\xeb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Timer_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Timer_obj,time),HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c")},
	{hx::fsFloat,(int)offsetof(Timer_obj,fire_at),HX_HCSTRING("fire_at","\x1c","\x4d","\xbf","\x73")},
	{hx::fsBool,(int)offsetof(Timer_obj,running),HX_HCSTRING("running","\xff","\x6d","\x69","\xeb")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Timer_obj,run),HX_HCSTRING("run","\x4b","\xe7","\x56","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Timer_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Timer_obj::running_timers,HX_HCSTRING("running_timers","\x8e","\xfe","\xd6","\x44")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Timer_obj_sMemberFields[] = {
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("fire_at","\x1c","\x4d","\xbf","\x73"),
	HX_HCSTRING("running","\xff","\x6d","\x69","\xeb"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	::String(null()) };

static void Timer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Timer_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Timer_obj::running_timers,"running_timers");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Timer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Timer_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Timer_obj::running_timers,"running_timers");
};

#endif

hx::Class Timer_obj::__mClass;

static ::String Timer_obj_sStaticFields[] = {
	HX_HCSTRING("running_timers","\x8e","\xfe","\xd6","\x44"),
	HX_HCSTRING("measure","\x5e","\xfb","\xe9","\x3c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"),
	::String(null())
};

void Timer_obj::__register()
{
	hx::Object *dummy = new Timer_obj;
	Timer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("snow.api.Timer","\x26","\x83","\xfe","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Timer_obj::__GetStatic;
	__mClass->mSetStaticField = &Timer_obj::__SetStatic;
	__mClass->mMarkFunc = Timer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Timer_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Timer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Timer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Timer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Timer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Timer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Timer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_85b1fb275ca65ad7_9_boot)
HXDLIN(   9)		running_timers = ::Array_obj< ::Dynamic>::__new(0);
            	}
}

} // end namespace snow
} // end namespace api
