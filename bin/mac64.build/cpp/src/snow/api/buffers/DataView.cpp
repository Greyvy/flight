// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_snow_api_buffers_ArrayBufferIO
#include <snow/api/buffers/ArrayBufferIO.h>
#endif
#ifndef INCLUDED_snow_api_buffers_DataView
#include <snow/api/buffers/DataView.h>
#endif
#ifndef INCLUDED_snow_api_buffers_TAError
#include <snow/api/buffers/TAError.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_30f29942d1b49a7f_112_new,"snow.api.buffers.DataView","new",0xcb6445bb,"snow.api.buffers.DataView.new","snow/api/buffers/DataView.hx",112,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_139_getInt8,"snow.api.buffers.DataView","getInt8",0xf2a3b2fa,"snow.api.buffers.DataView.getInt8","snow/api/buffers/DataView.hx",139,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_144_getInt16,"snow.api.buffers.DataView","getInt16",0x5c98e1e3,"snow.api.buffers.DataView.getInt16","snow/api/buffers/DataView.hx",144,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_149_getInt32,"snow.api.buffers.DataView","getInt32",0x5c98e39d,"snow.api.buffers.DataView.getInt32","snow/api/buffers/DataView.hx",149,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_154_getUint8,"snow.api.buffers.DataView","getUint8",0x421573ad,"snow.api.buffers.DataView.getUint8","snow/api/buffers/DataView.hx",154,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_159_getUint16,"snow.api.buffers.DataView","getUint16",0x90afbdd0,"snow.api.buffers.DataView.getUint16","snow/api/buffers/DataView.hx",159,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_164_getUint32,"snow.api.buffers.DataView","getUint32",0x90afbf8a,"snow.api.buffers.DataView.getUint32","snow/api/buffers/DataView.hx",164,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_169_getFloat32,"snow.api.buffers.DataView","getFloat32",0x5370d34a,"snow.api.buffers.DataView.getFloat32","snow/api/buffers/DataView.hx",169,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_174_getFloat64,"snow.api.buffers.DataView","getFloat64",0x5370d5e9,"snow.api.buffers.DataView.getFloat64","snow/api/buffers/DataView.hx",174,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_181_setInt8,"snow.api.buffers.DataView","setInt8",0xe5a54406,"snow.api.buffers.DataView.setInt8","snow/api/buffers/DataView.hx",181,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_186_setInt16,"snow.api.buffers.DataView","setInt16",0x0af63b57,"snow.api.buffers.DataView.setInt16","snow/api/buffers/DataView.hx",186,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_191_setInt32,"snow.api.buffers.DataView","setInt32",0x0af63d11,"snow.api.buffers.DataView.setInt32","snow/api/buffers/DataView.hx",191,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_196_setUint8,"snow.api.buffers.DataView","setUint8",0xf072cd21,"snow.api.buffers.DataView.setUint8","snow/api/buffers/DataView.hx",196,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_201_setUint16,"snow.api.buffers.DataView","setUint16",0x7400a9dc,"snow.api.buffers.DataView.setUint16","snow/api/buffers/DataView.hx",201,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_206_setUint32,"snow.api.buffers.DataView","setUint32",0x7400ab96,"snow.api.buffers.DataView.setUint32","snow/api/buffers/DataView.hx",206,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_211_setFloat32,"snow.api.buffers.DataView","setFloat32",0x56ee71be,"snow.api.buffers.DataView.setFloat32","snow/api/buffers/DataView.hx",211,0x80e9fc72)
HX_LOCAL_STACK_FRAME(_hx_pos_30f29942d1b49a7f_216_setFloat64,"snow.api.buffers.DataView","setFloat64",0x56ee745d,"snow.api.buffers.DataView.setFloat64","snow/api/buffers/DataView.hx",216,0x80e9fc72)
namespace snow{
namespace api{
namespace buffers{

void DataView_obj::__construct(::Array< unsigned char > buffer,hx::Null< int >  __o_byteOffset, ::Dynamic byteLength){
int byteOffset = __o_byteOffset.Default(0);
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_112_new)
HXLINE( 114)		if ((byteOffset < (int)0)) {
HXLINE( 114)			HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("DataView: byteOffset can't be negative",5f,e5,bd,90)));
            		}
HXLINE( 116)		int bufferByteLength = buffer->length;
HXLINE( 117)		int viewByteLength = (bufferByteLength - byteOffset);
HXLINE( 119)		if ((byteOffset > bufferByteLength)) {
HXLINE( 119)			HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("DataView: byteOffset is past the buffer byte length",75,51,2c,e8)));
            		}
HXLINE( 121)		if (hx::IsNotNull( byteLength )) {
HXLINE( 123)			if (hx::IsLess( byteLength,(int)0 )) {
HXLINE( 123)				HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("DataView: specified byteLength must be positive",2c,71,0d,fc)));
            			}
HXLINE( 125)			viewByteLength = byteLength;
HXLINE( 127)			if (((byteOffset + viewByteLength) > bufferByteLength)) {
HXLINE( 127)				HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("DataView: specified range would exceed the given buffer",8b,80,1c,0d)));
            			}
            		}
HXLINE( 131)		this->buffer = buffer;
HXLINE( 132)		this->byteLength = viewByteLength;
HXLINE( 133)		this->byteOffset = byteOffset;
            	}

Dynamic DataView_obj::__CreateEmpty() { return new DataView_obj; }

void *DataView_obj::_hx_vtable = 0;

Dynamic DataView_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DataView_obj > _hx_result = new DataView_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool DataView_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x444068eb;
}

int DataView_obj::getInt8(int byteOffset){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_139_getInt8)
HXDLIN( 139)		return ::__hxcpp_memory_get_byte(this->buffer,byteOffset);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DataView_obj,getInt8,return )

int DataView_obj::getInt16(int byteOffset){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_144_getInt16)
HXDLIN( 144)		return ::snow::api::buffers::ArrayBufferIO_obj::getInt16(this->buffer,byteOffset);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DataView_obj,getInt16,return )

int DataView_obj::getInt32(int byteOffset){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_149_getInt32)
HXDLIN( 149)		return ::__hxcpp_memory_get_i32(this->buffer,byteOffset);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DataView_obj,getInt32,return )

int DataView_obj::getUint8(int byteOffset){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_154_getUint8)
HXDLIN( 154)		return ((int)::__hxcpp_memory_get_byte(this->buffer,byteOffset) & (int)(int)255);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DataView_obj,getUint8,return )

int DataView_obj::getUint16(int byteOffset){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_159_getUint16)
HXDLIN( 159)		return ((int)::__hxcpp_memory_get_ui16(this->buffer,byteOffset) & (int)(int)65535);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DataView_obj,getUint16,return )

int DataView_obj::getUint32(int byteOffset){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_164_getUint32)
HXDLIN( 164)		return ::__hxcpp_memory_get_ui32(this->buffer,byteOffset);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DataView_obj,getUint32,return )

Float DataView_obj::getFloat32(int byteOffset){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_169_getFloat32)
HXDLIN( 169)		return ::__hxcpp_memory_get_float(this->buffer,byteOffset);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DataView_obj,getFloat32,return )

Float DataView_obj::getFloat64(int byteOffset){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_174_getFloat64)
HXDLIN( 174)		return ::__hxcpp_memory_get_double(this->buffer,byteOffset);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DataView_obj,getFloat64,return )

void DataView_obj::setInt8(int byteOffset,int value){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_181_setInt8)
HXDLIN( 181)		::__hxcpp_memory_set_byte(this->buffer,byteOffset,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DataView_obj,setInt8,(void))

void DataView_obj::setInt16(int byteOffset,int value){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_186_setInt16)
HXDLIN( 186)		::snow::api::buffers::ArrayBufferIO_obj::setInt16(this->buffer,byteOffset,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DataView_obj,setInt16,(void))

void DataView_obj::setInt32(int byteOffset,int value){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_191_setInt32)
HXDLIN( 191)		::__hxcpp_memory_set_i32(this->buffer,byteOffset,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DataView_obj,setInt32,(void))

void DataView_obj::setUint8(int byteOffset,int value){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_196_setUint8)
HXDLIN( 196)		::__hxcpp_memory_set_byte(this->buffer,byteOffset,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DataView_obj,setUint8,(void))

void DataView_obj::setUint16(int byteOffset,int value){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_201_setUint16)
HXDLIN( 201)		::__hxcpp_memory_set_ui16(this->buffer,byteOffset,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DataView_obj,setUint16,(void))

void DataView_obj::setUint32(int byteOffset,int value){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_206_setUint32)
HXDLIN( 206)		::__hxcpp_memory_set_ui32(this->buffer,byteOffset,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DataView_obj,setUint32,(void))

void DataView_obj::setFloat32(int byteOffset,Float value){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_211_setFloat32)
HXDLIN( 211)		::__hxcpp_memory_set_float(this->buffer,byteOffset,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DataView_obj,setFloat32,(void))

void DataView_obj::setFloat64(int byteOffset,Float value){
            	HX_STACKFRAME(&_hx_pos_30f29942d1b49a7f_216_setFloat64)
HXDLIN( 216)		::__hxcpp_memory_set_double(this->buffer,byteOffset,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DataView_obj,setFloat64,(void))


hx::ObjectPtr< DataView_obj > DataView_obj::__new(::Array< unsigned char > buffer,hx::Null< int >  __o_byteOffset, ::Dynamic byteLength) {
	hx::ObjectPtr< DataView_obj > __this = new DataView_obj();
	__this->__construct(buffer,__o_byteOffset,byteLength);
	return __this;
}

hx::ObjectPtr< DataView_obj > DataView_obj::__alloc(hx::Ctx *_hx_ctx,::Array< unsigned char > buffer,hx::Null< int >  __o_byteOffset, ::Dynamic byteLength) {
	DataView_obj *__this = (DataView_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DataView_obj), true, "snow.api.buffers.DataView"));
	*(void **)__this = DataView_obj::_hx_vtable;
	__this->__construct(buffer,__o_byteOffset,byteLength);
	return __this;
}

DataView_obj::DataView_obj()
{
}

void DataView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DataView);
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(byteLength,"byteLength");
	HX_MARK_MEMBER_NAME(byteOffset,"byteOffset");
	HX_MARK_END_CLASS();
}

void DataView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(byteLength,"byteLength");
	HX_VISIT_MEMBER_NAME(byteOffset,"byteOffset");
}

hx::Val DataView_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getInt8") ) { return hx::Val( getInt8_dyn() ); }
		if (HX_FIELD_EQ(inName,"setInt8") ) { return hx::Val( setInt8_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getInt16") ) { return hx::Val( getInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInt32") ) { return hx::Val( getInt32_dyn() ); }
		if (HX_FIELD_EQ(inName,"getUint8") ) { return hx::Val( getUint8_dyn() ); }
		if (HX_FIELD_EQ(inName,"setInt16") ) { return hx::Val( setInt16_dyn() ); }
		if (HX_FIELD_EQ(inName,"setInt32") ) { return hx::Val( setInt32_dyn() ); }
		if (HX_FIELD_EQ(inName,"setUint8") ) { return hx::Val( setUint8_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getUint16") ) { return hx::Val( getUint16_dyn() ); }
		if (HX_FIELD_EQ(inName,"getUint32") ) { return hx::Val( getUint32_dyn() ); }
		if (HX_FIELD_EQ(inName,"setUint16") ) { return hx::Val( setUint16_dyn() ); }
		if (HX_FIELD_EQ(inName,"setUint32") ) { return hx::Val( setUint32_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"byteLength") ) { return hx::Val( byteLength ); }
		if (HX_FIELD_EQ(inName,"byteOffset") ) { return hx::Val( byteOffset ); }
		if (HX_FIELD_EQ(inName,"getFloat32") ) { return hx::Val( getFloat32_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFloat64") ) { return hx::Val( getFloat64_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFloat32") ) { return hx::Val( setFloat32_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFloat64") ) { return hx::Val( setFloat64_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DataView_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast< ::Array< unsigned char > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"byteLength") ) { byteLength=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"byteOffset") ) { byteOffset=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DataView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("byteLength","\x0e","\x1e","\x0c","\x77"));
	outFields->push(HX_HCSTRING("byteOffset","\xbb","\x20","\x44","\x38"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DataView_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< unsigned char >*/ ,(int)offsetof(DataView_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsInt,(int)offsetof(DataView_obj,byteLength),HX_HCSTRING("byteLength","\x0e","\x1e","\x0c","\x77")},
	{hx::fsInt,(int)offsetof(DataView_obj,byteOffset),HX_HCSTRING("byteOffset","\xbb","\x20","\x44","\x38")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DataView_obj_sStaticStorageInfo = 0;
#endif

static ::String DataView_obj_sMemberFields[] = {
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("byteLength","\x0e","\x1e","\x0c","\x77"),
	HX_HCSTRING("byteOffset","\xbb","\x20","\x44","\x38"),
	HX_HCSTRING("getInt8","\x1f","\xf4","\x3d","\x18"),
	HX_HCSTRING("getInt16","\x1e","\xa1","\xf7","\x1d"),
	HX_HCSTRING("getInt32","\xd8","\xa2","\xf7","\x1d"),
	HX_HCSTRING("getUint8","\xe8","\x32","\x74","\x03"),
	HX_HCSTRING("getUint16","\x35","\x52","\x38","\x02"),
	HX_HCSTRING("getUint32","\xef","\x53","\x38","\x02"),
	HX_HCSTRING("getFloat32","\x45","\x17","\x6a","\x39"),
	HX_HCSTRING("getFloat64","\xe4","\x19","\x6a","\x39"),
	HX_HCSTRING("setInt8","\x2b","\x85","\x3f","\x0b"),
	HX_HCSTRING("setInt16","\x92","\xfa","\x54","\xcc"),
	HX_HCSTRING("setInt32","\x4c","\xfc","\x54","\xcc"),
	HX_HCSTRING("setUint8","\x5c","\x8c","\xd1","\xb1"),
	HX_HCSTRING("setUint16","\x41","\x3e","\x89","\xe5"),
	HX_HCSTRING("setUint32","\xfb","\x3f","\x89","\xe5"),
	HX_HCSTRING("setFloat32","\xb9","\xb5","\xe7","\x3c"),
	HX_HCSTRING("setFloat64","\x58","\xb8","\xe7","\x3c"),
	::String(null()) };

static void DataView_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DataView_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DataView_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DataView_obj::__mClass,"__mClass");
};

#endif

hx::Class DataView_obj::__mClass;

void DataView_obj::__register()
{
	hx::Object *dummy = new DataView_obj;
	DataView_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("snow.api.buffers.DataView","\x49","\x4c","\x52","\x1f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DataView_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DataView_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DataView_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DataView_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DataView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DataView_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace api
} // end namespace buffers
