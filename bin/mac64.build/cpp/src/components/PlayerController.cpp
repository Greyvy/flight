// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_components_PlayerController
#include <components/PlayerController.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_luxe_Component
#include <luxe/Component.h>
#endif
#ifndef INCLUDED_luxe_Draw
#include <luxe/Draw.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_Input
#include <luxe/Input.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_CircleGeometry
#include <phoenix/geometry/CircleGeometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_79573e21d55de314_8_new,"components.PlayerController","new",0xeedd6547,"components.PlayerController.new","components/PlayerController.hx",8,0x5e47c4a8)
HX_LOCAL_STACK_FRAME(_hx_pos_79573e21d55de314_12_update,"components.PlayerController","update",0x0060bb82,"components.PlayerController.update","components/PlayerController.hx",12,0x5e47c4a8)
HX_LOCAL_STACK_FRAME(_hx_pos_0795afc6cab3c655_38_init,"components.PlayerController","init",0x0f93f049,"components.PlayerController.init","luxe/macros/ComponentRules.hx",38,0x7da94735)
HX_LOCAL_STACK_FRAME(_hx_pos_0795afc6cab3c655_50_ondestroy,"components.PlayerController","ondestroy",0x18ae79e2,"components.PlayerController.ondestroy","luxe/macros/ComponentRules.hx",50,0x7da94735)
HX_LOCAL_STACK_FRAME(_hx_pos_0795afc6cab3c655_62_onremoved,"components.PlayerController","onremoved",0xe7286c88,"components.PlayerController.onremoved","luxe/macros/ComponentRules.hx",62,0x7da94735)
namespace components{

void PlayerController_obj::__construct( ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_79573e21d55de314_8_new)
HXLINE(  10)		this->speed = ((Float)440);
HXLINE(   8)		super::__construct(_options);
            	}

Dynamic PlayerController_obj::__CreateEmpty() { return new PlayerController_obj; }

void *PlayerController_obj::_hx_vtable = 0;

Dynamic PlayerController_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayerController_obj > _hx_result = new PlayerController_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayerController_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x56fa0a3b) {
		if (inClassId<=(int)0x312a3b37) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x312a3b37;
		} else {
			return inClassId==(int)0x56fa0a3b;
		}
	} else {
		return inClassId==(int)0x6b65f151;
	}
}

void PlayerController_obj::update(Float dt){
            	HX_GC_STACKFRAME(&_hx_pos_79573e21d55de314_12_update)
HXLINE(  13)		if (::Luxe_obj::input->inputdown(HX_("left",07,08,b0,47))) {
HXLINE(  14)			 ::phoenix::Vector _g = this->get_pos();
HXDLIN(  14)			{
HXLINE(  14)				Float _g1 = _g->x;
HXDLIN(  14)				Float _x = (_g1 + (-(this->speed) * dt));
HXDLIN(  14)				_g->x = _x;
HXDLIN(  14)				if (!(_g->_construct)) {
HXLINE(  14)					bool _hx_tmp;
HXDLIN(  14)					if (hx::IsNotNull( _g->listen_x )) {
HXLINE(  14)						_hx_tmp = !(_g->ignore_listeners);
            					}
            					else {
HXLINE(  14)						_hx_tmp = false;
            					}
HXDLIN(  14)					if (_hx_tmp) {
HXLINE(  14)						_g->listen_x(_x);
            					}
            				}
            			}
            		}
HXLINE(  17)		if (::Luxe_obj::input->inputdown(HX_("up",5b,66,00,00))) {
HXLINE(  18)			 ::phoenix::Vector _g2 = this->get_pos();
HXDLIN(  18)			{
HXLINE(  18)				Float _g3 = _g2->y;
HXDLIN(  18)				Float _y = (_g3 + (-(this->speed) * dt));
HXDLIN(  18)				_g2->y = _y;
HXDLIN(  18)				if (!(_g2->_construct)) {
HXLINE(  18)					bool _hx_tmp1;
HXDLIN(  18)					if (hx::IsNotNull( _g2->listen_y )) {
HXLINE(  18)						_hx_tmp1 = !(_g2->ignore_listeners);
            					}
            					else {
HXLINE(  18)						_hx_tmp1 = false;
            					}
HXDLIN(  18)					if (_hx_tmp1) {
HXLINE(  18)						_g2->listen_y(_y);
            					}
            				}
            			}
            		}
HXLINE(  21)		if (::Luxe_obj::input->inputdown(HX_("right",dc,0b,64,e9))) {
HXLINE(  22)			 ::phoenix::Vector _g4 = this->get_pos();
HXDLIN(  22)			{
HXLINE(  22)				Float _g5 = _g4->x;
HXDLIN(  22)				Float _x1 = (_g5 + (this->speed * dt));
HXDLIN(  22)				_g4->x = _x1;
HXDLIN(  22)				if (!(_g4->_construct)) {
HXLINE(  22)					bool _hx_tmp2;
HXDLIN(  22)					if (hx::IsNotNull( _g4->listen_x )) {
HXLINE(  22)						_hx_tmp2 = !(_g4->ignore_listeners);
            					}
            					else {
HXLINE(  22)						_hx_tmp2 = false;
            					}
HXDLIN(  22)					if (_hx_tmp2) {
HXLINE(  22)						_g4->listen_x(_x1);
            					}
            				}
            			}
            		}
HXLINE(  25)		if (::Luxe_obj::input->inputdown(HX_("down",62,f8,6d,42))) {
HXLINE(  26)			 ::phoenix::Vector _g6 = this->get_pos();
HXDLIN(  26)			{
HXLINE(  26)				Float _g7 = _g6->y;
HXDLIN(  26)				Float _y1 = (_g7 + (this->speed * dt));
HXDLIN(  26)				_g6->y = _y1;
HXDLIN(  26)				if (!(_g6->_construct)) {
HXLINE(  26)					bool _hx_tmp3;
HXDLIN(  26)					if (hx::IsNotNull( _g6->listen_y )) {
HXLINE(  26)						_hx_tmp3 = !(_g6->ignore_listeners);
            					}
            					else {
HXLINE(  26)						_hx_tmp3 = false;
            					}
HXDLIN(  26)					if (_hx_tmp3) {
HXLINE(  26)						_g6->listen_y(_y1);
            					}
            				}
            			}
            		}
HXLINE(  29)		if (::Luxe_obj::input->inputdown(HX_("teleport",ab,a2,33,f3))) {
HXLINE(  31)			 ::phoenix::Vector _hx_tmp4 = this->get_pos();
HXLINE(  33)			 ::phoenix::geometry::Geometry _hx_tmp5 = ( ( ::phoenix::geometry::Geometry)(::Luxe_obj::draw->circle( ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("r",72,00,00,00),(int)2)
            				->setFixed(1,HX_("x",78,00,00,00),(int)0)
            				->setFixed(2,HX_("y",79,00,00,00),(int)40)))) );
HXLINE(  30)			 ::luxe::Visual_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("geometry",b2,02,a9,d2),_hx_tmp5)
            				->setFixed(1,HX_("depth",03,f1,29,d7),(int)3)
            				->setFixed(2,HX_("pos",94,5d,55,00),_hx_tmp4)
            				->setFixed(3,HX_("color",63,71,5c,4a), ::phoenix::Color_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)1,((Float)0.5)))));
            		}
HXLINE(  38)		 ::Dynamic _hx_tmp6 = ::haxe::Log_obj::trace;
HXDLIN(  38)		::String _hx_tmp7 = (HX_("i / playercontroller / ",ac,f6,cc,23) + ::Std_obj::string(this->get_pos()));
HXDLIN(  38)		_hx_tmp6(_hx_tmp7,hx::SourceInfo(HX_("PlayerController.hx",61,87,7b,c0),38,HX_("components.PlayerController",d5,b5,49,4c),HX_("update",09,86,05,87)));
            	}


void PlayerController_obj::init(){
            	HX_STACKFRAME(&_hx_pos_0795afc6cab3c655_38_init)
HXDLIN(  38)		this->super::init();
            	}


void PlayerController_obj::ondestroy(){
            	HX_STACKFRAME(&_hx_pos_0795afc6cab3c655_50_ondestroy)
HXDLIN(  50)		this->super::ondestroy();
            	}


void PlayerController_obj::onremoved(){
            	HX_STACKFRAME(&_hx_pos_0795afc6cab3c655_62_onremoved)
HXDLIN(  62)		this->super::onremoved();
            	}



hx::ObjectPtr< PlayerController_obj > PlayerController_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< PlayerController_obj > __this = new PlayerController_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< PlayerController_obj > PlayerController_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	PlayerController_obj *__this = (PlayerController_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayerController_obj), true, "components.PlayerController"));
	*(void **)__this = PlayerController_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

PlayerController_obj::PlayerController_obj()
{
}

hx::Val PlayerController_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ondestroy") ) { return hx::Val( ondestroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"onremoved") ) { return hx::Val( onremoved_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayerController_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayerController_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayerController_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(PlayerController_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayerController_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayerController_obj_sMemberFields[] = {
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("ondestroy","\xbb","\xbd","\xdf","\x2e"),
	HX_HCSTRING("onremoved","\x61","\xb0","\x59","\xfd"),
	::String(null()) };

static void PlayerController_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayerController_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayerController_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayerController_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayerController_obj::__mClass;

void PlayerController_obj::__register()
{
	hx::Object *dummy = new PlayerController_obj;
	PlayerController_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("components.PlayerController","\xd5","\xb5","\x49","\x4c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayerController_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayerController_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayerController_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayerController_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayerController_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayerController_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace components
