// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_components_PlayerController
#include <components/PlayerController.h>
#endif
#ifndef INCLUDED_entities_Player
#include <entities/Player.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_luxe_Camera
#include <luxe/Camera.h>
#endif
#ifndef INCLUDED_luxe_Component
#include <luxe/Component.h>
#endif
#ifndef INCLUDED_luxe_Cursor
#include <luxe/Cursor.h>
#endif
#ifndef INCLUDED_luxe_Draw
#include <luxe/Draw.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Screen
#include <luxe/Screen.h>
#endif
#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
#ifndef INCLUDED_luxe_components_Components
#include <luxe/components/Components.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_CircleGeometry
#include <phoenix/geometry/CircleGeometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_57f67ed96780d88a_10_new,"entities.Player","new",0x0cad9a00,"entities.Player.new","entities/Player.hx",10,0x7a521d4f)
HX_LOCAL_STACK_FRAME(_hx_pos_57f67ed96780d88a_16_init,"entities.Player","init",0x07f1dd70,"entities.Player.init","entities/Player.hx",16,0x7a521d4f)
HX_LOCAL_STACK_FRAME(_hx_pos_57f67ed96780d88a_37_update,"entities.Player","update",0x3df18069,"entities.Player.update","entities/Player.hx",37,0x7a521d4f)
HX_LOCAL_STACK_FRAME(_hx_pos_a17368351c684beb_47_ondestroy,"entities.Player","ondestroy",0xdba07f5b,"entities.Player.ondestroy","luxe/macros/EntityRules.hx",47,0xed942299)
namespace entities{

void Player_obj::__construct( ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_57f67ed96780d88a_10_new)
HXDLIN(  10)		super::__construct(_options);
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0bbca018) {
		if (inClassId<=(int)0x099ca90a) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x099ca90a;
		} else {
			return inClassId==(int)0x0bbca018;
		}
	} else {
		return inClassId==(int)0x17ed3881 || inClassId==(int)0x7fff6182;
	}
}

void Player_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_57f67ed96780d88a_16_init)
HXLINE(  17)		 ::phoenix::Color colors_white;
HXDLIN(  17)		 ::phoenix::Color colors_black;
HXDLIN(  17)		colors_white =  ::phoenix::Color_obj::__alloc( HX_CTX ,(int)1,(int)1,(int)1,(int)1);
HXDLIN(  17)		colors_black =  ::phoenix::Color_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)1);
HXLINE(  20)		 ::phoenix::Vector _hx_tmp = this->get_pos();
HXLINE(  18)		this->spr =  ::luxe::Visual_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("geometry",b2,02,a9,d2),::Luxe_obj::draw->ngon( ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("solid",2b,b4,c5,80),true)
            				->setFixed(1,HX_("r",72,00,00,00),(int)16)
            				->setFixed(2,HX_("x",78,00,00,00),(int)0)
            				->setFixed(3,HX_("y",79,00,00,00),(int)0)
            				->setFixed(4,HX_("sides",fc,56,c8,7c),(int)3))))
            			->setFixed(1,HX_("pos",94,5d,55,00),_hx_tmp)
            			->setFixed(2,HX_("name",4b,72,ff,48),HX_("player_sprite",63,a0,34,dc))
            			->setFixed(3,HX_("color",63,71,5c,4a),colors_white)));
HXLINE(  28)		 ::phoenix::Vector _hx_tmp1 = this->get_pos();
HXLINE(  25)		this->dir =  ::luxe::Visual_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("geometry",b2,02,a9,d2),( ( ::phoenix::geometry::Geometry)(::Luxe_obj::draw->circle( ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("r",72,00,00,00),(int)2)
            				->setFixed(1,HX_("x",78,00,00,00),(int)0)
            				->setFixed(2,HX_("y",79,00,00,00),(int)-10)))) ))
            			->setFixed(1,HX_("depth",03,f1,29,d7),(int)1)
            			->setFixed(2,HX_("pos",94,5d,55,00),_hx_tmp1)
            			->setFixed(3,HX_("name",4b,72,ff,48),HX_("player_direction",a1,2c,56,7a))
            			->setFixed(4,HX_("color",63,71,5c,4a),colors_black)));
HXLINE(  33)		{
HXLINE(  33)			 ::components::PlayerController _component =  ::components::PlayerController_obj::__alloc( HX_CTX ,null());
HXDLIN(  33)			this->component_count++;
HXDLIN(  33)			this->_components->add(_component).StaticCast<  ::components::PlayerController >();
            		}
            	}


void Player_obj::update(Float dt){
            	HX_GC_STACKFRAME(&_hx_pos_57f67ed96780d88a_37_update)
HXLINE(  38)		this->mouse = ::Luxe_obj::core->screen->cursor->get_pos();
HXLINE(  40)		 ::phoenix::Vector lhs = this->mouse;
HXDLIN(  40)		 ::luxe::Camera rhs = ::Luxe_obj::camera;
HXDLIN(  40)		 ::phoenix::Vector rhs1 = rhs->world_point_to_screen(this->get_pos(),null());
HXDLIN(  40)		Float rot = (lhs->x - rhs1->x);
HXDLIN(  40)		Float rot1 = (lhs->y - rhs1->y);
HXDLIN(  40)		 ::phoenix::Vector rot2 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,rot,rot1,(lhs->z - rhs1->z),null());
HXLINE(  41)		 ::luxe::Visual _hx_tmp = this->spr;
HXDLIN(  41)		_hx_tmp->set_pos(this->get_pos());
HXLINE(  42)		 ::luxe::Visual _hx_tmp1 = this->dir;
HXDLIN(  42)		_hx_tmp1->set_pos(this->get_pos());
HXLINE(  43)		 ::luxe::Visual _hx_tmp2 = this->spr;
HXDLIN(  43)		Float _hx_tmp3 = ::Math_obj::atan2(rot2->y,rot2->x);
HXDLIN(  43)		_hx_tmp2->set_radians((_hx_tmp3 + ((Float)::Math_obj::PI / (Float)(int)2)));
HXLINE(  44)		 ::luxe::Visual _hx_tmp4 = this->dir;
HXDLIN(  44)		Float _hx_tmp5 = ::Math_obj::atan2(rot2->y,rot2->x);
HXDLIN(  44)		_hx_tmp4->set_radians((_hx_tmp5 + ((Float)::Math_obj::PI / (Float)(int)2)));
HXLINE(  45)		 ::Dynamic _hx_tmp6 = ::haxe::Log_obj::trace;
HXDLIN(  45)		::String _hx_tmp7 = (HX_("   i / player / ",e8,7a,cb,61) + this->get_pos()->x);
HXDLIN(  45)		_hx_tmp6(_hx_tmp7,hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),45,HX_("entities.Player",0e,da,e0,13),HX_("update",09,86,05,87)));
            	}


void Player_obj::ondestroy(){
            	HX_STACKFRAME(&_hx_pos_a17368351c684beb_47_ondestroy)
HXDLIN(  47)		this->super::ondestroy();
            	}



hx::ObjectPtr< Player_obj > Player_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "entities.Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(spr,"spr");
	HX_MARK_MEMBER_NAME(dir,"dir");
	HX_MARK_MEMBER_NAME(mouse,"mouse");
	 ::luxe::Entity_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(spr,"spr");
	HX_VISIT_MEMBER_NAME(dir,"dir");
	HX_VISIT_MEMBER_NAME(mouse,"mouse");
	 ::luxe::Entity_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"spr") ) { return hx::Val( spr ); }
		if (HX_FIELD_EQ(inName,"dir") ) { return hx::Val( dir ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mouse") ) { return hx::Val( mouse ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ondestroy") ) { return hx::Val( ondestroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"spr") ) { spr=inValue.Cast<  ::luxe::Visual >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dir") ) { dir=inValue.Cast<  ::luxe::Visual >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mouse") ) { mouse=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("spr","\x35","\xa5","\x57","\x00"));
	outFields->push(HX_HCSTRING("dir","\x4d","\x3d","\x4c","\x00"));
	outFields->push(HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::Visual*/ ,(int)offsetof(Player_obj,spr),HX_HCSTRING("spr","\x35","\xa5","\x57","\x00")},
	{hx::fsObject /*::luxe::Visual*/ ,(int)offsetof(Player_obj,dir),HX_HCSTRING("dir","\x4d","\x3d","\x4c","\x00")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Player_obj,mouse),HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("spr","\x35","\xa5","\x57","\x00"),
	HX_HCSTRING("dir","\x4d","\x3d","\x4c","\x00"),
	HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("ondestroy","\xbb","\xbd","\xdf","\x2e"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("entities.Player","\x0e","\xda","\xe0","\x13");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace entities
