// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_opengl_GLObject
#include <opengl/GLObject.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_phoenix_Vector
#include <phoenix/_Shader/Uniform_phoenix_Vector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5548bfc3cefef799_734_new,"phoenix._Shader.Uniform_phoenix_Vector","new",0x82def399,"phoenix._Shader.Uniform_phoenix_Vector.new","phoenix/Shader.hx",734,0x14ec92d9)
namespace phoenix{
namespace _Shader{

void Uniform_phoenix_Vector_obj::__construct(::String _name, ::phoenix::Vector _value, ::opengl::GLObject _location){
            	HX_STACKFRAME(&_hx_pos_5548bfc3cefef799_734_new)
HXLINE( 735)		this->name = _name;
HXLINE( 736)		this->value = _value;
HXLINE( 737)		this->location = _location;
            	}

Dynamic Uniform_phoenix_Vector_obj::__CreateEmpty() { return new Uniform_phoenix_Vector_obj; }

void *Uniform_phoenix_Vector_obj::_hx_vtable = 0;

Dynamic Uniform_phoenix_Vector_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Uniform_phoenix_Vector_obj > _hx_result = new Uniform_phoenix_Vector_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Uniform_phoenix_Vector_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x056b9bb7;
}


hx::ObjectPtr< Uniform_phoenix_Vector_obj > Uniform_phoenix_Vector_obj::__new(::String _name, ::phoenix::Vector _value, ::opengl::GLObject _location) {
	hx::ObjectPtr< Uniform_phoenix_Vector_obj > __this = new Uniform_phoenix_Vector_obj();
	__this->__construct(_name,_value,_location);
	return __this;
}

hx::ObjectPtr< Uniform_phoenix_Vector_obj > Uniform_phoenix_Vector_obj::__alloc(hx::Ctx *_hx_ctx,::String _name, ::phoenix::Vector _value, ::opengl::GLObject _location) {
	Uniform_phoenix_Vector_obj *__this = (Uniform_phoenix_Vector_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Uniform_phoenix_Vector_obj), true, "phoenix._Shader.Uniform_phoenix_Vector"));
	*(void **)__this = Uniform_phoenix_Vector_obj::_hx_vtable;
	__this->__construct(_name,_value,_location);
	return __this;
}

Uniform_phoenix_Vector_obj::Uniform_phoenix_Vector_obj()
{
}

void Uniform_phoenix_Vector_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Uniform_phoenix_Vector);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(location,"location");
	HX_MARK_END_CLASS();
}

void Uniform_phoenix_Vector_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(location,"location");
}

hx::Val Uniform_phoenix_Vector_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"location") ) { return hx::Val( location ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Uniform_phoenix_Vector_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"location") ) { location=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Uniform_phoenix_Vector_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("location","\x35","\x6e","\x46","\xe5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Uniform_phoenix_Vector_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Uniform_phoenix_Vector_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Uniform_phoenix_Vector_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Uniform_phoenix_Vector_obj,location),HX_HCSTRING("location","\x35","\x6e","\x46","\xe5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Uniform_phoenix_Vector_obj_sStaticStorageInfo = 0;
#endif

static ::String Uniform_phoenix_Vector_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("location","\x35","\x6e","\x46","\xe5"),
	::String(null()) };

static void Uniform_phoenix_Vector_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Uniform_phoenix_Vector_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Uniform_phoenix_Vector_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Uniform_phoenix_Vector_obj::__mClass,"__mClass");
};

#endif

hx::Class Uniform_phoenix_Vector_obj::__mClass;

void Uniform_phoenix_Vector_obj::__register()
{
	hx::Object *dummy = new Uniform_phoenix_Vector_obj;
	Uniform_phoenix_Vector_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix._Shader.Uniform_phoenix_Vector","\x27","\x33","\x6d","\xc5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Uniform_phoenix_Vector_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Uniform_phoenix_Vector_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Uniform_phoenix_Vector_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Uniform_phoenix_Vector_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Uniform_phoenix_Vector_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Uniform_phoenix_Vector_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
} // end namespace _Shader
