// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix__Vector_Vec_Impl_
#include <phoenix/_Vector/Vec_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_4bfc9300bca7ea64_887__new,"phoenix._Vector.Vec_Impl_","_new",0x7addb3a6,"phoenix._Vector.Vec_Impl_._new","phoenix/Vector.hx",887,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_4bfc9300bca7ea64_892__multiply,"phoenix._Vector.Vec_Impl_","_multiply",0x4f47611e,"phoenix._Vector.Vec_Impl_._multiply","phoenix/Vector.hx",892,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_4bfc9300bca7ea64_895__multiply_scalar,"phoenix._Vector.Vec_Impl_","_multiply_scalar",0xb35d176d,"phoenix._Vector.Vec_Impl_._multiply_scalar","phoenix/Vector.hx",895,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_4bfc9300bca7ea64_898__multiply_scalar_int,"phoenix._Vector.Vec_Impl_","_multiply_scalar_int",0x5efd23dd,"phoenix._Vector.Vec_Impl_._multiply_scalar_int","phoenix/Vector.hx",898,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_4bfc9300bca7ea64_902__divide,"phoenix._Vector.Vec_Impl_","_divide",0xf9dd1bf3,"phoenix._Vector.Vec_Impl_._divide","phoenix/Vector.hx",902,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_4bfc9300bca7ea64_905__divide_scalar,"phoenix._Vector.Vec_Impl_","_divide_scalar",0xf34b9138,"phoenix._Vector.Vec_Impl_._divide_scalar","phoenix/Vector.hx",905,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_4bfc9300bca7ea64_908__divide_scalar_int,"phoenix._Vector.Vec_Impl_","_divide_scalar_int",0x8c73df28,"phoenix._Vector.Vec_Impl_._divide_scalar_int","phoenix/Vector.hx",908,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_4bfc9300bca7ea64_912__add,"phoenix._Vector.Vec_Impl_","_add",0x7ad3d567,"phoenix._Vector.Vec_Impl_._add","phoenix/Vector.hx",912,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_4bfc9300bca7ea64_915__add_scalar,"phoenix._Vector.Vec_Impl_","_add_scalar",0x7c69ae44,"phoenix._Vector.Vec_Impl_._add_scalar","phoenix/Vector.hx",915,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_4bfc9300bca7ea64_918__add_scalar_int,"phoenix._Vector.Vec_Impl_","_add_scalar_int",0x84337234,"phoenix._Vector.Vec_Impl_._add_scalar_int","phoenix/Vector.hx",918,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_4bfc9300bca7ea64_922__subtract,"phoenix._Vector.Vec_Impl_","_subtract",0xaccbf40e,"phoenix._Vector.Vec_Impl_._subtract","phoenix/Vector.hx",922,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_4bfc9300bca7ea64_925__subtract_scalar,"phoenix._Vector.Vec_Impl_","_subtract_scalar",0x32b9c27d,"phoenix._Vector.Vec_Impl_._subtract_scalar","phoenix/Vector.hx",925,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_4bfc9300bca7ea64_928__subtract_scalar_int,"phoenix._Vector.Vec_Impl_","_subtract_scalar_int",0x77f496ed,"phoenix._Vector.Vec_Impl_._subtract_scalar_int","phoenix/Vector.hx",928,0x5d0bf7fb)
namespace phoenix{
namespace _Vector{

void Vec_Impl__obj::__construct() { }

Dynamic Vec_Impl__obj::__CreateEmpty() { return new Vec_Impl__obj; }

void *Vec_Impl__obj::_hx_vtable = 0;

Dynamic Vec_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vec_Impl__obj > _hx_result = new Vec_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Vec_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3ff403a1;
}

 ::phoenix::Vector Vec_Impl__obj::_new( ::Dynamic _x, ::Dynamic _y, ::Dynamic _z, ::Dynamic _w){
            	HX_GC_STACKFRAME(&_hx_pos_4bfc9300bca7ea64_887__new)
HXDLIN( 887)		 ::phoenix::Vector this1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_x,_y,_z,_w);
HXDLIN( 887)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Vec_Impl__obj,_new,return )

 ::phoenix::Vector Vec_Impl__obj::_multiply( ::phoenix::Vector lhs, ::phoenix::Vector rhs){
            	HX_GC_STACKFRAME(&_hx_pos_4bfc9300bca7ea64_892__multiply)
HXDLIN( 892)		Float _hx_tmp = (lhs->x * rhs->x);
HXDLIN( 892)		Float _hx_tmp1 = (lhs->y * rhs->y);
HXDLIN( 892)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(lhs->z * rhs->z),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_Impl__obj,_multiply,return )

 ::phoenix::Vector Vec_Impl__obj::_multiply_scalar( ::phoenix::Vector lhs,Float rhs){
            	HX_GC_STACKFRAME(&_hx_pos_4bfc9300bca7ea64_895__multiply_scalar)
HXDLIN( 895)		Float _hx_tmp = (lhs->x * rhs);
HXDLIN( 895)		Float _hx_tmp1 = (lhs->y * rhs);
HXDLIN( 895)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(lhs->z * rhs),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_Impl__obj,_multiply_scalar,return )

 ::phoenix::Vector Vec_Impl__obj::_multiply_scalar_int( ::phoenix::Vector lhs,int rhs){
            	HX_GC_STACKFRAME(&_hx_pos_4bfc9300bca7ea64_898__multiply_scalar_int)
HXDLIN( 898)		Float _hx_tmp = (lhs->x * rhs);
HXDLIN( 898)		Float _hx_tmp1 = (lhs->y * rhs);
HXDLIN( 898)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(lhs->z * rhs),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_Impl__obj,_multiply_scalar_int,return )

 ::phoenix::Vector Vec_Impl__obj::_divide( ::phoenix::Vector lhs, ::phoenix::Vector rhs){
            	HX_GC_STACKFRAME(&_hx_pos_4bfc9300bca7ea64_902__divide)
HXDLIN( 902)		Float _hx_tmp = ((Float)lhs->x / (Float)rhs->x);
HXDLIN( 902)		Float _hx_tmp1 = ((Float)lhs->y / (Float)rhs->y);
HXDLIN( 902)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,((Float)lhs->z / (Float)rhs->z),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_Impl__obj,_divide,return )

 ::phoenix::Vector Vec_Impl__obj::_divide_scalar( ::phoenix::Vector lhs,Float rhs){
            	HX_GC_STACKFRAME(&_hx_pos_4bfc9300bca7ea64_905__divide_scalar)
HXDLIN( 905)		Float _hx_tmp = ((Float)lhs->x / (Float)rhs);
HXDLIN( 905)		Float _hx_tmp1 = ((Float)lhs->y / (Float)rhs);
HXDLIN( 905)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,((Float)lhs->z / (Float)rhs),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_Impl__obj,_divide_scalar,return )

 ::phoenix::Vector Vec_Impl__obj::_divide_scalar_int( ::phoenix::Vector lhs,int rhs){
            	HX_GC_STACKFRAME(&_hx_pos_4bfc9300bca7ea64_908__divide_scalar_int)
HXDLIN( 908)		Float _hx_tmp = ((Float)lhs->x / (Float)rhs);
HXDLIN( 908)		Float _hx_tmp1 = ((Float)lhs->y / (Float)rhs);
HXDLIN( 908)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,((Float)lhs->z / (Float)rhs),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_Impl__obj,_divide_scalar_int,return )

 ::phoenix::Vector Vec_Impl__obj::_add( ::phoenix::Vector lhs, ::phoenix::Vector rhs){
            	HX_GC_STACKFRAME(&_hx_pos_4bfc9300bca7ea64_912__add)
HXDLIN( 912)		Float _hx_tmp = (lhs->x + rhs->x);
HXDLIN( 912)		Float _hx_tmp1 = (lhs->y + rhs->y);
HXDLIN( 912)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(lhs->z + rhs->z),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_Impl__obj,_add,return )

 ::phoenix::Vector Vec_Impl__obj::_add_scalar( ::phoenix::Vector lhs,Float rhs){
            	HX_GC_STACKFRAME(&_hx_pos_4bfc9300bca7ea64_915__add_scalar)
HXDLIN( 915)		Float _hx_tmp = (lhs->x + rhs);
HXDLIN( 915)		Float _hx_tmp1 = (lhs->y + rhs);
HXDLIN( 915)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(lhs->z + rhs),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_Impl__obj,_add_scalar,return )

 ::phoenix::Vector Vec_Impl__obj::_add_scalar_int( ::phoenix::Vector lhs,int rhs){
            	HX_GC_STACKFRAME(&_hx_pos_4bfc9300bca7ea64_918__add_scalar_int)
HXDLIN( 918)		Float _hx_tmp = (lhs->x + rhs);
HXDLIN( 918)		Float _hx_tmp1 = (lhs->y + rhs);
HXDLIN( 918)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(lhs->z + rhs),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_Impl__obj,_add_scalar_int,return )

 ::phoenix::Vector Vec_Impl__obj::_subtract( ::phoenix::Vector lhs, ::phoenix::Vector rhs){
            	HX_GC_STACKFRAME(&_hx_pos_4bfc9300bca7ea64_922__subtract)
HXDLIN( 922)		Float _hx_tmp = (lhs->x - rhs->x);
HXDLIN( 922)		Float _hx_tmp1 = (lhs->y - rhs->y);
HXDLIN( 922)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(lhs->z - rhs->z),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_Impl__obj,_subtract,return )

 ::phoenix::Vector Vec_Impl__obj::_subtract_scalar( ::phoenix::Vector lhs,Float rhs){
            	HX_GC_STACKFRAME(&_hx_pos_4bfc9300bca7ea64_925__subtract_scalar)
HXDLIN( 925)		Float _hx_tmp = (lhs->x - rhs);
HXDLIN( 925)		Float _hx_tmp1 = (lhs->y - rhs);
HXDLIN( 925)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(lhs->z - rhs),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_Impl__obj,_subtract_scalar,return )

 ::phoenix::Vector Vec_Impl__obj::_subtract_scalar_int( ::phoenix::Vector lhs,int rhs){
            	HX_GC_STACKFRAME(&_hx_pos_4bfc9300bca7ea64_928__subtract_scalar_int)
HXDLIN( 928)		Float _hx_tmp = (lhs->x - rhs);
HXDLIN( 928)		Float _hx_tmp1 = (lhs->y - rhs);
HXDLIN( 928)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(lhs->z - rhs),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_Impl__obj,_subtract_scalar_int,return )


Vec_Impl__obj::Vec_Impl__obj()
{
}

bool Vec_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_add") ) { outValue = _add_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_divide") ) { outValue = _divide_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_multiply") ) { outValue = _multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_subtract") ) { outValue = _subtract_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_add_scalar") ) { outValue = _add_scalar_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_divide_scalar") ) { outValue = _divide_scalar_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_add_scalar_int") ) { outValue = _add_scalar_int_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_multiply_scalar") ) { outValue = _multiply_scalar_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_subtract_scalar") ) { outValue = _subtract_scalar_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_divide_scalar_int") ) { outValue = _divide_scalar_int_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_multiply_scalar_int") ) { outValue = _multiply_scalar_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_subtract_scalar_int") ) { outValue = _subtract_scalar_int_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Vec_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Vec_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Vec_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vec_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vec_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vec_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Vec_Impl__obj::__mClass;

static ::String Vec_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("_multiply","\x83","\xd9","\x22","\xe2"),
	HX_HCSTRING("_multiply_scalar","\xa8","\xa5","\x47","\x38"),
	HX_HCSTRING("_multiply_scalar_int","\x98","\xeb","\xea","\x7f"),
	HX_HCSTRING("_divide","\x18","\x41","\x89","\x2d"),
	HX_HCSTRING("_divide_scalar","\xb3","\x8a","\xe8","\x5b"),
	HX_HCSTRING("_divide_scalar_int","\x23","\xb2","\xca","\x0b"),
	HX_HCSTRING("_add","\x22","\x37","\x15","\x3f"),
	HX_HCSTRING("_add_scalar","\xe9","\xc9","\x5f","\x17"),
	HX_HCSTRING("_add_scalar_int","\x59","\xc4","\xf0","\xa4"),
	HX_HCSTRING("_subtract","\x73","\x6c","\xa7","\x3f"),
	HX_HCSTRING("_subtract_scalar","\xb8","\x50","\xa4","\xb7"),
	HX_HCSTRING("_subtract_scalar_int","\xa8","\x5e","\xe2","\x98"),
	::String(null())
};

void Vec_Impl__obj::__register()
{
	hx::Object *dummy = new Vec_Impl__obj;
	Vec_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix._Vector.Vec_Impl_","\x49","\x68","\xc4","\xe7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vec_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Vec_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vec_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Vec_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vec_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vec_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vec_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
} // end namespace _Vector
