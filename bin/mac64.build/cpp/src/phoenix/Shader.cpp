// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_9484b18fc186cc5e
#define INCLUDED_9484b18fc186cc5e
#include "linc_opengl.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_opengl_GLObject
#include <opengl/GLObject.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Matrix
#include <phoenix/Matrix.h>
#endif
#ifndef INCLUDED_phoenix_RenderState
#include <phoenix/RenderState.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_Shader
#include <phoenix/Shader.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_Uniforms
#include <phoenix/Uniforms.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_Float
#include <phoenix/_Shader/Uniform_Float.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_Int
#include <phoenix/_Shader/Uniform_Int.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_phoenix_Color
#include <phoenix/_Shader/Uniform_phoenix_Color.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_phoenix_Matrix
#include <phoenix/_Shader/Uniform_phoenix_Matrix.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_phoenix_Texture
#include <phoenix/_Shader/Uniform_phoenix_Texture.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_phoenix_Vector
#include <phoenix/_Shader/Uniform_phoenix_Vector.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_snow_api_buffers_Float32Array
#include <phoenix/_Shader/Uniform_snow_api_buffers_Float32Array.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Asset
#include <snow/systems/assets/Asset.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetText
#include <snow/systems/assets/AssetText.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Assets
#include <snow/systems/assets/Assets.h>
#endif
#ifndef INCLUDED_snow_types_Error
#include <snow/types/Error.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_77ebcf76d410ae32_361_new,"phoenix.Shader","new",0xb939fd36,"phoenix.Shader.new","phoenix/Shader.hx",361,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_397_activate,"phoenix.Shader","activate",0x6f45a71d,"phoenix.Shader.activate","phoenix/Shader.hx",397,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_410_use,"phoenix.Shader","use",0xb93f591d,"phoenix.Shader.use","phoenix/Shader.hx",410,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_418_deactivate,"phoenix.Shader","deactivate",0x87a4161e,"phoenix.Shader.deactivate","phoenix/Shader.hx",418,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_423_clone,"phoenix.Shader","clone",0xa8cea1b3,"phoenix.Shader.clone","phoenix/Shader.hx",423,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_438_set_int,"phoenix.Shader","set_int",0x16f2b668,"phoenix.Shader.set_int","phoenix/Shader.hx",438,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_442_set_float,"phoenix.Shader","set_float",0x06517f55,"phoenix.Shader.set_float","phoenix/Shader.hx",442,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_446_set_vector2,"phoenix.Shader","set_vector2",0x4dc45408,"phoenix.Shader.set_vector2","phoenix/Shader.hx",446,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_450_set_vector2_arr,"phoenix.Shader","set_vector2_arr",0x02c83b6a,"phoenix.Shader.set_vector2_arr","phoenix/Shader.hx",450,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_454_set_vector3,"phoenix.Shader","set_vector3",0x4dc45409,"phoenix.Shader.set_vector3","phoenix/Shader.hx",454,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_458_set_vector3_arr,"phoenix.Shader","set_vector3_arr",0x962ecfeb,"phoenix.Shader.set_vector3_arr","phoenix/Shader.hx",458,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_462_set_vector4,"phoenix.Shader","set_vector4",0x4dc4540a,"phoenix.Shader.set_vector4","phoenix/Shader.hx",462,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_466_set_vector4_arr,"phoenix.Shader","set_vector4_arr",0x2995646c,"phoenix.Shader.set_vector4_arr","phoenix/Shader.hx",466,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_470_set_matrix4,"phoenix.Shader","set_matrix4",0x068e9ccc,"phoenix.Shader.set_matrix4","phoenix/Shader.hx",470,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_474_set_matrix4_arr,"phoenix.Shader","set_matrix4_arr",0x9ce0362e,"phoenix.Shader.set_matrix4_arr","phoenix/Shader.hx",474,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_478_set_color,"phoenix.Shader","set_color",0x4e172b1c,"phoenix.Shader.set_color","phoenix/Shader.hx",478,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_482_set_texture,"phoenix.Shader","set_texture",0x120822d4,"phoenix.Shader.set_texture","phoenix/Shader.hx",482,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_486_compile,"phoenix.Shader","compile",0x809b7549,"phoenix.Shader.compile","phoenix/Shader.hx",486,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_503_compile,"phoenix.Shader","compile",0x809b7549,"phoenix.Shader.compile","phoenix/Shader.hx",503,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_511_compile,"phoenix.Shader","compile",0x809b7549,"phoenix.Shader.compile","phoenix/Shader.hx",511,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_523_link,"phoenix.Shader","link",0x58342664,"phoenix.Shader.link","phoenix/Shader.hx",523,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_540_link,"phoenix.Shader","link",0x58342664,"phoenix.Shader.link","phoenix/Shader.hx",540,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_583_location,"phoenix.Shader","location",0x6edff99f,"phoenix.Shader.location","phoenix/Shader.hx",583,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_588_clear,"phoenix.Shader","clear",0xa8c6ffe3,"phoenix.Shader.clear","phoenix/Shader.hx",588,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_620_reload,"phoenix.Shader","reload",0x01905043,"phoenix.Shader.reload","phoenix/Shader.hx",620,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_660_reload,"phoenix.Shader","reload",0x01905043,"phoenix.Shader.reload","phoenix/Shader.hx",660,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_668_reload,"phoenix.Shader","reload",0x01905043,"phoenix.Shader.reload","phoenix/Shader.hx",668,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_607_reload,"phoenix.Shader","reload",0x01905043,"phoenix.Shader.reload","phoenix/Shader.hx",607,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_633_reload,"phoenix.Shader","reload",0x01905043,"phoenix.Shader.reload","phoenix/Shader.hx",633,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_645_reload,"phoenix.Shader","reload",0x01905043,"phoenix.Shader.reload","phoenix/Shader.hx",645,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_601_reload,"phoenix.Shader","reload",0x01905043,"phoenix.Shader.reload","phoenix/Shader.hx",601,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_676_from_string,"phoenix.Shader","from_string",0x2d56691c,"phoenix.Shader.from_string","phoenix/Shader.hx",676,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_709_add_log,"phoenix.Shader","add_log",0x8dadfffc,"phoenix.Shader.add_log","phoenix/Shader.hx",709,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_713_toString,"phoenix.Shader","toString",0xc2085c16,"phoenix.Shader.toString","phoenix/Shader.hx",713,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_720_format_log,"phoenix.Shader","format_log",0x5f4c4a26,"phoenix.Shader.format_log","phoenix/Shader.hx",720,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_721_format_log,"phoenix.Shader","format_log",0x5f4c4a26,"phoenix.Shader.format_log","phoenix/Shader.hx",721,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_77ebcf76d410ae32_718_format_log,"phoenix.Shader","format_log",0x5f4c4a26,"phoenix.Shader.format_log","phoenix/Shader.hx",718,0x14ec92d9)
namespace phoenix{

void Shader_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_361_new)
HXLINE( 375)		this->no_default_uniforms = false;
HXLINE( 368)		this->frag_id = HX_("",00,00,00,00);
HXLINE( 367)		this->vert_id = HX_("",00,00,00,00);
HXLINE( 363)		this->log = HX_("",00,00,00,00);
HXLINE( 383)		if (hx::IsNull( _options )) {
HXLINE( 383)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("_options was null",3f,38,24,a1)));
            		}
HXLINE( 385)		_options->__SetField(HX_("resource_type",0b,87,30,9c),(int)7,hx::paccDynamic);
HXLINE( 387)		super::__construct(_options);
HXLINE( 389)		this->frag_id = ( (::String)(_options->__Field(HX_("frag_id",08,24,78,44),hx::paccDynamic)) );
HXLINE( 390)		this->vert_id = ( (::String)(_options->__Field(HX_("vert_id",e9,81,93,7d),hx::paccDynamic)) );
HXLINE( 391)		if (hx::IsNull( _options->__Field(HX_("no_default_uniforms",3b,80,7e,28),hx::paccDynamic) )) {
HXLINE( 391)			_options->__SetField(HX_("no_default_uniforms",3b,80,7e,28),false,hx::paccDynamic);
            		}
HXDLIN( 391)		this->no_default_uniforms = ( (bool)(_options->__Field(HX_("no_default_uniforms",3b,80,7e,28),hx::paccDynamic)) );
HXLINE( 393)		this->uniforms =  ::phoenix::Uniforms_obj::__alloc( HX_CTX );
            	}

Dynamic Shader_obj::__CreateEmpty() { return new Shader_obj; }

void *Shader_obj::_hx_vtable = 0;

Dynamic Shader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shader_obj > _hx_result = new Shader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Shader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x40d63fd6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x40d63fd6;
	} else {
		return inClassId==(int)0x45c2dc94;
	}
}

void Shader_obj::activate(){
            	HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_397_activate)
HXLINE( 399)		this->use();
HXLINE( 401)		this->uniforms->apply();
HXLINE( 404)		::Luxe_obj::renderer->state->activeTexture((int)33984);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,activate,(void))

void Shader_obj::use(){
            	HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_410_use)
HXDLIN( 410)		if (hx::IsNotNull( this->program )) {
HXLINE( 411)			::Luxe_obj::renderer->state->useProgram(this->program);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,use,(void))

void Shader_obj::deactivate(){
            	HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_418_deactivate)
HXDLIN( 418)		::Luxe_obj::renderer->state->useProgram(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,deactivate,(void))

 ::phoenix::Shader Shader_obj::clone(::String _id){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_423_clone)
HXLINE( 425)		 ::phoenix::Shader _clone =  ::phoenix::Shader_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("id",db,5b,00,00),_id)
            			->setFixed(1,HX_("frag_id",08,24,78,44),this->frag_id)
            			->setFixed(2,HX_("vert_id",e9,81,93,7d),this->vert_id)));
HXLINE( 431)		_clone->from_string(this->vert_source,this->frag_source);
HXLINE( 433)		return _clone;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,clone,return )

void Shader_obj::set_int(::String _name,int _value){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_438_set_int)
HXDLIN( 438)		 ::phoenix::Uniforms _this = this->uniforms;
HXDLIN( 438)		 ::opengl::GLObject program = this->program;
HXDLIN( 438)		int _id;
HXDLIN( 438)		if (hx::IsNull( program )) {
HXDLIN( 438)			_id = (int)0;
            		}
            		else {
HXDLIN( 438)			_id = program->id;
            		}
HXDLIN( 438)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,_name));
HXDLIN( 438)		 ::phoenix::_Shader::Uniform_Int _int = ( ( ::phoenix::_Shader::Uniform_Int)(::haxe::IMap_obj::get(_this->ints,_name)) );
HXDLIN( 438)		if (hx::IsNotNull( _int )) {
HXDLIN( 438)			_int->value = _value;
            		}
            		else {
HXDLIN( 438)			_int =  ::phoenix::_Shader::Uniform_Int_obj::__alloc( HX_CTX ,_name,_value,this1);
HXDLIN( 438)			::haxe::IMap_obj::set(_this->ints,_name,_int);
            		}
HXDLIN( 438)		_this->dirty_ints->push(_int);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,set_int,(void))

void Shader_obj::set_float(::String _name,Float _value){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_442_set_float)
HXDLIN( 442)		 ::phoenix::Uniforms _this = this->uniforms;
HXDLIN( 442)		 ::opengl::GLObject program = this->program;
HXDLIN( 442)		int _id;
HXDLIN( 442)		if (hx::IsNull( program )) {
HXDLIN( 442)			_id = (int)0;
            		}
            		else {
HXDLIN( 442)			_id = program->id;
            		}
HXDLIN( 442)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,_name));
HXDLIN( 442)		 ::phoenix::_Shader::Uniform_Float _float = ( ( ::phoenix::_Shader::Uniform_Float)(::haxe::IMap_obj::get(_this->floats,_name)) );
HXDLIN( 442)		if (hx::IsNotNull( _float )) {
HXDLIN( 442)			_float->value = _value;
            		}
            		else {
HXDLIN( 442)			_float =  ::phoenix::_Shader::Uniform_Float_obj::__alloc( HX_CTX ,_name,_value,this1);
HXDLIN( 442)			::haxe::IMap_obj::set(_this->floats,_name,_float);
            		}
HXDLIN( 442)		_this->dirty_floats->push(_float);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,set_float,(void))

void Shader_obj::set_vector2(::String _name, ::phoenix::Vector _value){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_446_set_vector2)
HXDLIN( 446)		 ::phoenix::Uniforms _this = this->uniforms;
HXDLIN( 446)		 ::opengl::GLObject program = this->program;
HXDLIN( 446)		int _id;
HXDLIN( 446)		if (hx::IsNull( program )) {
HXDLIN( 446)			_id = (int)0;
            		}
            		else {
HXDLIN( 446)			_id = program->id;
            		}
HXDLIN( 446)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,_name));
HXDLIN( 446)		 ::phoenix::_Shader::Uniform_phoenix_Vector _vector2 = ( ( ::phoenix::_Shader::Uniform_phoenix_Vector)(::haxe::IMap_obj::get(_this->vector2s,_name)) );
HXDLIN( 446)		if (hx::IsNotNull( _vector2 )) {
HXDLIN( 446)			_vector2->value = _value;
            		}
            		else {
HXDLIN( 446)			_vector2 =  ::phoenix::_Shader::Uniform_phoenix_Vector_obj::__alloc( HX_CTX ,_name,_value,this1);
HXDLIN( 446)			::haxe::IMap_obj::set(_this->vector2s,_name,_vector2);
            		}
HXDLIN( 446)		_this->dirty_vector2s->push(_vector2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,set_vector2,(void))

void Shader_obj::set_vector2_arr(::String _name, ::snow::api::buffers::ArrayBufferView _value){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_450_set_vector2_arr)
HXDLIN( 450)		 ::phoenix::Uniforms _this = this->uniforms;
HXDLIN( 450)		 ::opengl::GLObject program = this->program;
HXDLIN( 450)		int _id;
HXDLIN( 450)		if (hx::IsNull( program )) {
HXDLIN( 450)			_id = (int)0;
            		}
            		else {
HXDLIN( 450)			_id = program->id;
            		}
HXDLIN( 450)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,_name));
HXDLIN( 450)		 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array _vector2 = ( ( ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array)(::haxe::IMap_obj::get(_this->vector2arrs,_name)) );
HXDLIN( 450)		if (hx::IsNotNull( _vector2 )) {
HXDLIN( 450)			_vector2->value = _value;
            		}
            		else {
HXDLIN( 450)			_vector2 =  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array_obj::__alloc( HX_CTX ,_name,_value,this1);
HXDLIN( 450)			::haxe::IMap_obj::set(_this->vector2arrs,_name,_vector2);
            		}
HXDLIN( 450)		_this->dirty_vector2arrs->push(_vector2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,set_vector2_arr,(void))

void Shader_obj::set_vector3(::String _name, ::phoenix::Vector _value){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_454_set_vector3)
HXDLIN( 454)		 ::phoenix::Uniforms _this = this->uniforms;
HXDLIN( 454)		 ::opengl::GLObject program = this->program;
HXDLIN( 454)		int _id;
HXDLIN( 454)		if (hx::IsNull( program )) {
HXDLIN( 454)			_id = (int)0;
            		}
            		else {
HXDLIN( 454)			_id = program->id;
            		}
HXDLIN( 454)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,_name));
HXDLIN( 454)		 ::phoenix::_Shader::Uniform_phoenix_Vector _vector3 = ( ( ::phoenix::_Shader::Uniform_phoenix_Vector)(::haxe::IMap_obj::get(_this->vector3s,_name)) );
HXDLIN( 454)		if (hx::IsNotNull( _vector3 )) {
HXDLIN( 454)			_vector3->value = _value;
            		}
            		else {
HXDLIN( 454)			_vector3 =  ::phoenix::_Shader::Uniform_phoenix_Vector_obj::__alloc( HX_CTX ,_name,_value,this1);
HXDLIN( 454)			::haxe::IMap_obj::set(_this->vector3s,_name,_vector3);
            		}
HXDLIN( 454)		_this->dirty_vector3s->push(_vector3);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,set_vector3,(void))

void Shader_obj::set_vector3_arr(::String _name, ::snow::api::buffers::ArrayBufferView _value){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_458_set_vector3_arr)
HXDLIN( 458)		 ::phoenix::Uniforms _this = this->uniforms;
HXDLIN( 458)		 ::opengl::GLObject program = this->program;
HXDLIN( 458)		int _id;
HXDLIN( 458)		if (hx::IsNull( program )) {
HXDLIN( 458)			_id = (int)0;
            		}
            		else {
HXDLIN( 458)			_id = program->id;
            		}
HXDLIN( 458)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,_name));
HXDLIN( 458)		 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array _vector3 = ( ( ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array)(::haxe::IMap_obj::get(_this->vector3arrs,_name)) );
HXDLIN( 458)		if (hx::IsNotNull( _vector3 )) {
HXDLIN( 458)			_vector3->value = _value;
            		}
            		else {
HXDLIN( 458)			_vector3 =  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array_obj::__alloc( HX_CTX ,_name,_value,this1);
HXDLIN( 458)			::haxe::IMap_obj::set(_this->vector3arrs,_name,_vector3);
            		}
HXDLIN( 458)		_this->dirty_vector3arrs->push(_vector3);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,set_vector3_arr,(void))

void Shader_obj::set_vector4(::String _name, ::phoenix::Vector _value){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_462_set_vector4)
HXDLIN( 462)		 ::phoenix::Uniforms _this = this->uniforms;
HXDLIN( 462)		 ::opengl::GLObject program = this->program;
HXDLIN( 462)		int _id;
HXDLIN( 462)		if (hx::IsNull( program )) {
HXDLIN( 462)			_id = (int)0;
            		}
            		else {
HXDLIN( 462)			_id = program->id;
            		}
HXDLIN( 462)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,_name));
HXDLIN( 462)		 ::phoenix::_Shader::Uniform_phoenix_Vector _vector4 = ( ( ::phoenix::_Shader::Uniform_phoenix_Vector)(::haxe::IMap_obj::get(_this->vector4s,_name)) );
HXDLIN( 462)		if (hx::IsNotNull( _vector4 )) {
HXDLIN( 462)			_vector4->value = _value;
            		}
            		else {
HXDLIN( 462)			_vector4 =  ::phoenix::_Shader::Uniform_phoenix_Vector_obj::__alloc( HX_CTX ,_name,_value,this1);
HXDLIN( 462)			::haxe::IMap_obj::set(_this->vector4s,_name,_vector4);
            		}
HXDLIN( 462)		_this->dirty_vector4s->push(_vector4);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,set_vector4,(void))

void Shader_obj::set_vector4_arr(::String _name, ::snow::api::buffers::ArrayBufferView _value){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_466_set_vector4_arr)
HXDLIN( 466)		 ::phoenix::Uniforms _this = this->uniforms;
HXDLIN( 466)		 ::opengl::GLObject program = this->program;
HXDLIN( 466)		int _id;
HXDLIN( 466)		if (hx::IsNull( program )) {
HXDLIN( 466)			_id = (int)0;
            		}
            		else {
HXDLIN( 466)			_id = program->id;
            		}
HXDLIN( 466)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,_name));
HXDLIN( 466)		 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array _vector4 = ( ( ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array)(::haxe::IMap_obj::get(_this->vector4arrs,_name)) );
HXDLIN( 466)		if (hx::IsNotNull( _vector4 )) {
HXDLIN( 466)			_vector4->value = _value;
            		}
            		else {
HXDLIN( 466)			_vector4 =  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array_obj::__alloc( HX_CTX ,_name,_value,this1);
HXDLIN( 466)			::haxe::IMap_obj::set(_this->vector4arrs,_name,_vector4);
            		}
HXDLIN( 466)		_this->dirty_vector4arrs->push(_vector4);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,set_vector4_arr,(void))

void Shader_obj::set_matrix4(::String _name, ::phoenix::Matrix _value){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_470_set_matrix4)
HXDLIN( 470)		 ::phoenix::Uniforms _this = this->uniforms;
HXDLIN( 470)		 ::opengl::GLObject program = this->program;
HXDLIN( 470)		int _id;
HXDLIN( 470)		if (hx::IsNull( program )) {
HXDLIN( 470)			_id = (int)0;
            		}
            		else {
HXDLIN( 470)			_id = program->id;
            		}
HXDLIN( 470)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,_name));
HXDLIN( 470)		 ::phoenix::_Shader::Uniform_phoenix_Matrix _matrix4 = ( ( ::phoenix::_Shader::Uniform_phoenix_Matrix)(::haxe::IMap_obj::get(_this->matrix4s,_name)) );
HXDLIN( 470)		if (hx::IsNotNull( _matrix4 )) {
HXDLIN( 470)			_matrix4->value = _value;
            		}
            		else {
HXDLIN( 470)			_matrix4 =  ::phoenix::_Shader::Uniform_phoenix_Matrix_obj::__alloc( HX_CTX ,_name,_value,this1);
HXDLIN( 470)			::haxe::IMap_obj::set(_this->matrix4s,_name,_matrix4);
            		}
HXDLIN( 470)		_this->dirty_matrix4s->push(_matrix4);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,set_matrix4,(void))

void Shader_obj::set_matrix4_arr(::String _name, ::snow::api::buffers::ArrayBufferView _value){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_474_set_matrix4_arr)
HXDLIN( 474)		 ::phoenix::Uniforms _this = this->uniforms;
HXDLIN( 474)		 ::opengl::GLObject program = this->program;
HXDLIN( 474)		int _id;
HXDLIN( 474)		if (hx::IsNull( program )) {
HXDLIN( 474)			_id = (int)0;
            		}
            		else {
HXDLIN( 474)			_id = program->id;
            		}
HXDLIN( 474)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,_name));
HXDLIN( 474)		 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array _matrix4 = ( ( ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array)(::haxe::IMap_obj::get(_this->matrix4arrs,_name)) );
HXDLIN( 474)		if (hx::IsNotNull( _matrix4 )) {
HXDLIN( 474)			_matrix4->value = _value;
            		}
            		else {
HXDLIN( 474)			_matrix4 =  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array_obj::__alloc( HX_CTX ,_name,_value,this1);
HXDLIN( 474)			::haxe::IMap_obj::set(_this->matrix4arrs,_name,_matrix4);
            		}
HXDLIN( 474)		_this->dirty_matrix4arrs->push(_matrix4);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,set_matrix4_arr,(void))

void Shader_obj::set_color(::String _name, ::phoenix::Color _value){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_478_set_color)
HXDLIN( 478)		 ::phoenix::Uniforms _this = this->uniforms;
HXDLIN( 478)		 ::opengl::GLObject program = this->program;
HXDLIN( 478)		int _id;
HXDLIN( 478)		if (hx::IsNull( program )) {
HXDLIN( 478)			_id = (int)0;
            		}
            		else {
HXDLIN( 478)			_id = program->id;
            		}
HXDLIN( 478)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,_name));
HXDLIN( 478)		 ::phoenix::_Shader::Uniform_phoenix_Color _color = ( ( ::phoenix::_Shader::Uniform_phoenix_Color)(::haxe::IMap_obj::get(_this->colors,_name)) );
HXDLIN( 478)		if (hx::IsNotNull( _color )) {
HXDLIN( 478)			_color->value = _value;
            		}
            		else {
HXDLIN( 478)			_color =  ::phoenix::_Shader::Uniform_phoenix_Color_obj::__alloc( HX_CTX ,_name,_value,this1);
HXDLIN( 478)			::haxe::IMap_obj::set(_this->colors,_name,_color);
            		}
HXDLIN( 478)		_this->dirty_colors->push(_color);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,set_color,(void))

void Shader_obj::set_texture(::String _name, ::phoenix::Texture _value){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_482_set_texture)
HXDLIN( 482)		 ::phoenix::Uniforms _this = this->uniforms;
HXDLIN( 482)		 ::opengl::GLObject program = this->program;
HXDLIN( 482)		int _id;
HXDLIN( 482)		if (hx::IsNull( program )) {
HXDLIN( 482)			_id = (int)0;
            		}
            		else {
HXDLIN( 482)			_id = program->id;
            		}
HXDLIN( 482)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,_name));
HXDLIN( 482)		 ::phoenix::_Shader::Uniform_phoenix_Texture _texture = ( ( ::phoenix::_Shader::Uniform_phoenix_Texture)(::haxe::IMap_obj::get(_this->textures,_name)) );
HXDLIN( 482)		if (hx::IsNotNull( _texture )) {
HXDLIN( 482)			_texture->value = _value;
            		}
            		else {
HXDLIN( 482)			_texture =  ::phoenix::_Shader::Uniform_phoenix_Texture_obj::__alloc( HX_CTX ,_name,_value,this1);
HXDLIN( 482)			::haxe::IMap_obj::set(_this->textures,_name,_texture);
            		}
HXDLIN( 482)		_this->dirty_textures->push(_texture);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,set_texture,(void))

 ::opengl::GLObject Shader_obj::compile(int _type,::String _source){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_486_compile)
HXLINE( 488)		int _id = glCreateShader(_type);
HXDLIN( 488)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id);
HXDLIN( 488)		 ::opengl::GLObject _shader = this1;
HXLINE( 490)		int _hx_tmp;
HXDLIN( 490)		if (hx::IsNull( _shader )) {
HXLINE( 490)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 490)			_hx_tmp = _shader->id;
            		}
HXDLIN( 490)		linc::opengl::webgl::shaderSource(_hx_tmp,_source);
HXLINE( 491)		int _hx_tmp1;
HXDLIN( 491)		if (hx::IsNull( _shader )) {
HXLINE( 491)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE( 491)			_hx_tmp1 = _shader->id;
            		}
HXDLIN( 491)		glCompileShader(_hx_tmp1);
HXLINE( 493)		int _compile_log;
HXDLIN( 493)		if (hx::IsNull( _shader )) {
HXLINE( 493)			_compile_log = (int)0;
            		}
            		else {
HXLINE( 493)			_compile_log = _shader->id;
            		}
HXDLIN( 493)		::String _compile_log1 = linc::opengl::webgl::getShaderInfoLog(_compile_log);
HXLINE( 494)		::String _log = HX_("",00,00,00,00);
HXLINE( 496)		if ((_compile_log1.length > (int)0)) {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			bool _hx_run(::String s){
            				HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_503_compile)
HXLINE( 503)				return (::StringTools_obj::trim(s) != HX_("",00,00,00,00));
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			::String _hx_run(::String s1){
            				HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_503_compile)
HXLINE( 503)				return (HX_("\t\t",e0,07,00,00) + ::StringTools_obj::trim(s1));
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 498)			bool _is_frag = (_type == (int)35632);
HXLINE( 499)			::String _type_name;
HXDLIN( 499)			if (_is_frag) {
HXLINE( 499)				_type_name = HX_("frag",32,99,c2,43);
            			}
            			else {
HXLINE( 499)				_type_name = HX_("vert",b1,34,4c,4e);
            			}
HXLINE( 500)			::String _type_id;
HXDLIN( 500)			if (_is_frag) {
HXLINE( 500)				_type_id = this->frag_id;
            			}
            			else {
HXLINE( 500)				_type_id = this->vert_id;
            			}
HXLINE( 502)			_log = (_log + ((((HX_("\n\t// start -- (",c7,92,d2,b9) + _type_name) + HX_(" / ",31,71,18,00)) + _type_id) + HX_(") compile log --\n",6a,61,a8,06)));
HXLINE( 503)			::Array< ::String > _items = _compile_log1.split(HX_("\n",0a,00,00,00));
HXDLIN( 503)			_items = _items->filter( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 503)			_items = _items->map( ::Dynamic(new _hx_Closure_1()));
HXDLIN( 503)			_log = (_log + _items->join(HX_("\n",0a,00,00,00)));
HXLINE( 504)			_log = (_log + HX_("\n\t// end --\n",64,48,2d,54));
            		}
HXLINE( 508)		int _hx_tmp2;
HXDLIN( 508)		if (hx::IsNull( _shader )) {
HXLINE( 508)			_hx_tmp2 = (int)0;
            		}
            		else {
HXLINE( 508)			_hx_tmp2 = _shader->id;
            		}
HXDLIN( 508)		if ((linc::opengl::webgl::getShaderParameter(_hx_tmp2,(int)35713) == (int)0)) {
HXLINE( 510)			{
HXLINE( 510)				 ::phoenix::Shader _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 510)				_hx_tmp3->log = (_hx_tmp3->log + ((HX_("\tFailed to compile shader `",bd,54,f0,32) + this->id) + HX_("`:\n",f0,0a,49,00)));
            			}
HXLINE( 511)			{
HXLINE( 511)				::String _log1;
HXDLIN( 511)				if ((_log.length == (int)0)) {
            					HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            					bool _hx_run(::String s2){
            						HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_511_compile)
HXLINE( 511)						return (::StringTools_obj::trim(s2) != HX_("",00,00,00,00));
            					}
            					HX_END_LOCAL_FUNC1(return)

            					HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            					::String _hx_run(::String s3){
            						HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_511_compile)
HXLINE( 511)						return (HX_("\t\t",e0,07,00,00) + ::StringTools_obj::trim(s3));
            					}
            					HX_END_LOCAL_FUNC1(return)

HXLINE( 511)					int _log2;
HXDLIN( 511)					if (hx::IsNull( _shader )) {
HXLINE( 511)						_log2 = (int)0;
            					}
            					else {
HXLINE( 511)						_log2 = _shader->id;
            					}
HXDLIN( 511)					::Array< ::String > _items1 = linc::opengl::webgl::getShaderInfoLog(_log2).split(HX_("\n",0a,00,00,00));
HXDLIN( 511)					_items1 = _items1->filter( ::Dynamic(new _hx_Closure_2()));
HXDLIN( 511)					_items1 = _items1->map( ::Dynamic(new _hx_Closure_3()));
HXDLIN( 511)					_log1 = _items1->join(HX_("\n",0a,00,00,00));
            				}
            				else {
HXLINE( 511)					_log1 = _log;
            				}
HXDLIN( 511)				 ::phoenix::Shader _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 511)				_hx_tmp4->log = (_hx_tmp4->log + _log1);
            			}
HXLINE( 513)			int _hx_tmp5;
HXDLIN( 513)			if (hx::IsNull( _shader )) {
HXLINE( 513)				_hx_tmp5 = (int)0;
            			}
            			else {
HXLINE( 513)				_hx_tmp5 = _shader->id;
            			}
HXDLIN( 513)			glDeleteShader(_hx_tmp5);
HXLINE( 514)			_shader = null();
HXLINE( 516)			return null();
            		}
HXLINE( 520)		return _shader;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,compile,return )

bool Shader_obj::link(){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_523_link)
HXLINE( 525)		int _id = glCreateProgram();
HXDLIN( 525)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id);
HXDLIN( 525)		this->program = this1;
HXLINE( 527)		{
HXLINE( 527)			 ::opengl::GLObject program = this->program;
HXDLIN( 527)			 ::opengl::GLObject shader = this->vert_shader;
HXDLIN( 527)			int _hx_tmp;
HXDLIN( 527)			if (hx::IsNull( program )) {
HXLINE( 527)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 527)				_hx_tmp = program->id;
            			}
HXDLIN( 527)			int _hx_tmp1;
HXDLIN( 527)			if (hx::IsNull( shader )) {
HXLINE( 527)				_hx_tmp1 = (int)0;
            			}
            			else {
HXLINE( 527)				_hx_tmp1 = shader->id;
            			}
HXDLIN( 527)			glAttachShader(_hx_tmp,_hx_tmp1);
            		}
HXLINE( 528)		{
HXLINE( 528)			 ::opengl::GLObject program1 = this->program;
HXDLIN( 528)			 ::opengl::GLObject shader1 = this->frag_shader;
HXDLIN( 528)			int _hx_tmp2;
HXDLIN( 528)			if (hx::IsNull( program1 )) {
HXLINE( 528)				_hx_tmp2 = (int)0;
            			}
            			else {
HXLINE( 528)				_hx_tmp2 = program1->id;
            			}
HXDLIN( 528)			int _hx_tmp3;
HXDLIN( 528)			if (hx::IsNull( shader1 )) {
HXLINE( 528)				_hx_tmp3 = (int)0;
            			}
            			else {
HXLINE( 528)				_hx_tmp3 = shader1->id;
            			}
HXDLIN( 528)			glAttachShader(_hx_tmp2,_hx_tmp3);
            		}
HXLINE( 531)		{
HXLINE( 531)			 ::opengl::GLObject program2 = this->program;
HXDLIN( 531)			int _hx_tmp4;
HXDLIN( 531)			if (hx::IsNull( program2 )) {
HXLINE( 531)				_hx_tmp4 = (int)0;
            			}
            			else {
HXLINE( 531)				_hx_tmp4 = program2->id;
            			}
HXDLIN( 531)			glBindAttribLocation(_hx_tmp4,(int)0,HX_("vertexPosition",2d,3c,14,50));
            		}
HXLINE( 532)		{
HXLINE( 532)			 ::opengl::GLObject program3 = this->program;
HXDLIN( 532)			int _hx_tmp5;
HXDLIN( 532)			if (hx::IsNull( program3 )) {
HXLINE( 532)				_hx_tmp5 = (int)0;
            			}
            			else {
HXLINE( 532)				_hx_tmp5 = program3->id;
            			}
HXDLIN( 532)			glBindAttribLocation(_hx_tmp5,(int)1,HX_("vertexTCoord",25,f8,06,df));
            		}
HXLINE( 533)		{
HXLINE( 533)			 ::opengl::GLObject program4 = this->program;
HXDLIN( 533)			int _hx_tmp6;
HXDLIN( 533)			if (hx::IsNull( program4 )) {
HXLINE( 533)				_hx_tmp6 = (int)0;
            			}
            			else {
HXLINE( 533)				_hx_tmp6 = program4->id;
            			}
HXDLIN( 533)			glBindAttribLocation(_hx_tmp6,(int)2,HX_("vertexColor",5f,3b,98,5e));
            		}
HXLINE( 534)		{
HXLINE( 534)			 ::opengl::GLObject program5 = this->program;
HXDLIN( 534)			int _hx_tmp7;
HXDLIN( 534)			if (hx::IsNull( program5 )) {
HXLINE( 534)				_hx_tmp7 = (int)0;
            			}
            			else {
HXLINE( 534)				_hx_tmp7 = program5->id;
            			}
HXDLIN( 534)			glBindAttribLocation(_hx_tmp7,(int)3,HX_("vertexNormal",ab,64,7e,d0));
            		}
HXLINE( 536)		{
HXLINE( 536)			 ::opengl::GLObject program6 = this->program;
HXDLIN( 536)			int _hx_tmp8;
HXDLIN( 536)			if (hx::IsNull( program6 )) {
HXLINE( 536)				_hx_tmp8 = (int)0;
            			}
            			else {
HXLINE( 536)				_hx_tmp8 = program6->id;
            			}
HXDLIN( 536)			glLinkProgram(_hx_tmp8);
            		}
HXLINE( 538)		 ::opengl::GLObject program7 = this->program;
HXDLIN( 538)		int _hx_tmp9;
HXDLIN( 538)		if (hx::IsNull( program7 )) {
HXLINE( 538)			_hx_tmp9 = (int)0;
            		}
            		else {
HXLINE( 538)			_hx_tmp9 = program7->id;
            		}
HXDLIN( 538)		if ((linc::opengl::webgl::getProgramParameter(_hx_tmp9,(int)35714) == (int)0)) {
HXLINE( 539)			 ::phoenix::Shader _hx_tmp10 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 539)			_hx_tmp10->log = (_hx_tmp10->log + HX_("\tFailed to link shader program:",b6,c0,1d,e8));
HXLINE( 540)			{
            				HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				bool _hx_run(::String s){
            					HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_540_link)
HXLINE( 540)					return (::StringTools_obj::trim(s) != HX_("",00,00,00,00));
            				}
            				HX_END_LOCAL_FUNC1(return)

            				HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            				::String _hx_run(::String s1){
            					HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_540_link)
HXLINE( 540)					return (HX_("\t\t",e0,07,00,00) + ::StringTools_obj::trim(s1));
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 540)				 ::opengl::GLObject program8 = this->program;
HXDLIN( 540)				int _log;
HXDLIN( 540)				if (hx::IsNull( program8 )) {
HXLINE( 540)					_log = (int)0;
            				}
            				else {
HXLINE( 540)					_log = program8->id;
            				}
HXDLIN( 540)				::Array< ::String > _items = linc::opengl::webgl::getProgramInfoLog(_log).split(HX_("\n",0a,00,00,00));
HXDLIN( 540)				_items = _items->filter( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 540)				_items = _items->map( ::Dynamic(new _hx_Closure_1()));
HXDLIN( 540)				::String _log1 = _items->join(HX_("\n",0a,00,00,00));
HXDLIN( 540)				 ::phoenix::Shader _hx_tmp11 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 540)				_hx_tmp11->log = (_hx_tmp11->log + _log1);
            			}
HXLINE( 541)			{
HXLINE( 541)				 ::opengl::GLObject program9 = this->program;
HXDLIN( 541)				int _hx_tmp12;
HXDLIN( 541)				if (hx::IsNull( program9 )) {
HXLINE( 541)					_hx_tmp12 = (int)0;
            				}
            				else {
HXLINE( 541)					_hx_tmp12 = program9->id;
            				}
HXDLIN( 541)				glDeleteProgram(_hx_tmp12);
            			}
HXLINE( 542)			this->program = null();
HXLINE( 543)			return false;
            		}
HXLINE( 547)		this->use();
HXLINE( 553)		if (!(this->no_default_uniforms)) {
HXLINE( 555)			 ::opengl::GLObject program10 = this->program;
HXDLIN( 555)			int _id1;
HXDLIN( 555)			if (hx::IsNull( program10 )) {
HXLINE( 555)				_id1 = (int)0;
            			}
            			else {
HXLINE( 555)				_id1 = program10->id;
            			}
HXDLIN( 555)			 ::opengl::GLObject this2 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id1,HX_("projectionMatrix",30,88,bb,d0)));
HXDLIN( 555)			this->proj_attribute = this2;
HXLINE( 556)			 ::opengl::GLObject program11 = this->program;
HXDLIN( 556)			int _id2;
HXDLIN( 556)			if (hx::IsNull( program11 )) {
HXLINE( 556)				_id2 = (int)0;
            			}
            			else {
HXLINE( 556)				_id2 = program11->id;
            			}
HXDLIN( 556)			 ::opengl::GLObject this3 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id2,HX_("modelViewMatrix",8f,eb,9c,59)));
HXDLIN( 556)			this->view_attribute = this3;
HXLINE( 558)			 ::opengl::GLObject program12 = this->program;
HXDLIN( 558)			int _id3;
HXDLIN( 558)			if (hx::IsNull( program12 )) {
HXLINE( 558)				_id3 = (int)0;
            			}
            			else {
HXLINE( 558)				_id3 = program12->id;
            			}
HXDLIN( 558)			 ::opengl::GLObject this4 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id3,HX_("tex0",69,cc,f9,4c)));
HXDLIN( 558)			 ::opengl::GLObject _tex0_attribute = this4;
HXLINE( 559)			 ::opengl::GLObject program13 = this->program;
HXDLIN( 559)			int _id4;
HXDLIN( 559)			if (hx::IsNull( program13 )) {
HXLINE( 559)				_id4 = (int)0;
            			}
            			else {
HXLINE( 559)				_id4 = program13->id;
            			}
HXDLIN( 559)			 ::opengl::GLObject this5 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id4,HX_("tex1",6a,cc,f9,4c)));
HXDLIN( 559)			 ::opengl::GLObject _tex1_attribute = this5;
HXLINE( 560)			 ::opengl::GLObject program14 = this->program;
HXDLIN( 560)			int _id5;
HXDLIN( 560)			if (hx::IsNull( program14 )) {
HXLINE( 560)				_id5 = (int)0;
            			}
            			else {
HXLINE( 560)				_id5 = program14->id;
            			}
HXDLIN( 560)			 ::opengl::GLObject this6 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id5,HX_("tex2",6b,cc,f9,4c)));
HXDLIN( 560)			 ::opengl::GLObject _tex2_attribute = this6;
HXLINE( 561)			 ::opengl::GLObject program15 = this->program;
HXDLIN( 561)			int _id6;
HXDLIN( 561)			if (hx::IsNull( program15 )) {
HXLINE( 561)				_id6 = (int)0;
            			}
            			else {
HXLINE( 561)				_id6 = program15->id;
            			}
HXDLIN( 561)			 ::opengl::GLObject this7 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id6,HX_("tex3",6c,cc,f9,4c)));
HXDLIN( 561)			 ::opengl::GLObject _tex3_attribute = this7;
HXLINE( 562)			 ::opengl::GLObject program16 = this->program;
HXDLIN( 562)			int _id7;
HXDLIN( 562)			if (hx::IsNull( program16 )) {
HXLINE( 562)				_id7 = (int)0;
            			}
            			else {
HXLINE( 562)				_id7 = program16->id;
            			}
HXDLIN( 562)			 ::opengl::GLObject this8 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id7,HX_("tex4",6d,cc,f9,4c)));
HXDLIN( 562)			 ::opengl::GLObject _tex4_attribute = this8;
HXLINE( 563)			 ::opengl::GLObject program17 = this->program;
HXDLIN( 563)			int _id8;
HXDLIN( 563)			if (hx::IsNull( program17 )) {
HXLINE( 563)				_id8 = (int)0;
            			}
            			else {
HXLINE( 563)				_id8 = program17->id;
            			}
HXDLIN( 563)			 ::opengl::GLObject this9 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id8,HX_("tex5",6e,cc,f9,4c)));
HXDLIN( 563)			 ::opengl::GLObject _tex5_attribute = this9;
HXLINE( 564)			 ::opengl::GLObject program18 = this->program;
HXDLIN( 564)			int _id9;
HXDLIN( 564)			if (hx::IsNull( program18 )) {
HXLINE( 564)				_id9 = (int)0;
            			}
            			else {
HXLINE( 564)				_id9 = program18->id;
            			}
HXDLIN( 564)			 ::opengl::GLObject this10 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id9,HX_("tex6",6f,cc,f9,4c)));
HXDLIN( 564)			 ::opengl::GLObject _tex6_attribute = this10;
HXLINE( 565)			 ::opengl::GLObject program19 = this->program;
HXDLIN( 565)			int _id10;
HXDLIN( 565)			if (hx::IsNull( program19 )) {
HXLINE( 565)				_id10 = (int)0;
            			}
            			else {
HXLINE( 565)				_id10 = program19->id;
            			}
HXDLIN( 565)			 ::opengl::GLObject this11 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id10,HX_("tex7",70,cc,f9,4c)));
HXDLIN( 565)			 ::opengl::GLObject _tex7_attribute = this11;
HXLINE( 567)			if (hx::IsNotNull( _tex0_attribute )) {
HXLINE( 567)				int _hx_tmp13;
HXDLIN( 567)				if (hx::IsNull( _tex0_attribute )) {
HXLINE( 567)					_hx_tmp13 = (int)0;
            				}
            				else {
HXLINE( 567)					_hx_tmp13 = _tex0_attribute->id;
            				}
HXDLIN( 567)				glUniform1i(_hx_tmp13,(int)0);
            			}
HXLINE( 568)			if (hx::IsNotNull( _tex1_attribute )) {
HXLINE( 568)				int _hx_tmp14;
HXDLIN( 568)				if (hx::IsNull( _tex1_attribute )) {
HXLINE( 568)					_hx_tmp14 = (int)0;
            				}
            				else {
HXLINE( 568)					_hx_tmp14 = _tex1_attribute->id;
            				}
HXDLIN( 568)				glUniform1i(_hx_tmp14,(int)1);
            			}
HXLINE( 569)			if (hx::IsNotNull( _tex2_attribute )) {
HXLINE( 569)				int _hx_tmp15;
HXDLIN( 569)				if (hx::IsNull( _tex2_attribute )) {
HXLINE( 569)					_hx_tmp15 = (int)0;
            				}
            				else {
HXLINE( 569)					_hx_tmp15 = _tex2_attribute->id;
            				}
HXDLIN( 569)				glUniform1i(_hx_tmp15,(int)2);
            			}
HXLINE( 570)			if (hx::IsNotNull( _tex3_attribute )) {
HXLINE( 570)				int _hx_tmp16;
HXDLIN( 570)				if (hx::IsNull( _tex3_attribute )) {
HXLINE( 570)					_hx_tmp16 = (int)0;
            				}
            				else {
HXLINE( 570)					_hx_tmp16 = _tex3_attribute->id;
            				}
HXDLIN( 570)				glUniform1i(_hx_tmp16,(int)3);
            			}
HXLINE( 571)			if (hx::IsNotNull( _tex4_attribute )) {
HXLINE( 571)				int _hx_tmp17;
HXDLIN( 571)				if (hx::IsNull( _tex4_attribute )) {
HXLINE( 571)					_hx_tmp17 = (int)0;
            				}
            				else {
HXLINE( 571)					_hx_tmp17 = _tex4_attribute->id;
            				}
HXDLIN( 571)				glUniform1i(_hx_tmp17,(int)4);
            			}
HXLINE( 572)			if (hx::IsNotNull( _tex5_attribute )) {
HXLINE( 572)				int _hx_tmp18;
HXDLIN( 572)				if (hx::IsNull( _tex5_attribute )) {
HXLINE( 572)					_hx_tmp18 = (int)0;
            				}
            				else {
HXLINE( 572)					_hx_tmp18 = _tex5_attribute->id;
            				}
HXDLIN( 572)				glUniform1i(_hx_tmp18,(int)5);
            			}
HXLINE( 573)			if (hx::IsNotNull( _tex6_attribute )) {
HXLINE( 573)				int _hx_tmp19;
HXDLIN( 573)				if (hx::IsNull( _tex6_attribute )) {
HXLINE( 573)					_hx_tmp19 = (int)0;
            				}
            				else {
HXLINE( 573)					_hx_tmp19 = _tex6_attribute->id;
            				}
HXDLIN( 573)				glUniform1i(_hx_tmp19,(int)6);
            			}
HXLINE( 574)			if (hx::IsNotNull( _tex7_attribute )) {
HXLINE( 574)				int _hx_tmp20;
HXDLIN( 574)				if (hx::IsNull( _tex7_attribute )) {
HXLINE( 574)					_hx_tmp20 = (int)0;
            				}
            				else {
HXLINE( 574)					_hx_tmp20 = _tex7_attribute->id;
            				}
HXDLIN( 574)				glUniform1i(_hx_tmp20,(int)7);
            			}
            		}
HXLINE( 578)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,link,return )

 ::opengl::GLObject Shader_obj::location(::String _name){
            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_583_location)
HXDLIN( 583)		 ::opengl::GLObject program = this->program;
HXDLIN( 583)		int _id;
HXDLIN( 583)		if (hx::IsNull( program )) {
HXDLIN( 583)			_id = (int)0;
            		}
            		else {
HXDLIN( 583)			_id = program->id;
            		}
HXDLIN( 583)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,_name));
HXDLIN( 583)		return this1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,location,return )

void Shader_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_588_clear)
HXLINE( 590)		if (hx::IsNotNull( this->vert_shader )) {
HXLINE( 590)			 ::opengl::GLObject shader = this->vert_shader;
HXDLIN( 590)			int _hx_tmp;
HXDLIN( 590)			if (hx::IsNull( shader )) {
HXLINE( 590)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 590)				_hx_tmp = shader->id;
            			}
HXDLIN( 590)			glDeleteShader(_hx_tmp);
            		}
HXLINE( 591)		if (hx::IsNotNull( this->frag_shader )) {
HXLINE( 591)			 ::opengl::GLObject shader1 = this->frag_shader;
HXDLIN( 591)			int _hx_tmp1;
HXDLIN( 591)			if (hx::IsNull( shader1 )) {
HXLINE( 591)				_hx_tmp1 = (int)0;
            			}
            			else {
HXLINE( 591)				_hx_tmp1 = shader1->id;
            			}
HXDLIN( 591)			glDeleteShader(_hx_tmp1);
            		}
HXLINE( 592)		if (hx::IsNotNull( this->program )) {
HXLINE( 592)			 ::opengl::GLObject program = this->program;
HXDLIN( 592)			int _hx_tmp2;
HXDLIN( 592)			if (hx::IsNull( program )) {
HXLINE( 592)				_hx_tmp2 = (int)0;
            			}
            			else {
HXLINE( 592)				_hx_tmp2 = program->id;
            			}
HXDLIN( 592)			glDeleteProgram(_hx_tmp2);
            		}
HXLINE( 594)		this->vert_source = null();
HXLINE( 595)		this->frag_source = null();
HXLINE( 597)		this->uniforms->clear();
            	}


 ::snow::api::Promise Shader_obj::reload(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_5, ::phoenix::Shader,_gthis) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::phoenix::Shader,_gthis, ::Dynamic,reject) HXARGC(1)
            			void _hx_run( ::Dynamic _err){
            				HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_620_reload)
HXLINE( 621)				_gthis->set_state((int)4);
HXLINE( 622)				reject(_err);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_3, ::phoenix::Shader,_gthis, ::Dynamic,resolve, ::Dynamic,_onfail) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_660_reload)
HXLINE( 660)				if (_gthis->from_string(_gthis->vert_source,_gthis->frag_source)) {
HXLINE( 661)					_gthis->set_state((int)3);
HXLINE( 662)					resolve(_gthis);
            				}
            				else {
HXLINE( 664)					_onfail(::snow::types::Error_obj::error((((HX_("`",60,00,00,00) + _gthis->id) + HX_("` failed to create :\n\n",f8,d8,b3,e6)) + _gthis->log)));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_4, ::phoenix::Shader,_gthis, ::Dynamic,_onfail) HXARGC(1)
            			void _hx_run(::String err){
            				HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_668_reload)
HXLINE( 668)				_onfail(::snow::types::Error_obj::error(((((HX_("`",60,00,00,00) + _gthis->id) + HX_("` failed to create :\n\t\t",32,ff,a9,f6)) + err) + HX_("\n",0a,00,00,00))));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_607_reload)
HXLINE( 609)			_gthis->set_state((int)2);
HXLINE( 611)			{
HXLINE( 611)				::String _g = _gthis->frag_id;
HXDLIN( 611)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 612)					_gthis->frag_source = ( (::String)( ::Dynamic( ::Dynamic(::Luxe_obj::renderer->shaders->__Field(HX_("plain",0a,fa,8d,c4),hx::paccDynamic))->__Field(HX_("source",db,b0,31,32),hx::paccDynamic))->__Field(HX_("frag",32,99,c2,43),hx::paccDynamic)) );
HXDLIN( 612)					goto _hx_goto_27;
            				}
            				if (  (_hx_switch_0==HX_("textured",29,f7,ce,65)) ){
HXLINE( 613)					_gthis->frag_source = ( (::String)( ::Dynamic( ::Dynamic(::Luxe_obj::renderer->shaders->__Field(HX_("textured",29,f7,ce,65),hx::paccDynamic))->__Field(HX_("source",db,b0,31,32),hx::paccDynamic))->__Field(HX_("frag",32,99,c2,43),hx::paccDynamic)) );
HXDLIN( 613)					goto _hx_goto_27;
            				}
            				_hx_goto_27:;
            			}
HXLINE( 616)			{
HXLINE( 616)				::String _g1 = _gthis->vert_id;
HXDLIN( 616)				if ((_g1 == HX_("default",c1,d8,c3,9b))) {
HXLINE( 617)					_gthis->vert_source = ( (::String)( ::Dynamic( ::Dynamic(::Luxe_obj::renderer->shaders->__Field(HX_("plain",0a,fa,8d,c4),hx::paccDynamic))->__Field(HX_("source",db,b0,31,32),hx::paccDynamic))->__Field(HX_("vert",b1,34,4c,4e),hx::paccDynamic)) );
            				}
            			}
HXLINE( 620)			 ::Dynamic _onfail =  ::Dynamic(new _hx_Closure_0(_gthis,reject));
HXLINE( 626)			::Array< ::Dynamic> _wait = ::Array_obj< ::Dynamic>::__new(1)->init(0,::snow::api::Promise_obj::resolve(null()));
HXLINE( 628)			if (hx::IsNull( _gthis->frag_source )) {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::phoenix::Shader,_gthis) HXARGC(1)
            				void _hx_run( ::snow::systems::assets::AssetText _asset){
            					HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_633_reload)
HXLINE( 633)					_gthis->frag_source = _asset->text;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 630)				 ::snow::api::Promise _frag = ::snow::systems::assets::AssetText_obj::load(::Luxe_obj::core->app->assets,_gthis->frag_id);
HXLINE( 632)				_frag->then( ::Dynamic(new _hx_Closure_1(_gthis)),null());
HXLINE( 636)				_wait->push(_frag);
            			}
HXLINE( 640)			if (hx::IsNull( _gthis->vert_source )) {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::phoenix::Shader,_gthis) HXARGC(1)
            				void _hx_run( ::snow::systems::assets::AssetText _asset1){
            					HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_645_reload)
HXLINE( 645)					_gthis->vert_source = _asset1->text;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 642)				 ::snow::api::Promise _vert = ::snow::systems::assets::AssetText_obj::load(::Luxe_obj::core->app->assets,_gthis->vert_id);
HXLINE( 644)				_vert->then( ::Dynamic(new _hx_Closure_2(_gthis)),null());
HXLINE( 648)				_wait->push(_vert);
            			}
HXLINE( 652)			::snow::api::Promise_obj::all(_wait)->then( ::Dynamic(new _hx_Closure_3(_gthis,resolve,_onfail)),null())->error( ::Dynamic(new _hx_Closure_4(_gthis,_onfail)));
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_77ebcf76d410ae32_601_reload)
HXDLIN( 601)		 ::phoenix::Shader _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 603)		if ((this->state == (int)6)) {
HXLINE( 603)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion(HX_("state != ResourceState.destroyed",79,be,a0,bf)));
            		}
HXLINE( 605)		this->clear();
HXLINE( 607)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_5(_gthis)));
            	}


bool Shader_obj::from_string(::String _vert_source,::String _fragment_source){
            	HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_676_from_string)
HXDLIN( 676)		 ::phoenix::Shader _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 684)		this->clear();
HXLINE( 686)		this->frag_source = _fragment_source;
HXLINE( 687)		this->vert_source = _vert_source;
HXLINE( 690)		this->vert_shader = this->compile((int)35633,this->vert_source);
HXLINE( 691)		this->frag_shader = this->compile((int)35632,this->frag_source);
HXLINE( 693)		bool _hx_tmp;
HXDLIN( 693)		if (hx::IsNotNull( this->vert_shader )) {
HXLINE( 693)			_hx_tmp = hx::IsNull( this->frag_shader );
            		}
            		else {
HXLINE( 693)			_hx_tmp = true;
            		}
HXDLIN( 693)		if (_hx_tmp) {
HXLINE( 694)			if ((_gthis->log.length > (int)0)) {
HXLINE( 694)				 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 694)				_hx_tmp1((HX_("   i / shader / ",a4,59,57,90) + _gthis->log),hx::SourceInfo(HX_("Shader.hx",99,a8,0b,d1),680,HX_("phoenix.Shader",44,ea,01,9b),HX_("from_string",46,76,96,4a)));
            			}
HXLINE( 695)			return false;
            		}
HXLINE( 699)		if (!(this->link())) {
HXLINE( 700)			if ((_gthis->log.length > (int)0)) {
HXLINE( 700)				 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 700)				_hx_tmp2((HX_("   i / shader / ",a4,59,57,90) + _gthis->log),hx::SourceInfo(HX_("Shader.hx",99,a8,0b,d1),680,HX_("phoenix.Shader",44,ea,01,9b),HX_("from_string",46,76,96,4a)));
            			}
HXLINE( 701)			return false;
            		}
HXLINE( 704)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,from_string,return )

void Shader_obj::add_log(::String _log){
            	HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_709_add_log)
HXDLIN( 709)		 ::phoenix::Shader _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 709)		_hx_tmp->log = (_hx_tmp->log + _log);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,add_log,(void))

::String Shader_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_713_toString)
HXDLIN( 713)		return (((((HX_("Shader(",43,a9,d7,2c) + this->id) + HX_(") vert:",32,77,bd,a8)) + this->vert_id) + HX_(" / frag: ",49,e8,9f,bd)) + this->frag_id);
            	}


::String Shader_obj::format_log(::String _log){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		bool _hx_run(::String s){
            			HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_720_format_log)
HXLINE( 720)			return (::StringTools_obj::trim(s) != HX_("",00,00,00,00));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		::String _hx_run(::String s1){
            			HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_721_format_log)
HXLINE( 721)			return (HX_("\t\t",e0,07,00,00) + ::StringTools_obj::trim(s1));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_77ebcf76d410ae32_718_format_log)
HXLINE( 719)		::Array< ::String > _items = _log.split(HX_("\n",0a,00,00,00));
HXLINE( 720)		_items = _items->filter( ::Dynamic(new _hx_Closure_0()));
HXLINE( 721)		_items = _items->map( ::Dynamic(new _hx_Closure_1()));
HXLINE( 722)		return _items->join(HX_("\n",0a,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,format_log,return )


hx::ObjectPtr< Shader_obj > Shader_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< Shader_obj > __this = new Shader_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< Shader_obj > Shader_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	Shader_obj *__this = (Shader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Shader_obj), true, "phoenix.Shader"));
	*(void **)__this = Shader_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

Shader_obj::Shader_obj()
{
}

void Shader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Shader);
	HX_MARK_MEMBER_NAME(log,"log");
	HX_MARK_MEMBER_NAME(vert_source,"vert_source");
	HX_MARK_MEMBER_NAME(frag_source,"frag_source");
	HX_MARK_MEMBER_NAME(vert_id,"vert_id");
	HX_MARK_MEMBER_NAME(frag_id,"frag_id");
	HX_MARK_MEMBER_NAME(vert_shader,"vert_shader");
	HX_MARK_MEMBER_NAME(frag_shader,"frag_shader");
	HX_MARK_MEMBER_NAME(program,"program");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(no_default_uniforms,"no_default_uniforms");
	HX_MARK_MEMBER_NAME(proj_attribute,"proj_attribute");
	HX_MARK_MEMBER_NAME(view_attribute,"view_attribute");
	HX_MARK_MEMBER_NAME(uniforms,"uniforms");
	 ::luxe::resource::Resource_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Shader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(log,"log");
	HX_VISIT_MEMBER_NAME(vert_source,"vert_source");
	HX_VISIT_MEMBER_NAME(frag_source,"frag_source");
	HX_VISIT_MEMBER_NAME(vert_id,"vert_id");
	HX_VISIT_MEMBER_NAME(frag_id,"frag_id");
	HX_VISIT_MEMBER_NAME(vert_shader,"vert_shader");
	HX_VISIT_MEMBER_NAME(frag_shader,"frag_shader");
	HX_VISIT_MEMBER_NAME(program,"program");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(no_default_uniforms,"no_default_uniforms");
	HX_VISIT_MEMBER_NAME(proj_attribute,"proj_attribute");
	HX_VISIT_MEMBER_NAME(view_attribute,"view_attribute");
	HX_VISIT_MEMBER_NAME(uniforms,"uniforms");
	 ::luxe::resource::Resource_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Shader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { return hx::Val( log ); }
		if (HX_FIELD_EQ(inName,"use") ) { return hx::Val( use_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"link") ) { return hx::Val( link_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader ); }
		if (HX_FIELD_EQ(inName,"reload") ) { return hx::Val( reload_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"vert_id") ) { return hx::Val( vert_id ); }
		if (HX_FIELD_EQ(inName,"frag_id") ) { return hx::Val( frag_id ); }
		if (HX_FIELD_EQ(inName,"program") ) { return hx::Val( program ); }
		if (HX_FIELD_EQ(inName,"set_int") ) { return hx::Val( set_int_dyn() ); }
		if (HX_FIELD_EQ(inName,"compile") ) { return hx::Val( compile_dyn() ); }
		if (HX_FIELD_EQ(inName,"add_log") ) { return hx::Val( add_log_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uniforms") ) { return hx::Val( uniforms ); }
		if (HX_FIELD_EQ(inName,"activate") ) { return hx::Val( activate_dyn() ); }
		if (HX_FIELD_EQ(inName,"location") ) { return hx::Val( location_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_float") ) { return hx::Val( set_float_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"deactivate") ) { return hx::Val( deactivate_dyn() ); }
		if (HX_FIELD_EQ(inName,"format_log") ) { return hx::Val( format_log_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vert_source") ) { return hx::Val( vert_source ); }
		if (HX_FIELD_EQ(inName,"frag_source") ) { return hx::Val( frag_source ); }
		if (HX_FIELD_EQ(inName,"vert_shader") ) { return hx::Val( vert_shader ); }
		if (HX_FIELD_EQ(inName,"frag_shader") ) { return hx::Val( frag_shader ); }
		if (HX_FIELD_EQ(inName,"set_vector2") ) { return hx::Val( set_vector2_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_vector3") ) { return hx::Val( set_vector3_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_vector4") ) { return hx::Val( set_vector4_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_matrix4") ) { return hx::Val( set_matrix4_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_texture") ) { return hx::Val( set_texture_dyn() ); }
		if (HX_FIELD_EQ(inName,"from_string") ) { return hx::Val( from_string_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"proj_attribute") ) { return hx::Val( proj_attribute ); }
		if (HX_FIELD_EQ(inName,"view_attribute") ) { return hx::Val( view_attribute ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"set_vector2_arr") ) { return hx::Val( set_vector2_arr_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_vector3_arr") ) { return hx::Val( set_vector3_arr_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_vector4_arr") ) { return hx::Val( set_vector4_arr_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_matrix4_arr") ) { return hx::Val( set_matrix4_arr_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"no_default_uniforms") ) { return hx::Val( no_default_uniforms ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Shader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { log=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"vert_id") ) { vert_id=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frag_id") ) { frag_id=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"program") ) { program=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uniforms") ) { uniforms=inValue.Cast<  ::phoenix::Uniforms >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vert_source") ) { vert_source=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frag_source") ) { frag_source=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vert_shader") ) { vert_shader=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frag_shader") ) { frag_shader=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"proj_attribute") ) { proj_attribute=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"view_attribute") ) { view_attribute=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"no_default_uniforms") ) { no_default_uniforms=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Shader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("log","\x84","\x54","\x52","\x00"));
	outFields->push(HX_HCSTRING("vert_source","\xe9","\xf5","\xeb","\xbe"));
	outFields->push(HX_HCSTRING("frag_source","\x88","\x93","\x35","\x8b"));
	outFields->push(HX_HCSTRING("vert_id","\xe9","\x81","\x93","\x7d"));
	outFields->push(HX_HCSTRING("frag_id","\x08","\x24","\x78","\x44"));
	outFields->push(HX_HCSTRING("vert_shader","\x33","\x04","\xdb","\xa9"));
	outFields->push(HX_HCSTRING("frag_shader","\xd2","\xa1","\x24","\x76"));
	outFields->push(HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("no_default_uniforms","\x3b","\x80","\x7e","\x28"));
	outFields->push(HX_HCSTRING("proj_attribute","\xba","\x39","\x38","\x70"));
	outFields->push(HX_HCSTRING("view_attribute","\x82","\xee","\x54","\x86"));
	outFields->push(HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Shader_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Shader_obj,log),HX_HCSTRING("log","\x84","\x54","\x52","\x00")},
	{hx::fsString,(int)offsetof(Shader_obj,vert_source),HX_HCSTRING("vert_source","\xe9","\xf5","\xeb","\xbe")},
	{hx::fsString,(int)offsetof(Shader_obj,frag_source),HX_HCSTRING("frag_source","\x88","\x93","\x35","\x8b")},
	{hx::fsString,(int)offsetof(Shader_obj,vert_id),HX_HCSTRING("vert_id","\xe9","\x81","\x93","\x7d")},
	{hx::fsString,(int)offsetof(Shader_obj,frag_id),HX_HCSTRING("frag_id","\x08","\x24","\x78","\x44")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Shader_obj,vert_shader),HX_HCSTRING("vert_shader","\x33","\x04","\xdb","\xa9")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Shader_obj,frag_shader),HX_HCSTRING("frag_shader","\xd2","\xa1","\x24","\x76")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Shader_obj,program),HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Shader_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{hx::fsBool,(int)offsetof(Shader_obj,no_default_uniforms),HX_HCSTRING("no_default_uniforms","\x3b","\x80","\x7e","\x28")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Shader_obj,proj_attribute),HX_HCSTRING("proj_attribute","\xba","\x39","\x38","\x70")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Shader_obj,view_attribute),HX_HCSTRING("view_attribute","\x82","\xee","\x54","\x86")},
	{hx::fsObject /*::phoenix::Uniforms*/ ,(int)offsetof(Shader_obj,uniforms),HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Shader_obj_sStaticStorageInfo = 0;
#endif

static ::String Shader_obj_sMemberFields[] = {
	HX_HCSTRING("log","\x84","\x54","\x52","\x00"),
	HX_HCSTRING("vert_source","\xe9","\xf5","\xeb","\xbe"),
	HX_HCSTRING("frag_source","\x88","\x93","\x35","\x8b"),
	HX_HCSTRING("vert_id","\xe9","\x81","\x93","\x7d"),
	HX_HCSTRING("frag_id","\x08","\x24","\x78","\x44"),
	HX_HCSTRING("vert_shader","\x33","\x04","\xdb","\xa9"),
	HX_HCSTRING("frag_shader","\xd2","\xa1","\x24","\x76"),
	HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3"),
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("no_default_uniforms","\x3b","\x80","\x7e","\x28"),
	HX_HCSTRING("proj_attribute","\xba","\x39","\x38","\x70"),
	HX_HCSTRING("view_attribute","\x82","\xee","\x54","\x86"),
	HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02"),
	HX_HCSTRING("activate","\xb3","\x1b","\xac","\xe5"),
	HX_HCSTRING("use","\x47","\x2c","\x59","\x00"),
	HX_HCSTRING("deactivate","\x34","\x5c","\x01","\x3c"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("set_int","\x92","\x66","\xc6","\x19"),
	HX_HCSTRING("set_float","\xff","\x0d","\x91","\x29"),
	HX_HCSTRING("set_vector2","\x32","\x61","\x04","\x6b"),
	HX_HCSTRING("set_vector2_arr","\x94","\x25","\x67","\x24"),
	HX_HCSTRING("set_vector3","\x33","\x61","\x04","\x6b"),
	HX_HCSTRING("set_vector3_arr","\x15","\xba","\xcd","\xb7"),
	HX_HCSTRING("set_vector4","\x34","\x61","\x04","\x6b"),
	HX_HCSTRING("set_vector4_arr","\x96","\x4e","\x34","\x4b"),
	HX_HCSTRING("set_matrix4","\xf6","\xa9","\xce","\x23"),
	HX_HCSTRING("set_matrix4_arr","\x58","\x20","\x7f","\xbe"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("set_texture","\xfe","\x2f","\x48","\x2f"),
	HX_HCSTRING("compile","\x73","\x25","\x6f","\x83"),
	HX_HCSTRING("link","\xfa","\x17","\xb3","\x47"),
	HX_HCSTRING("location","\x35","\x6e","\x46","\xe5"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("reload","\x59","\x53","\xdf","\x03"),
	HX_HCSTRING("from_string","\x46","\x76","\x96","\x4a"),
	HX_HCSTRING("add_log","\x26","\xb0","\x81","\x90"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("format_log","\x3c","\x90","\xa9","\x13"),
	::String(null()) };

static void Shader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#endif

hx::Class Shader_obj::__mClass;

void Shader_obj::__register()
{
	hx::Object *dummy = new Shader_obj;
	Shader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.Shader","\x44","\xea","\x01","\x9b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Shader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Shader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Shader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
