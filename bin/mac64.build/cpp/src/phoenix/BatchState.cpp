// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_9484b18fc186cc5e
#define INCLUDED_9484b18fc186cc5e
#include "linc_opengl.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_opengl_GLObject
#include <opengl/GLObject.h>
#endif
#ifndef INCLUDED_phoenix_BatchState
#include <phoenix/BatchState.h>
#endif
#ifndef INCLUDED_phoenix_Batcher
#include <phoenix/Batcher.h>
#endif
#ifndef INCLUDED_phoenix_Camera
#include <phoenix/Camera.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_RenderState
#include <phoenix/RenderState.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_Shader
#include <phoenix/Shader.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_Uniforms
#include <phoenix/Uniforms.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_snow_api_buffers_Float32Array
#include <phoenix/_Shader/Uniform_snow_api_buffers_Float32Array.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_GeometryState
#include <phoenix/geometry/GeometryState.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9fa2823f836939df_11_new,"phoenix.BatchState","new",0x4a680688,"phoenix.BatchState.new","phoenix/BatchState.hx",11,0xe3277547)
HX_LOCAL_STACK_FRAME(_hx_pos_9fa2823f836939df_37_active_shader,"phoenix.BatchState","active_shader",0xae846be6,"phoenix.BatchState.active_shader","phoenix/BatchState.hx",37,0xe3277547)
HX_LOCAL_STACK_FRAME(_hx_pos_9fa2823f836939df_48_activate,"phoenix.BatchState","activate",0xd6da948b,"phoenix.BatchState.activate","phoenix/BatchState.hx",48,0xe3277547)
HX_LOCAL_STACK_FRAME(_hx_pos_9fa2823f836939df_153_deactivate,"phoenix.BatchState","deactivate",0xb061bb0c,"phoenix.BatchState.deactivate","phoenix/BatchState.hx",153,0xe3277547)
HX_LOCAL_STACK_FRAME(_hx_pos_9fa2823f836939df_174_update,"phoenix.BatchState","update",0x8d6798e1,"phoenix.BatchState.update","phoenix/BatchState.hx",174,0xe3277547)
HX_LOCAL_STACK_FRAME(_hx_pos_9fa2823f836939df_190_str,"phoenix.BatchState","str",0x4a6bded9,"phoenix.BatchState.str","phoenix/BatchState.hx",190,0xe3277547)
namespace phoenix{

void BatchState_obj::__construct( ::phoenix::Batcher _r){
            	HX_GC_STACKFRAME(&_hx_pos_9fa2823f836939df_11_new)
HXLINE(  28)		this->log = false;
HXLINE(  31)		this->batcher = _r;
HXLINE(  32)		this->geom_state =  ::phoenix::geometry::GeometryState_obj::__alloc( HX_CTX );
HXLINE(  33)		this->last_geom_state =  ::phoenix::geometry::GeometryState_obj::__alloc( HX_CTX );
            	}

Dynamic BatchState_obj::__CreateEmpty() { return new BatchState_obj; }

void *BatchState_obj::_hx_vtable = 0;

Dynamic BatchState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BatchState_obj > _hx_result = new BatchState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool BatchState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fd37436;
}

 ::phoenix::Shader BatchState_obj::active_shader(){
            	HX_STACKFRAME(&_hx_pos_9fa2823f836939df_37_active_shader)
HXDLIN(  37)		if (hx::IsNotNull( this->geom_state->shader )) {
HXLINE(  38)			return this->geom_state->shader;
            		}
            		else {
HXLINE(  40)			if (hx::IsNotNull( this->geom_state->texture )) {
HXLINE(  41)				return ( ( ::phoenix::Shader)( ::Dynamic(this->batcher->renderer->shaders->__Field(HX_("textured",29,f7,ce,65),hx::paccDynamic))->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)) );
            			}
            			else {
HXLINE(  43)				return ( ( ::phoenix::Shader)( ::Dynamic(this->batcher->renderer->shaders->__Field(HX_("plain",0a,fa,8d,c4),hx::paccDynamic))->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)) );
            			}
            		}
HXLINE(  37)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BatchState_obj,active_shader,return )

void BatchState_obj::activate( ::phoenix::Batcher batcher){
            	HX_GC_STACKFRAME(&_hx_pos_9fa2823f836939df_48_activate)
HXLINE(  51)		if (this->geom_state->dirty) {
HXLINE(  53)			if (hx::IsNotNull( this->geom_state->texture )) {
HXLINE(  55)				if (hx::IsNotEq( this->last_texture_id,this->geom_state->texture->id )) {
HXLINE(  57)					this->last_texture_id = this->geom_state->texture->id;
HXLINE(  58)					if (hx::IsNotNull( this->geom_state->texture->texture )) {
HXLINE(  59)						this->geom_state->texture->bind();
            					}
            				}
            			}
            			else {
HXLINE(  66)				::Luxe_obj::renderer->state->bindTexture2D(null());
HXLINE(  67)				this->last_texture_id = null();
            			}
HXLINE(  71)			 ::phoenix::Shader _shader;
HXDLIN(  71)			if (hx::IsNull( batcher->shader )) {
HXLINE(  71)				_shader = this->geom_state->shader;
            			}
            			else {
HXLINE(  71)				_shader = batcher->shader;
            			}
HXLINE(  73)			if (hx::IsNull( _shader )) {
HXLINE(  76)				if (hx::IsNotNull( this->geom_state->texture )) {
HXLINE(  77)					_shader = ( ( ::phoenix::Shader)( ::Dynamic(batcher->renderer->shaders->__Field(HX_("textured",29,f7,ce,65),hx::paccDynamic))->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)) );
            				}
            				else {
HXLINE(  79)					_shader = ( ( ::phoenix::Shader)( ::Dynamic(batcher->renderer->shaders->__Field(HX_("plain",0a,fa,8d,c4),hx::paccDynamic))->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)) );
            				}
            			}
HXLINE(  84)			 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,( (int)(this->last_shader_id) ));
HXDLIN(  84)			if (hx::IsNotEq( this1,_shader->program )) {
HXLINE(  85)				if (!(_shader->no_default_uniforms)) {
HXLINE(  85)					{
HXLINE(  85)						 ::snow::api::buffers::ArrayBufferView _value = batcher->view->proj_arr;
HXDLIN(  85)						{
HXLINE(  85)							 ::phoenix::Uniforms _this = _shader->uniforms;
HXDLIN(  85)							 ::opengl::GLObject program = _shader->program;
HXDLIN(  85)							int _id;
HXDLIN(  85)							if (hx::IsNull( program )) {
HXLINE(  85)								_id = (int)0;
            							}
            							else {
HXLINE(  85)								_id = program->id;
            							}
HXDLIN(  85)							 ::opengl::GLObject this2 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,HX_("projectionMatrix",30,88,bb,d0)));
HXDLIN(  85)							 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array _matrix4 = ( ( ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array)(::haxe::IMap_obj::get(_this->matrix4arrs,HX_("projectionMatrix",30,88,bb,d0))) );
HXDLIN(  85)							if (hx::IsNotNull( _matrix4 )) {
HXLINE(  85)								_matrix4->value = _value;
            							}
            							else {
HXLINE(  85)								_matrix4 =  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array_obj::__alloc( HX_CTX ,HX_("projectionMatrix",30,88,bb,d0),_value,this2);
HXDLIN(  85)								::haxe::IMap_obj::set(_this->matrix4arrs,HX_("projectionMatrix",30,88,bb,d0),_matrix4);
            							}
HXDLIN(  85)							_this->dirty_matrix4arrs->push(_matrix4);
            						}
            					}
HXDLIN(  85)					{
HXLINE(  85)						 ::snow::api::buffers::ArrayBufferView _value1 = batcher->view->view_inverse_arr;
HXDLIN(  85)						{
HXLINE(  85)							 ::phoenix::Uniforms _this1 = _shader->uniforms;
HXDLIN(  85)							 ::opengl::GLObject program1 = _shader->program;
HXDLIN(  85)							int _id1;
HXDLIN(  85)							if (hx::IsNull( program1 )) {
HXLINE(  85)								_id1 = (int)0;
            							}
            							else {
HXLINE(  85)								_id1 = program1->id;
            							}
HXDLIN(  85)							 ::opengl::GLObject this3 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id1,HX_("modelViewMatrix",8f,eb,9c,59)));
HXDLIN(  85)							 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array _matrix41 = ( ( ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array)(::haxe::IMap_obj::get(_this1->matrix4arrs,HX_("modelViewMatrix",8f,eb,9c,59))) );
HXDLIN(  85)							if (hx::IsNotNull( _matrix41 )) {
HXLINE(  85)								_matrix41->value = _value1;
            							}
            							else {
HXLINE(  85)								_matrix41 =  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array_obj::__alloc( HX_CTX ,HX_("modelViewMatrix",8f,eb,9c,59),_value1,this3);
HXDLIN(  85)								::haxe::IMap_obj::set(_this1->matrix4arrs,HX_("modelViewMatrix",8f,eb,9c,59),_matrix41);
            							}
HXDLIN(  85)							_this1->dirty_matrix4arrs->push(_matrix41);
            						}
            					}
            				}
HXLINE(  86)				{
HXLINE(  86)					_shader->use();
HXDLIN(  86)					_shader->uniforms->apply();
HXDLIN(  86)					::Luxe_obj::renderer->state->activeTexture((int)33984);
            				}
HXLINE(  87)				 ::opengl::GLObject this4 = _shader->program;
HXDLIN(  87)				 ::Dynamic _hx_tmp;
HXDLIN(  87)				if (hx::IsNull( this4 )) {
HXLINE(  87)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE(  87)					_hx_tmp = this4->id;
            				}
HXDLIN(  87)				this->last_shader_id = _hx_tmp;
            			}
HXLINE(  90)			bool blend_dirty = (this->last_blend_src_rgb != this->geom_state->blend_src_rgb);
HXLINE(  91)			if (!(blend_dirty)) {
HXLINE(  91)				blend_dirty = (this->last_blend_disabled != this->geom_state->blend_disabled);
            			}
            			else {
HXLINE(  91)				blend_dirty = true;
            			}
HXLINE(  92)			if (!(blend_dirty)) {
HXLINE(  92)				blend_dirty = (this->last_blend_src_alpha != this->geom_state->blend_src_alpha);
            			}
            			else {
HXLINE(  92)				blend_dirty = true;
            			}
HXLINE(  93)			if (!(blend_dirty)) {
HXLINE(  93)				blend_dirty = (this->last_blend_dest_rgb != this->geom_state->blend_dest_rgb);
            			}
            			else {
HXLINE(  93)				blend_dirty = true;
            			}
HXLINE(  94)			if (!(blend_dirty)) {
HXLINE(  94)				blend_dirty = (this->last_blend_dest_alpha != this->geom_state->blend_dest_alpha);
            			}
            			else {
HXLINE(  94)				blend_dirty = true;
            			}
HXLINE(  96)			bool _hx_tmp1;
HXDLIN(  96)			if (blend_dirty) {
HXLINE(  96)				_hx_tmp1 = !(this->geom_state->ignore_blend);
            			}
            			else {
HXLINE(  96)				_hx_tmp1 = false;
            			}
HXDLIN(  96)			if (_hx_tmp1) {
HXLINE(  98)				this->last_blend_disabled = this->geom_state->blend_disabled;
HXLINE(  99)				if (this->last_blend_disabled) {
HXLINE( 100)					batcher->renderer->state->disable((int)3042);
            				}
            				else {
HXLINE( 101)					batcher->renderer->state->enable((int)3042);
            				}
HXLINE( 103)				this->last_blend_src_rgb = this->geom_state->blend_src_rgb;
HXLINE( 104)				this->last_blend_src_alpha = this->geom_state->blend_src_alpha;
HXLINE( 105)				this->last_blend_dest_rgb = this->geom_state->blend_dest_rgb;
HXLINE( 106)				this->last_blend_dest_alpha = this->geom_state->blend_dest_alpha;
HXLINE( 107)				glBlendFuncSeparate(this->last_blend_src_rgb,this->last_blend_dest_rgb,this->last_blend_src_alpha,this->last_blend_dest_alpha);
            			}
            		}
HXLINE( 120)		if (this->geom_state->clip) {
HXLINE( 122)			if (!(this->is_clipping)) {
HXLINE( 123)				glEnable((int)3089);
HXLINE( 124)				this->is_clipping = true;
            			}
HXLINE( 128)			if (hx::IsNotNull( this->clip_rect )) {
HXLINE( 130)				if (!(this->clip_rect->equal(this->last_clip_rect))) {
HXLINE( 133)					batcher->renderer->state->scissor(this->clip_rect->x,this->clip_rect->y,this->clip_rect->w,this->clip_rect->h);
            				}
            			}
            		}
            		else {
HXLINE( 141)			if (this->is_clipping) {
HXLINE( 142)				glDisable((int)3089);
HXLINE( 143)				this->is_clipping = false;
            			}
            		}
HXLINE( 149)		this->geom_state->dirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BatchState_obj,activate,(void))

void BatchState_obj::deactivate( ::phoenix::Batcher batcher){
            	HX_STACKFRAME(&_hx_pos_9fa2823f836939df_153_deactivate)
HXLINE( 156)		if (hx::IsNotNull( this->last_texture_id )) {
HXLINE( 157)			batcher->renderer->state->bindTexture2D(null());
            		}
HXLINE( 162)		batcher->renderer->state->useProgram(null());
HXLINE( 165)		if (this->is_clipping) {
HXLINE( 165)			glDisable((int)3089);
            		}
HXLINE( 168)		batcher->renderer->state->enable((int)3042);
HXLINE( 169)		glBlendFunc((int)770,(int)771);
HXLINE( 170)		glBlendEquation((int)32774);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BatchState_obj,deactivate,(void))

bool BatchState_obj::update( ::phoenix::geometry::Geometry geom){
            	HX_STACKFRAME(&_hx_pos_9fa2823f836939df_174_update)
HXLINE( 176)		{
HXLINE( 176)			 ::phoenix::geometry::GeometryState _this = this->geom_state;
HXDLIN( 176)			 ::phoenix::geometry::GeometryState _other = this->last_geom_state;
HXDLIN( 176)			_other->dirty = _this->dirty;
HXDLIN( 176)			{
HXLINE( 176)				_other->dirty = true;
HXDLIN( 176)				_other->texture = _this->texture;
            			}
HXDLIN( 176)			{
HXLINE( 176)				_other->dirty = true;
HXDLIN( 176)				_other->shader = _this->shader;
            			}
HXDLIN( 176)			_other->depth = _this->depth;
HXDLIN( 176)			{
HXLINE( 176)				_other->dirty = true;
HXDLIN( 176)				_other->primitive_type = _this->primitive_type;
            			}
HXDLIN( 176)			{
HXLINE( 176)				_other->dirty = true;
HXDLIN( 176)				_other->clip = _this->clip;
            			}
HXDLIN( 176)			{
HXLINE( 176)				_other->dirty = true;
HXDLIN( 176)				_other->clip_x = _this->clip_x;
            			}
HXDLIN( 176)			{
HXLINE( 176)				_other->dirty = true;
HXDLIN( 176)				_other->clip_y = _this->clip_y;
            			}
HXDLIN( 176)			{
HXLINE( 176)				_other->dirty = true;
HXDLIN( 176)				_other->clip_w = _this->clip_w;
            			}
HXDLIN( 176)			{
HXLINE( 176)				_other->dirty = true;
HXDLIN( 176)				_other->clip_h = _this->clip_h;
            			}
HXDLIN( 176)			{
HXLINE( 176)				_other->dirty = true;
HXDLIN( 176)				_other->blend_disabled = _this->blend_disabled;
            			}
HXDLIN( 176)			{
HXLINE( 176)				_other->dirty = true;
HXDLIN( 176)				_other->blend_src_alpha = _this->blend_src_alpha;
            			}
HXDLIN( 176)			{
HXLINE( 176)				_other->dirty = true;
HXDLIN( 176)				_other->blend_src_rgb = _this->blend_src_rgb;
            			}
HXDLIN( 176)			{
HXLINE( 176)				_other->dirty = true;
HXDLIN( 176)				_other->blend_dest_alpha = _this->blend_dest_alpha;
            			}
HXDLIN( 176)			{
HXLINE( 176)				_other->dirty = true;
HXDLIN( 176)				_other->blend_dest_rgb = _this->blend_dest_rgb;
            			}
HXDLIN( 176)			_other->ignore_blend = _this->ignore_blend;
            		}
HXLINE( 177)		{
HXLINE( 177)			 ::phoenix::geometry::GeometryState _this1 = this->geom_state;
HXDLIN( 177)			 ::phoenix::geometry::GeometryState other = geom->state;
HXDLIN( 177)			if ((_this1->depth != other->depth)) {
HXLINE( 177)				_this1->depth = other->depth;
            			}
HXDLIN( 177)			if (hx::IsNotEq( _this1->texture,other->texture )) {
HXLINE( 177)				_this1->dirty = true;
HXDLIN( 177)				_this1->texture = other->texture;
            			}
HXDLIN( 177)			if (hx::IsNotEq( _this1->shader,other->shader )) {
HXLINE( 177)				_this1->dirty = true;
HXDLIN( 177)				_this1->shader = other->shader;
            			}
HXDLIN( 177)			if ((_this1->primitive_type != other->primitive_type)) {
HXLINE( 177)				_this1->dirty = true;
HXDLIN( 177)				_this1->primitive_type = other->primitive_type;
            			}
HXDLIN( 177)			if ((_this1->clip != other->clip)) {
HXLINE( 177)				_this1->dirty = true;
HXDLIN( 177)				_this1->clip = other->clip;
            			}
HXDLIN( 177)			if ((_this1->clip_x != other->clip_x)) {
HXLINE( 177)				_this1->dirty = true;
HXDLIN( 177)				_this1->clip_x = other->clip_x;
            			}
HXDLIN( 177)			if ((_this1->clip_y != other->clip_y)) {
HXLINE( 177)				_this1->dirty = true;
HXDLIN( 177)				_this1->clip_y = other->clip_y;
            			}
HXDLIN( 177)			if ((_this1->clip_w != other->clip_w)) {
HXLINE( 177)				_this1->dirty = true;
HXDLIN( 177)				_this1->clip_w = other->clip_w;
            			}
HXDLIN( 177)			if ((_this1->clip_h != other->clip_h)) {
HXLINE( 177)				_this1->dirty = true;
HXDLIN( 177)				_this1->clip_h = other->clip_h;
            			}
HXDLIN( 177)			if ((_this1->blend_disabled != other->blend_disabled)) {
HXLINE( 177)				_this1->dirty = true;
HXDLIN( 177)				_this1->blend_disabled = other->blend_disabled;
            			}
HXDLIN( 177)			if ((_this1->blend_src_alpha != other->blend_src_alpha)) {
HXLINE( 177)				_this1->dirty = true;
HXDLIN( 177)				_this1->blend_src_alpha = other->blend_src_alpha;
            			}
HXDLIN( 177)			if ((_this1->blend_src_rgb != other->blend_src_rgb)) {
HXLINE( 177)				_this1->dirty = true;
HXDLIN( 177)				_this1->blend_src_rgb = other->blend_src_rgb;
            			}
HXDLIN( 177)			if ((_this1->blend_dest_alpha != other->blend_dest_alpha)) {
HXLINE( 177)				_this1->dirty = true;
HXDLIN( 177)				_this1->blend_dest_alpha = other->blend_dest_alpha;
            			}
HXDLIN( 177)			if ((_this1->blend_dest_rgb != other->blend_dest_rgb)) {
HXLINE( 177)				_this1->dirty = true;
HXDLIN( 177)				_this1->blend_dest_rgb = other->blend_dest_rgb;
            			}
HXDLIN( 177)			if ((_this1->ignore_blend != other->ignore_blend)) {
HXLINE( 177)				_this1->ignore_blend = other->ignore_blend;
            			}
            		}
HXLINE( 179)		if (this->geom_state->clip) {
HXLINE( 180)			this->last_clip_rect = this->clip_rect;
HXLINE( 181)			this->clip_rect = geom->clip_rect;
            		}
HXLINE( 184)		if (!(this->geom_state->dirty)) {
HXLINE( 184)			return hx::IsNotEq( this->last_clip_rect,this->clip_rect );
            		}
            		else {
HXLINE( 184)			return true;
            		}
HXDLIN( 184)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BatchState_obj,update,return )

void BatchState_obj::str(){
            	HX_STACKFRAME(&_hx_pos_9fa2823f836939df_190_str)
HXLINE( 192)		if (!(this->log)) {
HXLINE( 192)			return;
            		}
HXLINE( 194)		::haxe::Log_obj::trace(HX_("\t+ BATCHSTATE LAST ",1f,46,e2,93),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),194,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
HXLINE( 195)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 195)		_hx_tmp((HX_("\t\tdepth - ",30,aa,11,c4) + this->last_geom_state->depth),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),195,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
HXLINE( 196)		 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 196)		::String _hx_tmp2;
HXDLIN( 196)		if (hx::IsNull( this->last_geom_state->texture )) {
HXLINE( 196)			_hx_tmp2 = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE( 196)			_hx_tmp2 = this->last_geom_state->texture->id;
            		}
HXDLIN( 196)		_hx_tmp1((HX_("\t\ttexture - ",58,01,33,88) + _hx_tmp2),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),196,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
HXLINE( 197)		if (hx::IsNotNull( this->last_geom_state->texture )) {
HXLINE( 198)			 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 198)			 ::opengl::GLObject this1 = this->last_geom_state->texture->texture;
HXDLIN( 198)			int _hx_tmp4;
HXDLIN( 198)			if (hx::IsNull( this1 )) {
HXLINE( 198)				_hx_tmp4 = (int)0;
            			}
            			else {
HXLINE( 198)				_hx_tmp4 = this1->id;
            			}
HXDLIN( 198)			_hx_tmp3((HX_("\t\t\t ",d7,c7,f9,05) + ((HX_("GLTexture(",32,1e,d3,33) + _hx_tmp4) + HX_(")",29,00,00,00))),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),198,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
            		}
HXLINE( 200)		 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 200)		::String _hx_tmp6;
HXDLIN( 200)		if (hx::IsNull( this->last_geom_state->shader )) {
HXLINE( 200)			_hx_tmp6 = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE( 200)			_hx_tmp6 = this->last_geom_state->shader->id;
            		}
HXDLIN( 200)		_hx_tmp5((HX_("\t\tshader - ",8e,f1,9d,79) + _hx_tmp6),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),200,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
HXLINE( 201)		 ::Dynamic _hx_tmp7 = ::haxe::Log_obj::trace;
HXDLIN( 201)		_hx_tmp7((HX_("\t\tprimitive_type - ",41,ea,f1,1f) + this->last_geom_state->primitive_type),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),201,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
HXLINE( 202)		 ::Dynamic _hx_tmp8 = ::haxe::Log_obj::trace;
HXDLIN( 202)		::String _hx_tmp9 = (HX_("\t\tclip - ",c3,d6,cd,6f) + ::Std_obj::string(this->last_geom_state->clip));
HXDLIN( 202)		_hx_tmp8(_hx_tmp9,hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),202,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
HXLINE( 203)		::haxe::Log_obj::trace(HX_("\t- BATCHSTATE LAST",e3,62,2c,ae),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),203,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
HXLINE( 205)		::haxe::Log_obj::trace(HX_("\t+ BATCHSTATE STATE",06,bb,31,a8),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),205,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
HXLINE( 206)		 ::Dynamic _hx_tmp10 = ::haxe::Log_obj::trace;
HXDLIN( 206)		_hx_tmp10((HX_("\t\tdepth - ",30,aa,11,c4) + this->geom_state->depth),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),206,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
HXLINE( 207)		 ::Dynamic _hx_tmp11 = ::haxe::Log_obj::trace;
HXDLIN( 207)		::String _hx_tmp12;
HXDLIN( 207)		if (hx::IsNull( this->geom_state->texture )) {
HXLINE( 207)			_hx_tmp12 = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE( 207)			_hx_tmp12 = this->geom_state->texture->id;
            		}
HXDLIN( 207)		_hx_tmp11((HX_("\t\ttexture - ",58,01,33,88) + _hx_tmp12),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),207,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
HXLINE( 208)		if (hx::IsNotNull( this->geom_state->texture )) {
HXLINE( 209)			 ::Dynamic _hx_tmp13 = ::haxe::Log_obj::trace;
HXDLIN( 209)			 ::opengl::GLObject this2 = this->geom_state->texture->texture;
HXDLIN( 209)			int _hx_tmp14;
HXDLIN( 209)			if (hx::IsNull( this2 )) {
HXLINE( 209)				_hx_tmp14 = (int)0;
            			}
            			else {
HXLINE( 209)				_hx_tmp14 = this2->id;
            			}
HXDLIN( 209)			_hx_tmp13((HX_("\t\t\t ",d7,c7,f9,05) + ((HX_("GLTexture(",32,1e,d3,33) + _hx_tmp14) + HX_(")",29,00,00,00))),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),209,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
            		}
HXLINE( 211)		 ::Dynamic _hx_tmp15 = ::haxe::Log_obj::trace;
HXDLIN( 211)		::String _hx_tmp16;
HXDLIN( 211)		if (hx::IsNull( this->geom_state->shader )) {
HXLINE( 211)			_hx_tmp16 = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE( 211)			_hx_tmp16 = this->geom_state->shader->id;
            		}
HXDLIN( 211)		_hx_tmp15((HX_("\t\tshader - ",8e,f1,9d,79) + _hx_tmp16),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),211,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
HXLINE( 212)		 ::Dynamic _hx_tmp17 = ::haxe::Log_obj::trace;
HXDLIN( 212)		_hx_tmp17((HX_("\t\tprimitive_type - ",41,ea,f1,1f) + this->geom_state->primitive_type),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),212,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
HXLINE( 213)		 ::Dynamic _hx_tmp18 = ::haxe::Log_obj::trace;
HXDLIN( 213)		::String _hx_tmp19 = (HX_("\t\tclip - ",c3,d6,cd,6f) + ::Std_obj::string(this->geom_state->clip));
HXDLIN( 213)		_hx_tmp18(_hx_tmp19,hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),213,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
HXLINE( 214)		::haxe::Log_obj::trace(HX_("\t- BATCHSTATE STATE",c4,98,f9,cc),hx::SourceInfo(HX_("BatchState.hx",07,6b,e4,91),214,HX_("phoenix.BatchState",96,62,b8,cc),HX_("str",b1,a8,57,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BatchState_obj,str,(void))


hx::ObjectPtr< BatchState_obj > BatchState_obj::__new( ::phoenix::Batcher _r) {
	hx::ObjectPtr< BatchState_obj > __this = new BatchState_obj();
	__this->__construct(_r);
	return __this;
}

hx::ObjectPtr< BatchState_obj > BatchState_obj::__alloc(hx::Ctx *_hx_ctx, ::phoenix::Batcher _r) {
	BatchState_obj *__this = (BatchState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BatchState_obj), true, "phoenix.BatchState"));
	*(void **)__this = BatchState_obj::_hx_vtable;
	__this->__construct(_r);
	return __this;
}

BatchState_obj::BatchState_obj()
{
}

void BatchState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BatchState);
	HX_MARK_MEMBER_NAME(batcher,"batcher");
	HX_MARK_MEMBER_NAME(geom_state,"geom_state");
	HX_MARK_MEMBER_NAME(last_geom_state,"last_geom_state");
	HX_MARK_MEMBER_NAME(last_texture_id,"last_texture_id");
	HX_MARK_MEMBER_NAME(last_shader_id,"last_shader_id");
	HX_MARK_MEMBER_NAME(is_clipping,"is_clipping");
	HX_MARK_MEMBER_NAME(clip_rect,"clip_rect");
	HX_MARK_MEMBER_NAME(last_clip_rect,"last_clip_rect");
	HX_MARK_MEMBER_NAME(last_blend_disabled,"last_blend_disabled");
	HX_MARK_MEMBER_NAME(last_blend_src_alpha,"last_blend_src_alpha");
	HX_MARK_MEMBER_NAME(last_blend_src_rgb,"last_blend_src_rgb");
	HX_MARK_MEMBER_NAME(last_blend_dest_alpha,"last_blend_dest_alpha");
	HX_MARK_MEMBER_NAME(last_blend_dest_rgb,"last_blend_dest_rgb");
	HX_MARK_MEMBER_NAME(log,"log");
	HX_MARK_END_CLASS();
}

void BatchState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(batcher,"batcher");
	HX_VISIT_MEMBER_NAME(geom_state,"geom_state");
	HX_VISIT_MEMBER_NAME(last_geom_state,"last_geom_state");
	HX_VISIT_MEMBER_NAME(last_texture_id,"last_texture_id");
	HX_VISIT_MEMBER_NAME(last_shader_id,"last_shader_id");
	HX_VISIT_MEMBER_NAME(is_clipping,"is_clipping");
	HX_VISIT_MEMBER_NAME(clip_rect,"clip_rect");
	HX_VISIT_MEMBER_NAME(last_clip_rect,"last_clip_rect");
	HX_VISIT_MEMBER_NAME(last_blend_disabled,"last_blend_disabled");
	HX_VISIT_MEMBER_NAME(last_blend_src_alpha,"last_blend_src_alpha");
	HX_VISIT_MEMBER_NAME(last_blend_src_rgb,"last_blend_src_rgb");
	HX_VISIT_MEMBER_NAME(last_blend_dest_alpha,"last_blend_dest_alpha");
	HX_VISIT_MEMBER_NAME(last_blend_dest_rgb,"last_blend_dest_rgb");
	HX_VISIT_MEMBER_NAME(log,"log");
}

hx::Val BatchState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { return hx::Val( log ); }
		if (HX_FIELD_EQ(inName,"str") ) { return hx::Val( str_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"batcher") ) { return hx::Val( batcher ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"activate") ) { return hx::Val( activate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clip_rect") ) { return hx::Val( clip_rect ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"geom_state") ) { return hx::Val( geom_state ); }
		if (HX_FIELD_EQ(inName,"deactivate") ) { return hx::Val( deactivate_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"is_clipping") ) { return hx::Val( is_clipping ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"active_shader") ) { return hx::Val( active_shader_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"last_shader_id") ) { return hx::Val( last_shader_id ); }
		if (HX_FIELD_EQ(inName,"last_clip_rect") ) { return hx::Val( last_clip_rect ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"last_geom_state") ) { return hx::Val( last_geom_state ); }
		if (HX_FIELD_EQ(inName,"last_texture_id") ) { return hx::Val( last_texture_id ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"last_blend_src_rgb") ) { return hx::Val( last_blend_src_rgb ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"last_blend_disabled") ) { return hx::Val( last_blend_disabled ); }
		if (HX_FIELD_EQ(inName,"last_blend_dest_rgb") ) { return hx::Val( last_blend_dest_rgb ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"last_blend_src_alpha") ) { return hx::Val( last_blend_src_alpha ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"last_blend_dest_alpha") ) { return hx::Val( last_blend_dest_alpha ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BatchState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { log=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"batcher") ) { batcher=inValue.Cast<  ::phoenix::Batcher >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clip_rect") ) { clip_rect=inValue.Cast<  ::phoenix::Rectangle >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"geom_state") ) { geom_state=inValue.Cast<  ::phoenix::geometry::GeometryState >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"is_clipping") ) { is_clipping=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"last_shader_id") ) { last_shader_id=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"last_clip_rect") ) { last_clip_rect=inValue.Cast<  ::phoenix::Rectangle >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"last_geom_state") ) { last_geom_state=inValue.Cast<  ::phoenix::geometry::GeometryState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"last_texture_id") ) { last_texture_id=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"last_blend_src_rgb") ) { last_blend_src_rgb=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"last_blend_disabled") ) { last_blend_disabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"last_blend_dest_rgb") ) { last_blend_dest_rgb=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"last_blend_src_alpha") ) { last_blend_src_alpha=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"last_blend_dest_alpha") ) { last_blend_dest_alpha=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BatchState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("batcher","\xa7","\x22","\x10","\xc0"));
	outFields->push(HX_HCSTRING("geom_state","\x0e","\x71","\xaa","\x98"));
	outFields->push(HX_HCSTRING("last_geom_state","\x97","\x47","\x3e","\x29"));
	outFields->push(HX_HCSTRING("last_texture_id","\x88","\x3a","\x6a","\x41"));
	outFields->push(HX_HCSTRING("last_shader_id","\x8c","\x05","\xd6","\x07"));
	outFields->push(HX_HCSTRING("is_clipping","\x77","\xd7","\x85","\xf0"));
	outFields->push(HX_HCSTRING("clip_rect","\x33","\x48","\xa2","\x89"));
	outFields->push(HX_HCSTRING("last_clip_rect","\xca","\x55","\x1a","\x62"));
	outFields->push(HX_HCSTRING("last_blend_disabled","\x73","\x8d","\x74","\x9c"));
	outFields->push(HX_HCSTRING("last_blend_src_alpha","\xac","\x04","\x06","\xaf"));
	outFields->push(HX_HCSTRING("last_blend_src_rgb","\xdb","\xa8","\x5c","\xa6"));
	outFields->push(HX_HCSTRING("last_blend_dest_alpha","\x38","\xba","\x4a","\x53"));
	outFields->push(HX_HCSTRING("last_blend_dest_rgb","\x67","\xa3","\xc4","\xe4"));
	outFields->push(HX_HCSTRING("log","\x84","\x54","\x52","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BatchState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::Batcher*/ ,(int)offsetof(BatchState_obj,batcher),HX_HCSTRING("batcher","\xa7","\x22","\x10","\xc0")},
	{hx::fsObject /*::phoenix::geometry::GeometryState*/ ,(int)offsetof(BatchState_obj,geom_state),HX_HCSTRING("geom_state","\x0e","\x71","\xaa","\x98")},
	{hx::fsObject /*::phoenix::geometry::GeometryState*/ ,(int)offsetof(BatchState_obj,last_geom_state),HX_HCSTRING("last_geom_state","\x97","\x47","\x3e","\x29")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BatchState_obj,last_texture_id),HX_HCSTRING("last_texture_id","\x88","\x3a","\x6a","\x41")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BatchState_obj,last_shader_id),HX_HCSTRING("last_shader_id","\x8c","\x05","\xd6","\x07")},
	{hx::fsBool,(int)offsetof(BatchState_obj,is_clipping),HX_HCSTRING("is_clipping","\x77","\xd7","\x85","\xf0")},
	{hx::fsObject /*::phoenix::Rectangle*/ ,(int)offsetof(BatchState_obj,clip_rect),HX_HCSTRING("clip_rect","\x33","\x48","\xa2","\x89")},
	{hx::fsObject /*::phoenix::Rectangle*/ ,(int)offsetof(BatchState_obj,last_clip_rect),HX_HCSTRING("last_clip_rect","\xca","\x55","\x1a","\x62")},
	{hx::fsBool,(int)offsetof(BatchState_obj,last_blend_disabled),HX_HCSTRING("last_blend_disabled","\x73","\x8d","\x74","\x9c")},
	{hx::fsInt,(int)offsetof(BatchState_obj,last_blend_src_alpha),HX_HCSTRING("last_blend_src_alpha","\xac","\x04","\x06","\xaf")},
	{hx::fsInt,(int)offsetof(BatchState_obj,last_blend_src_rgb),HX_HCSTRING("last_blend_src_rgb","\xdb","\xa8","\x5c","\xa6")},
	{hx::fsInt,(int)offsetof(BatchState_obj,last_blend_dest_alpha),HX_HCSTRING("last_blend_dest_alpha","\x38","\xba","\x4a","\x53")},
	{hx::fsInt,(int)offsetof(BatchState_obj,last_blend_dest_rgb),HX_HCSTRING("last_blend_dest_rgb","\x67","\xa3","\xc4","\xe4")},
	{hx::fsBool,(int)offsetof(BatchState_obj,log),HX_HCSTRING("log","\x84","\x54","\x52","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BatchState_obj_sStaticStorageInfo = 0;
#endif

static ::String BatchState_obj_sMemberFields[] = {
	HX_HCSTRING("batcher","\xa7","\x22","\x10","\xc0"),
	HX_HCSTRING("geom_state","\x0e","\x71","\xaa","\x98"),
	HX_HCSTRING("last_geom_state","\x97","\x47","\x3e","\x29"),
	HX_HCSTRING("last_texture_id","\x88","\x3a","\x6a","\x41"),
	HX_HCSTRING("last_shader_id","\x8c","\x05","\xd6","\x07"),
	HX_HCSTRING("is_clipping","\x77","\xd7","\x85","\xf0"),
	HX_HCSTRING("clip_rect","\x33","\x48","\xa2","\x89"),
	HX_HCSTRING("last_clip_rect","\xca","\x55","\x1a","\x62"),
	HX_HCSTRING("last_blend_disabled","\x73","\x8d","\x74","\x9c"),
	HX_HCSTRING("last_blend_src_alpha","\xac","\x04","\x06","\xaf"),
	HX_HCSTRING("last_blend_src_rgb","\xdb","\xa8","\x5c","\xa6"),
	HX_HCSTRING("last_blend_dest_alpha","\x38","\xba","\x4a","\x53"),
	HX_HCSTRING("last_blend_dest_rgb","\x67","\xa3","\xc4","\xe4"),
	HX_HCSTRING("log","\x84","\x54","\x52","\x00"),
	HX_HCSTRING("active_shader","\xbe","\xf3","\x0f","\x76"),
	HX_HCSTRING("activate","\xb3","\x1b","\xac","\xe5"),
	HX_HCSTRING("deactivate","\x34","\x5c","\x01","\x3c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("str","\xb1","\xa8","\x57","\x00"),
	::String(null()) };

static void BatchState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BatchState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BatchState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BatchState_obj::__mClass,"__mClass");
};

#endif

hx::Class BatchState_obj::__mClass;

void BatchState_obj::__register()
{
	hx::Object *dummy = new BatchState_obj;
	BatchState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.BatchState","\x96","\x62","\xb8","\xcc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BatchState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BatchState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BatchState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BatchState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BatchState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BatchState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
