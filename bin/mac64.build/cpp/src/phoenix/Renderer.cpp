// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_9484b18fc186cc5e
#define INCLUDED_9484b18fc186cc5e
#include "linc_opengl.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Resource
#include <haxe/Resource.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_opengl_GLObject
#include <opengl/GLObject.h>
#endif
#ifndef INCLUDED_phoenix_Backbuffer
#include <phoenix/Backbuffer.h>
#endif
#ifndef INCLUDED_phoenix_Batcher
#include <phoenix/Batcher.h>
#endif
#ifndef INCLUDED_phoenix_BitmapFont
#include <phoenix/BitmapFont.h>
#endif
#ifndef INCLUDED_phoenix_Camera
#include <phoenix/Camera.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_RenderPath
#include <phoenix/RenderPath.h>
#endif
#ifndef INCLUDED_phoenix_RenderState
#include <phoenix/RenderState.h>
#endif
#ifndef INCLUDED_phoenix_RenderTarget
#include <phoenix/RenderTarget.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_RendererStats
#include <phoenix/RendererStats.h>
#endif
#ifndef INCLUDED_phoenix_Shader
#include <phoenix/Shader.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_Runtime
#include <snow/modules/sdl/Runtime.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Asset
#include <snow/systems/assets/Asset.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetImage
#include <snow/systems/assets/AssetImage.h>
#endif
#ifndef INCLUDED_snow_types_ImageData
#include <snow/types/ImageData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_66_new,"phoenix.Renderer","new",0x1fe39014,"phoenix.Renderer.new","phoenix/Renderer.hx",66,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_130_init,"phoenix.Renderer","init",0xc3f338dc,"phoenix.Renderer.init","phoenix/Renderer.hx",130,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_188_destroy,"phoenix.Renderer","destroy",0xe481d6ae,"phoenix.Renderer.destroy","phoenix/Renderer.hx",188,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_193_sort_batchers,"phoenix.Renderer","sort_batchers",0x489f0ce1,"phoenix.Renderer.sort_batchers","phoenix/Renderer.hx",193,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_201_add_batch,"phoenix.Renderer","add_batch",0xa2b26e90,"phoenix.Renderer.add_batch","phoenix/Renderer.hx",201,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_210_remove_batch,"phoenix.Renderer","remove_batch",0x9e98000b,"phoenix.Renderer.remove_batch","phoenix/Renderer.hx",210,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_215_create_batcher,"phoenix.Renderer","create_batcher",0xfc84f3f0,"phoenix.Renderer.create_batcher","phoenix/Renderer.hx",215,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_250_clear,"phoenix.Renderer","clear",0x3b218641,"phoenix.Renderer.clear","phoenix/Renderer.hx",250,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_267_blend_disable,"phoenix.Renderer","blend_disable",0x9047cd6e,"phoenix.Renderer.blend_disable","phoenix/Renderer.hx",267,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_273_blend_mode,"phoenix.Renderer","blend_mode",0x5b8aa01d,"phoenix.Renderer.blend_mode","phoenix/Renderer.hx",273,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_279_blend_equation,"phoenix.Renderer","blend_equation",0x0d046d46,"phoenix.Renderer.blend_equation","phoenix/Renderer.hx",279,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_285_internal_resized,"phoenix.Renderer","internal_resized",0xd68aa17a,"phoenix.Renderer.internal_resized","phoenix/Renderer.hx",285,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_299_process,"phoenix.Renderer","process",0xb1464c23,"phoenix.Renderer.process","phoenix/Renderer.hx",299,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_320_prerender,"phoenix.Renderer","prerender",0xa4b6866d,"phoenix.Renderer.prerender","phoenix/Renderer.hx",320,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_326_get_target,"phoenix.Renderer","get_target",0xd262c1e6,"phoenix.Renderer.get_target","phoenix/Renderer.hx",326,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_330_set_target,"phoenix.Renderer","set_target",0xd5e0605a,"phoenix.Renderer.set_target","phoenix/Renderer.hx",330,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_340_bind_target,"phoenix.Renderer","bind_target",0x5a288487,"phoenix.Renderer.bind_target","phoenix/Renderer.hx",340,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_347_create_default_shaders,"phoenix.Renderer","create_default_shaders",0xf69f9f39,"phoenix.Renderer.create_default_shaders","phoenix/Renderer.hx",347,0x3d4c7b7b)
static const int _hx_array_data_4bb53622_18[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_d23a4cbe6764bbc6_413_create_default_font,"phoenix.Renderer","create_default_font",0xfe822b64,"phoenix.Renderer.create_default_font","phoenix/Renderer.hx",413,0x3d4c7b7b)
namespace phoenix{

void Renderer_obj::__construct( ::luxe::Engine _core, ::snow::systems::assets::AssetImage _asset){
            	HX_GC_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_66_new)
HXLINE(  95)		this->stop_count = (int)0;
HXLINE(  94)		this->stop = false;
HXLINE(  93)		this->should_clear = true;
HXLINE( 102)		this->core = _core;
HXLINE( 103)		this->font_asset = _asset;
HXLINE( 108)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,( (int)(linc::opengl::webgl::getParameter((int)36006)) ));
HXDLIN( 108)		this->default_framebuffer = this1;
HXLINE( 109)		 ::opengl::GLObject this2 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,( (int)(linc::opengl::webgl::getParameter((int)36007)) ));
HXDLIN( 109)		this->default_renderbuffer = this2;
HXLINE( 114)		Float render_scale_ratio = this->core->app->runtime->window_device_pixel_ratio();
HXLINE( 117)		this->backbuffer =  ::phoenix::Backbuffer_obj::__alloc( HX_CTX ,this->core->app->runtime->window_w,this->core->app->runtime->window_h,render_scale_ratio,this->default_framebuffer,this->default_renderbuffer);
            	}

Dynamic Renderer_obj::__CreateEmpty() { return new Renderer_obj; }

void *Renderer_obj::_hx_vtable = 0;

Dynamic Renderer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Renderer_obj > _hx_result = new Renderer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Renderer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0d5cab8e;
}

void Renderer_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_130_init)
HXLINE( 137)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 137)		::String _hx_tmp1 = (HX_(" i / renderer / ",46,ec,97,08) + (HX_("opengl ",d1,7c,43,40) + linc::opengl::webgl::getVersionString()));
HXDLIN( 137)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("Renderer.hx",3b,81,ac,8f),137,HX_("phoenix.Renderer",22,36,b5,4b),HX_("init",10,3b,bb,45)));
HXLINE( 139)		this->state =  ::phoenix::RenderState_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 140)		this->clear_color =  ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null())->rgb((int)1710618);
HXLINE( 141)		this->stats =  ::phoenix::RendererStats_obj::__alloc( HX_CTX );
HXLINE( 142)		this->set_target((this->default_target = this->backbuffer));
HXLINE( 143)		this->batchers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 146)		this->camera =  ::phoenix::Camera_obj::__alloc( HX_CTX ,null());
HXLINE( 148)		this->default_render_path =  ::phoenix::RenderPath_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 150)		this->render_path = this->default_render_path;
HXLINE( 153)		this->create_default_shaders();
HXLINE( 156)		this->batcher =  ::phoenix::Batcher_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),HX_("default batcher",48,68,ba,35),null());
HXLINE( 157)		{
HXLINE( 157)			 ::phoenix::Batcher _this = this->batcher;
HXDLIN( 157)			_this->layer = (int)1;
HXDLIN( 157)			_this->renderer->batchers->sort(_this->renderer->sort_batchers_dyn());
            		}
HXLINE( 158)		this->add_batch(this->batcher);
HXLINE( 162)		this->create_default_font();
HXLINE( 166)		if (hx::IsGreater(  ::Dynamic(::Luxe_obj::core->app->config->__Field(HX_("render",56,6b,29,05),hx::paccDynamic))->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic),(int)0 )) {
HXLINE( 168)			this->state->enable((int)2929);
HXLINE( 170)			this->state->depth_function((int)515);
HXLINE( 172)			glClearDepth(((Float)1.0));
            		}
HXLINE( 176)		glEnable((int)3042);
HXLINE( 177)		glBlendFunc((int)770,(int)771);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Renderer_obj,init,(void))

void Renderer_obj::destroy(){
            	HX_GC_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_188_destroy)
HXDLIN( 188)		this->clear( ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null())->rgb((int)16729099));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Renderer_obj,destroy,(void))

int Renderer_obj::sort_batchers( ::phoenix::Batcher a, ::phoenix::Batcher b){
            	HX_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_193_sort_batchers)
HXLINE( 194)		if ((a->layer < b->layer)) {
HXLINE( 194)			return (int)-1;
            		}
HXLINE( 195)		if ((a->layer > b->layer)) {
HXLINE( 195)			return (int)1;
            		}
HXLINE( 196)		if ((a->sequence < b->sequence)) {
HXLINE( 196)			return (int)-1;
            		}
HXLINE( 197)		if ((a->sequence > b->sequence)) {
HXLINE( 197)			return (int)1;
            		}
HXLINE( 198)		return (int)1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Renderer_obj,sort_batchers,return )

void Renderer_obj::add_batch( ::phoenix::Batcher batch){
            	HX_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_201_add_batch)
HXLINE( 203)		this->batchers->push(batch);
HXLINE( 204)		this->batchers->sort(this->sort_batchers_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Renderer_obj,add_batch,(void))

void Renderer_obj::remove_batch( ::phoenix::Batcher batch){
            	HX_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_210_remove_batch)
HXDLIN( 210)		this->batchers->remove(batch);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Renderer_obj,remove_batch,(void))

 ::phoenix::Batcher Renderer_obj::create_batcher( ::Dynamic options){
            	HX_GC_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_215_create_batcher)
HXLINE( 218)		int _new_batcher_layer = (int)2;
HXLINE( 220)		if (hx::IsNotNull( options )) {
HXLINE( 222)			if (hx::IsNull( ( (::String)(options->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) )) {
HXLINE( 222)				options->__SetField(HX_("name",4b,72,ff,48),HX_("batcher",a7,22,10,c0),hx::paccDynamic);
            			}
HXLINE( 223)			if (hx::IsNull( options->__Field(HX_("layer",d1,81,c0,6f),hx::paccDynamic) )) {
HXLINE( 223)				options->__SetField(HX_("layer",d1,81,c0,6f),_new_batcher_layer,hx::paccDynamic);
            			}
HXLINE( 224)			if (hx::IsNull( ( ( ::phoenix::Camera)(options->__Field(HX_("camera",a5,46,8c,b7),hx::paccDynamic)) ) )) {
HXLINE( 224)				options->__SetField(HX_("camera",a5,46,8c,b7), ::phoenix::Camera_obj::__alloc( HX_CTX ,null()),hx::paccDynamic);
            			}
HXLINE( 225)			if (hx::IsNull( options->__Field(HX_("max_verts",87,cb,3f,2b),hx::paccDynamic) )) {
HXLINE( 225)				options->__SetField(HX_("max_verts",87,cb,3f,2b),(int)16384,hx::paccDynamic);
            			}
            		}
            		else {
HXLINE( 228)			options =  ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("camera",a5,46,8c,b7), ::phoenix::Camera_obj::__alloc( HX_CTX ,null()))
            				->setFixed(1,HX_("max_verts",87,cb,3f,2b),(int)16384)
            				->setFixed(2,HX_("name",4b,72,ff,48),HX_("batcher",a7,22,10,c0))
            				->setFixed(3,HX_("layer",d1,81,c0,6f),_new_batcher_layer));
            		}
HXLINE( 236)		 ::phoenix::Batcher _batcher =  ::phoenix::Batcher_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this), ::Dynamic(options->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)), ::Dynamic(options->__Field(HX_("max_verts",87,cb,3f,2b),hx::paccDynamic)));
HXLINE( 237)		_batcher->view = ( ( ::phoenix::Camera)(options->__Field(HX_("camera",a5,46,8c,b7),hx::paccDynamic)) );
HXLINE( 238)		{
HXLINE( 238)			_batcher->layer = ( (int)(options->__Field(HX_("layer",d1,81,c0,6f),hx::paccDynamic)) );
HXDLIN( 238)			_batcher->renderer->batchers->sort(_batcher->renderer->sort_batchers_dyn());
            		}
HXLINE( 240)		bool _hx_tmp;
HXDLIN( 240)		if (hx::IsNotNull( options->__Field(HX_("no_add",e3,4b,d1,23),hx::paccDynamic) )) {
HXLINE( 240)			_hx_tmp = hx::IsEq( options->__Field(HX_("no_add",e3,4b,d1,23),hx::paccDynamic),false );
            		}
            		else {
HXLINE( 240)			_hx_tmp = true;
            		}
HXDLIN( 240)		if (_hx_tmp) {
HXLINE( 241)			this->add_batch(_batcher);
            		}
HXLINE( 245)		return _batcher;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Renderer_obj,create_batcher,return )

void Renderer_obj::clear( ::phoenix::Color _color){
            	HX_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_250_clear)
HXLINE( 252)		if (hx::IsNull( _color )) {
HXLINE( 252)			_color = this->clear_color;
            		}
HXLINE( 254)		glClearColor(_color->r,_color->g,_color->b,_color->a);
HXLINE( 256)		if (hx::IsGreater(  ::Dynamic(::Luxe_obj::core->app->config->__Field(HX_("render",56,6b,29,05),hx::paccDynamic))->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic),(int)0 )) {
HXLINE( 257)			glClear((int)16640);
HXLINE( 258)			glClearDepth(((Float)1.0));
            		}
            		else {
HXLINE( 260)			glClear((int)16384);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Renderer_obj,clear,(void))

void Renderer_obj::blend_disable(bool disabled_state){
            	HX_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_267_blend_disable)
HXDLIN( 267)		if (disabled_state) {
HXDLIN( 267)			this->state->enable((int)3042);
            		}
            		else {
HXDLIN( 267)			this->state->disable((int)3042);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Renderer_obj,blend_disable,(void))

void Renderer_obj::blend_mode( ::Dynamic __o__src_mode,hx::Null< int >  __o__dst_mode){
 ::Dynamic _src_mode = __o__src_mode.Default(770);
int _dst_mode = __o__dst_mode.Default(771);
            	HX_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_273_blend_mode)
HXDLIN( 273)		glBlendFunc(_src_mode,_dst_mode);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Renderer_obj,blend_mode,(void))

void Renderer_obj::blend_equation( ::Dynamic __o__equation){
 ::Dynamic _equation = __o__equation.Default(32774);
            	HX_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_279_blend_equation)
HXDLIN( 279)		glBlendEquation(_equation);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Renderer_obj,blend_equation,(void))

void Renderer_obj::internal_resized(int _w,int _h){
            	HX_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_285_internal_resized)
HXLINE( 287)		this->backbuffer->width = _w;
HXLINE( 288)		this->backbuffer->height = _h;
HXLINE( 292)		this->backbuffer->viewport_scale = this->core->app->runtime->window_device_pixel_ratio();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Renderer_obj,internal_resized,(void))

void Renderer_obj::process(){
            	HX_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_299_process)
HXLINE( 303)		if (this->should_clear) {
HXLINE( 304)			this->clear(this->clear_color);
            		}
HXLINE( 308)		this->render_path->render(this->batchers,this->stats);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Renderer_obj,process,(void))

void Renderer_obj::prerender(){
            	HX_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_320_prerender)
HXDLIN( 320)		this->stats->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Renderer_obj,prerender,(void))

::Dynamic Renderer_obj::get_target(){
            	HX_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_326_get_target)
HXDLIN( 326)		return this->target;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Renderer_obj,get_target,return )

::Dynamic Renderer_obj::set_target(::Dynamic _target){
            	HX_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_330_set_target)
HXLINE( 332)		if (hx::IsNull( _target )) {
HXLINE( 332)			_target = this->default_target;
            		}
HXLINE( 334)		{
HXLINE( 334)			this->state->bindFramebuffer(( ( ::opengl::GLObject)(_target->__Field(HX_("framebuffer",ed,14,48,7a),hx::paccDynamic)) ));
HXDLIN( 334)			this->state->bindRenderbuffer(( ( ::opengl::GLObject)(_target->__Field(HX_("renderbuffer",d6,4c,56,0b),hx::paccDynamic)) ));
            		}
HXLINE( 336)		return (this->target = _target);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Renderer_obj,set_target,return )

void Renderer_obj::bind_target(::Dynamic _target){
            	HX_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_340_bind_target)
HXLINE( 342)		this->state->bindFramebuffer(( ( ::opengl::GLObject)(_target->__Field(HX_("framebuffer",ed,14,48,7a),hx::paccDynamic)) ));
HXLINE( 343)		this->state->bindRenderbuffer(( ( ::opengl::GLObject)(_target->__Field(HX_("renderbuffer",d6,4c,56,0b),hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Renderer_obj,bind_target,(void))

void Renderer_obj::create_default_shaders(){
            	HX_GC_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_347_create_default_shaders)
HXLINE( 351)		::String vert = null();
HXLINE( 352)		::String frag = null();
HXLINE( 353)		::String frag_textured = null();
HXLINE( 354)		::String frag_bitmapfont = null();
HXLINE( 357)		if (hx::IsEq(  ::Dynamic( ::Dynamic(::Luxe_obj::core->app->config->__Field(HX_("render",56,6b,29,05),hx::paccDynamic))->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__Field(HX_("profile",29,49,49,f3),hx::paccDynamic),(int)1 )) {
HXLINE( 358)			::Array< int > vaos = ::Array_obj< int >::fromData( _hx_array_data_4bb53622_18,1);
HXLINE( 359)			glGenVertexArrays((int)1, (GLuint*)&(vaos[0]));
HXLINE( 360)			glBindVertexArray(vaos->__get((int)0));
HXLINE( 362)			vert = ::haxe::Resource_obj::getString(HX_("default.vert.gl3.glsl",ee,ba,74,5d));
HXLINE( 363)			frag = ::haxe::Resource_obj::getString(HX_("default.frag.gl3.glsl",4d,3e,98,05));
HXLINE( 364)			frag_textured = ::haxe::Resource_obj::getString(HX_("default.frag.textured.gl3.glsl",b4,91,67,e5));
HXLINE( 365)			frag_bitmapfont = ::haxe::Resource_obj::getString(HX_("default.frag.bitmapfont.gl3.glsl",3f,e3,39,2c));
            		}
HXLINE( 369)		if (hx::IsNull( vert )) {
HXLINE( 370)			vert = ::haxe::Resource_obj::getString(HX_("default.vert.glsl",ee,68,0a,e0));
HXLINE( 371)			frag = ::haxe::Resource_obj::getString(HX_("default.frag.glsl",cd,10,f3,a2));
HXLINE( 372)			frag_textured = ::haxe::Resource_obj::getString(HX_("default.frag.textured.glsl",b4,e4,4c,d4));
HXLINE( 373)			frag_bitmapfont = ::haxe::Resource_obj::getString(HX_("default.frag.bitmapfont.glsl",bf,d4,fe,6d));
            		}
HXLINE( 388)		 ::phoenix::Shader _plain =  ::phoenix::Shader_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("id",db,5b,00,00),HX_("luxe.shader",dd,5c,ea,47))
            			->setFixed(1,HX_("frag_id",08,24,78,44),HX_("default",c1,d8,c3,9b))
            			->setFixed(2,HX_("vert_id",e9,81,93,7d),HX_("default",c1,d8,c3,9b))));
HXLINE( 389)		 ::phoenix::Shader _textured =  ::phoenix::Shader_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("id",db,5b,00,00),HX_("luxe.shader_textured",0b,8e,98,db))
            			->setFixed(1,HX_("frag_id",08,24,78,44),HX_("textured",29,f7,ce,65))
            			->setFixed(2,HX_("vert_id",e9,81,93,7d),HX_("default",c1,d8,c3,9b))));
HXLINE( 390)		 ::phoenix::Shader _font =  ::phoenix::Shader_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("id",db,5b,00,00),HX_("luxe.shader_bitmapfont",a0,24,cb,f6))
            			->setFixed(1,HX_("frag_id",08,24,78,44),HX_("bitmapfont",3e,91,44,4a))
            			->setFixed(2,HX_("vert_id",e9,81,93,7d),HX_("default",c1,d8,c3,9b))));
HXLINE( 393)		bool _ok = true;
HXLINE( 395)		if (_ok) {
HXLINE( 395)			_ok = _plain->from_string(vert,frag);
            		}
            		else {
HXLINE( 395)			_ok = false;
            		}
HXLINE( 396)		if (_ok) {
HXLINE( 396)			_ok = _textured->from_string(vert,frag_textured);
            		}
            		else {
HXLINE( 396)			_ok = false;
            		}
HXLINE( 397)		if (_ok) {
HXLINE( 397)			_ok = _font->from_string(vert,frag_bitmapfont);
            		}
            		else {
HXLINE( 397)			_ok = false;
            		}
HXLINE( 399)		if (!(_ok)) {
HXLINE( 399)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion((HX_("_ok",3b,77,48,00) + ((HX_(" ( ",18,6b,18,00) + HX_("Default shaders failed to compile or link. See log for errors",54,24,13,89)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 403)		this->shaders =  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("plain",0a,fa,8d,c4), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("shader",25,bf,20,1d),_plain)
            				->setFixed(1,HX_("source",db,b0,31,32), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("frag",32,99,c2,43),frag)
            					->setFixed(1,HX_("vert",b1,34,4c,4e),vert)))))
            			->setFixed(1,HX_("bitmapfont",3e,91,44,4a), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("shader",25,bf,20,1d),_font)
            				->setFixed(1,HX_("source",db,b0,31,32), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("frag",32,99,c2,43),frag_bitmapfont)
            					->setFixed(1,HX_("vert",b1,34,4c,4e),vert)))))
            			->setFixed(2,HX_("textured",29,f7,ce,65), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("shader",25,bf,20,1d),_textured)
            				->setFixed(1,HX_("source",db,b0,31,32), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("frag",32,99,c2,43),frag_textured)
            					->setFixed(1,HX_("vert",b1,34,4c,4e),vert))))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Renderer_obj,create_default_shaders,(void))

void Renderer_obj::create_default_font(){
            	HX_GC_STACKFRAME(&_hx_pos_d23a4cbe6764bbc6_413_create_default_font)
HXLINE( 415)		if (hx::IsNull( this->font_asset )) {
HXLINE( 415)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("font_asset was null",be,7c,51,cf) + ((HX_(" ( ",18,6b,18,00) + HX_("Renderer / failed to create the default font",b1,8e,c2,5b)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 420)		 ::phoenix::Texture _font_texture =  ::phoenix::Texture_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("pixels",2d,ef,a9,8c),this->font_asset->image->pixels)
            			->setFixed(1,HX_("width",06,b6,62,ca),this->font_asset->image->width_actual)
            			->setFixed(2,HX_("id",db,5b,00,00),HX_("luxe.font.png",42,9a,18,5d))
            			->setFixed(3,HX_("height",e7,07,4c,02),this->font_asset->image->height_actual)));
HXLINE( 427)		if (hx::IsNull( _font_texture )) {
HXLINE( 427)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("_font_texture was null",b4,4d,06,3c) + ((HX_(" ( ",18,6b,18,00) + HX_("Renderer / failed to create the default font... font_texture was null.",3e,5e,80,40)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 429)		::String _font_data = ::haxe::Resource_obj::getString(HX_("default.fnt",ff,63,9b,05));
HXLINE( 431)		this->font =  ::phoenix::BitmapFont_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("pages",44,2b,4d,bd),::Array_obj< ::Dynamic>::__new(1)->init(0,_font_texture))
            			->setFixed(1,HX_("id",db,5b,00,00),HX_("luxe.font",87,9d,30,c2))
            			->setFixed(2,HX_("font_data",da,a5,22,0e),_font_data)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Renderer_obj,create_default_font,(void))


hx::ObjectPtr< Renderer_obj > Renderer_obj::__new( ::luxe::Engine _core, ::snow::systems::assets::AssetImage _asset) {
	hx::ObjectPtr< Renderer_obj > __this = new Renderer_obj();
	__this->__construct(_core,_asset);
	return __this;
}

hx::ObjectPtr< Renderer_obj > Renderer_obj::__alloc(hx::Ctx *_hx_ctx, ::luxe::Engine _core, ::snow::systems::assets::AssetImage _asset) {
	Renderer_obj *__this = (Renderer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Renderer_obj), true, "phoenix.Renderer"));
	*(void **)__this = Renderer_obj::_hx_vtable;
	__this->__construct(_core,_asset);
	return __this;
}

Renderer_obj::Renderer_obj()
{
}

void Renderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Renderer);
	HX_MARK_MEMBER_NAME(batchers,"batchers");
	HX_MARK_MEMBER_NAME(core,"core");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(default_framebuffer,"default_framebuffer");
	HX_MARK_MEMBER_NAME(default_renderbuffer,"default_renderbuffer");
	HX_MARK_MEMBER_NAME(shaders,"shaders");
	HX_MARK_MEMBER_NAME(batcher,"batcher");
	HX_MARK_MEMBER_NAME(camera,"camera");
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(font_asset,"font_asset");
	HX_MARK_MEMBER_NAME(render_path,"render_path");
	HX_MARK_MEMBER_NAME(default_render_path,"default_render_path");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(default_target,"default_target");
	HX_MARK_MEMBER_NAME(backbuffer,"backbuffer");
	HX_MARK_MEMBER_NAME(should_clear,"should_clear");
	HX_MARK_MEMBER_NAME(stop,"stop");
	HX_MARK_MEMBER_NAME(stop_count,"stop_count");
	HX_MARK_MEMBER_NAME(clear_color,"clear_color");
	HX_MARK_MEMBER_NAME(stats,"stats");
	HX_MARK_END_CLASS();
}

void Renderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(batchers,"batchers");
	HX_VISIT_MEMBER_NAME(core,"core");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(default_framebuffer,"default_framebuffer");
	HX_VISIT_MEMBER_NAME(default_renderbuffer,"default_renderbuffer");
	HX_VISIT_MEMBER_NAME(shaders,"shaders");
	HX_VISIT_MEMBER_NAME(batcher,"batcher");
	HX_VISIT_MEMBER_NAME(camera,"camera");
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(font_asset,"font_asset");
	HX_VISIT_MEMBER_NAME(render_path,"render_path");
	HX_VISIT_MEMBER_NAME(default_render_path,"default_render_path");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(default_target,"default_target");
	HX_VISIT_MEMBER_NAME(backbuffer,"backbuffer");
	HX_VISIT_MEMBER_NAME(should_clear,"should_clear");
	HX_VISIT_MEMBER_NAME(stop,"stop");
	HX_VISIT_MEMBER_NAME(stop_count,"stop_count");
	HX_VISIT_MEMBER_NAME(clear_color,"clear_color");
	HX_VISIT_MEMBER_NAME(stats,"stats");
}

hx::Val Renderer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { return hx::Val( core ); }
		if (HX_FIELD_EQ(inName,"font") ) { return hx::Val( font ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state ); }
		if (HX_FIELD_EQ(inName,"stats") ) { return hx::Val( stats ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camera") ) { return hx::Val( camera ); }
		if (HX_FIELD_EQ(inName,"target") ) { return hx::Val( inCallProp == hx::paccAlways ? get_target() : target ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"shaders") ) { return hx::Val( shaders ); }
		if (HX_FIELD_EQ(inName,"batcher") ) { return hx::Val( batcher ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"process") ) { return hx::Val( process_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"batchers") ) { return hx::Val( batchers ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"add_batch") ) { return hx::Val( add_batch_dyn() ); }
		if (HX_FIELD_EQ(inName,"prerender") ) { return hx::Val( prerender_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"font_asset") ) { return hx::Val( font_asset ); }
		if (HX_FIELD_EQ(inName,"backbuffer") ) { return hx::Val( backbuffer ); }
		if (HX_FIELD_EQ(inName,"stop_count") ) { return hx::Val( stop_count ); }
		if (HX_FIELD_EQ(inName,"blend_mode") ) { return hx::Val( blend_mode_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_target") ) { return hx::Val( get_target_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_target") ) { return hx::Val( set_target_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"render_path") ) { return hx::Val( render_path ); }
		if (HX_FIELD_EQ(inName,"clear_color") ) { return hx::Val( clear_color ); }
		if (HX_FIELD_EQ(inName,"bind_target") ) { return hx::Val( bind_target_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"should_clear") ) { return hx::Val( should_clear ); }
		if (HX_FIELD_EQ(inName,"remove_batch") ) { return hx::Val( remove_batch_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sort_batchers") ) { return hx::Val( sort_batchers_dyn() ); }
		if (HX_FIELD_EQ(inName,"blend_disable") ) { return hx::Val( blend_disable_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"default_target") ) { return hx::Val( default_target ); }
		if (HX_FIELD_EQ(inName,"create_batcher") ) { return hx::Val( create_batcher_dyn() ); }
		if (HX_FIELD_EQ(inName,"blend_equation") ) { return hx::Val( blend_equation_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"internal_resized") ) { return hx::Val( internal_resized_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"default_framebuffer") ) { return hx::Val( default_framebuffer ); }
		if (HX_FIELD_EQ(inName,"default_render_path") ) { return hx::Val( default_render_path ); }
		if (HX_FIELD_EQ(inName,"create_default_font") ) { return hx::Val( create_default_font_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"default_renderbuffer") ) { return hx::Val( default_renderbuffer ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"create_default_shaders") ) { return hx::Val( create_default_shaders_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Renderer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { core=inValue.Cast<  ::luxe::Engine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"font") ) { font=inValue.Cast<  ::phoenix::BitmapFont >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stop") ) { stop=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::phoenix::RenderState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stats") ) { stats=inValue.Cast<  ::phoenix::RendererStats >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camera") ) { camera=inValue.Cast<  ::phoenix::Camera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"target") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_target(inValue.Cast< ::Dynamic >()) );target=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"shaders") ) { shaders=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"batcher") ) { batcher=inValue.Cast<  ::phoenix::Batcher >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"batchers") ) { batchers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"font_asset") ) { font_asset=inValue.Cast<  ::snow::systems::assets::AssetImage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backbuffer") ) { backbuffer=inValue.Cast<  ::phoenix::Backbuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stop_count") ) { stop_count=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"render_path") ) { render_path=inValue.Cast<  ::phoenix::RenderPath >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clear_color") ) { clear_color=inValue.Cast<  ::phoenix::Color >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"should_clear") ) { should_clear=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"default_target") ) { default_target=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"default_framebuffer") ) { default_framebuffer=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"default_render_path") ) { default_render_path=inValue.Cast<  ::phoenix::RenderPath >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"default_renderbuffer") ) { default_renderbuffer=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Renderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("batchers","\xec","\x2f","\x0e","\x4e"));
	outFields->push(HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"));
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	outFields->push(HX_HCSTRING("default_framebuffer","\x2f","\x39","\x98","\x94"));
	outFields->push(HX_HCSTRING("default_renderbuffer","\x54","\xe2","\x25","\xf7"));
	outFields->push(HX_HCSTRING("shaders","\xae","\x81","\x86","\x5f"));
	outFields->push(HX_HCSTRING("batcher","\xa7","\x22","\x10","\xc0"));
	outFields->push(HX_HCSTRING("camera","\xa5","\x46","\x8c","\xb7"));
	outFields->push(HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"));
	outFields->push(HX_HCSTRING("font_asset","\x40","\xd4","\xdf","\xa1"));
	outFields->push(HX_HCSTRING("render_path","\x6e","\xbe","\xe6","\x35"));
	outFields->push(HX_HCSTRING("default_render_path","\xb0","\xe2","\x36","\x50"));
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	outFields->push(HX_HCSTRING("default_target","\x4f","\x36","\x53","\x57"));
	outFields->push(HX_HCSTRING("backbuffer","\x67","\x2e","\x8a","\xda"));
	outFields->push(HX_HCSTRING("should_clear","\x41","\x09","\xe6","\x4f"));
	outFields->push(HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"));
	outFields->push(HX_HCSTRING("stop_count","\x92","\x69","\x65","\x3b"));
	outFields->push(HX_HCSTRING("clear_color","\xf1","\x51","\x9c","\xa5"));
	outFields->push(HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Renderer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Renderer_obj,batchers),HX_HCSTRING("batchers","\xec","\x2f","\x0e","\x4e")},
	{hx::fsObject /*::luxe::Engine*/ ,(int)offsetof(Renderer_obj,core),HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41")},
	{hx::fsObject /*::phoenix::RenderState*/ ,(int)offsetof(Renderer_obj,state),HX_HCSTRING("state","\x11","\x76","\x0b","\x84")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Renderer_obj,default_framebuffer),HX_HCSTRING("default_framebuffer","\x2f","\x39","\x98","\x94")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Renderer_obj,default_renderbuffer),HX_HCSTRING("default_renderbuffer","\x54","\xe2","\x25","\xf7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Renderer_obj,shaders),HX_HCSTRING("shaders","\xae","\x81","\x86","\x5f")},
	{hx::fsObject /*::phoenix::Batcher*/ ,(int)offsetof(Renderer_obj,batcher),HX_HCSTRING("batcher","\xa7","\x22","\x10","\xc0")},
	{hx::fsObject /*::phoenix::Camera*/ ,(int)offsetof(Renderer_obj,camera),HX_HCSTRING("camera","\xa5","\x46","\x8c","\xb7")},
	{hx::fsObject /*::phoenix::BitmapFont*/ ,(int)offsetof(Renderer_obj,font),HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43")},
	{hx::fsObject /*::snow::systems::assets::AssetImage*/ ,(int)offsetof(Renderer_obj,font_asset),HX_HCSTRING("font_asset","\x40","\xd4","\xdf","\xa1")},
	{hx::fsObject /*::phoenix::RenderPath*/ ,(int)offsetof(Renderer_obj,render_path),HX_HCSTRING("render_path","\x6e","\xbe","\xe6","\x35")},
	{hx::fsObject /*::phoenix::RenderPath*/ ,(int)offsetof(Renderer_obj,default_render_path),HX_HCSTRING("default_render_path","\xb0","\xe2","\x36","\x50")},
	{hx::fsObject /*::phoenix::RenderTarget*/ ,(int)offsetof(Renderer_obj,target),HX_HCSTRING("target","\x51","\xf3","\xec","\x86")},
	{hx::fsObject /*::phoenix::RenderTarget*/ ,(int)offsetof(Renderer_obj,default_target),HX_HCSTRING("default_target","\x4f","\x36","\x53","\x57")},
	{hx::fsObject /*::phoenix::Backbuffer*/ ,(int)offsetof(Renderer_obj,backbuffer),HX_HCSTRING("backbuffer","\x67","\x2e","\x8a","\xda")},
	{hx::fsBool,(int)offsetof(Renderer_obj,should_clear),HX_HCSTRING("should_clear","\x41","\x09","\xe6","\x4f")},
	{hx::fsBool,(int)offsetof(Renderer_obj,stop),HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c")},
	{hx::fsInt,(int)offsetof(Renderer_obj,stop_count),HX_HCSTRING("stop_count","\x92","\x69","\x65","\x3b")},
	{hx::fsObject /*::phoenix::Color*/ ,(int)offsetof(Renderer_obj,clear_color),HX_HCSTRING("clear_color","\xf1","\x51","\x9c","\xa5")},
	{hx::fsObject /*::phoenix::RendererStats*/ ,(int)offsetof(Renderer_obj,stats),HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Renderer_obj_sStaticStorageInfo = 0;
#endif

static ::String Renderer_obj_sMemberFields[] = {
	HX_HCSTRING("batchers","\xec","\x2f","\x0e","\x4e"),
	HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"),
	HX_HCSTRING("state","\x11","\x76","\x0b","\x84"),
	HX_HCSTRING("default_framebuffer","\x2f","\x39","\x98","\x94"),
	HX_HCSTRING("default_renderbuffer","\x54","\xe2","\x25","\xf7"),
	HX_HCSTRING("shaders","\xae","\x81","\x86","\x5f"),
	HX_HCSTRING("batcher","\xa7","\x22","\x10","\xc0"),
	HX_HCSTRING("camera","\xa5","\x46","\x8c","\xb7"),
	HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"),
	HX_HCSTRING("font_asset","\x40","\xd4","\xdf","\xa1"),
	HX_HCSTRING("render_path","\x6e","\xbe","\xe6","\x35"),
	HX_HCSTRING("default_render_path","\xb0","\xe2","\x36","\x50"),
	HX_HCSTRING("target","\x51","\xf3","\xec","\x86"),
	HX_HCSTRING("default_target","\x4f","\x36","\x53","\x57"),
	HX_HCSTRING("backbuffer","\x67","\x2e","\x8a","\xda"),
	HX_HCSTRING("should_clear","\x41","\x09","\xe6","\x4f"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("stop_count","\x92","\x69","\x65","\x3b"),
	HX_HCSTRING("clear_color","\xf1","\x51","\x9c","\xa5"),
	HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("sort_batchers","\x2d","\x24","\xe7","\xf1"),
	HX_HCSTRING("add_batch","\xdc","\xef","\x31","\x2d"),
	HX_HCSTRING("remove_batch","\x3f","\x56","\x3b","\xe4"),
	HX_HCSTRING("create_batcher","\x24","\x3f","\x51","\x72"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("blend_disable","\xba","\xe4","\x8f","\x39"),
	HX_HCSTRING("blend_mode","\x51","\x41","\x9c","\x00"),
	HX_HCSTRING("blend_equation","\x7a","\xb8","\xd0","\x82"),
	HX_HCSTRING("internal_resized","\xae","\x21","\x67","\x90"),
	HX_HCSTRING("process","\x6f","\xa2","\x4a","\xf1"),
	HX_HCSTRING("prerender","\xb9","\x07","\x36","\x2f"),
	HX_HCSTRING("get_target","\x1a","\x63","\x74","\x77"),
	HX_HCSTRING("set_target","\x8e","\x01","\xf2","\x7a"),
	HX_HCSTRING("bind_target","\xd3","\xf0","\x83","\x24"),
	HX_HCSTRING("create_default_shaders","\x6d","\x3e","\x38","\xab"),
	HX_HCSTRING("create_default_font","\xb0","\xc3","\xd4","\x93"),
	::String(null()) };

static void Renderer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Renderer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Renderer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Renderer_obj::__mClass,"__mClass");
};

#endif

hx::Class Renderer_obj::__mClass;

void Renderer_obj::__register()
{
	hx::Object *dummy = new Renderer_obj;
	Renderer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.Renderer","\x22","\x36","\xb5","\x4b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Renderer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Renderer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Renderer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Renderer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Renderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Renderer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
