// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_phoenix_MatrixTransform
#include <phoenix/MatrixTransform.h>
#endif
#ifndef INCLUDED_phoenix_Quaternion
#include <phoenix/Quaternion.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_25cc0c0e7c3ec332_16_new,"phoenix.MatrixTransform","new",0x876d86de,"phoenix.MatrixTransform.new","phoenix/Matrix.hx",16,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_25cc0c0e7c3ec332_22_destroy,"phoenix.MatrixTransform","destroy",0x262ffa78,"phoenix.MatrixTransform.destroy","phoenix/Matrix.hx",22,0x938b753d)
namespace phoenix{

void MatrixTransform_obj::__construct( ::phoenix::Vector p, ::phoenix::Quaternion r, ::phoenix::Vector s){
            	HX_STACKFRAME(&_hx_pos_25cc0c0e7c3ec332_16_new)
HXLINE(  17)		this->pos = p;
HXLINE(  18)		this->rotation = r;
HXLINE(  19)		this->scale = s;
            	}

Dynamic MatrixTransform_obj::__CreateEmpty() { return new MatrixTransform_obj; }

void *MatrixTransform_obj::_hx_vtable = 0;

Dynamic MatrixTransform_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MatrixTransform_obj > _hx_result = new MatrixTransform_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool MatrixTransform_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7dcbc39c;
}

void MatrixTransform_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_25cc0c0e7c3ec332_22_destroy)
HXLINE(  23)		this->pos = null();
HXDLIN(  23)		this->rotation = null();
HXDLIN(  23)		this->scale = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MatrixTransform_obj,destroy,(void))


hx::ObjectPtr< MatrixTransform_obj > MatrixTransform_obj::__new( ::phoenix::Vector p, ::phoenix::Quaternion r, ::phoenix::Vector s) {
	hx::ObjectPtr< MatrixTransform_obj > __this = new MatrixTransform_obj();
	__this->__construct(p,r,s);
	return __this;
}

hx::ObjectPtr< MatrixTransform_obj > MatrixTransform_obj::__alloc(hx::Ctx *_hx_ctx, ::phoenix::Vector p, ::phoenix::Quaternion r, ::phoenix::Vector s) {
	MatrixTransform_obj *__this = (MatrixTransform_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MatrixTransform_obj), true, "phoenix.MatrixTransform"));
	*(void **)__this = MatrixTransform_obj::_hx_vtable;
	__this->__construct(p,r,s);
	return __this;
}

MatrixTransform_obj::MatrixTransform_obj()
{
}

void MatrixTransform_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MatrixTransform);
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(rotation,"rotation");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_END_CLASS();
}

void MatrixTransform_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(rotation,"rotation");
	HX_VISIT_MEMBER_NAME(scale,"scale");
}

hx::Val MatrixTransform_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { return hx::Val( rotation ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MatrixTransform_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { rotation=inValue.Cast<  ::phoenix::Quaternion >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MatrixTransform_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MatrixTransform_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(MatrixTransform_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{hx::fsObject /*::phoenix::Quaternion*/ ,(int)offsetof(MatrixTransform_obj,rotation),HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(MatrixTransform_obj,scale),HX_HCSTRING("scale","\x8a","\xce","\xce","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MatrixTransform_obj_sStaticStorageInfo = 0;
#endif

static ::String MatrixTransform_obj_sMemberFields[] = {
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void MatrixTransform_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MatrixTransform_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MatrixTransform_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MatrixTransform_obj::__mClass,"__mClass");
};

#endif

hx::Class MatrixTransform_obj::__mClass;

void MatrixTransform_obj::__register()
{
	hx::Object *dummy = new MatrixTransform_obj;
	MatrixTransform_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.MatrixTransform","\xec","\x7f","\xf5","\x03");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MatrixTransform_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MatrixTransform_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MatrixTransform_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MatrixTransform_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MatrixTransform_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MatrixTransform_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
