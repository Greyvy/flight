// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Resources
#include <luxe/Resources.h>
#endif
#ifndef INCLUDED_luxe_importers_bitmapfont_BitmapFontParser
#include <luxe/importers/bitmapfont/BitmapFontParser.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_luxe_utils_unifill_Unifill
#include <luxe/utils/unifill/Unifill.h>
#endif
#ifndef INCLUDED_luxe_utils_unifill__Utf8_Utf8_Impl_
#include <luxe/utils/unifill/_Utf8/Utf8_Impl_.h>
#endif
#ifndef INCLUDED_phoenix_BitmapFont
#include <phoenix/BitmapFont.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Asset
#include <snow/systems/assets/Asset.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetText
#include <snow/systems/assets/AssetText.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Assets
#include <snow/systems/assets/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1c3eb680478ed598_46_new,"phoenix.BitmapFont","new",0x6066476f,"phoenix.BitmapFont.new","phoenix/BitmapFont.hx",46,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_79_kerning,"phoenix.BitmapFont","kerning",0xd354655b,"phoenix.BitmapFont.kerning","phoenix/BitmapFont.hx",79,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_93_wrap_string_to_bounds,"phoenix.BitmapFont","wrap_string_to_bounds",0x606853ef,"phoenix.BitmapFont.wrap_string_to_bounds","phoenix/BitmapFont.hx",93,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_160_width_of_line,"phoenix.BitmapFont","width_of_line",0x6ed884b2,"phoenix.BitmapFont.width_of_line","phoenix/BitmapFont.hx",160,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_202_width_of,"phoenix.BitmapFont","width_of",0x45eb5b81,"phoenix.BitmapFont.width_of","phoenix/BitmapFont.hx",202,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_229_height_of,"phoenix.BitmapFont","height_of",0x5232c5fe,"phoenix.BitmapFont.height_of","phoenix/BitmapFont.hx",229,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_235_dimensions_of,"phoenix.BitmapFont","dimensions_of",0x35ee66d8,"phoenix.BitmapFont.dimensions_of","phoenix/BitmapFont.hx",235,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_245_height_of_lines,"phoenix.BitmapFont","height_of_lines",0xbb497dbe,"phoenix.BitmapFont.height_of_lines","phoenix/BitmapFont.hx",245,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_257_line_height_to_point_size,"phoenix.BitmapFont","line_height_to_point_size",0x40f4e7f6,"phoenix.BitmapFont.line_height_to_point_size","phoenix/BitmapFont.hx",257,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_263_clear,"phoenix.BitmapFont","clear",0xab450a5c,"phoenix.BitmapFont.clear","phoenix/BitmapFont.hx",263,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_313_reload,"phoenix.BitmapFont","reload",0x2d5b6faa,"phoenix.BitmapFont.reload","phoenix/BitmapFont.hx",313,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_320_reload,"phoenix.BitmapFont","reload",0x2d5b6faa,"phoenix.BitmapFont.reload","phoenix/BitmapFont.hx",320,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_289_reload,"phoenix.BitmapFont","reload",0x2d5b6faa,"phoenix.BitmapFont.reload","phoenix/BitmapFont.hx",289,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_327_reload,"phoenix.BitmapFont","reload",0x2d5b6faa,"phoenix.BitmapFont.reload","phoenix/BitmapFont.hx",327,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_282_reload,"phoenix.BitmapFont","reload",0x2d5b6faa,"phoenix.BitmapFont.reload","phoenix/BitmapFont.hx",282,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_276_reload,"phoenix.BitmapFont","reload",0x2d5b6faa,"phoenix.BitmapFont.reload","phoenix/BitmapFont.hx",276,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_340_apply_pages,"phoenix.BitmapFont","apply_pages",0x16a15c82,"phoenix.BitmapFont.apply_pages","phoenix/BitmapFont.hx",340,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_352_set_info,"phoenix.BitmapFont","set_info",0x09cbdffc,"phoenix.BitmapFont.set_info","phoenix/BitmapFont.hx",352,0xdfcf0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_1c3eb680478ed598_365_toString,"phoenix.BitmapFont","toString",0xce67633d,"phoenix.BitmapFont.toString","phoenix/BitmapFont.hx",365,0xdfcf0e40)
namespace phoenix{

void BitmapFont_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_1c3eb680478ed598_46_new)
HXLINE(  48)		if (hx::IsNull( _options )) {
HXLINE(  48)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("_options was null",3f,38,24,a1)));
            		}
HXLINE(  50)		_options->__SetField(HX_("resource_type",0b,87,30,9c),(int)6,hx::paccDynamic);
HXLINE(  52)		super::__construct(_options);
HXLINE(  54)		if (hx::IsNotNull( ( (::String)(_options->__Field(HX_("texture_path",c9,3e,d5,62),hx::paccDynamic)) ) )) {
HXLINE(  55)			this->texture_path = ( (::String)(_options->__Field(HX_("texture_path",c9,3e,d5,62),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  57)			this->texture_path = ::haxe::io::Path_obj::directory(this->id);
            		}
HXLINE(  60)		this->pages =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  62)		if (hx::IsNotNull( ( (::Array< ::Dynamic>)(_options->__Field(HX_("pages",44,2b,4d,bd),hx::paccDynamic)) ) )) {
HXLINE(  62)			if (hx::IsNull( ( (::String)(_options->__Field(HX_("font_data",da,a5,22,0e),hx::paccDynamic)) ) )) {
HXLINE(  62)				HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("_options.font_data was null",13,a6,8e,f7) + ((HX_(" ( ",18,6b,18,00) + HX_("BitmapFont create from pages + font_data requires both of those options",3a,08,e2,81)) + HX_(" )",09,1c,00,00)))));
            			}
            		}
HXLINE(  63)		if (hx::IsNotNull( ( (::String)(_options->__Field(HX_("font_data",da,a5,22,0e),hx::paccDynamic)) ) )) {
HXLINE(  65)			if (hx::IsNull( ( (::Array< ::Dynamic>)(_options->__Field(HX_("pages",44,2b,4d,bd),hx::paccDynamic)) ) )) {
HXLINE(  65)				HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("_options.pages was null",e9,9f,dc,8f) + ((HX_(" ( ",18,6b,18,00) + HX_("BitmapFont create from pages + font_data requires both of those options",3a,08,e2,81)) + HX_(" )",09,1c,00,00)))));
            			}
HXLINE(  67)			this->set_info(::luxe::importers::bitmapfont::BitmapFontParser_obj::parse(( (::String)(_options->__Field(HX_("font_data",da,a5,22,0e),hx::paccDynamic)) )));
HXLINE(  68)			this->apply_pages(( (::Array< ::Dynamic>)(_options->__Field(HX_("pages",44,2b,4d,bd),hx::paccDynamic)) ));
            		}
            	}

Dynamic BitmapFont_obj::__CreateEmpty() { return new BitmapFont_obj; }

void *BitmapFont_obj::_hx_vtable = 0;

Dynamic BitmapFont_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapFont_obj > _hx_result = new BitmapFont_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool BitmapFont_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x40d63fd6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x40d63fd6;
	} else {
		return inClassId==(int)0x7fa72781;
	}
}

 ::Dynamic BitmapFont_obj::kerning(int _first,int _second){
            	HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_79_kerning)
HXLINE(  81)		 ::haxe::ds::IntMap _map = ( ( ::haxe::ds::IntMap)( ::Dynamic(this->info->__Field(HX_("kernings",27,b8,8b,80),hx::paccDynamic))) )->get(_first).StaticCast<  ::haxe::ds::IntMap >();
HXLINE(  83)		bool _hx_tmp;
HXDLIN(  83)		if (hx::IsNotNull( _map )) {
HXLINE(  83)			_hx_tmp = _map->exists(_second);
            		}
            		else {
HXLINE(  83)			_hx_tmp = false;
            		}
HXDLIN(  83)		if (_hx_tmp) {
HXLINE(  84)			return _map->get(_second);
            		}
HXLINE(  87)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapFont_obj,kerning,return )

::String BitmapFont_obj::wrap_string_to_bounds(::String _string, ::phoenix::Rectangle _bounds,hx::Null< Float >  __o__point_size,hx::Null< Float >  __o__letter_spc){
Float _point_size = __o__point_size.Default(((Float)1.0));
Float _letter_spc = __o__letter_spc.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_93_wrap_string_to_bounds)
HXDLIN(  93)		 ::phoenix::BitmapFont _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  95)		if (hx::IsNull( _bounds )) {
HXLINE(  96)			return _string;
            		}
HXLINE(  99)		Float _cur_x = ((Float)0.0);
HXDLIN(  99)		int _idx = (int)0;
HXLINE( 100)		::String _final_str = HX_("",00,00,00,00);
HXLINE( 106)		Float _max_w = ((Float)0.0);
HXDLIN( 106)		bool _push_widths = false;
HXDLIN( 106)		::Array< ::String > _lines = ::luxe::utils::unifill::Unifill_obj::uSplit(HX_(" ",20,00,00,00),HX_("\n",0a,00,00,00));
HXDLIN( 106)		{
HXLINE( 106)			int _g = (int)0;
HXDLIN( 106)			while((_g < _lines->length)){
HXLINE( 106)				::String _line = _lines->__get(_g);
HXDLIN( 106)				_g = (_g + (int)1);
HXDLIN( 106)				Float _cur_w = _gthis->width_of_line(_line,_point_size,_letter_spc);
HXDLIN( 106)				_max_w = ::Math_obj::max(_max_w,_cur_w);
HXDLIN( 106)				if (_push_widths) {
HXLINE( 106)					hx::Throw(HX_("Null access",fd,55,a3,82))(_cur_w);
            				}
            			}
            		}
HXDLIN( 106)		Float _spacew = _max_w;
HXLINE( 118)		::Array< ::String > _strings = _string.split(HX_(" ",20,00,00,00));
HXLINE( 119)		int _count = _strings->length;
HXLINE( 121)		{
HXLINE( 121)			int _g1 = (int)0;
HXDLIN( 121)			while((_g1 < _strings->length)){
HXLINE( 121)				::String _str = _strings->__get(_g1);
HXDLIN( 121)				_g1 = (_g1 + (int)1);
HXLINE( 122)				int startIndex = (int)0;
HXDLIN( 122)				::String this1 = _str;
HXDLIN( 122)				::String this2 = this1;
HXDLIN( 122)				::String this3 = this2;
HXDLIN( 122)				int index;
HXDLIN( 122)				if ((startIndex >= (int)0)) {
HXLINE( 122)					int index1 = (int)0;
HXDLIN( 122)					int len = this3.length;
HXDLIN( 122)					int i = (int)0;
HXDLIN( 122)					while(true){
HXLINE( 122)						bool index2;
HXDLIN( 122)						if ((i < startIndex)) {
HXLINE( 122)							index2 = (index1 < len);
            						}
            						else {
HXLINE( 122)							index2 = false;
            						}
HXDLIN( 122)						if (!(index2)) {
HXLINE( 122)							goto _hx_goto_4;
            						}
HXDLIN( 122)						int c = this3.cca(index1);
HXDLIN( 122)						int index3;
HXDLIN( 122)						if ((c < (int)192)) {
HXLINE( 122)							index3 = (int)1;
            						}
            						else {
HXLINE( 122)							if ((c < (int)224)) {
HXLINE( 122)								index3 = (int)2;
            							}
            							else {
HXLINE( 122)								if ((c < (int)240)) {
HXLINE( 122)									index3 = (int)3;
            								}
            								else {
HXLINE( 122)									if ((c < (int)248)) {
HXLINE( 122)										index3 = (int)4;
            									}
            									else {
HXLINE( 122)										index3 = (int)1;
            									}
            								}
            							}
            						}
HXDLIN( 122)						index1 = (index1 + index3);
HXDLIN( 122)						i = (i + (int)1);
            					}
            					_hx_goto_4:;
HXDLIN( 122)					index = index1;
            				}
            				else {
HXLINE( 122)					int index4 = (int)0;
HXDLIN( 122)					int count = (int)0;
HXDLIN( 122)					while(true){
HXLINE( 122)						bool index5;
HXDLIN( 122)						if ((count < -(startIndex))) {
HXLINE( 122)							index5 = ((int)0 < index4);
            						}
            						else {
HXLINE( 122)							index5 = false;
            						}
HXDLIN( 122)						if (!(index5)) {
HXLINE( 122)							goto _hx_goto_5;
            						}
HXDLIN( 122)						::String this4 = this3;
HXDLIN( 122)						::String this5 = this4;
HXDLIN( 122)						int c1 = this5.cca((index4 - (int)1));
HXDLIN( 122)						int index6;
HXDLIN( 122)						bool index7;
HXDLIN( 122)						if ((c1 >= (int)128)) {
HXLINE( 122)							index7 = (c1 >= (int)192);
            						}
            						else {
HXLINE( 122)							index7 = true;
            						}
HXDLIN( 122)						if (index7) {
HXLINE( 122)							index6 = (int)1;
            						}
            						else {
HXLINE( 122)							::String this6 = this4;
HXDLIN( 122)							if ((((int)this6.cca((index4 - (int)2)) & (int)(int)224) == (int)192)) {
HXLINE( 122)								index6 = (int)2;
            							}
            							else {
HXLINE( 122)								::String this7 = this4;
HXDLIN( 122)								if ((((int)this7.cca((index4 - (int)3)) & (int)(int)240) == (int)224)) {
HXLINE( 122)									index6 = (int)3;
            								}
            								else {
HXLINE( 122)									::String this8 = this4;
HXDLIN( 122)									if ((((int)this8.cca((index4 - (int)4)) & (int)(int)248) == (int)240)) {
HXLINE( 122)										index6 = (int)4;
            									}
            									else {
HXLINE( 122)										index6 = (int)1;
            									}
            								}
            							}
            						}
HXDLIN( 122)						index4 = (index4 - index6);
HXDLIN( 122)						count = (count + (int)1);
            					}
            					_hx_goto_5:;
HXDLIN( 122)					index = index4;
            				}
HXDLIN( 122)				int index8 = _str.indexOf(HX_("\n",0a,00,00,00),index);
HXDLIN( 122)				int _hx_tmp;
HXDLIN( 122)				if ((index8 >= (int)0)) {
HXLINE( 122)					::String this9 = _str;
HXDLIN( 122)					::String this10 = this9;
HXDLIN( 122)					_hx_tmp = ::luxe::utils::unifill::_Utf8::Utf8_Impl__obj::codePointCount(this10,(int)0,index8);
            				}
            				else {
HXLINE( 122)					_hx_tmp = (int)-1;
            				}
HXDLIN( 122)				if ((_hx_tmp == (int)-1)) {
HXLINE( 123)					if ((_str == HX_("",00,00,00,00))) {
HXLINE( 123)						_str = HX_(" ",20,00,00,00);
            					}
HXLINE( 124)					{
HXLINE( 124)						Float _max_w1 = ((Float)0.0);
HXDLIN( 124)						bool _push_widths1 = false;
HXDLIN( 124)						::Array< ::String > _lines1 = ::luxe::utils::unifill::Unifill_obj::uSplit(_str,HX_("\n",0a,00,00,00));
HXDLIN( 124)						{
HXLINE( 124)							int _g2 = (int)0;
HXDLIN( 124)							while((_g2 < _lines1->length)){
HXLINE( 124)								::String _line1 = _lines1->__get(_g2);
HXDLIN( 124)								_g2 = (_g2 + (int)1);
HXDLIN( 124)								Float _cur_w1 = _gthis->width_of_line(_line1,_point_size,_letter_spc);
HXDLIN( 124)								_max_w1 = ::Math_obj::max(_max_w1,_cur_w1);
HXDLIN( 124)								if (_push_widths1) {
HXLINE( 124)									hx::Throw(HX_("Null access",fd,55,a3,82))(_cur_w1);
            								}
            							}
            						}
HXDLIN( 124)						Float _w = _max_w1;
HXDLIN( 124)						if (((_cur_x + _w) > _bounds->w)) {
HXLINE( 124)							_cur_x = (int)0;
HXDLIN( 124)							_final_str = (_final_str + HX_("\n",0a,00,00,00));
            						}
HXDLIN( 124)						_cur_x = (_cur_x + _w);
HXDLIN( 124)						_final_str = (_final_str + _str);
            					}
            				}
            				else {
HXLINE( 126)					int _widx = (int)0;
HXLINE( 127)					::Array< ::String > _words = _str.split(HX_("\n",0a,00,00,00));
HXLINE( 128)					{
HXLINE( 128)						int _g11 = (int)0;
HXDLIN( 128)						while((_g11 < _words->length)){
HXLINE( 128)							::String _word = _words->__get(_g11);
HXDLIN( 128)							_g11 = (_g11 + (int)1);
HXLINE( 130)							if ((_word != HX_("",00,00,00,00))) {
HXLINE( 131)								Float _max_w2 = ((Float)0.0);
HXDLIN( 131)								bool _push_widths2 = false;
HXDLIN( 131)								::Array< ::String > _lines2 = ::luxe::utils::unifill::Unifill_obj::uSplit(_word,HX_("\n",0a,00,00,00));
HXDLIN( 131)								{
HXLINE( 131)									int _g3 = (int)0;
HXDLIN( 131)									while((_g3 < _lines2->length)){
HXLINE( 131)										::String _line2 = _lines2->__get(_g3);
HXDLIN( 131)										_g3 = (_g3 + (int)1);
HXDLIN( 131)										Float _cur_w2 = _gthis->width_of_line(_line2,_point_size,_letter_spc);
HXDLIN( 131)										_max_w2 = ::Math_obj::max(_max_w2,_cur_w2);
HXDLIN( 131)										if (_push_widths2) {
HXLINE( 131)											hx::Throw(HX_("Null access",fd,55,a3,82))(_cur_w2);
            										}
            									}
            								}
HXDLIN( 131)								Float _w1 = _max_w2;
HXDLIN( 131)								if (((_cur_x + _w1) > _bounds->w)) {
HXLINE( 131)									_cur_x = (int)0;
HXDLIN( 131)									_final_str = (_final_str + HX_("\n",0a,00,00,00));
            								}
HXDLIN( 131)								_cur_x = (_cur_x + _w1);
HXDLIN( 131)								_final_str = (_final_str + _word);
            							}
            							else {
HXLINE( 133)								_cur_x = (int)0;
            							}
HXLINE( 136)							if ((_widx < (_words->length - (int)1))) {
HXLINE( 137)								_final_str = (_final_str + HX_("\n",0a,00,00,00));
HXLINE( 138)								_cur_x = (int)0;
            							}
HXLINE( 141)							_widx = (_widx + (int)1);
            						}
            					}
            				}
HXLINE( 146)				if ((_idx < (_count - (int)1))) {
HXLINE( 147)					_final_str = (_final_str + HX_(" ",20,00,00,00));
HXLINE( 148)					_cur_x = (_cur_x + (_spacew + _letter_spc));
            				}
HXLINE( 151)				_idx = (_idx + (int)1);
            			}
            		}
HXLINE( 155)		return _final_str;
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapFont_obj,wrap_string_to_bounds,return )

Float BitmapFont_obj::width_of_line(::String _string,hx::Null< Float >  __o__point_size,hx::Null< Float >  __o__letter_spc){
Float _point_size = __o__point_size.Default(((Float)1.0));
Float _letter_spc = __o__letter_spc.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_160_width_of_line)
HXLINE( 163)		Float _cur_x = ((Float)0.0);
HXLINE( 165)		Float _cur_w = ((Float)0.0);
HXLINE( 167)		Float _ratio = ((Float)_point_size / (Float)( (Float)(this->info->__Field(HX_("point_size",50,66,f5,4b),hx::paccDynamic)) ));
HXLINE( 169)		int i = (int)0;
HXLINE( 170)		::String this1 = _string;
HXDLIN( 170)		::String this2 = this1;
HXDLIN( 170)		int _len = ::luxe::utils::unifill::_Utf8::Utf8_Impl__obj::codePointCount(this2,(int)0,_string.length);
HXLINE( 172)		{
HXLINE( 172)			::String _g_string;
HXDLIN( 172)			int _g_index;
HXDLIN( 172)			int _g_i;
HXDLIN( 172)			int _g_endIndex;
HXDLIN( 172)			_g_i = (int)0;
HXDLIN( 172)			_g_string = _string;
HXDLIN( 172)			_g_index = (int)0;
HXDLIN( 172)			_g_endIndex = _string.length;
HXDLIN( 172)			while((_g_index < _g_endIndex)){
HXLINE( 172)				_g_i = _g_index;
HXDLIN( 172)				::String this3 = _g_string;
HXDLIN( 172)				::String this4 = this3;
HXDLIN( 172)				int c = this4.cca(_g_index);
HXDLIN( 172)				int _g_index1;
HXDLIN( 172)				if ((c < (int)192)) {
HXLINE( 172)					_g_index1 = (int)1;
            				}
            				else {
HXLINE( 172)					if ((c < (int)224)) {
HXLINE( 172)						_g_index1 = (int)2;
            					}
            					else {
HXLINE( 172)						if ((c < (int)240)) {
HXLINE( 172)							_g_index1 = (int)3;
            						}
            						else {
HXLINE( 172)							if ((c < (int)248)) {
HXLINE( 172)								_g_index1 = (int)4;
            							}
            							else {
HXLINE( 172)								_g_index1 = (int)1;
            							}
            						}
            					}
            				}
HXDLIN( 172)				_g_index = (_g_index + _g_index1);
HXDLIN( 172)				::String this5 = _g_string;
HXDLIN( 172)				::String this6 = this5;
HXDLIN( 172)				int _uglyph = ::luxe::utils::unifill::_Utf8::Utf8_Impl__obj::codePointAt(this6,_g_i);
HXLINE( 174)				int _index = _uglyph;
HXLINE( 175)				 ::Dynamic _char = ( ( ::haxe::ds::IntMap)( ::Dynamic(this->info->__Field(HX_("chars",dd,9c,b3,45),hx::paccDynamic))) )->get(_index);
HXLINE( 176)				if (hx::IsNull( _char )) {
HXLINE( 176)					_char = this->space_char;
            				}
HXLINE( 180)				Float _char1 = ( (Float)(_char->__Field(HX_("xoffset",0b,42,4f,de),hx::paccDynamic)) );
HXDLIN( 180)				Float _cw = ((_char1 + ::Math_obj::max(( (Float)(_char->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ),( (Float)(_char->__Field(HX_("xadvance",0a,87,b1,be),hx::paccDynamic)) ))) * _ratio);
HXLINE( 181)				Float _cx = (_cur_x + (( (Float)(_char->__Field(HX_("xoffset",0b,42,4f,de),hx::paccDynamic)) ) * _ratio));
HXLINE( 183)				Float _spacing = ( (Float)(_char->__Field(HX_("xadvance",0a,87,b1,be),hx::paccDynamic)) );
HXLINE( 184)				if ((i < (_len - (int)1))) {
HXLINE( 185)					int _next_index = ::haxe::Utf8_obj::charCodeAt(_string,(i + (int)1));
HXLINE( 186)					 ::haxe::ds::IntMap _map = ( ( ::haxe::ds::IntMap)(::haxe::IMap_obj::get( ::Dynamic(this->info->__Field(HX_("kernings",27,b8,8b,80),hx::paccDynamic)),_index)) );
HXDLIN( 186)					 ::Dynamic _spacing1;
HXDLIN( 186)					bool _spacing2;
HXDLIN( 186)					if (hx::IsNotNull( _map )) {
HXLINE( 186)						_spacing2 = _map->exists(_next_index);
            					}
            					else {
HXLINE( 186)						_spacing2 = false;
            					}
HXDLIN( 186)					if (_spacing2) {
HXLINE( 186)						_spacing1 = _map->get(_next_index);
            					}
            					else {
HXLINE( 186)						_spacing1 = (int)0;
            					}
HXDLIN( 186)					_spacing = (_spacing + _spacing1);
HXLINE( 187)					if ((_next_index >= (int)32)) {
HXLINE( 187)						_spacing = (_spacing + _letter_spc);
            					}
            				}
HXLINE( 190)				_cur_x = (_cur_x + (_spacing * _ratio));
HXLINE( 191)				_cur_w = ::Math_obj::max(_cur_w,(_cx + _cw));
HXLINE( 193)				i = (i + (int)1);
            			}
            		}
HXLINE( 196)		return _cur_w;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapFont_obj,width_of_line,return )

Float BitmapFont_obj::width_of(::String _string,hx::Null< Float >  __o__point_size,hx::Null< Float >  __o__letter_spc,::Array< Float > _line_widths){
Float _point_size = __o__point_size.Default(((Float)1.0));
Float _letter_spc = __o__letter_spc.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_202_width_of)
HXLINE( 205)		Float _max_w = ((Float)0.0);
HXLINE( 206)		bool _push_widths = hx::IsNotNull( _line_widths );
HXLINE( 207)		::Array< ::String > _lines = ::luxe::utils::unifill::Unifill_obj::uSplit(_string,HX_("\n",0a,00,00,00));
HXLINE( 209)		{
HXLINE( 209)			int _g = (int)0;
HXDLIN( 209)			while((_g < _lines->length)){
HXLINE( 209)				::String _line = _lines->__get(_g);
HXDLIN( 209)				_g = (_g + (int)1);
HXLINE( 211)				Float _cur_w = this->width_of_line(_line,_point_size,_letter_spc);
HXLINE( 213)				_max_w = ::Math_obj::max(_max_w,_cur_w);
HXLINE( 215)				if (_push_widths) {
HXLINE( 216)					_line_widths->push(_cur_w);
            				}
            			}
            		}
HXLINE( 222)		return _max_w;
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapFont_obj,width_of,return )

Float BitmapFont_obj::height_of(::String _string,Float _point_size,hx::Null< Float >  __o__line_spc){
Float _line_spc = __o__line_spc.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_229_height_of)
HXDLIN( 229)		::Array< ::String > _lines = _string.split(HX_("\n",0a,00,00,00));
HXDLIN( 229)		Float _ratio = ((Float)_point_size / (Float)( (Float)(this->info->__Field(HX_("point_size",50,66,f5,4b),hx::paccDynamic)) ));
HXDLIN( 229)		int _lines1 = _lines->length;
HXDLIN( 229)		return (_lines1 * ((( (Float)(this->info->__Field(HX_("line_height",12,a8,c5,e1),hx::paccDynamic)) ) + _line_spc) * _ratio));
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapFont_obj,height_of,return )

 ::phoenix::Vector BitmapFont_obj::dimensions_of(::String _string,Float _point_size, ::phoenix::Vector _into,hx::Null< Float >  __o__letter_spc,hx::Null< Float >  __o__line_spc){
Float _letter_spc = __o__letter_spc.Default(((Float)0.0));
Float _line_spc = __o__line_spc.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_235_dimensions_of)
HXLINE( 237)		Float _max_w = ((Float)0.0);
HXDLIN( 237)		bool _push_widths = false;
HXDLIN( 237)		::Array< ::String > _lines = ::luxe::utils::unifill::Unifill_obj::uSplit(_string,HX_("\n",0a,00,00,00));
HXDLIN( 237)		{
HXLINE( 237)			int _g = (int)0;
HXDLIN( 237)			while((_g < _lines->length)){
HXLINE( 237)				::String _line = _lines->__get(_g);
HXDLIN( 237)				_g = (_g + (int)1);
HXDLIN( 237)				Float _cur_w = this->width_of_line(_line,_point_size,_letter_spc);
HXDLIN( 237)				_max_w = ::Math_obj::max(_max_w,_cur_w);
HXDLIN( 237)				if (_push_widths) {
HXLINE( 237)					hx::Throw(HX_("Null access",fd,55,a3,82))(_cur_w);
            				}
            			}
            		}
HXDLIN( 237)		Float _width = _max_w;
HXLINE( 238)		::Array< ::String > _lines1 = _string.split(HX_("\n",0a,00,00,00));
HXDLIN( 238)		Float _ratio = ((Float)_point_size / (Float)( (Float)(this->info->__Field(HX_("point_size",50,66,f5,4b),hx::paccDynamic)) ));
HXDLIN( 238)		int _lines2 = _lines1->length;
HXDLIN( 238)		Float _height = (_lines2 * ((( (Float)(this->info->__Field(HX_("line_height",12,a8,c5,e1),hx::paccDynamic)) ) + _line_spc) * _ratio));
HXLINE( 240)		bool prev = _into->ignore_listeners;
HXDLIN( 240)		_into->ignore_listeners = true;
HXDLIN( 240)		{
HXLINE( 240)			_into->x = _width;
HXDLIN( 240)			if (!(_into->_construct)) {
HXLINE( 240)				bool _hx_tmp;
HXDLIN( 240)				if (hx::IsNotNull( _into->listen_x )) {
HXLINE( 240)					_hx_tmp = !(_into->ignore_listeners);
            				}
            				else {
HXLINE( 240)					_hx_tmp = false;
            				}
HXDLIN( 240)				if (_hx_tmp) {
HXLINE( 240)					_into->listen_x(_width);
            				}
            			}
            		}
HXDLIN( 240)		{
HXLINE( 240)			_into->y = _height;
HXDLIN( 240)			if (!(_into->_construct)) {
HXLINE( 240)				bool _hx_tmp1;
HXDLIN( 240)				if (hx::IsNotNull( _into->listen_y )) {
HXLINE( 240)					_hx_tmp1 = !(_into->ignore_listeners);
            				}
            				else {
HXLINE( 240)					_hx_tmp1 = false;
            				}
HXDLIN( 240)				if (_hx_tmp1) {
HXLINE( 240)					_into->listen_y(_height);
            				}
            			}
            		}
HXDLIN( 240)		_into->ignore_listeners = prev;
HXDLIN( 240)		bool _hx_tmp2;
HXDLIN( 240)		if (hx::IsNotNull( _into->listen_x )) {
HXLINE( 240)			_hx_tmp2 = !(_into->ignore_listeners);
            		}
            		else {
HXLINE( 240)			_hx_tmp2 = false;
            		}
HXDLIN( 240)		if (_hx_tmp2) {
HXLINE( 240)			_into->listen_x(_into->x);
            		}
HXDLIN( 240)		bool _hx_tmp3;
HXDLIN( 240)		if (hx::IsNotNull( _into->listen_y )) {
HXLINE( 240)			_hx_tmp3 = !(_into->ignore_listeners);
            		}
            		else {
HXLINE( 240)			_hx_tmp3 = false;
            		}
HXDLIN( 240)		if (_hx_tmp3) {
HXLINE( 240)			_into->listen_y(_into->y);
            		}
HXDLIN( 240)		return _into;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapFont_obj,dimensions_of,return )

Float BitmapFont_obj::height_of_lines(::Array< ::String > _lines,Float _point_size,hx::Null< Float >  __o__line_spc){
Float _line_spc = __o__line_spc.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_245_height_of_lines)
HXLINE( 247)		Float _ratio = ((Float)_point_size / (Float)( (Float)(this->info->__Field(HX_("point_size",50,66,f5,4b),hx::paccDynamic)) ));
HXLINE( 249)		int _lines1 = _lines->length;
HXDLIN( 249)		return (_lines1 * ((( (Float)(this->info->__Field(HX_("line_height",12,a8,c5,e1),hx::paccDynamic)) ) + _line_spc) * _ratio));
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapFont_obj,height_of_lines,return )

Float BitmapFont_obj::line_height_to_point_size(Float _pixel_height,hx::Null< Float >  __o__line_spc){
Float _line_spc = __o__line_spc.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_257_line_height_to_point_size)
HXDLIN( 257)		Float _hx_tmp = ( (Float)(this->info->__Field(HX_("point_size",50,66,f5,4b),hx::paccDynamic)) );
HXDLIN( 257)		return (_pixel_height * ((Float)_hx_tmp / (Float)(( (Float)(this->info->__Field(HX_("line_height",12,a8,c5,e1),hx::paccDynamic)) ) + _line_spc)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapFont_obj,line_height_to_point_size,return )

void BitmapFont_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_263_clear)
HXLINE( 265)		this->set_info(null());
HXLINE( 266)		int _i = (int)0;
HXLINE( 267)		{
HXLINE( 267)			 ::Dynamic _pageid = this->pages->keys();
HXDLIN( 267)			while(( (bool)(_pageid->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 267)				int _pageid1 = ( (int)(_pageid->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 268)				 ::phoenix::Texture _page = this->pages->get(_pageid1).StaticCast<  ::phoenix::Texture >();
HXLINE( 269)				_page->destroy(null());
HXLINE( 270)				this->pages->remove(_pageid1);
HXLINE( 271)				_page = null();
            			}
            		}
            	}


 ::snow::api::Promise BitmapFont_obj::reload(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_4, ::phoenix::BitmapFont,_gthis) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_2, ::phoenix::BitmapFont,_gthis, ::Dynamic,resolve, ::Dynamic,reject) HXARGC(1)
            			void _hx_run( ::snow::systems::assets::AssetText _asset){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::phoenix::BitmapFont,_gthis, ::Dynamic,resolve) HXARGC(1)
            				void _hx_run(::Array< ::Dynamic> _pages){
            					HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_313_reload)
HXLINE( 315)					_gthis->apply_pages(_pages);
HXLINE( 317)					_gthis->set_state((int)3);
HXLINE( 318)					resolve(_gthis);
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::phoenix::BitmapFont,_gthis, ::Dynamic,reject) HXARGC(1)
            				void _hx_run( ::Dynamic _error){
            					HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_320_reload)
HXLINE( 322)					_gthis->set_state((int)4);
HXLINE( 323)					reject(_error);
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_289_reload)
HXLINE( 292)				 ::Dynamic _hx_tmp = ::luxe::importers::bitmapfont::BitmapFontParser_obj::parse(_asset->text);
HXDLIN( 292)				_gthis->set_info(_hx_tmp);
HXLINE( 293)				_asset->destroy();
HXLINE( 294)				_asset = null();
HXLINE( 296)				if (hx::IsNull( _gthis->info )) {
HXLINE( 296)					HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("info was null",d0,22,4b,fc)));
            				}
HXLINE( 298)				::Array< ::Dynamic> _tex_get = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 300)				{
HXLINE( 300)					int _g = (int)0;
HXDLIN( 300)					::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(_gthis->info->__Field(HX_("pages",44,2b,4d,bd),hx::paccDynamic)) );
HXDLIN( 300)					while((_g < _g1->length)){
HXLINE( 300)						 ::Dynamic _page = _g1->__get(_g);
HXDLIN( 300)						_g = (_g + (int)1);
HXLINE( 302)						::String _path = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,_gthis->texture_path)->init(1, ::Dynamic(_page->__Field(HX_("file",7c,ce,bb,43),hx::paccDynamic))));
HXLINE( 303)						 ::phoenix::Texture _prior = ( ( ::phoenix::Texture)(::haxe::IMap_obj::get(_gthis->_hx_system->cache,_path)) );
HXLINE( 305)						if (hx::IsNotNull( _prior )) {
HXLINE( 306)							_tex_get->push(_prior->reload());
            						}
            						else {
HXLINE( 308)							_tex_get->push(_gthis->_hx_system->load_texture(_path,null()));
            						}
            					}
            				}
HXLINE( 313)				::snow::api::Promise_obj::all(_tex_get)->then( ::Dynamic(new _hx_Closure_0(_gthis,resolve)),null())->error( ::Dynamic(new _hx_Closure_1(_gthis,reject)));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::phoenix::BitmapFont,_gthis, ::Dynamic,reject) HXARGC(1)
            			void _hx_run( ::Dynamic _error1){
            				HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_327_reload)
HXLINE( 329)				_gthis->set_state((int)4);
HXLINE( 330)				reject(_error1);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_282_reload)
HXLINE( 284)			_gthis->set_state((int)2);
HXLINE( 287)			 ::snow::api::Promise _font_get = ::snow::systems::assets::AssetText_obj::load(::Luxe_obj::core->app->assets,_gthis->id);
HXLINE( 289)			_font_get->then( ::Dynamic(new _hx_Closure_2(_gthis,resolve,reject)),null())->error( ::Dynamic(new _hx_Closure_3(_gthis,reject)));
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_1c3eb680478ed598_276_reload)
HXDLIN( 276)		 ::phoenix::BitmapFont _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 278)		if ((this->state == (int)6)) {
HXLINE( 278)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion(HX_("state != ResourceState.destroyed",79,be,a0,bf)));
            		}
HXLINE( 280)		this->clear();
HXLINE( 282)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_4(_gthis)));
            	}


void BitmapFont_obj::apply_pages(::Array< ::Dynamic> _pages){
            	HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_340_apply_pages)
HXLINE( 342)		int _pageid = (int)0;
HXLINE( 344)		{
HXLINE( 344)			int _g = (int)0;
HXDLIN( 344)			while((_g < _pages->length)){
HXLINE( 344)				 ::phoenix::Texture _page = _pages->__get(_g).StaticCast<  ::phoenix::Texture >();
HXDLIN( 344)				_g = (_g + (int)1);
HXLINE( 345)				_page->slot = _pageid;
HXLINE( 346)				this->pages->set(_pageid,_page);
HXLINE( 347)				_pageid = (_pageid + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,apply_pages,(void))

 ::Dynamic BitmapFont_obj::set_info( ::Dynamic _info){
            	HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_352_set_info)
HXLINE( 354)		this->info = _info;
HXLINE( 356)		if (hx::IsNotNull( this->info )) {
HXLINE( 357)			this->space_char = ( ( ::haxe::ds::IntMap)( ::Dynamic(this->info->__Field(HX_("chars",dd,9c,b3,45),hx::paccDynamic))) )->get((int)32);
            		}
HXLINE( 360)		return this->info;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,set_info,return )

::String BitmapFont_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_1c3eb680478ed598_365_toString)
HXDLIN( 365)		return ((HX_("BitmapFont(",ea,8c,1a,29) + this->id) + HX_(")",29,00,00,00));
            	}



hx::ObjectPtr< BitmapFont_obj > BitmapFont_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< BitmapFont_obj > __this = new BitmapFont_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< BitmapFont_obj > BitmapFont_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	BitmapFont_obj *__this = (BitmapFont_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapFont_obj), true, "phoenix.BitmapFont"));
	*(void **)__this = BitmapFont_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

BitmapFont_obj::BitmapFont_obj()
{
}

void BitmapFont_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapFont);
	HX_MARK_MEMBER_NAME(pages,"pages");
	HX_MARK_MEMBER_NAME(info,"info");
	HX_MARK_MEMBER_NAME(space_char,"space_char");
	HX_MARK_MEMBER_NAME(texture_path,"texture_path");
	 ::luxe::resource::Resource_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BitmapFont_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pages,"pages");
	HX_VISIT_MEMBER_NAME(info,"info");
	HX_VISIT_MEMBER_NAME(space_char,"space_char");
	HX_VISIT_MEMBER_NAME(texture_path,"texture_path");
	 ::luxe::resource::Resource_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BitmapFont_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"info") ) { return hx::Val( info ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pages") ) { return hx::Val( pages ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"reload") ) { return hx::Val( reload_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"kerning") ) { return hx::Val( kerning_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"width_of") ) { return hx::Val( width_of_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_info") ) { return hx::Val( set_info_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"height_of") ) { return hx::Val( height_of_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"space_char") ) { return hx::Val( space_char ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"apply_pages") ) { return hx::Val( apply_pages_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"texture_path") ) { return hx::Val( texture_path ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"width_of_line") ) { return hx::Val( width_of_line_dyn() ); }
		if (HX_FIELD_EQ(inName,"dimensions_of") ) { return hx::Val( dimensions_of_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"height_of_lines") ) { return hx::Val( height_of_lines_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"wrap_string_to_bounds") ) { return hx::Val( wrap_string_to_bounds_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"line_height_to_point_size") ) { return hx::Val( line_height_to_point_size_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BitmapFont_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"info") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_info(inValue.Cast<  ::Dynamic >()) );info=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pages") ) { pages=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"space_char") ) { space_char=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"texture_path") ) { texture_path=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BitmapFont_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("pages","\x44","\x2b","\x4d","\xbd"));
	outFields->push(HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"));
	outFields->push(HX_HCSTRING("space_char","\x2f","\xe0","\xd7","\xc2"));
	outFields->push(HX_HCSTRING("texture_path","\xc9","\x3e","\xd5","\x62"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapFont_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(BitmapFont_obj,pages),HX_HCSTRING("pages","\x44","\x2b","\x4d","\xbd")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapFont_obj,info),HX_HCSTRING("info","\x6e","\x38","\xbb","\x45")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapFont_obj,space_char),HX_HCSTRING("space_char","\x2f","\xe0","\xd7","\xc2")},
	{hx::fsString,(int)offsetof(BitmapFont_obj,texture_path),HX_HCSTRING("texture_path","\xc9","\x3e","\xd5","\x62")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BitmapFont_obj_sStaticStorageInfo = 0;
#endif

static ::String BitmapFont_obj_sMemberFields[] = {
	HX_HCSTRING("pages","\x44","\x2b","\x4d","\xbd"),
	HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"),
	HX_HCSTRING("space_char","\x2f","\xe0","\xd7","\xc2"),
	HX_HCSTRING("texture_path","\xc9","\x3e","\xd5","\x62"),
	HX_HCSTRING("kerning","\xcc","\xba","\x37","\xb0"),
	HX_HCSTRING("wrap_string_to_bounds","\x20","\xed","\xa7","\x33"),
	HX_HCSTRING("width_of_line","\xe3","\x04","\x63","\x93"),
	HX_HCSTRING("width_of","\xf0","\xc8","\xf2","\xaf"),
	HX_HCSTRING("height_of","\xaf","\x19","\xab","\xae"),
	HX_HCSTRING("dimensions_of","\x09","\xe7","\x78","\x5a"),
	HX_HCSTRING("height_of_lines","\x2f","\x2c","\x99","\xf7"),
	HX_HCSTRING("line_height_to_point_size","\xa7","\x6d","\x17","\xa5"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("reload","\x59","\x53","\xdf","\x03"),
	HX_HCSTRING("apply_pages","\x73","\xbe","\x9a","\xc0"),
	HX_HCSTRING("set_info","\x6b","\x4d","\xd3","\x73"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void BitmapFont_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapFont_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapFont_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::__mClass,"__mClass");
};

#endif

hx::Class BitmapFont_obj::__mClass;

void BitmapFont_obj::__register()
{
	hx::Object *dummy = new BitmapFont_obj;
	BitmapFont_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.BitmapFont","\xfd","\x63","\xdc","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BitmapFont_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapFont_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapFont_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapFont_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapFont_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapFont_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
