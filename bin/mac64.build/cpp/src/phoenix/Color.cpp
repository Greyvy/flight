// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_luxe_tween_Actuate
#include <luxe/tween/Actuate.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_IGenericActuator
#include <luxe/tween/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_ColorHSL
#include <phoenix/ColorHSL.h>
#endif
#ifndef INCLUDED_phoenix_ColorHSV
#include <phoenix/ColorHSV.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_29fa6733cbb0c422_10_new,"phoenix.Color","new",0x34b95216,"phoenix.Color.new","phoenix/Color.hx",10,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_31_set_r,"phoenix.Color","set_r",0xb441768b,"phoenix.Color.set_r","phoenix/Color.hx",31,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_46_set_g,"phoenix.Color","set_g",0xb4417680,"phoenix.Color.set_g","phoenix/Color.hx",46,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_61_set_b,"phoenix.Color","set_b",0xb441767b,"phoenix.Color.set_b","phoenix/Color.hx",61,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_82_set,"phoenix.Color","set",0x34bd1d58,"phoenix.Color.set","phoenix/Color.hx",82,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_104_maxRGB,"phoenix.Color","maxRGB",0x53e29ed3,"phoenix.Color.maxRGB","phoenix/Color.hx",104,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_108_minRGB,"phoenix.Color","minRGB",0xe87b20a5,"phoenix.Color.minRGB","phoenix/Color.hx",108,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_113_tween,"phoenix.Color","tween",0x538285a1,"phoenix.Color.tween","phoenix/Color.hx",113,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_162_clone,"phoenix.Color","clone",0x8274ee93,"phoenix.Color.clone","phoenix/Color.hx",162,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_165_rgb,"phoenix.Color","rgb",0x34bc5cc3,"phoenix.Color.rgb","phoenix/Color.hx",165,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_171_toColorHSL,"phoenix.Color","toColorHSL",0x639d8f03,"phoenix.Color.toColorHSL","phoenix/Color.hx",171,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_175_toColorHSV,"phoenix.Color","toColorHSV",0x639d8f0d,"phoenix.Color.toColorHSV","phoenix/Color.hx",175,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_178_fromColorHSV,"phoenix.Color","fromColorHSV",0xfc51ac7c,"phoenix.Color.fromColorHSV","phoenix/Color.hx",178,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_208_fromColorHSL,"phoenix.Color","fromColorHSL",0xfc51ac72,"phoenix.Color.fromColorHSL","phoenix/Color.hx",208,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_259_toString,"phoenix.Color","toString",0xc4695b36,"phoenix.Color.toString","phoenix/Color.hx",259,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_262_from_int,"phoenix.Color","from_int",0x3e087ee4,"phoenix.Color.from_int","phoenix/Color.hx",262,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_29fa6733cbb0c422_79_random,"phoenix.Color","random",0x4d1d160d,"phoenix.Color.random","phoenix/Color.hx",79,0xf59e6b1b)
namespace phoenix{

void Color_obj::__construct(hx::Null< Float >  __o__r,hx::Null< Float >  __o__g,hx::Null< Float >  __o__b,hx::Null< Float >  __o__a){
Float _r = __o__r.Default(((Float)1.0));
Float _g = __o__g.Default(((Float)1.0));
Float _b = __o__b.Default(((Float)1.0));
Float _a = __o__a.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_29fa6733cbb0c422_10_new)
HXLINE(  20)		this->refreshing = false;
HXLINE(  19)		this->is_hsv = false;
HXLINE(  18)		this->is_hsl = false;
HXLINE(  16)		this->a = ((Float)1.0);
HXLINE(  14)		this->b = ((Float)1.0);
HXLINE(  13)		this->g = ((Float)1.0);
HXLINE(  12)		this->r = ((Float)1.0);
HXLINE(  24)		this->set_r(_r);
HXLINE(  25)		this->set_g(_g);
HXLINE(  26)		this->set_b(_b);
HXLINE(  27)		this->a = _a;
            	}

Dynamic Color_obj::__CreateEmpty() { return new Color_obj; }

void *Color_obj::_hx_vtable = 0;

Dynamic Color_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Color_obj > _hx_result = new Color_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Color_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4a8b16d4;
}

Float Color_obj::set_r(Float _r){
            	HX_STACKFRAME(&_hx_pos_29fa6733cbb0c422_31_set_r)
HXLINE(  32)		this->r = _r;
HXLINE(  34)		if (!(this->refreshing)) {
HXLINE(  35)			if (this->is_hsl) {
HXLINE(  36)				 ::phoenix::ColorHSL colorhsl = ( ( ::phoenix::ColorHSL)(hx::ObjectPtr<OBJ_>(this)) );
HXLINE(  37)				colorhsl->fromColor(hx::ObjectPtr<OBJ_>(this));
            			}
            			else {
HXLINE(  38)				if (this->is_hsv) {
HXLINE(  39)					 ::phoenix::ColorHSV colorhsv = ( ( ::phoenix::ColorHSV)(hx::ObjectPtr<OBJ_>(this)) );
HXLINE(  40)					colorhsv->fromColor(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
HXLINE(  44)		return this->r;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Color_obj,set_r,return )

Float Color_obj::set_g(Float _g){
            	HX_STACKFRAME(&_hx_pos_29fa6733cbb0c422_46_set_g)
HXLINE(  47)		this->g = _g;
HXLINE(  49)		if (!(this->refreshing)) {
HXLINE(  50)			if (this->is_hsl) {
HXLINE(  51)				 ::phoenix::ColorHSL colorhsl = ( ( ::phoenix::ColorHSL)(hx::ObjectPtr<OBJ_>(this)) );
HXLINE(  52)				colorhsl->fromColor(hx::ObjectPtr<OBJ_>(this));
            			}
            			else {
HXLINE(  53)				if (this->is_hsv) {
HXLINE(  54)					 ::phoenix::ColorHSV colorhsv = ( ( ::phoenix::ColorHSV)(hx::ObjectPtr<OBJ_>(this)) );
HXLINE(  55)					colorhsv->fromColor(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
HXLINE(  59)		return this->g;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Color_obj,set_g,return )

Float Color_obj::set_b(Float _b){
            	HX_STACKFRAME(&_hx_pos_29fa6733cbb0c422_61_set_b)
HXLINE(  62)		this->b = _b;
HXLINE(  64)		if (!(this->refreshing)) {
HXLINE(  65)			if (this->is_hsl) {
HXLINE(  66)				 ::phoenix::ColorHSL colorhsl = ( ( ::phoenix::ColorHSL)(hx::ObjectPtr<OBJ_>(this)) );
HXLINE(  67)				colorhsl->fromColor(hx::ObjectPtr<OBJ_>(this));
            			}
            			else {
HXLINE(  68)				if (this->is_hsv) {
HXLINE(  69)					 ::phoenix::ColorHSV colorhsv = ( ( ::phoenix::ColorHSV)(hx::ObjectPtr<OBJ_>(this)) );
HXLINE(  70)					colorhsv->fromColor(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
HXLINE(  74)		return this->b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Color_obj,set_b,return )

 ::phoenix::Color Color_obj::set( ::Dynamic _r, ::Dynamic _g, ::Dynamic _b, ::Dynamic _a){
            	HX_STACKFRAME(&_hx_pos_29fa6733cbb0c422_82_set)
HXLINE(  84)		Float _setr = this->r;
HXLINE(  85)		Float _setg = this->g;
HXLINE(  86)		Float _setb = this->b;
HXLINE(  87)		Float _seta = this->a;
HXLINE(  90)		if (hx::IsNotNull( _r )) {
HXLINE(  90)			_setr = _r;
            		}
HXLINE(  91)		if (hx::IsNotNull( _g )) {
HXLINE(  91)			_setg = _g;
            		}
HXLINE(  92)		if (hx::IsNotNull( _b )) {
HXLINE(  92)			_setb = _b;
            		}
HXLINE(  93)		if (hx::IsNotNull( _a )) {
HXLINE(  93)			_seta = _a;
            		}
HXLINE(  95)		this->set_r(_setr);
HXLINE(  96)		this->set_g(_setg);
HXLINE(  97)		this->set_b(_setb);
HXLINE(  98)		this->a = _seta;
HXLINE( 100)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Color_obj,set,return )

Float Color_obj::maxRGB(){
            	HX_STACKFRAME(&_hx_pos_29fa6733cbb0c422_104_maxRGB)
HXDLIN( 104)		Float _hx_tmp = this->r;
HXDLIN( 104)		return ::Math_obj::max(_hx_tmp,::Math_obj::max(this->g,this->b));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Color_obj,maxRGB,return )

Float Color_obj::minRGB(){
            	HX_STACKFRAME(&_hx_pos_29fa6733cbb0c422_108_minRGB)
HXDLIN( 108)		Float _hx_tmp = this->r;
HXDLIN( 108)		return ::Math_obj::min(_hx_tmp,::Math_obj::min(this->g,this->b));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Color_obj,minRGB,return )

::Dynamic Color_obj::tween( ::Dynamic __o__time_in_seconds, ::Dynamic _properties_to_tween,hx::Null< bool >  __o__override){
 ::Dynamic _time_in_seconds = __o__time_in_seconds.Default(((Float)0.5));
bool _override = __o__override.Default(true);
            	HX_STACKFRAME(&_hx_pos_29fa6733cbb0c422_113_tween)
HXDLIN( 113)		if (hx::IsNotNull( _properties_to_tween )) {
HXLINE( 115)			Float _dest_r = this->r;
HXLINE( 116)			Float _dest_g = this->g;
HXLINE( 117)			Float _dest_b = this->b;
HXLINE( 118)			Float _dest_a = this->a;
HXLINE( 120)			bool _change_r = false;
HXLINE( 121)			bool _change_g = false;
HXLINE( 122)			bool _change_b = false;
HXLINE( 123)			bool _change_a = false;
HXLINE( 125)			if (::Std_obj::is(_properties_to_tween,hx::ClassOf< ::phoenix::Color >())) {
HXLINE( 127)				_dest_r = ( (Float)(_properties_to_tween->__Field(HX_("r",72,00,00,00),hx::paccDynamic)) );
HXLINE( 128)				_dest_g = ( (Float)(_properties_to_tween->__Field(HX_("g",67,00,00,00),hx::paccDynamic)) );
HXLINE( 129)				_dest_b = ( (Float)(_properties_to_tween->__Field(HX_("b",62,00,00,00),hx::paccDynamic)) );
HXLINE( 130)				_dest_a = ( (Float)(_properties_to_tween->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) );
HXLINE( 132)				_change_r = true;
HXLINE( 133)				_change_g = true;
HXLINE( 134)				_change_b = true;
HXLINE( 135)				_change_a = true;
            			}
            			else {
HXLINE( 139)				if (hx::IsNotNull( _properties_to_tween->__Field(HX_("r",72,00,00,00),hx::paccDynamic) )) {
HXLINE( 139)					_dest_r = ( (Float)(_properties_to_tween->__Field(HX_("r",72,00,00,00),hx::paccDynamic)) );
HXDLIN( 139)					_change_r = true;
            				}
HXLINE( 140)				if (hx::IsNotNull( _properties_to_tween->__Field(HX_("g",67,00,00,00),hx::paccDynamic) )) {
HXLINE( 140)					_dest_g = ( (Float)(_properties_to_tween->__Field(HX_("g",67,00,00,00),hx::paccDynamic)) );
HXDLIN( 140)					_change_g = true;
            				}
HXLINE( 141)				if (hx::IsNotNull( _properties_to_tween->__Field(HX_("b",62,00,00,00),hx::paccDynamic) )) {
HXLINE( 141)					_dest_b = ( (Float)(_properties_to_tween->__Field(HX_("b",62,00,00,00),hx::paccDynamic)) );
HXDLIN( 141)					_change_b = true;
            				}
HXLINE( 142)				if (hx::IsNotNull( _properties_to_tween->__Field(HX_("a",61,00,00,00),hx::paccDynamic) )) {
HXLINE( 142)					_dest_a = ( (Float)(_properties_to_tween->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) );
HXDLIN( 142)					_change_a = true;
            				}
            			}
HXLINE( 146)			 ::Dynamic _properties =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 148)			if (_change_r) {
HXLINE( 148)				_properties->__SetField(HX_("r",72,00,00,00),_dest_r,hx::paccDynamic);
            			}
HXLINE( 149)			if (_change_g) {
HXLINE( 149)				_properties->__SetField(HX_("g",67,00,00,00),_dest_g,hx::paccDynamic);
            			}
HXLINE( 150)			if (_change_b) {
HXLINE( 150)				_properties->__SetField(HX_("b",62,00,00,00),_dest_b,hx::paccDynamic);
            			}
HXLINE( 151)			if (_change_a) {
HXLINE( 151)				_properties->__SetField(HX_("a",61,00,00,00),_dest_a,hx::paccDynamic);
            			}
HXLINE( 153)			return ::luxe::tween::Actuate_obj::tween(hx::ObjectPtr<OBJ_>(this),_time_in_seconds,_properties,_override,null());
            		}
            		else {
HXLINE( 156)			HX_STACK_DO_THROW(HX_(" Warning: Color.tween passed a null destination ",3e,4f,7a,3d));
            		}
HXLINE( 113)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Color_obj,tween,return )

 ::phoenix::Color Color_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_29fa6733cbb0c422_162_clone)
HXDLIN( 162)		return  ::phoenix::Color_obj::__alloc( HX_CTX ,this->r,this->g,this->b,this->a);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Color_obj,clone,return )

 ::phoenix::Color Color_obj::rgb(hx::Null< int >  __o__rgb){
int _rgb = __o__rgb.Default(16777215);
            	HX_STACKFRAME(&_hx_pos_29fa6733cbb0c422_165_rgb)
HXLINE( 166)		this->from_int(_rgb);
HXLINE( 167)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Color_obj,rgb,return )

 ::phoenix::ColorHSL Color_obj::toColorHSL(){
            	HX_GC_STACKFRAME(&_hx_pos_29fa6733cbb0c422_171_toColorHSL)
HXDLIN( 171)		return  ::phoenix::ColorHSL_obj::__alloc( HX_CTX ,null(),null(),null(),null())->fromColor(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Color_obj,toColorHSL,return )

 ::phoenix::ColorHSV Color_obj::toColorHSV(){
            	HX_GC_STACKFRAME(&_hx_pos_29fa6733cbb0c422_175_toColorHSV)
HXDLIN( 175)		return  ::phoenix::ColorHSV_obj::__alloc( HX_CTX ,null(),null(),null(),null())->fromColor(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Color_obj,toColorHSV,return )

void Color_obj::fromColorHSV( ::phoenix::ColorHSV _color_hsv){
            	HX_STACKFRAME(&_hx_pos_29fa6733cbb0c422_178_fromColorHSV)
HXLINE( 180)		Float d = ((Float)hx::Mod(_color_hsv->h,(int)360) / (Float)(int)60);
HXLINE( 182)		if ((d < (int)0)) {
HXLINE( 183)			d = (d + (int)6);
            		}
HXLINE( 186)		int hf = ::Math_obj::floor(d);
HXLINE( 187)		int hi = hx::Mod(hf,(int)6);
HXLINE( 188)		Float f = (d - hf);
HXLINE( 190)		Float v = _color_hsv->v;
HXLINE( 191)		Float _color_hsv1 = _color_hsv->v;
HXDLIN( 191)		Float p = (_color_hsv1 * ((int)1 - _color_hsv->s));
HXLINE( 192)		Float _color_hsv2 = _color_hsv->v;
HXDLIN( 192)		Float q = (_color_hsv2 * ((int)1 - (f * _color_hsv->s)));
HXLINE( 193)		Float _color_hsv3 = _color_hsv->v;
HXDLIN( 193)		Float t = (_color_hsv3 * ((int)1 - (((int)1 - f) * _color_hsv->s)));
HXLINE( 195)		switch((int)(hi)){
            			case (int)0: {
HXLINE( 196)				this->set_r(v);
HXDLIN( 196)				this->set_g(t);
HXDLIN( 196)				this->set_b(p);
            			}
            			break;
            			case (int)1: {
HXLINE( 197)				this->set_r(q);
HXDLIN( 197)				this->set_g(v);
HXDLIN( 197)				this->set_b(p);
            			}
            			break;
            			case (int)2: {
HXLINE( 198)				this->set_r(p);
HXDLIN( 198)				this->set_g(v);
HXDLIN( 198)				this->set_b(t);
            			}
            			break;
            			case (int)3: {
HXLINE( 199)				this->set_r(p);
HXDLIN( 199)				this->set_g(q);
HXDLIN( 199)				this->set_b(v);
            			}
            			break;
            			case (int)4: {
HXLINE( 200)				this->set_r(t);
HXDLIN( 200)				this->set_g(p);
HXDLIN( 200)				this->set_b(v);
            			}
            			break;
            			case (int)5: {
HXLINE( 201)				this->set_r(v);
HXDLIN( 201)				this->set_g(p);
HXDLIN( 201)				this->set_b(q);
            			}
            			break;
            		}
HXLINE( 204)		this->a = _color_hsv->a;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Color_obj,fromColorHSV,(void))

 ::phoenix::Color Color_obj::fromColorHSL( ::phoenix::ColorHSL _color_hsl){
            	HX_STACKFRAME(&_hx_pos_29fa6733cbb0c422_208_fromColorHSL)
HXLINE( 210)		Float q = (int)1;
HXLINE( 212)		if ((_color_hsl->l < ((Float)0.5))) {
HXLINE( 213)			Float _color_hsl1 = _color_hsl->l;
HXDLIN( 213)			q = (_color_hsl1 * ((int)1 + _color_hsl->s));
            		}
            		else {
HXLINE( 215)			Float q1 = (_color_hsl->l + _color_hsl->s);
HXDLIN( 215)			q = (q1 - (_color_hsl->l * _color_hsl->s));
            		}
HXLINE( 218)		Float p = (((int)2 * _color_hsl->l) - q);
HXLINE( 219)		Float hk = ((Float)hx::Mod(_color_hsl->h,(int)360) / (Float)(int)360);
HXLINE( 221)		Float tr = (hk + ((Float)0.333333333333333315));
HXLINE( 222)		Float tg = hk;
HXLINE( 223)		Float tb = (hk - ((Float)0.333333333333333315));
HXLINE( 225)		::Array< Float > tc = ::Array_obj< Float >::__new(3)->init(0,tr)->init(1,tg)->init(2,tb);
HXLINE( 227)		{
HXLINE( 227)			int _g1 = (int)0;
HXDLIN( 227)			int _g = tc->length;
HXDLIN( 227)			while((_g1 < _g)){
HXLINE( 227)				_g1 = (_g1 + (int)1);
HXDLIN( 227)				int n = (_g1 - (int)1);
HXLINE( 229)				Float t = tc->__get(n);
HXLINE( 231)				if ((t < (int)0)) {
HXLINE( 231)					t = (t + (int)1);
            				}
HXLINE( 232)				if ((t > (int)1)) {
HXLINE( 232)					t = (t - (int)1);
            				}
HXLINE( 234)				Float _hx_tmp;
HXDLIN( 234)				if ((t < ((Float)0.166666666666666657))) {
HXLINE( 234)					_hx_tmp = (p + (((q - p) * (int)6) * t));
            				}
            				else {
HXLINE( 236)					if ((t < ((Float)0.5))) {
HXLINE( 234)						_hx_tmp = q;
            					}
            					else {
HXLINE( 238)						if ((t < ((Float)0.66666666666666663))) {
HXLINE( 234)							_hx_tmp = (p + (((q - p) * (int)6) * (((Float)0.66666666666666663) - t)));
            						}
            						else {
HXLINE( 234)							_hx_tmp = p;
            						}
            					}
            				}
HXDLIN( 234)				tc[n] = _hx_tmp;
            			}
            		}
HXLINE( 247)		this->set_r(tc->__get((int)0));
HXLINE( 248)		this->set_g(tc->__get((int)1));
HXLINE( 249)		this->set_b(tc->__get((int)2));
HXLINE( 251)		this->a = _color_hsl->a;
HXLINE( 253)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Color_obj,fromColorHSL,return )

::String Color_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_29fa6733cbb0c422_259_toString)
HXDLIN( 259)		return ((((((((HX_("{ r:",0d,ea,65,51) + this->r) + HX_(" , g:",87,95,00,8a)) + this->g) + HX_(" , b:",2c,91,00,8a)) + this->b) + HX_(" , a:",4d,90,00,8a)) + this->a) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Color_obj,toString,return )

void Color_obj::from_int(int _i){
            	HX_STACKFRAME(&_hx_pos_29fa6733cbb0c422_262_from_int)
HXLINE( 264)		int _r = ((int)_i >> (int)(int)16);
HXLINE( 265)		int _g = ((int)((int)_i >> (int)(int)8) & (int)(int)255);
HXLINE( 266)		int _b = ((int)_i & (int)(int)255);
HXLINE( 269)		this->set_r(((Float)_r / (Float)(int)255));
HXLINE( 270)		this->set_g(((Float)_g / (Float)(int)255));
HXLINE( 271)		this->set_b(((Float)_b / (Float)(int)255));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Color_obj,from_int,(void))

 ::phoenix::Color Color_obj::random( ::Dynamic __o__include_alpha){
 ::Dynamic _include_alpha = __o__include_alpha.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_29fa6733cbb0c422_79_random)
HXDLIN(  79)		Float _hx_tmp = ::Math_obj::random();
HXDLIN(  79)		Float _hx_tmp1 = ::Math_obj::random();
HXDLIN(  79)		Float _hx_tmp2;
HXDLIN(  79)		if (_include_alpha) {
HXDLIN(  79)			_hx_tmp2 = ::Math_obj::random();
            		}
            		else {
HXDLIN(  79)			_hx_tmp2 = ((Float)1.0);
            		}
HXDLIN(  79)		return  ::phoenix::Color_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,::Math_obj::random(),_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_obj,random,return )


hx::ObjectPtr< Color_obj > Color_obj::__new(hx::Null< Float >  __o__r,hx::Null< Float >  __o__g,hx::Null< Float >  __o__b,hx::Null< Float >  __o__a) {
	hx::ObjectPtr< Color_obj > __this = new Color_obj();
	__this->__construct(__o__r,__o__g,__o__b,__o__a);
	return __this;
}

hx::ObjectPtr< Color_obj > Color_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o__r,hx::Null< Float >  __o__g,hx::Null< Float >  __o__b,hx::Null< Float >  __o__a) {
	Color_obj *__this = (Color_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Color_obj), false, "phoenix.Color"));
	*(void **)__this = Color_obj::_hx_vtable;
	__this->__construct(__o__r,__o__g,__o__b,__o__a);
	return __this;
}

Color_obj::Color_obj()
{
}

hx::Val Color_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { return hx::Val( r ); }
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g ); }
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b ); }
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"rgb") ) { return hx::Val( rgb_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"set_r") ) { return hx::Val( set_r_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_g") ) { return hx::Val( set_g_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_b") ) { return hx::Val( set_b_dyn() ); }
		if (HX_FIELD_EQ(inName,"tween") ) { return hx::Val( tween_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"is_hsl") ) { return hx::Val( is_hsl ); }
		if (HX_FIELD_EQ(inName,"is_hsv") ) { return hx::Val( is_hsv ); }
		if (HX_FIELD_EQ(inName,"maxRGB") ) { return hx::Val( maxRGB_dyn() ); }
		if (HX_FIELD_EQ(inName,"minRGB") ) { return hx::Val( minRGB_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"from_int") ) { return hx::Val( from_int_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"refreshing") ) { return hx::Val( refreshing ); }
		if (HX_FIELD_EQ(inName,"toColorHSL") ) { return hx::Val( toColorHSL_dyn() ); }
		if (HX_FIELD_EQ(inName,"toColorHSV") ) { return hx::Val( toColorHSV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromColorHSV") ) { return hx::Val( fromColorHSV_dyn() ); }
		if (HX_FIELD_EQ(inName,"fromColorHSL") ) { return hx::Val( fromColorHSL_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Color_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"random") ) { outValue = random_dyn(); return true; }
	}
	return false;
}

hx::Val Color_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_r(inValue.Cast< Float >()) );r=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"g") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_g(inValue.Cast< Float >()) );g=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_b(inValue.Cast< Float >()) );b=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"is_hsl") ) { is_hsl=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"is_hsv") ) { is_hsv=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"refreshing") ) { refreshing=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Color_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("r","\x72","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("is_hsl","\xec","\x2c","\xa8","\x71"));
	outFields->push(HX_HCSTRING("is_hsv","\xf6","\x2c","\xa8","\x71"));
	outFields->push(HX_HCSTRING("refreshing","\xe7","\x8d","\x3e","\x07"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Color_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Color_obj,r),HX_HCSTRING("r","\x72","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Color_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Color_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Color_obj,a),HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsBool,(int)offsetof(Color_obj,is_hsl),HX_HCSTRING("is_hsl","\xec","\x2c","\xa8","\x71")},
	{hx::fsBool,(int)offsetof(Color_obj,is_hsv),HX_HCSTRING("is_hsv","\xf6","\x2c","\xa8","\x71")},
	{hx::fsBool,(int)offsetof(Color_obj,refreshing),HX_HCSTRING("refreshing","\xe7","\x8d","\x3e","\x07")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Color_obj_sStaticStorageInfo = 0;
#endif

static ::String Color_obj_sMemberFields[] = {
	HX_HCSTRING("r","\x72","\x00","\x00","\x00"),
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("is_hsl","\xec","\x2c","\xa8","\x71"),
	HX_HCSTRING("is_hsv","\xf6","\x2c","\xa8","\x71"),
	HX_HCSTRING("refreshing","\xe7","\x8d","\x3e","\x07"),
	HX_HCSTRING("set_r","\x55","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_g","\x4a","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_b","\x45","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("maxRGB","\xc9","\xaa","\x54","\xbe"),
	HX_HCSTRING("minRGB","\x9b","\x2c","\xed","\x52"),
	HX_HCSTRING("tween","\x6b","\xaa","\x70","\x19"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("rgb","\x0d","\xdb","\x56","\x00"),
	HX_HCSTRING("toColorHSL","\xf9","\xcd","\x03","\xfc"),
	HX_HCSTRING("toColorHSV","\x03","\xce","\x03","\xfc"),
	HX_HCSTRING("fromColorHSV","\xf2","\x14","\xfe","\x29"),
	HX_HCSTRING("fromColorHSL","\xe8","\x14","\xfe","\x29"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("from_int","\x5a","\xf4","\x0d","\xb2"),
	::String(null()) };

static void Color_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Color_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Color_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Color_obj::__mClass,"__mClass");
};

#endif

hx::Class Color_obj::__mClass;

static ::String Color_obj_sStaticFields[] = {
	HX_HCSTRING("random","\x03","\x22","\x8f","\xb7"),
	::String(null())
};

void Color_obj::__register()
{
	hx::Object *dummy = new Color_obj;
	Color_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.Color","\x24","\x4f","\x3d","\xd1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Color_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Color_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Color_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Color_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Color_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Color_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Color_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Color_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
