// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_9484b18fc186cc5e
#define INCLUDED_9484b18fc186cc5e
#include "linc_opengl.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Resources
#include <luxe/Resources.h>
#endif
#ifndef INCLUDED_luxe_Screen
#include <luxe/Screen.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_opengl_GLObject
#include <opengl/GLObject.h>
#endif
#ifndef INCLUDED_phoenix_RenderState
#include <phoenix/RenderState.h>
#endif
#ifndef INCLUDED_phoenix_RenderTarget
#include <phoenix/RenderTarget.h>
#endif
#ifndef INCLUDED_phoenix_RenderTexture
#include <phoenix/RenderTexture.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_147396cf184e0180_15_new,"phoenix.RenderTexture","new",0xaa824ed8,"phoenix.RenderTexture.new","phoenix/RenderTexture.hx",15,0xd65f2599)
HX_LOCAL_STACK_FRAME(_hx_pos_147396cf184e0180_99_clear,"phoenix.RenderTexture","clear",0xba007e05,"phoenix.RenderTexture.clear","phoenix/RenderTexture.hx",99,0xd65f2599)
HX_LOCAL_STACK_FRAME(_hx_pos_147396cf184e0180_115_bindBuffer,"phoenix.RenderTexture","bindBuffer",0xb4215325,"phoenix.RenderTexture.bindBuffer","phoenix/RenderTexture.hx",115,0xd65f2599)
HX_LOCAL_STACK_FRAME(_hx_pos_147396cf184e0180_121_unbindBuffer,"phoenix.RenderTexture","unbindBuffer",0xcec7b4be,"phoenix.RenderTexture.unbindBuffer","phoenix/RenderTexture.hx",121,0xd65f2599)
HX_LOCAL_STACK_FRAME(_hx_pos_147396cf184e0180_127_bindRenderBuffer,"phoenix.RenderTexture","bindRenderBuffer",0xeaa600db,"phoenix.RenderTexture.bindRenderBuffer","phoenix/RenderTexture.hx",127,0xd65f2599)
HX_LOCAL_STACK_FRAME(_hx_pos_147396cf184e0180_133_unbindRenderBuffer,"phoenix.RenderTexture","unbindRenderBuffer",0x021f1b34,"phoenix.RenderTexture.unbindRenderBuffer","phoenix/RenderTexture.hx",133,0xd65f2599)
namespace phoenix{

void RenderTexture_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_147396cf184e0180_15_new)
HXLINE(  21)		this->viewport_scale = ((Float)1);
HXLINE(  25)		_options->__SetField(HX_("resource_type",0b,87,30,9c),(int)5,hx::paccDynamic);
HXLINE(  27)		super::__construct(_options);
HXLINE(  29)		if (hx::IsNull( _options->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic) )) {
HXLINE(  29)			_options->__SetField(HX_("width",06,b6,62,ca),::Std_obj::_hx_int(::Luxe_obj::core->screen->get_w()),hx::paccDynamic);
            		}
HXLINE(  30)		if (hx::IsNull( _options->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic) )) {
HXLINE(  30)			_options->__SetField(HX_("height",e7,07,4c,02),::Std_obj::_hx_int(::Luxe_obj::core->screen->get_h()),hx::paccDynamic);
            		}
HXLINE(  33)		this->width = (this->width_actual = ( (int)(_options->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ));
HXLINE(  34)		this->height = (this->height_actual = ( (int)(_options->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) ));
HXLINE(  40)		if (hx::IsNotNull( ( ( ::opengl::GLObject)(_options->__Field(HX_("texture",db,c8,e0,9e),hx::paccDynamic)) ) )) {
HXLINE(  41)			this->submit(null(),null(),null());
            		}
HXLINE(  44)		{
HXLINE(  44)			glTexParameteri(this->type,(int)10241,this->filter_min);
HXDLIN(  44)			glTexParameteri(this->type,(int)10240,this->filter_mag);
HXDLIN(  44)			glTexParameteri(this->type,(int)10242,this->clamp_s);
HXDLIN(  44)			glTexParameteri(this->type,(int)10243,this->clamp_t);
            		}
HXLINE(  47)		int _id = linc::opengl::webgl::createFramebuffer();
HXDLIN(  47)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id);
HXDLIN(  47)		this->framebuffer = this1;
HXLINE(  49)		this->bindBuffer();
HXLINE(  52)		int _id1 = linc::opengl::webgl::createRenderbuffer();
HXDLIN(  52)		 ::opengl::GLObject this2 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id1);
HXDLIN(  52)		this->renderbuffer = this2;
HXLINE(  54)		this->bindRenderBuffer();
HXLINE(  60)		glRenderbufferStorage((int)36161,(int)6402,this->width,this->height);
HXLINE(  63)		{
HXLINE(  63)			 ::opengl::GLObject texture = this->texture;
HXDLIN(  63)			int _hx_tmp;
HXDLIN(  63)			if (hx::IsNull( texture )) {
HXLINE(  63)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE(  63)				_hx_tmp = texture->id;
            			}
HXDLIN(  63)			glFramebufferTexture2D((int)36160,(int)36064,(int)3553,_hx_tmp,(int)0);
            		}
HXLINE(  65)		{
HXLINE(  65)			 ::opengl::GLObject renderbuffer = this->renderbuffer;
HXDLIN(  65)			int _hx_tmp1;
HXDLIN(  65)			if (hx::IsNull( renderbuffer )) {
HXLINE(  65)				_hx_tmp1 = (int)0;
            			}
            			else {
HXLINE(  65)				_hx_tmp1 = renderbuffer->id;
            			}
HXDLIN(  65)			glFramebufferRenderbuffer((int)36160,(int)36096,(int)36161,_hx_tmp1);
            		}
HXLINE(  68)		int status = glCheckFramebufferStatus((int)36160);
HXLINE(  70)		switch((int)(status)){
            			case (int)36053: {
            			}
            			break;
            			case (int)36054: {
HXLINE(  75)				HX_STACK_DO_THROW(HX_("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT",e1,d7,83,5b));
            			}
            			break;
            			case (int)36055: {
HXLINE(  78)				HX_STACK_DO_THROW(HX_("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",7a,19,d9,ea));
            			}
            			break;
            			case (int)36057: {
HXLINE(  81)				HX_STACK_DO_THROW(HX_("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS",4b,8e,b0,5a));
            			}
            			break;
            			case (int)36061: {
HXLINE(  84)				HX_STACK_DO_THROW(HX_("Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED",12,3e,42,1e));
            			}
            			break;
            			default:{
HXLINE(  87)				HX_STACK_DO_THROW((HX_("Incomplete framebuffer: ",f1,26,a0,6c) + status));
            			}
            		}
HXLINE(  91)		this->unbindBuffer(null());
HXLINE(  92)		this->unbindRenderBuffer(null());
HXLINE(  95)		this->_hx_system->add(hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic RenderTexture_obj::__CreateEmpty() { return new RenderTexture_obj; }

void *RenderTexture_obj::_hx_vtable = 0;

Dynamic RenderTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RenderTexture_obj > _hx_result = new RenderTexture_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool RenderTexture_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e393a96) {
		if (inClassId<=(int)0x04186c8c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x04186c8c;
		} else {
			return inClassId==(int)0x2e393a96;
		}
	} else {
		return inClassId==(int)0x40d63fd6;
	}
}

static ::phoenix::RenderTarget_obj _hx_phoenix_RenderTexture__hx_phoenix_RenderTarget= {
};

void *RenderTexture_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x3aa751f6: return &_hx_phoenix_RenderTexture__hx_phoenix_RenderTarget;
	}
	return super::_hx_getInterface(inHash);
}

void RenderTexture_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_147396cf184e0180_99_clear)
HXLINE( 101)		this->super::clear();
HXLINE( 103)		if (hx::IsNotNull( this->framebuffer )) {
HXLINE( 104)			 ::opengl::GLObject framebuffer = this->framebuffer;
HXDLIN( 104)			int _hx_tmp;
HXDLIN( 104)			if (hx::IsNull( framebuffer )) {
HXLINE( 104)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 104)				_hx_tmp = framebuffer->id;
            			}
HXDLIN( 104)			linc::opengl::webgl::deleteFramebuffer(_hx_tmp);
            		}
HXLINE( 107)		if (hx::IsNotNull( this->renderbuffer )) {
HXLINE( 108)			 ::opengl::GLObject renderbuffer = this->renderbuffer;
HXDLIN( 108)			int _hx_tmp1;
HXDLIN( 108)			if (hx::IsNull( renderbuffer )) {
HXLINE( 108)				_hx_tmp1 = (int)0;
            			}
            			else {
HXLINE( 108)				_hx_tmp1 = renderbuffer->id;
            			}
HXDLIN( 108)			linc::opengl::webgl::deleteRenderbuffer(_hx_tmp1);
            		}
            	}


void RenderTexture_obj::bindBuffer(){
            	HX_STACKFRAME(&_hx_pos_147396cf184e0180_115_bindBuffer)
HXDLIN( 115)		::Luxe_obj::renderer->state->bindFramebuffer(this->framebuffer);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderTexture_obj,bindBuffer,(void))

void RenderTexture_obj::unbindBuffer( ::opengl::GLObject _other){
            	HX_STACKFRAME(&_hx_pos_147396cf184e0180_121_unbindBuffer)
HXDLIN( 121)		::Luxe_obj::renderer->state->bindFramebuffer(_other);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderTexture_obj,unbindBuffer,(void))

void RenderTexture_obj::bindRenderBuffer(){
            	HX_STACKFRAME(&_hx_pos_147396cf184e0180_127_bindRenderBuffer)
HXDLIN( 127)		::Luxe_obj::renderer->state->bindRenderbuffer(this->renderbuffer);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderTexture_obj,bindRenderBuffer,(void))

void RenderTexture_obj::unbindRenderBuffer( ::opengl::GLObject _other){
            	HX_STACKFRAME(&_hx_pos_147396cf184e0180_133_unbindRenderBuffer)
HXDLIN( 133)		::Luxe_obj::renderer->state->bindRenderbuffer(_other);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderTexture_obj,unbindRenderBuffer,(void))


hx::ObjectPtr< RenderTexture_obj > RenderTexture_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< RenderTexture_obj > __this = new RenderTexture_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< RenderTexture_obj > RenderTexture_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	RenderTexture_obj *__this = (RenderTexture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RenderTexture_obj), true, "phoenix.RenderTexture"));
	*(void **)__this = RenderTexture_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

RenderTexture_obj::RenderTexture_obj()
{
}

void RenderTexture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RenderTexture);
	HX_MARK_MEMBER_NAME(framebuffer,"framebuffer");
	HX_MARK_MEMBER_NAME(renderbuffer,"renderbuffer");
	HX_MARK_MEMBER_NAME(viewport_scale,"viewport_scale");
	 ::phoenix::Texture_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void RenderTexture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(framebuffer,"framebuffer");
	HX_VISIT_MEMBER_NAME(renderbuffer,"renderbuffer");
	HX_VISIT_MEMBER_NAME(viewport_scale,"viewport_scale");
	 ::phoenix::Texture_obj::__Visit(HX_VISIT_ARG);
}

hx::Val RenderTexture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bindBuffer") ) { return hx::Val( bindBuffer_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"framebuffer") ) { return hx::Val( framebuffer ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderbuffer") ) { return hx::Val( renderbuffer ); }
		if (HX_FIELD_EQ(inName,"unbindBuffer") ) { return hx::Val( unbindBuffer_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"viewport_scale") ) { return hx::Val( viewport_scale ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bindRenderBuffer") ) { return hx::Val( bindRenderBuffer_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"unbindRenderBuffer") ) { return hx::Val( unbindRenderBuffer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RenderTexture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"framebuffer") ) { framebuffer=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderbuffer") ) { renderbuffer=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"viewport_scale") ) { viewport_scale=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RenderTexture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("framebuffer","\xed","\x14","\x48","\x7a"));
	outFields->push(HX_HCSTRING("renderbuffer","\xd6","\x4c","\x56","\x0b"));
	outFields->push(HX_HCSTRING("viewport_scale","\xb1","\xb2","\xe9","\x8b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RenderTexture_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(RenderTexture_obj,framebuffer),HX_HCSTRING("framebuffer","\xed","\x14","\x48","\x7a")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(RenderTexture_obj,renderbuffer),HX_HCSTRING("renderbuffer","\xd6","\x4c","\x56","\x0b")},
	{hx::fsFloat,(int)offsetof(RenderTexture_obj,viewport_scale),HX_HCSTRING("viewport_scale","\xb1","\xb2","\xe9","\x8b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RenderTexture_obj_sStaticStorageInfo = 0;
#endif

static ::String RenderTexture_obj_sMemberFields[] = {
	HX_HCSTRING("framebuffer","\xed","\x14","\x48","\x7a"),
	HX_HCSTRING("renderbuffer","\xd6","\x4c","\x56","\x0b"),
	HX_HCSTRING("viewport_scale","\xb1","\xb2","\xe9","\x8b"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("bindBuffer","\x9d","\x92","\xbe","\xf8"),
	HX_HCSTRING("unbindBuffer","\x36","\xc2","\xcd","\x64"),
	HX_HCSTRING("bindRenderBuffer","\x53","\x2a","\x4c","\x49"),
	HX_HCSTRING("unbindRenderBuffer","\xac","\x92","\xbc","\xf5"),
	::String(null()) };

static void RenderTexture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RenderTexture_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RenderTexture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RenderTexture_obj::__mClass,"__mClass");
};

#endif

hx::Class RenderTexture_obj::__mClass;

void RenderTexture_obj::__register()
{
	hx::Object *dummy = new RenderTexture_obj;
	RenderTexture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.RenderTexture","\xe6","\x42","\x54","\x71");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RenderTexture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RenderTexture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RenderTexture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RenderTexture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RenderTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RenderTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
