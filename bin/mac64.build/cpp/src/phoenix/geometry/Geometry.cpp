// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_9484b18fc186cc5e
#define INCLUDED_9484b18fc186cc5e
#include "linc_opengl.h"
#endif
#ifndef INCLUDED_0a05af74edef3e68
#define INCLUDED_0a05af74edef3e68
#include "linc_timestamp.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_luxe_utils_Utils
#include <luxe/utils/Utils.h>
#endif
#ifndef INCLUDED_opengl_GLObject
#include <opengl/GLObject.h>
#endif
#ifndef INCLUDED_phoenix_Batcher
#include <phoenix/Batcher.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Matrix
#include <phoenix/Matrix.h>
#endif
#ifndef INCLUDED_phoenix_Quaternion
#include <phoenix/Quaternion.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Shader
#include <phoenix/Shader.h>
#endif
#ifndef INCLUDED_phoenix_Spatial
#include <phoenix/Spatial.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_Transform
#include <phoenix/Transform.h>
#endif
#ifndef INCLUDED_phoenix_Uniforms
#include <phoenix/Uniforms.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_GeometryKey
#include <phoenix/geometry/GeometryKey.h>
#endif
#ifndef INCLUDED_phoenix_geometry_GeometryState
#include <phoenix/geometry/GeometryState.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextureCoord
#include <phoenix/geometry/TextureCoord.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextureCoordSet
#include <phoenix/geometry/TextureCoordSet.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Vertex
#include <phoenix/geometry/Vertex.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_Runtime
#include <snow/modules/sdl/Runtime.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_25_new,"phoenix.geometry.Geometry","new",0xf65473e1,"phoenix.geometry.Geometry.new","phoenix/geometry/Geometry.hx",25,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_207_key_string,"phoenix.geometry.Geometry","key_string",0xdbf2f150,"phoenix.geometry.Geometry.key_string","phoenix/geometry/Geometry.hx",207,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_218_refresh_key,"phoenix.geometry.Geometry","refresh_key",0x4060be7c,"phoenix.geometry.Geometry.refresh_key","phoenix/geometry/Geometry.hx",218,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_238_str,"phoenix.geometry.Geometry","str",0xf6584c32,"phoenix.geometry.Geometry.str","phoenix/geometry/Geometry.hx",238,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_246_drop,"phoenix.geometry.Geometry","drop",0x8cfea58e,"phoenix.geometry.Geometry.drop","phoenix/geometry/Geometry.hx",246,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_291_add,"phoenix.geometry.Geometry","add",0xf64a95a2,"phoenix.geometry.Geometry.add","phoenix/geometry/Geometry.hx",291,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_297_remove,"phoenix.geometry.Geometry","remove",0xe1945f63,"phoenix.geometry.Geometry.remove","phoenix/geometry/Geometry.hx",297,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_381_batch_object_space,"phoenix.geometry.Geometry","batch_object_space",0x76d4c08a,"phoenix.geometry.Geometry.batch_object_space","phoenix/geometry/Geometry.hx",381,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_425_batch_into_arrays,"phoenix.geometry.Geometry","batch_into_arrays",0xe545c1b5,"phoenix.geometry.Geometry.batch_into_arrays","phoenix/geometry/Geometry.hx",425,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_463_destroy_vbos,"phoenix.geometry.Geometry","destroy_vbos",0xfa06f454,"phoenix.geometry.Geometry.destroy_vbos","phoenix/geometry/Geometry.hx",463,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_474_create_vbos,"phoenix.geometry.Geometry","create_vbos",0x8f2a5b34,"phoenix.geometry.Geometry.create_vbos","phoenix/geometry/Geometry.hx",474,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_486_bind,"phoenix.geometry.Geometry","bind",0x8ba5631c,"phoenix.geometry.Geometry.bind","phoenix/geometry/Geometry.hx",486,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_497_bind_pos,"phoenix.geometry.Geometry","bind_pos",0xcbebc3b1,"phoenix.geometry.Geometry.bind_pos","phoenix/geometry/Geometry.hx",497,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_503_bind_tcoords,"phoenix.geometry.Geometry","bind_tcoords",0x809eac2f,"phoenix.geometry.Geometry.bind_tcoords","phoenix/geometry/Geometry.hx",503,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_509_bind_colors,"phoenix.geometry.Geometry","bind_colors",0x5b9f4fb3,"phoenix.geometry.Geometry.bind_colors","phoenix/geometry/Geometry.hx",509,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_524_unbind,"phoenix.geometry.Geometry","unbind",0x3bf7bfb5,"phoenix.geometry.Geometry.unbind","phoenix/geometry/Geometry.hx",524,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_528_bind_and_upload,"phoenix.geometry.Geometry","bind_and_upload",0xd9d1412c,"phoenix.geometry.Geometry.bind_and_upload","phoenix/geometry/Geometry.hx",528,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_547_update_buffers,"phoenix.geometry.Geometry","update_buffers",0x1503ae1c,"phoenix.geometry.Geometry.update_buffers","phoenix/geometry/Geometry.hx",547,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_585_draw,"phoenix.geometry.Geometry","draw",0x8cfe9963,"phoenix.geometry.Geometry.draw","phoenix/geometry/Geometry.hx",585,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_592_translate,"phoenix.geometry.Geometry","translate",0xde6d918f,"phoenix.geometry.Geometry.translate","phoenix/geometry/Geometry.hx",592,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_596_set_locked,"phoenix.geometry.Geometry","set_locked",0x08e151e6,"phoenix.geometry.Geometry.set_locked","phoenix/geometry/Geometry.hx",596,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_609_get_locked,"phoenix.geometry.Geometry","get_locked",0x0563b372,"phoenix.geometry.Geometry.get_locked","phoenix/geometry/Geometry.hx",609,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_615_set_dirty,"phoenix.geometry.Geometry","set_dirty",0x95b852b6,"phoenix.geometry.Geometry.set_dirty","phoenix/geometry/Geometry.hx",615,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_621_get_dirty,"phoenix.geometry.Geometry","get_dirty",0xb26766aa,"phoenix.geometry.Geometry.get_dirty","phoenix/geometry/Geometry.hx",621,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_627_refresh,"phoenix.geometry.Geometry","refresh",0x7a5fd1dc,"phoenix.geometry.Geometry.refresh","phoenix/geometry/Geometry.hx",627,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_682_get_primitive_type,"phoenix.geometry.Geometry","get_primitive_type",0xf77b1efa,"phoenix.geometry.Geometry.get_primitive_type","phoenix/geometry/Geometry.hx",682,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_686_set_primitive_type,"phoenix.geometry.Geometry","set_primitive_type",0xd42a516e,"phoenix.geometry.Geometry.set_primitive_type","phoenix/geometry/Geometry.hx",686,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_702_get_texture,"phoenix.geometry.Geometry","get_texture",0x1c5cb573,"phoenix.geometry.Geometry.get_texture","phoenix/geometry/Geometry.hx",702,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_706_set_texture,"phoenix.geometry.Geometry","set_texture",0x26c9bc7f,"phoenix.geometry.Geometry.set_texture","phoenix/geometry/Geometry.hx",706,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_722_set_visible,"phoenix.geometry.Geometry","set_visible",0x2b0d6c16,"phoenix.geometry.Geometry.set_visible","phoenix/geometry/Geometry.hx",722,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_728_set_color,"phoenix.geometry.Geometry","set_color",0x06447407,"phoenix.geometry.Geometry.set_color","phoenix/geometry/Geometry.hx",728,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_744_get_shader,"phoenix.geometry.Geometry","get_shader",0xc8bd6d8d,"phoenix.geometry.Geometry.get_shader","phoenix/geometry/Geometry.hx",744,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_748_set_shader,"phoenix.geometry.Geometry","set_shader",0xcc3b0c01,"phoenix.geometry.Geometry.set_shader","phoenix/geometry/Geometry.hx",748,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_764_get_depth,"phoenix.geometry.Geometry","get_depth",0xafc1079b,"phoenix.geometry.Geometry.get_depth","phoenix/geometry/Geometry.hx",764,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_769_set_depth,"phoenix.geometry.Geometry","set_depth",0x9311f3a7,"phoenix.geometry.Geometry.set_depth","phoenix/geometry/Geometry.hx",769,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_784_get_blend_disabled,"phoenix.geometry.Geometry","get_blend_disabled",0x936594d2,"phoenix.geometry.Geometry.get_blend_disabled","phoenix/geometry/Geometry.hx",784,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_788_get_blend_src_alpha,"phoenix.geometry.Geometry","get_blend_src_alpha",0xcafb706d,"phoenix.geometry.Geometry.get_blend_src_alpha","phoenix/geometry/Geometry.hx",788,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_792_get_blend_src_rgb,"phoenix.geometry.Geometry","get_blend_src_rgb",0xd0cbf25c,"phoenix.geometry.Geometry.get_blend_src_rgb","phoenix/geometry/Geometry.hx",792,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_796_get_blend_dest_alpha,"phoenix.geometry.Geometry","get_blend_dest_alpha",0xae139757,"phoenix.geometry.Geometry.get_blend_dest_alpha","phoenix/geometry/Geometry.hx",796,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_800_get_blend_dest_rgb,"phoenix.geometry.Geometry","get_blend_dest_rgb",0xdbb5aac6,"phoenix.geometry.Geometry.get_blend_dest_rgb","phoenix/geometry/Geometry.hx",800,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_803_set_blend_disabled,"phoenix.geometry.Geometry","set_blend_disabled",0x7014c746,"phoenix.geometry.Geometry.set_blend_disabled","phoenix/geometry/Geometry.hx",803,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_813_set_blend_src_alpha,"phoenix.geometry.Geometry","set_blend_src_alpha",0x07986379,"phoenix.geometry.Geometry.set_blend_src_alpha","phoenix/geometry/Geometry.hx",813,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_823_set_blend_src_rgb,"phoenix.geometry.Geometry","set_blend_src_rgb",0xf439ca68,"phoenix.geometry.Geometry.set_blend_src_rgb","phoenix/geometry/Geometry.hx",823,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_833_set_blend_dest_alpha,"phoenix.geometry.Geometry","set_blend_dest_alpha",0x7acb4ecb,"phoenix.geometry.Geometry.set_blend_dest_alpha","phoenix/geometry/Geometry.hx",833,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_843_set_blend_dest_rgb,"phoenix.geometry.Geometry","set_blend_dest_rgb",0xb864dd3a,"phoenix.geometry.Geometry.set_blend_dest_rgb","phoenix/geometry/Geometry.hx",843,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_860_get_clip,"phoenix.geometry.Geometry","get_clip",0xcb573338,"phoenix.geometry.Geometry.get_clip","phoenix/geometry/Geometry.hx",860,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_864_set_clip,"phoenix.geometry.Geometry","set_clip",0x79b48cac,"phoenix.geometry.Geometry.set_clip","phoenix/geometry/Geometry.hx",864,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_880_get_clip_rect,"phoenix.geometry.Geometry","get_clip_rect",0x4f648acb,"phoenix.geometry.Geometry.get_clip_rect","phoenix/geometry/Geometry.hx",880,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_884_set_clip_rect,"phoenix.geometry.Geometry","set_clip_rect",0x946a6cd7,"phoenix.geometry.Geometry.set_clip_rect","phoenix/geometry/Geometry.hx",884,0xdab136cf)
HX_LOCAL_STACK_FRAME(_hx_pos_1c4f0091f7c5e781_115_boot,"phoenix.geometry.Geometry","boot",0x8ba9f191,"phoenix.geometry.Geometry.boot","phoenix/geometry/Geometry.hx",115,0xdab136cf)
namespace phoenix{
namespace geometry{

void Geometry_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_25_new)
HXLINE( 546)		this->_prev_count = (int)0;
HXLINE( 103)		this->dirty_based = true;
HXLINE(  98)		this->dirty = false;
HXLINE(  97)		this->locked = false;
HXLINE(  96)		this->immediate = false;
HXLINE(  95)		this->visible = true;
HXLINE(  92)		this->dirty_blend = false;
HXLINE(  91)		this->dirty_clip = false;
HXLINE(  90)		this->dirty_depth = false;
HXLINE(  89)		this->dirty_shader = false;
HXLINE(  88)		this->dirty_texture = false;
HXLINE(  87)		this->dirty_primitive_type = false;
HXLINE(  85)		this->shadow_blend_dest_rgb = (int)771;
HXLINE(  84)		this->shadow_blend_dest_alpha = (int)771;
HXLINE(  83)		this->shadow_blend_src_rgb = (int)770;
HXLINE(  82)		this->shadow_blend_src_alpha = (int)770;
HXLINE(  81)		this->shadow_blend_disabled = false;
HXLINE(  80)		this->shadow_clip = false;
HXLINE(  79)		this->shadow_depth = ((Float)0.0);
HXLINE(  74)		this->blend_dest_rgb = (int)771;
HXLINE(  73)		this->blend_dest_alpha = (int)771;
HXLINE(  72)		this->blend_src_rgb = (int)770;
HXLINE(  71)		this->blend_src_alpha = (int)770;
HXLINE(  70)		this->blend_disabled = false;
HXLINE(  62)		this->id = HX_("",00,00,00,00);
HXLINE(  61)		this->uuid = HX_("",00,00,00,00);
HXLINE(  60)		this->dropped = false;
HXLINE(  55)		this->added = false;
HXLINE(  39)		this->buffer_type = (int)35048;
HXLINE(  38)		this->buffer_based = false;
HXLINE(  36)		this->object_space = false;
HXLINE( 119)		this->uuid = ::Luxe_obj::utils->uniqueid(null());
HXLINE( 120)		this->id = this->uuid;
HXLINE( 122)		this->state =  ::phoenix::geometry::GeometryState_obj::__alloc( HX_CTX );
HXLINE( 123)		this->vertices = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 124)		this->batchers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 127)		this->transform =  ::phoenix::Transform_obj::__alloc( HX_CTX );
HXLINE( 130)		this->_final_vert_position =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 133)		this->set_clip_rect(null());
HXLINE( 134)		this->set_clip(false);
HXLINE( 137)		bool _do_add = true;
HXLINE( 140)		if (hx::IsNull( ( (::String)(_options->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ) )) {
HXLINE( 140)			_options->__SetField(HX_("id",db,5b,00,00),this->uuid,hx::paccDynamic);
            		}
HXDLIN( 140)		this->id = ( (::String)(_options->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE( 141)		if (hx::IsNull( ( ( ::phoenix::Color)(_options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)) ) )) {
HXLINE( 141)			_options->__SetField(HX_("color",63,71,5c,4a), ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null()),hx::paccDynamic);
            		}
HXDLIN( 141)		this->set_color(( ( ::phoenix::Color)(_options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)) ));
HXLINE( 142)		if (hx::IsNull( _options->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic) )) {
HXLINE( 142)			_options->__SetField(HX_("visible",72,78,24,a3),true,hx::paccDynamic);
            		}
HXDLIN( 142)		this->set_visible(( (bool)(_options->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ));
HXLINE( 143)		if (hx::IsNull( _options->__Field(HX_("immediate",f1,13,f1,cf),hx::paccDynamic) )) {
HXLINE( 143)			_options->__SetField(HX_("immediate",f1,13,f1,cf),false,hx::paccDynamic);
            		}
HXDLIN( 143)		this->immediate = ( (bool)(_options->__Field(HX_("immediate",f1,13,f1,cf),hx::paccDynamic)) );
HXLINE( 146)		if (hx::IsNull( _options->__Field(HX_("buffer_based",74,eb,e1,79),hx::paccDynamic) )) {
HXLINE( 146)			_options->__SetField(HX_("buffer_based",74,eb,e1,79),false,hx::paccDynamic);
            		}
HXDLIN( 146)		this->buffer_based = ( (bool)(_options->__Field(HX_("buffer_based",74,eb,e1,79),hx::paccDynamic)) );
HXLINE( 147)		if (hx::IsNull( _options->__Field(HX_("object_space",06,6c,c3,22),hx::paccDynamic) )) {
HXLINE( 147)			_options->__SetField(HX_("object_space",06,6c,c3,22),false,hx::paccDynamic);
            		}
HXDLIN( 147)		this->object_space = ( (bool)(_options->__Field(HX_("object_space",06,6c,c3,22),hx::paccDynamic)) );
HXLINE( 150)		{
HXLINE( 150)			if (hx::IsNull( _options->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic) )) {
HXLINE( 150)				_options->__SetField(HX_("depth",03,f1,29,d7),this->state->depth,hx::paccDynamic);
            			}
HXDLIN( 150)			this->state->depth = ( (Float)(_options->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic)) );
            		}
HXLINE( 151)		{
HXLINE( 151)			 ::phoenix::geometry::GeometryState _this = this->state;
HXDLIN( 151)			if (hx::IsNull( ( ( ::phoenix::Texture)(_options->__Field(HX_("texture",db,c8,e0,9e),hx::paccDynamic)) ) )) {
HXLINE( 151)				_options->__SetField(HX_("texture",db,c8,e0,9e),this->state->texture,hx::paccDynamic);
            			}
HXDLIN( 151)			_this->dirty = true;
HXDLIN( 151)			_this->texture = ( ( ::phoenix::Texture)(_options->__Field(HX_("texture",db,c8,e0,9e),hx::paccDynamic)) );
            		}
HXLINE( 152)		{
HXLINE( 152)			 ::phoenix::geometry::GeometryState _this1 = this->state;
HXDLIN( 152)			if (hx::IsNull( _options->__Field(HX_("primitive_type",92,c8,6d,88),hx::paccDynamic) )) {
HXLINE( 152)				_options->__SetField(HX_("primitive_type",92,c8,6d,88),this->state->primitive_type,hx::paccDynamic);
            			}
HXDLIN( 152)			_this1->dirty = true;
HXDLIN( 152)			_this1->primitive_type = ( (int)(_options->__Field(HX_("primitive_type",92,c8,6d,88),hx::paccDynamic)) );
            		}
HXLINE( 153)		{
HXLINE( 153)			 ::phoenix::geometry::GeometryState _this2 = this->state;
HXDLIN( 153)			if (hx::IsNull( ( ( ::phoenix::Shader)(_options->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)) ) )) {
HXLINE( 153)				_options->__SetField(HX_("shader",25,bf,20,1d),this->state->shader,hx::paccDynamic);
            			}
HXDLIN( 153)			_this2->dirty = true;
HXDLIN( 153)			_this2->shader = ( ( ::phoenix::Shader)(_options->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)) );
            		}
HXLINE( 155)		if (hx::IsNotNull( ( ( ::phoenix::Rectangle)(_options->__Field(HX_("clip_rect",33,48,a2,89),hx::paccDynamic)) ) )) {
HXLINE( 156)			 ::phoenix::Rectangle _r = ( ( ::phoenix::Rectangle)(_options->__Field(HX_("clip_rect",33,48,a2,89),hx::paccDynamic)) );
HXLINE( 157)			{
HXLINE( 157)				 ::phoenix::geometry::GeometryState _this3 = this->state;
HXDLIN( 157)				_this3->dirty = true;
HXDLIN( 157)				_this3->clip_x = _r->x;
            			}
HXLINE( 158)			{
HXLINE( 158)				 ::phoenix::geometry::GeometryState _this4 = this->state;
HXDLIN( 158)				_this4->dirty = true;
HXDLIN( 158)				_this4->clip_y = _r->y;
            			}
HXLINE( 159)			{
HXLINE( 159)				 ::phoenix::geometry::GeometryState _this5 = this->state;
HXDLIN( 159)				_this5->dirty = true;
HXDLIN( 159)				_this5->clip_w = _r->w;
            			}
HXLINE( 160)			{
HXLINE( 160)				 ::phoenix::geometry::GeometryState _this6 = this->state;
HXDLIN( 160)				_this6->dirty = true;
HXDLIN( 160)				_this6->clip_h = _r->h;
            			}
            		}
HXLINE( 163)		{
HXLINE( 163)			if (hx::IsNull( ( ( ::phoenix::Vector)(_options->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) )) {
HXLINE( 163)				_options->__SetField(HX_("pos",94,5d,55,00),this->transform->local->pos,hx::paccDynamic);
            			}
HXDLIN( 163)			 ::phoenix::Vector value = ( ( ::phoenix::Vector)(_options->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXDLIN( 163)			{
HXLINE( 163)				 ::phoenix::Spatial _this7 = this->transform->local;
HXDLIN( 163)				_this7->pos = value;
HXDLIN( 163)				if (hx::IsNotNull( value )) {
HXLINE( 163)					{
HXLINE( 163)						 ::phoenix::Vector _v = _this7->pos;
HXDLIN( 163)						 ::Dynamic listener = _this7->_pos_change_dyn();
HXDLIN( 163)						_v->listen_x = listener;
HXDLIN( 163)						_v->listen_y = listener;
HXDLIN( 163)						_v->listen_z = listener;
            					}
HXDLIN( 163)					{
HXLINE( 163)						bool _hx_tmp;
HXDLIN( 163)						if (hx::IsNotNull( _this7->pos_changed )) {
HXLINE( 163)							_hx_tmp = !(_this7->ignore_listeners);
            						}
            						else {
HXLINE( 163)							_hx_tmp = false;
            						}
HXDLIN( 163)						if (_hx_tmp) {
HXLINE( 163)							_this7->pos_changed(_this7->pos);
            						}
            					}
            				}
            			}
            		}
HXLINE( 164)		{
HXLINE( 164)			if (hx::IsNull( ( ( ::phoenix::Quaternion)(_options->__Field(HX_("rotation",3e,3d,86,08),hx::paccDynamic)) ) )) {
HXLINE( 164)				_options->__SetField(HX_("rotation",3e,3d,86,08),this->transform->local->rotation,hx::paccDynamic);
            			}
HXDLIN( 164)			 ::phoenix::Quaternion value1 = ( ( ::phoenix::Quaternion)(_options->__Field(HX_("rotation",3e,3d,86,08),hx::paccDynamic)) );
HXDLIN( 164)			{
HXLINE( 164)				 ::phoenix::Spatial _this8 = this->transform->local;
HXDLIN( 164)				_this8->rotation = value1;
HXDLIN( 164)				if (hx::IsNotNull( value1 )) {
HXLINE( 164)					{
HXLINE( 164)						 ::phoenix::Quaternion _q = _this8->rotation;
HXDLIN( 164)						 ::Dynamic listener1 = _this8->_rotation_change_dyn();
HXDLIN( 164)						_q->listen_x = listener1;
HXDLIN( 164)						_q->listen_y = listener1;
HXDLIN( 164)						_q->listen_z = listener1;
HXDLIN( 164)						_q->listen_w = listener1;
            					}
HXDLIN( 164)					{
HXLINE( 164)						bool _hx_tmp1;
HXDLIN( 164)						if (hx::IsNotNull( _this8->rotation_changed )) {
HXLINE( 164)							_hx_tmp1 = !(_this8->ignore_listeners);
            						}
            						else {
HXLINE( 164)							_hx_tmp1 = false;
            						}
HXDLIN( 164)						if (_hx_tmp1) {
HXLINE( 164)							_this8->rotation_changed(_this8->rotation);
            						}
            					}
            				}
            			}
            		}
HXLINE( 165)		{
HXLINE( 165)			if (hx::IsNull( ( ( ::phoenix::Vector)(_options->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)) ) )) {
HXLINE( 165)				_options->__SetField(HX_("scale",8a,ce,ce,78),this->transform->local->scale,hx::paccDynamic);
            			}
HXDLIN( 165)			 ::phoenix::Vector value2 = ( ( ::phoenix::Vector)(_options->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)) );
HXDLIN( 165)			{
HXLINE( 165)				 ::phoenix::Spatial _this9 = this->transform->local;
HXDLIN( 165)				_this9->scale = value2;
HXDLIN( 165)				if (hx::IsNotNull( value2 )) {
HXLINE( 165)					{
HXLINE( 165)						 ::phoenix::Vector _v1 = _this9->scale;
HXDLIN( 165)						 ::Dynamic listener2 = _this9->_scale_change_dyn();
HXDLIN( 165)						_v1->listen_x = listener2;
HXDLIN( 165)						_v1->listen_y = listener2;
HXDLIN( 165)						_v1->listen_z = listener2;
            					}
HXDLIN( 165)					{
HXLINE( 165)						bool _hx_tmp2;
HXDLIN( 165)						if (hx::IsNotNull( _this9->scale_changed )) {
HXLINE( 165)							_hx_tmp2 = !(_this9->ignore_listeners);
            						}
            						else {
HXLINE( 165)							_hx_tmp2 = false;
            						}
HXDLIN( 165)						if (_hx_tmp2) {
HXLINE( 165)							_this9->scale_changed(_this9->scale);
            						}
            					}
            				}
            			}
            		}
HXLINE( 166)		{
HXLINE( 166)			 ::phoenix::Transform _this10 = this->transform;
HXDLIN( 166)			if (hx::IsNull( ( ( ::phoenix::Vector)(_options->__Field(HX_("origin",e6,19,01,4b),hx::paccDynamic)) ) )) {
HXLINE( 166)				_options->__SetField(HX_("origin",e6,19,01,4b),this->transform->origin,hx::paccDynamic);
            			}
HXDLIN( 166)			 ::phoenix::Vector o = ( ( ::phoenix::Vector)(_options->__Field(HX_("origin",e6,19,01,4b),hx::paccDynamic)) );
HXDLIN( 166)			{
HXLINE( 166)				_this10->dirty = true;
HXDLIN( 166)				bool _hx_tmp3;
HXDLIN( 166)				bool _hx_tmp4;
HXDLIN( 166)				bool _hx_tmp5;
HXDLIN( 166)				if (_this10->dirty) {
HXLINE( 166)					_hx_tmp5 = !(_this10->_setup);
            				}
            				else {
HXLINE( 166)					_hx_tmp5 = false;
            				}
HXDLIN( 166)				if (_hx_tmp5) {
HXLINE( 166)					_hx_tmp4 = hx::IsNotNull( _this10->_dirty_handlers );
            				}
            				else {
HXLINE( 166)					_hx_tmp4 = false;
            				}
HXDLIN( 166)				if (_hx_tmp4) {
HXLINE( 166)					_hx_tmp3 = (_this10->_dirty_handlers->length > (int)0);
            				}
            				else {
HXLINE( 166)					_hx_tmp3 = false;
            				}
HXDLIN( 166)				if (_hx_tmp3) {
HXLINE( 166)					int _g = (int)0;
HXDLIN( 166)					::Array< ::Dynamic> _g1 = _this10->_dirty_handlers;
HXDLIN( 166)					while((_g < _g1->length)){
HXLINE( 166)						 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 166)						_g = (_g + (int)1);
HXDLIN( 166)						if (hx::IsNotNull( _handler )) {
HXLINE( 166)							_handler(_this10);
            						}
            					}
            				}
            			}
HXDLIN( 166)			_this10->origin = o;
HXDLIN( 166)			bool _hx_tmp6;
HXDLIN( 166)			if (hx::IsNotNull( _this10->_origin_handlers )) {
HXLINE( 166)				_hx_tmp6 = (_this10->_origin_handlers->length > (int)0);
            			}
            			else {
HXLINE( 166)				_hx_tmp6 = false;
            			}
HXDLIN( 166)			if (_hx_tmp6) {
HXLINE( 166)				 ::phoenix::Vector _origin = _this10->origin;
HXDLIN( 166)				{
HXLINE( 166)					int _g2 = (int)0;
HXDLIN( 166)					::Array< ::Dynamic> _g11 = _this10->_origin_handlers;
HXDLIN( 166)					while((_g2 < _g11->length)){
HXLINE( 166)						 ::Dynamic _handler1 = _g11->__get(_g2);
HXDLIN( 166)						_g2 = (_g2 + (int)1);
HXDLIN( 166)						if (hx::IsNotNull( _handler1 )) {
HXLINE( 166)							_handler1(_origin);
            						}
            					}
            				}
            			}
            		}
HXLINE( 168)		bool _hx_tmp7;
HXDLIN( 168)		if (hx::IsNotNull( _options->__Field(HX_("no_batcher_add",0b,25,c3,59),hx::paccDynamic) )) {
HXLINE( 168)			_hx_tmp7 = hx::IsEq( _options->__Field(HX_("no_batcher_add",0b,25,c3,59),hx::paccDynamic),true );
            		}
            		else {
HXLINE( 168)			_hx_tmp7 = false;
            		}
HXDLIN( 168)		if (_hx_tmp7) {
HXLINE( 169)			_do_add = false;
            		}
HXLINE( 172)		::phoenix::geometry::Geometry_obj::_sequence_key++;
HXLINE( 174)		this->key =  ::phoenix::geometry::GeometryKey_obj::__alloc( HX_CTX );
HXLINE( 176)		this->key->uuid = this->uuid;
HXLINE( 177)		 ::snow::Snow _this11 = ::Luxe_obj::core->app;
HXDLIN( 177)		Float _hx_tmp8 = linc::timestamp::now();
HXDLIN( 177)		this->key->timestamp = (_hx_tmp8 - ::snow::modules::sdl::Runtime_obj::timestamp_start);
HXLINE( 178)		this->key->sequence = ::phoenix::geometry::Geometry_obj::_sequence_key;
HXLINE( 179)		this->key->primitive_type = this->state->primitive_type;
HXLINE( 180)		this->key->texture = this->state->texture;
HXLINE( 181)		this->key->shader = this->state->shader;
HXLINE( 182)		this->key->depth = this->state->depth;
HXLINE( 183)		this->key->clip = this->state->clip;
HXLINE( 184)		this->key->blend_disabled = this->state->blend_disabled;
HXLINE( 185)		this->key->blend_src_alpha = this->state->blend_src_alpha;
HXLINE( 186)		this->key->blend_src_rgb = this->state->blend_src_rgb;
HXLINE( 187)		this->key->blend_dest_alpha = this->state->blend_dest_alpha;
HXLINE( 188)		this->key->blend_dest_rgb = this->state->blend_dest_rgb;
HXLINE( 190)		this->transform->id = this->uuid;
HXLINE( 191)		this->transform->name = this->id;
HXLINE( 195)		bool _hx_tmp9;
HXDLIN( 195)		if (hx::IsNotNull( ( ( ::phoenix::Batcher)(_options->__Field(HX_("batcher",a7,22,10,c0),hx::paccDynamic)) ) )) {
HXLINE( 195)			_hx_tmp9 = _do_add;
            		}
            		else {
HXLINE( 195)			_hx_tmp9 = false;
            		}
HXDLIN( 195)		if (_hx_tmp9) {
HXLINE( 196)			( ( ::phoenix::Batcher)(_options->__Field(HX_("batcher",a7,22,10,c0),hx::paccDynamic)) )->add(hx::ObjectPtr<OBJ_>(this),null());
            		}
HXLINE( 200)		if (this->buffer_based) {
HXLINE( 200)			if (hx::IsNull( this->vb_pos )) {
HXLINE( 200)				int _id = linc::opengl::webgl::createBuffer();
HXDLIN( 200)				 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id);
HXDLIN( 200)				this->vb_pos = this1;
HXDLIN( 200)				int _id1 = linc::opengl::webgl::createBuffer();
HXDLIN( 200)				 ::opengl::GLObject this2 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id1);
HXDLIN( 200)				this->vb_tcoords = this2;
HXDLIN( 200)				int _id2 = linc::opengl::webgl::createBuffer();
HXDLIN( 200)				 ::opengl::GLObject this3 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id2);
HXDLIN( 200)				this->vb_colors = this3;
HXDLIN( 200)				this->set_dirty(true);
            			}
            		}
HXLINE( 201)		this->uniforms =  ::phoenix::Uniforms_obj::__alloc( HX_CTX );
            	}

Dynamic Geometry_obj::__CreateEmpty() { return new Geometry_obj; }

void *Geometry_obj::_hx_vtable = 0;

Dynamic Geometry_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Geometry_obj > _hx_result = new Geometry_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Geometry_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6c1faa93;
}

::String Geometry_obj::key_string(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_207_key_string)
HXLINE( 211)		::String _hx_tmp;
HXDLIN( 211)		if (hx::IsNull( this->key->texture )) {
HXLINE( 211)			_hx_tmp = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE( 211)			_hx_tmp = this->key->texture->id;
            		}
HXLINE( 212)		::String _hx_tmp1;
HXDLIN( 212)		if (hx::IsNull( this->key->shader )) {
HXLINE( 212)			_hx_tmp1 = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE( 212)			_hx_tmp1 = this->key->shader->id;
            		}
HXLINE( 208)		::String _hx_tmp2 = ((((((((((((((((((HX_("ts: ",e5,35,04,4d) + this->key->timestamp) + HX_("\n",0a,00,00,00)) + HX_("sequence: ",27,23,22,d5)) + this->key->sequence) + HX_("\n",0a,00,00,00)) + HX_("primitive_type: ",b8,c3,de,d5)) + this->key->primitive_type) + HX_("\n",0a,00,00,00)) + HX_("texture: ",41,28,49,af)) + _hx_tmp) + HX_("\n",0a,00,00,00)) + HX_("shader: ",0b,c5,2a,36)) + _hx_tmp1) + HX_("\n",0a,00,00,00)) + HX_("depth: ",69,aa,4a,6a)) + this->key->depth) + HX_("\n",0a,00,00,00)) + HX_("clip: ",76,f5,57,0a));
HXLINE( 207)		return (_hx_tmp2 + ::Std_obj::string(this->key->clip));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,key_string,return )

void Geometry_obj::refresh_key(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_218_refresh_key)
HXLINE( 222)		this->key->uuid = this->uuid;
HXLINE( 223)		 ::snow::Snow _this = ::Luxe_obj::core->app;
HXDLIN( 223)		Float _hx_tmp = linc::timestamp::now();
HXDLIN( 223)		this->key->timestamp = (_hx_tmp - ::snow::modules::sdl::Runtime_obj::timestamp_start);
HXLINE( 225)		this->key->primitive_type = this->state->primitive_type;
HXLINE( 226)		this->key->texture = this->state->texture;
HXLINE( 227)		this->key->shader = this->state->shader;
HXLINE( 228)		this->key->depth = this->state->depth;
HXLINE( 229)		this->key->clip = this->state->clip;
HXLINE( 230)		this->key->blend_disabled = this->state->blend_disabled;
HXLINE( 231)		this->key->blend_src_alpha = this->state->blend_src_alpha;
HXLINE( 232)		this->key->blend_src_rgb = this->state->blend_src_rgb;
HXLINE( 233)		this->key->blend_dest_alpha = this->state->blend_dest_alpha;
HXLINE( 234)		this->key->blend_dest_rgb = this->state->blend_dest_rgb;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,refresh_key,(void))

void Geometry_obj::str(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_238_str)
HXLINE( 239)		if (!(this->state->log)) {
HXLINE( 239)			return;
            		}
HXLINE( 240)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 240)		_hx_tmp((HX_("\t\tgeometry ; ",53,f8,a3,08) + this->id),hx::SourceInfo(HX_("Geometry.hx",2c,13,62,29),240,HX_("phoenix.geometry.Geometry",6f,ef,7a,64),HX_("str",b1,a8,57,00)));
HXLINE( 241)		this->state->log = true;
HXLINE( 242)		this->state->str();
HXLINE( 243)		this->state->log = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,str,(void))

void Geometry_obj::drop( ::Dynamic __o_remove){
 ::Dynamic remove = __o_remove.Default(true);
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_246_drop)
HXLINE( 248)		bool _hx_tmp;
HXDLIN( 248)		if (remove) {
HXLINE( 248)			_hx_tmp = this->added;
            		}
            		else {
HXLINE( 248)			_hx_tmp = false;
            		}
HXDLIN( 248)		if (_hx_tmp) {
HXLINE( 250)			int _g = (int)0;
HXDLIN( 250)			::Array< ::Dynamic> _g1 = this->batchers;
HXDLIN( 250)			while((_g < _g1->length)){
HXLINE( 250)				 ::phoenix::Batcher b = _g1->__get(_g).StaticCast<  ::phoenix::Batcher >();
HXDLIN( 250)				_g = (_g + (int)1);
HXLINE( 251)				b->remove(hx::ObjectPtr<OBJ_>(this),true);
            			}
            		}
HXLINE( 256)		this->key = null();
HXLINE( 257)		this->set_color(null());
HXLINE( 258)		this->state = null();
HXLINE( 259)		this->_final_vert_position = null();
HXLINE( 260)		this->batchers = null();
HXLINE( 261)		this->uuid = null();
HXLINE( 262)		this->id = null();
HXLINE( 263)		this->shadow_texture = null();
HXLINE( 264)		this->shadow_shader = null();
HXLINE( 265)		this->vertices = null();
HXLINE( 267)		if (hx::IsNotNull( this->transform )) {
HXLINE( 268)			this->transform->destroy();
HXLINE( 269)			this->transform = null();
            		}
HXLINE( 272)		if (hx::IsNotNull( this->uniforms )) {
HXLINE( 273)			this->uniforms->destroy();
HXLINE( 274)			this->uniforms = null();
            		}
HXLINE( 277)		this->destroy_vbos();
HXLINE( 278)		if (hx::IsNotNull( this->buffer_pos )) {
HXLINE( 279)			this->buffer_pos = null();
HXLINE( 280)			this->buffer_tcoords = null();
HXLINE( 281)			this->buffer_colors = null();
HXLINE( 282)			this->buffer_normals = null();
            		}
HXLINE( 285)		this->dropped = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,drop,(void))

void Geometry_obj::add( ::phoenix::geometry::Vertex v){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_291_add)
HXDLIN( 291)		this->vertices->push(v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,add,(void))

void Geometry_obj::remove( ::phoenix::geometry::Vertex v){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_297_remove)
HXDLIN( 297)		this->vertices->remove(v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,remove,(void))

void Geometry_obj::batch_object_space(int vert_index,int tcoord_index,int color_index,int normal_index, ::snow::api::buffers::ArrayBufferView vertlist, ::snow::api::buffers::ArrayBufferView tcoordlist, ::snow::api::buffers::ArrayBufferView colorlist, ::snow::api::buffers::ArrayBufferView normallist){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_381_batch_object_space)
HXDLIN( 381)		int _g = (int)0;
HXDLIN( 381)		::Array< ::Dynamic> _g1 = this->vertices;
HXDLIN( 381)		while((_g < _g1->length)){
HXDLIN( 381)			 ::phoenix::geometry::Vertex v = _g1->__get(_g).StaticCast<  ::phoenix::geometry::Vertex >();
HXDLIN( 381)			_g = (_g + (int)1);
HXLINE( 383)			 ::phoenix::Vector _vpos = v->pos;
HXLINE( 384)			 ::phoenix::geometry::TextureCoord _vuv = v->uv->uv0;
HXLINE( 385)			 ::phoenix::Color _vcol = v->color;
HXLINE( 387)			{
HXLINE( 387)				int vertlist1 = vertlist->byteOffset;
HXDLIN( 387)				::__hxcpp_memory_set_float(vertlist->buffer,(vertlist1 + (vert_index * (int)4)),_vpos->x);
            			}
HXLINE( 388)			{
HXLINE( 388)				int vertlist2 = vertlist->byteOffset;
HXDLIN( 388)				::__hxcpp_memory_set_float(vertlist->buffer,(vertlist2 + ((vert_index + (int)1) * (int)4)),_vpos->y);
            			}
HXLINE( 389)			{
HXLINE( 389)				int vertlist3 = vertlist->byteOffset;
HXDLIN( 389)				::__hxcpp_memory_set_float(vertlist->buffer,(vertlist3 + ((vert_index + (int)2) * (int)4)),_vpos->z);
            			}
HXLINE( 390)			{
HXLINE( 390)				int vertlist4 = vertlist->byteOffset;
HXDLIN( 390)				::__hxcpp_memory_set_float(vertlist->buffer,(vertlist4 + ((vert_index + (int)3) * (int)4)),_vpos->w);
            			}
HXLINE( 392)			vert_index = (vert_index + (int)4);
HXLINE( 394)			{
HXLINE( 394)				int tcoordlist1 = tcoordlist->byteOffset;
HXDLIN( 394)				::__hxcpp_memory_set_float(tcoordlist->buffer,(tcoordlist1 + (tcoord_index * (int)4)),_vuv->u);
            			}
HXLINE( 395)			{
HXLINE( 395)				int tcoordlist2 = tcoordlist->byteOffset;
HXDLIN( 395)				::__hxcpp_memory_set_float(tcoordlist->buffer,(tcoordlist2 + ((tcoord_index + (int)1) * (int)4)),_vuv->v);
            			}
HXLINE( 396)			{
HXLINE( 396)				int tcoordlist3 = tcoordlist->byteOffset;
HXDLIN( 396)				::__hxcpp_memory_set_float(tcoordlist->buffer,(tcoordlist3 + ((tcoord_index + (int)2) * (int)4)),_vuv->w);
            			}
HXLINE( 397)			{
HXLINE( 397)				int tcoordlist4 = tcoordlist->byteOffset;
HXDLIN( 397)				::__hxcpp_memory_set_float(tcoordlist->buffer,(tcoordlist4 + ((tcoord_index + (int)3) * (int)4)),_vuv->t);
            			}
HXLINE( 399)			tcoord_index = (tcoord_index + (int)4);
HXLINE( 401)			{
HXLINE( 401)				int colorlist1 = colorlist->byteOffset;
HXDLIN( 401)				::__hxcpp_memory_set_float(colorlist->buffer,(colorlist1 + (color_index * (int)4)),_vcol->r);
            			}
HXLINE( 402)			{
HXLINE( 402)				int colorlist2 = colorlist->byteOffset;
HXDLIN( 402)				::__hxcpp_memory_set_float(colorlist->buffer,(colorlist2 + ((color_index + (int)1) * (int)4)),_vcol->g);
            			}
HXLINE( 403)			{
HXLINE( 403)				int colorlist3 = colorlist->byteOffset;
HXDLIN( 403)				::__hxcpp_memory_set_float(colorlist->buffer,(colorlist3 + ((color_index + (int)2) * (int)4)),_vcol->b);
            			}
HXLINE( 404)			{
HXLINE( 404)				int colorlist4 = colorlist->byteOffset;
HXDLIN( 404)				::__hxcpp_memory_set_float(colorlist->buffer,(colorlist4 + ((color_index + (int)3) * (int)4)),_vcol->a);
            			}
HXLINE( 406)			color_index = (color_index + (int)4);
HXLINE( 416)			normal_index = (normal_index + (int)4);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(Geometry_obj,batch_object_space,(void))

void Geometry_obj::batch_into_arrays(::Array< Float > vertlist,::Array< Float > tcoordlist,::Array< Float > colorlist,::Array< Float > normallist){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_425_batch_into_arrays)
HXDLIN( 425)		int _g = (int)0;
HXDLIN( 425)		::Array< ::Dynamic> _g1 = this->vertices;
HXDLIN( 425)		while((_g < _g1->length)){
HXDLIN( 425)			 ::phoenix::geometry::Vertex v = _g1->__get(_g).StaticCast<  ::phoenix::geometry::Vertex >();
HXDLIN( 425)			_g = (_g + (int)1);
HXLINE( 428)			{
HXLINE( 428)				 ::phoenix::Vector _this = this->_final_vert_position;
HXDLIN( 428)				Float _x = v->pos->x;
HXDLIN( 428)				Float _y = v->pos->y;
HXDLIN( 428)				Float _z = v->pos->z;
HXDLIN( 428)				Float _w = v->pos->w;
HXDLIN( 428)				bool prev = _this->ignore_listeners;
HXDLIN( 428)				_this->ignore_listeners = true;
HXDLIN( 428)				{
HXLINE( 428)					_this->x = _x;
HXDLIN( 428)					if (!(_this->_construct)) {
HXLINE( 428)						bool _hx_tmp;
HXDLIN( 428)						if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 428)							_hx_tmp = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 428)							_hx_tmp = false;
            						}
HXDLIN( 428)						if (_hx_tmp) {
HXLINE( 428)							_this->listen_x(_x);
            						}
            					}
            				}
HXDLIN( 428)				{
HXLINE( 428)					_this->y = _y;
HXDLIN( 428)					if (!(_this->_construct)) {
HXLINE( 428)						bool _hx_tmp1;
HXDLIN( 428)						if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 428)							_hx_tmp1 = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 428)							_hx_tmp1 = false;
            						}
HXDLIN( 428)						if (_hx_tmp1) {
HXLINE( 428)							_this->listen_y(_y);
            						}
            					}
            				}
HXDLIN( 428)				{
HXLINE( 428)					_this->z = _z;
HXDLIN( 428)					if (!(_this->_construct)) {
HXLINE( 428)						bool _hx_tmp2;
HXDLIN( 428)						if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 428)							_hx_tmp2 = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 428)							_hx_tmp2 = false;
            						}
HXDLIN( 428)						if (_hx_tmp2) {
HXLINE( 428)							_this->listen_z(_z);
            						}
            					}
            				}
HXDLIN( 428)				_this->w = _w;
HXDLIN( 428)				_this->ignore_listeners = prev;
HXDLIN( 428)				bool _hx_tmp3;
HXDLIN( 428)				if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 428)					_hx_tmp3 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 428)					_hx_tmp3 = false;
            				}
HXDLIN( 428)				if (_hx_tmp3) {
HXLINE( 428)					_this->listen_x(_this->x);
            				}
HXDLIN( 428)				bool _hx_tmp4;
HXDLIN( 428)				if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 428)					_hx_tmp4 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 428)					_hx_tmp4 = false;
            				}
HXDLIN( 428)				if (_hx_tmp4) {
HXLINE( 428)					_this->listen_y(_this->y);
            				}
HXDLIN( 428)				bool _hx_tmp5;
HXDLIN( 428)				if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 428)					_hx_tmp5 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 428)					_hx_tmp5 = false;
            				}
HXDLIN( 428)				if (_hx_tmp5) {
HXLINE( 428)					_this->listen_z(_this->z);
            				}
            			}
HXLINE( 430)			{
HXLINE( 430)				 ::phoenix::Vector _this1 = this->_final_vert_position;
HXDLIN( 430)				 ::phoenix::Transform _this2 = this->transform;
HXDLIN( 430)				if (!(_this2->_destroying)) {
HXLINE( 430)					bool _hx_tmp6;
HXDLIN( 430)					if (hx::IsNotNull( _this2->parent )) {
HXLINE( 430)						_hx_tmp6 = _this2->parent->dirty;
            					}
            					else {
HXLINE( 430)						_hx_tmp6 = false;
            					}
HXDLIN( 430)					if (_hx_tmp6) {
HXLINE( 430)						_this2->parent->clean_check();
            					}
HXDLIN( 430)					bool _hx_tmp7;
HXDLIN( 430)					bool _hx_tmp8;
HXDLIN( 430)					if (_this2->dirty) {
HXLINE( 430)						_hx_tmp8 = !(_this2->_cleaning);
            					}
            					else {
HXLINE( 430)						_hx_tmp8 = false;
            					}
HXDLIN( 430)					if (_hx_tmp8) {
HXLINE( 430)						_hx_tmp7 = !(_this2->manual_update);
            					}
            					else {
HXLINE( 430)						_hx_tmp7 = false;
            					}
HXDLIN( 430)					if (_hx_tmp7) {
HXLINE( 430)						_this2->clean();
            					}
            				}
HXDLIN( 430)				Float _x1 = _this1->x;
HXDLIN( 430)				Float _y1 = _this1->y;
HXDLIN( 430)				Float _z1 = _this1->z;
HXDLIN( 430)				::Array< Float > e = _this2->world->matrix->elements;
HXDLIN( 430)				{
HXLINE( 430)					Float _x2 = ((((e->__get((int)0) * _x1) + (e->__get((int)4) * _y1)) + (e->__get((int)8) * _z1)) + e->__get((int)12));
HXDLIN( 430)					Float _y2 = ((((e->__get((int)1) * _x1) + (e->__get((int)5) * _y1)) + (e->__get((int)9) * _z1)) + e->__get((int)13));
HXDLIN( 430)					Float _z2 = ((((e->__get((int)2) * _x1) + (e->__get((int)6) * _y1)) + (e->__get((int)10) * _z1)) + e->__get((int)14));
HXDLIN( 430)					bool prev1 = _this1->ignore_listeners;
HXDLIN( 430)					_this1->ignore_listeners = true;
HXDLIN( 430)					{
HXLINE( 430)						_this1->x = _x2;
HXDLIN( 430)						if (!(_this1->_construct)) {
HXLINE( 430)							bool _hx_tmp9;
HXDLIN( 430)							if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 430)								_hx_tmp9 = !(_this1->ignore_listeners);
            							}
            							else {
HXLINE( 430)								_hx_tmp9 = false;
            							}
HXDLIN( 430)							if (_hx_tmp9) {
HXLINE( 430)								_this1->listen_x(_x2);
            							}
            						}
            					}
HXDLIN( 430)					{
HXLINE( 430)						_this1->y = _y2;
HXDLIN( 430)						if (!(_this1->_construct)) {
HXLINE( 430)							bool _hx_tmp10;
HXDLIN( 430)							if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 430)								_hx_tmp10 = !(_this1->ignore_listeners);
            							}
            							else {
HXLINE( 430)								_hx_tmp10 = false;
            							}
HXDLIN( 430)							if (_hx_tmp10) {
HXLINE( 430)								_this1->listen_y(_y2);
            							}
            						}
            					}
HXDLIN( 430)					{
HXLINE( 430)						_this1->z = _z2;
HXDLIN( 430)						if (!(_this1->_construct)) {
HXLINE( 430)							bool _hx_tmp11;
HXDLIN( 430)							if (hx::IsNotNull( _this1->listen_z )) {
HXLINE( 430)								_hx_tmp11 = !(_this1->ignore_listeners);
            							}
            							else {
HXLINE( 430)								_hx_tmp11 = false;
            							}
HXDLIN( 430)							if (_hx_tmp11) {
HXLINE( 430)								_this1->listen_z(_z2);
            							}
            						}
            					}
HXDLIN( 430)					_this1->ignore_listeners = prev1;
HXDLIN( 430)					bool _hx_tmp12;
HXDLIN( 430)					if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 430)						_hx_tmp12 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 430)						_hx_tmp12 = false;
            					}
HXDLIN( 430)					if (_hx_tmp12) {
HXLINE( 430)						_this1->listen_x(_this1->x);
            					}
HXDLIN( 430)					bool _hx_tmp13;
HXDLIN( 430)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 430)						_hx_tmp13 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 430)						_hx_tmp13 = false;
            					}
HXDLIN( 430)					if (_hx_tmp13) {
HXLINE( 430)						_this1->listen_y(_this1->y);
            					}
HXDLIN( 430)					bool _hx_tmp14;
HXDLIN( 430)					if (hx::IsNotNull( _this1->listen_z )) {
HXLINE( 430)						_hx_tmp14 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 430)						_hx_tmp14 = false;
            					}
HXDLIN( 430)					if (_hx_tmp14) {
HXLINE( 430)						_this1->listen_z(_this1->z);
            					}
            				}
            			}
HXLINE( 433)			vertlist->push(this->_final_vert_position->x);
HXLINE( 434)			vertlist->push(this->_final_vert_position->y);
HXLINE( 435)			vertlist->push(this->_final_vert_position->z);
HXLINE( 436)			vertlist->push(this->_final_vert_position->w);
HXLINE( 439)			tcoordlist->push(v->uv->uv0->u);
HXLINE( 440)			tcoordlist->push(v->uv->uv0->v);
HXLINE( 441)			tcoordlist->push(v->uv->uv0->w);
HXLINE( 442)			tcoordlist->push(v->uv->uv0->t);
HXLINE( 445)			colorlist->push(v->color->r);
HXLINE( 446)			colorlist->push(v->color->g);
HXLINE( 447)			colorlist->push(v->color->b);
HXLINE( 448)			colorlist->push(v->color->a);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Geometry_obj,batch_into_arrays,(void))

void Geometry_obj::destroy_vbos(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_463_destroy_vbos)
HXLINE( 464)		if (hx::IsNull( this->vb_pos )) {
HXLINE( 464)			return;
            		}
HXLINE( 465)		{
HXLINE( 465)			 ::opengl::GLObject buffer = this->vb_pos;
HXDLIN( 465)			int _hx_tmp;
HXDLIN( 465)			if (hx::IsNull( buffer )) {
HXLINE( 465)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 465)				_hx_tmp = buffer->id;
            			}
HXDLIN( 465)			linc::opengl::webgl::deleteBuffer(_hx_tmp);
            		}
HXLINE( 466)		{
HXLINE( 466)			 ::opengl::GLObject buffer1 = this->vb_tcoords;
HXDLIN( 466)			int _hx_tmp1;
HXDLIN( 466)			if (hx::IsNull( buffer1 )) {
HXLINE( 466)				_hx_tmp1 = (int)0;
            			}
            			else {
HXLINE( 466)				_hx_tmp1 = buffer1->id;
            			}
HXDLIN( 466)			linc::opengl::webgl::deleteBuffer(_hx_tmp1);
            		}
HXLINE( 467)		{
HXLINE( 467)			 ::opengl::GLObject buffer2 = this->vb_colors;
HXDLIN( 467)			int _hx_tmp2;
HXDLIN( 467)			if (hx::IsNull( buffer2 )) {
HXLINE( 467)				_hx_tmp2 = (int)0;
            			}
            			else {
HXLINE( 467)				_hx_tmp2 = buffer2->id;
            			}
HXDLIN( 467)			linc::opengl::webgl::deleteBuffer(_hx_tmp2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,destroy_vbos,(void))

void Geometry_obj::create_vbos(){
            	HX_GC_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_474_create_vbos)
HXLINE( 475)		if (hx::IsNotNull( this->vb_pos )) {
HXLINE( 475)			return;
            		}
HXLINE( 476)		int _id = linc::opengl::webgl::createBuffer();
HXDLIN( 476)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id);
HXDLIN( 476)		this->vb_pos = this1;
HXLINE( 477)		int _id1 = linc::opengl::webgl::createBuffer();
HXDLIN( 477)		 ::opengl::GLObject this2 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id1);
HXDLIN( 477)		this->vb_tcoords = this2;
HXLINE( 478)		int _id2 = linc::opengl::webgl::createBuffer();
HXDLIN( 478)		 ::opengl::GLObject this3 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id2);
HXDLIN( 478)		this->vb_colors = this3;
HXLINE( 482)		this->set_dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,create_vbos,(void))

void Geometry_obj::bind(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_486_bind)
HXLINE( 487)		{
HXLINE( 487)			{
HXLINE( 487)				 ::opengl::GLObject buffer = this->vb_pos;
HXDLIN( 487)				int _hx_tmp;
HXDLIN( 487)				if (hx::IsNull( buffer )) {
HXLINE( 487)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE( 487)					_hx_tmp = buffer->id;
            				}
HXDLIN( 487)				glBindBuffer((int)34962,_hx_tmp);
            			}
HXDLIN( 487)			glVertexAttribPointer((int)0, (int)4, (int)5126, false, (int)0, (void *)(intptr_t)(int)0);
            		}
HXLINE( 488)		{
HXLINE( 488)			{
HXLINE( 488)				 ::opengl::GLObject buffer1 = this->vb_tcoords;
HXDLIN( 488)				int _hx_tmp1;
HXDLIN( 488)				if (hx::IsNull( buffer1 )) {
HXLINE( 488)					_hx_tmp1 = (int)0;
            				}
            				else {
HXLINE( 488)					_hx_tmp1 = buffer1->id;
            				}
HXDLIN( 488)				glBindBuffer((int)34962,_hx_tmp1);
            			}
HXDLIN( 488)			glVertexAttribPointer((int)1, (int)4, (int)5126, false, (int)0, (void *)(intptr_t)(int)0);
            		}
HXLINE( 489)		{
HXLINE( 489)			{
HXLINE( 489)				 ::opengl::GLObject buffer2 = this->vb_colors;
HXDLIN( 489)				int _hx_tmp2;
HXDLIN( 489)				if (hx::IsNull( buffer2 )) {
HXLINE( 489)					_hx_tmp2 = (int)0;
            				}
            				else {
HXLINE( 489)					_hx_tmp2 = buffer2->id;
            				}
HXDLIN( 489)				glBindBuffer((int)34962,_hx_tmp2);
            			}
HXDLIN( 489)			glVertexAttribPointer((int)2, (int)4, (int)5126, false, (int)0, (void *)(intptr_t)(int)0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,bind,(void))

void Geometry_obj::bind_pos(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_497_bind_pos)
HXLINE( 498)		{
HXLINE( 498)			 ::opengl::GLObject buffer = this->vb_pos;
HXDLIN( 498)			int _hx_tmp;
HXDLIN( 498)			if (hx::IsNull( buffer )) {
HXLINE( 498)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 498)				_hx_tmp = buffer->id;
            			}
HXDLIN( 498)			glBindBuffer((int)34962,_hx_tmp);
            		}
HXLINE( 499)		glVertexAttribPointer((int)0, (int)4, (int)5126, false, (int)0, (void *)(intptr_t)(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,bind_pos,(void))

void Geometry_obj::bind_tcoords(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_503_bind_tcoords)
HXLINE( 504)		{
HXLINE( 504)			 ::opengl::GLObject buffer = this->vb_tcoords;
HXDLIN( 504)			int _hx_tmp;
HXDLIN( 504)			if (hx::IsNull( buffer )) {
HXLINE( 504)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 504)				_hx_tmp = buffer->id;
            			}
HXDLIN( 504)			glBindBuffer((int)34962,_hx_tmp);
            		}
HXLINE( 505)		glVertexAttribPointer((int)1, (int)4, (int)5126, false, (int)0, (void *)(intptr_t)(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,bind_tcoords,(void))

void Geometry_obj::bind_colors(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_509_bind_colors)
HXLINE( 510)		{
HXLINE( 510)			 ::opengl::GLObject buffer = this->vb_colors;
HXDLIN( 510)			int _hx_tmp;
HXDLIN( 510)			if (hx::IsNull( buffer )) {
HXLINE( 510)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 510)				_hx_tmp = buffer->id;
            			}
HXDLIN( 510)			glBindBuffer((int)34962,_hx_tmp);
            		}
HXLINE( 511)		glVertexAttribPointer((int)2, (int)4, (int)5126, false, (int)0, (void *)(intptr_t)(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,bind_colors,(void))

void Geometry_obj::unbind(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_524_unbind)
HXDLIN( 524)		int _hx_tmp;
HXDLIN( 524)		if (hx::IsNull( ( ( ::opengl::GLObject)(null()) ) )) {
HXDLIN( 524)			_hx_tmp = (int)0;
            		}
            		else {
HXDLIN( 524)			_hx_tmp = ( ( ::opengl::GLObject)(null()) )->id;
            		}
HXDLIN( 524)		glBindBuffer((int)34962,_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,unbind,(void))

void Geometry_obj::bind_and_upload(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_528_bind_and_upload)
HXLINE( 530)		{
HXLINE( 530)			{
HXLINE( 530)				 ::opengl::GLObject buffer = this->vb_pos;
HXDLIN( 530)				int _hx_tmp;
HXDLIN( 530)				if (hx::IsNull( buffer )) {
HXLINE( 530)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE( 530)					_hx_tmp = buffer->id;
            				}
HXDLIN( 530)				glBindBuffer((int)34962,_hx_tmp);
            			}
HXDLIN( 530)			glVertexAttribPointer((int)0, (int)4, (int)5126, false, (int)0, (void *)(intptr_t)(int)0);
            		}
HXLINE( 531)		{
HXLINE( 531)			 ::snow::api::buffers::ArrayBufferView data = this->buffer_pos;
HXDLIN( 531)			int usage = this->buffer_type;
HXDLIN( 531)			glBufferData((int)34962, data->byteLength, (GLvoid*)(&data->buffer[0] + data->byteOffset), usage);
            		}
HXLINE( 533)		{
HXLINE( 533)			{
HXLINE( 533)				 ::opengl::GLObject buffer1 = this->vb_tcoords;
HXDLIN( 533)				int _hx_tmp1;
HXDLIN( 533)				if (hx::IsNull( buffer1 )) {
HXLINE( 533)					_hx_tmp1 = (int)0;
            				}
            				else {
HXLINE( 533)					_hx_tmp1 = buffer1->id;
            				}
HXDLIN( 533)				glBindBuffer((int)34962,_hx_tmp1);
            			}
HXDLIN( 533)			glVertexAttribPointer((int)1, (int)4, (int)5126, false, (int)0, (void *)(intptr_t)(int)0);
            		}
HXLINE( 534)		{
HXLINE( 534)			 ::snow::api::buffers::ArrayBufferView data1 = this->buffer_tcoords;
HXDLIN( 534)			int usage1 = this->buffer_type;
HXDLIN( 534)			glBufferData((int)34962, data1->byteLength, (GLvoid*)(&data1->buffer[0] + data1->byteOffset), usage1);
            		}
HXLINE( 536)		{
HXLINE( 536)			{
HXLINE( 536)				 ::opengl::GLObject buffer2 = this->vb_colors;
HXDLIN( 536)				int _hx_tmp2;
HXDLIN( 536)				if (hx::IsNull( buffer2 )) {
HXLINE( 536)					_hx_tmp2 = (int)0;
            				}
            				else {
HXLINE( 536)					_hx_tmp2 = buffer2->id;
            				}
HXDLIN( 536)				glBindBuffer((int)34962,_hx_tmp2);
            			}
HXDLIN( 536)			glVertexAttribPointer((int)2, (int)4, (int)5126, false, (int)0, (void *)(intptr_t)(int)0);
            		}
HXLINE( 537)		{
HXLINE( 537)			 ::snow::api::buffers::ArrayBufferView data2 = this->buffer_colors;
HXDLIN( 537)			int usage2 = this->buffer_type;
HXDLIN( 537)			glBufferData((int)34962, data2->byteLength, (GLvoid*)(&data2->buffer[0] + data2->byteOffset), usage2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,bind_and_upload,(void))

bool Geometry_obj::update_buffers(){
            	HX_GC_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_547_update_buffers)
HXLINE( 549)		bool _hx_tmp;
HXDLIN( 549)		if (!(this->dirty)) {
HXLINE( 549)			_hx_tmp = this->dirty_based;
            		}
            		else {
HXLINE( 549)			_hx_tmp = false;
            		}
HXDLIN( 549)		if (_hx_tmp) {
HXLINE( 549)			return false;
            		}
HXLINE( 551)		int _verts = this->vertices->length;
HXLINE( 554)		bool _hx_tmp1;
HXDLIN( 554)		if ((_verts == this->_prev_count)) {
HXLINE( 554)			_hx_tmp1 = hx::IsNull( this->buffer_pos );
            		}
            		else {
HXLINE( 554)			_hx_tmp1 = true;
            		}
HXDLIN( 554)		if (_hx_tmp1) {
HXLINE( 555)			int _length = (this->vertices->length * (int)4);
HXLINE( 556)			this->buffer_pos = null();
HXLINE( 557)			this->buffer_normals = null();
HXLINE( 558)			this->buffer_colors = null();
HXLINE( 559)			this->buffer_tcoords = null();
HXLINE( 560)			 ::snow::api::buffers::ArrayBufferView this1;
HXDLIN( 560)			int _elements = _length;
HXDLIN( 560)			if ((_elements < (int)0)) {
HXLINE( 560)				_elements = (int)0;
            			}
HXDLIN( 560)			 ::snow::api::buffers::ArrayBufferView _view =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,(int)8);
HXDLIN( 560)			int _bytelen = (_elements * _view->bytesPerElement);
HXDLIN( 560)			_view->byteOffset = (int)0;
HXDLIN( 560)			_view->byteLength = _bytelen;
HXDLIN( 560)			::Array< unsigned char > this2 = ::Array_obj< unsigned char >::__new();
HXDLIN( 560)			if ((_bytelen > (int)0)) {
HXLINE( 560)				this2[(_bytelen - (int)1)] = (int)0;
            			}
HXDLIN( 560)			_view->buffer = this2;
HXDLIN( 560)			_view->length = _elements;
HXDLIN( 560)			this1 = _view;
HXDLIN( 560)			this->buffer_pos = this1;
HXLINE( 561)			 ::snow::api::buffers::ArrayBufferView this3;
HXDLIN( 561)			int _elements1 = _length;
HXDLIN( 561)			if ((_elements1 < (int)0)) {
HXLINE( 561)				_elements1 = (int)0;
            			}
HXDLIN( 561)			 ::snow::api::buffers::ArrayBufferView _view1 =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,(int)8);
HXDLIN( 561)			int _bytelen1 = (_elements1 * _view1->bytesPerElement);
HXDLIN( 561)			_view1->byteOffset = (int)0;
HXDLIN( 561)			_view1->byteLength = _bytelen1;
HXDLIN( 561)			::Array< unsigned char > this4 = ::Array_obj< unsigned char >::__new();
HXDLIN( 561)			if ((_bytelen1 > (int)0)) {
HXLINE( 561)				this4[(_bytelen1 - (int)1)] = (int)0;
            			}
HXDLIN( 561)			_view1->buffer = this4;
HXDLIN( 561)			_view1->length = _elements1;
HXDLIN( 561)			this3 = _view1;
HXDLIN( 561)			this->buffer_tcoords = this3;
HXLINE( 562)			 ::snow::api::buffers::ArrayBufferView this5;
HXDLIN( 562)			int _elements2 = _length;
HXDLIN( 562)			if ((_elements2 < (int)0)) {
HXLINE( 562)				_elements2 = (int)0;
            			}
HXDLIN( 562)			 ::snow::api::buffers::ArrayBufferView _view2 =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,(int)8);
HXDLIN( 562)			int _bytelen2 = (_elements2 * _view2->bytesPerElement);
HXDLIN( 562)			_view2->byteOffset = (int)0;
HXDLIN( 562)			_view2->byteLength = _bytelen2;
HXDLIN( 562)			::Array< unsigned char > this6 = ::Array_obj< unsigned char >::__new();
HXDLIN( 562)			if ((_bytelen2 > (int)0)) {
HXLINE( 562)				this6[(_bytelen2 - (int)1)] = (int)0;
            			}
HXDLIN( 562)			_view2->buffer = this6;
HXDLIN( 562)			_view2->length = _elements2;
HXDLIN( 562)			this5 = _view2;
HXDLIN( 562)			this->buffer_colors = this5;
            		}
HXLINE( 568)		if (this->object_space) {
HXLINE( 569)			int vert_index = (int)0;
HXDLIN( 569)			int tcoord_index = (int)0;
HXDLIN( 569)			int color_index = (int)0;
HXDLIN( 569)			int normal_index = (int)0;
HXDLIN( 569)			 ::snow::api::buffers::ArrayBufferView vertlist = this->buffer_pos;
HXDLIN( 569)			 ::snow::api::buffers::ArrayBufferView tcoordlist = this->buffer_tcoords;
HXDLIN( 569)			 ::snow::api::buffers::ArrayBufferView colorlist = this->buffer_colors;
HXDLIN( 569)			 ::snow::api::buffers::ArrayBufferView normallist = this->buffer_normals;
HXDLIN( 569)			{
HXLINE( 569)				int _g = (int)0;
HXDLIN( 569)				::Array< ::Dynamic> _g1 = this->vertices;
HXDLIN( 569)				while((_g < _g1->length)){
HXLINE( 569)					 ::phoenix::geometry::Vertex v = _g1->__get(_g).StaticCast<  ::phoenix::geometry::Vertex >();
HXDLIN( 569)					_g = (_g + (int)1);
HXDLIN( 569)					 ::phoenix::Vector _vpos = v->pos;
HXDLIN( 569)					 ::phoenix::geometry::TextureCoord _vuv = v->uv->uv0;
HXDLIN( 569)					 ::phoenix::Color _vcol = v->color;
HXDLIN( 569)					{
HXLINE( 569)						int vertlist1 = vertlist->byteOffset;
HXDLIN( 569)						::__hxcpp_memory_set_float(vertlist->buffer,(vertlist1 + (vert_index * (int)4)),_vpos->x);
            					}
HXDLIN( 569)					{
HXLINE( 569)						int vertlist2 = vertlist->byteOffset;
HXDLIN( 569)						::__hxcpp_memory_set_float(vertlist->buffer,(vertlist2 + ((vert_index + (int)1) * (int)4)),_vpos->y);
            					}
HXDLIN( 569)					{
HXLINE( 569)						int vertlist3 = vertlist->byteOffset;
HXDLIN( 569)						::__hxcpp_memory_set_float(vertlist->buffer,(vertlist3 + ((vert_index + (int)2) * (int)4)),_vpos->z);
            					}
HXDLIN( 569)					{
HXLINE( 569)						int vertlist4 = vertlist->byteOffset;
HXDLIN( 569)						::__hxcpp_memory_set_float(vertlist->buffer,(vertlist4 + ((vert_index + (int)3) * (int)4)),_vpos->w);
            					}
HXDLIN( 569)					vert_index = (vert_index + (int)4);
HXDLIN( 569)					{
HXLINE( 569)						int tcoordlist1 = tcoordlist->byteOffset;
HXDLIN( 569)						::__hxcpp_memory_set_float(tcoordlist->buffer,(tcoordlist1 + (tcoord_index * (int)4)),_vuv->u);
            					}
HXDLIN( 569)					{
HXLINE( 569)						int tcoordlist2 = tcoordlist->byteOffset;
HXDLIN( 569)						::__hxcpp_memory_set_float(tcoordlist->buffer,(tcoordlist2 + ((tcoord_index + (int)1) * (int)4)),_vuv->v);
            					}
HXDLIN( 569)					{
HXLINE( 569)						int tcoordlist3 = tcoordlist->byteOffset;
HXDLIN( 569)						::__hxcpp_memory_set_float(tcoordlist->buffer,(tcoordlist3 + ((tcoord_index + (int)2) * (int)4)),_vuv->w);
            					}
HXDLIN( 569)					{
HXLINE( 569)						int tcoordlist4 = tcoordlist->byteOffset;
HXDLIN( 569)						::__hxcpp_memory_set_float(tcoordlist->buffer,(tcoordlist4 + ((tcoord_index + (int)3) * (int)4)),_vuv->t);
            					}
HXDLIN( 569)					tcoord_index = (tcoord_index + (int)4);
HXDLIN( 569)					{
HXLINE( 569)						int colorlist1 = colorlist->byteOffset;
HXDLIN( 569)						::__hxcpp_memory_set_float(colorlist->buffer,(colorlist1 + (color_index * (int)4)),_vcol->r);
            					}
HXDLIN( 569)					{
HXLINE( 569)						int colorlist2 = colorlist->byteOffset;
HXDLIN( 569)						::__hxcpp_memory_set_float(colorlist->buffer,(colorlist2 + ((color_index + (int)1) * (int)4)),_vcol->g);
            					}
HXDLIN( 569)					{
HXLINE( 569)						int colorlist3 = colorlist->byteOffset;
HXDLIN( 569)						::__hxcpp_memory_set_float(colorlist->buffer,(colorlist3 + ((color_index + (int)2) * (int)4)),_vcol->b);
            					}
HXDLIN( 569)					{
HXLINE( 569)						int colorlist4 = colorlist->byteOffset;
HXDLIN( 569)						::__hxcpp_memory_set_float(colorlist->buffer,(colorlist4 + ((color_index + (int)3) * (int)4)),_vcol->a);
            					}
HXDLIN( 569)					color_index = (color_index + (int)4);
HXDLIN( 569)					normal_index = (normal_index + (int)4);
            				}
            			}
            		}
            		else {
HXLINE( 571)			int vert_index1 = (int)0;
HXDLIN( 571)			int tcoord_index1 = (int)0;
HXDLIN( 571)			int color_index1 = (int)0;
HXDLIN( 571)			int normal_index1 = (int)0;
HXDLIN( 571)			 ::snow::api::buffers::ArrayBufferView vertlist5 = this->buffer_pos;
HXDLIN( 571)			 ::snow::api::buffers::ArrayBufferView tcoordlist5 = this->buffer_tcoords;
HXDLIN( 571)			 ::snow::api::buffers::ArrayBufferView colorlist5 = this->buffer_colors;
HXDLIN( 571)			 ::snow::api::buffers::ArrayBufferView normallist1 = this->buffer_normals;
HXDLIN( 571)			 ::phoenix::Transform _this = this->transform;
HXDLIN( 571)			if (!(_this->_destroying)) {
HXLINE( 571)				bool _hx_tmp2;
HXDLIN( 571)				if (hx::IsNotNull( _this->parent )) {
HXLINE( 571)					_hx_tmp2 = _this->parent->dirty;
            				}
            				else {
HXLINE( 571)					_hx_tmp2 = false;
            				}
HXDLIN( 571)				if (_hx_tmp2) {
HXLINE( 571)					_this->parent->clean_check();
            				}
HXDLIN( 571)				bool _hx_tmp3;
HXDLIN( 571)				bool _hx_tmp4;
HXDLIN( 571)				if (_this->dirty) {
HXLINE( 571)					_hx_tmp4 = !(_this->_cleaning);
            				}
            				else {
HXLINE( 571)					_hx_tmp4 = false;
            				}
HXDLIN( 571)				if (_hx_tmp4) {
HXLINE( 571)					_hx_tmp3 = !(_this->manual_update);
            				}
            				else {
HXLINE( 571)					_hx_tmp3 = false;
            				}
HXDLIN( 571)				if (_hx_tmp3) {
HXLINE( 571)					_this->clean();
            				}
            			}
HXDLIN( 571)			 ::phoenix::Matrix _mat = _this->world->matrix;
HXDLIN( 571)			::Array< Float > _el = _mat->elements;
HXDLIN( 571)			int _count = this->vertices->length;
HXDLIN( 571)			int _idx = (int)0;
HXDLIN( 571)			while((_idx < _count)){
HXLINE( 571)				 ::phoenix::geometry::Vertex v1 = this->vertices->__get(_idx).StaticCast<  ::phoenix::geometry::Vertex >();
HXDLIN( 571)				Float _vx = v1->pos->x;
HXDLIN( 571)				Float _vy = v1->pos->y;
HXDLIN( 571)				Float _vz = v1->pos->z;
HXDLIN( 571)				Float _tvx = (( (Float)(_hx_array_unsafe_get(_el,(int)0)) ) * _vx);
HXDLIN( 571)				Float _tvx1 = (_tvx + (( (Float)(_hx_array_unsafe_get(_el,(int)4)) ) * _vy));
HXDLIN( 571)				Float _tvx2 = (_tvx1 + (( (Float)(_hx_array_unsafe_get(_el,(int)8)) ) * _vz));
HXDLIN( 571)				Float _tvx3 = (_tvx2 + ( (Float)(_hx_array_unsafe_get(_el,(int)12)) ));
HXDLIN( 571)				Float _tvy = (( (Float)(_hx_array_unsafe_get(_el,(int)1)) ) * _vx);
HXDLIN( 571)				Float _tvy1 = (_tvy + (( (Float)(_hx_array_unsafe_get(_el,(int)5)) ) * _vy));
HXDLIN( 571)				Float _tvy2 = (_tvy1 + (( (Float)(_hx_array_unsafe_get(_el,(int)9)) ) * _vz));
HXDLIN( 571)				Float _tvy3 = (_tvy2 + ( (Float)(_hx_array_unsafe_get(_el,(int)13)) ));
HXDLIN( 571)				Float _tvz = (( (Float)(_hx_array_unsafe_get(_el,(int)2)) ) * _vx);
HXDLIN( 571)				Float _tvz1 = (_tvz + (( (Float)(_hx_array_unsafe_get(_el,(int)6)) ) * _vy));
HXDLIN( 571)				Float _tvz2 = (_tvz1 + (( (Float)(_hx_array_unsafe_get(_el,(int)10)) ) * _vz));
HXDLIN( 571)				Float _tvz3 = (_tvz2 + ( (Float)(_hx_array_unsafe_get(_el,(int)14)) ));
HXDLIN( 571)				{
HXLINE( 571)					int vertlist6 = vertlist5->byteOffset;
HXDLIN( 571)					::__hxcpp_memory_set_float(vertlist5->buffer,(vertlist6 + (vert_index1 * (int)4)),_tvx3);
            				}
HXDLIN( 571)				{
HXLINE( 571)					int vertlist7 = vertlist5->byteOffset;
HXDLIN( 571)					::__hxcpp_memory_set_float(vertlist5->buffer,(vertlist7 + ((vert_index1 + (int)1) * (int)4)),_tvy3);
            				}
HXDLIN( 571)				{
HXLINE( 571)					int vertlist8 = vertlist5->byteOffset;
HXDLIN( 571)					::__hxcpp_memory_set_float(vertlist5->buffer,(vertlist8 + ((vert_index1 + (int)2) * (int)4)),_tvz3);
            				}
HXDLIN( 571)				{
HXLINE( 571)					int vertlist9 = vertlist5->byteOffset;
HXDLIN( 571)					::__hxcpp_memory_set_float(vertlist5->buffer,(vertlist9 + ((vert_index1 + (int)3) * (int)4)),v1->pos->w);
            				}
HXDLIN( 571)				vert_index1 = (vert_index1 + (int)4);
HXDLIN( 571)				 ::phoenix::geometry::TextureCoord _vuv1 = v1->uv->uv0;
HXDLIN( 571)				{
HXLINE( 571)					int tcoordlist6 = tcoordlist5->byteOffset;
HXDLIN( 571)					::__hxcpp_memory_set_float(tcoordlist5->buffer,(tcoordlist6 + (tcoord_index1 * (int)4)),_vuv1->u);
            				}
HXDLIN( 571)				{
HXLINE( 571)					int tcoordlist7 = tcoordlist5->byteOffset;
HXDLIN( 571)					::__hxcpp_memory_set_float(tcoordlist5->buffer,(tcoordlist7 + ((tcoord_index1 + (int)1) * (int)4)),_vuv1->v);
            				}
HXDLIN( 571)				{
HXLINE( 571)					int tcoordlist8 = tcoordlist5->byteOffset;
HXDLIN( 571)					::__hxcpp_memory_set_float(tcoordlist5->buffer,(tcoordlist8 + ((tcoord_index1 + (int)2) * (int)4)),_vuv1->w);
            				}
HXDLIN( 571)				{
HXLINE( 571)					int tcoordlist9 = tcoordlist5->byteOffset;
HXDLIN( 571)					::__hxcpp_memory_set_float(tcoordlist5->buffer,(tcoordlist9 + ((tcoord_index1 + (int)3) * (int)4)),_vuv1->t);
            				}
HXDLIN( 571)				tcoord_index1 = (tcoord_index1 + (int)4);
HXDLIN( 571)				{
HXLINE( 571)					int colorlist6 = colorlist5->byteOffset;
HXDLIN( 571)					::__hxcpp_memory_set_float(colorlist5->buffer,(colorlist6 + (color_index1 * (int)4)),v1->color->r);
            				}
HXDLIN( 571)				{
HXLINE( 571)					int colorlist7 = colorlist5->byteOffset;
HXDLIN( 571)					::__hxcpp_memory_set_float(colorlist5->buffer,(colorlist7 + ((color_index1 + (int)1) * (int)4)),v1->color->g);
            				}
HXDLIN( 571)				{
HXLINE( 571)					int colorlist8 = colorlist5->byteOffset;
HXDLIN( 571)					::__hxcpp_memory_set_float(colorlist5->buffer,(colorlist8 + ((color_index1 + (int)2) * (int)4)),v1->color->b);
            				}
HXDLIN( 571)				{
HXLINE( 571)					int colorlist9 = colorlist5->byteOffset;
HXDLIN( 571)					::__hxcpp_memory_set_float(colorlist5->buffer,(colorlist9 + ((color_index1 + (int)3) * (int)4)),v1->color->a);
            				}
HXDLIN( 571)				color_index1 = (color_index1 + (int)4);
HXDLIN( 571)				normal_index1 = (normal_index1 + (int)4);
HXDLIN( 571)				_idx = (_idx + (int)1);
            			}
            		}
HXLINE( 574)		this->set_dirty(false);
HXLINE( 576)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,update_buffers,return )

void Geometry_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_585_draw)
HXDLIN( 585)		int mode = this->state->primitive_type;
HXDLIN( 585)		glDrawArrays(mode,(int)0,::Std_obj::_hx_int(((Float)this->buffer_pos->length / (Float)(int)4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,draw,(void))

void Geometry_obj::translate( ::phoenix::Vector _offset){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_592_translate)
HXDLIN( 592)		 ::phoenix::Vector _this = this->transform->local->pos;
HXDLIN( 592)		Float _x = (this->transform->local->pos->x + _offset->x);
HXDLIN( 592)		Float _y = (this->transform->local->pos->y + _offset->y);
HXDLIN( 592)		Float _z = (this->transform->local->pos->x + _offset->z);
HXDLIN( 592)		bool prev = _this->ignore_listeners;
HXDLIN( 592)		_this->ignore_listeners = true;
HXDLIN( 592)		{
HXDLIN( 592)			_this->x = _x;
HXDLIN( 592)			if (!(_this->_construct)) {
HXDLIN( 592)				bool _hx_tmp;
HXDLIN( 592)				if (hx::IsNotNull( _this->listen_x )) {
HXDLIN( 592)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXDLIN( 592)					_hx_tmp = false;
            				}
HXDLIN( 592)				if (_hx_tmp) {
HXDLIN( 592)					_this->listen_x(_x);
            				}
            			}
            		}
HXDLIN( 592)		{
HXDLIN( 592)			_this->y = _y;
HXDLIN( 592)			if (!(_this->_construct)) {
HXDLIN( 592)				bool _hx_tmp1;
HXDLIN( 592)				if (hx::IsNotNull( _this->listen_y )) {
HXDLIN( 592)					_hx_tmp1 = !(_this->ignore_listeners);
            				}
            				else {
HXDLIN( 592)					_hx_tmp1 = false;
            				}
HXDLIN( 592)				if (_hx_tmp1) {
HXDLIN( 592)					_this->listen_y(_y);
            				}
            			}
            		}
HXDLIN( 592)		{
HXDLIN( 592)			_this->z = _z;
HXDLIN( 592)			if (!(_this->_construct)) {
HXDLIN( 592)				bool _hx_tmp2;
HXDLIN( 592)				if (hx::IsNotNull( _this->listen_z )) {
HXDLIN( 592)					_hx_tmp2 = !(_this->ignore_listeners);
            				}
            				else {
HXDLIN( 592)					_hx_tmp2 = false;
            				}
HXDLIN( 592)				if (_hx_tmp2) {
HXDLIN( 592)					_this->listen_z(_z);
            				}
            			}
            		}
HXDLIN( 592)		_this->ignore_listeners = prev;
HXDLIN( 592)		bool _hx_tmp3;
HXDLIN( 592)		if (hx::IsNotNull( _this->listen_x )) {
HXDLIN( 592)			_hx_tmp3 = !(_this->ignore_listeners);
            		}
            		else {
HXDLIN( 592)			_hx_tmp3 = false;
            		}
HXDLIN( 592)		if (_hx_tmp3) {
HXDLIN( 592)			_this->listen_x(_this->x);
            		}
HXDLIN( 592)		bool _hx_tmp4;
HXDLIN( 592)		if (hx::IsNotNull( _this->listen_y )) {
HXDLIN( 592)			_hx_tmp4 = !(_this->ignore_listeners);
            		}
            		else {
HXDLIN( 592)			_hx_tmp4 = false;
            		}
HXDLIN( 592)		if (_hx_tmp4) {
HXDLIN( 592)			_this->listen_y(_this->y);
            		}
HXDLIN( 592)		bool _hx_tmp5;
HXDLIN( 592)		if (hx::IsNotNull( _this->listen_z )) {
HXDLIN( 592)			_hx_tmp5 = !(_this->ignore_listeners);
            		}
            		else {
HXDLIN( 592)			_hx_tmp5 = false;
            		}
HXDLIN( 592)		if (_hx_tmp5) {
HXDLIN( 592)			_this->listen_z(_this->z);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,translate,(void))

bool Geometry_obj::set_locked(bool _locked){
            	HX_GC_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_596_set_locked)
HXLINE( 598)		int _hx_tmp;
HXDLIN( 598)		if (_locked) {
HXLINE( 598)			_hx_tmp = (int)35044;
            		}
            		else {
HXLINE( 598)			_hx_tmp = (int)35048;
            		}
HXDLIN( 598)		this->buffer_type = _hx_tmp;
HXLINE( 600)		bool _hx_tmp1;
HXDLIN( 600)		if (_locked) {
HXLINE( 600)			_hx_tmp1 = hx::IsNull( this->vb_pos );
            		}
            		else {
HXLINE( 600)			_hx_tmp1 = false;
            		}
HXDLIN( 600)		if (_hx_tmp1) {
HXLINE( 600)			if (hx::IsNull( this->vb_pos )) {
HXLINE( 600)				int _id = linc::opengl::webgl::createBuffer();
HXDLIN( 600)				 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id);
HXDLIN( 600)				this->vb_pos = this1;
HXDLIN( 600)				int _id1 = linc::opengl::webgl::createBuffer();
HXDLIN( 600)				 ::opengl::GLObject this2 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id1);
HXDLIN( 600)				this->vb_tcoords = this2;
HXDLIN( 600)				int _id2 = linc::opengl::webgl::createBuffer();
HXDLIN( 600)				 ::opengl::GLObject this3 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id2);
HXDLIN( 600)				this->vb_colors = this3;
HXDLIN( 600)				this->set_dirty(true);
            			}
            		}
HXLINE( 601)		bool _hx_tmp2;
HXDLIN( 601)		if (!(_locked)) {
HXLINE( 601)			_hx_tmp2 = hx::IsNotNull( this->vb_pos );
            		}
            		else {
HXLINE( 601)			_hx_tmp2 = false;
            		}
HXDLIN( 601)		if (_hx_tmp2) {
HXLINE( 601)			this->destroy_vbos();
            		}
HXLINE( 603)		return (this->locked = _locked);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_locked,return )

bool Geometry_obj::get_locked(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_609_get_locked)
HXDLIN( 609)		return this->locked;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,get_locked,return )

bool Geometry_obj::set_dirty(bool _dirty){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_615_set_dirty)
HXDLIN( 615)		return (this->dirty = _dirty);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_dirty,return )

bool Geometry_obj::get_dirty(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_621_get_dirty)
HXDLIN( 621)		return this->dirty;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,get_dirty,return )

void Geometry_obj::refresh(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_627_refresh)
HXLINE( 630)		{
HXLINE( 630)			int _g = (int)0;
HXDLIN( 630)			::Array< ::Dynamic> _g1 = this->batchers;
HXDLIN( 630)			while((_g < _g1->length)){
HXLINE( 630)				 ::phoenix::Batcher b = _g1->__get(_g).StaticCast<  ::phoenix::Batcher >();
HXDLIN( 630)				_g = (_g + (int)1);
HXLINE( 631)				b->remove(hx::ObjectPtr<OBJ_>(this),false);
            			}
            		}
HXLINE( 635)		if (this->dirty_primitive_type) {
HXLINE( 636)			this->dirty_primitive_type = false;
HXLINE( 637)			{
HXLINE( 637)				 ::phoenix::geometry::GeometryState _this = this->state;
HXDLIN( 637)				_this->dirty = true;
HXDLIN( 637)				_this->primitive_type = this->shadow_primitive_type;
            			}
            		}
HXLINE( 640)		if (this->dirty_texture) {
HXLINE( 641)			this->dirty_texture = false;
HXLINE( 642)			{
HXLINE( 642)				 ::phoenix::geometry::GeometryState _this1 = this->state;
HXDLIN( 642)				_this1->dirty = true;
HXDLIN( 642)				_this1->texture = this->shadow_texture;
            			}
            		}
HXLINE( 645)		if (this->dirty_shader) {
HXLINE( 646)			this->dirty_shader = false;
HXLINE( 647)			{
HXLINE( 647)				 ::phoenix::geometry::GeometryState _this2 = this->state;
HXDLIN( 647)				_this2->dirty = true;
HXDLIN( 647)				_this2->shader = this->shadow_shader;
            			}
            		}
HXLINE( 650)		if (this->dirty_depth) {
HXLINE( 651)			this->dirty_depth = false;
HXLINE( 652)			this->state->depth = this->shadow_depth;
            		}
HXLINE( 655)		if (this->dirty_clip) {
HXLINE( 656)			this->dirty_clip = false;
HXLINE( 657)			{
HXLINE( 657)				 ::phoenix::geometry::GeometryState _this3 = this->state;
HXDLIN( 657)				_this3->dirty = true;
HXDLIN( 657)				_this3->clip = this->shadow_clip;
            			}
            		}
HXLINE( 660)		if (this->dirty_blend) {
HXLINE( 661)			this->dirty_blend = false;
HXLINE( 662)			{
HXLINE( 662)				 ::phoenix::geometry::GeometryState _this4 = this->state;
HXDLIN( 662)				_this4->dirty = true;
HXDLIN( 662)				_this4->blend_disabled = this->shadow_blend_disabled;
            			}
HXLINE( 663)			{
HXLINE( 663)				 ::phoenix::geometry::GeometryState _this5 = this->state;
HXDLIN( 663)				_this5->dirty = true;
HXDLIN( 663)				_this5->blend_src_alpha = this->shadow_blend_src_alpha;
            			}
HXLINE( 664)			{
HXLINE( 664)				 ::phoenix::geometry::GeometryState _this6 = this->state;
HXDLIN( 664)				_this6->dirty = true;
HXDLIN( 664)				_this6->blend_src_rgb = this->shadow_blend_src_rgb;
            			}
HXLINE( 665)			{
HXLINE( 665)				 ::phoenix::geometry::GeometryState _this7 = this->state;
HXDLIN( 665)				_this7->dirty = true;
HXDLIN( 665)				_this7->blend_dest_alpha = this->shadow_blend_dest_alpha;
            			}
HXLINE( 666)			{
HXLINE( 666)				 ::phoenix::geometry::GeometryState _this8 = this->state;
HXDLIN( 666)				_this8->dirty = true;
HXDLIN( 666)				_this8->blend_dest_rgb = this->shadow_blend_dest_rgb;
            			}
            		}
HXLINE( 670)		this->refresh_key();
HXLINE( 672)		{
HXLINE( 672)			int _g2 = (int)0;
HXDLIN( 672)			::Array< ::Dynamic> _g11 = this->batchers;
HXDLIN( 672)			while((_g2 < _g11->length)){
HXLINE( 672)				 ::phoenix::Batcher b1 = _g11->__get(_g2).StaticCast<  ::phoenix::Batcher >();
HXDLIN( 672)				_g2 = (_g2 + (int)1);
HXLINE( 673)				b1->add(hx::ObjectPtr<OBJ_>(this),false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,refresh,(void))

int Geometry_obj::get_primitive_type(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_682_get_primitive_type)
HXDLIN( 682)		return this->state->primitive_type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,get_primitive_type,return )

int Geometry_obj::set_primitive_type(int val){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_686_set_primitive_type)
HXLINE( 688)		if ((this->state->primitive_type != val)) {
HXLINE( 689)			this->shadow_primitive_type = val;
HXLINE( 690)			this->dirty_primitive_type = true;
HXLINE( 691)			this->refresh();
            		}
HXLINE( 694)		return (this->primitive_type = val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_primitive_type,return )

 ::phoenix::Texture Geometry_obj::get_texture(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_702_get_texture)
HXDLIN( 702)		return this->state->texture;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,get_texture,return )

 ::phoenix::Texture Geometry_obj::set_texture( ::phoenix::Texture val){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_706_set_texture)
HXLINE( 708)		if (hx::IsNotEq( this->state->texture,val )) {
HXLINE( 709)			this->shadow_texture = val;
HXLINE( 710)			this->dirty_texture = true;
HXLINE( 711)			this->refresh();
            		}
HXLINE( 714)		return (this->texture = val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_texture,return )

bool Geometry_obj::set_visible(bool val){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_722_set_visible)
HXDLIN( 722)		return (this->visible = val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_visible,return )

 ::phoenix::Color Geometry_obj::set_color( ::phoenix::Color val){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_728_set_color)
HXLINE( 730)		bool _hx_tmp;
HXDLIN( 730)		if (hx::IsNotNull( this->vertices )) {
HXLINE( 730)			_hx_tmp = (this->vertices->length > (int)0);
            		}
            		else {
HXLINE( 730)			_hx_tmp = false;
            		}
HXDLIN( 730)		if (_hx_tmp) {
HXLINE( 731)			int _g = (int)0;
HXDLIN( 731)			::Array< ::Dynamic> _g1 = this->vertices;
HXDLIN( 731)			while((_g < _g1->length)){
HXLINE( 731)				 ::phoenix::geometry::Vertex v = _g1->__get(_g).StaticCast<  ::phoenix::geometry::Vertex >();
HXDLIN( 731)				_g = (_g + (int)1);
HXLINE( 732)				v->color = val;
            			}
            		}
HXLINE( 736)		return (this->color = val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_color,return )

 ::phoenix::Shader Geometry_obj::get_shader(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_744_get_shader)
HXDLIN( 744)		return this->state->shader;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,get_shader,return )

 ::phoenix::Shader Geometry_obj::set_shader( ::phoenix::Shader val){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_748_set_shader)
HXLINE( 750)		if (hx::IsNotEq( this->state->shader,val )) {
HXLINE( 751)			this->shadow_shader = val;
HXLINE( 752)			this->dirty_shader = true;
HXLINE( 753)			this->refresh();
            		}
HXLINE( 756)		return (this->shader = val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_shader,return )

Float Geometry_obj::get_depth(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_764_get_depth)
HXDLIN( 764)		return this->state->depth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,get_depth,return )

Float Geometry_obj::set_depth(Float val){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_769_set_depth)
HXLINE( 771)		if ((this->state->depth != val)) {
HXLINE( 772)			this->shadow_depth = val;
HXLINE( 773)			this->dirty_depth = true;
HXLINE( 774)			this->refresh();
            		}
HXLINE( 777)		return (this->depth = val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_depth,return )

bool Geometry_obj::get_blend_disabled(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_784_get_blend_disabled)
HXDLIN( 784)		return this->state->blend_disabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,get_blend_disabled,return )

int Geometry_obj::get_blend_src_alpha(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_788_get_blend_src_alpha)
HXDLIN( 788)		return this->state->blend_src_alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,get_blend_src_alpha,return )

int Geometry_obj::get_blend_src_rgb(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_792_get_blend_src_rgb)
HXDLIN( 792)		return this->state->blend_src_rgb;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,get_blend_src_rgb,return )

int Geometry_obj::get_blend_dest_alpha(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_796_get_blend_dest_alpha)
HXDLIN( 796)		return this->state->blend_dest_alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,get_blend_dest_alpha,return )

int Geometry_obj::get_blend_dest_rgb(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_800_get_blend_dest_rgb)
HXDLIN( 800)		return this->state->blend_dest_rgb;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,get_blend_dest_rgb,return )

bool Geometry_obj::set_blend_disabled(bool val){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_803_set_blend_disabled)
HXLINE( 804)		this->state->ignore_blend = false;
HXLINE( 805)		if ((this->state->blend_disabled != val)) {
HXLINE( 806)			this->shadow_blend_disabled = val;
HXLINE( 807)			this->dirty_blend = true;
HXLINE( 808)			this->refresh();
            		}
HXLINE( 810)		return (this->blend_disabled = val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_blend_disabled,return )

int Geometry_obj::set_blend_src_alpha(int val){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_813_set_blend_src_alpha)
HXLINE( 814)		this->state->ignore_blend = false;
HXLINE( 815)		if ((this->state->blend_src_alpha != val)) {
HXLINE( 816)			this->shadow_blend_src_alpha = val;
HXLINE( 817)			this->dirty_blend = true;
HXLINE( 818)			this->refresh();
            		}
HXLINE( 820)		return (this->blend_src_alpha = val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_blend_src_alpha,return )

int Geometry_obj::set_blend_src_rgb(int val){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_823_set_blend_src_rgb)
HXLINE( 824)		this->state->ignore_blend = false;
HXLINE( 825)		if ((this->state->blend_src_rgb != val)) {
HXLINE( 826)			this->shadow_blend_src_rgb = val;
HXLINE( 827)			this->dirty_blend = true;
HXLINE( 828)			this->refresh();
            		}
HXLINE( 830)		return (this->blend_src_rgb = val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_blend_src_rgb,return )

int Geometry_obj::set_blend_dest_alpha(int val){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_833_set_blend_dest_alpha)
HXLINE( 834)		this->state->ignore_blend = false;
HXLINE( 835)		if ((this->state->blend_dest_alpha != val)) {
HXLINE( 836)			this->shadow_blend_dest_alpha = val;
HXLINE( 837)			this->dirty_blend = true;
HXLINE( 838)			this->refresh();
            		}
HXLINE( 840)		return (this->blend_dest_alpha = val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_blend_dest_alpha,return )

int Geometry_obj::set_blend_dest_rgb(int val){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_843_set_blend_dest_rgb)
HXLINE( 844)		this->state->ignore_blend = false;
HXLINE( 845)		if ((this->state->blend_dest_rgb != val)) {
HXLINE( 846)			this->shadow_blend_dest_rgb = val;
HXLINE( 847)			this->dirty_blend = true;
HXLINE( 848)			this->refresh();
            		}
HXLINE( 850)		return (this->blend_dest_rgb = val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_blend_dest_rgb,return )

bool Geometry_obj::get_clip(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_860_get_clip)
HXDLIN( 860)		return this->state->clip;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,get_clip,return )

bool Geometry_obj::set_clip(bool val){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_864_set_clip)
HXLINE( 866)		if ((this->state->clip != val)) {
HXLINE( 867)			this->shadow_clip = val;
HXLINE( 868)			this->dirty_clip = true;
HXLINE( 869)			this->refresh();
            		}
HXLINE( 872)		return (this->clip = val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_clip,return )

 ::phoenix::Rectangle Geometry_obj::get_clip_rect(){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_880_get_clip_rect)
HXDLIN( 880)		return this->clip_rect;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,get_clip_rect,return )

 ::phoenix::Rectangle Geometry_obj::set_clip_rect( ::phoenix::Rectangle val){
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_884_set_clip_rect)
HXLINE( 886)		if (hx::IsNull( val )) {
HXLINE( 887)			this->set_clip(false);
            		}
            		else {
HXLINE( 889)			this->set_clip(true);
HXLINE( 890)			{
HXLINE( 890)				 ::phoenix::geometry::GeometryState _this = this->state;
HXDLIN( 890)				_this->dirty = true;
HXDLIN( 890)				_this->clip_x = val->x;
            			}
HXLINE( 891)			{
HXLINE( 891)				 ::phoenix::geometry::GeometryState _this1 = this->state;
HXDLIN( 891)				_this1->dirty = true;
HXDLIN( 891)				_this1->clip_y = val->y;
            			}
HXLINE( 892)			{
HXLINE( 892)				 ::phoenix::geometry::GeometryState _this2 = this->state;
HXDLIN( 892)				_this2->dirty = true;
HXDLIN( 892)				_this2->clip_w = val->w;
            			}
HXLINE( 893)			{
HXLINE( 893)				 ::phoenix::geometry::GeometryState _this3 = this->state;
HXDLIN( 893)				_this3->dirty = true;
HXDLIN( 893)				_this3->clip_h = val->h;
            			}
            		}
HXLINE( 896)		return (this->clip_rect = val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,set_clip_rect,return )

int Geometry_obj::_sequence_key;


hx::ObjectPtr< Geometry_obj > Geometry_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< Geometry_obj > __this = new Geometry_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< Geometry_obj > Geometry_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	Geometry_obj *__this = (Geometry_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Geometry_obj), true, "phoenix.geometry.Geometry"));
	*(void **)__this = Geometry_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

Geometry_obj::Geometry_obj()
{
}

void Geometry_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Geometry);
	HX_MARK_MEMBER_NAME(transform,"transform");
	HX_MARK_MEMBER_NAME(vertices,"vertices");
	HX_MARK_MEMBER_NAME(object_space,"object_space");
	HX_MARK_MEMBER_NAME(buffer_based,"buffer_based");
	HX_MARK_MEMBER_NAME(buffer_type,"buffer_type");
	HX_MARK_MEMBER_NAME(buffer_pos,"buffer_pos");
	HX_MARK_MEMBER_NAME(buffer_tcoords,"buffer_tcoords");
	HX_MARK_MEMBER_NAME(buffer_colors,"buffer_colors");
	HX_MARK_MEMBER_NAME(buffer_normals,"buffer_normals");
	HX_MARK_MEMBER_NAME(vb_pos,"vb_pos");
	HX_MARK_MEMBER_NAME(vb_tcoords,"vb_tcoords");
	HX_MARK_MEMBER_NAME(vb_colors,"vb_colors");
	HX_MARK_MEMBER_NAME(vb_normals,"vb_normals");
	HX_MARK_MEMBER_NAME(uniforms,"uniforms");
	HX_MARK_MEMBER_NAME(added,"added");
	HX_MARK_MEMBER_NAME(batchers,"batchers");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(dropped,"dropped");
	HX_MARK_MEMBER_NAME(uuid,"uuid");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(primitive_type,"primitive_type");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(depth,"depth");
	HX_MARK_MEMBER_NAME(clip_rect,"clip_rect");
	HX_MARK_MEMBER_NAME(blend_disabled,"blend_disabled");
	HX_MARK_MEMBER_NAME(blend_src_alpha,"blend_src_alpha");
	HX_MARK_MEMBER_NAME(blend_src_rgb,"blend_src_rgb");
	HX_MARK_MEMBER_NAME(blend_dest_alpha,"blend_dest_alpha");
	HX_MARK_MEMBER_NAME(blend_dest_rgb,"blend_dest_rgb");
	HX_MARK_MEMBER_NAME(shadow_primitive_type,"shadow_primitive_type");
	HX_MARK_MEMBER_NAME(shadow_texture,"shadow_texture");
	HX_MARK_MEMBER_NAME(shadow_shader,"shadow_shader");
	HX_MARK_MEMBER_NAME(shadow_depth,"shadow_depth");
	HX_MARK_MEMBER_NAME(shadow_clip,"shadow_clip");
	HX_MARK_MEMBER_NAME(shadow_blend_disabled,"shadow_blend_disabled");
	HX_MARK_MEMBER_NAME(shadow_blend_src_alpha,"shadow_blend_src_alpha");
	HX_MARK_MEMBER_NAME(shadow_blend_src_rgb,"shadow_blend_src_rgb");
	HX_MARK_MEMBER_NAME(shadow_blend_dest_alpha,"shadow_blend_dest_alpha");
	HX_MARK_MEMBER_NAME(shadow_blend_dest_rgb,"shadow_blend_dest_rgb");
	HX_MARK_MEMBER_NAME(dirty_primitive_type,"dirty_primitive_type");
	HX_MARK_MEMBER_NAME(dirty_texture,"dirty_texture");
	HX_MARK_MEMBER_NAME(dirty_shader,"dirty_shader");
	HX_MARK_MEMBER_NAME(dirty_depth,"dirty_depth");
	HX_MARK_MEMBER_NAME(dirty_clip,"dirty_clip");
	HX_MARK_MEMBER_NAME(dirty_blend,"dirty_blend");
	HX_MARK_MEMBER_NAME(visible,"visible");
	HX_MARK_MEMBER_NAME(immediate,"immediate");
	HX_MARK_MEMBER_NAME(locked,"locked");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(dirty_based,"dirty_based");
	HX_MARK_MEMBER_NAME(clip,"clip");
	HX_MARK_MEMBER_NAME(_final_vert_position,"_final_vert_position");
	HX_MARK_MEMBER_NAME(key,"key");
	HX_MARK_MEMBER_NAME(_prev_count,"_prev_count");
	HX_MARK_END_CLASS();
}

void Geometry_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(transform,"transform");
	HX_VISIT_MEMBER_NAME(vertices,"vertices");
	HX_VISIT_MEMBER_NAME(object_space,"object_space");
	HX_VISIT_MEMBER_NAME(buffer_based,"buffer_based");
	HX_VISIT_MEMBER_NAME(buffer_type,"buffer_type");
	HX_VISIT_MEMBER_NAME(buffer_pos,"buffer_pos");
	HX_VISIT_MEMBER_NAME(buffer_tcoords,"buffer_tcoords");
	HX_VISIT_MEMBER_NAME(buffer_colors,"buffer_colors");
	HX_VISIT_MEMBER_NAME(buffer_normals,"buffer_normals");
	HX_VISIT_MEMBER_NAME(vb_pos,"vb_pos");
	HX_VISIT_MEMBER_NAME(vb_tcoords,"vb_tcoords");
	HX_VISIT_MEMBER_NAME(vb_colors,"vb_colors");
	HX_VISIT_MEMBER_NAME(vb_normals,"vb_normals");
	HX_VISIT_MEMBER_NAME(uniforms,"uniforms");
	HX_VISIT_MEMBER_NAME(added,"added");
	HX_VISIT_MEMBER_NAME(batchers,"batchers");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(dropped,"dropped");
	HX_VISIT_MEMBER_NAME(uuid,"uuid");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(primitive_type,"primitive_type");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(depth,"depth");
	HX_VISIT_MEMBER_NAME(clip_rect,"clip_rect");
	HX_VISIT_MEMBER_NAME(blend_disabled,"blend_disabled");
	HX_VISIT_MEMBER_NAME(blend_src_alpha,"blend_src_alpha");
	HX_VISIT_MEMBER_NAME(blend_src_rgb,"blend_src_rgb");
	HX_VISIT_MEMBER_NAME(blend_dest_alpha,"blend_dest_alpha");
	HX_VISIT_MEMBER_NAME(blend_dest_rgb,"blend_dest_rgb");
	HX_VISIT_MEMBER_NAME(shadow_primitive_type,"shadow_primitive_type");
	HX_VISIT_MEMBER_NAME(shadow_texture,"shadow_texture");
	HX_VISIT_MEMBER_NAME(shadow_shader,"shadow_shader");
	HX_VISIT_MEMBER_NAME(shadow_depth,"shadow_depth");
	HX_VISIT_MEMBER_NAME(shadow_clip,"shadow_clip");
	HX_VISIT_MEMBER_NAME(shadow_blend_disabled,"shadow_blend_disabled");
	HX_VISIT_MEMBER_NAME(shadow_blend_src_alpha,"shadow_blend_src_alpha");
	HX_VISIT_MEMBER_NAME(shadow_blend_src_rgb,"shadow_blend_src_rgb");
	HX_VISIT_MEMBER_NAME(shadow_blend_dest_alpha,"shadow_blend_dest_alpha");
	HX_VISIT_MEMBER_NAME(shadow_blend_dest_rgb,"shadow_blend_dest_rgb");
	HX_VISIT_MEMBER_NAME(dirty_primitive_type,"dirty_primitive_type");
	HX_VISIT_MEMBER_NAME(dirty_texture,"dirty_texture");
	HX_VISIT_MEMBER_NAME(dirty_shader,"dirty_shader");
	HX_VISIT_MEMBER_NAME(dirty_depth,"dirty_depth");
	HX_VISIT_MEMBER_NAME(dirty_clip,"dirty_clip");
	HX_VISIT_MEMBER_NAME(dirty_blend,"dirty_blend");
	HX_VISIT_MEMBER_NAME(visible,"visible");
	HX_VISIT_MEMBER_NAME(immediate,"immediate");
	HX_VISIT_MEMBER_NAME(locked,"locked");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(dirty_based,"dirty_based");
	HX_VISIT_MEMBER_NAME(clip,"clip");
	HX_VISIT_MEMBER_NAME(_final_vert_position,"_final_vert_position");
	HX_VISIT_MEMBER_NAME(key,"key");
	HX_VISIT_MEMBER_NAME(_prev_count,"_prev_count");
}

hx::Val Geometry_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { return hx::Val( key ); }
		if (HX_FIELD_EQ(inName,"str") ) { return hx::Val( str_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"uuid") ) { return hx::Val( uuid ); }
		if (HX_FIELD_EQ(inName,"clip") ) { return hx::Val( inCallProp == hx::paccAlways ? get_clip() : clip ); }
		if (HX_FIELD_EQ(inName,"drop") ) { return hx::Val( drop_dyn() ); }
		if (HX_FIELD_EQ(inName,"bind") ) { return hx::Val( bind_dyn() ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"added") ) { return hx::Val( added ); }
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state ); }
		if (HX_FIELD_EQ(inName,"depth") ) { return hx::Val( inCallProp == hx::paccAlways ? get_depth() : depth ); }
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( inCallProp == hx::paccAlways ? get_dirty() : dirty ); }
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vb_pos") ) { return hx::Val( vb_pos ); }
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( inCallProp == hx::paccAlways ? get_shader() : shader ); }
		if (HX_FIELD_EQ(inName,"locked") ) { return hx::Val( inCallProp == hx::paccAlways ? get_locked() : locked ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"unbind") ) { return hx::Val( unbind_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dropped") ) { return hx::Val( dropped ); }
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( inCallProp == hx::paccAlways ? get_texture() : texture ); }
		if (HX_FIELD_EQ(inName,"visible") ) { return hx::Val( visible ); }
		if (HX_FIELD_EQ(inName,"refresh") ) { return hx::Val( refresh_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { return hx::Val( vertices ); }
		if (HX_FIELD_EQ(inName,"uniforms") ) { return hx::Val( uniforms ); }
		if (HX_FIELD_EQ(inName,"batchers") ) { return hx::Val( batchers ); }
		if (HX_FIELD_EQ(inName,"bind_pos") ) { return hx::Val( bind_pos_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_clip") ) { return hx::Val( get_clip_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_clip") ) { return hx::Val( set_clip_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform ); }
		if (HX_FIELD_EQ(inName,"vb_colors") ) { return hx::Val( vb_colors ); }
		if (HX_FIELD_EQ(inName,"clip_rect") ) { return hx::Val( inCallProp == hx::paccAlways ? get_clip_rect() : clip_rect ); }
		if (HX_FIELD_EQ(inName,"immediate") ) { return hx::Val( immediate ); }
		if (HX_FIELD_EQ(inName,"translate") ) { return hx::Val( translate_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_dirty") ) { return hx::Val( set_dirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_dirty") ) { return hx::Val( get_dirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_depth") ) { return hx::Val( get_depth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_depth") ) { return hx::Val( set_depth_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"buffer_pos") ) { return hx::Val( buffer_pos ); }
		if (HX_FIELD_EQ(inName,"vb_tcoords") ) { return hx::Val( vb_tcoords ); }
		if (HX_FIELD_EQ(inName,"vb_normals") ) { return hx::Val( vb_normals ); }
		if (HX_FIELD_EQ(inName,"dirty_clip") ) { return hx::Val( dirty_clip ); }
		if (HX_FIELD_EQ(inName,"key_string") ) { return hx::Val( key_string_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_locked") ) { return hx::Val( set_locked_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_locked") ) { return hx::Val( get_locked_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_shader") ) { return hx::Val( get_shader_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shader") ) { return hx::Val( set_shader_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buffer_type") ) { return hx::Val( buffer_type ); }
		if (HX_FIELD_EQ(inName,"shadow_clip") ) { return hx::Val( shadow_clip ); }
		if (HX_FIELD_EQ(inName,"dirty_depth") ) { return hx::Val( dirty_depth ); }
		if (HX_FIELD_EQ(inName,"dirty_blend") ) { return hx::Val( dirty_blend ); }
		if (HX_FIELD_EQ(inName,"dirty_based") ) { return hx::Val( dirty_based ); }
		if (HX_FIELD_EQ(inName,"refresh_key") ) { return hx::Val( refresh_key_dyn() ); }
		if (HX_FIELD_EQ(inName,"create_vbos") ) { return hx::Val( create_vbos_dyn() ); }
		if (HX_FIELD_EQ(inName,"bind_colors") ) { return hx::Val( bind_colors_dyn() ); }
		if (HX_FIELD_EQ(inName,"_prev_count") ) { return hx::Val( _prev_count ); }
		if (HX_FIELD_EQ(inName,"get_texture") ) { return hx::Val( get_texture_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_texture") ) { return hx::Val( set_texture_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"object_space") ) { return hx::Val( object_space ); }
		if (HX_FIELD_EQ(inName,"buffer_based") ) { return hx::Val( buffer_based ); }
		if (HX_FIELD_EQ(inName,"shadow_depth") ) { return hx::Val( shadow_depth ); }
		if (HX_FIELD_EQ(inName,"dirty_shader") ) { return hx::Val( dirty_shader ); }
		if (HX_FIELD_EQ(inName,"destroy_vbos") ) { return hx::Val( destroy_vbos_dyn() ); }
		if (HX_FIELD_EQ(inName,"bind_tcoords") ) { return hx::Val( bind_tcoords_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"buffer_colors") ) { return hx::Val( buffer_colors ); }
		if (HX_FIELD_EQ(inName,"blend_src_rgb") ) { return hx::Val( inCallProp == hx::paccAlways ? get_blend_src_rgb() : blend_src_rgb ); }
		if (HX_FIELD_EQ(inName,"shadow_shader") ) { return hx::Val( shadow_shader ); }
		if (HX_FIELD_EQ(inName,"dirty_texture") ) { return hx::Val( dirty_texture ); }
		if (HX_FIELD_EQ(inName,"get_clip_rect") ) { return hx::Val( get_clip_rect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_clip_rect") ) { return hx::Val( set_clip_rect_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buffer_tcoords") ) { return hx::Val( buffer_tcoords ); }
		if (HX_FIELD_EQ(inName,"buffer_normals") ) { return hx::Val( buffer_normals ); }
		if (HX_FIELD_EQ(inName,"primitive_type") ) { return hx::Val( inCallProp == hx::paccAlways ? get_primitive_type() : primitive_type ); }
		if (HX_FIELD_EQ(inName,"blend_disabled") ) { return hx::Val( inCallProp == hx::paccAlways ? get_blend_disabled() : blend_disabled ); }
		if (HX_FIELD_EQ(inName,"blend_dest_rgb") ) { return hx::Val( inCallProp == hx::paccAlways ? get_blend_dest_rgb() : blend_dest_rgb ); }
		if (HX_FIELD_EQ(inName,"shadow_texture") ) { return hx::Val( shadow_texture ); }
		if (HX_FIELD_EQ(inName,"update_buffers") ) { return hx::Val( update_buffers_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blend_src_alpha") ) { return hx::Val( inCallProp == hx::paccAlways ? get_blend_src_alpha() : blend_src_alpha ); }
		if (HX_FIELD_EQ(inName,"bind_and_upload") ) { return hx::Val( bind_and_upload_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"blend_dest_alpha") ) { return hx::Val( inCallProp == hx::paccAlways ? get_blend_dest_alpha() : blend_dest_alpha ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"batch_into_arrays") ) { return hx::Val( batch_into_arrays_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blend_src_rgb") ) { return hx::Val( get_blend_src_rgb_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend_src_rgb") ) { return hx::Val( set_blend_src_rgb_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"batch_object_space") ) { return hx::Val( batch_object_space_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_primitive_type") ) { return hx::Val( get_primitive_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_primitive_type") ) { return hx::Val( set_primitive_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blend_disabled") ) { return hx::Val( get_blend_disabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blend_dest_rgb") ) { return hx::Val( get_blend_dest_rgb_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend_disabled") ) { return hx::Val( set_blend_disabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend_dest_rgb") ) { return hx::Val( set_blend_dest_rgb_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_blend_src_alpha") ) { return hx::Val( get_blend_src_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend_src_alpha") ) { return hx::Val( set_blend_src_alpha_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"shadow_blend_src_rgb") ) { return hx::Val( shadow_blend_src_rgb ); }
		if (HX_FIELD_EQ(inName,"dirty_primitive_type") ) { return hx::Val( dirty_primitive_type ); }
		if (HX_FIELD_EQ(inName,"_final_vert_position") ) { return hx::Val( _final_vert_position ); }
		if (HX_FIELD_EQ(inName,"get_blend_dest_alpha") ) { return hx::Val( get_blend_dest_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend_dest_alpha") ) { return hx::Val( set_blend_dest_alpha_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"shadow_primitive_type") ) { return hx::Val( shadow_primitive_type ); }
		if (HX_FIELD_EQ(inName,"shadow_blend_disabled") ) { return hx::Val( shadow_blend_disabled ); }
		if (HX_FIELD_EQ(inName,"shadow_blend_dest_rgb") ) { return hx::Val( shadow_blend_dest_rgb ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"shadow_blend_src_alpha") ) { return hx::Val( shadow_blend_src_alpha ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"shadow_blend_dest_alpha") ) { return hx::Val( shadow_blend_dest_alpha ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Geometry_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"_sequence_key") ) { outValue = ( _sequence_key ); return true; }
	}
	return false;
}

hx::Val Geometry_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { key=inValue.Cast<  ::phoenix::geometry::GeometryKey >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"uuid") ) { uuid=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clip") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_clip(inValue.Cast< bool >()) );clip=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"added") ) { added=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::phoenix::geometry::GeometryState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"depth") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_depth(inValue.Cast< Float >()) );depth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_dirty(inValue.Cast< bool >()) );dirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast<  ::phoenix::Color >()) );color=inValue.Cast<  ::phoenix::Color >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vb_pos") ) { vb_pos=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shader") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_shader(inValue.Cast<  ::phoenix::Shader >()) );shader=inValue.Cast<  ::phoenix::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"locked") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_locked(inValue.Cast< bool >()) );locked=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dropped") ) { dropped=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texture") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_texture(inValue.Cast<  ::phoenix::Texture >()) );texture=inValue.Cast<  ::phoenix::Texture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_visible(inValue.Cast< bool >()) );visible=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { vertices=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uniforms") ) { uniforms=inValue.Cast<  ::phoenix::Uniforms >(); return inValue; }
		if (HX_FIELD_EQ(inName,"batchers") ) { batchers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { transform=inValue.Cast<  ::phoenix::Transform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vb_colors") ) { vb_colors=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clip_rect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_clip_rect(inValue.Cast<  ::phoenix::Rectangle >()) );clip_rect=inValue.Cast<  ::phoenix::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"immediate") ) { immediate=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"buffer_pos") ) { buffer_pos=inValue.Cast<  ::snow::api::buffers::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vb_tcoords") ) { vb_tcoords=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vb_normals") ) { vb_normals=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_clip") ) { dirty_clip=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buffer_type") ) { buffer_type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shadow_clip") ) { shadow_clip=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_depth") ) { dirty_depth=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_blend") ) { dirty_blend=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_based") ) { dirty_based=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_prev_count") ) { _prev_count=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"object_space") ) { object_space=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buffer_based") ) { buffer_based=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shadow_depth") ) { shadow_depth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_shader") ) { dirty_shader=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"buffer_colors") ) { buffer_colors=inValue.Cast<  ::snow::api::buffers::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blend_src_rgb") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend_src_rgb(inValue.Cast< int >()) );blend_src_rgb=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shadow_shader") ) { shadow_shader=inValue.Cast<  ::phoenix::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_texture") ) { dirty_texture=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buffer_tcoords") ) { buffer_tcoords=inValue.Cast<  ::snow::api::buffers::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buffer_normals") ) { buffer_normals=inValue.Cast<  ::snow::api::buffers::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"primitive_type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_primitive_type(inValue.Cast< int >()) );primitive_type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blend_disabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend_disabled(inValue.Cast< bool >()) );blend_disabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blend_dest_rgb") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend_dest_rgb(inValue.Cast< int >()) );blend_dest_rgb=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shadow_texture") ) { shadow_texture=inValue.Cast<  ::phoenix::Texture >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blend_src_alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend_src_alpha(inValue.Cast< int >()) );blend_src_alpha=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"blend_dest_alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend_dest_alpha(inValue.Cast< int >()) );blend_dest_alpha=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"shadow_blend_src_rgb") ) { shadow_blend_src_rgb=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_primitive_type") ) { dirty_primitive_type=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_final_vert_position") ) { _final_vert_position=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"shadow_primitive_type") ) { shadow_primitive_type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shadow_blend_disabled") ) { shadow_blend_disabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shadow_blend_dest_rgb") ) { shadow_blend_dest_rgb=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"shadow_blend_src_alpha") ) { shadow_blend_src_alpha=inValue.Cast< int >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"shadow_blend_dest_alpha") ) { shadow_blend_dest_alpha=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Geometry_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"_sequence_key") ) { _sequence_key=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Geometry_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"));
	outFields->push(HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a"));
	outFields->push(HX_HCSTRING("object_space","\x06","\x6c","\xc3","\x22"));
	outFields->push(HX_HCSTRING("buffer_based","\x74","\xeb","\xe1","\x79"));
	outFields->push(HX_HCSTRING("buffer_type","\x99","\x31","\x38","\x0a"));
	outFields->push(HX_HCSTRING("buffer_pos","\x95","\xdf","\x57","\xa5"));
	outFields->push(HX_HCSTRING("buffer_tcoords","\x13","\x8a","\x10","\x99"));
	outFields->push(HX_HCSTRING("buffer_colors","\x4f","\xba","\x2a","\x9d"));
	outFields->push(HX_HCSTRING("buffer_normals","\xed","\x86","\xac","\x24"));
	outFields->push(HX_HCSTRING("vb_pos","\xc1","\x0f","\x82","\xda"));
	outFields->push(HX_HCSTRING("vb_tcoords","\x3f","\x40","\xb4","\x3c"));
	outFields->push(HX_HCSTRING("vb_colors","\xa3","\xed","\x93","\x55"));
	outFields->push(HX_HCSTRING("vb_normals","\x19","\x3d","\x50","\xc8"));
	outFields->push(HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02"));
	outFields->push(HX_HCSTRING("added","\xc0","\xd4","\x43","\x1c"));
	outFields->push(HX_HCSTRING("batchers","\xec","\x2f","\x0e","\x4e"));
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	outFields->push(HX_HCSTRING("dropped","\x00","\x24","\xe9","\x06"));
	outFields->push(HX_HCSTRING("uuid","\x3b","\x1a","\xaf","\x4d"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("primitive_type","\x92","\xc8","\x6d","\x88"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"));
	outFields->push(HX_HCSTRING("clip_rect","\x33","\x48","\xa2","\x89"));
	outFields->push(HX_HCSTRING("blend_disabled","\x6a","\x3e","\x58","\x24"));
	outFields->push(HX_HCSTRING("blend_src_alpha","\xd5","\x2b","\x5d","\x0e"));
	outFields->push(HX_HCSTRING("blend_src_rgb","\xc4","\x83","\xd8","\x0a"));
	outFields->push(HX_HCSTRING("blend_dest_alpha","\xef","\xd6","\x35","\x60"));
	outFields->push(HX_HCSTRING("blend_dest_rgb","\x5e","\x54","\xa8","\x6c"));
	outFields->push(HX_HCSTRING("shadow_primitive_type","\x51","\x25","\xc9","\x32"));
	outFields->push(HX_HCSTRING("shadow_texture","\x3c","\xca","\x94","\x51"));
	outFields->push(HX_HCSTRING("shadow_shader","\xe4","\xc4","\x51","\x95"));
	outFields->push(HX_HCSTRING("shadow_depth","\x24","\x28","\x49","\x1a"));
	outFields->push(HX_HCSTRING("shadow_clip","\xcf","\x36","\x72","\xd8"));
	outFields->push(HX_HCSTRING("shadow_blend_disabled","\x29","\x9b","\xb3","\xce"));
	outFields->push(HX_HCSTRING("shadow_blend_src_alpha","\x36","\xf6","\xf2","\x73"));
	outFields->push(HX_HCSTRING("shadow_blend_src_rgb","\xe5","\x43","\xa5","\x13"));
	outFields->push(HX_HCSTRING("shadow_blend_dest_alpha","\x6e","\x21","\xb1","\xdd"));
	outFields->push(HX_HCSTRING("shadow_blend_dest_rgb","\x1d","\xb1","\x03","\x17"));
	outFields->push(HX_HCSTRING("dirty_primitive_type","\x5f","\xa5","\x3a","\x90"));
	outFields->push(HX_HCSTRING("dirty_texture","\x6e","\xd4","\x32","\x48"));
	outFields->push(HX_HCSTRING("dirty_shader","\xf2","\x86","\xfd","\x54"));
	outFields->push(HX_HCSTRING("dirty_depth","\xd6","\xe1","\x7f","\x8a"));
	outFields->push(HX_HCSTRING("dirty_clip","\x5d","\xb9","\x4d","\x48"));
	outFields->push(HX_HCSTRING("dirty_blend","\x24","\xd9","\x4a","\x68"));
	outFields->push(HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"));
	outFields->push(HX_HCSTRING("immediate","\xf1","\x13","\xf1","\xcf"));
	outFields->push(HX_HCSTRING("locked","\x0a","\x05","\xc7","\x59"));
	outFields->push(HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("dirty_based","\x06","\x18","\x10","\x61"));
	outFields->push(HX_HCSTRING("clip","\xd0","\x6e","\xc2","\x41"));
	outFields->push(HX_HCSTRING("_final_vert_position","\x6f","\x0e","\xa4","\x12"));
	outFields->push(HX_HCSTRING("key","\x9f","\x89","\x51","\x00"));
	outFields->push(HX_HCSTRING("_prev_count","\x62","\x50","\xb5","\xe4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Geometry_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::Transform*/ ,(int)offsetof(Geometry_obj,transform),HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Geometry_obj,vertices),HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a")},
	{hx::fsBool,(int)offsetof(Geometry_obj,object_space),HX_HCSTRING("object_space","\x06","\x6c","\xc3","\x22")},
	{hx::fsBool,(int)offsetof(Geometry_obj,buffer_based),HX_HCSTRING("buffer_based","\x74","\xeb","\xe1","\x79")},
	{hx::fsInt,(int)offsetof(Geometry_obj,buffer_type),HX_HCSTRING("buffer_type","\x99","\x31","\x38","\x0a")},
	{hx::fsObject /*::snow::api::buffers::ArrayBufferView*/ ,(int)offsetof(Geometry_obj,buffer_pos),HX_HCSTRING("buffer_pos","\x95","\xdf","\x57","\xa5")},
	{hx::fsObject /*::snow::api::buffers::ArrayBufferView*/ ,(int)offsetof(Geometry_obj,buffer_tcoords),HX_HCSTRING("buffer_tcoords","\x13","\x8a","\x10","\x99")},
	{hx::fsObject /*::snow::api::buffers::ArrayBufferView*/ ,(int)offsetof(Geometry_obj,buffer_colors),HX_HCSTRING("buffer_colors","\x4f","\xba","\x2a","\x9d")},
	{hx::fsObject /*::snow::api::buffers::ArrayBufferView*/ ,(int)offsetof(Geometry_obj,buffer_normals),HX_HCSTRING("buffer_normals","\xed","\x86","\xac","\x24")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Geometry_obj,vb_pos),HX_HCSTRING("vb_pos","\xc1","\x0f","\x82","\xda")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Geometry_obj,vb_tcoords),HX_HCSTRING("vb_tcoords","\x3f","\x40","\xb4","\x3c")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Geometry_obj,vb_colors),HX_HCSTRING("vb_colors","\xa3","\xed","\x93","\x55")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Geometry_obj,vb_normals),HX_HCSTRING("vb_normals","\x19","\x3d","\x50","\xc8")},
	{hx::fsObject /*::phoenix::Uniforms*/ ,(int)offsetof(Geometry_obj,uniforms),HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02")},
	{hx::fsBool,(int)offsetof(Geometry_obj,added),HX_HCSTRING("added","\xc0","\xd4","\x43","\x1c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Geometry_obj,batchers),HX_HCSTRING("batchers","\xec","\x2f","\x0e","\x4e")},
	{hx::fsObject /*::phoenix::geometry::GeometryState*/ ,(int)offsetof(Geometry_obj,state),HX_HCSTRING("state","\x11","\x76","\x0b","\x84")},
	{hx::fsBool,(int)offsetof(Geometry_obj,dropped),HX_HCSTRING("dropped","\x00","\x24","\xe9","\x06")},
	{hx::fsString,(int)offsetof(Geometry_obj,uuid),HX_HCSTRING("uuid","\x3b","\x1a","\xaf","\x4d")},
	{hx::fsString,(int)offsetof(Geometry_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Geometry_obj,primitive_type),HX_HCSTRING("primitive_type","\x92","\xc8","\x6d","\x88")},
	{hx::fsObject /*::phoenix::Texture*/ ,(int)offsetof(Geometry_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsObject /*::phoenix::Shader*/ ,(int)offsetof(Geometry_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{hx::fsFloat,(int)offsetof(Geometry_obj,depth),HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7")},
	{hx::fsObject /*::phoenix::Rectangle*/ ,(int)offsetof(Geometry_obj,clip_rect),HX_HCSTRING("clip_rect","\x33","\x48","\xa2","\x89")},
	{hx::fsBool,(int)offsetof(Geometry_obj,blend_disabled),HX_HCSTRING("blend_disabled","\x6a","\x3e","\x58","\x24")},
	{hx::fsInt,(int)offsetof(Geometry_obj,blend_src_alpha),HX_HCSTRING("blend_src_alpha","\xd5","\x2b","\x5d","\x0e")},
	{hx::fsInt,(int)offsetof(Geometry_obj,blend_src_rgb),HX_HCSTRING("blend_src_rgb","\xc4","\x83","\xd8","\x0a")},
	{hx::fsInt,(int)offsetof(Geometry_obj,blend_dest_alpha),HX_HCSTRING("blend_dest_alpha","\xef","\xd6","\x35","\x60")},
	{hx::fsInt,(int)offsetof(Geometry_obj,blend_dest_rgb),HX_HCSTRING("blend_dest_rgb","\x5e","\x54","\xa8","\x6c")},
	{hx::fsInt,(int)offsetof(Geometry_obj,shadow_primitive_type),HX_HCSTRING("shadow_primitive_type","\x51","\x25","\xc9","\x32")},
	{hx::fsObject /*::phoenix::Texture*/ ,(int)offsetof(Geometry_obj,shadow_texture),HX_HCSTRING("shadow_texture","\x3c","\xca","\x94","\x51")},
	{hx::fsObject /*::phoenix::Shader*/ ,(int)offsetof(Geometry_obj,shadow_shader),HX_HCSTRING("shadow_shader","\xe4","\xc4","\x51","\x95")},
	{hx::fsFloat,(int)offsetof(Geometry_obj,shadow_depth),HX_HCSTRING("shadow_depth","\x24","\x28","\x49","\x1a")},
	{hx::fsBool,(int)offsetof(Geometry_obj,shadow_clip),HX_HCSTRING("shadow_clip","\xcf","\x36","\x72","\xd8")},
	{hx::fsBool,(int)offsetof(Geometry_obj,shadow_blend_disabled),HX_HCSTRING("shadow_blend_disabled","\x29","\x9b","\xb3","\xce")},
	{hx::fsInt,(int)offsetof(Geometry_obj,shadow_blend_src_alpha),HX_HCSTRING("shadow_blend_src_alpha","\x36","\xf6","\xf2","\x73")},
	{hx::fsInt,(int)offsetof(Geometry_obj,shadow_blend_src_rgb),HX_HCSTRING("shadow_blend_src_rgb","\xe5","\x43","\xa5","\x13")},
	{hx::fsInt,(int)offsetof(Geometry_obj,shadow_blend_dest_alpha),HX_HCSTRING("shadow_blend_dest_alpha","\x6e","\x21","\xb1","\xdd")},
	{hx::fsInt,(int)offsetof(Geometry_obj,shadow_blend_dest_rgb),HX_HCSTRING("shadow_blend_dest_rgb","\x1d","\xb1","\x03","\x17")},
	{hx::fsBool,(int)offsetof(Geometry_obj,dirty_primitive_type),HX_HCSTRING("dirty_primitive_type","\x5f","\xa5","\x3a","\x90")},
	{hx::fsBool,(int)offsetof(Geometry_obj,dirty_texture),HX_HCSTRING("dirty_texture","\x6e","\xd4","\x32","\x48")},
	{hx::fsBool,(int)offsetof(Geometry_obj,dirty_shader),HX_HCSTRING("dirty_shader","\xf2","\x86","\xfd","\x54")},
	{hx::fsBool,(int)offsetof(Geometry_obj,dirty_depth),HX_HCSTRING("dirty_depth","\xd6","\xe1","\x7f","\x8a")},
	{hx::fsBool,(int)offsetof(Geometry_obj,dirty_clip),HX_HCSTRING("dirty_clip","\x5d","\xb9","\x4d","\x48")},
	{hx::fsBool,(int)offsetof(Geometry_obj,dirty_blend),HX_HCSTRING("dirty_blend","\x24","\xd9","\x4a","\x68")},
	{hx::fsBool,(int)offsetof(Geometry_obj,visible),HX_HCSTRING("visible","\x72","\x78","\x24","\xa3")},
	{hx::fsBool,(int)offsetof(Geometry_obj,immediate),HX_HCSTRING("immediate","\xf1","\x13","\xf1","\xcf")},
	{hx::fsBool,(int)offsetof(Geometry_obj,locked),HX_HCSTRING("locked","\x0a","\x05","\xc7","\x59")},
	{hx::fsBool,(int)offsetof(Geometry_obj,dirty),HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9")},
	{hx::fsObject /*::phoenix::Color*/ ,(int)offsetof(Geometry_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsBool,(int)offsetof(Geometry_obj,dirty_based),HX_HCSTRING("dirty_based","\x06","\x18","\x10","\x61")},
	{hx::fsBool,(int)offsetof(Geometry_obj,clip),HX_HCSTRING("clip","\xd0","\x6e","\xc2","\x41")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Geometry_obj,_final_vert_position),HX_HCSTRING("_final_vert_position","\x6f","\x0e","\xa4","\x12")},
	{hx::fsObject /*::phoenix::geometry::GeometryKey*/ ,(int)offsetof(Geometry_obj,key),HX_HCSTRING("key","\x9f","\x89","\x51","\x00")},
	{hx::fsInt,(int)offsetof(Geometry_obj,_prev_count),HX_HCSTRING("_prev_count","\x62","\x50","\xb5","\xe4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Geometry_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Geometry_obj::_sequence_key,HX_HCSTRING("_sequence_key","\x40","\x34","\x6b","\xf7")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Geometry_obj_sMemberFields[] = {
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a"),
	HX_HCSTRING("object_space","\x06","\x6c","\xc3","\x22"),
	HX_HCSTRING("buffer_based","\x74","\xeb","\xe1","\x79"),
	HX_HCSTRING("buffer_type","\x99","\x31","\x38","\x0a"),
	HX_HCSTRING("buffer_pos","\x95","\xdf","\x57","\xa5"),
	HX_HCSTRING("buffer_tcoords","\x13","\x8a","\x10","\x99"),
	HX_HCSTRING("buffer_colors","\x4f","\xba","\x2a","\x9d"),
	HX_HCSTRING("buffer_normals","\xed","\x86","\xac","\x24"),
	HX_HCSTRING("vb_pos","\xc1","\x0f","\x82","\xda"),
	HX_HCSTRING("vb_tcoords","\x3f","\x40","\xb4","\x3c"),
	HX_HCSTRING("vb_colors","\xa3","\xed","\x93","\x55"),
	HX_HCSTRING("vb_normals","\x19","\x3d","\x50","\xc8"),
	HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02"),
	HX_HCSTRING("added","\xc0","\xd4","\x43","\x1c"),
	HX_HCSTRING("batchers","\xec","\x2f","\x0e","\x4e"),
	HX_HCSTRING("state","\x11","\x76","\x0b","\x84"),
	HX_HCSTRING("dropped","\x00","\x24","\xe9","\x06"),
	HX_HCSTRING("uuid","\x3b","\x1a","\xaf","\x4d"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("primitive_type","\x92","\xc8","\x6d","\x88"),
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"),
	HX_HCSTRING("clip_rect","\x33","\x48","\xa2","\x89"),
	HX_HCSTRING("blend_disabled","\x6a","\x3e","\x58","\x24"),
	HX_HCSTRING("blend_src_alpha","\xd5","\x2b","\x5d","\x0e"),
	HX_HCSTRING("blend_src_rgb","\xc4","\x83","\xd8","\x0a"),
	HX_HCSTRING("blend_dest_alpha","\xef","\xd6","\x35","\x60"),
	HX_HCSTRING("blend_dest_rgb","\x5e","\x54","\xa8","\x6c"),
	HX_HCSTRING("shadow_primitive_type","\x51","\x25","\xc9","\x32"),
	HX_HCSTRING("shadow_texture","\x3c","\xca","\x94","\x51"),
	HX_HCSTRING("shadow_shader","\xe4","\xc4","\x51","\x95"),
	HX_HCSTRING("shadow_depth","\x24","\x28","\x49","\x1a"),
	HX_HCSTRING("shadow_clip","\xcf","\x36","\x72","\xd8"),
	HX_HCSTRING("shadow_blend_disabled","\x29","\x9b","\xb3","\xce"),
	HX_HCSTRING("shadow_blend_src_alpha","\x36","\xf6","\xf2","\x73"),
	HX_HCSTRING("shadow_blend_src_rgb","\xe5","\x43","\xa5","\x13"),
	HX_HCSTRING("shadow_blend_dest_alpha","\x6e","\x21","\xb1","\xdd"),
	HX_HCSTRING("shadow_blend_dest_rgb","\x1d","\xb1","\x03","\x17"),
	HX_HCSTRING("dirty_primitive_type","\x5f","\xa5","\x3a","\x90"),
	HX_HCSTRING("dirty_texture","\x6e","\xd4","\x32","\x48"),
	HX_HCSTRING("dirty_shader","\xf2","\x86","\xfd","\x54"),
	HX_HCSTRING("dirty_depth","\xd6","\xe1","\x7f","\x8a"),
	HX_HCSTRING("dirty_clip","\x5d","\xb9","\x4d","\x48"),
	HX_HCSTRING("dirty_blend","\x24","\xd9","\x4a","\x68"),
	HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"),
	HX_HCSTRING("immediate","\xf1","\x13","\xf1","\xcf"),
	HX_HCSTRING("locked","\x0a","\x05","\xc7","\x59"),
	HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("dirty_based","\x06","\x18","\x10","\x61"),
	HX_HCSTRING("clip","\xd0","\x6e","\xc2","\x41"),
	HX_HCSTRING("_final_vert_position","\x6f","\x0e","\xa4","\x12"),
	HX_HCSTRING("key","\x9f","\x89","\x51","\x00"),
	HX_HCSTRING("key_string","\xb1","\xb2","\xdd","\x20"),
	HX_HCSTRING("refresh_key","\xfb","\x31","\xdf","\x48"),
	HX_HCSTRING("str","\xb1","\xa8","\x57","\x00"),
	HX_HCSTRING("drop","\x2f","\x38","\x70","\x42"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("batch_object_space","\xeb","\x4a","\x61","\xa3"),
	HX_HCSTRING("batch_into_arrays","\x74","\x5e","\xc2","\x25"),
	HX_HCSTRING("destroy_vbos","\xf5","\x8f","\x2d","\x60"),
	HX_HCSTRING("create_vbos","\xb3","\xce","\xa8","\x97"),
	HX_HCSTRING("bind","\xbd","\xf5","\x16","\x41"),
	HX_HCSTRING("bind_pos","\xd2","\xba","\x11","\xc2"),
	HX_HCSTRING("bind_tcoords","\xd0","\x47","\xc5","\xe6"),
	HX_HCSTRING("bind_colors","\x32","\xc3","\x1d","\x64"),
	HX_HCSTRING("unbind","\x96","\xfc","\xeb","\x5e"),
	HX_HCSTRING("bind_and_upload","\x2b","\xe0","\xe8","\x2d"),
	HX_HCSTRING("_prev_count","\x62","\x50","\xb5","\xe4"),
	HX_HCSTRING("update_buffers","\xfd","\x33","\xc1","\x46"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("translate","\x4e","\xd7","\x7f","\x49"),
	HX_HCSTRING("set_locked","\x47","\x13","\xcc","\x4d"),
	HX_HCSTRING("get_locked","\xd3","\x74","\x4e","\x4a"),
	HX_HCSTRING("set_dirty","\x75","\x98","\xca","\x00"),
	HX_HCSTRING("get_dirty","\x69","\xac","\x79","\x1d"),
	HX_HCSTRING("refresh","\xdb","\xd9","\x20","\xed"),
	HX_HCSTRING("get_primitive_type","\x5b","\xa9","\x07","\x24"),
	HX_HCSTRING("set_primitive_type","\xcf","\xdb","\xb6","\x00"),
	HX_HCSTRING("get_texture","\xf2","\x28","\xdb","\x24"),
	HX_HCSTRING("set_texture","\xfe","\x2f","\x48","\x2f"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_shader","\xee","\x2e","\xa8","\x0d"),
	HX_HCSTRING("set_shader","\x62","\xcd","\x25","\x11"),
	HX_HCSTRING("get_depth","\x5a","\x4d","\xd3","\x1a"),
	HX_HCSTRING("set_depth","\x66","\x39","\x24","\xfe"),
	HX_HCSTRING("get_blend_disabled","\x33","\x1f","\xf2","\xbf"),
	HX_HCSTRING("get_blend_src_alpha","\xec","\xfa","\x67","\x99"),
	HX_HCSTRING("get_blend_src_rgb","\x1b","\x8f","\x48","\x11"),
	HX_HCSTRING("get_blend_dest_alpha","\xf8","\x3b","\xa0","\x7e"),
	HX_HCSTRING("get_blend_dest_rgb","\x27","\x35","\x42","\x08"),
	HX_HCSTRING("set_blend_disabled","\xa7","\x51","\xa1","\x9c"),
	HX_HCSTRING("set_blend_src_alpha","\xf8","\xed","\x04","\xd6"),
	HX_HCSTRING("set_blend_src_rgb","\x27","\x67","\xb6","\x34"),
	HX_HCSTRING("set_blend_dest_alpha","\x6c","\xf3","\x57","\x4b"),
	HX_HCSTRING("set_blend_dest_rgb","\x9b","\x67","\xf1","\xe4"),
	HX_HCSTRING("get_clip","\x59","\x2a","\x7d","\xc1"),
	HX_HCSTRING("set_clip","\xcd","\x83","\xda","\x6f"),
	HX_HCSTRING("get_clip_rect","\x0a","\x1c","\x06","\x4b"),
	HX_HCSTRING("set_clip_rect","\x16","\xfe","\x0b","\x90"),
	::String(null()) };

static void Geometry_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Geometry_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Geometry_obj::_sequence_key,"_sequence_key");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Geometry_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Geometry_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Geometry_obj::_sequence_key,"_sequence_key");
};

#endif

hx::Class Geometry_obj::__mClass;

static ::String Geometry_obj_sStaticFields[] = {
	HX_HCSTRING("_sequence_key","\x40","\x34","\x6b","\xf7"),
	::String(null())
};

void Geometry_obj::__register()
{
	hx::Object *dummy = new Geometry_obj;
	Geometry_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.geometry.Geometry","\x6f","\xef","\x7a","\x64");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Geometry_obj::__GetStatic;
	__mClass->mSetStaticField = &Geometry_obj::__SetStatic;
	__mClass->mMarkFunc = Geometry_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Geometry_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Geometry_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Geometry_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Geometry_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Geometry_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Geometry_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Geometry_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1c4f0091f7c5e781_115_boot)
HXDLIN( 115)		_sequence_key = (int)-1;
            	}
}

} // end namespace phoenix
} // end namespace geometry
