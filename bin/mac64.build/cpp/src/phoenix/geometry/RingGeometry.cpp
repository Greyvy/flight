// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_utils_GeometryUtils
#include <luxe/utils/GeometryUtils.h>
#endif
#ifndef INCLUDED_luxe_utils_Utils
#include <luxe/utils/Utils.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Spatial
#include <phoenix/Spatial.h>
#endif
#ifndef INCLUDED_phoenix_Transform
#include <phoenix/Transform.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_RingGeometry
#include <phoenix/geometry/RingGeometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Vertex
#include <phoenix/geometry/Vertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7ba06bccc652eafe_13_new,"phoenix.geometry.RingGeometry","new",0x25deca31,"phoenix.geometry.RingGeometry.new","phoenix/geometry/RingGeometry.hx",13,0x0d3aaa7f)
HX_LOCAL_STACK_FRAME(_hx_pos_7ba06bccc652eafe_55_set,"phoenix.geometry.RingGeometry","set",0x25e29573,"phoenix.geometry.RingGeometry.set","phoenix/geometry/RingGeometry.hx",55,0x0d3aaa7f)
namespace phoenix{
namespace geometry{

void RingGeometry_obj::__construct( ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_7ba06bccc652eafe_13_new)
HXLINE(  15)		_options->__SetField(HX_("primitive_type",92,c8,6d,88),(int)1,hx::paccDynamic);
HXLINE(  17)		super::__construct(_options);
HXLINE(  20)		Float _radius_x = ((Float)32.0);
HXLINE(  21)		Float _radius_y = ((Float)32.0);
HXLINE(  23)		if (hx::IsNull( _options->__Field(HX_("end_angle",2f,65,17,2a),hx::paccDynamic) )) {
HXLINE(  23)			_options->__SetField(HX_("end_angle",2f,65,17,2a),(int)360,hx::paccDynamic);
            		}
HXLINE(  24)		if (hx::IsNull( _options->__Field(HX_("start_angle",f6,74,1b,62),hx::paccDynamic) )) {
HXLINE(  24)			_options->__SetField(HX_("start_angle",f6,74,1b,62),(int)0,hx::paccDynamic);
            		}
HXLINE(  26)		if (hx::IsNotNull( _options->__Field(HX_("r",72,00,00,00),hx::paccDynamic) )) {
HXLINE(  27)			_radius_x = ( (Float)(_options->__Field(HX_("r",72,00,00,00),hx::paccDynamic)) );
HXLINE(  28)			_radius_y = ( (Float)(_options->__Field(HX_("r",72,00,00,00),hx::paccDynamic)) );
            		}
HXLINE(  31)		if (hx::IsNotNull( _options->__Field(HX_("rx",c6,63,00,00),hx::paccDynamic) )) {
HXLINE(  32)			_radius_x = ( (Float)(_options->__Field(HX_("rx",c6,63,00,00),hx::paccDynamic)) );
            		}
HXLINE(  35)		if (hx::IsNotNull( _options->__Field(HX_("ry",c7,63,00,00),hx::paccDynamic) )) {
HXLINE(  36)			_radius_y = ( (Float)(_options->__Field(HX_("ry",c7,63,00,00),hx::paccDynamic)) );
            		}
HXLINE(  39)		if (hx::IsNull( _options->__Field(HX_("steps",a7,7b,0e,84),hx::paccDynamic) )) {
HXLINE(  40)			if (hx::IsNull( _options->__Field(HX_("smooth",2e,08,6b,07),hx::paccDynamic) )) {
HXLINE(  41)				Float _max = ::Math_obj::max(_radius_x,_radius_y);
HXLINE(  42)				_options->__SetField(HX_("steps",a7,7b,0e,84),::Luxe_obj::utils->geometry->segments_for_smooth_circle(_max,null()),hx::paccDynamic);
            			}
            			else {
HXLINE(  44)				 ::Dynamic _smooth = _options->__Field(HX_("smooth",2e,08,6b,07),hx::paccDynamic);
HXLINE(  45)				Float _max1 = ::Math_obj::max(_radius_x,_radius_y);
HXLINE(  46)				_options->__SetField(HX_("steps",a7,7b,0e,84),::Luxe_obj::utils->geometry->segments_for_smooth_circle(_max1,_smooth),hx::paccDynamic);
            			}
            		}
HXLINE(  51)		this->set(( (Float)(_options->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ),( (Float)(_options->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ),_radius_x,_radius_y,( (int)(_options->__Field(HX_("steps",a7,7b,0e,84),hx::paccDynamic)) ),_options->__Field(HX_("start_angle",f6,74,1b,62),hx::paccDynamic),_options->__Field(HX_("end_angle",2f,65,17,2a),hx::paccDynamic));
            	}

Dynamic RingGeometry_obj::__CreateEmpty() { return new RingGeometry_obj; }

void *RingGeometry_obj::_hx_vtable = 0;

Dynamic RingGeometry_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RingGeometry_obj > _hx_result = new RingGeometry_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool RingGeometry_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5272fae3) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x5272fae3;
	} else {
		return inClassId==(int)0x6c1faa93;
	}
}

void RingGeometry_obj::set(Float _x,Float _y,Float _rx,Float _ry,int _steps,hx::Null< Float >  __o__start_angle_degrees,hx::Null< Float >  __o__end_angle_degrees){
Float _start_angle_degrees = __o__start_angle_degrees.Default(0);
Float _end_angle_degrees = __o__end_angle_degrees.Default(360);
            	HX_GC_STACKFRAME(&_hx_pos_7ba06bccc652eafe_55_set)
HXLINE(  60)		if ((::Math_obj::abs(_start_angle_degrees) > (int)360)) {
HXLINE(  60)			_start_angle_degrees = hx::Mod(_start_angle_degrees,(int)360);
            		}
HXLINE(  61)		if ((::Math_obj::abs(_end_angle_degrees) > (int)360)) {
HXLINE(  61)			_end_angle_degrees = hx::Mod(_end_angle_degrees,(int)360);
            		}
HXLINE(  63)		Float _start_angle_rad = (_start_angle_degrees * ((Float)0.0174532925199432781));
HXLINE(  64)		Float _end_angle_rad = (_end_angle_degrees * ((Float)0.0174532925199432781));
HXLINE(  66)		Float _range = (_end_angle_rad - _start_angle_rad);
HXLINE(  69)		Float theta = ((Float)_range / (Float)_steps);
HXLINE(  71)		Float tangential_factor = ::Math_obj::tan(theta);
HXLINE(  72)		Float radial_factor = ::Math_obj::cos(theta);
HXLINE(  74)		Float x = (_rx * ::Math_obj::cos(_start_angle_rad));
HXLINE(  75)		Float y = (_rx * ::Math_obj::sin(_start_angle_rad));
HXLINE(  79)		Float radial_ratio = ((Float)_rx / (Float)_ry);
HXLINE(  80)		if ((radial_ratio == (int)0)) {
HXLINE(  80)			radial_ratio = ((Float)0.000000001);
            		}
HXLINE(  82)		int _index = (int)0;
HXLINE(  83)		::Array< ::Dynamic> _segment_pos = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  84)		{
HXLINE(  84)			int _g1 = (int)0;
HXDLIN(  84)			int _g = _steps;
HXDLIN(  84)			while((_g1 < _g)){
HXLINE(  84)				_g1 = (_g1 + (int)1);
HXDLIN(  84)				int i = (_g1 - (int)1);
HXLINE(  86)				Float _hx___x = x;
HXLINE(  87)				Float _hx___y = ((Float)y / (Float)radial_ratio);
HXLINE(  90)				 ::phoenix::Vector _seg =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx___x,_hx___y,null(),null());
HXLINE(  92)				_segment_pos->push(_seg);
HXLINE(  95)				this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX ,_seg,this->color,null()));
HXLINE(  98)				if ((_index > (int)0)) {
HXLINE(  99)					 ::phoenix::Vector prevvert = _segment_pos->__get(_index).StaticCast<  ::phoenix::Vector >();
HXLINE( 100)					this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,prevvert->x,prevvert->y,prevvert->z,prevvert->w),this->color,null()));
            				}
HXLINE( 103)				Float tx = -(y);
HXLINE( 104)				Float ty = x;
HXLINE( 106)				x = (x + (tx * tangential_factor));
HXLINE( 107)				y = (y + (ty * tangential_factor));
HXLINE( 109)				x = (x * radial_factor);
HXLINE( 110)				y = (y * radial_factor);
HXLINE( 112)				_index = (_index + (int)1);
            			}
            		}
HXLINE( 117)		if ((_segment_pos->length > (int)0)) {
HXLINE( 118)			 ::phoenix::Vector _this = _segment_pos->__get((int)0).StaticCast<  ::phoenix::Vector >();
HXDLIN( 118)			 ::phoenix::Vector _hx_tmp =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_this->x,_this->y,_this->z,_this->w);
HXDLIN( 118)			this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX ,_hx_tmp,this->color,null()));
            		}
HXLINE( 122)		{
HXLINE( 122)			 ::phoenix::Transform _this1 = this->transform;
HXDLIN( 122)			 ::phoenix::Vector value =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_x,_y,null(),null());
HXDLIN( 122)			{
HXLINE( 122)				 ::phoenix::Spatial _this2 = _this1->local;
HXDLIN( 122)				_this2->pos = value;
HXDLIN( 122)				if (hx::IsNotNull( value )) {
HXLINE( 122)					{
HXLINE( 122)						 ::phoenix::Vector _v = _this2->pos;
HXDLIN( 122)						 ::Dynamic listener = _this2->_pos_change_dyn();
HXDLIN( 122)						_v->listen_x = listener;
HXDLIN( 122)						_v->listen_y = listener;
HXDLIN( 122)						_v->listen_z = listener;
            					}
HXDLIN( 122)					{
HXLINE( 122)						bool _hx_tmp1;
HXDLIN( 122)						if (hx::IsNotNull( _this2->pos_changed )) {
HXLINE( 122)							_hx_tmp1 = !(_this2->ignore_listeners);
            						}
            						else {
HXLINE( 122)							_hx_tmp1 = false;
            						}
HXDLIN( 122)						if (_hx_tmp1) {
HXLINE( 122)							_this2->pos_changed(_this2->pos);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(RingGeometry_obj,set,(void))


hx::ObjectPtr< RingGeometry_obj > RingGeometry_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< RingGeometry_obj > __this = new RingGeometry_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< RingGeometry_obj > RingGeometry_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	RingGeometry_obj *__this = (RingGeometry_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RingGeometry_obj), true, "phoenix.geometry.RingGeometry"));
	*(void **)__this = RingGeometry_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

RingGeometry_obj::RingGeometry_obj()
{
}

hx::Val RingGeometry_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *RingGeometry_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *RingGeometry_obj_sStaticStorageInfo = 0;
#endif

static ::String RingGeometry_obj_sMemberFields[] = {
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void RingGeometry_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RingGeometry_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RingGeometry_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RingGeometry_obj::__mClass,"__mClass");
};

#endif

hx::Class RingGeometry_obj::__mClass;

void RingGeometry_obj::__register()
{
	hx::Object *dummy = new RingGeometry_obj;
	RingGeometry_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.geometry.RingGeometry","\xbf","\xdd","\xe7","\xff");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RingGeometry_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RingGeometry_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RingGeometry_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RingGeometry_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RingGeometry_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RingGeometry_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
} // end namespace geometry
