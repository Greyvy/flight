// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextureCoord
#include <phoenix/geometry/TextureCoord.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextureCoordSet
#include <phoenix/geometry/TextureCoordSet.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Vertex
#include <phoenix/geometry/Vertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4066f22bbcc3478f_16_new,"phoenix.geometry.Vertex","new",0xe0535453,"phoenix.geometry.Vertex.new","phoenix/geometry/Vertex.hx",16,0xf444629d)
HX_LOCAL_STACK_FRAME(_hx_pos_4066f22bbcc3478f_26_clone,"phoenix.geometry.Vertex","clone",0xca41ba10,"phoenix.geometry.Vertex.clone","phoenix/geometry/Vertex.hx",26,0xf444629d)
HX_LOCAL_STACK_FRAME(_hx_pos_4066f22bbcc3478f_35_destroy,"phoenix.geometry.Vertex","destroy",0xd862266d,"phoenix.geometry.Vertex.destroy","phoenix/geometry/Vertex.hx",35,0xf444629d)
namespace phoenix{
namespace geometry{

void Vertex_obj::__construct( ::phoenix::Vector _pos, ::phoenix::Color _color, ::phoenix::Vector _normal){
            	HX_GC_STACKFRAME(&_hx_pos_4066f22bbcc3478f_16_new)
HXLINE(  18)		this->uv =  ::phoenix::geometry::TextureCoordSet_obj::__alloc( HX_CTX );
HXLINE(  20)		this->pos = _pos;
HXLINE(  21)		 ::phoenix::Color _hx_tmp;
HXDLIN(  21)		if (hx::IsNull( _color )) {
HXLINE(  21)			_hx_tmp =  ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
            		else {
HXLINE(  21)			_hx_tmp = _color;
            		}
HXDLIN(  21)		this->color = _hx_tmp;
HXLINE(  22)		 ::phoenix::Vector _hx_tmp1;
HXDLIN(  22)		if (hx::IsNull( _normal )) {
HXLINE(  22)			_hx_tmp1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
            		else {
HXLINE(  22)			_hx_tmp1 = _normal;
            		}
HXDLIN(  22)		this->normal = _hx_tmp1;
            	}

Dynamic Vertex_obj::__CreateEmpty() { return new Vertex_obj; }

void *Vertex_obj::_hx_vtable = 0;

Dynamic Vertex_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vertex_obj > _hx_result = new Vertex_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Vertex_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5b12e421;
}

 ::phoenix::geometry::Vertex Vertex_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_4066f22bbcc3478f_26_clone)
HXLINE(  28)		 ::phoenix::Vector _this = this->pos;
HXDLIN(  28)		 ::phoenix::Vector _new =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_this->x,_this->y,_this->z,_this->w);
HXDLIN(  28)		 ::phoenix::Color _new1 = this->color->clone();
HXDLIN(  28)		 ::phoenix::Vector _this1 = this->normal;
HXDLIN(  28)		 ::phoenix::geometry::Vertex _new2 =  ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX ,_new,_new1, ::phoenix::Vector_obj::__alloc( HX_CTX ,_this1->x,_this1->y,_this1->z,_this1->w));
HXLINE(  29)		 ::phoenix::geometry::TextureCoordSet _this2 = this->uv;
HXDLIN(  29)		 ::phoenix::geometry::TextureCoordSet _set =  ::phoenix::geometry::TextureCoordSet_obj::__alloc( HX_CTX );
HXDLIN(  29)		{
HXLINE(  29)			 ::phoenix::geometry::TextureCoord _this3 = _set->uv0;
HXDLIN(  29)			_this3->u = _this2->uv0->u;
HXDLIN(  29)			_this3->v = _this2->uv0->v;
HXDLIN(  29)			_this3->w = _this2->uv0->w;
HXDLIN(  29)			_this3->t = _this2->uv0->t;
            		}
HXDLIN(  29)		{
HXLINE(  29)			 ::phoenix::geometry::TextureCoord _this4 = _set->uv1;
HXDLIN(  29)			_this4->u = _this2->uv1->u;
HXDLIN(  29)			_this4->v = _this2->uv1->v;
HXDLIN(  29)			_this4->w = _this2->uv1->w;
HXDLIN(  29)			_this4->t = _this2->uv1->t;
            		}
HXDLIN(  29)		{
HXLINE(  29)			 ::phoenix::geometry::TextureCoord _this5 = _set->uv2;
HXDLIN(  29)			_this5->u = _this2->uv2->u;
HXDLIN(  29)			_this5->v = _this2->uv2->v;
HXDLIN(  29)			_this5->w = _this2->uv2->w;
HXDLIN(  29)			_this5->t = _this2->uv2->t;
            		}
HXDLIN(  29)		{
HXLINE(  29)			 ::phoenix::geometry::TextureCoord _this6 = _set->uv3;
HXDLIN(  29)			_this6->u = _this2->uv3->u;
HXDLIN(  29)			_this6->v = _this2->uv3->v;
HXDLIN(  29)			_this6->w = _this2->uv3->w;
HXDLIN(  29)			_this6->t = _this2->uv3->t;
            		}
HXDLIN(  29)		{
HXLINE(  29)			 ::phoenix::geometry::TextureCoord _this7 = _set->uv4;
HXDLIN(  29)			_this7->u = _this2->uv4->u;
HXDLIN(  29)			_this7->v = _this2->uv4->v;
HXDLIN(  29)			_this7->w = _this2->uv4->w;
HXDLIN(  29)			_this7->t = _this2->uv4->t;
            		}
HXDLIN(  29)		{
HXLINE(  29)			 ::phoenix::geometry::TextureCoord _this8 = _set->uv5;
HXDLIN(  29)			_this8->u = _this2->uv5->u;
HXDLIN(  29)			_this8->v = _this2->uv5->v;
HXDLIN(  29)			_this8->w = _this2->uv5->w;
HXDLIN(  29)			_this8->t = _this2->uv5->t;
            		}
HXDLIN(  29)		{
HXLINE(  29)			 ::phoenix::geometry::TextureCoord _this9 = _set->uv6;
HXDLIN(  29)			_this9->u = _this2->uv6->u;
HXDLIN(  29)			_this9->v = _this2->uv6->v;
HXDLIN(  29)			_this9->w = _this2->uv6->w;
HXDLIN(  29)			_this9->t = _this2->uv6->t;
            		}
HXDLIN(  29)		{
HXLINE(  29)			 ::phoenix::geometry::TextureCoord _this10 = _set->uv7;
HXDLIN(  29)			_this10->u = _this2->uv7->u;
HXDLIN(  29)			_this10->v = _this2->uv7->v;
HXDLIN(  29)			_this10->w = _this2->uv7->w;
HXDLIN(  29)			_this10->t = _this2->uv7->t;
            		}
HXDLIN(  29)		_new2->uv = _set;
HXLINE(  31)		return _new2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vertex_obj,clone,return )

void Vertex_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_4066f22bbcc3478f_35_destroy)
HXLINE(  36)		this->pos = null();
HXLINE(  37)		this->color = null();
HXLINE(  38)		this->normal = null();
HXLINE(  39)		{
HXLINE(  39)			 ::phoenix::geometry::TextureCoordSet _this = this->uv;
HXDLIN(  39)			_this->uv0 = null();
HXDLIN(  39)			_this->uv1 = null();
HXDLIN(  39)			_this->uv2 = null();
HXDLIN(  39)			_this->uv3 = null();
HXDLIN(  39)			_this->uv4 = null();
HXDLIN(  39)			_this->uv5 = null();
HXDLIN(  39)			_this->uv6 = null();
HXDLIN(  39)			_this->uv7 = null();
            		}
HXLINE(  40)		this->uv = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vertex_obj,destroy,(void))


hx::ObjectPtr< Vertex_obj > Vertex_obj::__new( ::phoenix::Vector _pos, ::phoenix::Color _color, ::phoenix::Vector _normal) {
	hx::ObjectPtr< Vertex_obj > __this = new Vertex_obj();
	__this->__construct(_pos,_color,_normal);
	return __this;
}

hx::ObjectPtr< Vertex_obj > Vertex_obj::__alloc(hx::Ctx *_hx_ctx, ::phoenix::Vector _pos, ::phoenix::Color _color, ::phoenix::Vector _normal) {
	Vertex_obj *__this = (Vertex_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vertex_obj), true, "phoenix.geometry.Vertex"));
	*(void **)__this = Vertex_obj::_hx_vtable;
	__this->__construct(_pos,_color,_normal);
	return __this;
}

Vertex_obj::Vertex_obj()
{
}

void Vertex_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Vertex);
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(uv,"uv");
	HX_MARK_MEMBER_NAME(normal,"normal");
	HX_MARK_END_CLASS();
}

void Vertex_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(uv,"uv");
	HX_VISIT_MEMBER_NAME(normal,"normal");
}

hx::Val Vertex_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { return hx::Val( uv ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { return hx::Val( normal ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Vertex_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { uv=inValue.Cast<  ::phoenix::geometry::TextureCoordSet >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast<  ::phoenix::Color >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { normal=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vertex_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("uv","\x61","\x66","\x00","\x00"));
	outFields->push(HX_HCSTRING("normal","\x27","\x72","\x69","\x30"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Vertex_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Vertex_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{hx::fsObject /*::phoenix::Color*/ ,(int)offsetof(Vertex_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsObject /*::phoenix::geometry::TextureCoordSet*/ ,(int)offsetof(Vertex_obj,uv),HX_HCSTRING("uv","\x61","\x66","\x00","\x00")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Vertex_obj,normal),HX_HCSTRING("normal","\x27","\x72","\x69","\x30")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Vertex_obj_sStaticStorageInfo = 0;
#endif

static ::String Vertex_obj_sMemberFields[] = {
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("uv","\x61","\x66","\x00","\x00"),
	HX_HCSTRING("normal","\x27","\x72","\x69","\x30"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void Vertex_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vertex_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vertex_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vertex_obj::__mClass,"__mClass");
};

#endif

hx::Class Vertex_obj::__mClass;

void Vertex_obj::__register()
{
	hx::Object *dummy = new Vertex_obj;
	Vertex_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.geometry.Vertex","\xe1","\x2e","\xc0","\xe5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Vertex_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vertex_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vertex_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vertex_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vertex_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vertex_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
} // end namespace geometry
