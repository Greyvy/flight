// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_luxe_utils_Utils
#include <luxe/utils/Utils.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_GeometryState
#include <phoenix/geometry/GeometryState.h>
#endif
#ifndef INCLUDED_phoenix_geometry_QuadPackGeometry
#include <phoenix/geometry/QuadPackGeometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextureCoord
#include <phoenix/geometry/TextureCoord.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextureCoordSet
#include <phoenix/geometry/TextureCoordSet.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Vertex
#include <phoenix/geometry/Vertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fba5c10a7cd74b2b_47_new,"phoenix.geometry.QuadPackGeometry","new",0x49f65041,"phoenix.geometry.QuadPackGeometry.new","phoenix/geometry/QuadPackGeometry.hx",47,0xc786266f)
HX_LOCAL_STACK_FRAME(_hx_pos_fba5c10a7cd74b2b_59_clear,"phoenix.geometry.QuadPackGeometry","clear",0x1f866bae,"phoenix.geometry.QuadPackGeometry.clear","phoenix/geometry/QuadPackGeometry.hx",59,0xc786266f)
HX_LOCAL_STACK_FRAME(_hx_pos_fba5c10a7cd74b2b_65_quad_add,"phoenix.geometry.QuadPackGeometry","quad_add",0xb0962fe8,"phoenix.geometry.QuadPackGeometry.quad_add","phoenix/geometry/QuadPackGeometry.hx",65,0xc786266f)
HX_LOCAL_STACK_FRAME(_hx_pos_fba5c10a7cd74b2b_126_quad_remove,"phoenix.geometry.QuadPackGeometry","quad_remove",0x6149f4dd,"phoenix.geometry.QuadPackGeometry.quad_remove","phoenix/geometry/QuadPackGeometry.hx",126,0xc786266f)
HX_LOCAL_STACK_FRAME(_hx_pos_fba5c10a7cd74b2b_148_quad_visible,"phoenix.geometry.QuadPackGeometry","quad_visible",0x6f90a5b9,"phoenix.geometry.QuadPackGeometry.quad_visible","phoenix/geometry/QuadPackGeometry.hx",148,0xc786266f)
HX_LOCAL_STACK_FRAME(_hx_pos_fba5c10a7cd74b2b_186_quad_resize,"phoenix.geometry.QuadPackGeometry","quad_resize",0x653cb28d,"phoenix.geometry.QuadPackGeometry.quad_resize","phoenix/geometry/QuadPackGeometry.hx",186,0xc786266f)
HX_LOCAL_STACK_FRAME(_hx_pos_fba5c10a7cd74b2b_207_quad_pos,"phoenix.geometry.QuadPackGeometry","quad_pos",0xb0a19b5b,"phoenix.geometry.QuadPackGeometry.quad_pos","phoenix/geometry/QuadPackGeometry.hx",207,0xc786266f)
HX_LOCAL_STACK_FRAME(_hx_pos_fba5c10a7cd74b2b_241_quad_color,"phoenix.geometry.QuadPackGeometry","quad_color",0xd488eeea,"phoenix.geometry.QuadPackGeometry.quad_color","phoenix/geometry/QuadPackGeometry.hx",241,0xc786266f)
HX_LOCAL_STACK_FRAME(_hx_pos_fba5c10a7cd74b2b_256_quad_alpha,"phoenix.geometry.QuadPackGeometry","quad_alpha",0xabc324e5,"phoenix.geometry.QuadPackGeometry.quad_alpha","phoenix/geometry/QuadPackGeometry.hx",256,0xc786266f)
HX_LOCAL_STACK_FRAME(_hx_pos_fba5c10a7cd74b2b_271_quad_uv_space,"phoenix.geometry.QuadPackGeometry","quad_uv_space",0xde7c2a01,"phoenix.geometry.QuadPackGeometry.quad_uv_space","phoenix/geometry/QuadPackGeometry.hx",271,0xc786266f)
HX_LOCAL_STACK_FRAME(_hx_pos_fba5c10a7cd74b2b_349_quad_uv,"phoenix.geometry.QuadPackGeometry","quad_uv",0x72713e7a,"phoenix.geometry.QuadPackGeometry.quad_uv","phoenix/geometry/QuadPackGeometry.hx",349,0xc786266f)
HX_LOCAL_STACK_FRAME(_hx_pos_fba5c10a7cd74b2b_365_quad_flipx,"phoenix.geometry.QuadPackGeometry","quad_flipx",0x8cbec2b2,"phoenix.geometry.QuadPackGeometry.quad_flipx","phoenix/geometry/QuadPackGeometry.hx",365,0xc786266f)
HX_LOCAL_STACK_FRAME(_hx_pos_fba5c10a7cd74b2b_376_quad_flipy,"phoenix.geometry.QuadPackGeometry","quad_flipy",0x8cbec2b3,"phoenix.geometry.QuadPackGeometry.quad_flipy","phoenix/geometry/QuadPackGeometry.hx",376,0xc786266f)
namespace phoenix{
namespace geometry{

void QuadPackGeometry_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_fba5c10a7cd74b2b_47_new)
HXLINE(  49)		_options->__SetField(HX_("primitive_type",92,c8,6d,88),(int)4,hx::paccDynamic);
HXLINE(  51)		super::__construct(_options);
HXLINE(  53)		this->quads =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}

Dynamic QuadPackGeometry_obj::__CreateEmpty() { return new QuadPackGeometry_obj; }

void *QuadPackGeometry_obj::_hx_vtable = 0;

Dynamic QuadPackGeometry_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< QuadPackGeometry_obj > _hx_result = new QuadPackGeometry_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool QuadPackGeometry_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6c1faa93) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x6c1faa93;
	} else {
		return inClassId==(int)0x7b699af3;
	}
}

void QuadPackGeometry_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_fba5c10a7cd74b2b_59_clear)
HXDLIN(  59)		 ::Dynamic q = this->quads->keys();
HXDLIN(  59)		while(( (bool)(q->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN(  59)			int q1 = ( (int)(q->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  60)			this->quad_remove(q1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(QuadPackGeometry_obj,clear,(void))

int QuadPackGeometry_obj::quad_add( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_fba5c10a7cd74b2b_65_quad_add)
HXLINE(  67)		if (hx::IsNull( _options->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic) )) {
HXLINE(  67)			_options->__SetField(HX_("visible",72,78,24,a3),true,hx::paccDynamic);
            		}
HXLINE(  68)		if (hx::IsNull( _options->__Field(HX_("flipx",2b,45,92,02),hx::paccDynamic) )) {
HXLINE(  68)			_options->__SetField(HX_("flipx",2b,45,92,02),false,hx::paccDynamic);
            		}
HXLINE(  69)		if (hx::IsNull( _options->__Field(HX_("flipy",2c,45,92,02),hx::paccDynamic) )) {
HXLINE(  69)			_options->__SetField(HX_("flipy",2c,45,92,02),false,hx::paccDynamic);
            		}
HXLINE(  71)		int _uid = ::Luxe_obj::utils->uniquehash();
HXLINE(  74)		 ::phoenix::geometry::Vertex vert0 =  ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX , ::Dynamic(_options->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(_options->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),null(),null()), ::Dynamic(_options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)),null());
HXLINE(  75)		 ::phoenix::geometry::Vertex vert1 =  ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,(( (Float)(_options->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) + ( (Float)(_options->__Field(HX_("w",77,00,00,00),hx::paccDynamic)) )), ::Dynamic(_options->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),null(),null()), ::Dynamic(_options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)),null());
HXLINE(  76)		Float vert2 = (( (Float)(_options->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) + ( (Float)(_options->__Field(HX_("w",77,00,00,00),hx::paccDynamic)) ));
HXDLIN(  76)		 ::phoenix::geometry::Vertex vert21 =  ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,vert2,(( (Float)(_options->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) + ( (Float)(_options->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) )),null(),null()), ::Dynamic(_options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)),null());
HXLINE(  79)		Float _options1 = ( (Float)(_options->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(  79)		 ::phoenix::geometry::Vertex vert3 =  ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,_options1,(( (Float)(_options->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) + ( (Float)(_options->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) )),null(),null()), ::Dynamic(_options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)),null());
HXLINE(  80)		 ::phoenix::geometry::Vertex vert4 =  ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX , ::Dynamic(_options->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(_options->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),null(),null()), ::Dynamic(_options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)),null());
HXLINE(  81)		Float vert5 = (( (Float)(_options->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) + ( (Float)(_options->__Field(HX_("w",77,00,00,00),hx::paccDynamic)) ));
HXDLIN(  81)		 ::phoenix::geometry::Vertex vert51 =  ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,vert5,(( (Float)(_options->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) + ( (Float)(_options->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) )),null(),null()), ::Dynamic(_options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)),null());
HXLINE(  84)		this->add(vert0);
HXLINE(  86)		this->add(vert1);
HXLINE(  88)		this->add(vert21);
HXLINE(  90)		this->add(vert3);
HXLINE(  92)		this->add(vert4);
HXLINE(  94)		this->add(vert51);
HXLINE( 100)		 ::Dynamic _options2 = _options->__Field(HX_("flipx",2b,45,92,02),hx::paccDynamic);
HXLINE( 101)		 ::Dynamic _options3 = _options->__Field(HX_("flipx",2b,45,92,02),hx::paccDynamic);
HXLINE( 102)		 ::Dynamic _options4 = _options->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic);
HXLINE(  97)		 ::Dynamic _quad =  ::Dynamic(hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("visible",72,78,24,a3),_options4)
            			->setFixed(1,HX_("_uv_cache",03,be,84,d3), ::phoenix::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)1,(int)1))
            			->setFixed(2,HX_("uid",90,23,59,00),_uid)
            			->setFixed(3,HX_("flipx",2b,45,92,02),_options2)
            			->setFixed(4,HX_("flipy",2c,45,92,02),_options3)
            			->setFixed(5,HX_("verts",a2,e6,61,34),::Array_obj< ::Dynamic>::__new(0)));
HXLINE( 106)		( (::Array< ::Dynamic>)(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic)) )->push(vert0);
HXLINE( 107)		( (::Array< ::Dynamic>)(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic)) )->push(vert1);
HXLINE( 108)		( (::Array< ::Dynamic>)(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic)) )->push(vert21);
HXLINE( 109)		( (::Array< ::Dynamic>)(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic)) )->push(vert3);
HXLINE( 110)		( (::Array< ::Dynamic>)(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic)) )->push(vert4);
HXLINE( 111)		( (::Array< ::Dynamic>)(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic)) )->push(vert51);
HXLINE( 113)		this->quads->set(_uid,_quad);
HXLINE( 115)		if (hx::IsNotNull( ( ( ::phoenix::Rectangle)(_options->__Field(HX_("uv",61,66,00,00),hx::paccDynamic)) ) )) {
HXLINE( 116)			this->quad_uv(_uid,( ( ::phoenix::Rectangle)(_options->__Field(HX_("uv",61,66,00,00),hx::paccDynamic)) ));
            		}
HXLINE( 120)		this->set_dirty(true);
HXLINE( 122)		return _uid;
            	}


HX_DEFINE_DYNAMIC_FUNC1(QuadPackGeometry_obj,quad_add,return )

void QuadPackGeometry_obj::quad_remove(int _quad_id){
            	HX_STACKFRAME(&_hx_pos_fba5c10a7cd74b2b_126_quad_remove)
HXLINE( 128)		 ::Dynamic _quad = this->quads->get(_quad_id);
HXLINE( 130)		if (hx::IsNotNull( _quad )) {
HXLINE( 132)			this->remove(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)0)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 133)			this->remove(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)1)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 134)			this->remove(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)2)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 135)			this->remove(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)3)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 136)			this->remove(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)4)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 137)			this->remove(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)5)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 139)			this->quads->remove(_quad_id);
HXLINE( 142)			this->set_dirty(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(QuadPackGeometry_obj,quad_remove,(void))

void QuadPackGeometry_obj::quad_visible(int _quad_id,bool visible){
            	HX_STACKFRAME(&_hx_pos_fba5c10a7cd74b2b_148_quad_visible)
HXLINE( 150)		 ::Dynamic _quad = this->quads->get(_quad_id);
HXLINE( 152)		if (hx::IsNotNull( _quad )) {
HXLINE( 155)			bool _hx_tmp;
HXDLIN( 155)			if (visible) {
HXLINE( 155)				_hx_tmp = !(( (bool)(_quad->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ));
            			}
            			else {
HXLINE( 155)				_hx_tmp = false;
            			}
HXDLIN( 155)			if (_hx_tmp) {
HXLINE( 157)				_quad->__SetField(HX_("visible",72,78,24,a3),false,hx::paccDynamic);
HXLINE( 159)				this->add(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)0)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 160)				this->add(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)1)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 161)				this->add(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)2)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 162)				this->add(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)3)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 163)				this->add(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)4)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 164)				this->add(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)5)).StaticCast<  ::phoenix::geometry::Vertex >());
            			}
            			else {
HXLINE( 166)				bool _hx_tmp1;
HXDLIN( 166)				if (!(visible)) {
HXLINE( 166)					_hx_tmp1 = ( (bool)(_quad->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) );
            				}
            				else {
HXLINE( 166)					_hx_tmp1 = false;
            				}
HXDLIN( 166)				if (_hx_tmp1) {
HXLINE( 168)					_quad->__SetField(HX_("visible",72,78,24,a3),false,hx::paccDynamic);
HXLINE( 170)					this->remove(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)0)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 171)					this->remove(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)1)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 172)					this->remove(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)2)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 173)					this->remove(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)3)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 174)					this->remove(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)4)).StaticCast<  ::phoenix::geometry::Vertex >());
HXLINE( 175)					this->remove(Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)5)).StaticCast<  ::phoenix::geometry::Vertex >());
            				}
            			}
HXLINE( 180)			this->set_dirty(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(QuadPackGeometry_obj,quad_visible,(void))

void QuadPackGeometry_obj::quad_resize(int _quad_id, ::phoenix::Rectangle _size){
            	HX_GC_STACKFRAME(&_hx_pos_fba5c10a7cd74b2b_186_quad_resize)
HXLINE( 188)		 ::Dynamic _quad = this->quads->get(_quad_id);
HXLINE( 190)		if (hx::IsNotNull( _quad )) {
HXLINE( 192)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)0)).StaticCast<  ::phoenix::geometry::Vertex >()->pos =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_size->x,_size->y,null(),null());
HXLINE( 193)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)1)).StaticCast<  ::phoenix::geometry::Vertex >()->pos =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(_size->x + _size->w),_size->y,null(),null());
HXLINE( 194)			Float _hx_tmp = (_size->x + _size->w);
HXDLIN( 194)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)2)).StaticCast<  ::phoenix::geometry::Vertex >()->pos =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,(_size->y + _size->h),null(),null());
HXLINE( 196)			Float _size1 = _size->x;
HXDLIN( 196)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)3)).StaticCast<  ::phoenix::geometry::Vertex >()->pos =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_size1,(_size->y + _size->h),null(),null());
HXLINE( 197)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)4)).StaticCast<  ::phoenix::geometry::Vertex >()->pos =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_size->x,_size->y,null(),null());
HXLINE( 198)			Float _hx_tmp1 = (_size->x + _size->w);
HXDLIN( 198)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)5)).StaticCast<  ::phoenix::geometry::Vertex >()->pos =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp1,(_size->y + _size->h),null(),null());
HXLINE( 201)			this->set_dirty(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(QuadPackGeometry_obj,quad_resize,(void))

void QuadPackGeometry_obj::quad_pos(int _quad_id, ::phoenix::Vector _p){
            	HX_STACKFRAME(&_hx_pos_fba5c10a7cd74b2b_207_quad_pos)
HXLINE( 209)		 ::Dynamic _quad = this->quads->get(_quad_id);
HXLINE( 211)		if (hx::IsNotNull( _quad )) {
HXLINE( 213)			Float _diffx = (_p->x - Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)0)).StaticCast<  ::phoenix::geometry::Vertex >()->pos->x);
HXLINE( 214)			Float _diffy = (_p->y - Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)0)).StaticCast<  ::phoenix::geometry::Vertex >()->pos->y);
HXLINE( 216)			{
HXLINE( 216)				 ::phoenix::Vector _g = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)0)).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 216)				{
HXLINE( 216)					Float _x = (_g->x + _diffx);
HXDLIN( 216)					_g->x = _x;
HXDLIN( 216)					if (!(_g->_construct)) {
HXLINE( 216)						bool _hx_tmp;
HXDLIN( 216)						if (hx::IsNotNull( _g->listen_x )) {
HXLINE( 216)							_hx_tmp = !(_g->ignore_listeners);
            						}
            						else {
HXLINE( 216)							_hx_tmp = false;
            						}
HXDLIN( 216)						if (_hx_tmp) {
HXLINE( 216)							_g->listen_x(_x);
            						}
            					}
            				}
            			}
HXLINE( 217)			{
HXLINE( 217)				 ::phoenix::Vector _g1 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)0)).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 217)				{
HXLINE( 217)					Float _y = (_g1->y + _diffy);
HXDLIN( 217)					_g1->y = _y;
HXDLIN( 217)					if (!(_g1->_construct)) {
HXLINE( 217)						bool _hx_tmp1;
HXDLIN( 217)						if (hx::IsNotNull( _g1->listen_y )) {
HXLINE( 217)							_hx_tmp1 = !(_g1->ignore_listeners);
            						}
            						else {
HXLINE( 217)							_hx_tmp1 = false;
            						}
HXDLIN( 217)						if (_hx_tmp1) {
HXLINE( 217)							_g1->listen_y(_y);
            						}
            					}
            				}
            			}
HXLINE( 219)			{
HXLINE( 219)				 ::phoenix::Vector _g2 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)1)).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 219)				{
HXLINE( 219)					Float _x1 = (_g2->x + _diffx);
HXDLIN( 219)					_g2->x = _x1;
HXDLIN( 219)					if (!(_g2->_construct)) {
HXLINE( 219)						bool _hx_tmp2;
HXDLIN( 219)						if (hx::IsNotNull( _g2->listen_x )) {
HXLINE( 219)							_hx_tmp2 = !(_g2->ignore_listeners);
            						}
            						else {
HXLINE( 219)							_hx_tmp2 = false;
            						}
HXDLIN( 219)						if (_hx_tmp2) {
HXLINE( 219)							_g2->listen_x(_x1);
            						}
            					}
            				}
            			}
HXLINE( 220)			{
HXLINE( 220)				 ::phoenix::Vector _g3 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)1)).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 220)				{
HXLINE( 220)					Float _y1 = (_g3->y + _diffy);
HXDLIN( 220)					_g3->y = _y1;
HXDLIN( 220)					if (!(_g3->_construct)) {
HXLINE( 220)						bool _hx_tmp3;
HXDLIN( 220)						if (hx::IsNotNull( _g3->listen_y )) {
HXLINE( 220)							_hx_tmp3 = !(_g3->ignore_listeners);
            						}
            						else {
HXLINE( 220)							_hx_tmp3 = false;
            						}
HXDLIN( 220)						if (_hx_tmp3) {
HXLINE( 220)							_g3->listen_y(_y1);
            						}
            					}
            				}
            			}
HXLINE( 222)			{
HXLINE( 222)				 ::phoenix::Vector _g4 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)2)).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 222)				{
HXLINE( 222)					Float _x2 = (_g4->x + _diffx);
HXDLIN( 222)					_g4->x = _x2;
HXDLIN( 222)					if (!(_g4->_construct)) {
HXLINE( 222)						bool _hx_tmp4;
HXDLIN( 222)						if (hx::IsNotNull( _g4->listen_x )) {
HXLINE( 222)							_hx_tmp4 = !(_g4->ignore_listeners);
            						}
            						else {
HXLINE( 222)							_hx_tmp4 = false;
            						}
HXDLIN( 222)						if (_hx_tmp4) {
HXLINE( 222)							_g4->listen_x(_x2);
            						}
            					}
            				}
            			}
HXLINE( 223)			{
HXLINE( 223)				 ::phoenix::Vector _g5 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)2)).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 223)				{
HXLINE( 223)					Float _y2 = (_g5->y + _diffy);
HXDLIN( 223)					_g5->y = _y2;
HXDLIN( 223)					if (!(_g5->_construct)) {
HXLINE( 223)						bool _hx_tmp5;
HXDLIN( 223)						if (hx::IsNotNull( _g5->listen_y )) {
HXLINE( 223)							_hx_tmp5 = !(_g5->ignore_listeners);
            						}
            						else {
HXLINE( 223)							_hx_tmp5 = false;
            						}
HXDLIN( 223)						if (_hx_tmp5) {
HXLINE( 223)							_g5->listen_y(_y2);
            						}
            					}
            				}
            			}
HXLINE( 225)			{
HXLINE( 225)				 ::phoenix::Vector _g6 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)3)).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 225)				{
HXLINE( 225)					Float _x3 = (_g6->x + _diffx);
HXDLIN( 225)					_g6->x = _x3;
HXDLIN( 225)					if (!(_g6->_construct)) {
HXLINE( 225)						bool _hx_tmp6;
HXDLIN( 225)						if (hx::IsNotNull( _g6->listen_x )) {
HXLINE( 225)							_hx_tmp6 = !(_g6->ignore_listeners);
            						}
            						else {
HXLINE( 225)							_hx_tmp6 = false;
            						}
HXDLIN( 225)						if (_hx_tmp6) {
HXLINE( 225)							_g6->listen_x(_x3);
            						}
            					}
            				}
            			}
HXLINE( 226)			{
HXLINE( 226)				 ::phoenix::Vector _g7 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)3)).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 226)				{
HXLINE( 226)					Float _y3 = (_g7->y + _diffy);
HXDLIN( 226)					_g7->y = _y3;
HXDLIN( 226)					if (!(_g7->_construct)) {
HXLINE( 226)						bool _hx_tmp7;
HXDLIN( 226)						if (hx::IsNotNull( _g7->listen_y )) {
HXLINE( 226)							_hx_tmp7 = !(_g7->ignore_listeners);
            						}
            						else {
HXLINE( 226)							_hx_tmp7 = false;
            						}
HXDLIN( 226)						if (_hx_tmp7) {
HXLINE( 226)							_g7->listen_y(_y3);
            						}
            					}
            				}
            			}
HXLINE( 228)			{
HXLINE( 228)				 ::phoenix::Vector _g8 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)4)).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 228)				{
HXLINE( 228)					Float _x4 = (_g8->x + _diffx);
HXDLIN( 228)					_g8->x = _x4;
HXDLIN( 228)					if (!(_g8->_construct)) {
HXLINE( 228)						bool _hx_tmp8;
HXDLIN( 228)						if (hx::IsNotNull( _g8->listen_x )) {
HXLINE( 228)							_hx_tmp8 = !(_g8->ignore_listeners);
            						}
            						else {
HXLINE( 228)							_hx_tmp8 = false;
            						}
HXDLIN( 228)						if (_hx_tmp8) {
HXLINE( 228)							_g8->listen_x(_x4);
            						}
            					}
            				}
            			}
HXLINE( 229)			{
HXLINE( 229)				 ::phoenix::Vector _g9 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)4)).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 229)				{
HXLINE( 229)					Float _y4 = (_g9->y + _diffy);
HXDLIN( 229)					_g9->y = _y4;
HXDLIN( 229)					if (!(_g9->_construct)) {
HXLINE( 229)						bool _hx_tmp9;
HXDLIN( 229)						if (hx::IsNotNull( _g9->listen_y )) {
HXLINE( 229)							_hx_tmp9 = !(_g9->ignore_listeners);
            						}
            						else {
HXLINE( 229)							_hx_tmp9 = false;
            						}
HXDLIN( 229)						if (_hx_tmp9) {
HXLINE( 229)							_g9->listen_y(_y4);
            						}
            					}
            				}
            			}
HXLINE( 231)			{
HXLINE( 231)				 ::phoenix::Vector _g10 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)5)).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 231)				{
HXLINE( 231)					Float _x5 = (_g10->x + _diffx);
HXDLIN( 231)					_g10->x = _x5;
HXDLIN( 231)					if (!(_g10->_construct)) {
HXLINE( 231)						bool _hx_tmp10;
HXDLIN( 231)						if (hx::IsNotNull( _g10->listen_x )) {
HXLINE( 231)							_hx_tmp10 = !(_g10->ignore_listeners);
            						}
            						else {
HXLINE( 231)							_hx_tmp10 = false;
            						}
HXDLIN( 231)						if (_hx_tmp10) {
HXLINE( 231)							_g10->listen_x(_x5);
            						}
            					}
            				}
            			}
HXLINE( 232)			{
HXLINE( 232)				 ::phoenix::Vector _g11 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)5)).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 232)				{
HXLINE( 232)					Float _y5 = (_g11->y + _diffy);
HXDLIN( 232)					_g11->y = _y5;
HXDLIN( 232)					if (!(_g11->_construct)) {
HXLINE( 232)						bool _hx_tmp11;
HXDLIN( 232)						if (hx::IsNotNull( _g11->listen_y )) {
HXLINE( 232)							_hx_tmp11 = !(_g11->ignore_listeners);
            						}
            						else {
HXLINE( 232)							_hx_tmp11 = false;
            						}
HXDLIN( 232)						if (_hx_tmp11) {
HXLINE( 232)							_g11->listen_y(_y5);
            						}
            					}
            				}
            			}
HXLINE( 235)			this->set_dirty(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(QuadPackGeometry_obj,quad_pos,(void))

void QuadPackGeometry_obj::quad_color(int _quad_id, ::phoenix::Color _c){
            	HX_STACKFRAME(&_hx_pos_fba5c10a7cd74b2b_241_quad_color)
HXLINE( 243)		 ::Dynamic _quad = this->quads->get(_quad_id);
HXLINE( 245)		if (hx::IsNotNull( _quad )) {
HXLINE( 246)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)0)).StaticCast<  ::phoenix::geometry::Vertex >()->color = _c;
HXLINE( 247)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)1)).StaticCast<  ::phoenix::geometry::Vertex >()->color = _c;
HXLINE( 248)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)2)).StaticCast<  ::phoenix::geometry::Vertex >()->color = _c;
HXLINE( 249)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)3)).StaticCast<  ::phoenix::geometry::Vertex >()->color = _c;
HXLINE( 250)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)4)).StaticCast<  ::phoenix::geometry::Vertex >()->color = _c;
HXLINE( 251)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)5)).StaticCast<  ::phoenix::geometry::Vertex >()->color = _c;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(QuadPackGeometry_obj,quad_color,(void))

void QuadPackGeometry_obj::quad_alpha(int _quad_id,Float _a){
            	HX_STACKFRAME(&_hx_pos_fba5c10a7cd74b2b_256_quad_alpha)
HXLINE( 258)		 ::Dynamic _quad = this->quads->get(_quad_id);
HXLINE( 260)		if (hx::IsNotNull( _quad )) {
HXLINE( 261)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)0)).StaticCast<  ::phoenix::geometry::Vertex >()->color->a = _a;
HXLINE( 262)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)1)).StaticCast<  ::phoenix::geometry::Vertex >()->color->a = _a;
HXLINE( 263)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)2)).StaticCast<  ::phoenix::geometry::Vertex >()->color->a = _a;
HXLINE( 264)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)3)).StaticCast<  ::phoenix::geometry::Vertex >()->color->a = _a;
HXLINE( 265)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)4)).StaticCast<  ::phoenix::geometry::Vertex >()->color->a = _a;
HXLINE( 266)			Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)5)).StaticCast<  ::phoenix::geometry::Vertex >()->color->a = _a;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(QuadPackGeometry_obj,quad_alpha,(void))

void QuadPackGeometry_obj::quad_uv_space(int _quad_id, ::phoenix::Rectangle _uv){
            	HX_STACKFRAME(&_hx_pos_fba5c10a7cd74b2b_271_quad_uv_space)
HXLINE( 273)		 ::Dynamic _quad = this->quads->get(_quad_id);
HXLINE( 275)		if (hx::IsNotNull( _quad )) {
HXLINE( 277)			bool flipx = ( (bool)(_quad->__Field(HX_("flipx",2b,45,92,02),hx::paccDynamic)) );
HXLINE( 278)			bool flipy = ( (bool)(_quad->__Field(HX_("flipy",2c,45,92,02),hx::paccDynamic)) );
HXLINE( 281)			Float sz_x = _uv->w;
HXLINE( 282)			Float sz_y = _uv->h;
HXLINE( 285)			Float tl_x = _uv->x;
HXLINE( 286)			Float tl_y = _uv->y;
HXLINE( 289)			( ( ::phoenix::Rectangle)(_quad->__Field(HX_("_uv_cache",03,be,84,d3),hx::paccDynamic)) )->set(tl_x,tl_y,sz_x,sz_y);
HXLINE( 292)			Float tr_x = (tl_x + sz_x);
HXLINE( 293)			Float tr_y = tl_y;
HXLINE( 295)			Float br_x = (tl_x + sz_x);
HXLINE( 296)			Float br_y = (tl_y + sz_y);
HXLINE( 298)			Float bl_x = tl_x;
HXLINE( 299)			Float bl_y = (tl_y + sz_y);
HXLINE( 301)			Float tmp_x = ((Float)0.0);
HXLINE( 302)			Float tmp_y = ((Float)0.0);
HXLINE( 305)			if (flipy) {
HXLINE( 308)				tmp_y = bl_y;
HXLINE( 309)				bl_y = tl_y;
HXLINE( 310)				tl_y = tmp_y;
HXLINE( 313)				tmp_y = br_y;
HXLINE( 314)				br_y = tr_y;
HXLINE( 315)				tr_y = tmp_y;
            			}
HXLINE( 320)			if (flipx) {
HXLINE( 323)				tmp_x = tr_x;
HXLINE( 324)				tr_x = tl_x;
HXLINE( 325)				tl_x = tmp_x;
HXLINE( 328)				tmp_x = br_x;
HXLINE( 329)				br_x = bl_x;
HXLINE( 330)				bl_x = tmp_x;
            			}
HXLINE( 334)			{
HXLINE( 334)				 ::phoenix::geometry::TextureCoord _this = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)0)).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 334)				_this->u = tl_x;
HXDLIN( 334)				_this->v = tl_y;
            			}
HXLINE( 335)			{
HXLINE( 335)				 ::phoenix::geometry::TextureCoord _this1 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)1)).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 335)				_this1->u = tr_x;
HXDLIN( 335)				_this1->v = tr_y;
            			}
HXLINE( 336)			{
HXLINE( 336)				 ::phoenix::geometry::TextureCoord _this2 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)2)).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 336)				_this2->u = br_x;
HXDLIN( 336)				_this2->v = br_y;
            			}
HXLINE( 338)			{
HXLINE( 338)				 ::phoenix::geometry::TextureCoord _this3 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)3)).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 338)				_this3->u = bl_x;
HXDLIN( 338)				_this3->v = bl_y;
            			}
HXLINE( 339)			{
HXLINE( 339)				 ::phoenix::geometry::TextureCoord _this4 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)4)).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 339)				_this4->u = tl_x;
HXDLIN( 339)				_this4->v = tl_y;
            			}
HXLINE( 340)			{
HXLINE( 340)				 ::phoenix::geometry::TextureCoord _this5 = Dynamic(  ::Dynamic(_quad->__Field(HX_("verts",a2,e6,61,34),hx::paccDynamic))->__GetItem((int)5)).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 340)				_this5->u = br_x;
HXDLIN( 340)				_this5->v = br_y;
            			}
HXLINE( 343)			this->set_dirty(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(QuadPackGeometry_obj,quad_uv_space,(void))

void QuadPackGeometry_obj::quad_uv(int _quad_id, ::phoenix::Rectangle _uv){
            	HX_GC_STACKFRAME(&_hx_pos_fba5c10a7cd74b2b_349_quad_uv)
HXLINE( 351)		if (hx::IsNull( this->state->texture )) {
HXLINE( 352)			::haxe::Log_obj::trace(HX_("Warning : calling UV on a PackedQuad Geometry with null texture.",66,55,6c,54),hx::SourceInfo(HX_("QuadPackGeometry.hx",cc,27,26,5e),352,HX_("phoenix.geometry.QuadPackGeometry",cf,1b,1f,2e),HX_("quad_uv",19,ba,fa,3e)));
HXLINE( 353)			return;
            		}
HXLINE( 356)		Float tlx = ((Float)_uv->x / (Float)this->state->texture->width_actual);
HXLINE( 357)		Float tly = ((Float)_uv->y / (Float)this->state->texture->height_actual);
HXLINE( 358)		Float szx = ((Float)_uv->w / (Float)this->state->texture->width_actual);
HXLINE( 359)		Float szy = ((Float)_uv->h / (Float)this->state->texture->height_actual);
HXLINE( 361)		this->quad_uv_space(_quad_id, ::phoenix::Rectangle_obj::__alloc( HX_CTX ,tlx,tly,szx,szy));
            	}


HX_DEFINE_DYNAMIC_FUNC2(QuadPackGeometry_obj,quad_uv,(void))

void QuadPackGeometry_obj::quad_flipx(int _quad_id,bool _flip){
            	HX_STACKFRAME(&_hx_pos_fba5c10a7cd74b2b_365_quad_flipx)
HXLINE( 367)		 ::Dynamic _quad = this->quads->get(_quad_id);
HXLINE( 369)		if (hx::IsNotNull( _quad )) {
HXLINE( 370)			_quad->__SetField(HX_("flipx",2b,45,92,02),_flip,hx::paccDynamic);
HXLINE( 371)			this->quad_uv_space(_quad_id,( ( ::phoenix::Rectangle)(_quad->__Field(HX_("_uv_cache",03,be,84,d3),hx::paccDynamic)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(QuadPackGeometry_obj,quad_flipx,(void))

void QuadPackGeometry_obj::quad_flipy(int _quad_id,bool _flip){
            	HX_STACKFRAME(&_hx_pos_fba5c10a7cd74b2b_376_quad_flipy)
HXLINE( 378)		 ::Dynamic _quad = this->quads->get(_quad_id);
HXLINE( 380)		if (hx::IsNotNull( _quad )) {
HXLINE( 381)			_quad->__SetField(HX_("flipy",2c,45,92,02),_flip,hx::paccDynamic);
HXLINE( 382)			this->quad_uv_space(_quad_id,( ( ::phoenix::Rectangle)(_quad->__Field(HX_("_uv_cache",03,be,84,d3),hx::paccDynamic)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(QuadPackGeometry_obj,quad_flipy,(void))


hx::ObjectPtr< QuadPackGeometry_obj > QuadPackGeometry_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< QuadPackGeometry_obj > __this = new QuadPackGeometry_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< QuadPackGeometry_obj > QuadPackGeometry_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	QuadPackGeometry_obj *__this = (QuadPackGeometry_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(QuadPackGeometry_obj), true, "phoenix.geometry.QuadPackGeometry"));
	*(void **)__this = QuadPackGeometry_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

QuadPackGeometry_obj::QuadPackGeometry_obj()
{
}

void QuadPackGeometry_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(QuadPackGeometry);
	HX_MARK_MEMBER_NAME(quads,"quads");
	 ::phoenix::geometry::Geometry_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void QuadPackGeometry_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(quads,"quads");
	 ::phoenix::geometry::Geometry_obj::__Visit(HX_VISIT_ARG);
}

hx::Val QuadPackGeometry_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"quads") ) { return hx::Val( quads ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quad_uv") ) { return hx::Val( quad_uv_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"quad_add") ) { return hx::Val( quad_add_dyn() ); }
		if (HX_FIELD_EQ(inName,"quad_pos") ) { return hx::Val( quad_pos_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"quad_color") ) { return hx::Val( quad_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"quad_alpha") ) { return hx::Val( quad_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"quad_flipx") ) { return hx::Val( quad_flipx_dyn() ); }
		if (HX_FIELD_EQ(inName,"quad_flipy") ) { return hx::Val( quad_flipy_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"quad_remove") ) { return hx::Val( quad_remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"quad_resize") ) { return hx::Val( quad_resize_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"quad_visible") ) { return hx::Val( quad_visible_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"quad_uv_space") ) { return hx::Val( quad_uv_space_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val QuadPackGeometry_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"quads") ) { quads=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void QuadPackGeometry_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("quads","\xcc","\x75","\xe7","\x5d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo QuadPackGeometry_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(QuadPackGeometry_obj,quads),HX_HCSTRING("quads","\xcc","\x75","\xe7","\x5d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *QuadPackGeometry_obj_sStaticStorageInfo = 0;
#endif

static ::String QuadPackGeometry_obj_sMemberFields[] = {
	HX_HCSTRING("quads","\xcc","\x75","\xe7","\x5d"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("quad_add","\x69","\xdf","\x58","\xdc"),
	HX_HCSTRING("quad_remove","\xfc","\x2b","\x63","\x7c"),
	HX_HCSTRING("quad_visible","\xba","\xa9","\x87","\x0a"),
	HX_HCSTRING("quad_resize","\xac","\xe9","\x55","\x80"),
	HX_HCSTRING("quad_pos","\xdc","\x4a","\x64","\xdc"),
	HX_HCSTRING("quad_color","\xab","\x40","\xf7","\x79"),
	HX_HCSTRING("quad_alpha","\xa6","\x76","\x31","\x51"),
	HX_HCSTRING("quad_uv_space","\xe0","\xa6","\xa8","\xdb"),
	HX_HCSTRING("quad_uv","\x19","\xba","\xfa","\x3e"),
	HX_HCSTRING("quad_flipx","\x73","\x14","\x2d","\x32"),
	HX_HCSTRING("quad_flipy","\x74","\x14","\x2d","\x32"),
	::String(null()) };

static void QuadPackGeometry_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(QuadPackGeometry_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void QuadPackGeometry_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(QuadPackGeometry_obj::__mClass,"__mClass");
};

#endif

hx::Class QuadPackGeometry_obj::__mClass;

void QuadPackGeometry_obj::__register()
{
	hx::Object *dummy = new QuadPackGeometry_obj;
	QuadPackGeometry_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.geometry.QuadPackGeometry","\xcf","\x1b","\x1f","\x2e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = QuadPackGeometry_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(QuadPackGeometry_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< QuadPackGeometry_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = QuadPackGeometry_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QuadPackGeometry_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QuadPackGeometry_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
} // end namespace geometry
