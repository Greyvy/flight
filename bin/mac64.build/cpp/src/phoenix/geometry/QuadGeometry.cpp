// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Spatial
#include <phoenix/Spatial.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_Transform
#include <phoenix/Transform.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_GeometryState
#include <phoenix/geometry/GeometryState.h>
#endif
#ifndef INCLUDED_phoenix_geometry_QuadGeometry
#include <phoenix/geometry/QuadGeometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextureCoord
#include <phoenix/geometry/TextureCoord.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextureCoordSet
#include <phoenix/geometry/TextureCoordSet.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Vertex
#include <phoenix/geometry/Vertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7c855173f156b6cb_12_new,"phoenix.geometry.QuadGeometry","new",0xa66b69c8,"phoenix.geometry.QuadGeometry.new","phoenix/geometry/QuadGeometry.hx",12,0x485a4ac8)
HX_LOCAL_STACK_FRAME(_hx_pos_7c855173f156b6cb_72_uv,"phoenix.geometry.QuadGeometry","uv",0x7822f1f9,"phoenix.geometry.QuadGeometry.uv","phoenix/geometry/QuadGeometry.hx",72,0x485a4ac8)
HX_LOCAL_STACK_FRAME(_hx_pos_7c855173f156b6cb_85_uv_space,"phoenix.geometry.QuadGeometry","uv_space",0xe21c06c0,"phoenix.geometry.QuadGeometry.uv_space","phoenix/geometry/QuadGeometry.hx",85,0x485a4ac8)
HX_LOCAL_STACK_FRAME(_hx_pos_7c855173f156b6cb_192_resize_xy,"phoenix.geometry.QuadGeometry","resize_xy",0xb5fb6d14,"phoenix.geometry.QuadGeometry.resize_xy","phoenix/geometry/QuadGeometry.hx",192,0x485a4ac8)
HX_LOCAL_STACK_FRAME(_hx_pos_7c855173f156b6cb_208_resize,"phoenix.geometry.QuadGeometry","resize",0x7127918c,"phoenix.geometry.QuadGeometry.resize","phoenix/geometry/QuadGeometry.hx",208,0x485a4ac8)
HX_LOCAL_STACK_FRAME(_hx_pos_7c855173f156b6cb_214_set,"phoenix.geometry.QuadGeometry","set",0xa66f350a,"phoenix.geometry.QuadGeometry.set","phoenix/geometry/QuadGeometry.hx",214,0x485a4ac8)
HX_LOCAL_STACK_FRAME(_hx_pos_7c855173f156b6cb_218_set_xywh,"phoenix.geometry.QuadGeometry","set_xywh",0x93a135e7,"phoenix.geometry.QuadGeometry.set_xywh","phoenix/geometry/QuadGeometry.hx",218,0x485a4ac8)
HX_LOCAL_STACK_FRAME(_hx_pos_7c855173f156b6cb_240_set_flipx,"phoenix.geometry.QuadGeometry","set_flipx",0x339524f6,"phoenix.geometry.QuadGeometry.set_flipx","phoenix/geometry/QuadGeometry.hx",240,0x485a4ac8)
HX_LOCAL_STACK_FRAME(_hx_pos_7c855173f156b6cb_251_set_flipy,"phoenix.geometry.QuadGeometry","set_flipy",0x339524f7,"phoenix.geometry.QuadGeometry.set_flipy","phoenix/geometry/QuadGeometry.hx",251,0x485a4ac8)
HX_LOCAL_STACK_FRAME(_hx_pos_7c855173f156b6cb_262_set_uv_angle,"phoenix.geometry.QuadGeometry","set_uv_angle",0x36bd414a,"phoenix.geometry.QuadGeometry.set_uv_angle","phoenix/geometry/QuadGeometry.hx",262,0x485a4ac8)
namespace phoenix{
namespace geometry{

void QuadGeometry_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_7c855173f156b6cb_12_new)
HXLINE(  22)		this->_uv_h = ((Float)1);
HXLINE(  21)		this->_uv_w = ((Float)1);
HXLINE(  20)		this->_uv_y = ((Float)0);
HXLINE(  19)		this->_uv_x = ((Float)0);
HXLINE(  17)		this->uv_angle = (int)0;
HXLINE(  15)		this->flipy = false;
HXLINE(  14)		this->flipx = false;
HXLINE(  26)		_options->__SetField(HX_("primitive_type",92,c8,6d,88),(int)4,hx::paccDynamic);
HXLINE(  28)		super::__construct(_options);
HXLINE(  31)		if (hx::IsNotNull( _options->__Field(HX_("flipx",2b,45,92,02),hx::paccDynamic) )) {
HXLINE(  31)			this->set_flipx(( (bool)(_options->__Field(HX_("flipx",2b,45,92,02),hx::paccDynamic)) ));
            		}
HXLINE(  32)		if (hx::IsNotNull( _options->__Field(HX_("flipy",2c,45,92,02),hx::paccDynamic) )) {
HXLINE(  32)			this->set_flipy(( (bool)(_options->__Field(HX_("flipy",2c,45,92,02),hx::paccDynamic)) ));
            		}
HXLINE(  34)		Float _x = ( (Float)(_options->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE(  35)		Float _y = ( (Float)(_options->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXLINE(  36)		Float _w = ( (Float)(_options->__Field(HX_("w",77,00,00,00),hx::paccDynamic)) );
HXLINE(  37)		Float _h = ( (Float)(_options->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) );
HXLINE(  39)		if (hx::IsNotNull( ( ( ::phoenix::Rectangle)(_options->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic)) ) )) {
HXLINE(  40)			_x = ( ( ::phoenix::Rectangle)(_options->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic)) )->x;
HXLINE(  41)			_y = ( ( ::phoenix::Rectangle)(_options->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic)) )->y;
HXLINE(  42)			_w = ( ( ::phoenix::Rectangle)(_options->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic)) )->w;
HXLINE(  43)			_h = ( ( ::phoenix::Rectangle)(_options->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic)) )->h;
            		}
HXLINE(  48)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),this->color,null()));
HXLINE(  50)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,_w,(int)0,null(),null()),this->color,null()));
HXLINE(  52)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,_w,_h,null(),null()),this->color,null()));
HXLINE(  56)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,_h,null(),null()),this->color,null()));
HXLINE(  58)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),this->color,null()));
HXLINE(  60)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,_w,_h,null(),null()),this->color,null()));
HXLINE(  62)		{
HXLINE(  62)			 ::phoenix::Transform _this = this->transform;
HXDLIN(  62)			 ::phoenix::Vector _this1 = this->transform->local->pos;
HXDLIN(  62)			bool prev = _this1->ignore_listeners;
HXDLIN(  62)			_this1->ignore_listeners = true;
HXDLIN(  62)			{
HXLINE(  62)				_this1->x = _x;
HXDLIN(  62)				if (!(_this1->_construct)) {
HXLINE(  62)					bool _hx_tmp;
HXDLIN(  62)					if (hx::IsNotNull( _this1->listen_x )) {
HXLINE(  62)						_hx_tmp = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE(  62)						_hx_tmp = false;
            					}
HXDLIN(  62)					if (_hx_tmp) {
HXLINE(  62)						_this1->listen_x(_x);
            					}
            				}
            			}
HXDLIN(  62)			{
HXLINE(  62)				_this1->y = _y;
HXDLIN(  62)				if (!(_this1->_construct)) {
HXLINE(  62)					bool _hx_tmp1;
HXDLIN(  62)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE(  62)						_hx_tmp1 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE(  62)						_hx_tmp1 = false;
            					}
HXDLIN(  62)					if (_hx_tmp1) {
HXLINE(  62)						_this1->listen_y(_y);
            					}
            				}
            			}
HXDLIN(  62)			_this1->ignore_listeners = prev;
HXDLIN(  62)			bool _hx_tmp2;
HXDLIN(  62)			if (hx::IsNotNull( _this1->listen_x )) {
HXLINE(  62)				_hx_tmp2 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE(  62)				_hx_tmp2 = false;
            			}
HXDLIN(  62)			if (_hx_tmp2) {
HXLINE(  62)				_this1->listen_x(_this1->x);
            			}
HXDLIN(  62)			bool _hx_tmp3;
HXDLIN(  62)			if (hx::IsNotNull( _this1->listen_y )) {
HXLINE(  62)				_hx_tmp3 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE(  62)				_hx_tmp3 = false;
            			}
HXDLIN(  62)			if (_hx_tmp3) {
HXLINE(  62)				_this1->listen_y(_this1->y);
            			}
HXDLIN(  62)			 ::phoenix::Vector value = _this1;
HXDLIN(  62)			{
HXLINE(  62)				 ::phoenix::Spatial _this2 = _this->local;
HXDLIN(  62)				_this2->pos = value;
HXDLIN(  62)				if (hx::IsNotNull( value )) {
HXLINE(  62)					{
HXLINE(  62)						 ::phoenix::Vector _v = _this2->pos;
HXDLIN(  62)						 ::Dynamic listener = _this2->_pos_change_dyn();
HXDLIN(  62)						_v->listen_x = listener;
HXDLIN(  62)						_v->listen_y = listener;
HXDLIN(  62)						_v->listen_z = listener;
            					}
HXDLIN(  62)					{
HXLINE(  62)						bool _hx_tmp4;
HXDLIN(  62)						if (hx::IsNotNull( _this2->pos_changed )) {
HXLINE(  62)							_hx_tmp4 = !(_this2->ignore_listeners);
            						}
            						else {
HXLINE(  62)							_hx_tmp4 = false;
            						}
HXDLIN(  62)						if (_hx_tmp4) {
HXLINE(  62)							_this2->pos_changed(_this2->pos);
            						}
            					}
            				}
            			}
            		}
HXLINE(  64)		if (hx::IsNotNull( ( ( ::phoenix::Rectangle)(_options->__Field(HX_("uv",61,66,00,00),hx::paccDynamic)) ) )) {
HXLINE(  65)			 ::phoenix::Rectangle _rect = ( ( ::phoenix::Rectangle)(_options->__Field(HX_("uv",61,66,00,00),hx::paccDynamic)) );
HXDLIN(  65)			if (hx::IsNull( this->state->texture )) {
HXLINE(  65)				HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("texture was null",c3,9c,a8,99) + ((HX_(" ( ",18,6b,18,00) + HX_("QuadGeometry; Calling UV on a geometry with null texture.",65,99,fb,a6)) + HX_(" )",09,1c,00,00)))));
            			}
HXDLIN(  65)			Float tlx = ((Float)_rect->x / (Float)this->state->texture->width_actual);
HXDLIN(  65)			Float tly = ((Float)_rect->y / (Float)this->state->texture->height_actual);
HXDLIN(  65)			Float szx = ((Float)_rect->w / (Float)this->state->texture->width_actual);
HXDLIN(  65)			Float szy = ((Float)_rect->h / (Float)this->state->texture->height_actual);
HXDLIN(  65)			if ((this->vertices->length != (int)0)) {
HXLINE(  65)				Float sz_x = szx;
HXDLIN(  65)				Float sz_y = szy;
HXDLIN(  65)				Float tl_x = tlx;
HXDLIN(  65)				Float tl_y = tly;
HXDLIN(  65)				this->_uv_x = tl_x;
HXDLIN(  65)				this->_uv_y = tl_y;
HXDLIN(  65)				this->_uv_w = sz_x;
HXDLIN(  65)				this->_uv_h = sz_y;
HXDLIN(  65)				Float tr_x = (tl_x + sz_x);
HXDLIN(  65)				Float tr_y = tl_y;
HXDLIN(  65)				Float br_x = (tl_x + sz_x);
HXDLIN(  65)				Float br_y = (tl_y + sz_y);
HXDLIN(  65)				Float bl_x = tl_x;
HXDLIN(  65)				Float bl_y = (tl_y + sz_y);
HXDLIN(  65)				Float tmp_x = ((Float)0.0);
HXDLIN(  65)				Float tmp_y = ((Float)0.0);
HXDLIN(  65)				int rotations = ::Std_obj::_hx_int(((Float)this->uv_angle / (Float)(int)90));
HXDLIN(  65)				rotations = (rotations - ((int)4 * ::Math_obj::floor(((Float)rotations / (Float)(int)4))));
HXDLIN(  65)				{
HXLINE(  65)					int _g1 = (int)0;
HXDLIN(  65)					int _g = rotations;
HXDLIN(  65)					while((_g1 < _g)){
HXLINE(  65)						_g1 = (_g1 + (int)1);
HXDLIN(  65)						int r = (_g1 - (int)1);
HXDLIN(  65)						{
HXLINE(  65)							tmp_x = tl_x;
HXDLIN(  65)							tl_x = bl_x;
HXDLIN(  65)							bl_x = br_x;
HXDLIN(  65)							br_x = tr_x;
HXDLIN(  65)							tr_x = tmp_x;
HXDLIN(  65)							tmp_y = tl_y;
HXDLIN(  65)							tl_y = bl_y;
HXDLIN(  65)							bl_y = br_y;
HXDLIN(  65)							br_y = tr_y;
HXDLIN(  65)							tr_y = tmp_y;
            						}
            					}
            				}
HXDLIN(  65)				if (this->flipy) {
HXLINE(  65)					tmp_y = bl_y;
HXDLIN(  65)					bl_y = tl_y;
HXDLIN(  65)					tl_y = tmp_y;
HXDLIN(  65)					tmp_x = bl_x;
HXDLIN(  65)					bl_x = tl_x;
HXDLIN(  65)					tl_x = tmp_x;
HXDLIN(  65)					tmp_y = br_y;
HXDLIN(  65)					br_y = tr_y;
HXDLIN(  65)					tr_y = tmp_y;
HXDLIN(  65)					tmp_x = br_x;
HXDLIN(  65)					br_x = tr_x;
HXDLIN(  65)					tr_x = tmp_x;
            				}
HXDLIN(  65)				if (this->flipx) {
HXLINE(  65)					tmp_x = tr_x;
HXDLIN(  65)					tr_x = tl_x;
HXDLIN(  65)					tl_x = tmp_x;
HXDLIN(  65)					tmp_y = tr_y;
HXDLIN(  65)					tr_y = tl_y;
HXDLIN(  65)					tl_y = tmp_y;
HXDLIN(  65)					tmp_x = br_x;
HXDLIN(  65)					br_x = bl_x;
HXDLIN(  65)					bl_x = tmp_x;
HXDLIN(  65)					tmp_y = br_y;
HXDLIN(  65)					br_y = bl_y;
HXDLIN(  65)					bl_y = tmp_y;
            				}
HXDLIN(  65)				{
HXLINE(  65)					 ::phoenix::geometry::TextureCoord _this3 = this->vertices->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  65)					_this3->u = tl_x;
HXDLIN(  65)					_this3->v = tl_y;
            				}
HXDLIN(  65)				{
HXLINE(  65)					 ::phoenix::geometry::TextureCoord _this4 = this->vertices->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  65)					_this4->u = tr_x;
HXDLIN(  65)					_this4->v = tr_y;
            				}
HXDLIN(  65)				{
HXLINE(  65)					 ::phoenix::geometry::TextureCoord _this5 = this->vertices->__get((int)2).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  65)					_this5->u = br_x;
HXDLIN(  65)					_this5->v = br_y;
            				}
HXDLIN(  65)				{
HXLINE(  65)					 ::phoenix::geometry::TextureCoord _this6 = this->vertices->__get((int)3).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  65)					_this6->u = bl_x;
HXDLIN(  65)					_this6->v = bl_y;
            				}
HXDLIN(  65)				{
HXLINE(  65)					 ::phoenix::geometry::TextureCoord _this7 = this->vertices->__get((int)4).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  65)					_this7->u = tl_x;
HXDLIN(  65)					_this7->v = tl_y;
            				}
HXDLIN(  65)				{
HXLINE(  65)					 ::phoenix::geometry::TextureCoord _this8 = this->vertices->__get((int)5).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  65)					_this8->u = br_x;
HXDLIN(  65)					_this8->v = br_y;
            				}
HXDLIN(  65)				this->set_dirty(true);
            			}
            		}
            		else {
HXLINE(  67)			if ((this->vertices->length != (int)0)) {
HXLINE(  67)				Float sz_x1 = (int)1;
HXDLIN(  67)				Float sz_y1 = (int)1;
HXDLIN(  67)				Float tl_x1 = (int)0;
HXDLIN(  67)				Float tl_y1 = (int)0;
HXDLIN(  67)				this->_uv_x = tl_x1;
HXDLIN(  67)				this->_uv_y = tl_y1;
HXDLIN(  67)				this->_uv_w = sz_x1;
HXDLIN(  67)				this->_uv_h = sz_y1;
HXDLIN(  67)				Float tr_x1 = (tl_x1 + sz_x1);
HXDLIN(  67)				Float tr_y1 = tl_y1;
HXDLIN(  67)				Float br_x1 = (tl_x1 + sz_x1);
HXDLIN(  67)				Float br_y1 = (tl_y1 + sz_y1);
HXDLIN(  67)				Float bl_x1 = tl_x1;
HXDLIN(  67)				Float bl_y1 = (tl_y1 + sz_y1);
HXDLIN(  67)				Float tmp_x1 = ((Float)0.0);
HXDLIN(  67)				Float tmp_y1 = ((Float)0.0);
HXDLIN(  67)				int rotations1 = ::Std_obj::_hx_int(((Float)this->uv_angle / (Float)(int)90));
HXDLIN(  67)				rotations1 = (rotations1 - ((int)4 * ::Math_obj::floor(((Float)rotations1 / (Float)(int)4))));
HXDLIN(  67)				{
HXLINE(  67)					int _g11 = (int)0;
HXDLIN(  67)					int _g2 = rotations1;
HXDLIN(  67)					while((_g11 < _g2)){
HXLINE(  67)						_g11 = (_g11 + (int)1);
HXDLIN(  67)						int r1 = (_g11 - (int)1);
HXDLIN(  67)						{
HXLINE(  67)							tmp_x1 = tl_x1;
HXDLIN(  67)							tl_x1 = bl_x1;
HXDLIN(  67)							bl_x1 = br_x1;
HXDLIN(  67)							br_x1 = tr_x1;
HXDLIN(  67)							tr_x1 = tmp_x1;
HXDLIN(  67)							tmp_y1 = tl_y1;
HXDLIN(  67)							tl_y1 = bl_y1;
HXDLIN(  67)							bl_y1 = br_y1;
HXDLIN(  67)							br_y1 = tr_y1;
HXDLIN(  67)							tr_y1 = tmp_y1;
            						}
            					}
            				}
HXDLIN(  67)				if (this->flipy) {
HXLINE(  67)					tmp_y1 = bl_y1;
HXDLIN(  67)					bl_y1 = tl_y1;
HXDLIN(  67)					tl_y1 = tmp_y1;
HXDLIN(  67)					tmp_x1 = bl_x1;
HXDLIN(  67)					bl_x1 = tl_x1;
HXDLIN(  67)					tl_x1 = tmp_x1;
HXDLIN(  67)					tmp_y1 = br_y1;
HXDLIN(  67)					br_y1 = tr_y1;
HXDLIN(  67)					tr_y1 = tmp_y1;
HXDLIN(  67)					tmp_x1 = br_x1;
HXDLIN(  67)					br_x1 = tr_x1;
HXDLIN(  67)					tr_x1 = tmp_x1;
            				}
HXDLIN(  67)				if (this->flipx) {
HXLINE(  67)					tmp_x1 = tr_x1;
HXDLIN(  67)					tr_x1 = tl_x1;
HXDLIN(  67)					tl_x1 = tmp_x1;
HXDLIN(  67)					tmp_y1 = tr_y1;
HXDLIN(  67)					tr_y1 = tl_y1;
HXDLIN(  67)					tl_y1 = tmp_y1;
HXDLIN(  67)					tmp_x1 = br_x1;
HXDLIN(  67)					br_x1 = bl_x1;
HXDLIN(  67)					bl_x1 = tmp_x1;
HXDLIN(  67)					tmp_y1 = br_y1;
HXDLIN(  67)					br_y1 = bl_y1;
HXDLIN(  67)					bl_y1 = tmp_y1;
            				}
HXDLIN(  67)				{
HXLINE(  67)					 ::phoenix::geometry::TextureCoord _this9 = this->vertices->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  67)					_this9->u = tl_x1;
HXDLIN(  67)					_this9->v = tl_y1;
            				}
HXDLIN(  67)				{
HXLINE(  67)					 ::phoenix::geometry::TextureCoord _this10 = this->vertices->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  67)					_this10->u = tr_x1;
HXDLIN(  67)					_this10->v = tr_y1;
            				}
HXDLIN(  67)				{
HXLINE(  67)					 ::phoenix::geometry::TextureCoord _this11 = this->vertices->__get((int)2).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  67)					_this11->u = br_x1;
HXDLIN(  67)					_this11->v = br_y1;
            				}
HXDLIN(  67)				{
HXLINE(  67)					 ::phoenix::geometry::TextureCoord _this12 = this->vertices->__get((int)3).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  67)					_this12->u = bl_x1;
HXDLIN(  67)					_this12->v = bl_y1;
            				}
HXDLIN(  67)				{
HXLINE(  67)					 ::phoenix::geometry::TextureCoord _this13 = this->vertices->__get((int)4).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  67)					_this13->u = tl_x1;
HXDLIN(  67)					_this13->v = tl_y1;
            				}
HXDLIN(  67)				{
HXLINE(  67)					 ::phoenix::geometry::TextureCoord _this14 = this->vertices->__get((int)5).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  67)					_this14->u = br_x1;
HXDLIN(  67)					_this14->v = br_y1;
            				}
HXDLIN(  67)				this->set_dirty(true);
            			}
            		}
            	}

Dynamic QuadGeometry_obj::__CreateEmpty() { return new QuadGeometry_obj; }

void *QuadGeometry_obj::_hx_vtable = 0;

Dynamic QuadGeometry_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< QuadGeometry_obj > _hx_result = new QuadGeometry_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool QuadGeometry_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6c1faa93) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x6c1faa93;
	} else {
		return inClassId==(int)0x7fb26a6a;
	}
}

void QuadGeometry_obj::uv( ::phoenix::Rectangle _rect){
            	HX_STACKFRAME(&_hx_pos_7c855173f156b6cb_72_uv)
HXLINE(  74)		if (hx::IsNull( this->state->texture )) {
HXLINE(  74)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("texture was null",c3,9c,a8,99) + ((HX_(" ( ",18,6b,18,00) + HX_("QuadGeometry; Calling UV on a geometry with null texture.",65,99,fb,a6)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE(  76)		Float tlx = ((Float)_rect->x / (Float)this->state->texture->width_actual);
HXLINE(  77)		Float tly = ((Float)_rect->y / (Float)this->state->texture->height_actual);
HXLINE(  78)		Float szx = ((Float)_rect->w / (Float)this->state->texture->width_actual);
HXLINE(  79)		Float szy = ((Float)_rect->h / (Float)this->state->texture->height_actual);
HXLINE(  81)		if ((this->vertices->length != (int)0)) {
HXLINE(  81)			Float sz_x = szx;
HXDLIN(  81)			Float sz_y = szy;
HXDLIN(  81)			Float tl_x = tlx;
HXDLIN(  81)			Float tl_y = tly;
HXDLIN(  81)			this->_uv_x = tl_x;
HXDLIN(  81)			this->_uv_y = tl_y;
HXDLIN(  81)			this->_uv_w = sz_x;
HXDLIN(  81)			this->_uv_h = sz_y;
HXDLIN(  81)			Float tr_x = (tl_x + sz_x);
HXDLIN(  81)			Float tr_y = tl_y;
HXDLIN(  81)			Float br_x = (tl_x + sz_x);
HXDLIN(  81)			Float br_y = (tl_y + sz_y);
HXDLIN(  81)			Float bl_x = tl_x;
HXDLIN(  81)			Float bl_y = (tl_y + sz_y);
HXDLIN(  81)			Float tmp_x = ((Float)0.0);
HXDLIN(  81)			Float tmp_y = ((Float)0.0);
HXDLIN(  81)			int rotations = ::Std_obj::_hx_int(((Float)this->uv_angle / (Float)(int)90));
HXDLIN(  81)			rotations = (rotations - ((int)4 * ::Math_obj::floor(((Float)rotations / (Float)(int)4))));
HXDLIN(  81)			{
HXLINE(  81)				int _g1 = (int)0;
HXDLIN(  81)				int _g = rotations;
HXDLIN(  81)				while((_g1 < _g)){
HXLINE(  81)					_g1 = (_g1 + (int)1);
HXDLIN(  81)					int r = (_g1 - (int)1);
HXDLIN(  81)					{
HXLINE(  81)						tmp_x = tl_x;
HXDLIN(  81)						tl_x = bl_x;
HXDLIN(  81)						bl_x = br_x;
HXDLIN(  81)						br_x = tr_x;
HXDLIN(  81)						tr_x = tmp_x;
HXDLIN(  81)						tmp_y = tl_y;
HXDLIN(  81)						tl_y = bl_y;
HXDLIN(  81)						bl_y = br_y;
HXDLIN(  81)						br_y = tr_y;
HXDLIN(  81)						tr_y = tmp_y;
            					}
            				}
            			}
HXDLIN(  81)			if (this->flipy) {
HXLINE(  81)				tmp_y = bl_y;
HXDLIN(  81)				bl_y = tl_y;
HXDLIN(  81)				tl_y = tmp_y;
HXDLIN(  81)				tmp_x = bl_x;
HXDLIN(  81)				bl_x = tl_x;
HXDLIN(  81)				tl_x = tmp_x;
HXDLIN(  81)				tmp_y = br_y;
HXDLIN(  81)				br_y = tr_y;
HXDLIN(  81)				tr_y = tmp_y;
HXDLIN(  81)				tmp_x = br_x;
HXDLIN(  81)				br_x = tr_x;
HXDLIN(  81)				tr_x = tmp_x;
            			}
HXDLIN(  81)			if (this->flipx) {
HXLINE(  81)				tmp_x = tr_x;
HXDLIN(  81)				tr_x = tl_x;
HXDLIN(  81)				tl_x = tmp_x;
HXDLIN(  81)				tmp_y = tr_y;
HXDLIN(  81)				tr_y = tl_y;
HXDLIN(  81)				tl_y = tmp_y;
HXDLIN(  81)				tmp_x = br_x;
HXDLIN(  81)				br_x = bl_x;
HXDLIN(  81)				bl_x = tmp_x;
HXDLIN(  81)				tmp_y = br_y;
HXDLIN(  81)				br_y = bl_y;
HXDLIN(  81)				bl_y = tmp_y;
            			}
HXDLIN(  81)			{
HXLINE(  81)				 ::phoenix::geometry::TextureCoord _this = this->vertices->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  81)				_this->u = tl_x;
HXDLIN(  81)				_this->v = tl_y;
            			}
HXDLIN(  81)			{
HXLINE(  81)				 ::phoenix::geometry::TextureCoord _this1 = this->vertices->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  81)				_this1->u = tr_x;
HXDLIN(  81)				_this1->v = tr_y;
            			}
HXDLIN(  81)			{
HXLINE(  81)				 ::phoenix::geometry::TextureCoord _this2 = this->vertices->__get((int)2).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  81)				_this2->u = br_x;
HXDLIN(  81)				_this2->v = br_y;
            			}
HXDLIN(  81)			{
HXLINE(  81)				 ::phoenix::geometry::TextureCoord _this3 = this->vertices->__get((int)3).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  81)				_this3->u = bl_x;
HXDLIN(  81)				_this3->v = bl_y;
            			}
HXDLIN(  81)			{
HXLINE(  81)				 ::phoenix::geometry::TextureCoord _this4 = this->vertices->__get((int)4).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  81)				_this4->u = tl_x;
HXDLIN(  81)				_this4->v = tl_y;
            			}
HXDLIN(  81)			{
HXLINE(  81)				 ::phoenix::geometry::TextureCoord _this5 = this->vertices->__get((int)5).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN(  81)				_this5->u = br_x;
HXDLIN(  81)				_this5->v = br_y;
            			}
HXDLIN(  81)			this->set_dirty(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(QuadGeometry_obj,uv,(void))

void QuadGeometry_obj::uv_space(Float _rect_x,Float _rect_y,Float _rect_w,Float _rect_h){
            	HX_STACKFRAME(&_hx_pos_7c855173f156b6cb_85_uv_space)
HXLINE(  87)		if ((this->vertices->length == (int)0)) {
HXLINE(  87)			return;
            		}
HXLINE(  90)		Float sz_x = _rect_w;
HXLINE(  91)		Float sz_y = _rect_h;
HXLINE(  94)		Float tl_x = _rect_x;
HXLINE(  95)		Float tl_y = _rect_y;
HXLINE(  98)		this->_uv_x = tl_x;
HXLINE(  99)		this->_uv_y = tl_y;
HXLINE( 100)		this->_uv_w = sz_x;
HXLINE( 101)		this->_uv_h = sz_y;
HXLINE( 104)		Float tr_x = (tl_x + sz_x);
HXLINE( 105)		Float tr_y = tl_y;
HXLINE( 107)		Float br_x = (tl_x + sz_x);
HXLINE( 108)		Float br_y = (tl_y + sz_y);
HXLINE( 110)		Float bl_x = tl_x;
HXLINE( 111)		Float bl_y = (tl_y + sz_y);
HXLINE( 113)		Float tmp_x = ((Float)0.0);
HXLINE( 114)		Float tmp_y = ((Float)0.0);
HXLINE( 131)		int rotations = ::Std_obj::_hx_int(((Float)this->uv_angle / (Float)(int)90));
HXLINE( 132)		rotations = (rotations - ((int)4 * ::Math_obj::floor(((Float)rotations / (Float)(int)4))));
HXLINE( 134)		{
HXLINE( 134)			int _g1 = (int)0;
HXDLIN( 134)			int _g = rotations;
HXDLIN( 134)			while((_g1 < _g)){
HXLINE( 134)				_g1 = (_g1 + (int)1);
HXDLIN( 134)				int r = (_g1 - (int)1);
HXLINE( 135)				{
HXLINE( 135)					tmp_x = tl_x;
HXDLIN( 135)					tl_x = bl_x;
HXDLIN( 135)					bl_x = br_x;
HXDLIN( 135)					br_x = tr_x;
HXDLIN( 135)					tr_x = tmp_x;
HXDLIN( 135)					tmp_y = tl_y;
HXDLIN( 135)					tl_y = bl_y;
HXDLIN( 135)					bl_y = br_y;
HXDLIN( 135)					br_y = tr_y;
HXDLIN( 135)					tr_y = tmp_y;
            				}
            			}
            		}
HXLINE( 138)		if (this->flipy) {
HXLINE( 140)			tmp_y = bl_y;
HXLINE( 141)			bl_y = tl_y;
HXLINE( 142)			tl_y = tmp_y;
HXLINE( 144)			tmp_x = bl_x;
HXLINE( 145)			bl_x = tl_x;
HXLINE( 146)			tl_x = tmp_x;
HXLINE( 149)			tmp_y = br_y;
HXLINE( 150)			br_y = tr_y;
HXLINE( 151)			tr_y = tmp_y;
HXLINE( 153)			tmp_x = br_x;
HXLINE( 154)			br_x = tr_x;
HXLINE( 155)			tr_x = tmp_x;
            		}
HXLINE( 159)		if (this->flipx) {
HXLINE( 161)			tmp_x = tr_x;
HXLINE( 162)			tr_x = tl_x;
HXLINE( 163)			tl_x = tmp_x;
HXLINE( 165)			tmp_y = tr_y;
HXLINE( 166)			tr_y = tl_y;
HXLINE( 167)			tl_y = tmp_y;
HXLINE( 170)			tmp_x = br_x;
HXLINE( 171)			br_x = bl_x;
HXLINE( 172)			bl_x = tmp_x;
HXLINE( 174)			tmp_y = br_y;
HXLINE( 175)			br_y = bl_y;
HXLINE( 176)			bl_y = tmp_y;
            		}
HXLINE( 179)		{
HXLINE( 179)			 ::phoenix::geometry::TextureCoord _this = this->vertices->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 179)			_this->u = tl_x;
HXDLIN( 179)			_this->v = tl_y;
            		}
HXLINE( 180)		{
HXLINE( 180)			 ::phoenix::geometry::TextureCoord _this1 = this->vertices->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 180)			_this1->u = tr_x;
HXDLIN( 180)			_this1->v = tr_y;
            		}
HXLINE( 181)		{
HXLINE( 181)			 ::phoenix::geometry::TextureCoord _this2 = this->vertices->__get((int)2).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 181)			_this2->u = br_x;
HXDLIN( 181)			_this2->v = br_y;
            		}
HXLINE( 183)		{
HXLINE( 183)			 ::phoenix::geometry::TextureCoord _this3 = this->vertices->__get((int)3).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 183)			_this3->u = bl_x;
HXDLIN( 183)			_this3->v = bl_y;
            		}
HXLINE( 184)		{
HXLINE( 184)			 ::phoenix::geometry::TextureCoord _this4 = this->vertices->__get((int)4).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 184)			_this4->u = tl_x;
HXDLIN( 184)			_this4->v = tl_y;
            		}
HXLINE( 185)		{
HXLINE( 185)			 ::phoenix::geometry::TextureCoord _this5 = this->vertices->__get((int)5).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 185)			_this5->u = br_x;
HXDLIN( 185)			_this5->v = br_y;
            		}
HXLINE( 188)		this->set_dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(QuadGeometry_obj,uv_space,(void))

void QuadGeometry_obj::resize_xy(Float _x,Float _y){
            	HX_STACKFRAME(&_hx_pos_7c855173f156b6cb_192_resize_xy)
HXLINE( 194)		if ((this->vertices->length == (int)0)) {
HXLINE( 194)			return;
            		}
HXLINE( 196)		{
HXLINE( 196)			 ::phoenix::Vector _this = this->vertices->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 196)			bool prev = _this->ignore_listeners;
HXDLIN( 196)			_this->ignore_listeners = true;
HXDLIN( 196)			{
HXLINE( 196)				_this->x = (int)0;
HXDLIN( 196)				if (!(_this->_construct)) {
HXLINE( 196)					bool _hx_tmp;
HXDLIN( 196)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 196)						_hx_tmp = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 196)						_hx_tmp = false;
            					}
HXDLIN( 196)					if (_hx_tmp) {
HXLINE( 196)						_this->listen_x((int)0);
            					}
            				}
            			}
HXDLIN( 196)			{
HXLINE( 196)				_this->y = (int)0;
HXDLIN( 196)				if (!(_this->_construct)) {
HXLINE( 196)					bool _hx_tmp1;
HXDLIN( 196)					if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 196)						_hx_tmp1 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 196)						_hx_tmp1 = false;
            					}
HXDLIN( 196)					if (_hx_tmp1) {
HXLINE( 196)						_this->listen_y((int)0);
            					}
            				}
            			}
HXDLIN( 196)			_this->ignore_listeners = prev;
HXDLIN( 196)			bool _hx_tmp2;
HXDLIN( 196)			if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 196)				_hx_tmp2 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 196)				_hx_tmp2 = false;
            			}
HXDLIN( 196)			if (_hx_tmp2) {
HXLINE( 196)				_this->listen_x(_this->x);
            			}
HXDLIN( 196)			bool _hx_tmp3;
HXDLIN( 196)			if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 196)				_hx_tmp3 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 196)				_hx_tmp3 = false;
            			}
HXDLIN( 196)			if (_hx_tmp3) {
HXLINE( 196)				_this->listen_y(_this->y);
            			}
            		}
HXLINE( 197)		{
HXLINE( 197)			 ::phoenix::Vector _this1 = this->vertices->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 197)			bool prev1 = _this1->ignore_listeners;
HXDLIN( 197)			_this1->ignore_listeners = true;
HXDLIN( 197)			{
HXLINE( 197)				_this1->x = _x;
HXDLIN( 197)				if (!(_this1->_construct)) {
HXLINE( 197)					bool _hx_tmp4;
HXDLIN( 197)					if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 197)						_hx_tmp4 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 197)						_hx_tmp4 = false;
            					}
HXDLIN( 197)					if (_hx_tmp4) {
HXLINE( 197)						_this1->listen_x(_x);
            					}
            				}
            			}
HXDLIN( 197)			{
HXLINE( 197)				_this1->y = (int)0;
HXDLIN( 197)				if (!(_this1->_construct)) {
HXLINE( 197)					bool _hx_tmp5;
HXDLIN( 197)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 197)						_hx_tmp5 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 197)						_hx_tmp5 = false;
            					}
HXDLIN( 197)					if (_hx_tmp5) {
HXLINE( 197)						_this1->listen_y((int)0);
            					}
            				}
            			}
HXDLIN( 197)			_this1->ignore_listeners = prev1;
HXDLIN( 197)			bool _hx_tmp6;
HXDLIN( 197)			if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 197)				_hx_tmp6 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 197)				_hx_tmp6 = false;
            			}
HXDLIN( 197)			if (_hx_tmp6) {
HXLINE( 197)				_this1->listen_x(_this1->x);
            			}
HXDLIN( 197)			bool _hx_tmp7;
HXDLIN( 197)			if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 197)				_hx_tmp7 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 197)				_hx_tmp7 = false;
            			}
HXDLIN( 197)			if (_hx_tmp7) {
HXLINE( 197)				_this1->listen_y(_this1->y);
            			}
            		}
HXLINE( 198)		{
HXLINE( 198)			 ::phoenix::Vector _this2 = this->vertices->__get((int)2).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 198)			bool prev2 = _this2->ignore_listeners;
HXDLIN( 198)			_this2->ignore_listeners = true;
HXDLIN( 198)			{
HXLINE( 198)				_this2->x = _x;
HXDLIN( 198)				if (!(_this2->_construct)) {
HXLINE( 198)					bool _hx_tmp8;
HXDLIN( 198)					if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 198)						_hx_tmp8 = !(_this2->ignore_listeners);
            					}
            					else {
HXLINE( 198)						_hx_tmp8 = false;
            					}
HXDLIN( 198)					if (_hx_tmp8) {
HXLINE( 198)						_this2->listen_x(_x);
            					}
            				}
            			}
HXDLIN( 198)			{
HXLINE( 198)				_this2->y = _y;
HXDLIN( 198)				if (!(_this2->_construct)) {
HXLINE( 198)					bool _hx_tmp9;
HXDLIN( 198)					if (hx::IsNotNull( _this2->listen_y )) {
HXLINE( 198)						_hx_tmp9 = !(_this2->ignore_listeners);
            					}
            					else {
HXLINE( 198)						_hx_tmp9 = false;
            					}
HXDLIN( 198)					if (_hx_tmp9) {
HXLINE( 198)						_this2->listen_y(_y);
            					}
            				}
            			}
HXDLIN( 198)			_this2->ignore_listeners = prev2;
HXDLIN( 198)			bool _hx_tmp10;
HXDLIN( 198)			if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 198)				_hx_tmp10 = !(_this2->ignore_listeners);
            			}
            			else {
HXLINE( 198)				_hx_tmp10 = false;
            			}
HXDLIN( 198)			if (_hx_tmp10) {
HXLINE( 198)				_this2->listen_x(_this2->x);
            			}
HXDLIN( 198)			bool _hx_tmp11;
HXDLIN( 198)			if (hx::IsNotNull( _this2->listen_y )) {
HXLINE( 198)				_hx_tmp11 = !(_this2->ignore_listeners);
            			}
            			else {
HXLINE( 198)				_hx_tmp11 = false;
            			}
HXDLIN( 198)			if (_hx_tmp11) {
HXLINE( 198)				_this2->listen_y(_this2->y);
            			}
            		}
HXLINE( 200)		{
HXLINE( 200)			 ::phoenix::Vector _this3 = this->vertices->__get((int)3).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 200)			bool prev3 = _this3->ignore_listeners;
HXDLIN( 200)			_this3->ignore_listeners = true;
HXDLIN( 200)			{
HXLINE( 200)				_this3->x = (int)0;
HXDLIN( 200)				if (!(_this3->_construct)) {
HXLINE( 200)					bool _hx_tmp12;
HXDLIN( 200)					if (hx::IsNotNull( _this3->listen_x )) {
HXLINE( 200)						_hx_tmp12 = !(_this3->ignore_listeners);
            					}
            					else {
HXLINE( 200)						_hx_tmp12 = false;
            					}
HXDLIN( 200)					if (_hx_tmp12) {
HXLINE( 200)						_this3->listen_x((int)0);
            					}
            				}
            			}
HXDLIN( 200)			{
HXLINE( 200)				_this3->y = _y;
HXDLIN( 200)				if (!(_this3->_construct)) {
HXLINE( 200)					bool _hx_tmp13;
HXDLIN( 200)					if (hx::IsNotNull( _this3->listen_y )) {
HXLINE( 200)						_hx_tmp13 = !(_this3->ignore_listeners);
            					}
            					else {
HXLINE( 200)						_hx_tmp13 = false;
            					}
HXDLIN( 200)					if (_hx_tmp13) {
HXLINE( 200)						_this3->listen_y(_y);
            					}
            				}
            			}
HXDLIN( 200)			_this3->ignore_listeners = prev3;
HXDLIN( 200)			bool _hx_tmp14;
HXDLIN( 200)			if (hx::IsNotNull( _this3->listen_x )) {
HXLINE( 200)				_hx_tmp14 = !(_this3->ignore_listeners);
            			}
            			else {
HXLINE( 200)				_hx_tmp14 = false;
            			}
HXDLIN( 200)			if (_hx_tmp14) {
HXLINE( 200)				_this3->listen_x(_this3->x);
            			}
HXDLIN( 200)			bool _hx_tmp15;
HXDLIN( 200)			if (hx::IsNotNull( _this3->listen_y )) {
HXLINE( 200)				_hx_tmp15 = !(_this3->ignore_listeners);
            			}
            			else {
HXLINE( 200)				_hx_tmp15 = false;
            			}
HXDLIN( 200)			if (_hx_tmp15) {
HXLINE( 200)				_this3->listen_y(_this3->y);
            			}
            		}
HXLINE( 201)		{
HXLINE( 201)			 ::phoenix::Vector _this4 = this->vertices->__get((int)4).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 201)			bool prev4 = _this4->ignore_listeners;
HXDLIN( 201)			_this4->ignore_listeners = true;
HXDLIN( 201)			{
HXLINE( 201)				_this4->x = (int)0;
HXDLIN( 201)				if (!(_this4->_construct)) {
HXLINE( 201)					bool _hx_tmp16;
HXDLIN( 201)					if (hx::IsNotNull( _this4->listen_x )) {
HXLINE( 201)						_hx_tmp16 = !(_this4->ignore_listeners);
            					}
            					else {
HXLINE( 201)						_hx_tmp16 = false;
            					}
HXDLIN( 201)					if (_hx_tmp16) {
HXLINE( 201)						_this4->listen_x((int)0);
            					}
            				}
            			}
HXDLIN( 201)			{
HXLINE( 201)				_this4->y = (int)0;
HXDLIN( 201)				if (!(_this4->_construct)) {
HXLINE( 201)					bool _hx_tmp17;
HXDLIN( 201)					if (hx::IsNotNull( _this4->listen_y )) {
HXLINE( 201)						_hx_tmp17 = !(_this4->ignore_listeners);
            					}
            					else {
HXLINE( 201)						_hx_tmp17 = false;
            					}
HXDLIN( 201)					if (_hx_tmp17) {
HXLINE( 201)						_this4->listen_y((int)0);
            					}
            				}
            			}
HXDLIN( 201)			_this4->ignore_listeners = prev4;
HXDLIN( 201)			bool _hx_tmp18;
HXDLIN( 201)			if (hx::IsNotNull( _this4->listen_x )) {
HXLINE( 201)				_hx_tmp18 = !(_this4->ignore_listeners);
            			}
            			else {
HXLINE( 201)				_hx_tmp18 = false;
            			}
HXDLIN( 201)			if (_hx_tmp18) {
HXLINE( 201)				_this4->listen_x(_this4->x);
            			}
HXDLIN( 201)			bool _hx_tmp19;
HXDLIN( 201)			if (hx::IsNotNull( _this4->listen_y )) {
HXLINE( 201)				_hx_tmp19 = !(_this4->ignore_listeners);
            			}
            			else {
HXLINE( 201)				_hx_tmp19 = false;
            			}
HXDLIN( 201)			if (_hx_tmp19) {
HXLINE( 201)				_this4->listen_y(_this4->y);
            			}
            		}
HXLINE( 202)		{
HXLINE( 202)			 ::phoenix::Vector _this5 = this->vertices->__get((int)5).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 202)			bool prev5 = _this5->ignore_listeners;
HXDLIN( 202)			_this5->ignore_listeners = true;
HXDLIN( 202)			{
HXLINE( 202)				_this5->x = _x;
HXDLIN( 202)				if (!(_this5->_construct)) {
HXLINE( 202)					bool _hx_tmp20;
HXDLIN( 202)					if (hx::IsNotNull( _this5->listen_x )) {
HXLINE( 202)						_hx_tmp20 = !(_this5->ignore_listeners);
            					}
            					else {
HXLINE( 202)						_hx_tmp20 = false;
            					}
HXDLIN( 202)					if (_hx_tmp20) {
HXLINE( 202)						_this5->listen_x(_x);
            					}
            				}
            			}
HXDLIN( 202)			{
HXLINE( 202)				_this5->y = _y;
HXDLIN( 202)				if (!(_this5->_construct)) {
HXLINE( 202)					bool _hx_tmp21;
HXDLIN( 202)					if (hx::IsNotNull( _this5->listen_y )) {
HXLINE( 202)						_hx_tmp21 = !(_this5->ignore_listeners);
            					}
            					else {
HXLINE( 202)						_hx_tmp21 = false;
            					}
HXDLIN( 202)					if (_hx_tmp21) {
HXLINE( 202)						_this5->listen_y(_y);
            					}
            				}
            			}
HXDLIN( 202)			_this5->ignore_listeners = prev5;
HXDLIN( 202)			bool _hx_tmp22;
HXDLIN( 202)			if (hx::IsNotNull( _this5->listen_x )) {
HXLINE( 202)				_hx_tmp22 = !(_this5->ignore_listeners);
            			}
            			else {
HXLINE( 202)				_hx_tmp22 = false;
            			}
HXDLIN( 202)			if (_hx_tmp22) {
HXLINE( 202)				_this5->listen_x(_this5->x);
            			}
HXDLIN( 202)			bool _hx_tmp23;
HXDLIN( 202)			if (hx::IsNotNull( _this5->listen_y )) {
HXLINE( 202)				_hx_tmp23 = !(_this5->ignore_listeners);
            			}
            			else {
HXLINE( 202)				_hx_tmp23 = false;
            			}
HXDLIN( 202)			if (_hx_tmp23) {
HXLINE( 202)				_this5->listen_y(_this5->y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(QuadGeometry_obj,resize_xy,(void))

void QuadGeometry_obj::resize( ::phoenix::Vector quad){
            	HX_STACKFRAME(&_hx_pos_7c855173f156b6cb_208_resize)
HXDLIN( 208)		this->resize_xy(quad->x,quad->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(QuadGeometry_obj,resize,(void))

void QuadGeometry_obj::set( ::phoenix::Rectangle quad){
            	HX_STACKFRAME(&_hx_pos_7c855173f156b6cb_214_set)
HXDLIN( 214)		this->set_xywh(quad->x,quad->y,quad->w,quad->h);
            	}


HX_DEFINE_DYNAMIC_FUNC1(QuadGeometry_obj,set,(void))

void QuadGeometry_obj::set_xywh(Float _x,Float _y,Float _w,Float _h){
            	HX_STACKFRAME(&_hx_pos_7c855173f156b6cb_218_set_xywh)
HXLINE( 220)		if ((this->vertices->length == (int)0)) {
HXLINE( 220)			return;
            		}
HXLINE( 223)		{
HXLINE( 223)			 ::phoenix::Vector _this = this->vertices->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 223)			bool prev = _this->ignore_listeners;
HXDLIN( 223)			_this->ignore_listeners = true;
HXDLIN( 223)			{
HXLINE( 223)				_this->x = (int)0;
HXDLIN( 223)				if (!(_this->_construct)) {
HXLINE( 223)					bool _hx_tmp;
HXDLIN( 223)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 223)						_hx_tmp = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 223)						_hx_tmp = false;
            					}
HXDLIN( 223)					if (_hx_tmp) {
HXLINE( 223)						_this->listen_x((int)0);
            					}
            				}
            			}
HXDLIN( 223)			{
HXLINE( 223)				_this->y = (int)0;
HXDLIN( 223)				if (!(_this->_construct)) {
HXLINE( 223)					bool _hx_tmp1;
HXDLIN( 223)					if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 223)						_hx_tmp1 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 223)						_hx_tmp1 = false;
            					}
HXDLIN( 223)					if (_hx_tmp1) {
HXLINE( 223)						_this->listen_y((int)0);
            					}
            				}
            			}
HXDLIN( 223)			_this->ignore_listeners = prev;
HXDLIN( 223)			bool _hx_tmp2;
HXDLIN( 223)			if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 223)				_hx_tmp2 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 223)				_hx_tmp2 = false;
            			}
HXDLIN( 223)			if (_hx_tmp2) {
HXLINE( 223)				_this->listen_x(_this->x);
            			}
HXDLIN( 223)			bool _hx_tmp3;
HXDLIN( 223)			if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 223)				_hx_tmp3 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 223)				_hx_tmp3 = false;
            			}
HXDLIN( 223)			if (_hx_tmp3) {
HXLINE( 223)				_this->listen_y(_this->y);
            			}
            		}
HXLINE( 225)		{
HXLINE( 225)			 ::phoenix::Vector _this1 = this->vertices->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 225)			bool prev1 = _this1->ignore_listeners;
HXDLIN( 225)			_this1->ignore_listeners = true;
HXDLIN( 225)			{
HXLINE( 225)				_this1->x = _w;
HXDLIN( 225)				if (!(_this1->_construct)) {
HXLINE( 225)					bool _hx_tmp4;
HXDLIN( 225)					if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 225)						_hx_tmp4 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 225)						_hx_tmp4 = false;
            					}
HXDLIN( 225)					if (_hx_tmp4) {
HXLINE( 225)						_this1->listen_x(_w);
            					}
            				}
            			}
HXDLIN( 225)			{
HXLINE( 225)				_this1->y = (int)0;
HXDLIN( 225)				if (!(_this1->_construct)) {
HXLINE( 225)					bool _hx_tmp5;
HXDLIN( 225)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 225)						_hx_tmp5 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 225)						_hx_tmp5 = false;
            					}
HXDLIN( 225)					if (_hx_tmp5) {
HXLINE( 225)						_this1->listen_y((int)0);
            					}
            				}
            			}
HXDLIN( 225)			_this1->ignore_listeners = prev1;
HXDLIN( 225)			bool _hx_tmp6;
HXDLIN( 225)			if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 225)				_hx_tmp6 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 225)				_hx_tmp6 = false;
            			}
HXDLIN( 225)			if (_hx_tmp6) {
HXLINE( 225)				_this1->listen_x(_this1->x);
            			}
HXDLIN( 225)			bool _hx_tmp7;
HXDLIN( 225)			if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 225)				_hx_tmp7 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 225)				_hx_tmp7 = false;
            			}
HXDLIN( 225)			if (_hx_tmp7) {
HXLINE( 225)				_this1->listen_y(_this1->y);
            			}
            		}
HXLINE( 227)		{
HXLINE( 227)			 ::phoenix::Vector _this2 = this->vertices->__get((int)2).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 227)			bool prev2 = _this2->ignore_listeners;
HXDLIN( 227)			_this2->ignore_listeners = true;
HXDLIN( 227)			{
HXLINE( 227)				_this2->x = _w;
HXDLIN( 227)				if (!(_this2->_construct)) {
HXLINE( 227)					bool _hx_tmp8;
HXDLIN( 227)					if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 227)						_hx_tmp8 = !(_this2->ignore_listeners);
            					}
            					else {
HXLINE( 227)						_hx_tmp8 = false;
            					}
HXDLIN( 227)					if (_hx_tmp8) {
HXLINE( 227)						_this2->listen_x(_w);
            					}
            				}
            			}
HXDLIN( 227)			{
HXLINE( 227)				_this2->y = _h;
HXDLIN( 227)				if (!(_this2->_construct)) {
HXLINE( 227)					bool _hx_tmp9;
HXDLIN( 227)					if (hx::IsNotNull( _this2->listen_y )) {
HXLINE( 227)						_hx_tmp9 = !(_this2->ignore_listeners);
            					}
            					else {
HXLINE( 227)						_hx_tmp9 = false;
            					}
HXDLIN( 227)					if (_hx_tmp9) {
HXLINE( 227)						_this2->listen_y(_h);
            					}
            				}
            			}
HXDLIN( 227)			_this2->ignore_listeners = prev2;
HXDLIN( 227)			bool _hx_tmp10;
HXDLIN( 227)			if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 227)				_hx_tmp10 = !(_this2->ignore_listeners);
            			}
            			else {
HXLINE( 227)				_hx_tmp10 = false;
            			}
HXDLIN( 227)			if (_hx_tmp10) {
HXLINE( 227)				_this2->listen_x(_this2->x);
            			}
HXDLIN( 227)			bool _hx_tmp11;
HXDLIN( 227)			if (hx::IsNotNull( _this2->listen_y )) {
HXLINE( 227)				_hx_tmp11 = !(_this2->ignore_listeners);
            			}
            			else {
HXLINE( 227)				_hx_tmp11 = false;
            			}
HXDLIN( 227)			if (_hx_tmp11) {
HXLINE( 227)				_this2->listen_y(_this2->y);
            			}
            		}
HXLINE( 230)		{
HXLINE( 230)			 ::phoenix::Vector _this3 = this->vertices->__get((int)3).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 230)			bool prev3 = _this3->ignore_listeners;
HXDLIN( 230)			_this3->ignore_listeners = true;
HXDLIN( 230)			{
HXLINE( 230)				_this3->x = (int)0;
HXDLIN( 230)				if (!(_this3->_construct)) {
HXLINE( 230)					bool _hx_tmp12;
HXDLIN( 230)					if (hx::IsNotNull( _this3->listen_x )) {
HXLINE( 230)						_hx_tmp12 = !(_this3->ignore_listeners);
            					}
            					else {
HXLINE( 230)						_hx_tmp12 = false;
            					}
HXDLIN( 230)					if (_hx_tmp12) {
HXLINE( 230)						_this3->listen_x((int)0);
            					}
            				}
            			}
HXDLIN( 230)			{
HXLINE( 230)				_this3->y = _h;
HXDLIN( 230)				if (!(_this3->_construct)) {
HXLINE( 230)					bool _hx_tmp13;
HXDLIN( 230)					if (hx::IsNotNull( _this3->listen_y )) {
HXLINE( 230)						_hx_tmp13 = !(_this3->ignore_listeners);
            					}
            					else {
HXLINE( 230)						_hx_tmp13 = false;
            					}
HXDLIN( 230)					if (_hx_tmp13) {
HXLINE( 230)						_this3->listen_y(_h);
            					}
            				}
            			}
HXDLIN( 230)			_this3->ignore_listeners = prev3;
HXDLIN( 230)			bool _hx_tmp14;
HXDLIN( 230)			if (hx::IsNotNull( _this3->listen_x )) {
HXLINE( 230)				_hx_tmp14 = !(_this3->ignore_listeners);
            			}
            			else {
HXLINE( 230)				_hx_tmp14 = false;
            			}
HXDLIN( 230)			if (_hx_tmp14) {
HXLINE( 230)				_this3->listen_x(_this3->x);
            			}
HXDLIN( 230)			bool _hx_tmp15;
HXDLIN( 230)			if (hx::IsNotNull( _this3->listen_y )) {
HXLINE( 230)				_hx_tmp15 = !(_this3->ignore_listeners);
            			}
            			else {
HXLINE( 230)				_hx_tmp15 = false;
            			}
HXDLIN( 230)			if (_hx_tmp15) {
HXLINE( 230)				_this3->listen_y(_this3->y);
            			}
            		}
HXLINE( 232)		{
HXLINE( 232)			 ::phoenix::Vector _this4 = this->vertices->__get((int)4).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 232)			bool prev4 = _this4->ignore_listeners;
HXDLIN( 232)			_this4->ignore_listeners = true;
HXDLIN( 232)			{
HXLINE( 232)				_this4->x = (int)0;
HXDLIN( 232)				if (!(_this4->_construct)) {
HXLINE( 232)					bool _hx_tmp16;
HXDLIN( 232)					if (hx::IsNotNull( _this4->listen_x )) {
HXLINE( 232)						_hx_tmp16 = !(_this4->ignore_listeners);
            					}
            					else {
HXLINE( 232)						_hx_tmp16 = false;
            					}
HXDLIN( 232)					if (_hx_tmp16) {
HXLINE( 232)						_this4->listen_x((int)0);
            					}
            				}
            			}
HXDLIN( 232)			{
HXLINE( 232)				_this4->y = (int)0;
HXDLIN( 232)				if (!(_this4->_construct)) {
HXLINE( 232)					bool _hx_tmp17;
HXDLIN( 232)					if (hx::IsNotNull( _this4->listen_y )) {
HXLINE( 232)						_hx_tmp17 = !(_this4->ignore_listeners);
            					}
            					else {
HXLINE( 232)						_hx_tmp17 = false;
            					}
HXDLIN( 232)					if (_hx_tmp17) {
HXLINE( 232)						_this4->listen_y((int)0);
            					}
            				}
            			}
HXDLIN( 232)			_this4->ignore_listeners = prev4;
HXDLIN( 232)			bool _hx_tmp18;
HXDLIN( 232)			if (hx::IsNotNull( _this4->listen_x )) {
HXLINE( 232)				_hx_tmp18 = !(_this4->ignore_listeners);
            			}
            			else {
HXLINE( 232)				_hx_tmp18 = false;
            			}
HXDLIN( 232)			if (_hx_tmp18) {
HXLINE( 232)				_this4->listen_x(_this4->x);
            			}
HXDLIN( 232)			bool _hx_tmp19;
HXDLIN( 232)			if (hx::IsNotNull( _this4->listen_y )) {
HXLINE( 232)				_hx_tmp19 = !(_this4->ignore_listeners);
            			}
            			else {
HXLINE( 232)				_hx_tmp19 = false;
            			}
HXDLIN( 232)			if (_hx_tmp19) {
HXLINE( 232)				_this4->listen_y(_this4->y);
            			}
            		}
HXLINE( 234)		{
HXLINE( 234)			 ::phoenix::Vector _this5 = this->vertices->__get((int)5).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN( 234)			bool prev5 = _this5->ignore_listeners;
HXDLIN( 234)			_this5->ignore_listeners = true;
HXDLIN( 234)			{
HXLINE( 234)				_this5->x = _w;
HXDLIN( 234)				if (!(_this5->_construct)) {
HXLINE( 234)					bool _hx_tmp20;
HXDLIN( 234)					if (hx::IsNotNull( _this5->listen_x )) {
HXLINE( 234)						_hx_tmp20 = !(_this5->ignore_listeners);
            					}
            					else {
HXLINE( 234)						_hx_tmp20 = false;
            					}
HXDLIN( 234)					if (_hx_tmp20) {
HXLINE( 234)						_this5->listen_x(_w);
            					}
            				}
            			}
HXDLIN( 234)			{
HXLINE( 234)				_this5->y = _h;
HXDLIN( 234)				if (!(_this5->_construct)) {
HXLINE( 234)					bool _hx_tmp21;
HXDLIN( 234)					if (hx::IsNotNull( _this5->listen_y )) {
HXLINE( 234)						_hx_tmp21 = !(_this5->ignore_listeners);
            					}
            					else {
HXLINE( 234)						_hx_tmp21 = false;
            					}
HXDLIN( 234)					if (_hx_tmp21) {
HXLINE( 234)						_this5->listen_y(_h);
            					}
            				}
            			}
HXDLIN( 234)			_this5->ignore_listeners = prev5;
HXDLIN( 234)			bool _hx_tmp22;
HXDLIN( 234)			if (hx::IsNotNull( _this5->listen_x )) {
HXLINE( 234)				_hx_tmp22 = !(_this5->ignore_listeners);
            			}
            			else {
HXLINE( 234)				_hx_tmp22 = false;
            			}
HXDLIN( 234)			if (_hx_tmp22) {
HXLINE( 234)				_this5->listen_x(_this5->x);
            			}
HXDLIN( 234)			bool _hx_tmp23;
HXDLIN( 234)			if (hx::IsNotNull( _this5->listen_y )) {
HXLINE( 234)				_hx_tmp23 = !(_this5->ignore_listeners);
            			}
            			else {
HXLINE( 234)				_hx_tmp23 = false;
            			}
HXDLIN( 234)			if (_hx_tmp23) {
HXLINE( 234)				_this5->listen_y(_this5->y);
            			}
            		}
HXLINE( 236)		{
HXLINE( 236)			 ::phoenix::Transform _this6 = this->transform;
HXDLIN( 236)			 ::phoenix::Vector _this7 = this->transform->local->pos;
HXDLIN( 236)			bool prev6 = _this7->ignore_listeners;
HXDLIN( 236)			_this7->ignore_listeners = true;
HXDLIN( 236)			{
HXLINE( 236)				_this7->x = _x;
HXDLIN( 236)				if (!(_this7->_construct)) {
HXLINE( 236)					bool _hx_tmp24;
HXDLIN( 236)					if (hx::IsNotNull( _this7->listen_x )) {
HXLINE( 236)						_hx_tmp24 = !(_this7->ignore_listeners);
            					}
            					else {
HXLINE( 236)						_hx_tmp24 = false;
            					}
HXDLIN( 236)					if (_hx_tmp24) {
HXLINE( 236)						_this7->listen_x(_x);
            					}
            				}
            			}
HXDLIN( 236)			{
HXLINE( 236)				_this7->y = _y;
HXDLIN( 236)				if (!(_this7->_construct)) {
HXLINE( 236)					bool _hx_tmp25;
HXDLIN( 236)					if (hx::IsNotNull( _this7->listen_y )) {
HXLINE( 236)						_hx_tmp25 = !(_this7->ignore_listeners);
            					}
            					else {
HXLINE( 236)						_hx_tmp25 = false;
            					}
HXDLIN( 236)					if (_hx_tmp25) {
HXLINE( 236)						_this7->listen_y(_y);
            					}
            				}
            			}
HXDLIN( 236)			_this7->ignore_listeners = prev6;
HXDLIN( 236)			bool _hx_tmp26;
HXDLIN( 236)			if (hx::IsNotNull( _this7->listen_x )) {
HXLINE( 236)				_hx_tmp26 = !(_this7->ignore_listeners);
            			}
            			else {
HXLINE( 236)				_hx_tmp26 = false;
            			}
HXDLIN( 236)			if (_hx_tmp26) {
HXLINE( 236)				_this7->listen_x(_this7->x);
            			}
HXDLIN( 236)			bool _hx_tmp27;
HXDLIN( 236)			if (hx::IsNotNull( _this7->listen_y )) {
HXLINE( 236)				_hx_tmp27 = !(_this7->ignore_listeners);
            			}
            			else {
HXLINE( 236)				_hx_tmp27 = false;
            			}
HXDLIN( 236)			if (_hx_tmp27) {
HXLINE( 236)				_this7->listen_y(_this7->y);
            			}
HXDLIN( 236)			 ::phoenix::Vector value = _this7;
HXDLIN( 236)			{
HXLINE( 236)				 ::phoenix::Spatial _this8 = _this6->local;
HXDLIN( 236)				_this8->pos = value;
HXDLIN( 236)				if (hx::IsNotNull( value )) {
HXLINE( 236)					{
HXLINE( 236)						 ::phoenix::Vector _v = _this8->pos;
HXDLIN( 236)						 ::Dynamic listener = _this8->_pos_change_dyn();
HXDLIN( 236)						_v->listen_x = listener;
HXDLIN( 236)						_v->listen_y = listener;
HXDLIN( 236)						_v->listen_z = listener;
            					}
HXDLIN( 236)					{
HXLINE( 236)						bool _hx_tmp28;
HXDLIN( 236)						if (hx::IsNotNull( _this8->pos_changed )) {
HXLINE( 236)							_hx_tmp28 = !(_this8->ignore_listeners);
            						}
            						else {
HXLINE( 236)							_hx_tmp28 = false;
            						}
HXDLIN( 236)						if (_hx_tmp28) {
HXLINE( 236)							_this8->pos_changed(_this8->pos);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(QuadGeometry_obj,set_xywh,(void))

bool QuadGeometry_obj::set_flipx(bool _val){
            	HX_STACKFRAME(&_hx_pos_7c855173f156b6cb_240_set_flipx)
HXLINE( 243)		this->flipx = _val;
HXLINE( 245)		if ((this->vertices->length != (int)0)) {
HXLINE( 245)			Float sz_x = this->_uv_w;
HXDLIN( 245)			Float sz_y = this->_uv_h;
HXDLIN( 245)			Float tl_x = this->_uv_x;
HXDLIN( 245)			Float tl_y = this->_uv_y;
HXDLIN( 245)			this->_uv_x = tl_x;
HXDLIN( 245)			this->_uv_y = tl_y;
HXDLIN( 245)			this->_uv_w = sz_x;
HXDLIN( 245)			this->_uv_h = sz_y;
HXDLIN( 245)			Float tr_x = (tl_x + sz_x);
HXDLIN( 245)			Float tr_y = tl_y;
HXDLIN( 245)			Float br_x = (tl_x + sz_x);
HXDLIN( 245)			Float br_y = (tl_y + sz_y);
HXDLIN( 245)			Float bl_x = tl_x;
HXDLIN( 245)			Float bl_y = (tl_y + sz_y);
HXDLIN( 245)			Float tmp_x = ((Float)0.0);
HXDLIN( 245)			Float tmp_y = ((Float)0.0);
HXDLIN( 245)			int rotations = ::Std_obj::_hx_int(((Float)this->uv_angle / (Float)(int)90));
HXDLIN( 245)			rotations = (rotations - ((int)4 * ::Math_obj::floor(((Float)rotations / (Float)(int)4))));
HXDLIN( 245)			{
HXLINE( 245)				int _g1 = (int)0;
HXDLIN( 245)				int _g = rotations;
HXDLIN( 245)				while((_g1 < _g)){
HXLINE( 245)					_g1 = (_g1 + (int)1);
HXDLIN( 245)					int r = (_g1 - (int)1);
HXDLIN( 245)					{
HXLINE( 245)						tmp_x = tl_x;
HXDLIN( 245)						tl_x = bl_x;
HXDLIN( 245)						bl_x = br_x;
HXDLIN( 245)						br_x = tr_x;
HXDLIN( 245)						tr_x = tmp_x;
HXDLIN( 245)						tmp_y = tl_y;
HXDLIN( 245)						tl_y = bl_y;
HXDLIN( 245)						bl_y = br_y;
HXDLIN( 245)						br_y = tr_y;
HXDLIN( 245)						tr_y = tmp_y;
            					}
            				}
            			}
HXDLIN( 245)			if (this->flipy) {
HXLINE( 245)				tmp_y = bl_y;
HXDLIN( 245)				bl_y = tl_y;
HXDLIN( 245)				tl_y = tmp_y;
HXDLIN( 245)				tmp_x = bl_x;
HXDLIN( 245)				bl_x = tl_x;
HXDLIN( 245)				tl_x = tmp_x;
HXDLIN( 245)				tmp_y = br_y;
HXDLIN( 245)				br_y = tr_y;
HXDLIN( 245)				tr_y = tmp_y;
HXDLIN( 245)				tmp_x = br_x;
HXDLIN( 245)				br_x = tr_x;
HXDLIN( 245)				tr_x = tmp_x;
            			}
HXDLIN( 245)			if (this->flipx) {
HXLINE( 245)				tmp_x = tr_x;
HXDLIN( 245)				tr_x = tl_x;
HXDLIN( 245)				tl_x = tmp_x;
HXDLIN( 245)				tmp_y = tr_y;
HXDLIN( 245)				tr_y = tl_y;
HXDLIN( 245)				tl_y = tmp_y;
HXDLIN( 245)				tmp_x = br_x;
HXDLIN( 245)				br_x = bl_x;
HXDLIN( 245)				bl_x = tmp_x;
HXDLIN( 245)				tmp_y = br_y;
HXDLIN( 245)				br_y = bl_y;
HXDLIN( 245)				bl_y = tmp_y;
            			}
HXDLIN( 245)			{
HXLINE( 245)				 ::phoenix::geometry::TextureCoord _this = this->vertices->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 245)				_this->u = tl_x;
HXDLIN( 245)				_this->v = tl_y;
            			}
HXDLIN( 245)			{
HXLINE( 245)				 ::phoenix::geometry::TextureCoord _this1 = this->vertices->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 245)				_this1->u = tr_x;
HXDLIN( 245)				_this1->v = tr_y;
            			}
HXDLIN( 245)			{
HXLINE( 245)				 ::phoenix::geometry::TextureCoord _this2 = this->vertices->__get((int)2).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 245)				_this2->u = br_x;
HXDLIN( 245)				_this2->v = br_y;
            			}
HXDLIN( 245)			{
HXLINE( 245)				 ::phoenix::geometry::TextureCoord _this3 = this->vertices->__get((int)3).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 245)				_this3->u = bl_x;
HXDLIN( 245)				_this3->v = bl_y;
            			}
HXDLIN( 245)			{
HXLINE( 245)				 ::phoenix::geometry::TextureCoord _this4 = this->vertices->__get((int)4).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 245)				_this4->u = tl_x;
HXDLIN( 245)				_this4->v = tl_y;
            			}
HXDLIN( 245)			{
HXLINE( 245)				 ::phoenix::geometry::TextureCoord _this5 = this->vertices->__get((int)5).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 245)				_this5->u = br_x;
HXDLIN( 245)				_this5->v = br_y;
            			}
HXDLIN( 245)			this->set_dirty(true);
            		}
HXLINE( 247)		return this->flipx;
            	}


HX_DEFINE_DYNAMIC_FUNC1(QuadGeometry_obj,set_flipx,return )

bool QuadGeometry_obj::set_flipy(bool _val){
            	HX_STACKFRAME(&_hx_pos_7c855173f156b6cb_251_set_flipy)
HXLINE( 254)		this->flipy = _val;
HXLINE( 256)		if ((this->vertices->length != (int)0)) {
HXLINE( 256)			Float sz_x = this->_uv_w;
HXDLIN( 256)			Float sz_y = this->_uv_h;
HXDLIN( 256)			Float tl_x = this->_uv_x;
HXDLIN( 256)			Float tl_y = this->_uv_y;
HXDLIN( 256)			this->_uv_x = tl_x;
HXDLIN( 256)			this->_uv_y = tl_y;
HXDLIN( 256)			this->_uv_w = sz_x;
HXDLIN( 256)			this->_uv_h = sz_y;
HXDLIN( 256)			Float tr_x = (tl_x + sz_x);
HXDLIN( 256)			Float tr_y = tl_y;
HXDLIN( 256)			Float br_x = (tl_x + sz_x);
HXDLIN( 256)			Float br_y = (tl_y + sz_y);
HXDLIN( 256)			Float bl_x = tl_x;
HXDLIN( 256)			Float bl_y = (tl_y + sz_y);
HXDLIN( 256)			Float tmp_x = ((Float)0.0);
HXDLIN( 256)			Float tmp_y = ((Float)0.0);
HXDLIN( 256)			int rotations = ::Std_obj::_hx_int(((Float)this->uv_angle / (Float)(int)90));
HXDLIN( 256)			rotations = (rotations - ((int)4 * ::Math_obj::floor(((Float)rotations / (Float)(int)4))));
HXDLIN( 256)			{
HXLINE( 256)				int _g1 = (int)0;
HXDLIN( 256)				int _g = rotations;
HXDLIN( 256)				while((_g1 < _g)){
HXLINE( 256)					_g1 = (_g1 + (int)1);
HXDLIN( 256)					int r = (_g1 - (int)1);
HXDLIN( 256)					{
HXLINE( 256)						tmp_x = tl_x;
HXDLIN( 256)						tl_x = bl_x;
HXDLIN( 256)						bl_x = br_x;
HXDLIN( 256)						br_x = tr_x;
HXDLIN( 256)						tr_x = tmp_x;
HXDLIN( 256)						tmp_y = tl_y;
HXDLIN( 256)						tl_y = bl_y;
HXDLIN( 256)						bl_y = br_y;
HXDLIN( 256)						br_y = tr_y;
HXDLIN( 256)						tr_y = tmp_y;
            					}
            				}
            			}
HXDLIN( 256)			if (this->flipy) {
HXLINE( 256)				tmp_y = bl_y;
HXDLIN( 256)				bl_y = tl_y;
HXDLIN( 256)				tl_y = tmp_y;
HXDLIN( 256)				tmp_x = bl_x;
HXDLIN( 256)				bl_x = tl_x;
HXDLIN( 256)				tl_x = tmp_x;
HXDLIN( 256)				tmp_y = br_y;
HXDLIN( 256)				br_y = tr_y;
HXDLIN( 256)				tr_y = tmp_y;
HXDLIN( 256)				tmp_x = br_x;
HXDLIN( 256)				br_x = tr_x;
HXDLIN( 256)				tr_x = tmp_x;
            			}
HXDLIN( 256)			if (this->flipx) {
HXLINE( 256)				tmp_x = tr_x;
HXDLIN( 256)				tr_x = tl_x;
HXDLIN( 256)				tl_x = tmp_x;
HXDLIN( 256)				tmp_y = tr_y;
HXDLIN( 256)				tr_y = tl_y;
HXDLIN( 256)				tl_y = tmp_y;
HXDLIN( 256)				tmp_x = br_x;
HXDLIN( 256)				br_x = bl_x;
HXDLIN( 256)				bl_x = tmp_x;
HXDLIN( 256)				tmp_y = br_y;
HXDLIN( 256)				br_y = bl_y;
HXDLIN( 256)				bl_y = tmp_y;
            			}
HXDLIN( 256)			{
HXLINE( 256)				 ::phoenix::geometry::TextureCoord _this = this->vertices->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 256)				_this->u = tl_x;
HXDLIN( 256)				_this->v = tl_y;
            			}
HXDLIN( 256)			{
HXLINE( 256)				 ::phoenix::geometry::TextureCoord _this1 = this->vertices->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 256)				_this1->u = tr_x;
HXDLIN( 256)				_this1->v = tr_y;
            			}
HXDLIN( 256)			{
HXLINE( 256)				 ::phoenix::geometry::TextureCoord _this2 = this->vertices->__get((int)2).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 256)				_this2->u = br_x;
HXDLIN( 256)				_this2->v = br_y;
            			}
HXDLIN( 256)			{
HXLINE( 256)				 ::phoenix::geometry::TextureCoord _this3 = this->vertices->__get((int)3).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 256)				_this3->u = bl_x;
HXDLIN( 256)				_this3->v = bl_y;
            			}
HXDLIN( 256)			{
HXLINE( 256)				 ::phoenix::geometry::TextureCoord _this4 = this->vertices->__get((int)4).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 256)				_this4->u = tl_x;
HXDLIN( 256)				_this4->v = tl_y;
            			}
HXDLIN( 256)			{
HXLINE( 256)				 ::phoenix::geometry::TextureCoord _this5 = this->vertices->__get((int)5).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 256)				_this5->u = br_x;
HXDLIN( 256)				_this5->v = br_y;
            			}
HXDLIN( 256)			this->set_dirty(true);
            		}
HXLINE( 258)		return this->flipy;
            	}


HX_DEFINE_DYNAMIC_FUNC1(QuadGeometry_obj,set_flipy,return )

int QuadGeometry_obj::set_uv_angle(int _val){
            	HX_STACKFRAME(&_hx_pos_7c855173f156b6cb_262_set_uv_angle)
HXLINE( 263)		if ((hx::Mod(_val,(int)90) != (int)0)) {
HXLINE( 263)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion((HX_("_val % 90 == 0",a0,bb,a6,61) + ((HX_(" ( ",18,6b,18,00) + HX_("uv_angle has to be a multiple of 90",f8,b3,af,3f)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 264)		this->uv_angle = _val;
HXLINE( 265)		if ((this->vertices->length != (int)0)) {
HXLINE( 265)			Float sz_x = this->_uv_w;
HXDLIN( 265)			Float sz_y = this->_uv_h;
HXDLIN( 265)			Float tl_x = this->_uv_x;
HXDLIN( 265)			Float tl_y = this->_uv_y;
HXDLIN( 265)			this->_uv_x = tl_x;
HXDLIN( 265)			this->_uv_y = tl_y;
HXDLIN( 265)			this->_uv_w = sz_x;
HXDLIN( 265)			this->_uv_h = sz_y;
HXDLIN( 265)			Float tr_x = (tl_x + sz_x);
HXDLIN( 265)			Float tr_y = tl_y;
HXDLIN( 265)			Float br_x = (tl_x + sz_x);
HXDLIN( 265)			Float br_y = (tl_y + sz_y);
HXDLIN( 265)			Float bl_x = tl_x;
HXDLIN( 265)			Float bl_y = (tl_y + sz_y);
HXDLIN( 265)			Float tmp_x = ((Float)0.0);
HXDLIN( 265)			Float tmp_y = ((Float)0.0);
HXDLIN( 265)			int rotations = ::Std_obj::_hx_int(((Float)this->uv_angle / (Float)(int)90));
HXDLIN( 265)			rotations = (rotations - ((int)4 * ::Math_obj::floor(((Float)rotations / (Float)(int)4))));
HXDLIN( 265)			{
HXLINE( 265)				int _g1 = (int)0;
HXDLIN( 265)				int _g = rotations;
HXDLIN( 265)				while((_g1 < _g)){
HXLINE( 265)					_g1 = (_g1 + (int)1);
HXDLIN( 265)					int r = (_g1 - (int)1);
HXDLIN( 265)					{
HXLINE( 265)						tmp_x = tl_x;
HXDLIN( 265)						tl_x = bl_x;
HXDLIN( 265)						bl_x = br_x;
HXDLIN( 265)						br_x = tr_x;
HXDLIN( 265)						tr_x = tmp_x;
HXDLIN( 265)						tmp_y = tl_y;
HXDLIN( 265)						tl_y = bl_y;
HXDLIN( 265)						bl_y = br_y;
HXDLIN( 265)						br_y = tr_y;
HXDLIN( 265)						tr_y = tmp_y;
            					}
            				}
            			}
HXDLIN( 265)			if (this->flipy) {
HXLINE( 265)				tmp_y = bl_y;
HXDLIN( 265)				bl_y = tl_y;
HXDLIN( 265)				tl_y = tmp_y;
HXDLIN( 265)				tmp_x = bl_x;
HXDLIN( 265)				bl_x = tl_x;
HXDLIN( 265)				tl_x = tmp_x;
HXDLIN( 265)				tmp_y = br_y;
HXDLIN( 265)				br_y = tr_y;
HXDLIN( 265)				tr_y = tmp_y;
HXDLIN( 265)				tmp_x = br_x;
HXDLIN( 265)				br_x = tr_x;
HXDLIN( 265)				tr_x = tmp_x;
            			}
HXDLIN( 265)			if (this->flipx) {
HXLINE( 265)				tmp_x = tr_x;
HXDLIN( 265)				tr_x = tl_x;
HXDLIN( 265)				tl_x = tmp_x;
HXDLIN( 265)				tmp_y = tr_y;
HXDLIN( 265)				tr_y = tl_y;
HXDLIN( 265)				tl_y = tmp_y;
HXDLIN( 265)				tmp_x = br_x;
HXDLIN( 265)				br_x = bl_x;
HXDLIN( 265)				bl_x = tmp_x;
HXDLIN( 265)				tmp_y = br_y;
HXDLIN( 265)				br_y = bl_y;
HXDLIN( 265)				bl_y = tmp_y;
            			}
HXDLIN( 265)			{
HXLINE( 265)				 ::phoenix::geometry::TextureCoord _this = this->vertices->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 265)				_this->u = tl_x;
HXDLIN( 265)				_this->v = tl_y;
            			}
HXDLIN( 265)			{
HXLINE( 265)				 ::phoenix::geometry::TextureCoord _this1 = this->vertices->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 265)				_this1->u = tr_x;
HXDLIN( 265)				_this1->v = tr_y;
            			}
HXDLIN( 265)			{
HXLINE( 265)				 ::phoenix::geometry::TextureCoord _this2 = this->vertices->__get((int)2).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 265)				_this2->u = br_x;
HXDLIN( 265)				_this2->v = br_y;
            			}
HXDLIN( 265)			{
HXLINE( 265)				 ::phoenix::geometry::TextureCoord _this3 = this->vertices->__get((int)3).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 265)				_this3->u = bl_x;
HXDLIN( 265)				_this3->v = bl_y;
            			}
HXDLIN( 265)			{
HXLINE( 265)				 ::phoenix::geometry::TextureCoord _this4 = this->vertices->__get((int)4).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 265)				_this4->u = tl_x;
HXDLIN( 265)				_this4->v = tl_y;
            			}
HXDLIN( 265)			{
HXLINE( 265)				 ::phoenix::geometry::TextureCoord _this5 = this->vertices->__get((int)5).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 265)				_this5->u = br_x;
HXDLIN( 265)				_this5->v = br_y;
            			}
HXDLIN( 265)			this->set_dirty(true);
            		}
HXLINE( 266)		return this->uv_angle;
            	}


HX_DEFINE_DYNAMIC_FUNC1(QuadGeometry_obj,set_uv_angle,return )


hx::ObjectPtr< QuadGeometry_obj > QuadGeometry_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< QuadGeometry_obj > __this = new QuadGeometry_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< QuadGeometry_obj > QuadGeometry_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	QuadGeometry_obj *__this = (QuadGeometry_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(QuadGeometry_obj), true, "phoenix.geometry.QuadGeometry"));
	*(void **)__this = QuadGeometry_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

QuadGeometry_obj::QuadGeometry_obj()
{
}

hx::Val QuadGeometry_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { return hx::Val( uv_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"flipx") ) { return hx::Val( flipx ); }
		if (HX_FIELD_EQ(inName,"flipy") ) { return hx::Val( flipy ); }
		if (HX_FIELD_EQ(inName,"_uv_x") ) { return hx::Val( _uv_x ); }
		if (HX_FIELD_EQ(inName,"_uv_y") ) { return hx::Val( _uv_y ); }
		if (HX_FIELD_EQ(inName,"_uv_w") ) { return hx::Val( _uv_w ); }
		if (HX_FIELD_EQ(inName,"_uv_h") ) { return hx::Val( _uv_h ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uv_angle") ) { return hx::Val( uv_angle ); }
		if (HX_FIELD_EQ(inName,"uv_space") ) { return hx::Val( uv_space_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_xywh") ) { return hx::Val( set_xywh_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"resize_xy") ) { return hx::Val( resize_xy_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_flipx") ) { return hx::Val( set_flipx_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_flipy") ) { return hx::Val( set_flipy_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_uv_angle") ) { return hx::Val( set_uv_angle_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val QuadGeometry_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"flipx") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_flipx(inValue.Cast< bool >()) );flipx=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipy") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_flipy(inValue.Cast< bool >()) );flipy=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_uv_x") ) { _uv_x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_uv_y") ) { _uv_y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_uv_w") ) { _uv_w=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_uv_h") ) { _uv_h=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uv_angle") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_uv_angle(inValue.Cast< int >()) );uv_angle=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void QuadGeometry_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("flipx","\x2b","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("flipy","\x2c","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("uv_angle","\x35","\x70","\xbc","\x6d"));
	outFields->push(HX_HCSTRING("_uv_x","\xb9","\xef","\xc0","\x00"));
	outFields->push(HX_HCSTRING("_uv_y","\xba","\xef","\xc0","\x00"));
	outFields->push(HX_HCSTRING("_uv_w","\xb8","\xef","\xc0","\x00"));
	outFields->push(HX_HCSTRING("_uv_h","\xa9","\xef","\xc0","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo QuadGeometry_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(QuadGeometry_obj,flipx),HX_HCSTRING("flipx","\x2b","\x45","\x92","\x02")},
	{hx::fsBool,(int)offsetof(QuadGeometry_obj,flipy),HX_HCSTRING("flipy","\x2c","\x45","\x92","\x02")},
	{hx::fsInt,(int)offsetof(QuadGeometry_obj,uv_angle),HX_HCSTRING("uv_angle","\x35","\x70","\xbc","\x6d")},
	{hx::fsFloat,(int)offsetof(QuadGeometry_obj,_uv_x),HX_HCSTRING("_uv_x","\xb9","\xef","\xc0","\x00")},
	{hx::fsFloat,(int)offsetof(QuadGeometry_obj,_uv_y),HX_HCSTRING("_uv_y","\xba","\xef","\xc0","\x00")},
	{hx::fsFloat,(int)offsetof(QuadGeometry_obj,_uv_w),HX_HCSTRING("_uv_w","\xb8","\xef","\xc0","\x00")},
	{hx::fsFloat,(int)offsetof(QuadGeometry_obj,_uv_h),HX_HCSTRING("_uv_h","\xa9","\xef","\xc0","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *QuadGeometry_obj_sStaticStorageInfo = 0;
#endif

static ::String QuadGeometry_obj_sMemberFields[] = {
	HX_HCSTRING("flipx","\x2b","\x45","\x92","\x02"),
	HX_HCSTRING("flipy","\x2c","\x45","\x92","\x02"),
	HX_HCSTRING("uv_angle","\x35","\x70","\xbc","\x6d"),
	HX_HCSTRING("_uv_x","\xb9","\xef","\xc0","\x00"),
	HX_HCSTRING("_uv_y","\xba","\xef","\xc0","\x00"),
	HX_HCSTRING("_uv_w","\xb8","\xef","\xc0","\x00"),
	HX_HCSTRING("_uv_h","\xa9","\xef","\xc0","\x00"),
	HX_HCSTRING("uv","\x61","\x66","\x00","\x00"),
	HX_HCSTRING("uv_space","\x28","\xb9","\x40","\xcc"),
	HX_HCSTRING("resize_xy","\xac","\xd5","\xf2","\xab"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("set_xywh","\x4f","\xe8","\xc5","\x7d"),
	HX_HCSTRING("set_flipx","\x8e","\x8d","\x8c","\x29"),
	HX_HCSTRING("set_flipy","\x8f","\x8d","\x8c","\x29"),
	HX_HCSTRING("set_uv_angle","\xb2","\x47","\xcf","\x37"),
	::String(null()) };

static void QuadGeometry_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(QuadGeometry_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void QuadGeometry_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(QuadGeometry_obj::__mClass,"__mClass");
};

#endif

hx::Class QuadGeometry_obj::__mClass;

void QuadGeometry_obj::__register()
{
	hx::Object *dummy = new QuadGeometry_obj;
	QuadGeometry_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.geometry.QuadGeometry","\xd6","\x25","\xf9","\x8b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = QuadGeometry_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(QuadGeometry_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< QuadGeometry_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = QuadGeometry_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QuadGeometry_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QuadGeometry_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
} // end namespace geometry
