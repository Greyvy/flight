// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_LineGeometry
#include <phoenix/geometry/LineGeometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Vertex
#include <phoenix/geometry/Vertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8da6400bccc61262_19_new,"phoenix.geometry.LineGeometry","new",0xef3cd875,"phoenix.geometry.LineGeometry.new","phoenix/geometry/LineGeometry.hx",19,0x0bd610bb)
HX_LOCAL_STACK_FRAME(_hx_pos_8da6400bccc61262_39_set_p0,"phoenix.geometry.LineGeometry","set_p0",0x4fc5c088,"phoenix.geometry.LineGeometry.set_p0","phoenix/geometry/LineGeometry.hx",39,0x0bd610bb)
HX_LOCAL_STACK_FRAME(_hx_pos_8da6400bccc61262_51_set_p1,"phoenix.geometry.LineGeometry","set_p1",0x4fc5c089,"phoenix.geometry.LineGeometry.set_p1","phoenix/geometry/LineGeometry.hx",51,0x0bd610bb)
HX_LOCAL_STACK_FRAME(_hx_pos_8da6400bccc61262_63_set_color0,"phoenix.geometry.LineGeometry","set_color0",0xaf772835,"phoenix.geometry.LineGeometry.set_color0","phoenix/geometry/LineGeometry.hx",63,0x0bd610bb)
HX_LOCAL_STACK_FRAME(_hx_pos_8da6400bccc61262_75_set_color1,"phoenix.geometry.LineGeometry","set_color1",0xaf772836,"phoenix.geometry.LineGeometry.set_color1","phoenix/geometry/LineGeometry.hx",75,0x0bd610bb)
namespace phoenix{
namespace geometry{

void LineGeometry_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_8da6400bccc61262_19_new)
HXLINE(  21)		_options->__SetField(HX_("primitive_type",92,c8,6d,88),(int)1,hx::paccDynamic);
HXLINE(  23)		super::__construct(_options);
HXLINE(  25)		if (hx::IsNull( ( ( ::phoenix::Color)(_options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)) ) )) {
HXLINE(  25)			_options->__SetField(HX_("color",63,71,5c,4a), ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null()),hx::paccDynamic);
            		}
HXLINE(  26)		if (hx::IsNull( ( ( ::phoenix::Color)(_options->__Field(HX_("color0",6d,c5,86,c6),hx::paccDynamic)) ) )) {
HXLINE(  26)			_options->__SetField(HX_("color0",6d,c5,86,c6),( ( ::phoenix::Color)(_options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)) ),hx::paccDynamic);
            		}
HXLINE(  27)		if (hx::IsNull( ( ( ::phoenix::Color)(_options->__Field(HX_("color1",6e,c5,86,c6),hx::paccDynamic)) ) )) {
HXLINE(  27)			_options->__SetField(HX_("color1",6e,c5,86,c6),( ( ::phoenix::Color)(_options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)) ),hx::paccDynamic);
            		}
HXLINE(  29)		if (hx::IsNull( ( ( ::phoenix::Vector)(_options->__Field(HX_("p0",c0,61,00,00),hx::paccDynamic)) ) )) {
HXLINE(  29)			_options->__SetField(HX_("p0",c0,61,00,00), ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null()),hx::paccDynamic);
            		}
HXDLIN(  29)		this->set_p0(( ( ::phoenix::Vector)(_options->__Field(HX_("p0",c0,61,00,00),hx::paccDynamic)) ));
HXLINE(  30)		if (hx::IsNull( ( ( ::phoenix::Vector)(_options->__Field(HX_("p1",c1,61,00,00),hx::paccDynamic)) ) )) {
HXLINE(  30)			_options->__SetField(HX_("p1",c1,61,00,00), ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)64,(int)64,null(),null()),hx::paccDynamic);
            		}
HXDLIN(  30)		this->set_p1(( ( ::phoenix::Vector)(_options->__Field(HX_("p1",c1,61,00,00),hx::paccDynamic)) ));
HXLINE(  32)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX ,this->p0, ::Dynamic(_options->__Field(HX_("color0",6d,c5,86,c6),hx::paccDynamic)),null()));
HXLINE(  33)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX ,this->p1, ::Dynamic(_options->__Field(HX_("color1",6e,c5,86,c6),hx::paccDynamic)),null()));
            	}

Dynamic LineGeometry_obj::__CreateEmpty() { return new LineGeometry_obj; }

void *LineGeometry_obj::_hx_vtable = 0;

Dynamic LineGeometry_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LineGeometry_obj > _hx_result = new LineGeometry_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool LineGeometry_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x22139727) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x22139727;
	} else {
		return inClassId==(int)0x6c1faa93;
	}
}

 ::phoenix::Vector LineGeometry_obj::set_p0( ::phoenix::Vector _p){
            	HX_STACKFRAME(&_hx_pos_8da6400bccc61262_39_set_p0)
HXLINE(  41)		this->p0 = _p;
HXLINE(  43)		if ((this->vertices->length == (int)0)) {
HXLINE(  43)			return this->p0;
            		}
HXLINE(  45)		this->vertices->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >()->pos = this->p0;
HXLINE(  47)		return (this->p0 = _p);
            	}


HX_DEFINE_DYNAMIC_FUNC1(LineGeometry_obj,set_p0,return )

 ::phoenix::Vector LineGeometry_obj::set_p1( ::phoenix::Vector _p){
            	HX_STACKFRAME(&_hx_pos_8da6400bccc61262_51_set_p1)
HXLINE(  53)		this->p1 = _p;
HXLINE(  55)		if ((this->vertices->length == (int)0)) {
HXLINE(  55)			return this->p1;
            		}
HXLINE(  57)		this->vertices->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >()->pos = this->p1;
HXLINE(  59)		return (this->p1 = _p);
            	}


HX_DEFINE_DYNAMIC_FUNC1(LineGeometry_obj,set_p1,return )

 ::phoenix::Color LineGeometry_obj::set_color0( ::phoenix::Color _c){
            	HX_STACKFRAME(&_hx_pos_8da6400bccc61262_63_set_color0)
HXLINE(  65)		this->color0 = _c;
HXLINE(  67)		if ((this->vertices->length == (int)0)) {
HXLINE(  67)			return this->color0;
            		}
HXLINE(  69)		this->vertices->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >()->color = this->color0;
HXLINE(  71)		return this->color0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LineGeometry_obj,set_color0,return )

 ::phoenix::Color LineGeometry_obj::set_color1( ::phoenix::Color _c){
            	HX_STACKFRAME(&_hx_pos_8da6400bccc61262_75_set_color1)
HXLINE(  77)		this->color1 = _c;
HXLINE(  79)		if ((this->vertices->length == (int)0)) {
HXLINE(  79)			return this->color1;
            		}
HXLINE(  81)		this->vertices->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >()->color = this->color1;
HXLINE(  83)		return this->color1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LineGeometry_obj,set_color1,return )


hx::ObjectPtr< LineGeometry_obj > LineGeometry_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< LineGeometry_obj > __this = new LineGeometry_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< LineGeometry_obj > LineGeometry_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	LineGeometry_obj *__this = (LineGeometry_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LineGeometry_obj), true, "phoenix.geometry.LineGeometry"));
	*(void **)__this = LineGeometry_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

LineGeometry_obj::LineGeometry_obj()
{
}

void LineGeometry_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LineGeometry);
	HX_MARK_MEMBER_NAME(p0,"p0");
	HX_MARK_MEMBER_NAME(p1,"p1");
	HX_MARK_MEMBER_NAME(color0,"color0");
	HX_MARK_MEMBER_NAME(color1,"color1");
	 ::phoenix::geometry::Geometry_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LineGeometry_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(p0,"p0");
	HX_VISIT_MEMBER_NAME(p1,"p1");
	HX_VISIT_MEMBER_NAME(color0,"color0");
	HX_VISIT_MEMBER_NAME(color1,"color1");
	 ::phoenix::geometry::Geometry_obj::__Visit(HX_VISIT_ARG);
}

hx::Val LineGeometry_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"p0") ) { return hx::Val( p0 ); }
		if (HX_FIELD_EQ(inName,"p1") ) { return hx::Val( p1 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"color0") ) { return hx::Val( color0 ); }
		if (HX_FIELD_EQ(inName,"color1") ) { return hx::Val( color1 ); }
		if (HX_FIELD_EQ(inName,"set_p0") ) { return hx::Val( set_p0_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_p1") ) { return hx::Val( set_p1_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_color0") ) { return hx::Val( set_color0_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color1") ) { return hx::Val( set_color1_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val LineGeometry_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"p0") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_p0(inValue.Cast<  ::phoenix::Vector >()) );p0=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"p1") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_p1(inValue.Cast<  ::phoenix::Vector >()) );p1=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"color0") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color0(inValue.Cast<  ::phoenix::Color >()) );color0=inValue.Cast<  ::phoenix::Color >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color1") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color1(inValue.Cast<  ::phoenix::Color >()) );color1=inValue.Cast<  ::phoenix::Color >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LineGeometry_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("p0","\xc0","\x61","\x00","\x00"));
	outFields->push(HX_HCSTRING("p1","\xc1","\x61","\x00","\x00"));
	outFields->push(HX_HCSTRING("color0","\x6d","\xc5","\x86","\xc6"));
	outFields->push(HX_HCSTRING("color1","\x6e","\xc5","\x86","\xc6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo LineGeometry_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(LineGeometry_obj,p0),HX_HCSTRING("p0","\xc0","\x61","\x00","\x00")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(LineGeometry_obj,p1),HX_HCSTRING("p1","\xc1","\x61","\x00","\x00")},
	{hx::fsObject /*::phoenix::Color*/ ,(int)offsetof(LineGeometry_obj,color0),HX_HCSTRING("color0","\x6d","\xc5","\x86","\xc6")},
	{hx::fsObject /*::phoenix::Color*/ ,(int)offsetof(LineGeometry_obj,color1),HX_HCSTRING("color1","\x6e","\xc5","\x86","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LineGeometry_obj_sStaticStorageInfo = 0;
#endif

static ::String LineGeometry_obj_sMemberFields[] = {
	HX_HCSTRING("p0","\xc0","\x61","\x00","\x00"),
	HX_HCSTRING("p1","\xc1","\x61","\x00","\x00"),
	HX_HCSTRING("color0","\x6d","\xc5","\x86","\xc6"),
	HX_HCSTRING("color1","\x6e","\xc5","\x86","\xc6"),
	HX_HCSTRING("set_p0","\x7d","\x4d","\x78","\x6f"),
	HX_HCSTRING("set_p1","\x7e","\x4d","\x78","\x6f"),
	HX_HCSTRING("set_color0","\xaa","\xd3","\x8b","\xba"),
	HX_HCSTRING("set_color1","\xab","\xd3","\x8b","\xba"),
	::String(null()) };

static void LineGeometry_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LineGeometry_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LineGeometry_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LineGeometry_obj::__mClass,"__mClass");
};

#endif

hx::Class LineGeometry_obj::__mClass;

void LineGeometry_obj::__register()
{
	hx::Object *dummy = new LineGeometry_obj;
	LineGeometry_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.geometry.LineGeometry","\x03","\x7a","\x88","\xcf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = LineGeometry_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LineGeometry_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LineGeometry_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LineGeometry_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LineGeometry_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LineGeometry_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
} // end namespace geometry
