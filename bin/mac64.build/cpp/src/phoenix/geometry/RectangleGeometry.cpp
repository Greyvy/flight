// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Spatial
#include <phoenix/Spatial.h>
#endif
#ifndef INCLUDED_phoenix_Transform
#include <phoenix/Transform.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_RectangleGeometry
#include <phoenix/geometry/RectangleGeometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Vertex
#include <phoenix/geometry/Vertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fa1d76a22eb0fd1a_14_new,"phoenix.geometry.RectangleGeometry","new",0x08963096,"phoenix.geometry.RectangleGeometry.new","phoenix/geometry/RectangleGeometry.hx",14,0x605d1b7a)
HX_LOCAL_STACK_FRAME(_hx_pos_fa1d76a22eb0fd1a_57_set_xywh,"phoenix.geometry.RectangleGeometry","set_xywh",0x202d0459,"phoenix.geometry.RectangleGeometry.set_xywh","phoenix/geometry/RectangleGeometry.hx",57,0x605d1b7a)
HX_LOCAL_STACK_FRAME(_hx_pos_fa1d76a22eb0fd1a_88_set,"phoenix.geometry.RectangleGeometry","set",0x0899fbd8,"phoenix.geometry.RectangleGeometry.set","phoenix/geometry/RectangleGeometry.hx",88,0x605d1b7a)
namespace phoenix{
namespace geometry{

void RectangleGeometry_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_fa1d76a22eb0fd1a_14_new)
HXLINE(  16)		_options->__SetField(HX_("primitive_type",92,c8,6d,88),(int)1,hx::paccDynamic);
HXLINE(  18)		super::__construct(_options);
HXLINE(  20)		 ::Dynamic _x = _options->__Field(HX_("x",78,00,00,00),hx::paccDynamic);
HXLINE(  21)		 ::Dynamic _y = _options->__Field(HX_("y",79,00,00,00),hx::paccDynamic);
HXLINE(  22)		 ::Dynamic _w = _options->__Field(HX_("w",77,00,00,00),hx::paccDynamic);
HXLINE(  23)		 ::Dynamic _h = _options->__Field(HX_("h",68,00,00,00),hx::paccDynamic);
HXLINE(  25)		if (hx::IsNotNull( ( ( ::phoenix::Rectangle)(_options->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic)) ) )) {
HXLINE(  26)			_x = ( ( ::phoenix::Rectangle)(_options->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic)) )->x;
HXLINE(  27)			_y = ( ( ::phoenix::Rectangle)(_options->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic)) )->y;
HXLINE(  28)			_w = ( ( ::phoenix::Rectangle)(_options->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic)) )->w;
HXLINE(  29)			_h = ( ( ::phoenix::Rectangle)(_options->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic)) )->h;
            		}
HXLINE(  33)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),this->color,null()));
HXLINE(  35)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,_w,(int)0,null(),null()),this->color,null()));
HXLINE(  38)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,_w,(int)0,null(),null()),this->color,null()));
HXLINE(  40)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,_w,_h,null(),null()),this->color,null()));
HXLINE(  43)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,_w,_h,null(),null()),this->color,null()));
HXLINE(  45)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,_h,null(),null()),this->color,null()));
HXLINE(  48)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,_h,null(),null()),this->color,null()));
HXLINE(  50)		this->add( ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),this->color,null()));
HXLINE(  52)		{
HXLINE(  52)			 ::phoenix::Transform _this = this->transform;
HXDLIN(  52)			 ::phoenix::Vector _this1 = this->transform->local->pos;
HXDLIN(  52)			Float _x1 = _x;
HXDLIN(  52)			Float _y1 = _y;
HXDLIN(  52)			bool prev = _this1->ignore_listeners;
HXDLIN(  52)			_this1->ignore_listeners = true;
HXDLIN(  52)			{
HXLINE(  52)				_this1->x = _x1;
HXDLIN(  52)				if (!(_this1->_construct)) {
HXLINE(  52)					bool _hx_tmp;
HXDLIN(  52)					if (hx::IsNotNull( _this1->listen_x )) {
HXLINE(  52)						_hx_tmp = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE(  52)						_hx_tmp = false;
            					}
HXDLIN(  52)					if (_hx_tmp) {
HXLINE(  52)						_this1->listen_x(_x1);
            					}
            				}
            			}
HXDLIN(  52)			{
HXLINE(  52)				_this1->y = _y1;
HXDLIN(  52)				if (!(_this1->_construct)) {
HXLINE(  52)					bool _hx_tmp1;
HXDLIN(  52)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE(  52)						_hx_tmp1 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE(  52)						_hx_tmp1 = false;
            					}
HXDLIN(  52)					if (_hx_tmp1) {
HXLINE(  52)						_this1->listen_y(_y1);
            					}
            				}
            			}
HXDLIN(  52)			_this1->ignore_listeners = prev;
HXDLIN(  52)			bool _hx_tmp2;
HXDLIN(  52)			if (hx::IsNotNull( _this1->listen_x )) {
HXLINE(  52)				_hx_tmp2 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE(  52)				_hx_tmp2 = false;
            			}
HXDLIN(  52)			if (_hx_tmp2) {
HXLINE(  52)				_this1->listen_x(_this1->x);
            			}
HXDLIN(  52)			bool _hx_tmp3;
HXDLIN(  52)			if (hx::IsNotNull( _this1->listen_y )) {
HXLINE(  52)				_hx_tmp3 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE(  52)				_hx_tmp3 = false;
            			}
HXDLIN(  52)			if (_hx_tmp3) {
HXLINE(  52)				_this1->listen_y(_this1->y);
            			}
HXDLIN(  52)			 ::phoenix::Vector value = _this1;
HXDLIN(  52)			{
HXLINE(  52)				 ::phoenix::Spatial _this2 = _this->local;
HXDLIN(  52)				_this2->pos = value;
HXDLIN(  52)				if (hx::IsNotNull( value )) {
HXLINE(  52)					{
HXLINE(  52)						 ::phoenix::Vector _v = _this2->pos;
HXDLIN(  52)						 ::Dynamic listener = _this2->_pos_change_dyn();
HXDLIN(  52)						_v->listen_x = listener;
HXDLIN(  52)						_v->listen_y = listener;
HXDLIN(  52)						_v->listen_z = listener;
            					}
HXDLIN(  52)					{
HXLINE(  52)						bool _hx_tmp4;
HXDLIN(  52)						if (hx::IsNotNull( _this2->pos_changed )) {
HXLINE(  52)							_hx_tmp4 = !(_this2->ignore_listeners);
            						}
            						else {
HXLINE(  52)							_hx_tmp4 = false;
            						}
HXDLIN(  52)						if (_hx_tmp4) {
HXLINE(  52)							_this2->pos_changed(_this2->pos);
            						}
            					}
            				}
            			}
            		}
            	}

Dynamic RectangleGeometry_obj::__CreateEmpty() { return new RectangleGeometry_obj; }

void *RectangleGeometry_obj::_hx_vtable = 0;

Dynamic RectangleGeometry_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RectangleGeometry_obj > _hx_result = new RectangleGeometry_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool RectangleGeometry_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x648dae00) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x648dae00;
	} else {
		return inClassId==(int)0x6c1faa93;
	}
}

void RectangleGeometry_obj::set_xywh(Float _x,Float _y,Float _w,Float _h){
            	HX_STACKFRAME(&_hx_pos_fa1d76a22eb0fd1a_57_set_xywh)
HXLINE(  59)		if ((this->vertices->length == (int)0)) {
HXLINE(  59)			return;
            		}
HXLINE(  61)		{
HXLINE(  61)			 ::phoenix::Vector _this = this->vertices->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN(  61)			bool prev = _this->ignore_listeners;
HXDLIN(  61)			_this->ignore_listeners = true;
HXDLIN(  61)			{
HXLINE(  61)				_this->x = (int)0;
HXDLIN(  61)				if (!(_this->_construct)) {
HXLINE(  61)					bool _hx_tmp;
HXDLIN(  61)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE(  61)						_hx_tmp = !(_this->ignore_listeners);
            					}
            					else {
HXLINE(  61)						_hx_tmp = false;
            					}
HXDLIN(  61)					if (_hx_tmp) {
HXLINE(  61)						_this->listen_x((int)0);
            					}
            				}
            			}
HXDLIN(  61)			{
HXLINE(  61)				_this->y = (int)0;
HXDLIN(  61)				if (!(_this->_construct)) {
HXLINE(  61)					bool _hx_tmp1;
HXDLIN(  61)					if (hx::IsNotNull( _this->listen_y )) {
HXLINE(  61)						_hx_tmp1 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE(  61)						_hx_tmp1 = false;
            					}
HXDLIN(  61)					if (_hx_tmp1) {
HXLINE(  61)						_this->listen_y((int)0);
            					}
            				}
            			}
HXDLIN(  61)			_this->ignore_listeners = prev;
HXDLIN(  61)			bool _hx_tmp2;
HXDLIN(  61)			if (hx::IsNotNull( _this->listen_x )) {
HXLINE(  61)				_hx_tmp2 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE(  61)				_hx_tmp2 = false;
            			}
HXDLIN(  61)			if (_hx_tmp2) {
HXLINE(  61)				_this->listen_x(_this->x);
            			}
HXDLIN(  61)			bool _hx_tmp3;
HXDLIN(  61)			if (hx::IsNotNull( _this->listen_y )) {
HXLINE(  61)				_hx_tmp3 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE(  61)				_hx_tmp3 = false;
            			}
HXDLIN(  61)			if (_hx_tmp3) {
HXLINE(  61)				_this->listen_y(_this->y);
            			}
            		}
HXLINE(  63)		{
HXLINE(  63)			 ::phoenix::Vector _this1 = this->vertices->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN(  63)			bool prev1 = _this1->ignore_listeners;
HXDLIN(  63)			_this1->ignore_listeners = true;
HXDLIN(  63)			{
HXLINE(  63)				_this1->x = _w;
HXDLIN(  63)				if (!(_this1->_construct)) {
HXLINE(  63)					bool _hx_tmp4;
HXDLIN(  63)					if (hx::IsNotNull( _this1->listen_x )) {
HXLINE(  63)						_hx_tmp4 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE(  63)						_hx_tmp4 = false;
            					}
HXDLIN(  63)					if (_hx_tmp4) {
HXLINE(  63)						_this1->listen_x(_w);
            					}
            				}
            			}
HXDLIN(  63)			{
HXLINE(  63)				_this1->y = (int)0;
HXDLIN(  63)				if (!(_this1->_construct)) {
HXLINE(  63)					bool _hx_tmp5;
HXDLIN(  63)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE(  63)						_hx_tmp5 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE(  63)						_hx_tmp5 = false;
            					}
HXDLIN(  63)					if (_hx_tmp5) {
HXLINE(  63)						_this1->listen_y((int)0);
            					}
            				}
            			}
HXDLIN(  63)			_this1->ignore_listeners = prev1;
HXDLIN(  63)			bool _hx_tmp6;
HXDLIN(  63)			if (hx::IsNotNull( _this1->listen_x )) {
HXLINE(  63)				_hx_tmp6 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE(  63)				_hx_tmp6 = false;
            			}
HXDLIN(  63)			if (_hx_tmp6) {
HXLINE(  63)				_this1->listen_x(_this1->x);
            			}
HXDLIN(  63)			bool _hx_tmp7;
HXDLIN(  63)			if (hx::IsNotNull( _this1->listen_y )) {
HXLINE(  63)				_hx_tmp7 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE(  63)				_hx_tmp7 = false;
            			}
HXDLIN(  63)			if (_hx_tmp7) {
HXLINE(  63)				_this1->listen_y(_this1->y);
            			}
            		}
HXLINE(  66)		{
HXLINE(  66)			 ::phoenix::Vector _this2 = this->vertices->__get((int)2).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN(  66)			bool prev2 = _this2->ignore_listeners;
HXDLIN(  66)			_this2->ignore_listeners = true;
HXDLIN(  66)			{
HXLINE(  66)				_this2->x = _w;
HXDLIN(  66)				if (!(_this2->_construct)) {
HXLINE(  66)					bool _hx_tmp8;
HXDLIN(  66)					if (hx::IsNotNull( _this2->listen_x )) {
HXLINE(  66)						_hx_tmp8 = !(_this2->ignore_listeners);
            					}
            					else {
HXLINE(  66)						_hx_tmp8 = false;
            					}
HXDLIN(  66)					if (_hx_tmp8) {
HXLINE(  66)						_this2->listen_x(_w);
            					}
            				}
            			}
HXDLIN(  66)			{
HXLINE(  66)				_this2->y = (int)0;
HXDLIN(  66)				if (!(_this2->_construct)) {
HXLINE(  66)					bool _hx_tmp9;
HXDLIN(  66)					if (hx::IsNotNull( _this2->listen_y )) {
HXLINE(  66)						_hx_tmp9 = !(_this2->ignore_listeners);
            					}
            					else {
HXLINE(  66)						_hx_tmp9 = false;
            					}
HXDLIN(  66)					if (_hx_tmp9) {
HXLINE(  66)						_this2->listen_y((int)0);
            					}
            				}
            			}
HXDLIN(  66)			_this2->ignore_listeners = prev2;
HXDLIN(  66)			bool _hx_tmp10;
HXDLIN(  66)			if (hx::IsNotNull( _this2->listen_x )) {
HXLINE(  66)				_hx_tmp10 = !(_this2->ignore_listeners);
            			}
            			else {
HXLINE(  66)				_hx_tmp10 = false;
            			}
HXDLIN(  66)			if (_hx_tmp10) {
HXLINE(  66)				_this2->listen_x(_this2->x);
            			}
HXDLIN(  66)			bool _hx_tmp11;
HXDLIN(  66)			if (hx::IsNotNull( _this2->listen_y )) {
HXLINE(  66)				_hx_tmp11 = !(_this2->ignore_listeners);
            			}
            			else {
HXLINE(  66)				_hx_tmp11 = false;
            			}
HXDLIN(  66)			if (_hx_tmp11) {
HXLINE(  66)				_this2->listen_y(_this2->y);
            			}
            		}
HXLINE(  68)		{
HXLINE(  68)			 ::phoenix::Vector _this3 = this->vertices->__get((int)3).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN(  68)			bool prev3 = _this3->ignore_listeners;
HXDLIN(  68)			_this3->ignore_listeners = true;
HXDLIN(  68)			{
HXLINE(  68)				_this3->x = _w;
HXDLIN(  68)				if (!(_this3->_construct)) {
HXLINE(  68)					bool _hx_tmp12;
HXDLIN(  68)					if (hx::IsNotNull( _this3->listen_x )) {
HXLINE(  68)						_hx_tmp12 = !(_this3->ignore_listeners);
            					}
            					else {
HXLINE(  68)						_hx_tmp12 = false;
            					}
HXDLIN(  68)					if (_hx_tmp12) {
HXLINE(  68)						_this3->listen_x(_w);
            					}
            				}
            			}
HXDLIN(  68)			{
HXLINE(  68)				_this3->y = _h;
HXDLIN(  68)				if (!(_this3->_construct)) {
HXLINE(  68)					bool _hx_tmp13;
HXDLIN(  68)					if (hx::IsNotNull( _this3->listen_y )) {
HXLINE(  68)						_hx_tmp13 = !(_this3->ignore_listeners);
            					}
            					else {
HXLINE(  68)						_hx_tmp13 = false;
            					}
HXDLIN(  68)					if (_hx_tmp13) {
HXLINE(  68)						_this3->listen_y(_h);
            					}
            				}
            			}
HXDLIN(  68)			_this3->ignore_listeners = prev3;
HXDLIN(  68)			bool _hx_tmp14;
HXDLIN(  68)			if (hx::IsNotNull( _this3->listen_x )) {
HXLINE(  68)				_hx_tmp14 = !(_this3->ignore_listeners);
            			}
            			else {
HXLINE(  68)				_hx_tmp14 = false;
            			}
HXDLIN(  68)			if (_hx_tmp14) {
HXLINE(  68)				_this3->listen_x(_this3->x);
            			}
HXDLIN(  68)			bool _hx_tmp15;
HXDLIN(  68)			if (hx::IsNotNull( _this3->listen_y )) {
HXLINE(  68)				_hx_tmp15 = !(_this3->ignore_listeners);
            			}
            			else {
HXLINE(  68)				_hx_tmp15 = false;
            			}
HXDLIN(  68)			if (_hx_tmp15) {
HXLINE(  68)				_this3->listen_y(_this3->y);
            			}
            		}
HXLINE(  71)		{
HXLINE(  71)			 ::phoenix::Vector _this4 = this->vertices->__get((int)4).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN(  71)			bool prev4 = _this4->ignore_listeners;
HXDLIN(  71)			_this4->ignore_listeners = true;
HXDLIN(  71)			{
HXLINE(  71)				_this4->x = _w;
HXDLIN(  71)				if (!(_this4->_construct)) {
HXLINE(  71)					bool _hx_tmp16;
HXDLIN(  71)					if (hx::IsNotNull( _this4->listen_x )) {
HXLINE(  71)						_hx_tmp16 = !(_this4->ignore_listeners);
            					}
            					else {
HXLINE(  71)						_hx_tmp16 = false;
            					}
HXDLIN(  71)					if (_hx_tmp16) {
HXLINE(  71)						_this4->listen_x(_w);
            					}
            				}
            			}
HXDLIN(  71)			{
HXLINE(  71)				_this4->y = _h;
HXDLIN(  71)				if (!(_this4->_construct)) {
HXLINE(  71)					bool _hx_tmp17;
HXDLIN(  71)					if (hx::IsNotNull( _this4->listen_y )) {
HXLINE(  71)						_hx_tmp17 = !(_this4->ignore_listeners);
            					}
            					else {
HXLINE(  71)						_hx_tmp17 = false;
            					}
HXDLIN(  71)					if (_hx_tmp17) {
HXLINE(  71)						_this4->listen_y(_h);
            					}
            				}
            			}
HXDLIN(  71)			_this4->ignore_listeners = prev4;
HXDLIN(  71)			bool _hx_tmp18;
HXDLIN(  71)			if (hx::IsNotNull( _this4->listen_x )) {
HXLINE(  71)				_hx_tmp18 = !(_this4->ignore_listeners);
            			}
            			else {
HXLINE(  71)				_hx_tmp18 = false;
            			}
HXDLIN(  71)			if (_hx_tmp18) {
HXLINE(  71)				_this4->listen_x(_this4->x);
            			}
HXDLIN(  71)			bool _hx_tmp19;
HXDLIN(  71)			if (hx::IsNotNull( _this4->listen_y )) {
HXLINE(  71)				_hx_tmp19 = !(_this4->ignore_listeners);
            			}
            			else {
HXLINE(  71)				_hx_tmp19 = false;
            			}
HXDLIN(  71)			if (_hx_tmp19) {
HXLINE(  71)				_this4->listen_y(_this4->y);
            			}
            		}
HXLINE(  73)		{
HXLINE(  73)			 ::phoenix::Vector _this5 = this->vertices->__get((int)5).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN(  73)			bool prev5 = _this5->ignore_listeners;
HXDLIN(  73)			_this5->ignore_listeners = true;
HXDLIN(  73)			{
HXLINE(  73)				_this5->x = (int)0;
HXDLIN(  73)				if (!(_this5->_construct)) {
HXLINE(  73)					bool _hx_tmp20;
HXDLIN(  73)					if (hx::IsNotNull( _this5->listen_x )) {
HXLINE(  73)						_hx_tmp20 = !(_this5->ignore_listeners);
            					}
            					else {
HXLINE(  73)						_hx_tmp20 = false;
            					}
HXDLIN(  73)					if (_hx_tmp20) {
HXLINE(  73)						_this5->listen_x((int)0);
            					}
            				}
            			}
HXDLIN(  73)			{
HXLINE(  73)				_this5->y = _h;
HXDLIN(  73)				if (!(_this5->_construct)) {
HXLINE(  73)					bool _hx_tmp21;
HXDLIN(  73)					if (hx::IsNotNull( _this5->listen_y )) {
HXLINE(  73)						_hx_tmp21 = !(_this5->ignore_listeners);
            					}
            					else {
HXLINE(  73)						_hx_tmp21 = false;
            					}
HXDLIN(  73)					if (_hx_tmp21) {
HXLINE(  73)						_this5->listen_y(_h);
            					}
            				}
            			}
HXDLIN(  73)			_this5->ignore_listeners = prev5;
HXDLIN(  73)			bool _hx_tmp22;
HXDLIN(  73)			if (hx::IsNotNull( _this5->listen_x )) {
HXLINE(  73)				_hx_tmp22 = !(_this5->ignore_listeners);
            			}
            			else {
HXLINE(  73)				_hx_tmp22 = false;
            			}
HXDLIN(  73)			if (_hx_tmp22) {
HXLINE(  73)				_this5->listen_x(_this5->x);
            			}
HXDLIN(  73)			bool _hx_tmp23;
HXDLIN(  73)			if (hx::IsNotNull( _this5->listen_y )) {
HXLINE(  73)				_hx_tmp23 = !(_this5->ignore_listeners);
            			}
            			else {
HXLINE(  73)				_hx_tmp23 = false;
            			}
HXDLIN(  73)			if (_hx_tmp23) {
HXLINE(  73)				_this5->listen_y(_this5->y);
            			}
            		}
HXLINE(  76)		{
HXLINE(  76)			 ::phoenix::Vector _this6 = this->vertices->__get((int)6).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN(  76)			bool prev6 = _this6->ignore_listeners;
HXDLIN(  76)			_this6->ignore_listeners = true;
HXDLIN(  76)			{
HXLINE(  76)				_this6->x = (int)0;
HXDLIN(  76)				if (!(_this6->_construct)) {
HXLINE(  76)					bool _hx_tmp24;
HXDLIN(  76)					if (hx::IsNotNull( _this6->listen_x )) {
HXLINE(  76)						_hx_tmp24 = !(_this6->ignore_listeners);
            					}
            					else {
HXLINE(  76)						_hx_tmp24 = false;
            					}
HXDLIN(  76)					if (_hx_tmp24) {
HXLINE(  76)						_this6->listen_x((int)0);
            					}
            				}
            			}
HXDLIN(  76)			{
HXLINE(  76)				_this6->y = _h;
HXDLIN(  76)				if (!(_this6->_construct)) {
HXLINE(  76)					bool _hx_tmp25;
HXDLIN(  76)					if (hx::IsNotNull( _this6->listen_y )) {
HXLINE(  76)						_hx_tmp25 = !(_this6->ignore_listeners);
            					}
            					else {
HXLINE(  76)						_hx_tmp25 = false;
            					}
HXDLIN(  76)					if (_hx_tmp25) {
HXLINE(  76)						_this6->listen_y(_h);
            					}
            				}
            			}
HXDLIN(  76)			_this6->ignore_listeners = prev6;
HXDLIN(  76)			bool _hx_tmp26;
HXDLIN(  76)			if (hx::IsNotNull( _this6->listen_x )) {
HXLINE(  76)				_hx_tmp26 = !(_this6->ignore_listeners);
            			}
            			else {
HXLINE(  76)				_hx_tmp26 = false;
            			}
HXDLIN(  76)			if (_hx_tmp26) {
HXLINE(  76)				_this6->listen_x(_this6->x);
            			}
HXDLIN(  76)			bool _hx_tmp27;
HXDLIN(  76)			if (hx::IsNotNull( _this6->listen_y )) {
HXLINE(  76)				_hx_tmp27 = !(_this6->ignore_listeners);
            			}
            			else {
HXLINE(  76)				_hx_tmp27 = false;
            			}
HXDLIN(  76)			if (_hx_tmp27) {
HXLINE(  76)				_this6->listen_y(_this6->y);
            			}
            		}
HXLINE(  78)		{
HXLINE(  78)			 ::phoenix::Vector _this7 = this->vertices->__get((int)7).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXDLIN(  78)			bool prev7 = _this7->ignore_listeners;
HXDLIN(  78)			_this7->ignore_listeners = true;
HXDLIN(  78)			{
HXLINE(  78)				_this7->x = (int)0;
HXDLIN(  78)				if (!(_this7->_construct)) {
HXLINE(  78)					bool _hx_tmp28;
HXDLIN(  78)					if (hx::IsNotNull( _this7->listen_x )) {
HXLINE(  78)						_hx_tmp28 = !(_this7->ignore_listeners);
            					}
            					else {
HXLINE(  78)						_hx_tmp28 = false;
            					}
HXDLIN(  78)					if (_hx_tmp28) {
HXLINE(  78)						_this7->listen_x((int)0);
            					}
            				}
            			}
HXDLIN(  78)			{
HXLINE(  78)				_this7->y = (int)0;
HXDLIN(  78)				if (!(_this7->_construct)) {
HXLINE(  78)					bool _hx_tmp29;
HXDLIN(  78)					if (hx::IsNotNull( _this7->listen_y )) {
HXLINE(  78)						_hx_tmp29 = !(_this7->ignore_listeners);
            					}
            					else {
HXLINE(  78)						_hx_tmp29 = false;
            					}
HXDLIN(  78)					if (_hx_tmp29) {
HXLINE(  78)						_this7->listen_y((int)0);
            					}
            				}
            			}
HXDLIN(  78)			_this7->ignore_listeners = prev7;
HXDLIN(  78)			bool _hx_tmp30;
HXDLIN(  78)			if (hx::IsNotNull( _this7->listen_x )) {
HXLINE(  78)				_hx_tmp30 = !(_this7->ignore_listeners);
            			}
            			else {
HXLINE(  78)				_hx_tmp30 = false;
            			}
HXDLIN(  78)			if (_hx_tmp30) {
HXLINE(  78)				_this7->listen_x(_this7->x);
            			}
HXDLIN(  78)			bool _hx_tmp31;
HXDLIN(  78)			if (hx::IsNotNull( _this7->listen_y )) {
HXLINE(  78)				_hx_tmp31 = !(_this7->ignore_listeners);
            			}
            			else {
HXLINE(  78)				_hx_tmp31 = false;
            			}
HXDLIN(  78)			if (_hx_tmp31) {
HXLINE(  78)				_this7->listen_y(_this7->y);
            			}
            		}
HXLINE(  81)		{
HXLINE(  81)			 ::phoenix::Transform _this8 = this->transform;
HXDLIN(  81)			 ::phoenix::Vector _this9 = this->transform->local->pos;
HXDLIN(  81)			bool prev8 = _this9->ignore_listeners;
HXDLIN(  81)			_this9->ignore_listeners = true;
HXDLIN(  81)			{
HXLINE(  81)				_this9->x = _x;
HXDLIN(  81)				if (!(_this9->_construct)) {
HXLINE(  81)					bool _hx_tmp32;
HXDLIN(  81)					if (hx::IsNotNull( _this9->listen_x )) {
HXLINE(  81)						_hx_tmp32 = !(_this9->ignore_listeners);
            					}
            					else {
HXLINE(  81)						_hx_tmp32 = false;
            					}
HXDLIN(  81)					if (_hx_tmp32) {
HXLINE(  81)						_this9->listen_x(_x);
            					}
            				}
            			}
HXDLIN(  81)			{
HXLINE(  81)				_this9->y = _y;
HXDLIN(  81)				if (!(_this9->_construct)) {
HXLINE(  81)					bool _hx_tmp33;
HXDLIN(  81)					if (hx::IsNotNull( _this9->listen_y )) {
HXLINE(  81)						_hx_tmp33 = !(_this9->ignore_listeners);
            					}
            					else {
HXLINE(  81)						_hx_tmp33 = false;
            					}
HXDLIN(  81)					if (_hx_tmp33) {
HXLINE(  81)						_this9->listen_y(_y);
            					}
            				}
            			}
HXDLIN(  81)			_this9->ignore_listeners = prev8;
HXDLIN(  81)			bool _hx_tmp34;
HXDLIN(  81)			if (hx::IsNotNull( _this9->listen_x )) {
HXLINE(  81)				_hx_tmp34 = !(_this9->ignore_listeners);
            			}
            			else {
HXLINE(  81)				_hx_tmp34 = false;
            			}
HXDLIN(  81)			if (_hx_tmp34) {
HXLINE(  81)				_this9->listen_x(_this9->x);
            			}
HXDLIN(  81)			bool _hx_tmp35;
HXDLIN(  81)			if (hx::IsNotNull( _this9->listen_y )) {
HXLINE(  81)				_hx_tmp35 = !(_this9->ignore_listeners);
            			}
            			else {
HXLINE(  81)				_hx_tmp35 = false;
            			}
HXDLIN(  81)			if (_hx_tmp35) {
HXLINE(  81)				_this9->listen_y(_this9->y);
            			}
HXDLIN(  81)			 ::phoenix::Vector value = _this9;
HXDLIN(  81)			{
HXLINE(  81)				 ::phoenix::Spatial _this10 = _this8->local;
HXDLIN(  81)				_this10->pos = value;
HXDLIN(  81)				if (hx::IsNotNull( value )) {
HXLINE(  81)					{
HXLINE(  81)						 ::phoenix::Vector _v = _this10->pos;
HXDLIN(  81)						 ::Dynamic listener = _this10->_pos_change_dyn();
HXDLIN(  81)						_v->listen_x = listener;
HXDLIN(  81)						_v->listen_y = listener;
HXDLIN(  81)						_v->listen_z = listener;
            					}
HXDLIN(  81)					{
HXLINE(  81)						bool _hx_tmp36;
HXDLIN(  81)						if (hx::IsNotNull( _this10->pos_changed )) {
HXLINE(  81)							_hx_tmp36 = !(_this10->ignore_listeners);
            						}
            						else {
HXLINE(  81)							_hx_tmp36 = false;
            						}
HXDLIN(  81)						if (_hx_tmp36) {
HXLINE(  81)							_this10->pos_changed(_this10->pos);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(RectangleGeometry_obj,set_xywh,(void))

void RectangleGeometry_obj::set( ::phoenix::Rectangle _rect){
            	HX_STACKFRAME(&_hx_pos_fa1d76a22eb0fd1a_88_set)
HXDLIN(  88)		this->set_xywh(_rect->x,_rect->y,_rect->w,_rect->h);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RectangleGeometry_obj,set,(void))


hx::ObjectPtr< RectangleGeometry_obj > RectangleGeometry_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< RectangleGeometry_obj > __this = new RectangleGeometry_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< RectangleGeometry_obj > RectangleGeometry_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	RectangleGeometry_obj *__this = (RectangleGeometry_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RectangleGeometry_obj), true, "phoenix.geometry.RectangleGeometry"));
	*(void **)__this = RectangleGeometry_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

RectangleGeometry_obj::RectangleGeometry_obj()
{
}

hx::Val RectangleGeometry_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"set_xywh") ) { return hx::Val( set_xywh_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *RectangleGeometry_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *RectangleGeometry_obj_sStaticStorageInfo = 0;
#endif

static ::String RectangleGeometry_obj_sMemberFields[] = {
	HX_HCSTRING("set_xywh","\x4f","\xe8","\xc5","\x7d"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void RectangleGeometry_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RectangleGeometry_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RectangleGeometry_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RectangleGeometry_obj::__mClass,"__mClass");
};

#endif

hx::Class RectangleGeometry_obj::__mClass;

void RectangleGeometry_obj::__register()
{
	hx::Object *dummy = new RectangleGeometry_obj;
	RectangleGeometry_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.geometry.RectangleGeometry","\xa4","\xed","\xa8","\x10");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RectangleGeometry_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RectangleGeometry_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RectangleGeometry_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RectangleGeometry_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RectangleGeometry_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RectangleGeometry_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
} // end namespace geometry
