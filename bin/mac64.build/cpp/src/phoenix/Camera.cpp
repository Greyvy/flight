// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_Screen
#include <luxe/Screen.h>
#endif
#ifndef INCLUDED_phoenix_Camera
#include <phoenix/Camera.h>
#endif
#ifndef INCLUDED_phoenix_FOVType
#include <phoenix/FOVType.h>
#endif
#ifndef INCLUDED_phoenix_Matrix
#include <phoenix/Matrix.h>
#endif
#ifndef INCLUDED_phoenix_ProjectionType
#include <phoenix/ProjectionType.h>
#endif
#ifndef INCLUDED_phoenix_Quaternion
#include <phoenix/Quaternion.h>
#endif
#ifndef INCLUDED_phoenix_Ray
#include <phoenix/Ray.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_RenderState
#include <phoenix/RenderState.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_Spatial
#include <phoenix/Spatial.h>
#endif
#ifndef INCLUDED_phoenix_Transform
#include <phoenix/Transform.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_26_new,"phoenix.Camera","new",0x30bf44b6,"phoenix.Camera.new","phoenix/Camera.hx",26,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_125_set_ortho,"phoenix.Camera","set_ortho",0xe0d7b871,"phoenix.Camera.set_ortho","phoenix/Camera.hx",125,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_133_set_perspective,"phoenix.Camera","set_perspective",0xca12b775,"phoenix.Camera.set_perspective","phoenix/Camera.hx",133,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_143_project,"phoenix.Camera","project",0x37966a2f,"phoenix.Camera.project","phoenix/Camera.hx",143,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_152_unproject,"phoenix.Camera","unproject",0x769d7276,"phoenix.Camera.unproject","phoenix/Camera.hx",152,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_163_screen_point_to_ray,"phoenix.Camera","screen_point_to_ray",0x118f857e,"phoenix.Camera.screen_point_to_ray","phoenix/Camera.hx",163,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_167_screen_point_to_world,"phoenix.Camera","screen_point_to_world",0x22d752e6,"phoenix.Camera.screen_point_to_world","phoenix/Camera.hx",167,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_180_world_point_to_screen,"phoenix.Camera","world_point_to_screen",0x231a6faa,"phoenix.Camera.world_point_to_screen","phoenix/Camera.hx",180,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_197_process,"phoenix.Camera","process",0x32f5f9c5,"phoenix.Camera.process","phoenix/Camera.hx",197,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_209_update_matrices,"phoenix.Camera","update_matrices",0xa8a4f726,"phoenix.Camera.update_matrices","phoenix/Camera.hx",209,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_224_on_transform_cleaned,"phoenix.Camera","on_transform_cleaned",0x6436d59f,"phoenix.Camera.on_transform_cleaned","phoenix/Camera.hx",224,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_231_update_look_at,"phoenix.Camera","update_look_at",0x27c83a07,"phoenix.Camera.update_look_at","phoenix/Camera.hx",231,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_241_update_view_matrix,"phoenix.Camera","update_view_matrix",0x11cad60f,"phoenix.Camera.update_view_matrix","phoenix/Camera.hx",241,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_256_update_projection_matrix,"phoenix.Camera","update_projection_matrix",0x7401e825,"phoenix.Camera.update_projection_matrix","phoenix/Camera.hx",256,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_298_apply_state,"phoenix.Camera","apply_state",0xdb71c396,"phoenix.Camera.apply_state","phoenix/Camera.hx",298,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_308_apply_default_camera_options,"phoenix.Camera","apply_default_camera_options",0xf72e1e5d,"phoenix.Camera.apply_default_camera_options","phoenix/Camera.hx",308,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_332_default_camera_options,"phoenix.Camera","default_camera_options",0x036c4aec,"phoenix.Camera.default_camera_options","phoenix/Camera.hx",332,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_345_ortho_screen_to_world,"phoenix.Camera","ortho_screen_to_world",0x90978b50,"phoenix.Camera.ortho_screen_to_world","phoenix/Camera.hx",345,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_353_ortho_world_to_screen,"phoenix.Camera","ortho_world_to_screen",0x1f31d512,"phoenix.Camera.ortho_world_to_screen","phoenix/Camera.hx",353,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_361_persepective_world_to_screen,"phoenix.Camera","persepective_world_to_screen",0x526987d1,"phoenix.Camera.persepective_world_to_screen","phoenix/Camera.hx",361,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_380_set_target,"phoenix.Camera","set_target",0x108f63f8,"phoenix.Camera.set_target","phoenix/Camera.hx",380,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_390_set_fov,"phoenix.Camera","set_fov",0x5b6f7806,"phoenix.Camera.set_fov","phoenix/Camera.hx",390,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_404_set_fov_type,"phoenix.Camera","set_fov_type",0x0bbbc0d3,"phoenix.Camera.set_fov_type","phoenix/Camera.hx",404,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_414_set_aspect,"phoenix.Camera","set_aspect",0xd3aa067f,"phoenix.Camera.set_aspect","phoenix/Camera.hx",414,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_429_set_near,"phoenix.Camera","set_near",0xab5b99cf,"phoenix.Camera.set_near","phoenix/Camera.hx",429,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_437_set_far,"phoenix.Camera","set_far",0x5b6f6bd0,"phoenix.Camera.set_far","phoenix/Camera.hx",437,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_445_set_ortho_left,"phoenix.Camera","set_ortho_left",0x874231d5,"phoenix.Camera.set_ortho_left","phoenix/Camera.hx",445,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_453_set_ortho_right,"phoenix.Camera","set_ortho_right",0x49b6764e,"phoenix.Camera.set_ortho_right","phoenix/Camera.hx",453,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_461_set_ortho_top,"phoenix.Camera","set_ortho_top",0xa27ef087,"phoenix.Camera.set_ortho_top","phoenix/Camera.hx",461,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_469_set_ortho_bottom,"phoenix.Camera","set_ortho_bottom",0x4d43a039,"phoenix.Camera.set_ortho_bottom","phoenix/Camera.hx",469,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_478_set_zoom,"phoenix.Camera","set_zoom",0xb351cbfa,"phoenix.Camera.set_zoom","phoenix/Camera.hx",478,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_515_set_center,"phoenix.Camera","set_center",0x8f7d967c,"phoenix.Camera.set_center","phoenix/Camera.hx",515,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_549_get_center,"phoenix.Camera","get_center",0x8bfff808,"phoenix.Camera.get_center","phoenix/Camera.hx",549,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_555_get_pos,"phoenix.Camera","get_pos",0x68757d81,"phoenix.Camera.get_pos","phoenix/Camera.hx",555,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_561_get_rotation,"phoenix.Camera","get_rotation",0xff2a4231,"phoenix.Camera.get_rotation","phoenix/Camera.hx",561,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_567_get_scale,"phoenix.Camera","get_scale",0x412883b7,"phoenix.Camera.get_scale","phoenix/Camera.hx",567,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_573_get_viewport,"phoenix.Camera","get_viewport",0x93495159,"phoenix.Camera.get_viewport","phoenix/Camera.hx",573,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_577_set_viewport,"phoenix.Camera","set_viewport",0xa84274cd,"phoenix.Camera.set_viewport","phoenix/Camera.hx",577,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_605_set_rotation,"phoenix.Camera","set_rotation",0x142365a5,"phoenix.Camera.set_rotation","phoenix/Camera.hx",605,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_611_set_scale,"phoenix.Camera","set_scale",0x24796fc3,"phoenix.Camera.set_scale","phoenix/Camera.hx",611,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_615_set_pos,"phoenix.Camera","set_pos",0x5b770e8d,"phoenix.Camera.set_pos","phoenix/Camera.hx",615,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_655__merge_options,"phoenix.Camera","_merge_options",0x6b347742,"phoenix.Camera._merge_options","phoenix/Camera.hx",655,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_680__pos_changed,"phoenix.Camera","_pos_changed",0x32241af4,"phoenix.Camera._pos_changed","phoenix/Camera.hx",680,0x1fcabb59)
HX_LOCAL_STACK_FRAME(_hx_pos_d1b7485dbf1849bd_686__center_changed,"phoenix.Camera","_center_changed",0xdc3d733f,"phoenix.Camera._center_changed","phoenix/Camera.hx",686,0x1fcabb59)
namespace phoenix{

void Camera_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_26_new)
HXLINE( 514)		this->refresh_pos_ = false;
HXLINE( 228)		this->up_ =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(int)1,(int)0,null());
HXLINE(  80)		this->setup_ = true;
HXLINE(  78)		this->look_at_dirty = true;
HXLINE(  76)		this->projection_dirty = true;
HXLINE(  74)		this->transform_dirty = true;
HXLINE(  53)		this->minimum_zoom = ((Float)0.01);
HXLINE(  51)		this->depth_test = false;
HXLINE(  50)		this->cull_backfaces = false;
HXLINE(  39)		this->aspect = ((Float)1.5);
HXLINE(  38)		this->fov_type = ::phoenix::FOVType_obj::horizontal_dyn();
HXLINE(  37)		this->fov = ((Float)60);
HXLINE(  35)		this->_hx_far = ((Float)-1000);
HXLINE(  34)		this->_hx_near = ((Float)1000);
HXLINE(  32)		this->zoom = ((Float)1.0);
HXLINE(  28)		this->name = HX_("camera",a5,46,8c,b7);
HXLINE(  85)		this->transform =  ::phoenix::Transform_obj::__alloc( HX_CTX );
HXLINE(  86)		this->projection_matrix =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  87)		this->view_matrix =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  88)		this->view_matrix_inverse =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  89)		this->look_at_matrix =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  92)		if (hx::IsNull( _options )) {
HXLINE(  92)			_options =  ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("projection",8f,88,8b,c4),::phoenix::ProjectionType_obj::ortho_dyn())
            				->setFixed(1,HX_("depth_test",4e,68,49,c9),false)
            				->setFixed(2,HX_("cull_backfaces",a2,e1,06,e5),false)
            				->setFixed(3,HX_("far",d7,ba,4d,00),(int)-1000)
            				->setFixed(4,HX_("near",e8,70,02,49),(int)1000));
            		}
HXLINE(  93)		if (hx::IsNull( _options->__Field(HX_("projection",8f,88,8b,c4),hx::paccDynamic) )) {
HXLINE(  93)			_options->__SetField(HX_("projection",8f,88,8b,c4),::phoenix::ProjectionType_obj::ortho_dyn(),hx::paccDynamic);
            		}
HXDLIN(  93)		this->projection = _options->__Field(HX_("projection",8f,88,8b,c4),hx::paccDynamic);
HXLINE(  94)		Float _hx_tmp = ((Float)::Luxe_obj::core->screen->get_w() / (Float)(int)2);
HXDLIN(  94)		this->set_center( ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,((Float)::Luxe_obj::core->screen->get_h() / (Float)(int)2),null(),null()));
HXLINE(  95)		this->set_pos( ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null()));
HXLINE(  97)		if (hx::IsNull( ( ( ::phoenix::Rectangle)(_options->__Field(HX_("viewport",66,4c,a5,9c),hx::paccDynamic)) ) )) {
HXLINE(  97)			int _hx_tmp1 = ::Luxe_obj::core->screen->get_w();
HXDLIN(  97)			_options->__SetField(HX_("viewport",66,4c,a5,9c), ::phoenix::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,_hx_tmp1,::Luxe_obj::core->screen->get_h()),hx::paccDynamic);
            		}
HXDLIN(  97)		this->set_viewport(( ( ::phoenix::Rectangle)(_options->__Field(HX_("viewport",66,4c,a5,9c),hx::paccDynamic)) ));
HXLINE(  99)		if (hx::IsNotNull( ( (::String)(_options->__Field(HX_("camera_name",65,11,29,5d),hx::paccDynamic)) ) )) {
HXLINE( 100)			this->name = ( (::String)(_options->__Field(HX_("camera_name",65,11,29,5d),hx::paccDynamic)) );
            		}
HXLINE( 103)		{
HXLINE( 103)			 ::phoenix::Transform _this = this->transform;
HXDLIN( 103)			if (hx::IsNull( _this->_clean_handlers )) {
HXLINE( 103)				_this->_clean_handlers = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXDLIN( 103)			_this->_clean_handlers->push(this->on_transform_cleaned_dyn());
            		}
HXLINE( 105)		{
HXLINE( 105)			 ::phoenix::ProjectionType _g = this->projection;
HXDLIN( 105)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 108)					this->set_ortho(_options);
            				}
            				break;
            				case (int)1: {
HXLINE( 110)					this->set_perspective(_options);
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            			}
            		}
HXLINE( 115)		this->process();
HXLINE( 117)		this->setup_ = false;
            	}

Dynamic Camera_obj::__CreateEmpty() { return new Camera_obj; }

void *Camera_obj::_hx_vtable = 0;

Dynamic Camera_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Camera_obj > _hx_result = new Camera_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Camera_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7dce844c;
}

void Camera_obj::set_ortho( ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_125_set_ortho)
HXLINE( 127)		this->projection = ::phoenix::ProjectionType_obj::ortho_dyn();
HXLINE( 129)		{
HXLINE( 129)			{
HXLINE( 129)				 ::phoenix::ProjectionType _g = this->projection;
HXDLIN( 129)				switch((int)(_hx_getEnumValueIndex(_g))){
            					case (int)0: {
HXLINE( 129)						this->cull_backfaces = false;
HXDLIN( 129)						this->depth_test = false;
            					}
            					break;
            					case (int)1: {
HXLINE( 129)						this->cull_backfaces = true;
HXDLIN( 129)						this->depth_test = true;
            					}
            					break;
            					case (int)2: {
            					}
            					break;
            				}
            			}
HXLINE( 129)			if (hx::IsNotNull( _options->__Field(HX_("aspect",d8,95,07,4a),hx::paccDynamic) )) {
HXLINE( 129)				this->projection_dirty = true;
HXDLIN( 129)				this->aspect = ( (Float)(_options->__Field(HX_("aspect",d8,95,07,4a),hx::paccDynamic)) );
HXDLIN( 129)				{
HXLINE( 129)					Float _fov = this->fov;
HXDLIN( 129)					this->projection_dirty = true;
HXDLIN( 129)					if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 129)						Float _hx_tmp = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 129)						Float _hx_tmp1 = ::Math_obj::tan(((Float)(_fov * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 129)						this->fov_y = (_hx_tmp * ((int)2 * ::Math_obj::atan((_hx_tmp1 * ((Float)(int)1 / (Float)this->aspect)))));
            					}
            					else {
HXLINE( 129)						this->fov_y = _fov;
            					}
HXDLIN( 129)					this->fov = _fov;
            				}
            			}
HXDLIN( 129)			if (hx::IsNotNull( _options->__Field(HX_("far",d7,ba,4d,00),hx::paccDynamic) )) {
HXLINE( 129)				this->projection_dirty = true;
HXDLIN( 129)				this->_hx_far = ( (Float)(_options->__Field(HX_("far",d7,ba,4d,00),hx::paccDynamic)) );
            			}
HXDLIN( 129)			if (hx::IsNotNull( _options->__Field(HX_("fov",0d,c7,4d,00),hx::paccDynamic) )) {
HXLINE( 129)				Float _fov1 = ( (Float)(_options->__Field(HX_("fov",0d,c7,4d,00),hx::paccDynamic)) );
HXDLIN( 129)				this->projection_dirty = true;
HXDLIN( 129)				if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 129)					Float _hx_tmp2 = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 129)					Float _hx_tmp3 = ::Math_obj::tan(((Float)(_fov1 * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 129)					this->fov_y = (_hx_tmp2 * ((int)2 * ::Math_obj::atan((_hx_tmp3 * ((Float)(int)1 / (Float)this->aspect)))));
            				}
            				else {
HXLINE( 129)					this->fov_y = _fov1;
            				}
HXDLIN( 129)				this->fov = _fov1;
            			}
HXDLIN( 129)			if (hx::IsNotNull( _options->__Field(HX_("near",e8,70,02,49),hx::paccDynamic) )) {
HXLINE( 129)				this->projection_dirty = true;
HXDLIN( 129)				this->_hx_near = ( (Float)(_options->__Field(HX_("near",e8,70,02,49),hx::paccDynamic)) );
            			}
HXDLIN( 129)			if (hx::IsNotNull( ( ( ::phoenix::Rectangle)(_options->__Field(HX_("viewport",66,4c,a5,9c),hx::paccDynamic)) ) )) {
HXLINE( 129)				this->set_viewport(( ( ::phoenix::Rectangle)(_options->__Field(HX_("viewport",66,4c,a5,9c),hx::paccDynamic)) ));
            			}
HXDLIN( 129)			if (hx::IsNotNull( _options->__Field(HX_("cull_backfaces",a2,e1,06,e5),hx::paccDynamic) )) {
HXLINE( 129)				this->cull_backfaces = ( (bool)(_options->__Field(HX_("cull_backfaces",a2,e1,06,e5),hx::paccDynamic)) );
            			}
HXDLIN( 129)			if (hx::IsNotNull( _options->__Field(HX_("depth_test",4e,68,49,c9),hx::paccDynamic) )) {
HXLINE( 129)				this->depth_test = ( (bool)(_options->__Field(HX_("depth_test",4e,68,49,c9),hx::paccDynamic)) );
            			}
HXDLIN( 129)			if (hx::IsNotNull( _options->__Field(HX_("fov_type",6c,98,1e,00),hx::paccDynamic) )) {
HXLINE( 129)				this->fov_type = _options->__Field(HX_("fov_type",6c,98,1e,00),hx::paccDynamic);
HXDLIN( 129)				{
HXLINE( 129)					Float _fov2 = this->fov;
HXDLIN( 129)					this->projection_dirty = true;
HXDLIN( 129)					if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 129)						Float _hx_tmp4 = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 129)						Float _hx_tmp5 = ::Math_obj::tan(((Float)(_fov2 * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 129)						this->fov_y = (_hx_tmp4 * ((int)2 * ::Math_obj::atan((_hx_tmp5 * ((Float)(int)1 / (Float)this->aspect)))));
            					}
            					else {
HXLINE( 129)						this->fov_y = _fov2;
            					}
HXDLIN( 129)					this->fov = _fov2;
            				}
            			}
            			else {
HXLINE( 129)				this->fov_type = ::phoenix::FOVType_obj::horizontal_dyn();
HXDLIN( 129)				{
HXLINE( 129)					Float _fov3 = this->fov;
HXDLIN( 129)					this->projection_dirty = true;
HXDLIN( 129)					if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 129)						Float _hx_tmp6 = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 129)						Float _hx_tmp7 = ::Math_obj::tan(((Float)(_fov3 * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 129)						this->fov_y = (_hx_tmp6 * ((int)2 * ::Math_obj::atan((_hx_tmp7 * ((Float)(int)1 / (Float)this->aspect)))));
            					}
            					else {
HXLINE( 129)						this->fov_y = _fov3;
            					}
HXDLIN( 129)					this->fov = _fov3;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_ortho,(void))

void Camera_obj::set_perspective( ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_133_set_perspective)
HXLINE( 135)		this->projection = ::phoenix::ProjectionType_obj::perspective_dyn();
HXLINE( 137)		{
HXLINE( 137)			{
HXLINE( 137)				 ::phoenix::ProjectionType _g = this->projection;
HXDLIN( 137)				switch((int)(_hx_getEnumValueIndex(_g))){
            					case (int)0: {
HXLINE( 137)						this->cull_backfaces = false;
HXDLIN( 137)						this->depth_test = false;
            					}
            					break;
            					case (int)1: {
HXLINE( 137)						this->cull_backfaces = true;
HXDLIN( 137)						this->depth_test = true;
            					}
            					break;
            					case (int)2: {
            					}
            					break;
            				}
            			}
HXLINE( 137)			if (hx::IsNotNull( _options->__Field(HX_("aspect",d8,95,07,4a),hx::paccDynamic) )) {
HXLINE( 137)				this->projection_dirty = true;
HXDLIN( 137)				this->aspect = ( (Float)(_options->__Field(HX_("aspect",d8,95,07,4a),hx::paccDynamic)) );
HXDLIN( 137)				{
HXLINE( 137)					Float _fov = this->fov;
HXDLIN( 137)					this->projection_dirty = true;
HXDLIN( 137)					if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 137)						Float _hx_tmp = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 137)						Float _hx_tmp1 = ::Math_obj::tan(((Float)(_fov * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 137)						this->fov_y = (_hx_tmp * ((int)2 * ::Math_obj::atan((_hx_tmp1 * ((Float)(int)1 / (Float)this->aspect)))));
            					}
            					else {
HXLINE( 137)						this->fov_y = _fov;
            					}
HXDLIN( 137)					this->fov = _fov;
            				}
            			}
HXDLIN( 137)			if (hx::IsNotNull( _options->__Field(HX_("far",d7,ba,4d,00),hx::paccDynamic) )) {
HXLINE( 137)				this->projection_dirty = true;
HXDLIN( 137)				this->_hx_far = ( (Float)(_options->__Field(HX_("far",d7,ba,4d,00),hx::paccDynamic)) );
            			}
HXDLIN( 137)			if (hx::IsNotNull( _options->__Field(HX_("fov",0d,c7,4d,00),hx::paccDynamic) )) {
HXLINE( 137)				Float _fov1 = ( (Float)(_options->__Field(HX_("fov",0d,c7,4d,00),hx::paccDynamic)) );
HXDLIN( 137)				this->projection_dirty = true;
HXDLIN( 137)				if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 137)					Float _hx_tmp2 = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 137)					Float _hx_tmp3 = ::Math_obj::tan(((Float)(_fov1 * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 137)					this->fov_y = (_hx_tmp2 * ((int)2 * ::Math_obj::atan((_hx_tmp3 * ((Float)(int)1 / (Float)this->aspect)))));
            				}
            				else {
HXLINE( 137)					this->fov_y = _fov1;
            				}
HXDLIN( 137)				this->fov = _fov1;
            			}
HXDLIN( 137)			if (hx::IsNotNull( _options->__Field(HX_("near",e8,70,02,49),hx::paccDynamic) )) {
HXLINE( 137)				this->projection_dirty = true;
HXDLIN( 137)				this->_hx_near = ( (Float)(_options->__Field(HX_("near",e8,70,02,49),hx::paccDynamic)) );
            			}
HXDLIN( 137)			if (hx::IsNotNull( ( ( ::phoenix::Rectangle)(_options->__Field(HX_("viewport",66,4c,a5,9c),hx::paccDynamic)) ) )) {
HXLINE( 137)				this->set_viewport(( ( ::phoenix::Rectangle)(_options->__Field(HX_("viewport",66,4c,a5,9c),hx::paccDynamic)) ));
            			}
HXDLIN( 137)			if (hx::IsNotNull( _options->__Field(HX_("cull_backfaces",a2,e1,06,e5),hx::paccDynamic) )) {
HXLINE( 137)				this->cull_backfaces = ( (bool)(_options->__Field(HX_("cull_backfaces",a2,e1,06,e5),hx::paccDynamic)) );
            			}
HXDLIN( 137)			if (hx::IsNotNull( _options->__Field(HX_("depth_test",4e,68,49,c9),hx::paccDynamic) )) {
HXLINE( 137)				this->depth_test = ( (bool)(_options->__Field(HX_("depth_test",4e,68,49,c9),hx::paccDynamic)) );
            			}
HXDLIN( 137)			if (hx::IsNotNull( _options->__Field(HX_("fov_type",6c,98,1e,00),hx::paccDynamic) )) {
HXLINE( 137)				this->fov_type = _options->__Field(HX_("fov_type",6c,98,1e,00),hx::paccDynamic);
HXDLIN( 137)				{
HXLINE( 137)					Float _fov2 = this->fov;
HXDLIN( 137)					this->projection_dirty = true;
HXDLIN( 137)					if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 137)						Float _hx_tmp4 = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 137)						Float _hx_tmp5 = ::Math_obj::tan(((Float)(_fov2 * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 137)						this->fov_y = (_hx_tmp4 * ((int)2 * ::Math_obj::atan((_hx_tmp5 * ((Float)(int)1 / (Float)this->aspect)))));
            					}
            					else {
HXLINE( 137)						this->fov_y = _fov2;
            					}
HXDLIN( 137)					this->fov = _fov2;
            				}
            			}
            			else {
HXLINE( 137)				this->fov_type = ::phoenix::FOVType_obj::horizontal_dyn();
HXDLIN( 137)				{
HXLINE( 137)					Float _fov3 = this->fov;
HXDLIN( 137)					this->projection_dirty = true;
HXDLIN( 137)					if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 137)						Float _hx_tmp6 = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 137)						Float _hx_tmp7 = ::Math_obj::tan(((Float)(_fov3 * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 137)						this->fov_y = (_hx_tmp6 * ((int)2 * ::Math_obj::atan((_hx_tmp7 * ((Float)(int)1 / (Float)this->aspect)))));
            					}
            					else {
HXLINE( 137)						this->fov_y = _fov3;
            					}
HXDLIN( 137)					this->fov = _fov3;
            				}
            			}
            		}
HXLINE( 139)		{
HXLINE( 139)			 ::phoenix::Vector _this = this->transform->origin;
HXDLIN( 139)			bool prev = _this->ignore_listeners;
HXDLIN( 139)			_this->ignore_listeners = true;
HXDLIN( 139)			{
HXLINE( 139)				_this->x = (int)0;
HXDLIN( 139)				if (!(_this->_construct)) {
HXLINE( 139)					bool _hx_tmp8;
HXDLIN( 139)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 139)						_hx_tmp8 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 139)						_hx_tmp8 = false;
            					}
HXDLIN( 139)					if (_hx_tmp8) {
HXLINE( 139)						_this->listen_x((int)0);
            					}
            				}
            			}
HXDLIN( 139)			{
HXLINE( 139)				_this->y = (int)0;
HXDLIN( 139)				if (!(_this->_construct)) {
HXLINE( 139)					bool _hx_tmp9;
HXDLIN( 139)					if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 139)						_hx_tmp9 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 139)						_hx_tmp9 = false;
            					}
HXDLIN( 139)					if (_hx_tmp9) {
HXLINE( 139)						_this->listen_y((int)0);
            					}
            				}
            			}
HXDLIN( 139)			{
HXLINE( 139)				_this->z = (int)0;
HXDLIN( 139)				if (!(_this->_construct)) {
HXLINE( 139)					bool _hx_tmp10;
HXDLIN( 139)					if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 139)						_hx_tmp10 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 139)						_hx_tmp10 = false;
            					}
HXDLIN( 139)					if (_hx_tmp10) {
HXLINE( 139)						_this->listen_z((int)0);
            					}
            				}
            			}
HXDLIN( 139)			_this->ignore_listeners = prev;
HXDLIN( 139)			bool _hx_tmp11;
HXDLIN( 139)			if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 139)				_hx_tmp11 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 139)				_hx_tmp11 = false;
            			}
HXDLIN( 139)			if (_hx_tmp11) {
HXLINE( 139)				_this->listen_x(_this->x);
            			}
HXDLIN( 139)			bool _hx_tmp12;
HXDLIN( 139)			if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 139)				_hx_tmp12 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 139)				_hx_tmp12 = false;
            			}
HXDLIN( 139)			if (_hx_tmp12) {
HXLINE( 139)				_this->listen_y(_this->y);
            			}
HXDLIN( 139)			bool _hx_tmp13;
HXDLIN( 139)			if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 139)				_hx_tmp13 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 139)				_hx_tmp13 = false;
            			}
HXDLIN( 139)			if (_hx_tmp13) {
HXLINE( 139)				_this->listen_z(_this->z);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_perspective,(void))

 ::phoenix::Vector Camera_obj::project( ::phoenix::Vector _vector){
            	HX_GC_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_143_project)
HXLINE( 145)		{
HXLINE( 145)			if (hx::IsNotNull( this->target )) {
HXLINE( 145)				this->update_look_at();
            			}
HXDLIN( 145)			this->update_projection_matrix();
HXDLIN( 145)			this->update_view_matrix();
            		}
HXLINE( 147)		 ::phoenix::Matrix _this =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXDLIN( 147)		::Array< Float > ae = this->projection_matrix->elements;
HXDLIN( 147)		::Array< Float > be = this->view_matrix_inverse->elements;
HXDLIN( 147)		::Array< Float > te = _this->elements;
HXDLIN( 147)		Float a11 = ae->__get((int)0);
HXDLIN( 147)		Float a12 = ae->__get((int)4);
HXDLIN( 147)		Float a13 = ae->__get((int)8);
HXDLIN( 147)		Float a14 = ae->__get((int)12);
HXDLIN( 147)		Float a21 = ae->__get((int)1);
HXDLIN( 147)		Float a22 = ae->__get((int)5);
HXDLIN( 147)		Float a23 = ae->__get((int)9);
HXDLIN( 147)		Float a24 = ae->__get((int)13);
HXDLIN( 147)		Float a31 = ae->__get((int)2);
HXDLIN( 147)		Float a32 = ae->__get((int)6);
HXDLIN( 147)		Float a33 = ae->__get((int)10);
HXDLIN( 147)		Float a34 = ae->__get((int)14);
HXDLIN( 147)		Float a41 = ae->__get((int)3);
HXDLIN( 147)		Float a42 = ae->__get((int)7);
HXDLIN( 147)		Float a43 = ae->__get((int)11);
HXDLIN( 147)		Float a44 = ae->__get((int)15);
HXDLIN( 147)		Float b11 = be->__get((int)0);
HXDLIN( 147)		Float b12 = be->__get((int)4);
HXDLIN( 147)		Float b13 = be->__get((int)8);
HXDLIN( 147)		Float b14 = be->__get((int)12);
HXDLIN( 147)		Float b21 = be->__get((int)1);
HXDLIN( 147)		Float b22 = be->__get((int)5);
HXDLIN( 147)		Float b23 = be->__get((int)9);
HXDLIN( 147)		Float b24 = be->__get((int)13);
HXDLIN( 147)		Float b31 = be->__get((int)2);
HXDLIN( 147)		Float b32 = be->__get((int)6);
HXDLIN( 147)		Float b33 = be->__get((int)10);
HXDLIN( 147)		Float b34 = be->__get((int)14);
HXDLIN( 147)		Float b41 = be->__get((int)3);
HXDLIN( 147)		Float b42 = be->__get((int)7);
HXDLIN( 147)		Float b43 = be->__get((int)11);
HXDLIN( 147)		Float b44 = be->__get((int)15);
HXDLIN( 147)		te[(int)0] = ((((a11 * b11) + (a12 * b21)) + (a13 * b31)) + (a14 * b41));
HXDLIN( 147)		te[(int)4] = ((((a11 * b12) + (a12 * b22)) + (a13 * b32)) + (a14 * b42));
HXDLIN( 147)		te[(int)8] = ((((a11 * b13) + (a12 * b23)) + (a13 * b33)) + (a14 * b43));
HXDLIN( 147)		te[(int)12] = ((((a11 * b14) + (a12 * b24)) + (a13 * b34)) + (a14 * b44));
HXDLIN( 147)		te[(int)1] = ((((a21 * b11) + (a22 * b21)) + (a23 * b31)) + (a24 * b41));
HXDLIN( 147)		te[(int)5] = ((((a21 * b12) + (a22 * b22)) + (a23 * b32)) + (a24 * b42));
HXDLIN( 147)		te[(int)9] = ((((a21 * b13) + (a22 * b23)) + (a23 * b33)) + (a24 * b43));
HXDLIN( 147)		te[(int)13] = ((((a21 * b14) + (a22 * b24)) + (a23 * b34)) + (a24 * b44));
HXDLIN( 147)		te[(int)2] = ((((a31 * b11) + (a32 * b21)) + (a33 * b31)) + (a34 * b41));
HXDLIN( 147)		te[(int)6] = ((((a31 * b12) + (a32 * b22)) + (a33 * b32)) + (a34 * b42));
HXDLIN( 147)		te[(int)10] = ((((a31 * b13) + (a32 * b23)) + (a33 * b33)) + (a34 * b43));
HXDLIN( 147)		te[(int)14] = ((((a31 * b14) + (a32 * b24)) + (a33 * b34)) + (a34 * b44));
HXDLIN( 147)		te[(int)3] = ((((a41 * b11) + (a42 * b21)) + (a43 * b31)) + (a44 * b41));
HXDLIN( 147)		te[(int)7] = ((((a41 * b12) + (a42 * b22)) + (a43 * b32)) + (a44 * b42));
HXDLIN( 147)		te[(int)11] = ((((a41 * b13) + (a42 * b23)) + (a43 * b33)) + (a44 * b43));
HXDLIN( 147)		te[(int)15] = ((((a41 * b14) + (a42 * b24)) + (a43 * b34)) + (a44 * b44));
HXDLIN( 147)		 ::phoenix::Matrix _transform = _this;
HXLINE( 148)		 ::phoenix::Vector _this1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_vector->x,_vector->y,_vector->z,_vector->w);
HXDLIN( 148)		::Array< Float > e = _transform->elements;
HXDLIN( 148)		Float x = _this1->x;
HXDLIN( 148)		Float y = _this1->y;
HXDLIN( 148)		Float z = _this1->z;
HXDLIN( 148)		Float d = ((Float)(int)1 / (Float)((((e->__get((int)3) * x) + (e->__get((int)7) * y)) + (e->__get((int)11) * z)) + e->__get((int)15)));
HXDLIN( 148)		{
HXLINE( 148)			Float _x = (((((e->__get((int)0) * x) + (e->__get((int)4) * y)) + (e->__get((int)8) * z)) + e->__get((int)12)) * d);
HXDLIN( 148)			Float _y = (((((e->__get((int)1) * x) + (e->__get((int)5) * y)) + (e->__get((int)9) * z)) + e->__get((int)13)) * d);
HXDLIN( 148)			Float _z = (((((e->__get((int)2) * x) + (e->__get((int)6) * y)) + (e->__get((int)10) * z)) + e->__get((int)14)) * d);
HXDLIN( 148)			bool prev = _this1->ignore_listeners;
HXDLIN( 148)			_this1->ignore_listeners = true;
HXDLIN( 148)			{
HXLINE( 148)				_this1->x = _x;
HXDLIN( 148)				if (!(_this1->_construct)) {
HXLINE( 148)					bool _hx_tmp;
HXDLIN( 148)					if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 148)						_hx_tmp = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 148)						_hx_tmp = false;
            					}
HXDLIN( 148)					if (_hx_tmp) {
HXLINE( 148)						_this1->listen_x(_x);
            					}
            				}
            			}
HXDLIN( 148)			{
HXLINE( 148)				_this1->y = _y;
HXDLIN( 148)				if (!(_this1->_construct)) {
HXLINE( 148)					bool _hx_tmp1;
HXDLIN( 148)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 148)						_hx_tmp1 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 148)						_hx_tmp1 = false;
            					}
HXDLIN( 148)					if (_hx_tmp1) {
HXLINE( 148)						_this1->listen_y(_y);
            					}
            				}
            			}
HXDLIN( 148)			{
HXLINE( 148)				_this1->z = _z;
HXDLIN( 148)				if (!(_this1->_construct)) {
HXLINE( 148)					bool _hx_tmp2;
HXDLIN( 148)					if (hx::IsNotNull( _this1->listen_z )) {
HXLINE( 148)						_hx_tmp2 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 148)						_hx_tmp2 = false;
            					}
HXDLIN( 148)					if (_hx_tmp2) {
HXLINE( 148)						_this1->listen_z(_z);
            					}
            				}
            			}
HXDLIN( 148)			_this1->ignore_listeners = prev;
HXDLIN( 148)			bool _hx_tmp3;
HXDLIN( 148)			if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 148)				_hx_tmp3 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 148)				_hx_tmp3 = false;
            			}
HXDLIN( 148)			if (_hx_tmp3) {
HXLINE( 148)				_this1->listen_x(_this1->x);
            			}
HXDLIN( 148)			bool _hx_tmp4;
HXDLIN( 148)			if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 148)				_hx_tmp4 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 148)				_hx_tmp4 = false;
            			}
HXDLIN( 148)			if (_hx_tmp4) {
HXLINE( 148)				_this1->listen_y(_this1->y);
            			}
HXDLIN( 148)			bool _hx_tmp5;
HXDLIN( 148)			if (hx::IsNotNull( _this1->listen_z )) {
HXLINE( 148)				_hx_tmp5 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 148)				_hx_tmp5 = false;
            			}
HXDLIN( 148)			if (_hx_tmp5) {
HXLINE( 148)				_this1->listen_z(_this1->z);
            			}
            		}
HXDLIN( 148)		return _this1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,project,return )

 ::phoenix::Vector Camera_obj::unproject( ::phoenix::Vector _vector){
            	HX_GC_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_152_unproject)
HXLINE( 154)		{
HXLINE( 154)			if (hx::IsNotNull( this->target )) {
HXLINE( 154)				this->update_look_at();
            			}
HXDLIN( 154)			this->update_projection_matrix();
HXDLIN( 154)			this->update_view_matrix();
            		}
HXLINE( 156)		 ::phoenix::Matrix _this =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXDLIN( 156)		::Array< Float > ae = this->projection_matrix->elements;
HXDLIN( 156)		::Array< Float > be = this->view_matrix_inverse->elements;
HXDLIN( 156)		::Array< Float > te = _this->elements;
HXDLIN( 156)		Float a11 = ae->__get((int)0);
HXDLIN( 156)		Float a12 = ae->__get((int)4);
HXDLIN( 156)		Float a13 = ae->__get((int)8);
HXDLIN( 156)		Float a14 = ae->__get((int)12);
HXDLIN( 156)		Float a21 = ae->__get((int)1);
HXDLIN( 156)		Float a22 = ae->__get((int)5);
HXDLIN( 156)		Float a23 = ae->__get((int)9);
HXDLIN( 156)		Float a24 = ae->__get((int)13);
HXDLIN( 156)		Float a31 = ae->__get((int)2);
HXDLIN( 156)		Float a32 = ae->__get((int)6);
HXDLIN( 156)		Float a33 = ae->__get((int)10);
HXDLIN( 156)		Float a34 = ae->__get((int)14);
HXDLIN( 156)		Float a41 = ae->__get((int)3);
HXDLIN( 156)		Float a42 = ae->__get((int)7);
HXDLIN( 156)		Float a43 = ae->__get((int)11);
HXDLIN( 156)		Float a44 = ae->__get((int)15);
HXDLIN( 156)		Float b11 = be->__get((int)0);
HXDLIN( 156)		Float b12 = be->__get((int)4);
HXDLIN( 156)		Float b13 = be->__get((int)8);
HXDLIN( 156)		Float b14 = be->__get((int)12);
HXDLIN( 156)		Float b21 = be->__get((int)1);
HXDLIN( 156)		Float b22 = be->__get((int)5);
HXDLIN( 156)		Float b23 = be->__get((int)9);
HXDLIN( 156)		Float b24 = be->__get((int)13);
HXDLIN( 156)		Float b31 = be->__get((int)2);
HXDLIN( 156)		Float b32 = be->__get((int)6);
HXDLIN( 156)		Float b33 = be->__get((int)10);
HXDLIN( 156)		Float b34 = be->__get((int)14);
HXDLIN( 156)		Float b41 = be->__get((int)3);
HXDLIN( 156)		Float b42 = be->__get((int)7);
HXDLIN( 156)		Float b43 = be->__get((int)11);
HXDLIN( 156)		Float b44 = be->__get((int)15);
HXDLIN( 156)		te[(int)0] = ((((a11 * b11) + (a12 * b21)) + (a13 * b31)) + (a14 * b41));
HXDLIN( 156)		te[(int)4] = ((((a11 * b12) + (a12 * b22)) + (a13 * b32)) + (a14 * b42));
HXDLIN( 156)		te[(int)8] = ((((a11 * b13) + (a12 * b23)) + (a13 * b33)) + (a14 * b43));
HXDLIN( 156)		te[(int)12] = ((((a11 * b14) + (a12 * b24)) + (a13 * b34)) + (a14 * b44));
HXDLIN( 156)		te[(int)1] = ((((a21 * b11) + (a22 * b21)) + (a23 * b31)) + (a24 * b41));
HXDLIN( 156)		te[(int)5] = ((((a21 * b12) + (a22 * b22)) + (a23 * b32)) + (a24 * b42));
HXDLIN( 156)		te[(int)9] = ((((a21 * b13) + (a22 * b23)) + (a23 * b33)) + (a24 * b43));
HXDLIN( 156)		te[(int)13] = ((((a21 * b14) + (a22 * b24)) + (a23 * b34)) + (a24 * b44));
HXDLIN( 156)		te[(int)2] = ((((a31 * b11) + (a32 * b21)) + (a33 * b31)) + (a34 * b41));
HXDLIN( 156)		te[(int)6] = ((((a31 * b12) + (a32 * b22)) + (a33 * b32)) + (a34 * b42));
HXDLIN( 156)		te[(int)10] = ((((a31 * b13) + (a32 * b23)) + (a33 * b33)) + (a34 * b43));
HXDLIN( 156)		te[(int)14] = ((((a31 * b14) + (a32 * b24)) + (a33 * b34)) + (a34 * b44));
HXDLIN( 156)		te[(int)3] = ((((a41 * b11) + (a42 * b21)) + (a43 * b31)) + (a44 * b41));
HXDLIN( 156)		te[(int)7] = ((((a41 * b12) + (a42 * b22)) + (a43 * b32)) + (a44 * b42));
HXDLIN( 156)		te[(int)11] = ((((a41 * b13) + (a42 * b23)) + (a43 * b33)) + (a44 * b43));
HXDLIN( 156)		te[(int)15] = ((((a41 * b14) + (a42 * b24)) + (a43 * b34)) + (a44 * b44));
HXDLIN( 156)		 ::phoenix::Matrix _inverted = _this;
HXLINE( 157)		 ::phoenix::Vector _this1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_vector->x,_vector->y,_vector->z,_vector->w);
HXDLIN( 157)		::Array< Float > te1 = _inverted->elements;
HXDLIN( 157)		::Array< Float > me = _inverted->elements;
HXDLIN( 157)		Float n11 = me->__get((int)0);
HXDLIN( 157)		Float n12 = me->__get((int)4);
HXDLIN( 157)		Float n13 = me->__get((int)8);
HXDLIN( 157)		Float n14 = me->__get((int)12);
HXDLIN( 157)		Float n21 = me->__get((int)1);
HXDLIN( 157)		Float n22 = me->__get((int)5);
HXDLIN( 157)		Float n23 = me->__get((int)9);
HXDLIN( 157)		Float n24 = me->__get((int)13);
HXDLIN( 157)		Float n31 = me->__get((int)2);
HXDLIN( 157)		Float n32 = me->__get((int)6);
HXDLIN( 157)		Float n33 = me->__get((int)10);
HXDLIN( 157)		Float n34 = me->__get((int)14);
HXDLIN( 157)		Float n41 = me->__get((int)3);
HXDLIN( 157)		Float n42 = me->__get((int)7);
HXDLIN( 157)		Float n43 = me->__get((int)11);
HXDLIN( 157)		Float n44 = me->__get((int)15);
HXDLIN( 157)		te1[(int)0] = (((((((n23 * n34) * n42) - ((n24 * n33) * n42)) + ((n24 * n32) * n43)) - ((n22 * n34) * n43)) - ((n23 * n32) * n44)) + ((n22 * n33) * n44));
HXDLIN( 157)		te1[(int)4] = (((((((n14 * n33) * n42) - ((n13 * n34) * n42)) - ((n14 * n32) * n43)) + ((n12 * n34) * n43)) + ((n13 * n32) * n44)) - ((n12 * n33) * n44));
HXDLIN( 157)		te1[(int)8] = (((((((n13 * n24) * n42) - ((n14 * n23) * n42)) + ((n14 * n22) * n43)) - ((n12 * n24) * n43)) - ((n13 * n22) * n44)) + ((n12 * n23) * n44));
HXDLIN( 157)		te1[(int)12] = (((((((n14 * n23) * n32) - ((n13 * n24) * n32)) - ((n14 * n22) * n33)) + ((n12 * n24) * n33)) + ((n13 * n22) * n34)) - ((n12 * n23) * n34));
HXDLIN( 157)		te1[(int)1] = (((((((n24 * n33) * n41) - ((n23 * n34) * n41)) - ((n24 * n31) * n43)) + ((n21 * n34) * n43)) + ((n23 * n31) * n44)) - ((n21 * n33) * n44));
HXDLIN( 157)		te1[(int)5] = (((((((n13 * n34) * n41) - ((n14 * n33) * n41)) + ((n14 * n31) * n43)) - ((n11 * n34) * n43)) - ((n13 * n31) * n44)) + ((n11 * n33) * n44));
HXDLIN( 157)		te1[(int)9] = (((((((n14 * n23) * n41) - ((n13 * n24) * n41)) - ((n14 * n21) * n43)) + ((n11 * n24) * n43)) + ((n13 * n21) * n44)) - ((n11 * n23) * n44));
HXDLIN( 157)		te1[(int)13] = (((((((n13 * n24) * n31) - ((n14 * n23) * n31)) + ((n14 * n21) * n33)) - ((n11 * n24) * n33)) - ((n13 * n21) * n34)) + ((n11 * n23) * n34));
HXDLIN( 157)		te1[(int)2] = (((((((n22 * n34) * n41) - ((n24 * n32) * n41)) + ((n24 * n31) * n42)) - ((n21 * n34) * n42)) - ((n22 * n31) * n44)) + ((n21 * n32) * n44));
HXDLIN( 157)		te1[(int)6] = (((((((n14 * n32) * n41) - ((n12 * n34) * n41)) - ((n14 * n31) * n42)) + ((n11 * n34) * n42)) + ((n12 * n31) * n44)) - ((n11 * n32) * n44));
HXDLIN( 157)		te1[(int)10] = (((((((n12 * n24) * n41) - ((n14 * n22) * n41)) + ((n14 * n21) * n42)) - ((n11 * n24) * n42)) - ((n12 * n21) * n44)) + ((n11 * n22) * n44));
HXDLIN( 157)		te1[(int)14] = (((((((n14 * n22) * n31) - ((n12 * n24) * n31)) - ((n14 * n21) * n32)) + ((n11 * n24) * n32)) + ((n12 * n21) * n34)) - ((n11 * n22) * n34));
HXDLIN( 157)		te1[(int)3] = (((((((n23 * n32) * n41) - ((n22 * n33) * n41)) - ((n23 * n31) * n42)) + ((n21 * n33) * n42)) + ((n22 * n31) * n43)) - ((n21 * n32) * n43));
HXDLIN( 157)		te1[(int)7] = (((((((n12 * n33) * n41) - ((n13 * n32) * n41)) + ((n13 * n31) * n42)) - ((n11 * n33) * n42)) - ((n12 * n31) * n43)) + ((n11 * n32) * n43));
HXDLIN( 157)		te1[(int)11] = (((((((n13 * n22) * n41) - ((n12 * n23) * n41)) - ((n13 * n21) * n42)) + ((n11 * n23) * n42)) + ((n12 * n21) * n43)) - ((n11 * n22) * n43));
HXDLIN( 157)		te1[(int)15] = (((((((n12 * n23) * n31) - ((n13 * n22) * n31)) + ((n13 * n21) * n32)) - ((n11 * n23) * n32)) - ((n12 * n21) * n33)) + ((n11 * n22) * n33));
HXDLIN( 157)		Float det = ((((me->__get((int)0) * te1->__get((int)0)) + (me->__get((int)1) * te1->__get((int)4))) + (me->__get((int)2) * te1->__get((int)8))) + (me->__get((int)3) * te1->__get((int)12)));
HXDLIN( 157)		 ::phoenix::Matrix m;
HXDLIN( 157)		if ((det == (int)0)) {
HXLINE( 157)			::haxe::Log_obj::trace(HX_("Matrix.getInverse: cant invert matrix, determinant is 0",f5,2d,16,59),hx::SourceInfo(HX_("Matrix.hx",fd,8a,aa,4f),697,HX_("phoenix.Matrix",60,61,a9,39),HX_("getInverse",ba,d1,52,8d)));
HXDLIN( 157)			{
HXLINE( 157)				::Array< Float > e = _inverted->elements;
HXDLIN( 157)				e[(int)0] = (int)1;
HXDLIN( 157)				e[(int)4] = (int)0;
HXDLIN( 157)				e[(int)8] = (int)0;
HXDLIN( 157)				e[(int)12] = (int)0;
HXDLIN( 157)				e[(int)1] = (int)0;
HXDLIN( 157)				e[(int)5] = (int)1;
HXDLIN( 157)				e[(int)9] = (int)0;
HXDLIN( 157)				e[(int)13] = (int)0;
HXDLIN( 157)				e[(int)2] = (int)0;
HXDLIN( 157)				e[(int)6] = (int)0;
HXDLIN( 157)				e[(int)10] = (int)1;
HXDLIN( 157)				e[(int)14] = (int)0;
HXDLIN( 157)				e[(int)3] = (int)0;
HXDLIN( 157)				e[(int)7] = (int)0;
HXDLIN( 157)				e[(int)11] = (int)0;
HXDLIN( 157)				e[(int)15] = (int)1;
            			}
HXDLIN( 157)			m = _inverted;
            		}
            		else {
HXLINE( 157)			{
HXLINE( 157)				Float _s = ((Float)(int)1 / (Float)det);
HXDLIN( 157)				::Array< Float > te2 = _inverted->elements;
HXDLIN( 157)				::Array< Float > te3 = te2;
HXDLIN( 157)				int m1 = (int)0;
HXDLIN( 157)				te3[m1] = (te3->__get(m1) * _s);
HXDLIN( 157)				::Array< Float > te4 = te2;
HXDLIN( 157)				int m2 = (int)4;
HXDLIN( 157)				te4[m2] = (te4->__get(m2) * _s);
HXDLIN( 157)				::Array< Float > te5 = te2;
HXDLIN( 157)				int m3 = (int)8;
HXDLIN( 157)				te5[m3] = (te5->__get(m3) * _s);
HXDLIN( 157)				::Array< Float > te6 = te2;
HXDLIN( 157)				int m4 = (int)12;
HXDLIN( 157)				te6[m4] = (te6->__get(m4) * _s);
HXDLIN( 157)				::Array< Float > te7 = te2;
HXDLIN( 157)				int m5 = (int)1;
HXDLIN( 157)				te7[m5] = (te7->__get(m5) * _s);
HXDLIN( 157)				::Array< Float > te8 = te2;
HXDLIN( 157)				int m6 = (int)5;
HXDLIN( 157)				te8[m6] = (te8->__get(m6) * _s);
HXDLIN( 157)				::Array< Float > te9 = te2;
HXDLIN( 157)				int m7 = (int)9;
HXDLIN( 157)				te9[m7] = (te9->__get(m7) * _s);
HXDLIN( 157)				::Array< Float > te10 = te2;
HXDLIN( 157)				int m8 = (int)13;
HXDLIN( 157)				te10[m8] = (te10->__get(m8) * _s);
HXDLIN( 157)				::Array< Float > te11 = te2;
HXDLIN( 157)				int m9 = (int)2;
HXDLIN( 157)				te11[m9] = (te11->__get(m9) * _s);
HXDLIN( 157)				::Array< Float > te12 = te2;
HXDLIN( 157)				int m10 = (int)6;
HXDLIN( 157)				te12[m10] = (te12->__get(m10) * _s);
HXDLIN( 157)				::Array< Float > te13 = te2;
HXDLIN( 157)				int m11 = (int)10;
HXDLIN( 157)				te13[m11] = (te13->__get(m11) * _s);
HXDLIN( 157)				::Array< Float > te14 = te2;
HXDLIN( 157)				int m12 = (int)14;
HXDLIN( 157)				te14[m12] = (te14->__get(m12) * _s);
HXDLIN( 157)				::Array< Float > te15 = te2;
HXDLIN( 157)				int m13 = (int)3;
HXDLIN( 157)				te15[m13] = (te15->__get(m13) * _s);
HXDLIN( 157)				::Array< Float > te16 = te2;
HXDLIN( 157)				int m14 = (int)7;
HXDLIN( 157)				te16[m14] = (te16->__get(m14) * _s);
HXDLIN( 157)				::Array< Float > te17 = te2;
HXDLIN( 157)				int m15 = (int)11;
HXDLIN( 157)				te17[m15] = (te17->__get(m15) * _s);
HXDLIN( 157)				::Array< Float > te18 = te2;
HXDLIN( 157)				int m16 = (int)15;
HXDLIN( 157)				te18[m16] = (te18->__get(m16) * _s);
            			}
HXDLIN( 157)			m = _inverted;
            		}
HXDLIN( 157)		::Array< Float > e1 = m->elements;
HXDLIN( 157)		Float x = _this1->x;
HXDLIN( 157)		Float y = _this1->y;
HXDLIN( 157)		Float z = _this1->z;
HXDLIN( 157)		Float d = ((Float)(int)1 / (Float)((((e1->__get((int)3) * x) + (e1->__get((int)7) * y)) + (e1->__get((int)11) * z)) + e1->__get((int)15)));
HXDLIN( 157)		{
HXLINE( 157)			Float _x = (((((e1->__get((int)0) * x) + (e1->__get((int)4) * y)) + (e1->__get((int)8) * z)) + e1->__get((int)12)) * d);
HXDLIN( 157)			Float _y = (((((e1->__get((int)1) * x) + (e1->__get((int)5) * y)) + (e1->__get((int)9) * z)) + e1->__get((int)13)) * d);
HXDLIN( 157)			Float _z = (((((e1->__get((int)2) * x) + (e1->__get((int)6) * y)) + (e1->__get((int)10) * z)) + e1->__get((int)14)) * d);
HXDLIN( 157)			bool prev = _this1->ignore_listeners;
HXDLIN( 157)			_this1->ignore_listeners = true;
HXDLIN( 157)			{
HXLINE( 157)				_this1->x = _x;
HXDLIN( 157)				if (!(_this1->_construct)) {
HXLINE( 157)					bool _hx_tmp;
HXDLIN( 157)					if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 157)						_hx_tmp = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 157)						_hx_tmp = false;
            					}
HXDLIN( 157)					if (_hx_tmp) {
HXLINE( 157)						_this1->listen_x(_x);
            					}
            				}
            			}
HXDLIN( 157)			{
HXLINE( 157)				_this1->y = _y;
HXDLIN( 157)				if (!(_this1->_construct)) {
HXLINE( 157)					bool _hx_tmp1;
HXDLIN( 157)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 157)						_hx_tmp1 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 157)						_hx_tmp1 = false;
            					}
HXDLIN( 157)					if (_hx_tmp1) {
HXLINE( 157)						_this1->listen_y(_y);
            					}
            				}
            			}
HXDLIN( 157)			{
HXLINE( 157)				_this1->z = _z;
HXDLIN( 157)				if (!(_this1->_construct)) {
HXLINE( 157)					bool _hx_tmp2;
HXDLIN( 157)					if (hx::IsNotNull( _this1->listen_z )) {
HXLINE( 157)						_hx_tmp2 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 157)						_hx_tmp2 = false;
            					}
HXDLIN( 157)					if (_hx_tmp2) {
HXLINE( 157)						_this1->listen_z(_z);
            					}
            				}
            			}
HXDLIN( 157)			_this1->ignore_listeners = prev;
HXDLIN( 157)			bool _hx_tmp3;
HXDLIN( 157)			if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 157)				_hx_tmp3 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 157)				_hx_tmp3 = false;
            			}
HXDLIN( 157)			if (_hx_tmp3) {
HXLINE( 157)				_this1->listen_x(_this1->x);
            			}
HXDLIN( 157)			bool _hx_tmp4;
HXDLIN( 157)			if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 157)				_hx_tmp4 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 157)				_hx_tmp4 = false;
            			}
HXDLIN( 157)			if (_hx_tmp4) {
HXLINE( 157)				_this1->listen_y(_this1->y);
            			}
HXDLIN( 157)			bool _hx_tmp5;
HXDLIN( 157)			if (hx::IsNotNull( _this1->listen_z )) {
HXLINE( 157)				_hx_tmp5 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 157)				_hx_tmp5 = false;
            			}
HXDLIN( 157)			if (_hx_tmp5) {
HXLINE( 157)				_this1->listen_z(_this1->z);
            			}
            		}
HXDLIN( 157)		return _this1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,unproject,return )

 ::phoenix::Ray Camera_obj::screen_point_to_ray( ::phoenix::Vector _vector){
            	HX_GC_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_163_screen_point_to_ray)
HXDLIN( 163)		return  ::phoenix::Ray_obj::__alloc( HX_CTX ,_vector,hx::ObjectPtr<OBJ_>(this),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,screen_point_to_ray,return )

 ::phoenix::Vector Camera_obj::screen_point_to_world( ::phoenix::Vector _vector){
            	HX_GC_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_167_screen_point_to_world)
HXLINE( 169)		if (hx::IsEq( this->projection,::phoenix::ProjectionType_obj::ortho_dyn() )) {
HXLINE( 170)			{
HXLINE( 170)				if (hx::IsNotNull( this->target )) {
HXLINE( 170)					this->update_look_at();
            				}
HXDLIN( 170)				this->update_projection_matrix();
HXDLIN( 170)				this->update_view_matrix();
            			}
HXDLIN( 170)			 ::phoenix::Vector _this =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_vector->x,_vector->y,_vector->z,_vector->w);
HXDLIN( 170)			Float _x = _this->x;
HXDLIN( 170)			Float _y = _this->y;
HXDLIN( 170)			Float _z = _this->z;
HXDLIN( 170)			::Array< Float > e = this->view_matrix->elements;
HXDLIN( 170)			{
HXLINE( 170)				Float _x1 = ((((e->__get((int)0) * _x) + (e->__get((int)4) * _y)) + (e->__get((int)8) * _z)) + e->__get((int)12));
HXDLIN( 170)				Float _y1 = ((((e->__get((int)1) * _x) + (e->__get((int)5) * _y)) + (e->__get((int)9) * _z)) + e->__get((int)13));
HXDLIN( 170)				Float _z1 = ((((e->__get((int)2) * _x) + (e->__get((int)6) * _y)) + (e->__get((int)10) * _z)) + e->__get((int)14));
HXDLIN( 170)				bool prev = _this->ignore_listeners;
HXDLIN( 170)				_this->ignore_listeners = true;
HXDLIN( 170)				{
HXLINE( 170)					_this->x = _x1;
HXDLIN( 170)					if (!(_this->_construct)) {
HXLINE( 170)						bool _hx_tmp;
HXDLIN( 170)						if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 170)							_hx_tmp = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 170)							_hx_tmp = false;
            						}
HXDLIN( 170)						if (_hx_tmp) {
HXLINE( 170)							_this->listen_x(_x1);
            						}
            					}
            				}
HXDLIN( 170)				{
HXLINE( 170)					_this->y = _y1;
HXDLIN( 170)					if (!(_this->_construct)) {
HXLINE( 170)						bool _hx_tmp1;
HXDLIN( 170)						if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 170)							_hx_tmp1 = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 170)							_hx_tmp1 = false;
            						}
HXDLIN( 170)						if (_hx_tmp1) {
HXLINE( 170)							_this->listen_y(_y1);
            						}
            					}
            				}
HXDLIN( 170)				{
HXLINE( 170)					_this->z = _z1;
HXDLIN( 170)					if (!(_this->_construct)) {
HXLINE( 170)						bool _hx_tmp2;
HXDLIN( 170)						if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 170)							_hx_tmp2 = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 170)							_hx_tmp2 = false;
            						}
HXDLIN( 170)						if (_hx_tmp2) {
HXLINE( 170)							_this->listen_z(_z1);
            						}
            					}
            				}
HXDLIN( 170)				_this->ignore_listeners = prev;
HXDLIN( 170)				bool _hx_tmp3;
HXDLIN( 170)				if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 170)					_hx_tmp3 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 170)					_hx_tmp3 = false;
            				}
HXDLIN( 170)				if (_hx_tmp3) {
HXLINE( 170)					_this->listen_x(_this->x);
            				}
HXDLIN( 170)				bool _hx_tmp4;
HXDLIN( 170)				if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 170)					_hx_tmp4 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 170)					_hx_tmp4 = false;
            				}
HXDLIN( 170)				if (_hx_tmp4) {
HXLINE( 170)					_this->listen_y(_this->y);
            				}
HXDLIN( 170)				bool _hx_tmp5;
HXDLIN( 170)				if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 170)					_hx_tmp5 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 170)					_hx_tmp5 = false;
            				}
HXDLIN( 170)				if (_hx_tmp5) {
HXLINE( 170)					_this->listen_z(_this->z);
            				}
            			}
HXDLIN( 170)			return _this;
            		}
            		else {
HXLINE( 171)			if (hx::IsEq( this->projection,::phoenix::ProjectionType_obj::perspective_dyn() )) {
HXLINE( 172)				return this->screen_point_to_ray(_vector)->end;
            			}
            		}
HXLINE( 176)		{
HXLINE( 176)			if (hx::IsNotNull( this->target )) {
HXLINE( 176)				this->update_look_at();
            			}
HXDLIN( 176)			this->update_projection_matrix();
HXDLIN( 176)			this->update_view_matrix();
            		}
HXDLIN( 176)		 ::phoenix::Vector _this1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_vector->x,_vector->y,_vector->z,_vector->w);
HXDLIN( 176)		Float _x2 = _this1->x;
HXDLIN( 176)		Float _y2 = _this1->y;
HXDLIN( 176)		Float _z2 = _this1->z;
HXDLIN( 176)		::Array< Float > e1 = this->view_matrix->elements;
HXDLIN( 176)		{
HXLINE( 176)			Float _x3 = ((((e1->__get((int)0) * _x2) + (e1->__get((int)4) * _y2)) + (e1->__get((int)8) * _z2)) + e1->__get((int)12));
HXDLIN( 176)			Float _y3 = ((((e1->__get((int)1) * _x2) + (e1->__get((int)5) * _y2)) + (e1->__get((int)9) * _z2)) + e1->__get((int)13));
HXDLIN( 176)			Float _z3 = ((((e1->__get((int)2) * _x2) + (e1->__get((int)6) * _y2)) + (e1->__get((int)10) * _z2)) + e1->__get((int)14));
HXDLIN( 176)			bool prev1 = _this1->ignore_listeners;
HXDLIN( 176)			_this1->ignore_listeners = true;
HXDLIN( 176)			{
HXLINE( 176)				_this1->x = _x3;
HXDLIN( 176)				if (!(_this1->_construct)) {
HXLINE( 176)					bool _hx_tmp6;
HXDLIN( 176)					if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 176)						_hx_tmp6 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 176)						_hx_tmp6 = false;
            					}
HXDLIN( 176)					if (_hx_tmp6) {
HXLINE( 176)						_this1->listen_x(_x3);
            					}
            				}
            			}
HXDLIN( 176)			{
HXLINE( 176)				_this1->y = _y3;
HXDLIN( 176)				if (!(_this1->_construct)) {
HXLINE( 176)					bool _hx_tmp7;
HXDLIN( 176)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 176)						_hx_tmp7 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 176)						_hx_tmp7 = false;
            					}
HXDLIN( 176)					if (_hx_tmp7) {
HXLINE( 176)						_this1->listen_y(_y3);
            					}
            				}
            			}
HXDLIN( 176)			{
HXLINE( 176)				_this1->z = _z3;
HXDLIN( 176)				if (!(_this1->_construct)) {
HXLINE( 176)					bool _hx_tmp8;
HXDLIN( 176)					if (hx::IsNotNull( _this1->listen_z )) {
HXLINE( 176)						_hx_tmp8 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 176)						_hx_tmp8 = false;
            					}
HXDLIN( 176)					if (_hx_tmp8) {
HXLINE( 176)						_this1->listen_z(_z3);
            					}
            				}
            			}
HXDLIN( 176)			_this1->ignore_listeners = prev1;
HXDLIN( 176)			bool _hx_tmp9;
HXDLIN( 176)			if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 176)				_hx_tmp9 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 176)				_hx_tmp9 = false;
            			}
HXDLIN( 176)			if (_hx_tmp9) {
HXLINE( 176)				_this1->listen_x(_this1->x);
            			}
HXDLIN( 176)			bool _hx_tmp10;
HXDLIN( 176)			if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 176)				_hx_tmp10 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 176)				_hx_tmp10 = false;
            			}
HXDLIN( 176)			if (_hx_tmp10) {
HXLINE( 176)				_this1->listen_y(_this1->y);
            			}
HXDLIN( 176)			bool _hx_tmp11;
HXDLIN( 176)			if (hx::IsNotNull( _this1->listen_z )) {
HXLINE( 176)				_hx_tmp11 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 176)				_hx_tmp11 = false;
            			}
HXDLIN( 176)			if (_hx_tmp11) {
HXLINE( 176)				_this1->listen_z(_this1->z);
            			}
            		}
HXDLIN( 176)		return _this1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,screen_point_to_world,return )

 ::phoenix::Vector Camera_obj::world_point_to_screen( ::phoenix::Vector _vector, ::phoenix::Rectangle _viewport){
            	HX_GC_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_180_world_point_to_screen)
HXLINE( 182)		if (hx::IsEq( this->projection,::phoenix::ProjectionType_obj::ortho_dyn() )) {
HXLINE( 183)			{
HXLINE( 183)				if (hx::IsNotNull( this->target )) {
HXLINE( 183)					this->update_look_at();
            				}
HXDLIN( 183)				this->update_projection_matrix();
HXDLIN( 183)				this->update_view_matrix();
            			}
HXDLIN( 183)			 ::phoenix::Vector _this =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_vector->x,_vector->y,_vector->z,_vector->w);
HXDLIN( 183)			Float _x = _this->x;
HXDLIN( 183)			Float _y = _this->y;
HXDLIN( 183)			Float _z = _this->z;
HXDLIN( 183)			::Array< Float > e = this->view_matrix_inverse->elements;
HXDLIN( 183)			{
HXLINE( 183)				Float _x1 = ((((e->__get((int)0) * _x) + (e->__get((int)4) * _y)) + (e->__get((int)8) * _z)) + e->__get((int)12));
HXDLIN( 183)				Float _y1 = ((((e->__get((int)1) * _x) + (e->__get((int)5) * _y)) + (e->__get((int)9) * _z)) + e->__get((int)13));
HXDLIN( 183)				Float _z1 = ((((e->__get((int)2) * _x) + (e->__get((int)6) * _y)) + (e->__get((int)10) * _z)) + e->__get((int)14));
HXDLIN( 183)				bool prev = _this->ignore_listeners;
HXDLIN( 183)				_this->ignore_listeners = true;
HXDLIN( 183)				{
HXLINE( 183)					_this->x = _x1;
HXDLIN( 183)					if (!(_this->_construct)) {
HXLINE( 183)						bool _hx_tmp;
HXDLIN( 183)						if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 183)							_hx_tmp = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 183)							_hx_tmp = false;
            						}
HXDLIN( 183)						if (_hx_tmp) {
HXLINE( 183)							_this->listen_x(_x1);
            						}
            					}
            				}
HXDLIN( 183)				{
HXLINE( 183)					_this->y = _y1;
HXDLIN( 183)					if (!(_this->_construct)) {
HXLINE( 183)						bool _hx_tmp1;
HXDLIN( 183)						if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 183)							_hx_tmp1 = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 183)							_hx_tmp1 = false;
            						}
HXDLIN( 183)						if (_hx_tmp1) {
HXLINE( 183)							_this->listen_y(_y1);
            						}
            					}
            				}
HXDLIN( 183)				{
HXLINE( 183)					_this->z = _z1;
HXDLIN( 183)					if (!(_this->_construct)) {
HXLINE( 183)						bool _hx_tmp2;
HXDLIN( 183)						if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 183)							_hx_tmp2 = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 183)							_hx_tmp2 = false;
            						}
HXDLIN( 183)						if (_hx_tmp2) {
HXLINE( 183)							_this->listen_z(_z1);
            						}
            					}
            				}
HXDLIN( 183)				_this->ignore_listeners = prev;
HXDLIN( 183)				bool _hx_tmp3;
HXDLIN( 183)				if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 183)					_hx_tmp3 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 183)					_hx_tmp3 = false;
            				}
HXDLIN( 183)				if (_hx_tmp3) {
HXLINE( 183)					_this->listen_x(_this->x);
            				}
HXDLIN( 183)				bool _hx_tmp4;
HXDLIN( 183)				if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 183)					_hx_tmp4 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 183)					_hx_tmp4 = false;
            				}
HXDLIN( 183)				if (_hx_tmp4) {
HXLINE( 183)					_this->listen_y(_this->y);
            				}
HXDLIN( 183)				bool _hx_tmp5;
HXDLIN( 183)				if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 183)					_hx_tmp5 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 183)					_hx_tmp5 = false;
            				}
HXDLIN( 183)				if (_hx_tmp5) {
HXLINE( 183)					_this->listen_z(_this->z);
            				}
            			}
HXDLIN( 183)			return _this;
            		}
            		else {
HXLINE( 184)			if (hx::IsEq( this->projection,::phoenix::ProjectionType_obj::perspective_dyn() )) {
HXLINE( 185)				 ::phoenix::Rectangle _viewport1 = _viewport;
HXDLIN( 185)				if (hx::IsNull( _viewport1 )) {
HXLINE( 185)					_viewport1 = this->viewport;
            				}
HXDLIN( 185)				 ::phoenix::Vector _projected = this->project(_vector);
HXDLIN( 185)				Float width_half = ((Float)_viewport1->w / (Float)(int)2);
HXDLIN( 185)				Float height_half = ((Float)_viewport1->h / (Float)(int)2);
HXDLIN( 185)				Float _hx_tmp6 = ((_projected->x * width_half) + width_half);
HXDLIN( 185)				return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp6,(-((_projected->y * height_half)) + height_half),null(),null());
            			}
            		}
HXLINE( 189)		{
HXLINE( 189)			if (hx::IsNotNull( this->target )) {
HXLINE( 189)				this->update_look_at();
            			}
HXDLIN( 189)			this->update_projection_matrix();
HXDLIN( 189)			this->update_view_matrix();
            		}
HXDLIN( 189)		 ::phoenix::Vector _this1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_vector->x,_vector->y,_vector->z,_vector->w);
HXDLIN( 189)		Float _x2 = _this1->x;
HXDLIN( 189)		Float _y2 = _this1->y;
HXDLIN( 189)		Float _z2 = _this1->z;
HXDLIN( 189)		::Array< Float > e1 = this->view_matrix_inverse->elements;
HXDLIN( 189)		{
HXLINE( 189)			Float _x3 = ((((e1->__get((int)0) * _x2) + (e1->__get((int)4) * _y2)) + (e1->__get((int)8) * _z2)) + e1->__get((int)12));
HXDLIN( 189)			Float _y3 = ((((e1->__get((int)1) * _x2) + (e1->__get((int)5) * _y2)) + (e1->__get((int)9) * _z2)) + e1->__get((int)13));
HXDLIN( 189)			Float _z3 = ((((e1->__get((int)2) * _x2) + (e1->__get((int)6) * _y2)) + (e1->__get((int)10) * _z2)) + e1->__get((int)14));
HXDLIN( 189)			bool prev1 = _this1->ignore_listeners;
HXDLIN( 189)			_this1->ignore_listeners = true;
HXDLIN( 189)			{
HXLINE( 189)				_this1->x = _x3;
HXDLIN( 189)				if (!(_this1->_construct)) {
HXLINE( 189)					bool _hx_tmp7;
HXDLIN( 189)					if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 189)						_hx_tmp7 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 189)						_hx_tmp7 = false;
            					}
HXDLIN( 189)					if (_hx_tmp7) {
HXLINE( 189)						_this1->listen_x(_x3);
            					}
            				}
            			}
HXDLIN( 189)			{
HXLINE( 189)				_this1->y = _y3;
HXDLIN( 189)				if (!(_this1->_construct)) {
HXLINE( 189)					bool _hx_tmp8;
HXDLIN( 189)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 189)						_hx_tmp8 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 189)						_hx_tmp8 = false;
            					}
HXDLIN( 189)					if (_hx_tmp8) {
HXLINE( 189)						_this1->listen_y(_y3);
            					}
            				}
            			}
HXDLIN( 189)			{
HXLINE( 189)				_this1->z = _z3;
HXDLIN( 189)				if (!(_this1->_construct)) {
HXLINE( 189)					bool _hx_tmp9;
HXDLIN( 189)					if (hx::IsNotNull( _this1->listen_z )) {
HXLINE( 189)						_hx_tmp9 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 189)						_hx_tmp9 = false;
            					}
HXDLIN( 189)					if (_hx_tmp9) {
HXLINE( 189)						_this1->listen_z(_z3);
            					}
            				}
            			}
HXDLIN( 189)			_this1->ignore_listeners = prev1;
HXDLIN( 189)			bool _hx_tmp10;
HXDLIN( 189)			if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 189)				_hx_tmp10 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 189)				_hx_tmp10 = false;
            			}
HXDLIN( 189)			if (_hx_tmp10) {
HXLINE( 189)				_this1->listen_x(_this1->x);
            			}
HXDLIN( 189)			bool _hx_tmp11;
HXDLIN( 189)			if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 189)				_hx_tmp11 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 189)				_hx_tmp11 = false;
            			}
HXDLIN( 189)			if (_hx_tmp11) {
HXLINE( 189)				_this1->listen_y(_this1->y);
            			}
HXDLIN( 189)			bool _hx_tmp12;
HXDLIN( 189)			if (hx::IsNotNull( _this1->listen_z )) {
HXLINE( 189)				_hx_tmp12 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 189)				_hx_tmp12 = false;
            			}
HXDLIN( 189)			if (_hx_tmp12) {
HXLINE( 189)				_this1->listen_z(_this1->z);
            			}
            		}
HXDLIN( 189)		return _this1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Camera_obj,world_point_to_screen,return )

void Camera_obj::process(){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_197_process)
HXLINE( 199)		{
HXLINE( 199)			if (hx::IsNotNull( this->target )) {
HXLINE( 199)				this->update_look_at();
            			}
HXDLIN( 199)			this->update_projection_matrix();
HXDLIN( 199)			this->update_view_matrix();
            		}
HXLINE( 202)		if (this->cull_backfaces) {
HXLINE( 202)			::Luxe_obj::renderer->state->enable((int)2884);
            		}
            		else {
HXLINE( 202)			::Luxe_obj::renderer->state->disable((int)2884);
            		}
HXLINE( 203)		if (this->depth_test) {
HXLINE( 203)			::Luxe_obj::renderer->state->enable((int)2929);
            		}
            		else {
HXLINE( 203)			::Luxe_obj::renderer->state->disable((int)2929);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,process,(void))

void Camera_obj::update_matrices(){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_209_update_matrices)
HXLINE( 213)		if (hx::IsNotNull( this->target )) {
HXLINE( 213)			this->update_look_at();
            		}
HXLINE( 216)		this->update_projection_matrix();
HXLINE( 217)		this->update_view_matrix();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,update_matrices,(void))

void Camera_obj::on_transform_cleaned( ::phoenix::Transform t){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_224_on_transform_cleaned)
HXDLIN( 224)		this->transform_dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,on_transform_cleaned,(void))

void Camera_obj::update_look_at(){
            	HX_GC_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_231_update_look_at)
HXDLIN( 231)		bool _hx_tmp;
HXDLIN( 231)		if (this->look_at_dirty) {
HXDLIN( 231)			_hx_tmp = hx::IsNotNull( this->target );
            		}
            		else {
HXDLIN( 231)			_hx_tmp = false;
            		}
HXDLIN( 231)		if (_hx_tmp) {
HXLINE( 233)			{
HXLINE( 233)				 ::phoenix::Matrix _this = this->look_at_matrix;
HXDLIN( 233)				 ::phoenix::Vector _eye = this->target;
HXDLIN( 233)				 ::phoenix::Vector _target = this->pos;
HXDLIN( 233)				 ::phoenix::Vector _up = this->up_;
HXDLIN( 233)				 ::phoenix::Vector _x =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN( 233)				 ::phoenix::Vector _y =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN( 233)				 ::phoenix::Vector _z =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN( 233)				::Array< Float > te = _this->elements;
HXDLIN( 233)				Float _this_z;
HXDLIN( 233)				Float _this_y;
HXDLIN( 233)				Float _this_x;
HXDLIN( 233)				Float _this_w;
HXDLIN( 233)				 ::Dynamic _this_listen_z;
HXDLIN( 233)				 ::Dynamic _this_listen_y;
HXDLIN( 233)				 ::Dynamic _this_listen_x;
HXDLIN( 233)				bool _this_ignore_listeners;
HXDLIN( 233)				bool _this__construct;
HXDLIN( 233)				Float _x1 = (_target->x - _eye->x);
HXDLIN( 233)				Float _y1 = (_target->y - _eye->y);
HXDLIN( 233)				Float _z1 = (_target->z - _eye->z);
HXDLIN( 233)				_this_x = ((Float)0);
HXDLIN( 233)				_this_y = ((Float)0);
HXDLIN( 233)				_this_z = ((Float)0);
HXDLIN( 233)				_this_w = ((Float)0);
HXDLIN( 233)				_this_ignore_listeners = false;
HXDLIN( 233)				_this__construct = false;
HXDLIN( 233)				_this__construct = true;
HXDLIN( 233)				_this_x = _x1;
HXDLIN( 233)				if (!(_this__construct)) {
HXLINE( 233)					bool _z2;
HXDLIN( 233)					if (hx::IsNotNull( _this_listen_x )) {
HXLINE( 233)						_z2 = !(_this_ignore_listeners);
            					}
            					else {
HXLINE( 233)						_z2 = false;
            					}
HXDLIN( 233)					if (_z2) {
HXLINE( 233)						_this_listen_x(_x1);
            					}
            				}
HXDLIN( 233)				_this_y = _y1;
HXDLIN( 233)				if (!(_this__construct)) {
HXLINE( 233)					bool _z3;
HXDLIN( 233)					if (hx::IsNotNull( _this_listen_y )) {
HXLINE( 233)						_z3 = !(_this_ignore_listeners);
            					}
            					else {
HXLINE( 233)						_z3 = false;
            					}
HXDLIN( 233)					if (_z3) {
HXLINE( 233)						_this_listen_y(_y1);
            					}
            				}
HXDLIN( 233)				_this_z = _z1;
HXDLIN( 233)				if (!(_this__construct)) {
HXLINE( 233)					bool _z4;
HXDLIN( 233)					if (hx::IsNotNull( _this_listen_z )) {
HXLINE( 233)						_z4 = !(_this_ignore_listeners);
            					}
            					else {
HXLINE( 233)						_z4 = false;
            					}
HXDLIN( 233)					if (_z4) {
HXLINE( 233)						_this_listen_z(_z1);
            					}
            				}
HXDLIN( 233)				_this_w = (int)0;
HXDLIN( 233)				_this__construct = false;
HXDLIN( 233)				Float b = ::Math_obj::sqrt((((_this_x * _this_x) + (_this_y * _this_y)) + (_this_z * _this_z)));
HXDLIN( 233)				_z =  ::phoenix::Vector_obj::__alloc( HX_CTX ,((Float)_this_x / (Float)b),((Float)_this_y / (Float)b),((Float)_this_z / (Float)b),null());
HXDLIN( 233)				Float _hx_tmp1 = (_z->x * _z->x);
HXDLIN( 233)				Float _hx_tmp2 = (_hx_tmp1 + (_z->y * _z->y));
HXDLIN( 233)				if ((::Math_obj::sqrt((_hx_tmp2 + (_z->z * _z->z))) == (int)0)) {
HXLINE( 233)					_z->z = (int)1;
HXDLIN( 233)					if (!(_z->_construct)) {
HXLINE( 233)						bool _hx_tmp3;
HXDLIN( 233)						if (hx::IsNotNull( _z->listen_z )) {
HXLINE( 233)							_hx_tmp3 = !(_z->ignore_listeners);
            						}
            						else {
HXLINE( 233)							_hx_tmp3 = false;
            						}
HXDLIN( 233)						if (_hx_tmp3) {
HXLINE( 233)							_z->listen_z((int)1);
            						}
            					}
            				}
HXDLIN( 233)				Float _this_z1;
HXDLIN( 233)				Float _this_y1;
HXDLIN( 233)				Float _this_x1;
HXDLIN( 233)				Float _this_w1;
HXDLIN( 233)				 ::Dynamic _this_listen_z1;
HXDLIN( 233)				 ::Dynamic _this_listen_y1;
HXDLIN( 233)				 ::Dynamic _this_listen_x1;
HXDLIN( 233)				bool _this_ignore_listeners1;
HXDLIN( 233)				bool _this__construct1;
HXDLIN( 233)				Float _x2 = (_up->y * _z->z);
HXDLIN( 233)				Float _x3 = (_x2 - (_up->z * _z->y));
HXDLIN( 233)				Float _y2 = (_up->z * _z->x);
HXDLIN( 233)				Float _y3 = (_y2 - (_up->x * _z->z));
HXDLIN( 233)				Float _z5 = (_up->x * _z->y);
HXDLIN( 233)				Float _z6 = (_z5 - (_up->y * _z->x));
HXDLIN( 233)				_this_x1 = ((Float)0);
HXDLIN( 233)				_this_y1 = ((Float)0);
HXDLIN( 233)				_this_z1 = ((Float)0);
HXDLIN( 233)				_this_w1 = ((Float)0);
HXDLIN( 233)				_this_ignore_listeners1 = false;
HXDLIN( 233)				_this__construct1 = false;
HXDLIN( 233)				_this__construct1 = true;
HXDLIN( 233)				_this_x1 = _x3;
HXDLIN( 233)				if (!(_this__construct1)) {
HXLINE( 233)					bool _x4;
HXDLIN( 233)					if (hx::IsNotNull( _this_listen_x1 )) {
HXLINE( 233)						_x4 = !(_this_ignore_listeners1);
            					}
            					else {
HXLINE( 233)						_x4 = false;
            					}
HXDLIN( 233)					if (_x4) {
HXLINE( 233)						_this_listen_x1(_x3);
            					}
            				}
HXDLIN( 233)				_this_y1 = _y3;
HXDLIN( 233)				if (!(_this__construct1)) {
HXLINE( 233)					bool _x5;
HXDLIN( 233)					if (hx::IsNotNull( _this_listen_y1 )) {
HXLINE( 233)						_x5 = !(_this_ignore_listeners1);
            					}
            					else {
HXLINE( 233)						_x5 = false;
            					}
HXDLIN( 233)					if (_x5) {
HXLINE( 233)						_this_listen_y1(_y3);
            					}
            				}
HXDLIN( 233)				_this_z1 = _z6;
HXDLIN( 233)				if (!(_this__construct1)) {
HXLINE( 233)					bool _x6;
HXDLIN( 233)					if (hx::IsNotNull( _this_listen_z1 )) {
HXLINE( 233)						_x6 = !(_this_ignore_listeners1);
            					}
            					else {
HXLINE( 233)						_x6 = false;
            					}
HXDLIN( 233)					if (_x6) {
HXLINE( 233)						_this_listen_z1(_z6);
            					}
            				}
HXDLIN( 233)				_this_w1 = (int)0;
HXDLIN( 233)				_this__construct1 = false;
HXDLIN( 233)				Float b1 = ::Math_obj::sqrt((((_this_x1 * _this_x1) + (_this_y1 * _this_y1)) + (_this_z1 * _this_z1)));
HXDLIN( 233)				_x =  ::phoenix::Vector_obj::__alloc( HX_CTX ,((Float)_this_x1 / (Float)b1),((Float)_this_y1 / (Float)b1),((Float)_this_z1 / (Float)b1),null());
HXDLIN( 233)				Float _hx_tmp4 = (_x->x * _x->x);
HXDLIN( 233)				Float _hx_tmp5 = (_hx_tmp4 + (_x->y * _x->y));
HXDLIN( 233)				if ((::Math_obj::sqrt((_hx_tmp5 + (_x->z * _x->z))) == (int)0)) {
HXLINE( 233)					{
HXLINE( 233)						 ::phoenix::Vector _g = _z;
HXDLIN( 233)						{
HXLINE( 233)							Float _x7 = (_g->x + ((Float)0.0001));
HXDLIN( 233)							_g->x = _x7;
HXDLIN( 233)							if (!(_g->_construct)) {
HXLINE( 233)								bool _hx_tmp6;
HXDLIN( 233)								if (hx::IsNotNull( _g->listen_x )) {
HXLINE( 233)									_hx_tmp6 = !(_g->ignore_listeners);
            								}
            								else {
HXLINE( 233)									_hx_tmp6 = false;
            								}
HXDLIN( 233)								if (_hx_tmp6) {
HXLINE( 233)									_g->listen_x(_x7);
            								}
            							}
            						}
            					}
HXDLIN( 233)					Float _this_z2;
HXDLIN( 233)					Float _this_y2;
HXDLIN( 233)					Float _this_x2;
HXDLIN( 233)					Float _this_w2;
HXDLIN( 233)					 ::Dynamic _this_listen_z2;
HXDLIN( 233)					 ::Dynamic _this_listen_y2;
HXDLIN( 233)					 ::Dynamic _this_listen_x2;
HXDLIN( 233)					bool _this_ignore_listeners2;
HXDLIN( 233)					bool _this__construct2;
HXDLIN( 233)					Float _x8 = (_up->y * _z->z);
HXDLIN( 233)					Float _x9 = (_x8 - (_up->z * _z->y));
HXDLIN( 233)					Float _y4 = (_up->z * _z->x);
HXDLIN( 233)					Float _y5 = (_y4 - (_up->x * _z->z));
HXDLIN( 233)					Float _z7 = (_up->x * _z->y);
HXDLIN( 233)					Float _z8 = (_z7 - (_up->y * _z->x));
HXDLIN( 233)					_this_x2 = ((Float)0);
HXDLIN( 233)					_this_y2 = ((Float)0);
HXDLIN( 233)					_this_z2 = ((Float)0);
HXDLIN( 233)					_this_w2 = ((Float)0);
HXDLIN( 233)					_this_ignore_listeners2 = false;
HXDLIN( 233)					_this__construct2 = false;
HXDLIN( 233)					_this__construct2 = true;
HXDLIN( 233)					_this_x2 = _x9;
HXDLIN( 233)					if (!(_this__construct2)) {
HXLINE( 233)						bool _x10;
HXDLIN( 233)						if (hx::IsNotNull( _this_listen_x2 )) {
HXLINE( 233)							_x10 = !(_this_ignore_listeners2);
            						}
            						else {
HXLINE( 233)							_x10 = false;
            						}
HXDLIN( 233)						if (_x10) {
HXLINE( 233)							_this_listen_x2(_x9);
            						}
            					}
HXDLIN( 233)					_this_y2 = _y5;
HXDLIN( 233)					if (!(_this__construct2)) {
HXLINE( 233)						bool _x11;
HXDLIN( 233)						if (hx::IsNotNull( _this_listen_y2 )) {
HXLINE( 233)							_x11 = !(_this_ignore_listeners2);
            						}
            						else {
HXLINE( 233)							_x11 = false;
            						}
HXDLIN( 233)						if (_x11) {
HXLINE( 233)							_this_listen_y2(_y5);
            						}
            					}
HXDLIN( 233)					_this_z2 = _z8;
HXDLIN( 233)					if (!(_this__construct2)) {
HXLINE( 233)						bool _x12;
HXDLIN( 233)						if (hx::IsNotNull( _this_listen_z2 )) {
HXLINE( 233)							_x12 = !(_this_ignore_listeners2);
            						}
            						else {
HXLINE( 233)							_x12 = false;
            						}
HXDLIN( 233)						if (_x12) {
HXLINE( 233)							_this_listen_z2(_z8);
            						}
            					}
HXDLIN( 233)					_this_w2 = (int)0;
HXDLIN( 233)					_this__construct2 = false;
HXDLIN( 233)					Float b2 = ::Math_obj::sqrt((((_this_x2 * _this_x2) + (_this_y2 * _this_y2)) + (_this_z2 * _this_z2)));
HXDLIN( 233)					_x =  ::phoenix::Vector_obj::__alloc( HX_CTX ,((Float)_this_x2 / (Float)b2),((Float)_this_y2 / (Float)b2),((Float)_this_z2 / (Float)b2),null());
            				}
HXDLIN( 233)				Float _y6 = (_z->y * _x->z);
HXDLIN( 233)				Float _y7 = (_y6 - (_z->z * _x->y));
HXDLIN( 233)				Float _y8 = (_z->z * _x->x);
HXDLIN( 233)				Float _y9 = (_y8 - (_z->x * _x->z));
HXDLIN( 233)				Float _y10 = (_z->x * _x->y);
HXDLIN( 233)				_y =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_y7,_y9,(_y10 - (_z->y * _x->x)),null());
HXDLIN( 233)				te[(int)0] = _x->x;
HXDLIN( 233)				te[(int)4] = _y->x;
HXDLIN( 233)				te[(int)8] = _z->x;
HXDLIN( 233)				te[(int)1] = _x->y;
HXDLIN( 233)				te[(int)5] = _y->y;
HXDLIN( 233)				te[(int)9] = _z->y;
HXDLIN( 233)				te[(int)2] = _x->z;
HXDLIN( 233)				te[(int)6] = _y->z;
HXDLIN( 233)				te[(int)10] = _z->z;
            			}
HXLINE( 235)			this->transform->local->rotation->setFromRotationMatrix(this->look_at_matrix);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,update_look_at,(void))

void Camera_obj::update_view_matrix(){
            	HX_GC_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_241_update_view_matrix)
HXLINE( 243)		 ::phoenix::Transform _this = this->transform;
HXDLIN( 243)		if (!(_this->_destroying)) {
HXLINE( 243)			bool _hx_tmp;
HXDLIN( 243)			if (hx::IsNotNull( _this->parent )) {
HXLINE( 243)				_hx_tmp = _this->parent->dirty;
            			}
            			else {
HXLINE( 243)				_hx_tmp = false;
            			}
HXDLIN( 243)			if (_hx_tmp) {
HXLINE( 243)				_this->parent->clean_check();
            			}
HXDLIN( 243)			bool _hx_tmp1;
HXDLIN( 243)			bool _hx_tmp2;
HXDLIN( 243)			if (_this->dirty) {
HXLINE( 243)				_hx_tmp2 = !(_this->_cleaning);
            			}
            			else {
HXLINE( 243)				_hx_tmp2 = false;
            			}
HXDLIN( 243)			if (_hx_tmp2) {
HXLINE( 243)				_hx_tmp1 = !(_this->manual_update);
            			}
            			else {
HXLINE( 243)				_hx_tmp1 = false;
            			}
HXDLIN( 243)			if (_hx_tmp1) {
HXLINE( 243)				_this->clean();
            			}
            		}
HXDLIN( 243)		this->view_matrix = _this->world->matrix;
HXLINE( 245)		if (!(this->transform_dirty)) {
HXLINE( 246)			return;
            		}
HXLINE( 249)		 ::phoenix::Matrix _this1 = this->view_matrix;
HXDLIN( 249)		::Array< Float > te = _this1->elements;
HXDLIN( 249)		 ::phoenix::Matrix _this2 =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,te->__get((int)0),te->__get((int)4),te->__get((int)8),te->__get((int)12),te->__get((int)1),te->__get((int)5),te->__get((int)9),te->__get((int)13),te->__get((int)2),te->__get((int)6),te->__get((int)10),te->__get((int)14),te->__get((int)3),te->__get((int)7),te->__get((int)11),te->__get((int)15));
HXDLIN( 249)		::Array< Float > te1 = _this2->elements;
HXDLIN( 249)		::Array< Float > me = _this1->elements;
HXDLIN( 249)		Float n11 = me->__get((int)0);
HXDLIN( 249)		Float n12 = me->__get((int)4);
HXDLIN( 249)		Float n13 = me->__get((int)8);
HXDLIN( 249)		Float n14 = me->__get((int)12);
HXDLIN( 249)		Float n21 = me->__get((int)1);
HXDLIN( 249)		Float n22 = me->__get((int)5);
HXDLIN( 249)		Float n23 = me->__get((int)9);
HXDLIN( 249)		Float n24 = me->__get((int)13);
HXDLIN( 249)		Float n31 = me->__get((int)2);
HXDLIN( 249)		Float n32 = me->__get((int)6);
HXDLIN( 249)		Float n33 = me->__get((int)10);
HXDLIN( 249)		Float n34 = me->__get((int)14);
HXDLIN( 249)		Float n41 = me->__get((int)3);
HXDLIN( 249)		Float n42 = me->__get((int)7);
HXDLIN( 249)		Float n43 = me->__get((int)11);
HXDLIN( 249)		Float n44 = me->__get((int)15);
HXDLIN( 249)		te1[(int)0] = (((((((n23 * n34) * n42) - ((n24 * n33) * n42)) + ((n24 * n32) * n43)) - ((n22 * n34) * n43)) - ((n23 * n32) * n44)) + ((n22 * n33) * n44));
HXDLIN( 249)		te1[(int)4] = (((((((n14 * n33) * n42) - ((n13 * n34) * n42)) - ((n14 * n32) * n43)) + ((n12 * n34) * n43)) + ((n13 * n32) * n44)) - ((n12 * n33) * n44));
HXDLIN( 249)		te1[(int)8] = (((((((n13 * n24) * n42) - ((n14 * n23) * n42)) + ((n14 * n22) * n43)) - ((n12 * n24) * n43)) - ((n13 * n22) * n44)) + ((n12 * n23) * n44));
HXDLIN( 249)		te1[(int)12] = (((((((n14 * n23) * n32) - ((n13 * n24) * n32)) - ((n14 * n22) * n33)) + ((n12 * n24) * n33)) + ((n13 * n22) * n34)) - ((n12 * n23) * n34));
HXDLIN( 249)		te1[(int)1] = (((((((n24 * n33) * n41) - ((n23 * n34) * n41)) - ((n24 * n31) * n43)) + ((n21 * n34) * n43)) + ((n23 * n31) * n44)) - ((n21 * n33) * n44));
HXDLIN( 249)		te1[(int)5] = (((((((n13 * n34) * n41) - ((n14 * n33) * n41)) + ((n14 * n31) * n43)) - ((n11 * n34) * n43)) - ((n13 * n31) * n44)) + ((n11 * n33) * n44));
HXDLIN( 249)		te1[(int)9] = (((((((n14 * n23) * n41) - ((n13 * n24) * n41)) - ((n14 * n21) * n43)) + ((n11 * n24) * n43)) + ((n13 * n21) * n44)) - ((n11 * n23) * n44));
HXDLIN( 249)		te1[(int)13] = (((((((n13 * n24) * n31) - ((n14 * n23) * n31)) + ((n14 * n21) * n33)) - ((n11 * n24) * n33)) - ((n13 * n21) * n34)) + ((n11 * n23) * n34));
HXDLIN( 249)		te1[(int)2] = (((((((n22 * n34) * n41) - ((n24 * n32) * n41)) + ((n24 * n31) * n42)) - ((n21 * n34) * n42)) - ((n22 * n31) * n44)) + ((n21 * n32) * n44));
HXDLIN( 249)		te1[(int)6] = (((((((n14 * n32) * n41) - ((n12 * n34) * n41)) - ((n14 * n31) * n42)) + ((n11 * n34) * n42)) + ((n12 * n31) * n44)) - ((n11 * n32) * n44));
HXDLIN( 249)		te1[(int)10] = (((((((n12 * n24) * n41) - ((n14 * n22) * n41)) + ((n14 * n21) * n42)) - ((n11 * n24) * n42)) - ((n12 * n21) * n44)) + ((n11 * n22) * n44));
HXDLIN( 249)		te1[(int)14] = (((((((n14 * n22) * n31) - ((n12 * n24) * n31)) - ((n14 * n21) * n32)) + ((n11 * n24) * n32)) + ((n12 * n21) * n34)) - ((n11 * n22) * n34));
HXDLIN( 249)		te1[(int)3] = (((((((n23 * n32) * n41) - ((n22 * n33) * n41)) - ((n23 * n31) * n42)) + ((n21 * n33) * n42)) + ((n22 * n31) * n43)) - ((n21 * n32) * n43));
HXDLIN( 249)		te1[(int)7] = (((((((n12 * n33) * n41) - ((n13 * n32) * n41)) + ((n13 * n31) * n42)) - ((n11 * n33) * n42)) - ((n12 * n31) * n43)) + ((n11 * n32) * n43));
HXDLIN( 249)		te1[(int)11] = (((((((n13 * n22) * n41) - ((n12 * n23) * n41)) - ((n13 * n21) * n42)) + ((n11 * n23) * n42)) + ((n12 * n21) * n43)) - ((n11 * n22) * n43));
HXDLIN( 249)		te1[(int)15] = (((((((n12 * n23) * n31) - ((n13 * n22) * n31)) + ((n13 * n21) * n32)) - ((n11 * n23) * n32)) - ((n12 * n21) * n33)) + ((n11 * n22) * n33));
HXDLIN( 249)		Float det = ((((me->__get((int)0) * te1->__get((int)0)) + (me->__get((int)1) * te1->__get((int)4))) + (me->__get((int)2) * te1->__get((int)8))) + (me->__get((int)3) * te1->__get((int)12)));
HXDLIN( 249)		 ::phoenix::Matrix _hx_tmp3;
HXDLIN( 249)		if ((det == (int)0)) {
HXLINE( 249)			::haxe::Log_obj::trace(HX_("Matrix.getInverse: cant invert matrix, determinant is 0",f5,2d,16,59),hx::SourceInfo(HX_("Matrix.hx",fd,8a,aa,4f),697,HX_("phoenix.Matrix",60,61,a9,39),HX_("getInverse",ba,d1,52,8d)));
HXDLIN( 249)			{
HXLINE( 249)				::Array< Float > e = _this2->elements;
HXDLIN( 249)				e[(int)0] = (int)1;
HXDLIN( 249)				e[(int)4] = (int)0;
HXDLIN( 249)				e[(int)8] = (int)0;
HXDLIN( 249)				e[(int)12] = (int)0;
HXDLIN( 249)				e[(int)1] = (int)0;
HXDLIN( 249)				e[(int)5] = (int)1;
HXDLIN( 249)				e[(int)9] = (int)0;
HXDLIN( 249)				e[(int)13] = (int)0;
HXDLIN( 249)				e[(int)2] = (int)0;
HXDLIN( 249)				e[(int)6] = (int)0;
HXDLIN( 249)				e[(int)10] = (int)1;
HXDLIN( 249)				e[(int)14] = (int)0;
HXDLIN( 249)				e[(int)3] = (int)0;
HXDLIN( 249)				e[(int)7] = (int)0;
HXDLIN( 249)				e[(int)11] = (int)0;
HXDLIN( 249)				e[(int)15] = (int)1;
            			}
HXDLIN( 249)			_hx_tmp3 = _this2;
            		}
            		else {
HXLINE( 249)			{
HXLINE( 249)				Float _s = ((Float)(int)1 / (Float)det);
HXDLIN( 249)				::Array< Float > te2 = _this2->elements;
HXDLIN( 249)				::Array< Float > te3 = te2;
HXDLIN( 249)				int _hx_tmp4 = (int)0;
HXDLIN( 249)				te3[_hx_tmp4] = (te3->__get(_hx_tmp4) * _s);
HXDLIN( 249)				::Array< Float > te4 = te2;
HXDLIN( 249)				int _hx_tmp5 = (int)4;
HXDLIN( 249)				te4[_hx_tmp5] = (te4->__get(_hx_tmp5) * _s);
HXDLIN( 249)				::Array< Float > te5 = te2;
HXDLIN( 249)				int _hx_tmp6 = (int)8;
HXDLIN( 249)				te5[_hx_tmp6] = (te5->__get(_hx_tmp6) * _s);
HXDLIN( 249)				::Array< Float > te6 = te2;
HXDLIN( 249)				int _hx_tmp7 = (int)12;
HXDLIN( 249)				te6[_hx_tmp7] = (te6->__get(_hx_tmp7) * _s);
HXDLIN( 249)				::Array< Float > te7 = te2;
HXDLIN( 249)				int _hx_tmp8 = (int)1;
HXDLIN( 249)				te7[_hx_tmp8] = (te7->__get(_hx_tmp8) * _s);
HXDLIN( 249)				::Array< Float > te8 = te2;
HXDLIN( 249)				int _hx_tmp9 = (int)5;
HXDLIN( 249)				te8[_hx_tmp9] = (te8->__get(_hx_tmp9) * _s);
HXDLIN( 249)				::Array< Float > te9 = te2;
HXDLIN( 249)				int _hx_tmp10 = (int)9;
HXDLIN( 249)				te9[_hx_tmp10] = (te9->__get(_hx_tmp10) * _s);
HXDLIN( 249)				::Array< Float > te10 = te2;
HXDLIN( 249)				int _hx_tmp11 = (int)13;
HXDLIN( 249)				te10[_hx_tmp11] = (te10->__get(_hx_tmp11) * _s);
HXDLIN( 249)				::Array< Float > te11 = te2;
HXDLIN( 249)				int _hx_tmp12 = (int)2;
HXDLIN( 249)				te11[_hx_tmp12] = (te11->__get(_hx_tmp12) * _s);
HXDLIN( 249)				::Array< Float > te12 = te2;
HXDLIN( 249)				int _hx_tmp13 = (int)6;
HXDLIN( 249)				te12[_hx_tmp13] = (te12->__get(_hx_tmp13) * _s);
HXDLIN( 249)				::Array< Float > te13 = te2;
HXDLIN( 249)				int _hx_tmp14 = (int)10;
HXDLIN( 249)				te13[_hx_tmp14] = (te13->__get(_hx_tmp14) * _s);
HXDLIN( 249)				::Array< Float > te14 = te2;
HXDLIN( 249)				int _hx_tmp15 = (int)14;
HXDLIN( 249)				te14[_hx_tmp15] = (te14->__get(_hx_tmp15) * _s);
HXDLIN( 249)				::Array< Float > te15 = te2;
HXDLIN( 249)				int _hx_tmp16 = (int)3;
HXDLIN( 249)				te15[_hx_tmp16] = (te15->__get(_hx_tmp16) * _s);
HXDLIN( 249)				::Array< Float > te16 = te2;
HXDLIN( 249)				int _hx_tmp17 = (int)7;
HXDLIN( 249)				te16[_hx_tmp17] = (te16->__get(_hx_tmp17) * _s);
HXDLIN( 249)				::Array< Float > te17 = te2;
HXDLIN( 249)				int _hx_tmp18 = (int)11;
HXDLIN( 249)				te17[_hx_tmp18] = (te17->__get(_hx_tmp18) * _s);
HXDLIN( 249)				::Array< Float > te18 = te2;
HXDLIN( 249)				int _hx_tmp19 = (int)15;
HXDLIN( 249)				te18[_hx_tmp19] = (te18->__get(_hx_tmp19) * _s);
            			}
HXDLIN( 249)			_hx_tmp3 = _this2;
            		}
HXDLIN( 249)		this->view_matrix_inverse = _hx_tmp3;
HXLINE( 250)		 ::phoenix::Matrix _this3 = this->view_matrix_inverse;
HXDLIN( 250)		int i = (int)0;
HXDLIN( 250)		while((i < (int)16)){
HXLINE( 250)			{
HXLINE( 250)				 ::snow::api::buffers::ArrayBufferView this1 = _this3->_float32array;
HXDLIN( 250)				{
HXLINE( 250)					int this2 = this1->byteOffset;
HXDLIN( 250)					::__hxcpp_memory_set_float(this1->buffer,(this2 + (i * (int)4)),_this3->elements->__get(i));
            				}
            			}
HXDLIN( 250)			i = (i + (int)1);
            		}
HXDLIN( 250)		this->view_inverse_arr = _this3->_float32array;
HXLINE( 252)		this->transform_dirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,update_view_matrix,(void))

void Camera_obj::update_projection_matrix(){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_256_update_projection_matrix)
HXLINE( 258)		if (!(this->projection_dirty)) {
HXLINE( 259)			return;
            		}
HXLINE( 262)		{
HXLINE( 262)			 ::phoenix::ProjectionType _g = this->projection;
HXDLIN( 262)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 272)					Float _l = ((Float)0.0);
HXLINE( 273)					Float _t = ((Float)0.0);
HXLINE( 274)					Float _r = this->viewport->w;
HXLINE( 275)					Float _b = this->viewport->h;
HXLINE( 277)					if (hx::IsNotNull( this->ortho_left )) {
HXLINE( 277)						_l = this->ortho_left;
            					}
HXLINE( 278)					if (hx::IsNotNull( this->ortho_right )) {
HXLINE( 278)						_r = this->ortho_right;
            					}
HXLINE( 279)					if (hx::IsNotNull( this->ortho_top )) {
HXLINE( 279)						_t = this->ortho_top;
            					}
HXLINE( 280)					if (hx::IsNotNull( this->ortho_bottom )) {
HXLINE( 280)						_b = this->ortho_bottom;
            					}
HXLINE( 282)					{
HXLINE( 282)						 ::phoenix::Matrix _this = this->projection_matrix;
HXDLIN( 282)						Float _near = this->_hx_near;
HXDLIN( 282)						Float _far = this->_hx_far;
HXDLIN( 282)						::Array< Float > te = _this->elements;
HXDLIN( 282)						Float w = (_r - _l);
HXDLIN( 282)						Float h = (_t - _b);
HXDLIN( 282)						Float p = (_far - _near);
HXDLIN( 282)						Float tx = ((Float)(_r + _l) / (Float)w);
HXDLIN( 282)						Float ty = ((Float)(_t + _b) / (Float)h);
HXDLIN( 282)						Float tz = ((Float)(_far + _near) / (Float)p);
HXDLIN( 282)						te[(int)0] = ((Float)(int)2 / (Float)w);
HXDLIN( 282)						te[(int)4] = (int)0;
HXDLIN( 282)						te[(int)8] = (int)0;
HXDLIN( 282)						te[(int)12] = -(tx);
HXDLIN( 282)						te[(int)1] = (int)0;
HXDLIN( 282)						te[(int)5] = ((Float)(int)2 / (Float)h);
HXDLIN( 282)						te[(int)9] = (int)0;
HXDLIN( 282)						te[(int)13] = -(ty);
HXDLIN( 282)						te[(int)2] = (int)0;
HXDLIN( 282)						te[(int)6] = (int)0;
HXDLIN( 282)						te[(int)10] = ((Float)(int)-2 / (Float)p);
HXDLIN( 282)						te[(int)14] = -(tz);
HXDLIN( 282)						te[(int)3] = (int)0;
HXDLIN( 282)						te[(int)7] = (int)0;
HXDLIN( 282)						te[(int)11] = (int)0;
HXDLIN( 282)						te[(int)15] = (int)1;
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 268)					 ::phoenix::Matrix _this1 = this->projection_matrix;
HXDLIN( 268)					Float _aspect = this->aspect;
HXDLIN( 268)					Float _near1 = this->_hx_near;
HXDLIN( 268)					Float _far1 = this->_hx_far;
HXDLIN( 268)					Float ymax = (_near1 * ::Math_obj::tan(((this->fov_y * ((Float)0.5)) * ((Float)0.0174532925199432781))));
HXDLIN( 268)					Float ymin = -(ymax);
HXDLIN( 268)					Float xmin = (ymin * _aspect);
HXDLIN( 268)					Float xmax = (ymax * _aspect);
HXDLIN( 268)					{
HXLINE( 268)						::Array< Float > te1 = _this1->elements;
HXDLIN( 268)						Float tx1 = ((Float)((int)2 * _near1) / (Float)(xmax - xmin));
HXDLIN( 268)						Float ty1 = ((Float)((int)2 * _near1) / (Float)(ymax - ymin));
HXDLIN( 268)						Float a = ((Float)(xmax + xmin) / (Float)(xmax - xmin));
HXDLIN( 268)						Float b = ((Float)(ymax + ymin) / (Float)(ymax - ymin));
HXDLIN( 268)						Float c = ((Float)-((_far1 + _near1)) / (Float)(_far1 - _near1));
HXDLIN( 268)						Float d = ((Float)(((int)-2 * _far1) * _near1) / (Float)(_far1 - _near1));
HXDLIN( 268)						te1[(int)0] = tx1;
HXDLIN( 268)						te1[(int)4] = (int)0;
HXDLIN( 268)						te1[(int)8] = a;
HXDLIN( 268)						te1[(int)12] = (int)0;
HXDLIN( 268)						te1[(int)1] = (int)0;
HXDLIN( 268)						te1[(int)5] = ty1;
HXDLIN( 268)						te1[(int)9] = b;
HXDLIN( 268)						te1[(int)13] = (int)0;
HXDLIN( 268)						te1[(int)2] = (int)0;
HXDLIN( 268)						te1[(int)6] = (int)0;
HXDLIN( 268)						te1[(int)10] = c;
HXDLIN( 268)						te1[(int)14] = d;
HXDLIN( 268)						te1[(int)3] = (int)0;
HXDLIN( 268)						te1[(int)7] = (int)0;
HXDLIN( 268)						te1[(int)11] = (int)-1;
HXDLIN( 268)						te1[(int)15] = (int)0;
            					}
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            			}
            		}
HXLINE( 286)		 ::phoenix::Matrix _this2 = this->projection_matrix;
HXDLIN( 286)		int i = (int)0;
HXDLIN( 286)		while((i < (int)16)){
HXLINE( 286)			{
HXLINE( 286)				 ::snow::api::buffers::ArrayBufferView this1 = _this2->_float32array;
HXDLIN( 286)				{
HXLINE( 286)					int this2 = this1->byteOffset;
HXDLIN( 286)					::__hxcpp_memory_set_float(this1->buffer,(this2 + (i * (int)4)),_this2->elements->__get(i));
            				}
            			}
HXDLIN( 286)			i = (i + (int)1);
            		}
HXDLIN( 286)		this->proj_arr = _this2->_float32array;
HXLINE( 288)		this->projection_dirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,update_projection_matrix,(void))

void Camera_obj::apply_state(int state,bool value){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_298_apply_state)
HXDLIN( 298)		if (value) {
HXLINE( 299)			::Luxe_obj::renderer->state->enable(state);
            		}
            		else {
HXLINE( 301)			::Luxe_obj::renderer->state->disable(state);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Camera_obj,apply_state,(void))

void Camera_obj::apply_default_camera_options(){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_308_apply_default_camera_options)
HXDLIN( 308)		 ::phoenix::ProjectionType _g = this->projection;
HXDLIN( 308)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 312)				this->cull_backfaces = false;
HXLINE( 313)				this->depth_test = false;
            			}
            			break;
            			case (int)1: {
HXLINE( 319)				this->cull_backfaces = true;
HXLINE( 320)				this->depth_test = true;
            			}
            			break;
            			case (int)2: {
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,apply_default_camera_options,(void))

 ::Dynamic Camera_obj::default_camera_options(){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_332_default_camera_options)
HXDLIN( 332)		return  ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("projection",8f,88,8b,c4),::phoenix::ProjectionType_obj::ortho_dyn())
            			->setFixed(1,HX_("depth_test",4e,68,49,c9),false)
            			->setFixed(2,HX_("cull_backfaces",a2,e1,06,e5),false)
            			->setFixed(3,HX_("far",d7,ba,4d,00),(int)-1000)
            			->setFixed(4,HX_("near",e8,70,02,49),(int)1000));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,default_camera_options,return )

 ::phoenix::Vector Camera_obj::ortho_screen_to_world( ::phoenix::Vector _vector){
            	HX_GC_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_345_ortho_screen_to_world)
HXLINE( 347)		{
HXLINE( 347)			if (hx::IsNotNull( this->target )) {
HXLINE( 347)				this->update_look_at();
            			}
HXDLIN( 347)			this->update_projection_matrix();
HXDLIN( 347)			this->update_view_matrix();
            		}
HXLINE( 349)		 ::phoenix::Vector _this =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_vector->x,_vector->y,_vector->z,_vector->w);
HXDLIN( 349)		Float _x = _this->x;
HXDLIN( 349)		Float _y = _this->y;
HXDLIN( 349)		Float _z = _this->z;
HXDLIN( 349)		::Array< Float > e = this->view_matrix->elements;
HXDLIN( 349)		{
HXLINE( 349)			Float _x1 = ((((e->__get((int)0) * _x) + (e->__get((int)4) * _y)) + (e->__get((int)8) * _z)) + e->__get((int)12));
HXDLIN( 349)			Float _y1 = ((((e->__get((int)1) * _x) + (e->__get((int)5) * _y)) + (e->__get((int)9) * _z)) + e->__get((int)13));
HXDLIN( 349)			Float _z1 = ((((e->__get((int)2) * _x) + (e->__get((int)6) * _y)) + (e->__get((int)10) * _z)) + e->__get((int)14));
HXDLIN( 349)			bool prev = _this->ignore_listeners;
HXDLIN( 349)			_this->ignore_listeners = true;
HXDLIN( 349)			{
HXLINE( 349)				_this->x = _x1;
HXDLIN( 349)				if (!(_this->_construct)) {
HXLINE( 349)					bool _hx_tmp;
HXDLIN( 349)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 349)						_hx_tmp = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 349)						_hx_tmp = false;
            					}
HXDLIN( 349)					if (_hx_tmp) {
HXLINE( 349)						_this->listen_x(_x1);
            					}
            				}
            			}
HXDLIN( 349)			{
HXLINE( 349)				_this->y = _y1;
HXDLIN( 349)				if (!(_this->_construct)) {
HXLINE( 349)					bool _hx_tmp1;
HXDLIN( 349)					if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 349)						_hx_tmp1 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 349)						_hx_tmp1 = false;
            					}
HXDLIN( 349)					if (_hx_tmp1) {
HXLINE( 349)						_this->listen_y(_y1);
            					}
            				}
            			}
HXDLIN( 349)			{
HXLINE( 349)				_this->z = _z1;
HXDLIN( 349)				if (!(_this->_construct)) {
HXLINE( 349)					bool _hx_tmp2;
HXDLIN( 349)					if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 349)						_hx_tmp2 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 349)						_hx_tmp2 = false;
            					}
HXDLIN( 349)					if (_hx_tmp2) {
HXLINE( 349)						_this->listen_z(_z1);
            					}
            				}
            			}
HXDLIN( 349)			_this->ignore_listeners = prev;
HXDLIN( 349)			bool _hx_tmp3;
HXDLIN( 349)			if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 349)				_hx_tmp3 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 349)				_hx_tmp3 = false;
            			}
HXDLIN( 349)			if (_hx_tmp3) {
HXLINE( 349)				_this->listen_x(_this->x);
            			}
HXDLIN( 349)			bool _hx_tmp4;
HXDLIN( 349)			if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 349)				_hx_tmp4 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 349)				_hx_tmp4 = false;
            			}
HXDLIN( 349)			if (_hx_tmp4) {
HXLINE( 349)				_this->listen_y(_this->y);
            			}
HXDLIN( 349)			bool _hx_tmp5;
HXDLIN( 349)			if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 349)				_hx_tmp5 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 349)				_hx_tmp5 = false;
            			}
HXDLIN( 349)			if (_hx_tmp5) {
HXLINE( 349)				_this->listen_z(_this->z);
            			}
            		}
HXDLIN( 349)		return _this;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,ortho_screen_to_world,return )

 ::phoenix::Vector Camera_obj::ortho_world_to_screen( ::phoenix::Vector _vector){
            	HX_GC_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_353_ortho_world_to_screen)
HXLINE( 355)		{
HXLINE( 355)			if (hx::IsNotNull( this->target )) {
HXLINE( 355)				this->update_look_at();
            			}
HXDLIN( 355)			this->update_projection_matrix();
HXDLIN( 355)			this->update_view_matrix();
            		}
HXLINE( 357)		 ::phoenix::Vector _this =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_vector->x,_vector->y,_vector->z,_vector->w);
HXDLIN( 357)		Float _x = _this->x;
HXDLIN( 357)		Float _y = _this->y;
HXDLIN( 357)		Float _z = _this->z;
HXDLIN( 357)		::Array< Float > e = this->view_matrix_inverse->elements;
HXDLIN( 357)		{
HXLINE( 357)			Float _x1 = ((((e->__get((int)0) * _x) + (e->__get((int)4) * _y)) + (e->__get((int)8) * _z)) + e->__get((int)12));
HXDLIN( 357)			Float _y1 = ((((e->__get((int)1) * _x) + (e->__get((int)5) * _y)) + (e->__get((int)9) * _z)) + e->__get((int)13));
HXDLIN( 357)			Float _z1 = ((((e->__get((int)2) * _x) + (e->__get((int)6) * _y)) + (e->__get((int)10) * _z)) + e->__get((int)14));
HXDLIN( 357)			bool prev = _this->ignore_listeners;
HXDLIN( 357)			_this->ignore_listeners = true;
HXDLIN( 357)			{
HXLINE( 357)				_this->x = _x1;
HXDLIN( 357)				if (!(_this->_construct)) {
HXLINE( 357)					bool _hx_tmp;
HXDLIN( 357)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 357)						_hx_tmp = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 357)						_hx_tmp = false;
            					}
HXDLIN( 357)					if (_hx_tmp) {
HXLINE( 357)						_this->listen_x(_x1);
            					}
            				}
            			}
HXDLIN( 357)			{
HXLINE( 357)				_this->y = _y1;
HXDLIN( 357)				if (!(_this->_construct)) {
HXLINE( 357)					bool _hx_tmp1;
HXDLIN( 357)					if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 357)						_hx_tmp1 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 357)						_hx_tmp1 = false;
            					}
HXDLIN( 357)					if (_hx_tmp1) {
HXLINE( 357)						_this->listen_y(_y1);
            					}
            				}
            			}
HXDLIN( 357)			{
HXLINE( 357)				_this->z = _z1;
HXDLIN( 357)				if (!(_this->_construct)) {
HXLINE( 357)					bool _hx_tmp2;
HXDLIN( 357)					if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 357)						_hx_tmp2 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 357)						_hx_tmp2 = false;
            					}
HXDLIN( 357)					if (_hx_tmp2) {
HXLINE( 357)						_this->listen_z(_z1);
            					}
            				}
            			}
HXDLIN( 357)			_this->ignore_listeners = prev;
HXDLIN( 357)			bool _hx_tmp3;
HXDLIN( 357)			if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 357)				_hx_tmp3 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 357)				_hx_tmp3 = false;
            			}
HXDLIN( 357)			if (_hx_tmp3) {
HXLINE( 357)				_this->listen_x(_this->x);
            			}
HXDLIN( 357)			bool _hx_tmp4;
HXDLIN( 357)			if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 357)				_hx_tmp4 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 357)				_hx_tmp4 = false;
            			}
HXDLIN( 357)			if (_hx_tmp4) {
HXLINE( 357)				_this->listen_y(_this->y);
            			}
HXDLIN( 357)			bool _hx_tmp5;
HXDLIN( 357)			if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 357)				_hx_tmp5 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 357)				_hx_tmp5 = false;
            			}
HXDLIN( 357)			if (_hx_tmp5) {
HXLINE( 357)				_this->listen_z(_this->z);
            			}
            		}
HXDLIN( 357)		return _this;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,ortho_world_to_screen,return )

 ::phoenix::Vector Camera_obj::persepective_world_to_screen( ::phoenix::Vector _vector, ::phoenix::Rectangle _viewport){
            	HX_GC_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_361_persepective_world_to_screen)
HXLINE( 363)		if (hx::IsNull( _viewport )) {
HXLINE( 363)			_viewport = this->viewport;
            		}
HXLINE( 365)		 ::phoenix::Vector _projected = this->project(_vector);
HXLINE( 367)		Float width_half = ((Float)_viewport->w / (Float)(int)2);
HXLINE( 368)		Float height_half = ((Float)_viewport->h / (Float)(int)2);
HXLINE( 371)		Float _hx_tmp = ((_projected->x * width_half) + width_half);
HXLINE( 370)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,(-((_projected->y * height_half)) + height_half),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(Camera_obj,persepective_world_to_screen,return )

 ::phoenix::Vector Camera_obj::set_target( ::phoenix::Vector _target){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_380_set_target)
HXLINE( 382)		if (hx::IsNotNull( _target )) {
HXLINE( 383)			this->look_at_dirty = true;
            		}
HXLINE( 386)		return (this->target = _target);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_target,return )

Float Camera_obj::set_fov(Float _fov){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_390_set_fov)
HXLINE( 392)		this->projection_dirty = true;
HXLINE( 394)		if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 395)			Float _hx_tmp = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 395)			Float _hx_tmp1 = ::Math_obj::tan(((Float)(_fov * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 395)			this->fov_y = (_hx_tmp * ((int)2 * ::Math_obj::atan((_hx_tmp1 * ((Float)(int)1 / (Float)this->aspect)))));
            		}
            		else {
HXLINE( 397)			this->fov_y = _fov;
            		}
HXLINE( 400)		return (this->fov = _fov);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_fov,return )

 ::phoenix::FOVType Camera_obj::set_fov_type( ::phoenix::FOVType _fov_type){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_404_set_fov_type)
HXLINE( 406)		this->fov_type = _fov_type;
HXLINE( 408)		{
HXLINE( 408)			Float _fov = this->fov;
HXDLIN( 408)			this->projection_dirty = true;
HXDLIN( 408)			if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 408)				Float _hx_tmp = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 408)				Float _hx_tmp1 = ::Math_obj::tan(((Float)(_fov * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 408)				this->fov_y = (_hx_tmp * ((int)2 * ::Math_obj::atan((_hx_tmp1 * ((Float)(int)1 / (Float)this->aspect)))));
            			}
            			else {
HXLINE( 408)				this->fov_y = _fov;
            			}
HXDLIN( 408)			this->fov = _fov;
            		}
HXLINE( 410)		return this->fov_type;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_fov_type,return )

Float Camera_obj::set_aspect(Float _aspect){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_414_set_aspect)
HXLINE( 416)		this->projection_dirty = true;
HXLINE( 418)		this->aspect = _aspect;
HXLINE( 423)		{
HXLINE( 423)			Float _fov = this->fov;
HXDLIN( 423)			this->projection_dirty = true;
HXDLIN( 423)			if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 423)				Float _hx_tmp = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 423)				Float _hx_tmp1 = ::Math_obj::tan(((Float)(_fov * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 423)				this->fov_y = (_hx_tmp * ((int)2 * ::Math_obj::atan((_hx_tmp1 * ((Float)(int)1 / (Float)this->aspect)))));
            			}
            			else {
HXLINE( 423)				this->fov_y = _fov;
            			}
HXDLIN( 423)			this->fov = _fov;
            		}
HXLINE( 425)		return this->aspect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_aspect,return )

Float Camera_obj::set_near(Float _near){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_429_set_near)
HXLINE( 431)		this->projection_dirty = true;
HXLINE( 433)		return (this->_hx_near = _near);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_near,return )

Float Camera_obj::set_far(Float _far){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_437_set_far)
HXLINE( 439)		this->projection_dirty = true;
HXLINE( 441)		return (this->_hx_far = _far);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_far,return )

 ::Dynamic Camera_obj::set_ortho_left( ::Dynamic _val){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_445_set_ortho_left)
HXLINE( 447)		this->projection_dirty = true;
HXLINE( 449)		return (this->ortho_left = _val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_ortho_left,return )

 ::Dynamic Camera_obj::set_ortho_right( ::Dynamic _val){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_453_set_ortho_right)
HXLINE( 455)		this->projection_dirty = true;
HXLINE( 457)		return (this->ortho_right = _val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_ortho_right,return )

 ::Dynamic Camera_obj::set_ortho_top( ::Dynamic _val){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_461_set_ortho_top)
HXLINE( 463)		this->projection_dirty = true;
HXLINE( 465)		return (this->ortho_top = _val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_ortho_top,return )

 ::Dynamic Camera_obj::set_ortho_bottom( ::Dynamic _val){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_469_set_ortho_bottom)
HXLINE( 471)		this->projection_dirty = true;
HXLINE( 473)		return (this->ortho_bottom = _val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_ortho_bottom,return )

Float Camera_obj::set_zoom(Float _z){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_478_set_zoom)
HXLINE( 480)		Float _new_zoom = _z;
HXLINE( 484)		if ((_new_zoom < this->minimum_zoom)) {
HXLINE( 485)			_new_zoom = this->minimum_zoom;
            		}
HXLINE( 488)		{
HXLINE( 488)			 ::phoenix::ProjectionType _g = this->projection;
HXDLIN( 488)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 493)					{
HXLINE( 493)						 ::phoenix::Vector _this = this->transform->local->scale;
HXDLIN( 493)						Float _x = ((Float)(int)1 / (Float)_new_zoom);
HXDLIN( 493)						_this->x = _x;
HXDLIN( 493)						if (!(_this->_construct)) {
HXLINE( 493)							bool _hx_tmp;
HXDLIN( 493)							if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 493)								_hx_tmp = !(_this->ignore_listeners);
            							}
            							else {
HXLINE( 493)								_hx_tmp = false;
            							}
HXDLIN( 493)							if (_hx_tmp) {
HXLINE( 493)								_this->listen_x(_x);
            							}
            						}
            					}
HXLINE( 494)					{
HXLINE( 494)						 ::phoenix::Vector _this1 = this->transform->local->scale;
HXDLIN( 494)						Float _y = ((Float)(int)1 / (Float)_new_zoom);
HXDLIN( 494)						_this1->y = _y;
HXDLIN( 494)						if (!(_this1->_construct)) {
HXLINE( 494)							bool _hx_tmp1;
HXDLIN( 494)							if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 494)								_hx_tmp1 = !(_this1->ignore_listeners);
            							}
            							else {
HXLINE( 494)								_hx_tmp1 = false;
            							}
HXDLIN( 494)							if (_hx_tmp1) {
HXLINE( 494)								_this1->listen_y(_y);
            							}
            						}
            					}
HXLINE( 495)					{
HXLINE( 495)						 ::phoenix::Vector _this2 = this->transform->local->scale;
HXDLIN( 495)						Float _z1 = ((Float)(int)1 / (Float)_new_zoom);
HXDLIN( 495)						_this2->z = _z1;
HXDLIN( 495)						if (!(_this2->_construct)) {
HXLINE( 495)							bool _hx_tmp2;
HXDLIN( 495)							if (hx::IsNotNull( _this2->listen_z )) {
HXLINE( 495)								_hx_tmp2 = !(_this2->ignore_listeners);
            							}
            							else {
HXLINE( 495)								_hx_tmp2 = false;
            							}
HXDLIN( 495)							if (_hx_tmp2) {
HXLINE( 495)								_this2->listen_z(_z1);
            							}
            						}
            					}
            				}
            				break;
            				case (int)1: {
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            			}
            		}
HXLINE( 510)		return (this->zoom = _new_zoom);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_zoom,return )

 ::phoenix::Vector Camera_obj::set_center( ::phoenix::Vector _p){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_515_set_center)
HXLINE( 517)		this->center = _p;
HXLINE( 519)		{
HXLINE( 519)			 ::phoenix::ProjectionType _g = this->projection;
HXDLIN( 519)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 523)					bool _hx_tmp;
HXDLIN( 523)					if (!(this->refresh_pos_)) {
HXLINE( 523)						_hx_tmp = !(this->setup_);
            					}
            					else {
HXLINE( 523)						_hx_tmp = false;
            					}
HXDLIN( 523)					if (_hx_tmp) {
HXLINE( 526)						this->pos->ignore_listeners = true;
HXLINE( 527)						{
HXLINE( 527)							 ::phoenix::Vector _this = this->pos;
HXDLIN( 527)							Float _p1 = _p->x;
HXDLIN( 527)							Float _x = (_p1 - ((Float)this->viewport->w / (Float)(int)2));
HXDLIN( 527)							_this->x = _x;
HXDLIN( 527)							if (!(_this->_construct)) {
HXLINE( 527)								bool _hx_tmp1;
HXDLIN( 527)								if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 527)									_hx_tmp1 = !(_this->ignore_listeners);
            								}
            								else {
HXLINE( 527)									_hx_tmp1 = false;
            								}
HXDLIN( 527)								if (_hx_tmp1) {
HXLINE( 527)									_this->listen_x(_x);
            								}
            							}
            						}
HXLINE( 528)						{
HXLINE( 528)							 ::phoenix::Vector _this1 = this->pos;
HXDLIN( 528)							Float _p2 = _p->y;
HXDLIN( 528)							Float _y = (_p2 - ((Float)this->viewport->h / (Float)(int)2));
HXDLIN( 528)							_this1->y = _y;
HXDLIN( 528)							if (!(_this1->_construct)) {
HXLINE( 528)								bool _hx_tmp2;
HXDLIN( 528)								if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 528)									_hx_tmp2 = !(_this1->ignore_listeners);
            								}
            								else {
HXLINE( 528)									_hx_tmp2 = false;
            								}
HXDLIN( 528)								if (_hx_tmp2) {
HXLINE( 528)									_this1->listen_y(_y);
            								}
            							}
            						}
HXLINE( 529)						this->pos->ignore_listeners = false;
HXLINE( 531)						{
HXLINE( 531)							 ::phoenix::Vector _this2 = this->transform->local->pos;
HXDLIN( 531)							{
HXLINE( 531)								Float _x1 = _p->x;
HXDLIN( 531)								Float _y1 = _p->y;
HXDLIN( 531)								Float _z = _p->z;
HXDLIN( 531)								Float _w = _p->w;
HXDLIN( 531)								bool prev = _this2->ignore_listeners;
HXDLIN( 531)								_this2->ignore_listeners = true;
HXDLIN( 531)								{
HXLINE( 531)									_this2->x = _x1;
HXDLIN( 531)									if (!(_this2->_construct)) {
HXLINE( 531)										bool _hx_tmp3;
HXDLIN( 531)										if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 531)											_hx_tmp3 = !(_this2->ignore_listeners);
            										}
            										else {
HXLINE( 531)											_hx_tmp3 = false;
            										}
HXDLIN( 531)										if (_hx_tmp3) {
HXLINE( 531)											_this2->listen_x(_x1);
            										}
            									}
            								}
HXDLIN( 531)								{
HXLINE( 531)									_this2->y = _y1;
HXDLIN( 531)									if (!(_this2->_construct)) {
HXLINE( 531)										bool _hx_tmp4;
HXDLIN( 531)										if (hx::IsNotNull( _this2->listen_y )) {
HXLINE( 531)											_hx_tmp4 = !(_this2->ignore_listeners);
            										}
            										else {
HXLINE( 531)											_hx_tmp4 = false;
            										}
HXDLIN( 531)										if (_hx_tmp4) {
HXLINE( 531)											_this2->listen_y(_y1);
            										}
            									}
            								}
HXDLIN( 531)								{
HXLINE( 531)									_this2->z = _z;
HXDLIN( 531)									if (!(_this2->_construct)) {
HXLINE( 531)										bool _hx_tmp5;
HXDLIN( 531)										if (hx::IsNotNull( _this2->listen_z )) {
HXLINE( 531)											_hx_tmp5 = !(_this2->ignore_listeners);
            										}
            										else {
HXLINE( 531)											_hx_tmp5 = false;
            										}
HXDLIN( 531)										if (_hx_tmp5) {
HXLINE( 531)											_this2->listen_z(_z);
            										}
            									}
            								}
HXDLIN( 531)								_this2->w = _w;
HXDLIN( 531)								_this2->ignore_listeners = prev;
HXDLIN( 531)								bool _hx_tmp6;
HXDLIN( 531)								if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 531)									_hx_tmp6 = !(_this2->ignore_listeners);
            								}
            								else {
HXLINE( 531)									_hx_tmp6 = false;
            								}
HXDLIN( 531)								if (_hx_tmp6) {
HXLINE( 531)									_this2->listen_x(_this2->x);
            								}
HXDLIN( 531)								bool _hx_tmp7;
HXDLIN( 531)								if (hx::IsNotNull( _this2->listen_y )) {
HXLINE( 531)									_hx_tmp7 = !(_this2->ignore_listeners);
            								}
            								else {
HXLINE( 531)									_hx_tmp7 = false;
            								}
HXDLIN( 531)								if (_hx_tmp7) {
HXLINE( 531)									_this2->listen_y(_this2->y);
            								}
HXDLIN( 531)								bool _hx_tmp8;
HXDLIN( 531)								if (hx::IsNotNull( _this2->listen_z )) {
HXLINE( 531)									_hx_tmp8 = !(_this2->ignore_listeners);
            								}
            								else {
HXLINE( 531)									_hx_tmp8 = false;
            								}
HXDLIN( 531)								if (_hx_tmp8) {
HXLINE( 531)									_this2->listen_z(_this2->z);
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)1: {
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            			}
            		}
HXLINE( 541)		{
HXLINE( 541)			 ::phoenix::Vector _v = this->center;
HXDLIN( 541)			 ::Dynamic listener = this->_center_changed_dyn();
HXDLIN( 541)			_v->listen_x = listener;
HXDLIN( 541)			_v->listen_y = listener;
HXDLIN( 541)			_v->listen_z = listener;
            		}
HXLINE( 543)		return this->center;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_center,return )

 ::phoenix::Vector Camera_obj::get_center(){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_549_get_center)
HXDLIN( 549)		return this->center;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,get_center,return )

 ::phoenix::Vector Camera_obj::get_pos(){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_555_get_pos)
HXDLIN( 555)		return this->pos;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,get_pos,return )

 ::phoenix::Quaternion Camera_obj::get_rotation(){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_561_get_rotation)
HXDLIN( 561)		return this->transform->local->rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,get_rotation,return )

 ::phoenix::Vector Camera_obj::get_scale(){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_567_get_scale)
HXDLIN( 567)		return this->transform->local->scale;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,get_scale,return )

 ::phoenix::Rectangle Camera_obj::get_viewport(){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_573_get_viewport)
HXDLIN( 573)		return this->viewport;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,get_viewport,return )

 ::phoenix::Rectangle Camera_obj::set_viewport( ::phoenix::Rectangle _r){
            	HX_GC_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_577_set_viewport)
HXLINE( 579)		this->projection_dirty = true;
HXLINE( 581)		this->viewport = _r;
HXLINE( 583)		{
HXLINE( 583)			 ::phoenix::ProjectionType _g = this->projection;
HXDLIN( 583)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 588)					{
HXLINE( 588)						 ::phoenix::Transform _this = this->transform;
HXDLIN( 588)						Float o = ((Float)_r->w / (Float)(int)2);
HXDLIN( 588)						 ::phoenix::Vector o1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,o,((Float)_r->h / (Float)(int)2),null(),null());
HXDLIN( 588)						{
HXLINE( 588)							_this->dirty = true;
HXDLIN( 588)							bool _hx_tmp;
HXDLIN( 588)							bool _hx_tmp1;
HXDLIN( 588)							bool _hx_tmp2;
HXDLIN( 588)							if (_this->dirty) {
HXLINE( 588)								_hx_tmp2 = !(_this->_setup);
            							}
            							else {
HXLINE( 588)								_hx_tmp2 = false;
            							}
HXDLIN( 588)							if (_hx_tmp2) {
HXLINE( 588)								_hx_tmp1 = hx::IsNotNull( _this->_dirty_handlers );
            							}
            							else {
HXLINE( 588)								_hx_tmp1 = false;
            							}
HXDLIN( 588)							if (_hx_tmp1) {
HXLINE( 588)								_hx_tmp = (_this->_dirty_handlers->length > (int)0);
            							}
            							else {
HXLINE( 588)								_hx_tmp = false;
            							}
HXDLIN( 588)							if (_hx_tmp) {
HXLINE( 588)								int _g1 = (int)0;
HXDLIN( 588)								::Array< ::Dynamic> _g11 = _this->_dirty_handlers;
HXDLIN( 588)								while((_g1 < _g11->length)){
HXLINE( 588)									 ::Dynamic _handler = _g11->__get(_g1);
HXDLIN( 588)									_g1 = (_g1 + (int)1);
HXDLIN( 588)									if (hx::IsNotNull( _handler )) {
HXLINE( 588)										_handler(_this);
            									}
            								}
            							}
            						}
HXDLIN( 588)						_this->origin = o1;
HXDLIN( 588)						bool _hx_tmp3;
HXDLIN( 588)						if (hx::IsNotNull( _this->_origin_handlers )) {
HXLINE( 588)							_hx_tmp3 = (_this->_origin_handlers->length > (int)0);
            						}
            						else {
HXLINE( 588)							_hx_tmp3 = false;
            						}
HXDLIN( 588)						if (_hx_tmp3) {
HXLINE( 588)							 ::phoenix::Vector _origin = _this->origin;
HXDLIN( 588)							{
HXLINE( 588)								int _g2 = (int)0;
HXDLIN( 588)								::Array< ::Dynamic> _g12 = _this->_origin_handlers;
HXDLIN( 588)								while((_g2 < _g12->length)){
HXLINE( 588)									 ::Dynamic _handler1 = _g12->__get(_g2);
HXDLIN( 588)									_g2 = (_g2 + (int)1);
HXDLIN( 588)									if (hx::IsNotNull( _handler1 )) {
HXLINE( 588)										_handler1(_origin);
            									}
            								}
            							}
            						}
            					}
HXLINE( 590)					this->set_pos(this->pos);
            				}
            				break;
            				case (int)1: {
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            			}
            		}
HXLINE( 599)		return this->viewport;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_viewport,return )

 ::phoenix::Quaternion Camera_obj::set_rotation( ::phoenix::Quaternion _q){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_605_set_rotation)
HXDLIN( 605)		 ::phoenix::Spatial _this = this->transform->local;
HXDLIN( 605)		_this->rotation = _q;
HXDLIN( 605)		if (hx::IsNotNull( _q )) {
HXDLIN( 605)			{
HXDLIN( 605)				 ::phoenix::Quaternion _q1 = _this->rotation;
HXDLIN( 605)				 ::Dynamic listener = _this->_rotation_change_dyn();
HXDLIN( 605)				_q1->listen_x = listener;
HXDLIN( 605)				_q1->listen_y = listener;
HXDLIN( 605)				_q1->listen_z = listener;
HXDLIN( 605)				_q1->listen_w = listener;
            			}
HXDLIN( 605)			{
HXDLIN( 605)				bool _hx_tmp;
HXDLIN( 605)				if (hx::IsNotNull( _this->rotation_changed )) {
HXDLIN( 605)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXDLIN( 605)					_hx_tmp = false;
            				}
HXDLIN( 605)				if (_hx_tmp) {
HXDLIN( 605)					_this->rotation_changed(_this->rotation);
            				}
            			}
            		}
HXDLIN( 605)		return _this->rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_rotation,return )

 ::phoenix::Vector Camera_obj::set_scale( ::phoenix::Vector _s){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_611_set_scale)
HXDLIN( 611)		 ::phoenix::Spatial _this = this->transform->local;
HXDLIN( 611)		_this->scale = _s;
HXDLIN( 611)		if (hx::IsNotNull( _s )) {
HXDLIN( 611)			{
HXDLIN( 611)				 ::phoenix::Vector _v = _this->scale;
HXDLIN( 611)				 ::Dynamic listener = _this->_scale_change_dyn();
HXDLIN( 611)				_v->listen_x = listener;
HXDLIN( 611)				_v->listen_y = listener;
HXDLIN( 611)				_v->listen_z = listener;
            			}
HXDLIN( 611)			{
HXDLIN( 611)				bool _hx_tmp;
HXDLIN( 611)				if (hx::IsNotNull( _this->scale_changed )) {
HXDLIN( 611)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXDLIN( 611)					_hx_tmp = false;
            				}
HXDLIN( 611)				if (_hx_tmp) {
HXDLIN( 611)					_this->scale_changed(_this->scale);
            				}
            			}
            		}
HXDLIN( 611)		return _this->scale;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_scale,return )

 ::phoenix::Vector Camera_obj::set_pos( ::phoenix::Vector _p){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_615_set_pos)
HXLINE( 617)		this->pos = _p;
HXLINE( 619)		{
HXLINE( 619)			 ::phoenix::ProjectionType _g = this->projection;
HXDLIN( 619)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 623)					Float _cx = this->center->x;
HXLINE( 624)					Float _cy = this->center->y;
HXLINE( 626)					if (hx::IsNotNull( this->viewport )) {
HXLINE( 627)						Float _p1 = _p->x;
HXDLIN( 627)						_cx = (_p1 + ((Float)this->viewport->w / (Float)(int)2));
HXLINE( 628)						Float _p2 = _p->y;
HXDLIN( 628)						_cy = (_p2 + ((Float)this->viewport->h / (Float)(int)2));
            					}
HXLINE( 631)					this->refresh_pos_ = true;
HXLINE( 632)					this->center->ignore_listeners = true;
HXLINE( 633)					{
HXLINE( 633)						 ::phoenix::Vector _this = this->center;
HXDLIN( 633)						_this->x = _cx;
HXDLIN( 633)						if (!(_this->_construct)) {
HXLINE( 633)							bool _hx_tmp;
HXDLIN( 633)							if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 633)								_hx_tmp = !(_this->ignore_listeners);
            							}
            							else {
HXLINE( 633)								_hx_tmp = false;
            							}
HXDLIN( 633)							if (_hx_tmp) {
HXLINE( 633)								_this->listen_x(_cx);
            							}
            						}
            					}
HXLINE( 634)					{
HXLINE( 634)						 ::phoenix::Vector _this1 = this->center;
HXDLIN( 634)						_this1->y = _cy;
HXDLIN( 634)						if (!(_this1->_construct)) {
HXLINE( 634)							bool _hx_tmp1;
HXDLIN( 634)							if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 634)								_hx_tmp1 = !(_this1->ignore_listeners);
            							}
            							else {
HXLINE( 634)								_hx_tmp1 = false;
            							}
HXDLIN( 634)							if (_hx_tmp1) {
HXLINE( 634)								_this1->listen_y(_cy);
            							}
            						}
            					}
HXLINE( 635)					this->center->ignore_listeners = false;
HXLINE( 636)					this->refresh_pos_ = false;
HXLINE( 638)					{
HXLINE( 638)						 ::phoenix::Vector _this2 = this->transform->local->pos;
HXDLIN( 638)						_this2->x = _cx;
HXDLIN( 638)						if (!(_this2->_construct)) {
HXLINE( 638)							bool _hx_tmp2;
HXDLIN( 638)							if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 638)								_hx_tmp2 = !(_this2->ignore_listeners);
            							}
            							else {
HXLINE( 638)								_hx_tmp2 = false;
            							}
HXDLIN( 638)							if (_hx_tmp2) {
HXLINE( 638)								_this2->listen_x(_cx);
            							}
            						}
            					}
HXLINE( 639)					{
HXLINE( 639)						 ::phoenix::Vector _this3 = this->transform->local->pos;
HXDLIN( 639)						_this3->y = _cy;
HXDLIN( 639)						if (!(_this3->_construct)) {
HXLINE( 639)							bool _hx_tmp3;
HXDLIN( 639)							if (hx::IsNotNull( _this3->listen_y )) {
HXLINE( 639)								_hx_tmp3 = !(_this3->ignore_listeners);
            							}
            							else {
HXLINE( 639)								_hx_tmp3 = false;
            							}
HXDLIN( 639)							if (_hx_tmp3) {
HXLINE( 639)								_this3->listen_y(_cy);
            							}
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 643)					 ::phoenix::Vector value = this->pos;
HXDLIN( 643)					{
HXLINE( 643)						 ::phoenix::Spatial _this4 = this->transform->local;
HXDLIN( 643)						_this4->pos = value;
HXDLIN( 643)						if (hx::IsNotNull( value )) {
HXLINE( 643)							{
HXLINE( 643)								 ::phoenix::Vector _v = _this4->pos;
HXDLIN( 643)								 ::Dynamic listener = _this4->_pos_change_dyn();
HXDLIN( 643)								_v->listen_x = listener;
HXDLIN( 643)								_v->listen_y = listener;
HXDLIN( 643)								_v->listen_z = listener;
            							}
HXDLIN( 643)							{
HXLINE( 643)								bool _hx_tmp4;
HXDLIN( 643)								if (hx::IsNotNull( _this4->pos_changed )) {
HXLINE( 643)									_hx_tmp4 = !(_this4->ignore_listeners);
            								}
            								else {
HXLINE( 643)									_hx_tmp4 = false;
            								}
HXDLIN( 643)								if (_hx_tmp4) {
HXLINE( 643)									_this4->pos_changed(_this4->pos);
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            			}
            		}
HXLINE( 649)		{
HXLINE( 649)			 ::phoenix::Vector _v1 = this->pos;
HXDLIN( 649)			 ::Dynamic listener1 = this->_pos_changed_dyn();
HXDLIN( 649)			_v1->listen_x = listener1;
HXDLIN( 649)			_v1->listen_y = listener1;
HXDLIN( 649)			_v1->listen_z = listener1;
            		}
HXLINE( 651)		return this->pos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_pos,return )

void Camera_obj::_merge_options( ::Dynamic _o){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_655__merge_options)
HXLINE( 658)		{
HXLINE( 658)			 ::phoenix::ProjectionType _g = this->projection;
HXDLIN( 658)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 658)					this->cull_backfaces = false;
HXDLIN( 658)					this->depth_test = false;
            				}
            				break;
            				case (int)1: {
HXLINE( 658)					this->cull_backfaces = true;
HXDLIN( 658)					this->depth_test = true;
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            			}
            		}
HXLINE( 660)		if (hx::IsNotNull( _o->__Field(HX_("aspect",d8,95,07,4a),hx::paccDynamic) )) {
HXLINE( 660)			this->projection_dirty = true;
HXDLIN( 660)			this->aspect = ( (Float)(_o->__Field(HX_("aspect",d8,95,07,4a),hx::paccDynamic)) );
HXDLIN( 660)			{
HXLINE( 660)				Float _fov = this->fov;
HXDLIN( 660)				this->projection_dirty = true;
HXDLIN( 660)				if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 660)					Float _hx_tmp = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 660)					Float _hx_tmp1 = ::Math_obj::tan(((Float)(_fov * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 660)					this->fov_y = (_hx_tmp * ((int)2 * ::Math_obj::atan((_hx_tmp1 * ((Float)(int)1 / (Float)this->aspect)))));
            				}
            				else {
HXLINE( 660)					this->fov_y = _fov;
            				}
HXDLIN( 660)				this->fov = _fov;
            			}
            		}
HXLINE( 661)		if (hx::IsNotNull( _o->__Field(HX_("far",d7,ba,4d,00),hx::paccDynamic) )) {
HXLINE( 661)			this->projection_dirty = true;
HXDLIN( 661)			this->_hx_far = ( (Float)(_o->__Field(HX_("far",d7,ba,4d,00),hx::paccDynamic)) );
            		}
HXLINE( 662)		if (hx::IsNotNull( _o->__Field(HX_("fov",0d,c7,4d,00),hx::paccDynamic) )) {
HXLINE( 662)			Float _fov1 = ( (Float)(_o->__Field(HX_("fov",0d,c7,4d,00),hx::paccDynamic)) );
HXDLIN( 662)			this->projection_dirty = true;
HXDLIN( 662)			if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 662)				Float _hx_tmp2 = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 662)				Float _hx_tmp3 = ::Math_obj::tan(((Float)(_fov1 * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 662)				this->fov_y = (_hx_tmp2 * ((int)2 * ::Math_obj::atan((_hx_tmp3 * ((Float)(int)1 / (Float)this->aspect)))));
            			}
            			else {
HXLINE( 662)				this->fov_y = _fov1;
            			}
HXDLIN( 662)			this->fov = _fov1;
            		}
HXLINE( 663)		if (hx::IsNotNull( _o->__Field(HX_("near",e8,70,02,49),hx::paccDynamic) )) {
HXLINE( 663)			this->projection_dirty = true;
HXDLIN( 663)			this->_hx_near = ( (Float)(_o->__Field(HX_("near",e8,70,02,49),hx::paccDynamic)) );
            		}
HXLINE( 665)		if (hx::IsNotNull( ( ( ::phoenix::Rectangle)(_o->__Field(HX_("viewport",66,4c,a5,9c),hx::paccDynamic)) ) )) {
HXLINE( 665)			this->set_viewport(( ( ::phoenix::Rectangle)(_o->__Field(HX_("viewport",66,4c,a5,9c),hx::paccDynamic)) ));
            		}
HXLINE( 666)		if (hx::IsNotNull( _o->__Field(HX_("cull_backfaces",a2,e1,06,e5),hx::paccDynamic) )) {
HXLINE( 666)			this->cull_backfaces = ( (bool)(_o->__Field(HX_("cull_backfaces",a2,e1,06,e5),hx::paccDynamic)) );
            		}
HXLINE( 667)		if (hx::IsNotNull( _o->__Field(HX_("depth_test",4e,68,49,c9),hx::paccDynamic) )) {
HXLINE( 667)			this->depth_test = ( (bool)(_o->__Field(HX_("depth_test",4e,68,49,c9),hx::paccDynamic)) );
            		}
HXLINE( 670)		if (hx::IsNotNull( _o->__Field(HX_("fov_type",6c,98,1e,00),hx::paccDynamic) )) {
HXLINE( 671)			this->fov_type = _o->__Field(HX_("fov_type",6c,98,1e,00),hx::paccDynamic);
HXDLIN( 671)			{
HXLINE( 671)				Float _fov2 = this->fov;
HXDLIN( 671)				this->projection_dirty = true;
HXDLIN( 671)				if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 671)					Float _hx_tmp4 = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 671)					Float _hx_tmp5 = ::Math_obj::tan(((Float)(_fov2 * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 671)					this->fov_y = (_hx_tmp4 * ((int)2 * ::Math_obj::atan((_hx_tmp5 * ((Float)(int)1 / (Float)this->aspect)))));
            				}
            				else {
HXLINE( 671)					this->fov_y = _fov2;
            				}
HXDLIN( 671)				this->fov = _fov2;
            			}
            		}
            		else {
HXLINE( 673)			this->fov_type = ::phoenix::FOVType_obj::horizontal_dyn();
HXDLIN( 673)			{
HXLINE( 673)				Float _fov3 = this->fov;
HXDLIN( 673)				this->projection_dirty = true;
HXDLIN( 673)				if (hx::IsEq( this->fov_type,::phoenix::FOVType_obj::horizontal_dyn() )) {
HXLINE( 673)					Float _hx_tmp6 = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN( 673)					Float _hx_tmp7 = ::Math_obj::tan(((Float)(_fov3 * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN( 673)					this->fov_y = (_hx_tmp6 * ((int)2 * ::Math_obj::atan((_hx_tmp7 * ((Float)(int)1 / (Float)this->aspect)))));
            				}
            				else {
HXLINE( 673)					this->fov_y = _fov3;
            				}
HXDLIN( 673)				this->fov = _fov3;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,_merge_options,(void))

void Camera_obj::_pos_changed(Float v){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_680__pos_changed)
HXDLIN( 680)		this->set_pos(this->pos);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,_pos_changed,(void))

void Camera_obj::_center_changed(Float v){
            	HX_STACKFRAME(&_hx_pos_d1b7485dbf1849bd_686__center_changed)
HXDLIN( 686)		this->set_center(this->center);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,_center_changed,(void))


hx::ObjectPtr< Camera_obj > Camera_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< Camera_obj > __this = new Camera_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< Camera_obj > Camera_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	Camera_obj *__this = (Camera_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Camera_obj), true, "phoenix.Camera"));
	*(void **)__this = Camera_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

Camera_obj::Camera_obj()
{
}

void Camera_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Camera);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(viewport,"viewport");
	HX_MARK_MEMBER_NAME(center,"center");
	HX_MARK_MEMBER_NAME(zoom,"zoom");
	HX_MARK_MEMBER_NAME(_hx_near,"near");
	HX_MARK_MEMBER_NAME(_hx_far,"far");
	HX_MARK_MEMBER_NAME(fov,"fov");
	HX_MARK_MEMBER_NAME(fov_type,"fov_type");
	HX_MARK_MEMBER_NAME(aspect,"aspect");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(transform,"transform");
	HX_MARK_MEMBER_NAME(cull_backfaces,"cull_backfaces");
	HX_MARK_MEMBER_NAME(depth_test,"depth_test");
	HX_MARK_MEMBER_NAME(minimum_zoom,"minimum_zoom");
	HX_MARK_MEMBER_NAME(projection_matrix,"projection_matrix");
	HX_MARK_MEMBER_NAME(view_matrix,"view_matrix");
	HX_MARK_MEMBER_NAME(view_matrix_inverse,"view_matrix_inverse");
	HX_MARK_MEMBER_NAME(look_at_matrix,"look_at_matrix");
	HX_MARK_MEMBER_NAME(projection,"projection");
	HX_MARK_MEMBER_NAME(ortho_left,"ortho_left");
	HX_MARK_MEMBER_NAME(ortho_right,"ortho_right");
	HX_MARK_MEMBER_NAME(ortho_top,"ortho_top");
	HX_MARK_MEMBER_NAME(ortho_bottom,"ortho_bottom");
	HX_MARK_MEMBER_NAME(proj_arr,"proj_arr");
	HX_MARK_MEMBER_NAME(view_inverse_arr,"view_inverse_arr");
	HX_MARK_MEMBER_NAME(fov_y,"fov_y");
	HX_MARK_MEMBER_NAME(transform_dirty,"transform_dirty");
	HX_MARK_MEMBER_NAME(projection_dirty,"projection_dirty");
	HX_MARK_MEMBER_NAME(look_at_dirty,"look_at_dirty");
	HX_MARK_MEMBER_NAME(setup_,"setup_");
	HX_MARK_MEMBER_NAME(up_,"up_");
	HX_MARK_MEMBER_NAME(refresh_pos_,"refresh_pos_");
	HX_MARK_END_CLASS();
}

void Camera_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(viewport,"viewport");
	HX_VISIT_MEMBER_NAME(center,"center");
	HX_VISIT_MEMBER_NAME(zoom,"zoom");
	HX_VISIT_MEMBER_NAME(_hx_near,"near");
	HX_VISIT_MEMBER_NAME(_hx_far,"far");
	HX_VISIT_MEMBER_NAME(fov,"fov");
	HX_VISIT_MEMBER_NAME(fov_type,"fov_type");
	HX_VISIT_MEMBER_NAME(aspect,"aspect");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(transform,"transform");
	HX_VISIT_MEMBER_NAME(cull_backfaces,"cull_backfaces");
	HX_VISIT_MEMBER_NAME(depth_test,"depth_test");
	HX_VISIT_MEMBER_NAME(minimum_zoom,"minimum_zoom");
	HX_VISIT_MEMBER_NAME(projection_matrix,"projection_matrix");
	HX_VISIT_MEMBER_NAME(view_matrix,"view_matrix");
	HX_VISIT_MEMBER_NAME(view_matrix_inverse,"view_matrix_inverse");
	HX_VISIT_MEMBER_NAME(look_at_matrix,"look_at_matrix");
	HX_VISIT_MEMBER_NAME(projection,"projection");
	HX_VISIT_MEMBER_NAME(ortho_left,"ortho_left");
	HX_VISIT_MEMBER_NAME(ortho_right,"ortho_right");
	HX_VISIT_MEMBER_NAME(ortho_top,"ortho_top");
	HX_VISIT_MEMBER_NAME(ortho_bottom,"ortho_bottom");
	HX_VISIT_MEMBER_NAME(proj_arr,"proj_arr");
	HX_VISIT_MEMBER_NAME(view_inverse_arr,"view_inverse_arr");
	HX_VISIT_MEMBER_NAME(fov_y,"fov_y");
	HX_VISIT_MEMBER_NAME(transform_dirty,"transform_dirty");
	HX_VISIT_MEMBER_NAME(projection_dirty,"projection_dirty");
	HX_VISIT_MEMBER_NAME(look_at_dirty,"look_at_dirty");
	HX_VISIT_MEMBER_NAME(setup_,"setup_");
	HX_VISIT_MEMBER_NAME(up_,"up_");
	HX_VISIT_MEMBER_NAME(refresh_pos_,"refresh_pos_");
}

hx::Val Camera_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"far") ) { return hx::Val( _hx_far ); }
		if (HX_FIELD_EQ(inName,"fov") ) { return hx::Val( fov ); }
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( inCallProp == hx::paccAlways ? get_pos() : pos ); }
		if (HX_FIELD_EQ(inName,"up_") ) { return hx::Val( up_ ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"zoom") ) { return hx::Val( zoom ); }
		if (HX_FIELD_EQ(inName,"near") ) { return hx::Val( _hx_near ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scale() ); }
		if (HX_FIELD_EQ(inName,"fov_y") ) { return hx::Val( fov_y ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"center") ) { return hx::Val( inCallProp == hx::paccAlways ? get_center() : center ); }
		if (HX_FIELD_EQ(inName,"aspect") ) { return hx::Val( aspect ); }
		if (HX_FIELD_EQ(inName,"target") ) { return hx::Val( target ); }
		if (HX_FIELD_EQ(inName,"setup_") ) { return hx::Val( setup_ ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"project") ) { return hx::Val( project_dyn() ); }
		if (HX_FIELD_EQ(inName,"process") ) { return hx::Val( process_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fov") ) { return hx::Val( set_fov_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_far") ) { return hx::Val( set_far_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_pos") ) { return hx::Val( get_pos_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pos") ) { return hx::Val( set_pos_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"viewport") ) { return hx::Val( inCallProp == hx::paccAlways ? get_viewport() : viewport ); }
		if (HX_FIELD_EQ(inName,"fov_type") ) { return hx::Val( fov_type ); }
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotation() ); }
		if (HX_FIELD_EQ(inName,"proj_arr") ) { return hx::Val( proj_arr ); }
		if (HX_FIELD_EQ(inName,"set_near") ) { return hx::Val( set_near_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_zoom") ) { return hx::Val( set_zoom_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform ); }
		if (HX_FIELD_EQ(inName,"ortho_top") ) { return hx::Val( ortho_top ); }
		if (HX_FIELD_EQ(inName,"set_ortho") ) { return hx::Val( set_ortho_dyn() ); }
		if (HX_FIELD_EQ(inName,"unproject") ) { return hx::Val( unproject_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scale") ) { return hx::Val( get_scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scale") ) { return hx::Val( set_scale_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"depth_test") ) { return hx::Val( depth_test ); }
		if (HX_FIELD_EQ(inName,"projection") ) { return hx::Val( projection ); }
		if (HX_FIELD_EQ(inName,"ortho_left") ) { return hx::Val( ortho_left ); }
		if (HX_FIELD_EQ(inName,"set_target") ) { return hx::Val( set_target_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_aspect") ) { return hx::Val( set_aspect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_center") ) { return hx::Val( set_center_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_center") ) { return hx::Val( get_center_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"view_matrix") ) { return hx::Val( view_matrix ); }
		if (HX_FIELD_EQ(inName,"ortho_right") ) { return hx::Val( ortho_right ); }
		if (HX_FIELD_EQ(inName,"apply_state") ) { return hx::Val( apply_state_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"minimum_zoom") ) { return hx::Val( minimum_zoom ); }
		if (HX_FIELD_EQ(inName,"ortho_bottom") ) { return hx::Val( ortho_bottom ); }
		if (HX_FIELD_EQ(inName,"set_fov_type") ) { return hx::Val( set_fov_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"refresh_pos_") ) { return hx::Val( refresh_pos_ ); }
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return hx::Val( get_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_viewport") ) { return hx::Val( get_viewport_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_viewport") ) { return hx::Val( set_viewport_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"_pos_changed") ) { return hx::Val( _pos_changed_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"look_at_dirty") ) { return hx::Val( look_at_dirty ); }
		if (HX_FIELD_EQ(inName,"set_ortho_top") ) { return hx::Val( set_ortho_top_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cull_backfaces") ) { return hx::Val( cull_backfaces ); }
		if (HX_FIELD_EQ(inName,"look_at_matrix") ) { return hx::Val( look_at_matrix ); }
		if (HX_FIELD_EQ(inName,"update_look_at") ) { return hx::Val( update_look_at_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_ortho_left") ) { return hx::Val( set_ortho_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"_merge_options") ) { return hx::Val( _merge_options_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"transform_dirty") ) { return hx::Val( transform_dirty ); }
		if (HX_FIELD_EQ(inName,"set_perspective") ) { return hx::Val( set_perspective_dyn() ); }
		if (HX_FIELD_EQ(inName,"update_matrices") ) { return hx::Val( update_matrices_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_ortho_right") ) { return hx::Val( set_ortho_right_dyn() ); }
		if (HX_FIELD_EQ(inName,"_center_changed") ) { return hx::Val( _center_changed_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"view_inverse_arr") ) { return hx::Val( view_inverse_arr ); }
		if (HX_FIELD_EQ(inName,"projection_dirty") ) { return hx::Val( projection_dirty ); }
		if (HX_FIELD_EQ(inName,"set_ortho_bottom") ) { return hx::Val( set_ortho_bottom_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"projection_matrix") ) { return hx::Val( projection_matrix ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"update_view_matrix") ) { return hx::Val( update_view_matrix_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"view_matrix_inverse") ) { return hx::Val( view_matrix_inverse ); }
		if (HX_FIELD_EQ(inName,"screen_point_to_ray") ) { return hx::Val( screen_point_to_ray_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"on_transform_cleaned") ) { return hx::Val( on_transform_cleaned_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"screen_point_to_world") ) { return hx::Val( screen_point_to_world_dyn() ); }
		if (HX_FIELD_EQ(inName,"world_point_to_screen") ) { return hx::Val( world_point_to_screen_dyn() ); }
		if (HX_FIELD_EQ(inName,"ortho_screen_to_world") ) { return hx::Val( ortho_screen_to_world_dyn() ); }
		if (HX_FIELD_EQ(inName,"ortho_world_to_screen") ) { return hx::Val( ortho_world_to_screen_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"default_camera_options") ) { return hx::Val( default_camera_options_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"update_projection_matrix") ) { return hx::Val( update_projection_matrix_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"apply_default_camera_options") ) { return hx::Val( apply_default_camera_options_dyn() ); }
		if (HX_FIELD_EQ(inName,"persepective_world_to_screen") ) { return hx::Val( persepective_world_to_screen_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Camera_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"far") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_far(inValue.Cast< Float >()) );_hx_far=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fov") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fov(inValue.Cast< Float >()) );fov=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pos") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pos(inValue.Cast<  ::phoenix::Vector >()) );pos=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"up_") ) { up_=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_zoom(inValue.Cast< Float >()) );zoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"near") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_near(inValue.Cast< Float >()) );_hx_near=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scale(inValue.Cast<  ::phoenix::Vector >()) ); }
		if (HX_FIELD_EQ(inName,"fov_y") ) { fov_y=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"center") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_center(inValue.Cast<  ::phoenix::Vector >()) );center=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aspect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_aspect(inValue.Cast< Float >()) );aspect=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"target") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_target(inValue.Cast<  ::phoenix::Vector >()) );target=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"setup_") ) { setup_=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"viewport") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_viewport(inValue.Cast<  ::phoenix::Rectangle >()) );viewport=inValue.Cast<  ::phoenix::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fov_type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fov_type(inValue.Cast<  ::phoenix::FOVType >()) );fov_type=inValue.Cast<  ::phoenix::FOVType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation(inValue.Cast<  ::phoenix::Quaternion >()) ); }
		if (HX_FIELD_EQ(inName,"proj_arr") ) { proj_arr=inValue.Cast<  ::snow::api::buffers::ArrayBufferView >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { transform=inValue.Cast<  ::phoenix::Transform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ortho_top") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_ortho_top(inValue.Cast<  ::Dynamic >()) );ortho_top=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"depth_test") ) { depth_test=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"projection") ) { projection=inValue.Cast<  ::phoenix::ProjectionType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ortho_left") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_ortho_left(inValue.Cast<  ::Dynamic >()) );ortho_left=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"view_matrix") ) { view_matrix=inValue.Cast<  ::phoenix::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ortho_right") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_ortho_right(inValue.Cast<  ::Dynamic >()) );ortho_right=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"minimum_zoom") ) { minimum_zoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ortho_bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_ortho_bottom(inValue.Cast<  ::Dynamic >()) );ortho_bottom=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"refresh_pos_") ) { refresh_pos_=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"look_at_dirty") ) { look_at_dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cull_backfaces") ) { cull_backfaces=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"look_at_matrix") ) { look_at_matrix=inValue.Cast<  ::phoenix::Matrix >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"transform_dirty") ) { transform_dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"view_inverse_arr") ) { view_inverse_arr=inValue.Cast<  ::snow::api::buffers::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"projection_dirty") ) { projection_dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"projection_matrix") ) { projection_matrix=inValue.Cast<  ::phoenix::Matrix >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"view_matrix_inverse") ) { view_matrix_inverse=inValue.Cast<  ::phoenix::Matrix >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Camera_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("viewport","\x66","\x4c","\xa5","\x9c"));
	outFields->push(HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"));
	outFields->push(HX_HCSTRING("zoom","\x13","\xa3","\xf8","\x50"));
	outFields->push(HX_HCSTRING("near","\xe8","\x70","\x02","\x49"));
	outFields->push(HX_HCSTRING("far","\xd7","\xba","\x4d","\x00"));
	outFields->push(HX_HCSTRING("fov","\x0d","\xc7","\x4d","\x00"));
	outFields->push(HX_HCSTRING("fov_type","\x6c","\x98","\x1e","\x00"));
	outFields->push(HX_HCSTRING("aspect","\xd8","\x95","\x07","\x4a"));
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"));
	outFields->push(HX_HCSTRING("cull_backfaces","\xa2","\xe1","\x06","\xe5"));
	outFields->push(HX_HCSTRING("depth_test","\x4e","\x68","\x49","\xc9"));
	outFields->push(HX_HCSTRING("minimum_zoom","\x64","\x2e","\x79","\xf3"));
	outFields->push(HX_HCSTRING("projection_matrix","\x31","\x7f","\xe2","\x9c"));
	outFields->push(HX_HCSTRING("view_matrix","\x1b","\x5c","\x01","\x3f"));
	outFields->push(HX_HCSTRING("view_matrix_inverse","\x4c","\x14","\xdd","\x20"));
	outFields->push(HX_HCSTRING("look_at_matrix","\x2d","\x36","\xc3","\x1c"));
	outFields->push(HX_HCSTRING("projection","\x8f","\x88","\x8b","\xc4"));
	outFields->push(HX_HCSTRING("ortho_left","\xae","\xe1","\xbc","\x7b"));
	outFields->push(HX_HCSTRING("ortho_right","\x55","\xa4","\x95","\x40"));
	outFields->push(HX_HCSTRING("ortho_top","\xce","\xbe","\x98","\x84"));
	outFields->push(HX_HCSTRING("ortho_bottom","\x52","\xb8","\xac","\x59"));
	outFields->push(HX_HCSTRING("proj_arr","\x7f","\x9d","\xcc","\x33"));
	outFields->push(HX_HCSTRING("view_inverse_arr","\xf8","\x8a","\xdb","\xb9"));
	outFields->push(HX_HCSTRING("fov_y","\x87","\xb7","\x97","\x04"));
	outFields->push(HX_HCSTRING("transform_dirty","\xbf","\x9d","\x78","\xdc"));
	outFields->push(HX_HCSTRING("projection_dirty","\x22","\x75","\x16","\xb6"));
	outFields->push(HX_HCSTRING("look_at_dirty","\xa6","\xb1","\xea","\xcf"));
	outFields->push(HX_HCSTRING("setup_","\x42","\xff","\x88","\x6f"));
	outFields->push(HX_HCSTRING("up_","\xa4","\x29","\x59","\x00"));
	outFields->push(HX_HCSTRING("refresh_pos_","\x6f","\x2c","\xc2","\x7d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Camera_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Camera_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*::phoenix::Rectangle*/ ,(int)offsetof(Camera_obj,viewport),HX_HCSTRING("viewport","\x66","\x4c","\xa5","\x9c")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Camera_obj,center),HX_HCSTRING("center","\xd5","\x25","\xdb","\x05")},
	{hx::fsFloat,(int)offsetof(Camera_obj,zoom),HX_HCSTRING("zoom","\x13","\xa3","\xf8","\x50")},
	{hx::fsFloat,(int)offsetof(Camera_obj,_hx_near),HX_HCSTRING("near","\xe8","\x70","\x02","\x49")},
	{hx::fsFloat,(int)offsetof(Camera_obj,_hx_far),HX_HCSTRING("far","\xd7","\xba","\x4d","\x00")},
	{hx::fsFloat,(int)offsetof(Camera_obj,fov),HX_HCSTRING("fov","\x0d","\xc7","\x4d","\x00")},
	{hx::fsObject /*::phoenix::FOVType*/ ,(int)offsetof(Camera_obj,fov_type),HX_HCSTRING("fov_type","\x6c","\x98","\x1e","\x00")},
	{hx::fsFloat,(int)offsetof(Camera_obj,aspect),HX_HCSTRING("aspect","\xd8","\x95","\x07","\x4a")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Camera_obj,target),HX_HCSTRING("target","\x51","\xf3","\xec","\x86")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Camera_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{hx::fsObject /*::phoenix::Transform*/ ,(int)offsetof(Camera_obj,transform),HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45")},
	{hx::fsBool,(int)offsetof(Camera_obj,cull_backfaces),HX_HCSTRING("cull_backfaces","\xa2","\xe1","\x06","\xe5")},
	{hx::fsBool,(int)offsetof(Camera_obj,depth_test),HX_HCSTRING("depth_test","\x4e","\x68","\x49","\xc9")},
	{hx::fsFloat,(int)offsetof(Camera_obj,minimum_zoom),HX_HCSTRING("minimum_zoom","\x64","\x2e","\x79","\xf3")},
	{hx::fsObject /*::phoenix::Matrix*/ ,(int)offsetof(Camera_obj,projection_matrix),HX_HCSTRING("projection_matrix","\x31","\x7f","\xe2","\x9c")},
	{hx::fsObject /*::phoenix::Matrix*/ ,(int)offsetof(Camera_obj,view_matrix),HX_HCSTRING("view_matrix","\x1b","\x5c","\x01","\x3f")},
	{hx::fsObject /*::phoenix::Matrix*/ ,(int)offsetof(Camera_obj,view_matrix_inverse),HX_HCSTRING("view_matrix_inverse","\x4c","\x14","\xdd","\x20")},
	{hx::fsObject /*::phoenix::Matrix*/ ,(int)offsetof(Camera_obj,look_at_matrix),HX_HCSTRING("look_at_matrix","\x2d","\x36","\xc3","\x1c")},
	{hx::fsObject /*::phoenix::ProjectionType*/ ,(int)offsetof(Camera_obj,projection),HX_HCSTRING("projection","\x8f","\x88","\x8b","\xc4")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Camera_obj,ortho_left),HX_HCSTRING("ortho_left","\xae","\xe1","\xbc","\x7b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Camera_obj,ortho_right),HX_HCSTRING("ortho_right","\x55","\xa4","\x95","\x40")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Camera_obj,ortho_top),HX_HCSTRING("ortho_top","\xce","\xbe","\x98","\x84")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Camera_obj,ortho_bottom),HX_HCSTRING("ortho_bottom","\x52","\xb8","\xac","\x59")},
	{hx::fsObject /*::snow::api::buffers::ArrayBufferView*/ ,(int)offsetof(Camera_obj,proj_arr),HX_HCSTRING("proj_arr","\x7f","\x9d","\xcc","\x33")},
	{hx::fsObject /*::snow::api::buffers::ArrayBufferView*/ ,(int)offsetof(Camera_obj,view_inverse_arr),HX_HCSTRING("view_inverse_arr","\xf8","\x8a","\xdb","\xb9")},
	{hx::fsFloat,(int)offsetof(Camera_obj,fov_y),HX_HCSTRING("fov_y","\x87","\xb7","\x97","\x04")},
	{hx::fsBool,(int)offsetof(Camera_obj,transform_dirty),HX_HCSTRING("transform_dirty","\xbf","\x9d","\x78","\xdc")},
	{hx::fsBool,(int)offsetof(Camera_obj,projection_dirty),HX_HCSTRING("projection_dirty","\x22","\x75","\x16","\xb6")},
	{hx::fsBool,(int)offsetof(Camera_obj,look_at_dirty),HX_HCSTRING("look_at_dirty","\xa6","\xb1","\xea","\xcf")},
	{hx::fsBool,(int)offsetof(Camera_obj,setup_),HX_HCSTRING("setup_","\x42","\xff","\x88","\x6f")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Camera_obj,up_),HX_HCSTRING("up_","\xa4","\x29","\x59","\x00")},
	{hx::fsBool,(int)offsetof(Camera_obj,refresh_pos_),HX_HCSTRING("refresh_pos_","\x6f","\x2c","\xc2","\x7d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Camera_obj_sStaticStorageInfo = 0;
#endif

static ::String Camera_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("viewport","\x66","\x4c","\xa5","\x9c"),
	HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"),
	HX_HCSTRING("zoom","\x13","\xa3","\xf8","\x50"),
	HX_HCSTRING("near","\xe8","\x70","\x02","\x49"),
	HX_HCSTRING("far","\xd7","\xba","\x4d","\x00"),
	HX_HCSTRING("fov","\x0d","\xc7","\x4d","\x00"),
	HX_HCSTRING("fov_type","\x6c","\x98","\x1e","\x00"),
	HX_HCSTRING("aspect","\xd8","\x95","\x07","\x4a"),
	HX_HCSTRING("target","\x51","\xf3","\xec","\x86"),
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("cull_backfaces","\xa2","\xe1","\x06","\xe5"),
	HX_HCSTRING("depth_test","\x4e","\x68","\x49","\xc9"),
	HX_HCSTRING("minimum_zoom","\x64","\x2e","\x79","\xf3"),
	HX_HCSTRING("projection_matrix","\x31","\x7f","\xe2","\x9c"),
	HX_HCSTRING("view_matrix","\x1b","\x5c","\x01","\x3f"),
	HX_HCSTRING("view_matrix_inverse","\x4c","\x14","\xdd","\x20"),
	HX_HCSTRING("look_at_matrix","\x2d","\x36","\xc3","\x1c"),
	HX_HCSTRING("projection","\x8f","\x88","\x8b","\xc4"),
	HX_HCSTRING("ortho_left","\xae","\xe1","\xbc","\x7b"),
	HX_HCSTRING("ortho_right","\x55","\xa4","\x95","\x40"),
	HX_HCSTRING("ortho_top","\xce","\xbe","\x98","\x84"),
	HX_HCSTRING("ortho_bottom","\x52","\xb8","\xac","\x59"),
	HX_HCSTRING("proj_arr","\x7f","\x9d","\xcc","\x33"),
	HX_HCSTRING("view_inverse_arr","\xf8","\x8a","\xdb","\xb9"),
	HX_HCSTRING("fov_y","\x87","\xb7","\x97","\x04"),
	HX_HCSTRING("transform_dirty","\xbf","\x9d","\x78","\xdc"),
	HX_HCSTRING("projection_dirty","\x22","\x75","\x16","\xb6"),
	HX_HCSTRING("look_at_dirty","\xa6","\xb1","\xea","\xcf"),
	HX_HCSTRING("setup_","\x42","\xff","\x88","\x6f"),
	HX_HCSTRING("set_ortho","\x9b","\x5f","\x27","\x5c"),
	HX_HCSTRING("set_perspective","\x1f","\x1a","\x9f","\x7d"),
	HX_HCSTRING("project","\xd9","\x12","\xeb","\xf5"),
	HX_HCSTRING("unproject","\xa0","\x19","\xed","\xf1"),
	HX_HCSTRING("screen_point_to_ray","\x28","\x85","\x13","\xa2"),
	HX_HCSTRING("screen_point_to_world","\x10","\x11","\x1a","\xdc"),
	HX_HCSTRING("world_point_to_screen","\xd4","\x2d","\x5d","\xdc"),
	HX_HCSTRING("process","\x6f","\xa2","\x4a","\xf1"),
	HX_HCSTRING("update_matrices","\xd0","\x59","\x31","\x5c"),
	HX_HCSTRING("on_transform_cleaned","\xb5","\x8a","\x32","\x47"),
	HX_HCSTRING("up_","\xa4","\x29","\x59","\x00"),
	HX_HCSTRING("update_look_at","\x9d","\x5a","\x58","\xb2"),
	HX_HCSTRING("update_view_matrix","\xa5","\xf9","\x05","\x55"),
	HX_HCSTRING("update_projection_matrix","\x3b","\xe0","\x4c","\x22"),
	HX_HCSTRING("apply_state","\x40","\x09","\x59","\x87"),
	HX_HCSTRING("apply_default_camera_options","\x73","\xd9","\x25","\x9d"),
	HX_HCSTRING("default_camera_options","\x82","\xf1","\x8f","\x64"),
	HX_HCSTRING("ortho_screen_to_world","\x7a","\x49","\xda","\x49"),
	HX_HCSTRING("ortho_world_to_screen","\x3c","\x93","\x74","\xd8"),
	HX_HCSTRING("persepective_world_to_screen","\xe7","\x42","\x61","\xf8"),
	HX_HCSTRING("set_target","\x8e","\x01","\xf2","\x7a"),
	HX_HCSTRING("set_fov","\xb0","\x20","\xc4","\x19"),
	HX_HCSTRING("set_fov_type","\xe9","\x6f","\x31","\xca"),
	HX_HCSTRING("set_aspect","\x15","\xa4","\x0c","\x3e"),
	HX_HCSTRING("set_near","\xe5","\x85","\x1a","\x77"),
	HX_HCSTRING("set_far","\x7a","\x14","\xc4","\x19"),
	HX_HCSTRING("set_ortho_left","\x6b","\x52","\xd2","\x11"),
	HX_HCSTRING("set_ortho_right","\xf8","\xd8","\x42","\xfd"),
	HX_HCSTRING("set_ortho_top","\xb1","\x74","\x02","\x8b"),
	HX_HCSTRING("set_ortho_bottom","\x4f","\x92","\x8d","\xb4"),
	HX_HCSTRING("set_zoom","\x10","\xb8","\x10","\x7f"),
	HX_HCSTRING("refresh_pos_","\x6f","\x2c","\xc2","\x7d"),
	HX_HCSTRING("set_center","\x12","\x34","\xe0","\xf9"),
	HX_HCSTRING("get_center","\x9e","\x95","\x62","\xf6"),
	HX_HCSTRING("get_pos","\x2b","\x26","\xca","\x26"),
	HX_HCSTRING("get_rotation","\x47","\xf1","\x9f","\xbd"),
	HX_HCSTRING("get_scale","\xe1","\x2a","\x78","\xbc"),
	HX_HCSTRING("get_viewport","\x6f","\x00","\xbf","\x51"),
	HX_HCSTRING("set_viewport","\xe3","\x23","\xb8","\x66"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("set_scale","\xed","\x16","\xc9","\x9f"),
	HX_HCSTRING("set_pos","\x37","\xb7","\xcb","\x19"),
	HX_HCSTRING("_merge_options","\xd8","\x97","\xc4","\xf5"),
	HX_HCSTRING("_pos_changed","\x0a","\xca","\x99","\xf0"),
	HX_HCSTRING("_center_changed","\xe9","\xd5","\xc9","\x8f"),
	::String(null()) };

static void Camera_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Camera_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Camera_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Camera_obj::__mClass,"__mClass");
};

#endif

hx::Class Camera_obj::__mClass;

void Camera_obj::__register()
{
	hx::Object *dummy = new Camera_obj;
	Camera_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.Camera","\xc4","\x71","\x6d","\x35");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Camera_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Camera_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Camera_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Camera_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Camera_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Camera_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
