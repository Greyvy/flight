// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_luxe_tween_Actuate
#include <luxe/tween/Actuate.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_IGenericActuator
#include <luxe/tween/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_ColorHSL
#include <phoenix/ColorHSL.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b81f3e3b827dc6aa_281_new,"phoenix.ColorHSL","new",0xdf8aadaf,"phoenix.ColorHSL.new","phoenix/Color.hx",281,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_b81f3e3b827dc6aa_287_set_h,"phoenix.ColorHSL","set_h",0xbad3aa5a,"phoenix.ColorHSL.set_h","phoenix/Color.hx",287,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_b81f3e3b827dc6aa_292_set_s,"phoenix.ColorHSL","set_s",0xbad3aa65,"phoenix.ColorHSL.set_s","phoenix/Color.hx",292,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_b81f3e3b827dc6aa_297_set_l,"phoenix.ColorHSL","set_l",0xbad3aa5e,"phoenix.ColorHSL.set_l","phoenix/Color.hx",297,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_b81f3e3b827dc6aa_318_set,"phoenix.ColorHSL","set",0xdf8e78f1,"phoenix.ColorHSL.set","phoenix/Color.hx",318,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_b81f3e3b827dc6aa_342_tween,"phoenix.ColorHSL","tween",0x5a14b97a,"phoenix.ColorHSL.tween","phoenix/Color.hx",342,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_b81f3e3b827dc6aa_394__refresh,"phoenix.ColorHSL","_refresh",0xd8d2b7ad,"phoenix.ColorHSL._refresh","phoenix/Color.hx",394,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_b81f3e3b827dc6aa_404_clone,"phoenix.ColorHSL","clone",0x8907226c,"phoenix.ColorHSL.clone","phoenix/Color.hx",404,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_b81f3e3b827dc6aa_408_toColor,"phoenix.ColorHSL","toColor",0xd3f1eeb7,"phoenix.ColorHSL.toColor","phoenix/Color.hx",408,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_b81f3e3b827dc6aa_411_fromColor,"phoenix.ColorHSL","fromColor",0x073f9e28,"phoenix.ColorHSL.fromColor","phoenix/Color.hx",411,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_b81f3e3b827dc6aa_449_toString,"phoenix.ColorHSL","toString",0xea6854fd,"phoenix.ColorHSL.toString","phoenix/Color.hx",449,0xf59e6b1b)
namespace phoenix{

void ColorHSL_obj::__construct(hx::Null< Float >  __o__h,hx::Null< Float >  __o__s,hx::Null< Float >  __o__l,hx::Null< Float >  __o__a){
Float _h = __o__h.Default(((Float)0.0));
Float _s = __o__s.Default(((Float)1.0));
Float _l = __o__l.Default(((Float)1.0));
Float _a = __o__a.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_b81f3e3b827dc6aa_281_new)
HXLINE( 285)		this->l = ((Float)1.0);
HXLINE( 284)		this->s = ((Float)1.0);
HXLINE( 283)		this->h = ((Float)0.0);
HXLINE( 305)		super::__construct(null(),null(),null(),null());
HXLINE( 307)		this->is_hsl = true;
HXLINE( 309)		this->set_h(_h);
HXLINE( 310)		this->set_s(_s);
HXLINE( 311)		this->set_l(_l);
HXLINE( 312)		this->a = _a;
HXLINE( 314)		this->_refresh();
            	}

Dynamic ColorHSL_obj::__CreateEmpty() { return new ColorHSL_obj; }

void *ColorHSL_obj::_hx_vtable = 0;

Dynamic ColorHSL_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ColorHSL_obj > _hx_result = new ColorHSL_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool ColorHSL_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x13716ec5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x13716ec5;
	} else {
		return inClassId==(int)0x4a8b16d4;
	}
}

Float ColorHSL_obj::set_h(Float _h){
            	HX_STACKFRAME(&_hx_pos_b81f3e3b827dc6aa_287_set_h)
HXLINE( 288)		this->h = _h;
HXLINE( 289)		this->_refresh();
HXLINE( 290)		return _h;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorHSL_obj,set_h,return )

Float ColorHSL_obj::set_s(Float _s){
            	HX_STACKFRAME(&_hx_pos_b81f3e3b827dc6aa_292_set_s)
HXLINE( 293)		this->s = _s;
HXLINE( 294)		this->_refresh();
HXLINE( 295)		return _s;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorHSL_obj,set_s,return )

Float ColorHSL_obj::set_l(Float _l){
            	HX_STACKFRAME(&_hx_pos_b81f3e3b827dc6aa_297_set_l)
HXLINE( 298)		this->l = _l;
HXLINE( 299)		this->_refresh();
HXLINE( 300)		return _l;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorHSL_obj,set_l,return )

 ::phoenix::Color ColorHSL_obj::set( ::Dynamic _h, ::Dynamic _s, ::Dynamic _l, ::Dynamic _a){
            	HX_STACKFRAME(&_hx_pos_b81f3e3b827dc6aa_318_set)
HXLINE( 320)		Float _seth = this->h;
HXLINE( 321)		Float _sets = this->s;
HXLINE( 322)		Float _setl = this->l;
HXLINE( 323)		Float _seta = this->a;
HXLINE( 326)		if (hx::IsNotNull( _h )) {
HXLINE( 326)			_seth = _h;
            		}
HXLINE( 327)		if (hx::IsNotNull( _s )) {
HXLINE( 327)			_sets = _s;
            		}
HXLINE( 328)		if (hx::IsNotNull( _l )) {
HXLINE( 328)			_setl = _l;
            		}
HXLINE( 329)		if (hx::IsNotNull( _a )) {
HXLINE( 329)			_seta = _a;
            		}
HXLINE( 331)		this->set_h(_seth);
HXLINE( 332)		this->set_s(_sets);
HXLINE( 333)		this->set_l(_setl);
HXLINE( 334)		this->a = _seta;
HXLINE( 336)		this->_refresh();
HXLINE( 338)		return hx::ObjectPtr<OBJ_>(this);
            	}


::Dynamic ColorHSL_obj::tween( ::Dynamic __o__time_in_seconds, ::Dynamic _dest,hx::Null< bool >  __o__override){
 ::Dynamic _time_in_seconds = __o__time_in_seconds.Default(((Float)0.5));
bool _override = __o__override.Default(true);
            	HX_STACKFRAME(&_hx_pos_b81f3e3b827dc6aa_342_tween)
HXLINE( 344)		this->super::tween(_time_in_seconds,_dest,_override);
HXLINE( 346)		if (hx::IsNotNull( _dest )) {
HXLINE( 348)			Float _dest_h = this->h;
HXLINE( 349)			Float _dest_s = this->s;
HXLINE( 350)			Float _dest_l = this->l;
HXLINE( 351)			Float _dest_a = this->a;
HXLINE( 353)			bool _change_h = false;
HXLINE( 354)			bool _change_s = false;
HXLINE( 355)			bool _change_l = false;
HXLINE( 356)			bool _change_a = false;
HXLINE( 358)			if (::Std_obj::is(_dest,hx::ClassOf< ::phoenix::ColorHSL >())) {
HXLINE( 360)				_dest_h = ( (Float)(_dest->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) );
HXLINE( 361)				_dest_s = ( (Float)(_dest->__Field(HX_("s",73,00,00,00),hx::paccDynamic)) );
HXLINE( 362)				_dest_l = ( (Float)(_dest->__Field(HX_("l",6c,00,00,00),hx::paccDynamic)) );
HXLINE( 363)				_dest_a = ( (Float)(_dest->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) );
HXLINE( 365)				_change_h = true;
HXLINE( 366)				_change_s = true;
HXLINE( 367)				_change_l = true;
HXLINE( 368)				_change_a = true;
            			}
            			else {
HXLINE( 372)				if (hx::IsNotNull( _dest->__Field(HX_("h",68,00,00,00),hx::paccDynamic) )) {
HXLINE( 372)					_dest_h = ( (Float)(_dest->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) );
HXDLIN( 372)					_change_h = true;
            				}
HXLINE( 373)				if (hx::IsNotNull( _dest->__Field(HX_("s",73,00,00,00),hx::paccDynamic) )) {
HXLINE( 373)					_dest_s = ( (Float)(_dest->__Field(HX_("s",73,00,00,00),hx::paccDynamic)) );
HXDLIN( 373)					_change_s = true;
            				}
HXLINE( 374)				if (hx::IsNotNull( _dest->__Field(HX_("l",6c,00,00,00),hx::paccDynamic) )) {
HXLINE( 374)					_dest_l = ( (Float)(_dest->__Field(HX_("l",6c,00,00,00),hx::paccDynamic)) );
HXDLIN( 374)					_change_l = true;
            				}
HXLINE( 375)				if (hx::IsNotNull( _dest->__Field(HX_("a",61,00,00,00),hx::paccDynamic) )) {
HXLINE( 375)					_dest_a = ( (Float)(_dest->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) );
HXDLIN( 375)					_change_a = true;
            				}
            			}
HXLINE( 379)			 ::Dynamic _properties =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 381)			if (_change_h) {
HXLINE( 381)				_properties->__SetField(HX_("h",68,00,00,00),_dest_h,hx::paccDynamic);
            			}
HXLINE( 382)			if (_change_s) {
HXLINE( 382)				_properties->__SetField(HX_("s",73,00,00,00),_dest_s,hx::paccDynamic);
            			}
HXLINE( 383)			if (_change_l) {
HXLINE( 383)				_properties->__SetField(HX_("l",6c,00,00,00),_dest_l,hx::paccDynamic);
            			}
HXLINE( 384)			if (_change_a) {
HXLINE( 384)				_properties->__SetField(HX_("a",61,00,00,00),_dest_a,hx::paccDynamic);
            			}
HXLINE( 386)			return ::luxe::tween::Actuate_obj::tween(hx::ObjectPtr<OBJ_>(this),_time_in_seconds,_properties,_override,null());
            		}
            		else {
HXLINE( 389)			HX_STACK_DO_THROW(HX_(" Warning: Color.tween passed a null destination ",3e,4f,7a,3d));
            		}
HXLINE( 346)		return null();
            	}


 ::phoenix::ColorHSL ColorHSL_obj::_refresh(){
            	HX_STACKFRAME(&_hx_pos_b81f3e3b827dc6aa_394__refresh)
HXLINE( 396)		this->refreshing = true;
HXLINE( 397)		this->super::fromColorHSL(hx::ObjectPtr<OBJ_>(this));
HXLINE( 398)		this->refreshing = false;
HXLINE( 400)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorHSL_obj,_refresh,return )

 ::phoenix::Color ColorHSL_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_b81f3e3b827dc6aa_404_clone)
HXDLIN( 404)		return  ::phoenix::ColorHSL_obj::__alloc( HX_CTX ,this->h,this->s,this->l,this->a);
            	}


 ::phoenix::Color ColorHSL_obj::toColor(){
            	HX_STACKFRAME(&_hx_pos_b81f3e3b827dc6aa_408_toColor)
HXDLIN( 408)		return ( ( ::phoenix::Color)(this->_refresh()) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorHSL_obj,toColor,return )

 ::phoenix::ColorHSL ColorHSL_obj::fromColor( ::phoenix::Color _color){
            	HX_STACKFRAME(&_hx_pos_b81f3e3b827dc6aa_411_fromColor)
HXLINE( 413)		Float max = _color->maxRGB();
HXLINE( 414)		Float min = _color->minRGB();
HXLINE( 415)		Float add = (max + min);
HXLINE( 416)		Float sub = (max - min);
HXLINE( 418)		Float _h = (int)0;
HXLINE( 419)		if ((max == min)) {
HXLINE( 420)			_h = (int)0;
            		}
            		else {
HXLINE( 421)			if ((max == _color->r)) {
HXLINE( 422)				_h = hx::Mod((((Float)((int)60 * (_color->g - _color->b)) / (Float)sub) + (int)360),(int)360);
            			}
            			else {
HXLINE( 423)				if ((max == _color->g)) {
HXLINE( 424)					_h = (((Float)((int)60 * (_color->b - _color->r)) / (Float)sub) + (int)120);
            				}
            				else {
HXLINE( 425)					if ((max == _color->b)) {
HXLINE( 426)						_h = (((Float)((int)60 * (_color->r - _color->g)) / (Float)sub) + (int)240);
            					}
            				}
            			}
            		}
HXLINE( 429)		Float _l = ((Float)add / (Float)(int)2);
HXLINE( 431)		Float _s;
HXDLIN( 431)		if ((max == min)) {
HXLINE( 431)			_s = (int)0;
            		}
            		else {
HXLINE( 433)			if ((this->l <= ((Float)0.5))) {
HXLINE( 431)				_s = ((Float)sub / (Float)add);
            			}
            			else {
HXLINE( 431)				_s = ((Float)sub / (Float)((int)2 - add));
            			}
            		}
HXLINE( 439)		this->set_h(_h);
HXLINE( 440)		this->set_s(_s);
HXLINE( 441)		this->set_l(_l);
HXLINE( 442)		this->a = _color->a;
HXLINE( 444)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorHSL_obj,fromColor,return )

::String ColorHSL_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_b81f3e3b827dc6aa_449_toString)
HXDLIN( 449)		return ((((((((HX_("{ h:",57,e1,65,51) + this->h) + HX_(" , s:",fb,9f,00,8a)) + this->s) + HX_(" , l:",e2,99,00,8a)) + this->l) + HX_(" , a:",4d,90,00,8a)) + this->a) + HX_(" }",5d,1c,00,00));
            	}



hx::ObjectPtr< ColorHSL_obj > ColorHSL_obj::__new(hx::Null< Float >  __o__h,hx::Null< Float >  __o__s,hx::Null< Float >  __o__l,hx::Null< Float >  __o__a) {
	hx::ObjectPtr< ColorHSL_obj > __this = new ColorHSL_obj();
	__this->__construct(__o__h,__o__s,__o__l,__o__a);
	return __this;
}

hx::ObjectPtr< ColorHSL_obj > ColorHSL_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o__h,hx::Null< Float >  __o__s,hx::Null< Float >  __o__l,hx::Null< Float >  __o__a) {
	ColorHSL_obj *__this = (ColorHSL_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ColorHSL_obj), false, "phoenix.ColorHSL"));
	*(void **)__this = ColorHSL_obj::_hx_vtable;
	__this->__construct(__o__h,__o__s,__o__l,__o__a);
	return __this;
}

ColorHSL_obj::ColorHSL_obj()
{
}

hx::Val ColorHSL_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"h") ) { return hx::Val( h ); }
		if (HX_FIELD_EQ(inName,"s") ) { return hx::Val( s ); }
		if (HX_FIELD_EQ(inName,"l") ) { return hx::Val( l ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"set_h") ) { return hx::Val( set_h_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_s") ) { return hx::Val( set_s_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_l") ) { return hx::Val( set_l_dyn() ); }
		if (HX_FIELD_EQ(inName,"tween") ) { return hx::Val( tween_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toColor") ) { return hx::Val( toColor_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_refresh") ) { return hx::Val( _refresh_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromColor") ) { return hx::Val( fromColor_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ColorHSL_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"h") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_h(inValue.Cast< Float >()) );h=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"s") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_s(inValue.Cast< Float >()) );s=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"l") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_l(inValue.Cast< Float >()) );l=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ColorHSL_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("h","\x68","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("s","\x73","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("l","\x6c","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ColorHSL_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(ColorHSL_obj,h),HX_HCSTRING("h","\x68","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ColorHSL_obj,s),HX_HCSTRING("s","\x73","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ColorHSL_obj,l),HX_HCSTRING("l","\x6c","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ColorHSL_obj_sStaticStorageInfo = 0;
#endif

static ::String ColorHSL_obj_sMemberFields[] = {
	HX_HCSTRING("h","\x68","\x00","\x00","\x00"),
	HX_HCSTRING("s","\x73","\x00","\x00","\x00"),
	HX_HCSTRING("l","\x6c","\x00","\x00","\x00"),
	HX_HCSTRING("set_h","\x4b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_s","\x56","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_l","\x4f","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("tween","\x6b","\xaa","\x70","\x19"),
	HX_HCSTRING("_refresh","\x5c","\x33","\xd9","\x26"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("toColor","\xe8","\xbd","\xe0","\x16"),
	HX_HCSTRING("fromColor","\x99","\x5b","\xe5","\xfe"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void ColorHSL_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColorHSL_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColorHSL_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColorHSL_obj::__mClass,"__mClass");
};

#endif

hx::Class ColorHSL_obj::__mClass;

void ColorHSL_obj::__register()
{
	hx::Object *dummy = new ColorHSL_obj;
	ColorHSL_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.ColorHSL","\x3d","\xaa","\xc0","\x22");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ColorHSL_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ColorHSL_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ColorHSL_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColorHSL_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorHSL_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorHSL_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
