// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_58d6ceff44b128cb_6_new,"phoenix.Vector","new",0x8c9315d4,"phoenix.Vector.new","phoenix/Vector.hx",6,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_58d6ceff44b128cb_215_toString,"phoenix.Vector","toString",0xe91b46b8,"phoenix.Vector.toString","phoenix/Vector.hx",215,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_58d6ceff44b128cb_541_set_x,"phoenix.Vector","set_x",0x08e225cf,"phoenix.Vector.set_x","phoenix/Vector.hx",541,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_58d6ceff44b128cb_554_set_y,"phoenix.Vector","set_y",0x08e225d0,"phoenix.Vector.set_y","phoenix/Vector.hx",554,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_58d6ceff44b128cb_567_set_z,"phoenix.Vector","set_z",0x08e225d1,"phoenix.Vector.set_z","phoenix/Vector.hx",567,0x5d0bf7fb)
HX_LOCAL_STACK_FRAME(_hx_pos_58d6ceff44b128cb_590_set_angle2D,"phoenix.Vector","set_angle2D",0xed308afc,"phoenix.Vector.set_angle2D","phoenix/Vector.hx",590,0x5d0bf7fb)
namespace phoenix{

void Vector_obj::__construct(hx::Null< Float >  __o__x,hx::Null< Float >  __o__y,hx::Null< Float >  __o__z,hx::Null< Float >  __o__w){
Float _x = __o__x.Default(0);
Float _y = __o__y.Default(0);
Float _z = __o__z.Default(0);
Float _w = __o__w.Default(0);
            	HX_STACKFRAME(&_hx_pos_58d6ceff44b128cb_6_new)
HXLINE(  25)		this->_construct = false;
HXLINE(  19)		this->ignore_listeners = false;
HXLINE(  11)		this->w = ((Float)0);
HXLINE(  10)		this->z = ((Float)0);
HXLINE(   9)		this->y = ((Float)0);
HXLINE(   8)		this->x = ((Float)0);
HXLINE(  29)		this->_construct = true;
HXLINE(  31)		{
HXLINE(  31)			this->x = _x;
HXDLIN(  31)			if (!(this->_construct)) {
HXLINE(  31)				bool _hx_tmp;
HXDLIN(  31)				if (hx::IsNotNull( this->listen_x )) {
HXLINE(  31)					_hx_tmp = !(this->ignore_listeners);
            				}
            				else {
HXLINE(  31)					_hx_tmp = false;
            				}
HXDLIN(  31)				if (_hx_tmp) {
HXLINE(  31)					this->listen_x(_x);
            				}
            			}
            		}
HXLINE(  32)		{
HXLINE(  32)			this->y = _y;
HXDLIN(  32)			if (!(this->_construct)) {
HXLINE(  32)				bool _hx_tmp1;
HXDLIN(  32)				if (hx::IsNotNull( this->listen_y )) {
HXLINE(  32)					_hx_tmp1 = !(this->ignore_listeners);
            				}
            				else {
HXLINE(  32)					_hx_tmp1 = false;
            				}
HXDLIN(  32)				if (_hx_tmp1) {
HXLINE(  32)					this->listen_y(_y);
            				}
            			}
            		}
HXLINE(  33)		{
HXLINE(  33)			this->z = _z;
HXDLIN(  33)			if (!(this->_construct)) {
HXLINE(  33)				bool _hx_tmp2;
HXDLIN(  33)				if (hx::IsNotNull( this->listen_z )) {
HXLINE(  33)					_hx_tmp2 = !(this->ignore_listeners);
            				}
            				else {
HXLINE(  33)					_hx_tmp2 = false;
            				}
HXDLIN(  33)				if (_hx_tmp2) {
HXLINE(  33)					this->listen_z(_z);
            				}
            			}
            		}
HXLINE(  34)		this->w = _w;
HXLINE(  36)		this->_construct = false;
            	}

Dynamic Vector_obj::__CreateEmpty() { return new Vector_obj; }

void *Vector_obj::_hx_vtable = 0;

Dynamic Vector_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vector_obj > _hx_result = new Vector_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Vector_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5d9fee6a;
}

::String Vector_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_58d6ceff44b128cb_215_toString)
HXDLIN( 215)		return ((((((HX_("{ x:",47,ef,65,51) + this->x) + HX_(", y:",15,15,2e,1d)) + this->y) + HX_(", z:",f4,15,2e,1d)) + this->z) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector_obj,toString,return )

Float Vector_obj::set_x(Float _x){
            	HX_STACKFRAME(&_hx_pos_58d6ceff44b128cb_541_set_x)
HXLINE( 543)		this->x = _x;
HXLINE( 545)		if (this->_construct) {
HXLINE( 545)			return this->x;
            		}
HXLINE( 547)		bool _hx_tmp;
HXDLIN( 547)		if (hx::IsNotNull( this->listen_x )) {
HXLINE( 547)			_hx_tmp = !(this->ignore_listeners);
            		}
            		else {
HXLINE( 547)			_hx_tmp = false;
            		}
HXDLIN( 547)		if (_hx_tmp) {
HXLINE( 547)			this->listen_x(_x);
            		}
HXLINE( 549)		return this->x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector_obj,set_x,return )

Float Vector_obj::set_y(Float _y){
            	HX_STACKFRAME(&_hx_pos_58d6ceff44b128cb_554_set_y)
HXLINE( 556)		this->y = _y;
HXLINE( 558)		if (this->_construct) {
HXLINE( 558)			return this->y;
            		}
HXLINE( 560)		bool _hx_tmp;
HXDLIN( 560)		if (hx::IsNotNull( this->listen_y )) {
HXLINE( 560)			_hx_tmp = !(this->ignore_listeners);
            		}
            		else {
HXLINE( 560)			_hx_tmp = false;
            		}
HXDLIN( 560)		if (_hx_tmp) {
HXLINE( 560)			this->listen_y(_y);
            		}
HXLINE( 562)		return this->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector_obj,set_y,return )

Float Vector_obj::set_z(Float _z){
            	HX_STACKFRAME(&_hx_pos_58d6ceff44b128cb_567_set_z)
HXLINE( 569)		this->z = _z;
HXLINE( 571)		if (this->_construct) {
HXLINE( 571)			return this->z;
            		}
HXLINE( 573)		bool _hx_tmp;
HXDLIN( 573)		if (hx::IsNotNull( this->listen_z )) {
HXLINE( 573)			_hx_tmp = !(this->ignore_listeners);
            		}
            		else {
HXLINE( 573)			_hx_tmp = false;
            		}
HXDLIN( 573)		if (_hx_tmp) {
HXLINE( 573)			this->listen_z(_z);
            		}
HXLINE( 575)		return this->z;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector_obj,set_z,return )

Float Vector_obj::set_angle2D(Float value){
            	HX_STACKFRAME(&_hx_pos_58d6ceff44b128cb_590_set_angle2D)
HXLINE( 592)		Float len = (this->x * this->x);
HXDLIN( 592)		Float len1 = (len + (this->y * this->y));
HXDLIN( 592)		Float len2 = ::Math_obj::sqrt((len1 + (this->z * this->z)));
HXLINE( 594)		{
HXLINE( 594)			Float _x = (::Math_obj::cos(value) * len2);
HXDLIN( 594)			Float _y = (::Math_obj::sin(value) * len2);
HXDLIN( 594)			bool prev = this->ignore_listeners;
HXDLIN( 594)			this->ignore_listeners = true;
HXDLIN( 594)			{
HXLINE( 594)				this->x = _x;
HXDLIN( 594)				if (!(this->_construct)) {
HXLINE( 594)					bool _hx_tmp;
HXDLIN( 594)					if (hx::IsNotNull( this->listen_x )) {
HXLINE( 594)						_hx_tmp = !(this->ignore_listeners);
            					}
            					else {
HXLINE( 594)						_hx_tmp = false;
            					}
HXDLIN( 594)					if (_hx_tmp) {
HXLINE( 594)						this->listen_x(_x);
            					}
            				}
            			}
HXDLIN( 594)			{
HXLINE( 594)				this->y = _y;
HXDLIN( 594)				if (!(this->_construct)) {
HXLINE( 594)					bool _hx_tmp1;
HXDLIN( 594)					if (hx::IsNotNull( this->listen_y )) {
HXLINE( 594)						_hx_tmp1 = !(this->ignore_listeners);
            					}
            					else {
HXLINE( 594)						_hx_tmp1 = false;
            					}
HXDLIN( 594)					if (_hx_tmp1) {
HXLINE( 594)						this->listen_y(_y);
            					}
            				}
            			}
HXDLIN( 594)			this->ignore_listeners = prev;
HXDLIN( 594)			bool _hx_tmp2;
HXDLIN( 594)			if (hx::IsNotNull( this->listen_x )) {
HXLINE( 594)				_hx_tmp2 = !(this->ignore_listeners);
            			}
            			else {
HXLINE( 594)				_hx_tmp2 = false;
            			}
HXDLIN( 594)			if (_hx_tmp2) {
HXLINE( 594)				this->listen_x(this->x);
            			}
HXDLIN( 594)			bool _hx_tmp3;
HXDLIN( 594)			if (hx::IsNotNull( this->listen_y )) {
HXLINE( 594)				_hx_tmp3 = !(this->ignore_listeners);
            			}
            			else {
HXLINE( 594)				_hx_tmp3 = false;
            			}
HXDLIN( 594)			if (_hx_tmp3) {
HXLINE( 594)				this->listen_y(this->y);
            			}
            		}
HXLINE( 596)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector_obj,set_angle2D,return )


hx::ObjectPtr< Vector_obj > Vector_obj::__new(hx::Null< Float >  __o__x,hx::Null< Float >  __o__y,hx::Null< Float >  __o__z,hx::Null< Float >  __o__w) {
	hx::ObjectPtr< Vector_obj > __this = new Vector_obj();
	__this->__construct(__o__x,__o__y,__o__z,__o__w);
	return __this;
}

hx::ObjectPtr< Vector_obj > Vector_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o__x,hx::Null< Float >  __o__y,hx::Null< Float >  __o__z,hx::Null< Float >  __o__w) {
	Vector_obj *__this = (Vector_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vector_obj), true, "phoenix.Vector"));
	*(void **)__this = Vector_obj::_hx_vtable;
	__this->__construct(__o__x,__o__y,__o__z,__o__w);
	return __this;
}

Vector_obj::Vector_obj()
{
}

void Vector_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Vector);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(z,"z");
	HX_MARK_MEMBER_NAME(w,"w");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(lengthsq,"lengthsq");
	HX_MARK_MEMBER_NAME(angle2D,"angle2D");
	HX_MARK_MEMBER_NAME(normalized,"normalized");
	HX_MARK_MEMBER_NAME(inverted,"inverted");
	HX_MARK_MEMBER_NAME(ignore_listeners,"ignore_listeners");
	HX_MARK_MEMBER_NAME(listen_x,"listen_x");
	HX_MARK_MEMBER_NAME(listen_y,"listen_y");
	HX_MARK_MEMBER_NAME(listen_z,"listen_z");
	HX_MARK_MEMBER_NAME(_construct,"_construct");
	HX_MARK_END_CLASS();
}

void Vector_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(z,"z");
	HX_VISIT_MEMBER_NAME(w,"w");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(lengthsq,"lengthsq");
	HX_VISIT_MEMBER_NAME(angle2D,"angle2D");
	HX_VISIT_MEMBER_NAME(normalized,"normalized");
	HX_VISIT_MEMBER_NAME(inverted,"inverted");
	HX_VISIT_MEMBER_NAME(ignore_listeners,"ignore_listeners");
	HX_VISIT_MEMBER_NAME(listen_x,"listen_x");
	HX_VISIT_MEMBER_NAME(listen_y,"listen_y");
	HX_VISIT_MEMBER_NAME(listen_z,"listen_z");
	HX_VISIT_MEMBER_NAME(_construct,"_construct");
}

hx::Val Vector_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z ); }
		if (HX_FIELD_EQ(inName,"w") ) { return hx::Val( w ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_z") ) { return hx::Val( set_z_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"angle2D") ) { return hx::Val( angle2D ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lengthsq") ) { return hx::Val( lengthsq ); }
		if (HX_FIELD_EQ(inName,"inverted") ) { return hx::Val( inverted ); }
		if (HX_FIELD_EQ(inName,"listen_x") ) { return hx::Val( listen_x ); }
		if (HX_FIELD_EQ(inName,"listen_y") ) { return hx::Val( listen_y ); }
		if (HX_FIELD_EQ(inName,"listen_z") ) { return hx::Val( listen_z ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"normalized") ) { return hx::Val( normalized ); }
		if (HX_FIELD_EQ(inName,"_construct") ) { return hx::Val( _construct ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_angle2D") ) { return hx::Val( set_angle2D_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"ignore_listeners") ) { return hx::Val( ignore_listeners ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Vector_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< Float >()) );x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< Float >()) );y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_z(inValue.Cast< Float >()) );z=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"angle2D") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_angle2D(inValue.Cast< Float >()) );angle2D=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lengthsq") ) { lengthsq=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inverted") ) { inverted=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listen_x") ) { listen_x=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listen_y") ) { listen_y=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listen_z") ) { listen_z=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"normalized") ) { normalized=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_construct") ) { _construct=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"ignore_listeners") ) { ignore_listeners=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vector_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("z","\x7a","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("w","\x77","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("lengthsq","\x04","\x7f","\xc3","\x1f"));
	outFields->push(HX_HCSTRING("angle2D","\x65","\x4a","\xd9","\x52"));
	outFields->push(HX_HCSTRING("normalized","\x37","\x64","\x6f","\x81"));
	outFields->push(HX_HCSTRING("inverted","\xf5","\xb0","\x31","\xf5"));
	outFields->push(HX_HCSTRING("ignore_listeners","\xd2","\x64","\x1e","\xf7"));
	outFields->push(HX_HCSTRING("_construct","\xd8","\xd3","\x4f","\xab"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Vector_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Vector_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector_obj,z),HX_HCSTRING("z","\x7a","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector_obj,w),HX_HCSTRING("w","\x77","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsFloat,(int)offsetof(Vector_obj,lengthsq),HX_HCSTRING("lengthsq","\x04","\x7f","\xc3","\x1f")},
	{hx::fsFloat,(int)offsetof(Vector_obj,angle2D),HX_HCSTRING("angle2D","\x65","\x4a","\xd9","\x52")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Vector_obj,normalized),HX_HCSTRING("normalized","\x37","\x64","\x6f","\x81")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Vector_obj,inverted),HX_HCSTRING("inverted","\xf5","\xb0","\x31","\xf5")},
	{hx::fsBool,(int)offsetof(Vector_obj,ignore_listeners),HX_HCSTRING("ignore_listeners","\xd2","\x64","\x1e","\xf7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Vector_obj,listen_x),HX_HCSTRING("listen_x","\x40","\xfb","\x31","\x38")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Vector_obj,listen_y),HX_HCSTRING("listen_y","\x41","\xfb","\x31","\x38")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Vector_obj,listen_z),HX_HCSTRING("listen_z","\x42","\xfb","\x31","\x38")},
	{hx::fsBool,(int)offsetof(Vector_obj,_construct),HX_HCSTRING("_construct","\xd8","\xd3","\x4f","\xab")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Vector_obj_sStaticStorageInfo = 0;
#endif

static ::String Vector_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("z","\x7a","\x00","\x00","\x00"),
	HX_HCSTRING("w","\x77","\x00","\x00","\x00"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("lengthsq","\x04","\x7f","\xc3","\x1f"),
	HX_HCSTRING("angle2D","\x65","\x4a","\xd9","\x52"),
	HX_HCSTRING("normalized","\x37","\x64","\x6f","\x81"),
	HX_HCSTRING("inverted","\xf5","\xb0","\x31","\xf5"),
	HX_HCSTRING("ignore_listeners","\xd2","\x64","\x1e","\xf7"),
	HX_HCSTRING("listen_x","\x40","\xfb","\x31","\x38"),
	HX_HCSTRING("listen_y","\x41","\xfb","\x31","\x38"),
	HX_HCSTRING("listen_z","\x42","\xfb","\x31","\x38"),
	HX_HCSTRING("_construct","\xd8","\xd3","\x4f","\xab"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_z","\x5d","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_angle2D","\x88","\xb1","\x40","\xe3"),
	::String(null()) };

static void Vector_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vector_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vector_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vector_obj::__mClass,"__mClass");
};

#endif

hx::Class Vector_obj::__mClass;

void Vector_obj::__register()
{
	hx::Object *dummy = new Vector_obj;
	Vector_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.Vector","\xe2","\xdb","\x3e","\x15");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Vector_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vector_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vector_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vector_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vector_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vector_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
