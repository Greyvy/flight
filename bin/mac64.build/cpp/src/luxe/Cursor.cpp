// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_Cursor
#include <luxe/Cursor.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Screen
#include <luxe/Screen.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_Runtime
#include <snow/modules/sdl/Runtime.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b4f7491222e7a489_125_new,"luxe.Cursor","new",0xa48b30a0,"luxe.Cursor.new","luxe/Screen.hx",125,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f7491222e7a489_148_set_internal,"luxe.Cursor","set_internal",0x8f03d67a,"luxe.Cursor.set_internal","luxe/Screen.hx",148,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f7491222e7a489_167_get_grab,"luxe.Cursor","get_grab",0x520a4315,"luxe.Cursor.get_grab","luxe/Screen.hx",167,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f7491222e7a489_171_set_grab,"luxe.Cursor","set_grab",0x00679c89,"luxe.Cursor.set_grab","luxe/Screen.hx",171,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_b4f7491222e7a489_181_get_pos,"luxe.Cursor","get_pos",0x03d6a66b,"luxe.Cursor.get_pos","luxe/Screen.hx",181,0xd2f30fd9)
namespace luxe{

void Cursor_obj::__construct( ::luxe::Screen _screen){
            	HX_GC_STACKFRAME(&_hx_pos_b4f7491222e7a489_125_new)
HXLINE( 137)		this->ignore = false;
HXLINE( 131)		this->grab = false;
HXLINE( 142)		this->screen = _screen;
HXLINE( 143)		this->pos =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}

Dynamic Cursor_obj::__CreateEmpty() { return new Cursor_obj; }

void *Cursor_obj::_hx_vtable = 0;

Dynamic Cursor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Cursor_obj > _hx_result = new Cursor_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Cursor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1288add0;
}

void Cursor_obj::set_internal(Float _x,Float _y){
            	HX_GC_STACKFRAME(&_hx_pos_b4f7491222e7a489_148_set_internal)
HXLINE( 155)		this->ignore = true;
HXLINE( 157)		this->pos =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_x,_y,null(),null());
HXLINE( 159)		this->ignore = false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Cursor_obj,set_internal,(void))

bool Cursor_obj::get_grab(){
            	HX_STACKFRAME(&_hx_pos_b4f7491222e7a489_167_get_grab)
HXDLIN( 167)		return this->grab;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Cursor_obj,get_grab,return )

bool Cursor_obj::set_grab(bool _grab){
            	HX_STACKFRAME(&_hx_pos_b4f7491222e7a489_171_set_grab)
HXLINE( 173)		this->screen->core->app->runtime->window_grab(_grab);
HXLINE( 175)		return (this->grab = _grab);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Cursor_obj,set_grab,return )

 ::phoenix::Vector Cursor_obj::get_pos(){
            	HX_STACKFRAME(&_hx_pos_b4f7491222e7a489_181_get_pos)
HXDLIN( 181)		return this->pos;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Cursor_obj,get_pos,return )


hx::ObjectPtr< Cursor_obj > Cursor_obj::__new( ::luxe::Screen _screen) {
	hx::ObjectPtr< Cursor_obj > __this = new Cursor_obj();
	__this->__construct(_screen);
	return __this;
}

hx::ObjectPtr< Cursor_obj > Cursor_obj::__alloc(hx::Ctx *_hx_ctx, ::luxe::Screen _screen) {
	Cursor_obj *__this = (Cursor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Cursor_obj), true, "luxe.Cursor"));
	*(void **)__this = Cursor_obj::_hx_vtable;
	__this->__construct(_screen);
	return __this;
}

Cursor_obj::Cursor_obj()
{
}

void Cursor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Cursor);
	HX_MARK_MEMBER_NAME(grab,"grab");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(screen,"screen");
	HX_MARK_MEMBER_NAME(ignore,"ignore");
	HX_MARK_END_CLASS();
}

void Cursor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(grab,"grab");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(screen,"screen");
	HX_VISIT_MEMBER_NAME(ignore,"ignore");
}

hx::Val Cursor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( inCallProp == hx::paccAlways ? get_pos() : pos ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"grab") ) { return hx::Val( inCallProp == hx::paccAlways ? get_grab() : grab ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"screen") ) { return hx::Val( screen ); }
		if (HX_FIELD_EQ(inName,"ignore") ) { return hx::Val( ignore ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_pos") ) { return hx::Val( get_pos_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_grab") ) { return hx::Val( get_grab_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_grab") ) { return hx::Val( set_grab_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_internal") ) { return hx::Val( set_internal_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Cursor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"grab") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_grab(inValue.Cast< bool >()) );grab=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"screen") ) { screen=inValue.Cast<  ::luxe::Screen >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ignore") ) { ignore=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Cursor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("grab","\xcc","\xcf","\x6b","\x44"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	outFields->push(HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47"));
	outFields->push(HX_HCSTRING("ignore","\x12","\xb9","\xc8","\x92"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Cursor_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Cursor_obj,grab),HX_HCSTRING("grab","\xcc","\xcf","\x6b","\x44")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Cursor_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{hx::fsObject /*::luxe::Screen*/ ,(int)offsetof(Cursor_obj,screen),HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47")},
	{hx::fsBool,(int)offsetof(Cursor_obj,ignore),HX_HCSTRING("ignore","\x12","\xb9","\xc8","\x92")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Cursor_obj_sStaticStorageInfo = 0;
#endif

static ::String Cursor_obj_sMemberFields[] = {
	HX_HCSTRING("grab","\xcc","\xcf","\x6b","\x44"),
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47"),
	HX_HCSTRING("ignore","\x12","\xb9","\xc8","\x92"),
	HX_HCSTRING("set_internal","\xba","\x3e","\x89","\xf2"),
	HX_HCSTRING("get_grab","\x55","\x8b","\x26","\xc4"),
	HX_HCSTRING("set_grab","\xc9","\xe4","\x83","\x72"),
	HX_HCSTRING("get_pos","\x2b","\x26","\xca","\x26"),
	::String(null()) };

static void Cursor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Cursor_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Cursor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Cursor_obj::__mClass,"__mClass");
};

#endif

hx::Class Cursor_obj::__mClass;

void Cursor_obj::__register()
{
	hx::Object *dummy = new Cursor_obj;
	Cursor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Cursor","\xae","\xa0","\x46","\x9e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Cursor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Cursor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Cursor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Cursor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Cursor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Cursor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
