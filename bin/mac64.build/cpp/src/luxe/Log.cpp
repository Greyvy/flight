// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_Log
#include <luxe/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bf2df499c774503c_250__get_spacing,"luxe.Log","_get_spacing",0xfd25c79d,"luxe.Log._get_spacing","luxe/Log.hx",250,0xe5312153)
HX_LOCAL_STACK_FRAME(_hx_pos_bf2df499c774503c_14_boot,"luxe.Log","boot",0x95cb3834,"luxe.Log.boot","luxe/Log.hx",14,0xe5312153)
HX_LOCAL_STACK_FRAME(_hx_pos_bf2df499c774503c_17_boot,"luxe.Log","boot",0x95cb3834,"luxe.Log.boot","luxe/Log.hx",17,0xe5312153)
namespace luxe{

void Log_obj::__construct() { }

Dynamic Log_obj::__CreateEmpty() { return new Log_obj; }

void *Log_obj::_hx_vtable = 0;

Dynamic Log_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Log_obj > _hx_result = new Log_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Log_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x022aee9e;
}

int Log_obj::_level;

::Array< ::String > Log_obj::_filter;

::Array< ::String > Log_obj::_exclude;

int Log_obj::_log_width;

::String Log_obj::_get_spacing(::String _file){
            	HX_STACKFRAME(&_hx_pos_bf2df499c774503c_250__get_spacing)
HXLINE( 252)		::String _spaces = HX_("",00,00,00,00);
HXLINE( 255)		int _trace_length = (_file.length + (int)4);
HXLINE( 256)		int _diff = (::luxe::Log_obj::_log_width - _trace_length);
HXLINE( 257)		if ((_diff > (int)0)) {
HXLINE( 258)			int _g1 = (int)0;
HXDLIN( 258)			int _g = _diff;
HXDLIN( 258)			while((_g1 < _g)){
HXLINE( 258)				_g1 = (_g1 + (int)1);
HXDLIN( 258)				int i = (_g1 - (int)1);
HXLINE( 259)				_spaces = (_spaces + HX_(" ",20,00,00,00));
            			}
            		}
HXLINE( 263)		return _spaces;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Log_obj,_get_spacing,return )


Log_obj::Log_obj()
{
}

bool Log_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_level") ) { outValue = ( _level ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_filter") ) { outValue = ( _filter ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_exclude") ) { outValue = ( _exclude ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_log_width") ) { outValue = ( _log_width ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_get_spacing") ) { outValue = _get_spacing_dyn(); return true; }
	}
	return false;
}

bool Log_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_level") ) { _level=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_filter") ) { _filter=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_exclude") ) { _exclude=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_log_width") ) { _log_width=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Log_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Log_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Log_obj::_level,HX_HCSTRING("_level","\xc5","\x5c","\x4a","\x6e")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Log_obj::_filter,HX_HCSTRING("_filter","\x57","\x31","\xac","\xf3")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Log_obj::_exclude,HX_HCSTRING("_exclude","\x5b","\x18","\xeb","\xe4")},
	{hx::fsInt,(void *) &Log_obj::_log_width,HX_HCSTRING("_log_width","\x8c","\x08","\xc7","\xa7")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Log_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Log_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Log_obj::_level,"_level");
	HX_MARK_MEMBER_NAME(Log_obj::_filter,"_filter");
	HX_MARK_MEMBER_NAME(Log_obj::_exclude,"_exclude");
	HX_MARK_MEMBER_NAME(Log_obj::_log_width,"_log_width");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Log_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Log_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Log_obj::_level,"_level");
	HX_VISIT_MEMBER_NAME(Log_obj::_filter,"_filter");
	HX_VISIT_MEMBER_NAME(Log_obj::_exclude,"_exclude");
	HX_VISIT_MEMBER_NAME(Log_obj::_log_width,"_log_width");
};

#endif

hx::Class Log_obj::__mClass;

static ::String Log_obj_sStaticFields[] = {
	HX_HCSTRING("_level","\xc5","\x5c","\x4a","\x6e"),
	HX_HCSTRING("_filter","\x57","\x31","\xac","\xf3"),
	HX_HCSTRING("_exclude","\x5b","\x18","\xeb","\xe4"),
	HX_HCSTRING("_log_width","\x8c","\x08","\xc7","\xa7"),
	HX_HCSTRING("_get_spacing","\x9b","\x41","\xbf","\x7d"),
	::String(null())
};

void Log_obj::__register()
{
	hx::Object *dummy = new Log_obj;
	Log_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Log","\xac","\x2b","\x85","\x63");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Log_obj::__GetStatic;
	__mClass->mSetStaticField = &Log_obj::__SetStatic;
	__mClass->mMarkFunc = Log_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Log_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Log_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Log_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Log_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Log_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Log_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_bf2df499c774503c_14_boot)
HXDLIN(  14)		_level = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bf2df499c774503c_17_boot)
HXDLIN(  17)		_log_width = (int)16;
            	}
}

} // end namespace luxe
