// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_NineSlice
#include <luxe/NineSlice.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_phoenix_Batcher
#include <phoenix/Batcher.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_QuadPackGeometry
#include <phoenix/geometry/QuadPackGeometry.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fea579081f41c43a_26_new,"luxe.NineSlice","new",0xa11773da,"luxe.NineSlice.new","luxe/NineSlice.hx",26,0xccc9c257)
HX_LOCAL_STACK_FRAME(_hx_pos_fea579081f41c43a_101_lock,"luxe.NineSlice","lock",0x52230331,"luxe.NineSlice.lock","luxe/NineSlice.hx",101,0xccc9c257)
HX_LOCAL_STACK_FRAME(_hx_pos_fea579081f41c43a_107_dirty,"luxe.NineSlice","dirty",0xed5f460c,"luxe.NineSlice.dirty","luxe/NineSlice.hx",107,0xccc9c257)
HX_LOCAL_STACK_FRAME(_hx_pos_fea579081f41c43a_112_update_size,"luxe.NineSlice","update_size",0x2a7a6371,"luxe.NineSlice.update_size","luxe/NineSlice.hx",112,0xccc9c257)
HX_LOCAL_STACK_FRAME(_hx_pos_fea579081f41c43a_205_set,"luxe.NineSlice","set",0xa11b3f1c,"luxe.NineSlice.set","luxe/NineSlice.hx",205,0xccc9c257)
HX_LOCAL_STACK_FRAME(_hx_pos_fea579081f41c43a_328_set_size,"luxe.NineSlice","set_size",0x2a233804,"luxe.NineSlice.set_size","luxe/NineSlice.hx",328,0xccc9c257)
HX_LOCAL_STACK_FRAME(_hx_pos_fea579081f41c43a_351__create,"luxe.NineSlice","_create",0x383a6115,"luxe.NineSlice._create","luxe/NineSlice.hx",351,0xccc9c257)
HX_LOCAL_STACK_FRAME(_hx_pos_fea579081f41c43a_393_create,"luxe.NineSlice","create",0x8597abc2,"luxe.NineSlice.create","luxe/NineSlice.hx",393,0xccc9c257)
HX_LOCAL_STACK_FRAME(_hx_pos_f26be4e2fce9d6de_35_init,"luxe.NineSlice","init",0x5026a256,"luxe.NineSlice.init","luxe/macros/EntityRules.hx",35,0xed942299)
HX_LOCAL_STACK_FRAME(_hx_pos_f26be4e2fce9d6de_47_ondestroy,"luxe.NineSlice","ondestroy",0x3fba38b5,"luxe.NineSlice.ondestroy","luxe/macros/EntityRules.hx",47,0xed942299)
namespace luxe{

void NineSlice_obj::__construct( ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_fea579081f41c43a_26_new)
HXLINE(  43)		this->added = false;
HXLINE(  41)		this->midheight = ((Float)0.0);
HXLINE(  40)		this->midwidth = ((Float)0.0);
HXLINE(  38)		this->is_set = false;
HXLINE(  37)		this->source_h = ((Float)0.0);
HXLINE(  36)		this->source_w = ((Float)0.0);
HXLINE(  35)		this->source_y = ((Float)0.0);
HXLINE(  34)		this->source_x = ((Float)0.0);
HXLINE(  33)		this->height = ((Float)0.0);
HXLINE(  32)		this->bottom = ((Float)32);
HXLINE(  31)		this->width = ((Float)0.0);
HXLINE(  30)		this->right = ((Float)32);
HXLINE(  29)		this->left = ((Float)32);
HXLINE(  28)		this->top = ((Float)32);
HXLINE(  53)		this->slices = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  57)		if (hx::IsNull( _options )) {
HXLINE(  58)			_options =  ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("no_geometry",b0,09,1b,da),true));
            		}
            		else {
HXLINE(  62)			_options->__SetField(HX_("no_geometry",b0,09,1b,da),true,hx::paccDynamic);
            		}
HXLINE(  65)		this->nineslice_options = _options;
HXLINE(  67)		if (hx::IsNotNull( ( ( ::phoenix::Batcher)(_options->__Field(HX_("batcher",a7,22,10,c0),hx::paccDynamic)) ) )) {
HXLINE(  68)			this->_batcher = ( ( ::phoenix::Batcher)(_options->__Field(HX_("batcher",a7,22,10,c0),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  70)			this->_batcher = ::Luxe_obj::renderer->batcher;
            		}
HXLINE(  74)		super::__construct(_options);
HXLINE(  77)		if (hx::IsNotNull( _options->__Field(HX_("top",95,66,58,00),hx::paccDynamic) )) {
HXLINE(  77)			this->top = ( (Float)(_options->__Field(HX_("top",95,66,58,00),hx::paccDynamic)) );
            		}
HXLINE(  78)		if (hx::IsNotNull( _options->__Field(HX_("left",07,08,b0,47),hx::paccDynamic) )) {
HXLINE(  78)			this->left = ( (Float)(_options->__Field(HX_("left",07,08,b0,47),hx::paccDynamic)) );
            		}
HXLINE(  79)		if (hx::IsNotNull( _options->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic) )) {
HXLINE(  79)			this->right = ( (Float)(_options->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic)) );
            		}
HXLINE(  80)		if (hx::IsNotNull( _options->__Field(HX_("bottom",eb,e6,78,65),hx::paccDynamic) )) {
HXLINE(  80)			this->bottom = ( (Float)(_options->__Field(HX_("bottom",eb,e6,78,65),hx::paccDynamic)) );
            		}
HXLINE(  82)		if (hx::IsNotNull( _options->__Field(HX_("source_x",d4,30,a4,66),hx::paccDynamic) )) {
HXLINE(  82)			this->source_x = ( (Float)(_options->__Field(HX_("source_x",d4,30,a4,66),hx::paccDynamic)) );
            		}
HXLINE(  83)		if (hx::IsNotNull( _options->__Field(HX_("source_y",d5,30,a4,66),hx::paccDynamic) )) {
HXLINE(  83)			this->source_y = ( (Float)(_options->__Field(HX_("source_y",d5,30,a4,66),hx::paccDynamic)) );
            		}
HXLINE(  84)		if (hx::IsNotNull( _options->__Field(HX_("source_w",d3,30,a4,66),hx::paccDynamic) )) {
HXLINE(  85)			this->source_w = ( (Float)(_options->__Field(HX_("source_w",d3,30,a4,66),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  87)			this->source_w = this->texture->width;
            		}
HXLINE(  90)		if (hx::IsNotNull( _options->__Field(HX_("source_h",c4,30,a4,66),hx::paccDynamic) )) {
HXLINE(  91)			this->source_h = ( (Float)(_options->__Field(HX_("source_h",c4,30,a4,66),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  93)			this->source_h = this->texture->height;
            		}
HXLINE(  96)		this->set_geometry(null());
            	}

Dynamic NineSlice_obj::__CreateEmpty() { return new NineSlice_obj; }

void *NineSlice_obj::_hx_vtable = 0;

Dynamic NineSlice_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NineSlice_obj > _hx_result = new NineSlice_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NineSlice_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0bbca018) {
		if (inClassId<=(int)0x099ca90a) {
			if (inClassId<=(int)0x025d481e) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x025d481e;
			} else {
				return inClassId==(int)0x099ca90a;
			}
		} else {
			return inClassId==(int)0x0bbca018;
		}
	} else {
		return inClassId==(int)0x17ed3881 || inClassId==(int)0x46db82ea;
	}
}

void NineSlice_obj::lock(){
            	HX_STACKFRAME(&_hx_pos_fea579081f41c43a_101_lock)
HXDLIN( 101)		bool _hx_tmp;
HXDLIN( 101)		if (this->is_set) {
HXDLIN( 101)			_hx_tmp = hx::IsNotNull( this->_geometry );
            		}
            		else {
HXDLIN( 101)			_hx_tmp = false;
            		}
HXDLIN( 101)		if (_hx_tmp) {
HXLINE( 102)			this->_geometry->set_locked(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NineSlice_obj,lock,(void))

void NineSlice_obj::dirty(){
            	HX_STACKFRAME(&_hx_pos_fea579081f41c43a_107_dirty)
HXDLIN( 107)		bool _hx_tmp;
HXDLIN( 107)		if (this->is_set) {
HXDLIN( 107)			_hx_tmp = hx::IsNotNull( this->_geometry );
            		}
            		else {
HXDLIN( 107)			_hx_tmp = false;
            		}
HXDLIN( 107)		if (_hx_tmp) {
HXLINE( 108)			this->_geometry->set_dirty(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NineSlice_obj,dirty,(void))

void NineSlice_obj::update_size(Float _width,Float _height){
            	HX_STACKFRAME(&_hx_pos_fea579081f41c43a_112_update_size)
HXLINE( 114)		this->width = _width;
HXLINE( 115)		this->height = _height;
HXLINE( 117)		this->midwidth = ::Math_obj::abs(((this->width - this->left) - this->right));
HXLINE( 118)		this->midheight = ::Math_obj::abs(((this->height - this->top) - this->bottom));
HXLINE( 121)		this->slices->__get((int)0)->__SetField(HX_("source_width",62,44,bc,87),this->left,hx::paccDynamic);
HXLINE( 122)		this->slices->__get((int)0)->__SetField(HX_("source_height",0b,0a,4f,f3),this->top,hx::paccDynamic);
HXLINE( 123)		this->slices->__get((int)0)->__SetField(HX_("source_x",d4,30,a4,66),this->source_x,hx::paccDynamic);
HXLINE( 124)		this->slices->__get((int)0)->__SetField(HX_("source_y",d5,30,a4,66),this->source_y,hx::paccDynamic);
HXLINE( 125)		{
HXLINE( 125)			 ::phoenix::Vector _this = ( ( ::phoenix::Vector)(this->slices->__get((int)0)->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXDLIN( 125)			bool prev = _this->ignore_listeners;
HXDLIN( 125)			_this->ignore_listeners = true;
HXDLIN( 125)			{
HXLINE( 125)				_this->x = (int)0;
HXDLIN( 125)				if (!(_this->_construct)) {
HXLINE( 125)					bool _hx_tmp;
HXDLIN( 125)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 125)						_hx_tmp = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 125)						_hx_tmp = false;
            					}
HXDLIN( 125)					if (_hx_tmp) {
HXLINE( 125)						_this->listen_x((int)0);
            					}
            				}
            			}
HXDLIN( 125)			{
HXLINE( 125)				_this->y = (int)0;
HXDLIN( 125)				if (!(_this->_construct)) {
HXLINE( 125)					bool _hx_tmp1;
HXDLIN( 125)					if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 125)						_hx_tmp1 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 125)						_hx_tmp1 = false;
            					}
HXDLIN( 125)					if (_hx_tmp1) {
HXLINE( 125)						_this->listen_y((int)0);
            					}
            				}
            			}
HXDLIN( 125)			_this->ignore_listeners = prev;
HXDLIN( 125)			bool _hx_tmp2;
HXDLIN( 125)			if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 125)				_hx_tmp2 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 125)				_hx_tmp2 = false;
            			}
HXDLIN( 125)			if (_hx_tmp2) {
HXLINE( 125)				_this->listen_x(_this->x);
            			}
HXDLIN( 125)			bool _hx_tmp3;
HXDLIN( 125)			if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 125)				_hx_tmp3 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 125)				_hx_tmp3 = false;
            			}
HXDLIN( 125)			if (_hx_tmp3) {
HXLINE( 125)				_this->listen_y(_this->y);
            			}
            		}
HXLINE( 126)		this->slices->__get((int)0)->__SetField(HX_("width",06,b6,62,ca),this->left,hx::paccDynamic);
HXLINE( 127)		this->slices->__get((int)0)->__SetField(HX_("height",e7,07,4c,02),this->top,hx::paccDynamic);
HXLINE( 130)		this->slices->__get((int)1)->__SetField(HX_("source_width",62,44,bc,87),((this->source_w - this->left) - this->right),hx::paccDynamic);
HXLINE( 131)		this->slices->__get((int)1)->__SetField(HX_("source_height",0b,0a,4f,f3),this->top,hx::paccDynamic);
HXLINE( 132)		this->slices->__get((int)1)->__SetField(HX_("source_x",d4,30,a4,66),(this->source_x + this->left),hx::paccDynamic);
HXLINE( 133)		this->slices->__get((int)1)->__SetField(HX_("source_y",d5,30,a4,66),this->source_y,hx::paccDynamic);
HXLINE( 134)		{
HXLINE( 134)			 ::phoenix::Vector _this1 = ( ( ::phoenix::Vector)(this->slices->__get((int)1)->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXDLIN( 134)			Float _x = this->left;
HXDLIN( 134)			bool prev1 = _this1->ignore_listeners;
HXDLIN( 134)			_this1->ignore_listeners = true;
HXDLIN( 134)			{
HXLINE( 134)				_this1->x = _x;
HXDLIN( 134)				if (!(_this1->_construct)) {
HXLINE( 134)					bool _hx_tmp4;
HXDLIN( 134)					if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 134)						_hx_tmp4 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 134)						_hx_tmp4 = false;
            					}
HXDLIN( 134)					if (_hx_tmp4) {
HXLINE( 134)						_this1->listen_x(_x);
            					}
            				}
            			}
HXDLIN( 134)			{
HXLINE( 134)				_this1->y = (int)0;
HXDLIN( 134)				if (!(_this1->_construct)) {
HXLINE( 134)					bool _hx_tmp5;
HXDLIN( 134)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 134)						_hx_tmp5 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 134)						_hx_tmp5 = false;
            					}
HXDLIN( 134)					if (_hx_tmp5) {
HXLINE( 134)						_this1->listen_y((int)0);
            					}
            				}
            			}
HXDLIN( 134)			_this1->ignore_listeners = prev1;
HXDLIN( 134)			bool _hx_tmp6;
HXDLIN( 134)			if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 134)				_hx_tmp6 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 134)				_hx_tmp6 = false;
            			}
HXDLIN( 134)			if (_hx_tmp6) {
HXLINE( 134)				_this1->listen_x(_this1->x);
            			}
HXDLIN( 134)			bool _hx_tmp7;
HXDLIN( 134)			if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 134)				_hx_tmp7 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 134)				_hx_tmp7 = false;
            			}
HXDLIN( 134)			if (_hx_tmp7) {
HXLINE( 134)				_this1->listen_y(_this1->y);
            			}
            		}
HXLINE( 135)		this->slices->__get((int)1)->__SetField(HX_("width",06,b6,62,ca),((this->width - this->left) - this->right),hx::paccDynamic);
HXLINE( 136)		this->slices->__get((int)1)->__SetField(HX_("height",e7,07,4c,02),this->top,hx::paccDynamic);
HXLINE( 139)		this->slices->__get((int)2)->__SetField(HX_("source_width",62,44,bc,87),this->right,hx::paccDynamic);
HXLINE( 140)		this->slices->__get((int)2)->__SetField(HX_("source_height",0b,0a,4f,f3),this->top,hx::paccDynamic);
HXLINE( 141)		Float _hx_tmp8 = this->source_x;
HXDLIN( 141)		this->slices->__get((int)2)->__SetField(HX_("source_x",d4,30,a4,66),(_hx_tmp8 + (this->source_w - this->right)),hx::paccDynamic);
HXLINE( 142)		this->slices->__get((int)2)->__SetField(HX_("source_y",d5,30,a4,66),this->source_y,hx::paccDynamic);
HXLINE( 143)		{
HXLINE( 143)			 ::phoenix::Vector _this2 = ( ( ::phoenix::Vector)(this->slices->__get((int)2)->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXDLIN( 143)			Float _x1 = (this->left + this->midwidth);
HXDLIN( 143)			bool prev2 = _this2->ignore_listeners;
HXDLIN( 143)			_this2->ignore_listeners = true;
HXDLIN( 143)			{
HXLINE( 143)				_this2->x = _x1;
HXDLIN( 143)				if (!(_this2->_construct)) {
HXLINE( 143)					bool _hx_tmp9;
HXDLIN( 143)					if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 143)						_hx_tmp9 = !(_this2->ignore_listeners);
            					}
            					else {
HXLINE( 143)						_hx_tmp9 = false;
            					}
HXDLIN( 143)					if (_hx_tmp9) {
HXLINE( 143)						_this2->listen_x(_x1);
            					}
            				}
            			}
HXDLIN( 143)			{
HXLINE( 143)				_this2->y = (int)0;
HXDLIN( 143)				if (!(_this2->_construct)) {
HXLINE( 143)					bool _hx_tmp10;
HXDLIN( 143)					if (hx::IsNotNull( _this2->listen_y )) {
HXLINE( 143)						_hx_tmp10 = !(_this2->ignore_listeners);
            					}
            					else {
HXLINE( 143)						_hx_tmp10 = false;
            					}
HXDLIN( 143)					if (_hx_tmp10) {
HXLINE( 143)						_this2->listen_y((int)0);
            					}
            				}
            			}
HXDLIN( 143)			_this2->ignore_listeners = prev2;
HXDLIN( 143)			bool _hx_tmp11;
HXDLIN( 143)			if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 143)				_hx_tmp11 = !(_this2->ignore_listeners);
            			}
            			else {
HXLINE( 143)				_hx_tmp11 = false;
            			}
HXDLIN( 143)			if (_hx_tmp11) {
HXLINE( 143)				_this2->listen_x(_this2->x);
            			}
HXDLIN( 143)			bool _hx_tmp12;
HXDLIN( 143)			if (hx::IsNotNull( _this2->listen_y )) {
HXLINE( 143)				_hx_tmp12 = !(_this2->ignore_listeners);
            			}
            			else {
HXLINE( 143)				_hx_tmp12 = false;
            			}
HXDLIN( 143)			if (_hx_tmp12) {
HXLINE( 143)				_this2->listen_y(_this2->y);
            			}
            		}
HXLINE( 144)		this->slices->__get((int)2)->__SetField(HX_("width",06,b6,62,ca),this->right,hx::paccDynamic);
HXLINE( 145)		this->slices->__get((int)2)->__SetField(HX_("height",e7,07,4c,02),this->top,hx::paccDynamic);
HXLINE( 149)		this->slices->__get((int)3)->__SetField(HX_("source_width",62,44,bc,87),this->left,hx::paccDynamic);
HXLINE( 150)		this->slices->__get((int)3)->__SetField(HX_("source_height",0b,0a,4f,f3),((this->source_h - this->top) - this->bottom),hx::paccDynamic);
HXLINE( 151)		this->slices->__get((int)3)->__SetField(HX_("source_x",d4,30,a4,66),this->source_x,hx::paccDynamic);
HXLINE( 152)		this->slices->__get((int)3)->__SetField(HX_("source_y",d5,30,a4,66),(this->source_y + this->top),hx::paccDynamic);
HXLINE( 153)		{
HXLINE( 153)			 ::phoenix::Vector _this3 = ( ( ::phoenix::Vector)(this->slices->__get((int)3)->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXDLIN( 153)			Float _y = this->top;
HXDLIN( 153)			bool prev3 = _this3->ignore_listeners;
HXDLIN( 153)			_this3->ignore_listeners = true;
HXDLIN( 153)			{
HXLINE( 153)				_this3->x = (int)0;
HXDLIN( 153)				if (!(_this3->_construct)) {
HXLINE( 153)					bool _hx_tmp13;
HXDLIN( 153)					if (hx::IsNotNull( _this3->listen_x )) {
HXLINE( 153)						_hx_tmp13 = !(_this3->ignore_listeners);
            					}
            					else {
HXLINE( 153)						_hx_tmp13 = false;
            					}
HXDLIN( 153)					if (_hx_tmp13) {
HXLINE( 153)						_this3->listen_x((int)0);
            					}
            				}
            			}
HXDLIN( 153)			{
HXLINE( 153)				_this3->y = _y;
HXDLIN( 153)				if (!(_this3->_construct)) {
HXLINE( 153)					bool _hx_tmp14;
HXDLIN( 153)					if (hx::IsNotNull( _this3->listen_y )) {
HXLINE( 153)						_hx_tmp14 = !(_this3->ignore_listeners);
            					}
            					else {
HXLINE( 153)						_hx_tmp14 = false;
            					}
HXDLIN( 153)					if (_hx_tmp14) {
HXLINE( 153)						_this3->listen_y(_y);
            					}
            				}
            			}
HXDLIN( 153)			_this3->ignore_listeners = prev3;
HXDLIN( 153)			bool _hx_tmp15;
HXDLIN( 153)			if (hx::IsNotNull( _this3->listen_x )) {
HXLINE( 153)				_hx_tmp15 = !(_this3->ignore_listeners);
            			}
            			else {
HXLINE( 153)				_hx_tmp15 = false;
            			}
HXDLIN( 153)			if (_hx_tmp15) {
HXLINE( 153)				_this3->listen_x(_this3->x);
            			}
HXDLIN( 153)			bool _hx_tmp16;
HXDLIN( 153)			if (hx::IsNotNull( _this3->listen_y )) {
HXLINE( 153)				_hx_tmp16 = !(_this3->ignore_listeners);
            			}
            			else {
HXLINE( 153)				_hx_tmp16 = false;
            			}
HXDLIN( 153)			if (_hx_tmp16) {
HXLINE( 153)				_this3->listen_y(_this3->y);
            			}
            		}
HXLINE( 154)		this->slices->__get((int)3)->__SetField(HX_("width",06,b6,62,ca),this->left,hx::paccDynamic);
HXLINE( 155)		this->slices->__get((int)3)->__SetField(HX_("height",e7,07,4c,02),((this->height - this->top) - this->bottom),hx::paccDynamic);
HXLINE( 158)		this->slices->__get((int)4)->__SetField(HX_("source_width",62,44,bc,87),((this->source_w - this->left) - this->right),hx::paccDynamic);
HXLINE( 159)		this->slices->__get((int)4)->__SetField(HX_("source_height",0b,0a,4f,f3),((this->source_h - this->top) - this->bottom),hx::paccDynamic);
HXLINE( 160)		this->slices->__get((int)4)->__SetField(HX_("source_x",d4,30,a4,66),(this->source_x + this->left),hx::paccDynamic);
HXLINE( 161)		this->slices->__get((int)4)->__SetField(HX_("source_y",d5,30,a4,66),(this->source_y + this->top),hx::paccDynamic);
HXLINE( 162)		{
HXLINE( 162)			 ::phoenix::Vector _this4 = ( ( ::phoenix::Vector)(this->slices->__get((int)4)->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXDLIN( 162)			Float _x2 = this->left;
HXDLIN( 162)			Float _y1 = this->top;
HXDLIN( 162)			bool prev4 = _this4->ignore_listeners;
HXDLIN( 162)			_this4->ignore_listeners = true;
HXDLIN( 162)			{
HXLINE( 162)				_this4->x = _x2;
HXDLIN( 162)				if (!(_this4->_construct)) {
HXLINE( 162)					bool _hx_tmp17;
HXDLIN( 162)					if (hx::IsNotNull( _this4->listen_x )) {
HXLINE( 162)						_hx_tmp17 = !(_this4->ignore_listeners);
            					}
            					else {
HXLINE( 162)						_hx_tmp17 = false;
            					}
HXDLIN( 162)					if (_hx_tmp17) {
HXLINE( 162)						_this4->listen_x(_x2);
            					}
            				}
            			}
HXDLIN( 162)			{
HXLINE( 162)				_this4->y = _y1;
HXDLIN( 162)				if (!(_this4->_construct)) {
HXLINE( 162)					bool _hx_tmp18;
HXDLIN( 162)					if (hx::IsNotNull( _this4->listen_y )) {
HXLINE( 162)						_hx_tmp18 = !(_this4->ignore_listeners);
            					}
            					else {
HXLINE( 162)						_hx_tmp18 = false;
            					}
HXDLIN( 162)					if (_hx_tmp18) {
HXLINE( 162)						_this4->listen_y(_y1);
            					}
            				}
            			}
HXDLIN( 162)			_this4->ignore_listeners = prev4;
HXDLIN( 162)			bool _hx_tmp19;
HXDLIN( 162)			if (hx::IsNotNull( _this4->listen_x )) {
HXLINE( 162)				_hx_tmp19 = !(_this4->ignore_listeners);
            			}
            			else {
HXLINE( 162)				_hx_tmp19 = false;
            			}
HXDLIN( 162)			if (_hx_tmp19) {
HXLINE( 162)				_this4->listen_x(_this4->x);
            			}
HXDLIN( 162)			bool _hx_tmp20;
HXDLIN( 162)			if (hx::IsNotNull( _this4->listen_y )) {
HXLINE( 162)				_hx_tmp20 = !(_this4->ignore_listeners);
            			}
            			else {
HXLINE( 162)				_hx_tmp20 = false;
            			}
HXDLIN( 162)			if (_hx_tmp20) {
HXLINE( 162)				_this4->listen_y(_this4->y);
            			}
            		}
HXLINE( 163)		this->slices->__get((int)4)->__SetField(HX_("width",06,b6,62,ca),((this->width - this->left) - this->right),hx::paccDynamic);
HXLINE( 164)		this->slices->__get((int)4)->__SetField(HX_("height",e7,07,4c,02),((this->height - this->top) - this->bottom),hx::paccDynamic);
HXLINE( 167)		this->slices->__get((int)5)->__SetField(HX_("source_width",62,44,bc,87),this->right,hx::paccDynamic);
HXLINE( 168)		this->slices->__get((int)5)->__SetField(HX_("source_height",0b,0a,4f,f3),((this->source_h - this->top) - this->bottom),hx::paccDynamic);
HXLINE( 169)		Float _hx_tmp21 = this->source_x;
HXDLIN( 169)		this->slices->__get((int)5)->__SetField(HX_("source_x",d4,30,a4,66),(_hx_tmp21 + (this->source_w - this->right)),hx::paccDynamic);
HXLINE( 170)		this->slices->__get((int)5)->__SetField(HX_("source_y",d5,30,a4,66),(this->source_y + this->top),hx::paccDynamic);
HXLINE( 171)		{
HXLINE( 171)			 ::phoenix::Vector _this5 = ( ( ::phoenix::Vector)(this->slices->__get((int)5)->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXDLIN( 171)			Float _x3 = (this->left + this->midwidth);
HXDLIN( 171)			Float _y2 = this->top;
HXDLIN( 171)			bool prev5 = _this5->ignore_listeners;
HXDLIN( 171)			_this5->ignore_listeners = true;
HXDLIN( 171)			{
HXLINE( 171)				_this5->x = _x3;
HXDLIN( 171)				if (!(_this5->_construct)) {
HXLINE( 171)					bool _hx_tmp22;
HXDLIN( 171)					if (hx::IsNotNull( _this5->listen_x )) {
HXLINE( 171)						_hx_tmp22 = !(_this5->ignore_listeners);
            					}
            					else {
HXLINE( 171)						_hx_tmp22 = false;
            					}
HXDLIN( 171)					if (_hx_tmp22) {
HXLINE( 171)						_this5->listen_x(_x3);
            					}
            				}
            			}
HXDLIN( 171)			{
HXLINE( 171)				_this5->y = _y2;
HXDLIN( 171)				if (!(_this5->_construct)) {
HXLINE( 171)					bool _hx_tmp23;
HXDLIN( 171)					if (hx::IsNotNull( _this5->listen_y )) {
HXLINE( 171)						_hx_tmp23 = !(_this5->ignore_listeners);
            					}
            					else {
HXLINE( 171)						_hx_tmp23 = false;
            					}
HXDLIN( 171)					if (_hx_tmp23) {
HXLINE( 171)						_this5->listen_y(_y2);
            					}
            				}
            			}
HXDLIN( 171)			_this5->ignore_listeners = prev5;
HXDLIN( 171)			bool _hx_tmp24;
HXDLIN( 171)			if (hx::IsNotNull( _this5->listen_x )) {
HXLINE( 171)				_hx_tmp24 = !(_this5->ignore_listeners);
            			}
            			else {
HXLINE( 171)				_hx_tmp24 = false;
            			}
HXDLIN( 171)			if (_hx_tmp24) {
HXLINE( 171)				_this5->listen_x(_this5->x);
            			}
HXDLIN( 171)			bool _hx_tmp25;
HXDLIN( 171)			if (hx::IsNotNull( _this5->listen_y )) {
HXLINE( 171)				_hx_tmp25 = !(_this5->ignore_listeners);
            			}
            			else {
HXLINE( 171)				_hx_tmp25 = false;
            			}
HXDLIN( 171)			if (_hx_tmp25) {
HXLINE( 171)				_this5->listen_y(_this5->y);
            			}
            		}
HXLINE( 172)		this->slices->__get((int)5)->__SetField(HX_("width",06,b6,62,ca),this->right,hx::paccDynamic);
HXLINE( 173)		this->slices->__get((int)5)->__SetField(HX_("height",e7,07,4c,02),((this->height - this->top) - this->bottom),hx::paccDynamic);
HXLINE( 177)		this->slices->__get((int)6)->__SetField(HX_("source_width",62,44,bc,87),this->left,hx::paccDynamic);
HXLINE( 178)		this->slices->__get((int)6)->__SetField(HX_("source_height",0b,0a,4f,f3),this->bottom,hx::paccDynamic);
HXLINE( 179)		this->slices->__get((int)6)->__SetField(HX_("source_x",d4,30,a4,66),this->source_x,hx::paccDynamic);
HXLINE( 180)		Float _hx_tmp26 = this->source_y;
HXDLIN( 180)		this->slices->__get((int)6)->__SetField(HX_("source_y",d5,30,a4,66),(_hx_tmp26 + (this->source_h - this->bottom)),hx::paccDynamic);
HXLINE( 181)		{
HXLINE( 181)			 ::phoenix::Vector _this6 = ( ( ::phoenix::Vector)(this->slices->__get((int)6)->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXDLIN( 181)			Float _y3 = (this->top + this->midheight);
HXDLIN( 181)			bool prev6 = _this6->ignore_listeners;
HXDLIN( 181)			_this6->ignore_listeners = true;
HXDLIN( 181)			{
HXLINE( 181)				_this6->x = (int)0;
HXDLIN( 181)				if (!(_this6->_construct)) {
HXLINE( 181)					bool _hx_tmp27;
HXDLIN( 181)					if (hx::IsNotNull( _this6->listen_x )) {
HXLINE( 181)						_hx_tmp27 = !(_this6->ignore_listeners);
            					}
            					else {
HXLINE( 181)						_hx_tmp27 = false;
            					}
HXDLIN( 181)					if (_hx_tmp27) {
HXLINE( 181)						_this6->listen_x((int)0);
            					}
            				}
            			}
HXDLIN( 181)			{
HXLINE( 181)				_this6->y = _y3;
HXDLIN( 181)				if (!(_this6->_construct)) {
HXLINE( 181)					bool _hx_tmp28;
HXDLIN( 181)					if (hx::IsNotNull( _this6->listen_y )) {
HXLINE( 181)						_hx_tmp28 = !(_this6->ignore_listeners);
            					}
            					else {
HXLINE( 181)						_hx_tmp28 = false;
            					}
HXDLIN( 181)					if (_hx_tmp28) {
HXLINE( 181)						_this6->listen_y(_y3);
            					}
            				}
            			}
HXDLIN( 181)			_this6->ignore_listeners = prev6;
HXDLIN( 181)			bool _hx_tmp29;
HXDLIN( 181)			if (hx::IsNotNull( _this6->listen_x )) {
HXLINE( 181)				_hx_tmp29 = !(_this6->ignore_listeners);
            			}
            			else {
HXLINE( 181)				_hx_tmp29 = false;
            			}
HXDLIN( 181)			if (_hx_tmp29) {
HXLINE( 181)				_this6->listen_x(_this6->x);
            			}
HXDLIN( 181)			bool _hx_tmp30;
HXDLIN( 181)			if (hx::IsNotNull( _this6->listen_y )) {
HXLINE( 181)				_hx_tmp30 = !(_this6->ignore_listeners);
            			}
            			else {
HXLINE( 181)				_hx_tmp30 = false;
            			}
HXDLIN( 181)			if (_hx_tmp30) {
HXLINE( 181)				_this6->listen_y(_this6->y);
            			}
            		}
HXLINE( 182)		this->slices->__get((int)6)->__SetField(HX_("width",06,b6,62,ca),this->left,hx::paccDynamic);
HXLINE( 183)		this->slices->__get((int)6)->__SetField(HX_("height",e7,07,4c,02),this->bottom,hx::paccDynamic);
HXLINE( 186)		this->slices->__get((int)7)->__SetField(HX_("source_width",62,44,bc,87),((this->source_w - this->left) - this->right),hx::paccDynamic);
HXLINE( 187)		this->slices->__get((int)7)->__SetField(HX_("source_height",0b,0a,4f,f3),this->bottom,hx::paccDynamic);
HXLINE( 188)		this->slices->__get((int)7)->__SetField(HX_("source_x",d4,30,a4,66),(this->source_x + this->left),hx::paccDynamic);
HXLINE( 189)		Float _hx_tmp31 = this->source_y;
HXDLIN( 189)		this->slices->__get((int)7)->__SetField(HX_("source_y",d5,30,a4,66),(_hx_tmp31 + (this->source_h - this->bottom)),hx::paccDynamic);
HXLINE( 190)		{
HXLINE( 190)			 ::phoenix::Vector _this7 = ( ( ::phoenix::Vector)(this->slices->__get((int)7)->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXDLIN( 190)			Float _x4 = this->left;
HXDLIN( 190)			Float _y4 = (this->top + this->midheight);
HXDLIN( 190)			bool prev7 = _this7->ignore_listeners;
HXDLIN( 190)			_this7->ignore_listeners = true;
HXDLIN( 190)			{
HXLINE( 190)				_this7->x = _x4;
HXDLIN( 190)				if (!(_this7->_construct)) {
HXLINE( 190)					bool _hx_tmp32;
HXDLIN( 190)					if (hx::IsNotNull( _this7->listen_x )) {
HXLINE( 190)						_hx_tmp32 = !(_this7->ignore_listeners);
            					}
            					else {
HXLINE( 190)						_hx_tmp32 = false;
            					}
HXDLIN( 190)					if (_hx_tmp32) {
HXLINE( 190)						_this7->listen_x(_x4);
            					}
            				}
            			}
HXDLIN( 190)			{
HXLINE( 190)				_this7->y = _y4;
HXDLIN( 190)				if (!(_this7->_construct)) {
HXLINE( 190)					bool _hx_tmp33;
HXDLIN( 190)					if (hx::IsNotNull( _this7->listen_y )) {
HXLINE( 190)						_hx_tmp33 = !(_this7->ignore_listeners);
            					}
            					else {
HXLINE( 190)						_hx_tmp33 = false;
            					}
HXDLIN( 190)					if (_hx_tmp33) {
HXLINE( 190)						_this7->listen_y(_y4);
            					}
            				}
            			}
HXDLIN( 190)			_this7->ignore_listeners = prev7;
HXDLIN( 190)			bool _hx_tmp34;
HXDLIN( 190)			if (hx::IsNotNull( _this7->listen_x )) {
HXLINE( 190)				_hx_tmp34 = !(_this7->ignore_listeners);
            			}
            			else {
HXLINE( 190)				_hx_tmp34 = false;
            			}
HXDLIN( 190)			if (_hx_tmp34) {
HXLINE( 190)				_this7->listen_x(_this7->x);
            			}
HXDLIN( 190)			bool _hx_tmp35;
HXDLIN( 190)			if (hx::IsNotNull( _this7->listen_y )) {
HXLINE( 190)				_hx_tmp35 = !(_this7->ignore_listeners);
            			}
            			else {
HXLINE( 190)				_hx_tmp35 = false;
            			}
HXDLIN( 190)			if (_hx_tmp35) {
HXLINE( 190)				_this7->listen_y(_this7->y);
            			}
            		}
HXLINE( 191)		this->slices->__get((int)7)->__SetField(HX_("width",06,b6,62,ca),((this->width - this->left) - this->right),hx::paccDynamic);
HXLINE( 192)		this->slices->__get((int)7)->__SetField(HX_("height",e7,07,4c,02),this->bottom,hx::paccDynamic);
HXLINE( 195)		this->slices->__get((int)8)->__SetField(HX_("source_width",62,44,bc,87),this->right,hx::paccDynamic);
HXLINE( 196)		this->slices->__get((int)8)->__SetField(HX_("source_height",0b,0a,4f,f3),this->bottom,hx::paccDynamic);
HXLINE( 197)		Float _hx_tmp36 = this->source_x;
HXDLIN( 197)		this->slices->__get((int)8)->__SetField(HX_("source_x",d4,30,a4,66),(_hx_tmp36 + (this->source_w - this->right)),hx::paccDynamic);
HXLINE( 198)		Float _hx_tmp37 = this->source_y;
HXDLIN( 198)		this->slices->__get((int)8)->__SetField(HX_("source_y",d5,30,a4,66),(_hx_tmp37 + (this->source_h - this->bottom)),hx::paccDynamic);
HXLINE( 199)		{
HXLINE( 199)			 ::phoenix::Vector _this8 = ( ( ::phoenix::Vector)(this->slices->__get((int)8)->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXDLIN( 199)			Float _x5 = (this->left + this->midwidth);
HXDLIN( 199)			Float _y5 = (this->top + this->midheight);
HXDLIN( 199)			bool prev8 = _this8->ignore_listeners;
HXDLIN( 199)			_this8->ignore_listeners = true;
HXDLIN( 199)			{
HXLINE( 199)				_this8->x = _x5;
HXDLIN( 199)				if (!(_this8->_construct)) {
HXLINE( 199)					bool _hx_tmp38;
HXDLIN( 199)					if (hx::IsNotNull( _this8->listen_x )) {
HXLINE( 199)						_hx_tmp38 = !(_this8->ignore_listeners);
            					}
            					else {
HXLINE( 199)						_hx_tmp38 = false;
            					}
HXDLIN( 199)					if (_hx_tmp38) {
HXLINE( 199)						_this8->listen_x(_x5);
            					}
            				}
            			}
HXDLIN( 199)			{
HXLINE( 199)				_this8->y = _y5;
HXDLIN( 199)				if (!(_this8->_construct)) {
HXLINE( 199)					bool _hx_tmp39;
HXDLIN( 199)					if (hx::IsNotNull( _this8->listen_y )) {
HXLINE( 199)						_hx_tmp39 = !(_this8->ignore_listeners);
            					}
            					else {
HXLINE( 199)						_hx_tmp39 = false;
            					}
HXDLIN( 199)					if (_hx_tmp39) {
HXLINE( 199)						_this8->listen_y(_y5);
            					}
            				}
            			}
HXDLIN( 199)			_this8->ignore_listeners = prev8;
HXDLIN( 199)			bool _hx_tmp40;
HXDLIN( 199)			if (hx::IsNotNull( _this8->listen_x )) {
HXLINE( 199)				_hx_tmp40 = !(_this8->ignore_listeners);
            			}
            			else {
HXLINE( 199)				_hx_tmp40 = false;
            			}
HXDLIN( 199)			if (_hx_tmp40) {
HXLINE( 199)				_this8->listen_x(_this8->x);
            			}
HXDLIN( 199)			bool _hx_tmp41;
HXDLIN( 199)			if (hx::IsNotNull( _this8->listen_y )) {
HXLINE( 199)				_hx_tmp41 = !(_this8->ignore_listeners);
            			}
            			else {
HXLINE( 199)				_hx_tmp41 = false;
            			}
HXDLIN( 199)			if (_hx_tmp41) {
HXLINE( 199)				_this8->listen_y(_this8->y);
            			}
            		}
HXLINE( 200)		this->slices->__get((int)8)->__SetField(HX_("width",06,b6,62,ca),this->right,hx::paccDynamic);
HXLINE( 201)		this->slices->__get((int)8)->__SetField(HX_("height",e7,07,4c,02),this->bottom,hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NineSlice_obj,update_size,(void))

void NineSlice_obj::set(Float _width,Float _height){
            	HX_GC_STACKFRAME(&_hx_pos_fea579081f41c43a_205_set)
HXLINE( 207)		if (this->added) {
HXLINE( 208)			this->_geometry->drop(null());
HXLINE( 209)			this->added = false;
            		}
HXLINE( 213)		this->slices->removeRange((int)0,this->slices->length);
HXLINE( 214)		this->width = _width;
HXLINE( 215)		this->height = _height;
HXLINE( 217)		this->midwidth = ::Math_obj::abs(((this->width - this->left) - this->right));
HXLINE( 218)		this->midheight = ::Math_obj::abs(((this->height - this->top) - this->bottom));
HXLINE( 221)		::Array< ::Dynamic> _hx_tmp = this->slices;
HXLINE( 222)		Float _hx_tmp1 = this->left;
HXLINE( 223)		Float _hx_tmp2 = this->top;
HXLINE( 224)		Float _hx_tmp3 = this->source_x;
HXLINE( 225)		Float _hx_tmp4 = this->source_y;
HXLINE( 221)		_hx_tmp->push( ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("source_width",62,44,bc,87),_hx_tmp1)
            			->setFixed(1,HX_("width",06,b6,62,ca),this->left)
            			->setFixed(2,HX_("source_height",0b,0a,4f,f3),_hx_tmp2)
            			->setFixed(3,HX_("pos",94,5d,55,00), ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()))
            			->setFixed(4,HX_("height",e7,07,4c,02),this->top)
            			->setFixed(5,HX_("geometry_id",88,aa,54,45),(int)0)
            			->setFixed(6,HX_("source_x",d4,30,a4,66),_hx_tmp3)
            			->setFixed(7,HX_("source_y",d5,30,a4,66),_hx_tmp4)));
HXLINE( 232)		::Array< ::Dynamic> _hx_tmp5 = this->slices;
HXLINE( 233)		Float _hx_tmp6 = ((this->source_w - this->left) - this->right);
HXLINE( 234)		Float _hx_tmp7 = this->top;
HXLINE( 235)		Float _hx_tmp8 = (this->source_x + this->left);
HXLINE( 236)		Float _hx_tmp9 = this->source_y;
HXLINE( 237)		 ::phoenix::Vector _hx_tmp10 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,this->left,(int)0,null(),null());
HXLINE( 232)		_hx_tmp5->push( ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("source_width",62,44,bc,87),_hx_tmp6)
            			->setFixed(1,HX_("width",06,b6,62,ca),((this->width - this->left) - this->right))
            			->setFixed(2,HX_("source_height",0b,0a,4f,f3),_hx_tmp7)
            			->setFixed(3,HX_("pos",94,5d,55,00),_hx_tmp10)
            			->setFixed(4,HX_("height",e7,07,4c,02),this->top)
            			->setFixed(5,HX_("geometry_id",88,aa,54,45),(int)0)
            			->setFixed(6,HX_("source_x",d4,30,a4,66),_hx_tmp8)
            			->setFixed(7,HX_("source_y",d5,30,a4,66),_hx_tmp9)));
HXLINE( 243)		::Array< ::Dynamic> _hx_tmp11 = this->slices;
HXLINE( 244)		Float _hx_tmp12 = this->right;
HXLINE( 245)		Float _hx_tmp13 = this->top;
HXLINE( 246)		Float _hx_tmp14 = this->source_x;
HXDLIN( 246)		Float _hx_tmp15 = (_hx_tmp14 + (this->source_w - this->right));
HXLINE( 247)		Float _hx_tmp16 = this->source_y;
HXLINE( 243)		_hx_tmp11->push( ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("source_width",62,44,bc,87),_hx_tmp12)
            			->setFixed(1,HX_("width",06,b6,62,ca),this->right)
            			->setFixed(2,HX_("source_height",0b,0a,4f,f3),_hx_tmp13)
            			->setFixed(3,HX_("pos",94,5d,55,00), ::phoenix::Vector_obj::__alloc( HX_CTX ,(this->left + this->midwidth),(int)0,null(),null()))
            			->setFixed(4,HX_("height",e7,07,4c,02),this->top)
            			->setFixed(5,HX_("geometry_id",88,aa,54,45),(int)0)
            			->setFixed(6,HX_("source_x",d4,30,a4,66),_hx_tmp15)
            			->setFixed(7,HX_("source_y",d5,30,a4,66),_hx_tmp16)));
HXLINE( 256)		::Array< ::Dynamic> _hx_tmp17 = this->slices;
HXLINE( 257)		Float _hx_tmp18 = this->left;
HXLINE( 258)		Float _hx_tmp19 = ((this->source_h - this->top) - this->bottom);
HXLINE( 259)		Float _hx_tmp20 = this->source_x;
HXLINE( 260)		Float _hx_tmp21 = (this->source_y + this->top);
HXLINE( 261)		 ::phoenix::Vector _hx_tmp22 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,this->top,null(),null());
HXLINE( 262)		Float _hx_tmp23 = this->left;
HXLINE( 256)		_hx_tmp17->push( ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("source_width",62,44,bc,87),_hx_tmp18)
            			->setFixed(1,HX_("width",06,b6,62,ca),_hx_tmp23)
            			->setFixed(2,HX_("source_height",0b,0a,4f,f3),_hx_tmp19)
            			->setFixed(3,HX_("pos",94,5d,55,00),_hx_tmp22)
            			->setFixed(4,HX_("height",e7,07,4c,02),((this->height - this->top) - this->bottom))
            			->setFixed(5,HX_("geometry_id",88,aa,54,45),(int)0)
            			->setFixed(6,HX_("source_x",d4,30,a4,66),_hx_tmp20)
            			->setFixed(7,HX_("source_y",d5,30,a4,66),_hx_tmp21)));
HXLINE( 267)		::Array< ::Dynamic> _hx_tmp24 = this->slices;
HXLINE( 268)		Float _hx_tmp25 = ((this->source_w - this->left) - this->right);
HXLINE( 269)		Float _hx_tmp26 = ((this->source_h - this->top) - this->bottom);
HXLINE( 270)		Float _hx_tmp27 = (this->source_x + this->left);
HXLINE( 271)		Float _hx_tmp28 = (this->source_y + this->top);
HXLINE( 272)		 ::phoenix::Vector _hx_tmp29 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,this->left,this->top,null(),null());
HXLINE( 273)		Float _hx_tmp30 = ((this->width - this->left) - this->right);
HXLINE( 267)		_hx_tmp24->push( ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("source_width",62,44,bc,87),_hx_tmp25)
            			->setFixed(1,HX_("width",06,b6,62,ca),_hx_tmp30)
            			->setFixed(2,HX_("source_height",0b,0a,4f,f3),_hx_tmp26)
            			->setFixed(3,HX_("pos",94,5d,55,00),_hx_tmp29)
            			->setFixed(4,HX_("height",e7,07,4c,02),((this->height - this->top) - this->bottom))
            			->setFixed(5,HX_("geometry_id",88,aa,54,45),(int)0)
            			->setFixed(6,HX_("source_x",d4,30,a4,66),_hx_tmp27)
            			->setFixed(7,HX_("source_y",d5,30,a4,66),_hx_tmp28)));
HXLINE( 278)		::Array< ::Dynamic> _hx_tmp31 = this->slices;
HXLINE( 279)		Float _hx_tmp32 = this->right;
HXLINE( 280)		Float _hx_tmp33 = ((this->source_h - this->top) - this->bottom);
HXLINE( 281)		Float _hx_tmp34 = this->source_x;
HXDLIN( 281)		Float _hx_tmp35 = (_hx_tmp34 + (this->source_w - this->right));
HXLINE( 282)		Float _hx_tmp36 = (this->source_y + this->top);
HXLINE( 283)		 ::phoenix::Vector _hx_tmp37 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(this->left + this->midwidth),this->top,null(),null());
HXLINE( 284)		Float _hx_tmp38 = this->right;
HXLINE( 278)		_hx_tmp31->push( ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("source_width",62,44,bc,87),_hx_tmp32)
            			->setFixed(1,HX_("width",06,b6,62,ca),_hx_tmp38)
            			->setFixed(2,HX_("source_height",0b,0a,4f,f3),_hx_tmp33)
            			->setFixed(3,HX_("pos",94,5d,55,00),_hx_tmp37)
            			->setFixed(4,HX_("height",e7,07,4c,02),((this->height - this->top) - this->bottom))
            			->setFixed(5,HX_("geometry_id",88,aa,54,45),(int)0)
            			->setFixed(6,HX_("source_x",d4,30,a4,66),_hx_tmp35)
            			->setFixed(7,HX_("source_y",d5,30,a4,66),_hx_tmp36)));
HXLINE( 291)		::Array< ::Dynamic> _hx_tmp39 = this->slices;
HXLINE( 292)		Float _hx_tmp40 = this->left;
HXLINE( 293)		Float _hx_tmp41 = this->bottom;
HXLINE( 294)		Float _hx_tmp42 = this->source_x;
HXLINE( 295)		Float _hx_tmp43 = this->source_y;
HXDLIN( 295)		Float _hx_tmp44 = (_hx_tmp43 + (this->source_h - this->bottom));
HXLINE( 291)		_hx_tmp39->push( ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("source_width",62,44,bc,87),_hx_tmp40)
            			->setFixed(1,HX_("width",06,b6,62,ca),this->left)
            			->setFixed(2,HX_("source_height",0b,0a,4f,f3),_hx_tmp41)
            			->setFixed(3,HX_("pos",94,5d,55,00), ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(this->top + this->midheight),null(),null()))
            			->setFixed(4,HX_("height",e7,07,4c,02),this->bottom)
            			->setFixed(5,HX_("geometry_id",88,aa,54,45),(int)0)
            			->setFixed(6,HX_("source_x",d4,30,a4,66),_hx_tmp42)
            			->setFixed(7,HX_("source_y",d5,30,a4,66),_hx_tmp44)));
HXLINE( 302)		::Array< ::Dynamic> _hx_tmp45 = this->slices;
HXLINE( 303)		Float _hx_tmp46 = ((this->source_w - this->left) - this->right);
HXLINE( 304)		Float _hx_tmp47 = this->bottom;
HXLINE( 305)		Float _hx_tmp48 = (this->source_x + this->left);
HXLINE( 306)		Float _hx_tmp49 = this->source_y;
HXDLIN( 306)		Float _hx_tmp50 = (_hx_tmp49 + (this->source_h - this->bottom));
HXLINE( 307)		Float _hx_tmp51 = this->left;
HXDLIN( 307)		 ::phoenix::Vector _hx_tmp52 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp51,(this->top + this->midheight),null(),null());
HXLINE( 302)		_hx_tmp45->push( ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("source_width",62,44,bc,87),_hx_tmp46)
            			->setFixed(1,HX_("width",06,b6,62,ca),((this->width - this->left) - this->right))
            			->setFixed(2,HX_("source_height",0b,0a,4f,f3),_hx_tmp47)
            			->setFixed(3,HX_("pos",94,5d,55,00),_hx_tmp52)
            			->setFixed(4,HX_("height",e7,07,4c,02),this->bottom)
            			->setFixed(5,HX_("geometry_id",88,aa,54,45),(int)0)
            			->setFixed(6,HX_("source_x",d4,30,a4,66),_hx_tmp48)
            			->setFixed(7,HX_("source_y",d5,30,a4,66),_hx_tmp50)));
HXLINE( 313)		::Array< ::Dynamic> _hx_tmp53 = this->slices;
HXLINE( 314)		Float _hx_tmp54 = this->right;
HXLINE( 315)		Float _hx_tmp55 = this->bottom;
HXLINE( 316)		Float _hx_tmp56 = this->source_x;
HXDLIN( 316)		Float _hx_tmp57 = (_hx_tmp56 + (this->source_w - this->right));
HXLINE( 317)		Float _hx_tmp58 = this->source_y;
HXDLIN( 317)		Float _hx_tmp59 = (_hx_tmp58 + (this->source_h - this->bottom));
HXLINE( 318)		Float _hx_tmp60 = (this->left + this->midwidth);
HXLINE( 313)		_hx_tmp53->push( ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("source_width",62,44,bc,87),_hx_tmp54)
            			->setFixed(1,HX_("width",06,b6,62,ca),this->right)
            			->setFixed(2,HX_("source_height",0b,0a,4f,f3),_hx_tmp55)
            			->setFixed(3,HX_("pos",94,5d,55,00), ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp60,(this->top + this->midheight),null(),null()))
            			->setFixed(4,HX_("height",e7,07,4c,02),this->bottom)
            			->setFixed(5,HX_("geometry_id",88,aa,54,45),(int)0)
            			->setFixed(6,HX_("source_x",d4,30,a4,66),_hx_tmp57)
            			->setFixed(7,HX_("source_y",d5,30,a4,66),_hx_tmp59)));
HXLINE( 324)		this->is_set = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(NineSlice_obj,set,(void))

 ::phoenix::Vector NineSlice_obj::set_size( ::phoenix::Vector _v){
            	HX_GC_STACKFRAME(&_hx_pos_fea579081f41c43a_328_set_size)
HXLINE( 330)		if (hx::IsNull( _v )) {
HXLINE( 331)			return this->super::set_size(_v);
            		}
HXLINE( 334)		if (!(this->is_set)) {
HXLINE( 335)			return this->super::set_size(_v);
            		}
HXLINE( 339)		this->update_size(_v->x,_v->y);
HXLINE( 341)		{
HXLINE( 341)			int _g = (int)0;
HXDLIN( 341)			::Array< ::Dynamic> _g1 = this->slices;
HXDLIN( 341)			while((_g < _g1->length)){
HXLINE( 341)				 ::Dynamic slice = _g1->__get(_g);
HXDLIN( 341)				_g = (_g + (int)1);
HXLINE( 342)				if (hx::IsNotNull( this->_geometry )) {
HXLINE( 343)					 ::phoenix::geometry::QuadPackGeometry _hx_tmp = this->_geometry;
HXDLIN( 343)					int slice1 = ( (int)(slice->__Field(HX_("geometry_id",88,aa,54,45),hx::paccDynamic)) );
HXDLIN( 343)					_hx_tmp->quad_resize(slice1, ::phoenix::Rectangle_obj::__alloc( HX_CTX ,( ( ::phoenix::Vector)(slice->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) )->x,( ( ::phoenix::Vector)(slice->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) )->y, ::Dynamic(slice->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(slice->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic))));
            				}
            			}
            		}
HXLINE( 347)		return this->super::set_size(_v);
            	}


void NineSlice_obj::_create( ::phoenix::Vector _pos,Float _w,Float _h, ::Dynamic __o__reset){
 ::Dynamic _reset = __o__reset.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_fea579081f41c43a_351__create)
HXLINE( 353)		bool _hx_tmp;
HXDLIN( 353)		if (!(!(this->is_set))) {
HXLINE( 353)			_hx_tmp = _reset;
            		}
            		else {
HXLINE( 353)			_hx_tmp = true;
            		}
HXDLIN( 353)		if (_hx_tmp) {
HXLINE( 354)			this->set(_w,_h);
            		}
HXLINE( 357)		 ::phoenix::Color _color =  ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 359)		this->_geometry =  ::phoenix::geometry::QuadPackGeometry_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("texture",db,c8,e0,9e),this->texture)
            			->setFixed(1,HX_("visible",72,78,24,a3), ::Dynamic(this->nineslice_options->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)))
            			->setFixed(2,HX_("batcher",a7,22,10,c0),this->_batcher)
            			->setFixed(3,HX_("depth",03,f1,29,d7), ::Dynamic(this->nineslice_options->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic)))
            			->setFixed(4,HX_("color",63,71,5c,4a),_color)));
HXLINE( 367)		{
HXLINE( 367)			int _g = (int)0;
HXDLIN( 367)			::Array< ::Dynamic> _g1 = this->slices;
HXDLIN( 367)			while((_g < _g1->length)){
HXLINE( 367)				 ::Dynamic slice = _g1->__get(_g);
HXDLIN( 367)				_g = (_g + (int)1);
HXLINE( 369)				 ::phoenix::geometry::QuadPackGeometry _hx_tmp1 = this->_geometry;
HXLINE( 370)				Float slice1 = ( ( ::phoenix::Vector)(slice->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) )->x;
HXLINE( 371)				Float slice2 = ( ( ::phoenix::Vector)(slice->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) )->y;
HXLINE( 372)				Float slice3 = ( (Float)(slice->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) );
HXLINE( 373)				Float slice4 = ( (Float)(slice->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) );
HXLINE( 374)				 ::phoenix::Color _hx_tmp2 = ( ( ::phoenix::Color)(this->nineslice_options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)) );
HXLINE( 369)				slice->__SetField(HX_("geometry_id",88,aa,54,45),_hx_tmp1->quad_add( ::Dynamic(hx::Anon_obj::Create(6)
            					->setFixed(0,HX_("h",68,00,00,00),slice4)
            					->setFixed(1,HX_("w",77,00,00,00),slice3)
            					->setFixed(2,HX_("x",78,00,00,00),slice1)
            					->setFixed(3,HX_("y",79,00,00,00),slice2)
            					->setFixed(4,HX_("uv",61,66,00,00), ::phoenix::Rectangle_obj::__alloc( HX_CTX , ::Dynamic(slice->__Field(HX_("source_x",d4,30,a4,66),hx::paccDynamic)), ::Dynamic(slice->__Field(HX_("source_y",d5,30,a4,66),hx::paccDynamic)), ::Dynamic(slice->__Field(HX_("source_width",62,44,bc,87),hx::paccDynamic)), ::Dynamic(slice->__Field(HX_("source_height",0b,0a,4f,f3),hx::paccDynamic))))
            					->setFixed(5,HX_("color",63,71,5c,4a),_hx_tmp2))),hx::paccDynamic);
            			}
            		}
HXLINE( 382)		::String _hx_tmp3 = (this->get_name() + HX_(".NineSlice.",3c,38,e9,e3));
HXDLIN( 382)		this->_geometry->id = (_hx_tmp3 + this->_geometry->id);
HXLINE( 383)		this->set_geometry(this->_geometry);
HXLINE( 384)		this->set_pos(_pos);
HXLINE( 386)		this->added = true;
HXLINE( 387)		this->is_set = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(NineSlice_obj,_create,(void))

void NineSlice_obj::create( ::phoenix::Vector _pos,Float _w,Float _h, ::Dynamic __o__reset){
 ::Dynamic _reset = __o__reset.Default(false);
            	HX_STACKFRAME(&_hx_pos_fea579081f41c43a_393_create)
HXDLIN( 393)		if (hx::IsNotNull( this->texture )) {
HXLINE( 394)			this->_create(_pos,_w,_h,_reset);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(NineSlice_obj,create,(void))

void NineSlice_obj::init(){
            	HX_STACKFRAME(&_hx_pos_f26be4e2fce9d6de_35_init)
HXDLIN(  35)		this->super::init();
            	}


void NineSlice_obj::ondestroy(){
            	HX_STACKFRAME(&_hx_pos_f26be4e2fce9d6de_47_ondestroy)
HXDLIN(  47)		this->super::ondestroy();
            	}



hx::ObjectPtr< NineSlice_obj > NineSlice_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< NineSlice_obj > __this = new NineSlice_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< NineSlice_obj > NineSlice_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	NineSlice_obj *__this = (NineSlice_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NineSlice_obj), true, "luxe.NineSlice"));
	*(void **)__this = NineSlice_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

NineSlice_obj::NineSlice_obj()
{
}

void NineSlice_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NineSlice);
	HX_MARK_MEMBER_NAME(top,"top");
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(right,"right");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(bottom,"bottom");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(source_x,"source_x");
	HX_MARK_MEMBER_NAME(source_y,"source_y");
	HX_MARK_MEMBER_NAME(source_w,"source_w");
	HX_MARK_MEMBER_NAME(source_h,"source_h");
	HX_MARK_MEMBER_NAME(is_set,"is_set");
	HX_MARK_MEMBER_NAME(midwidth,"midwidth");
	HX_MARK_MEMBER_NAME(midheight,"midheight");
	HX_MARK_MEMBER_NAME(slices,"slices");
	HX_MARK_MEMBER_NAME(added,"added");
	HX_MARK_MEMBER_NAME(nineslice_options,"nineslice_options");
	HX_MARK_MEMBER_NAME(_geometry,"_geometry");
	HX_MARK_MEMBER_NAME(_batcher,"_batcher");
	 ::luxe::Visual_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NineSlice_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(top,"top");
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(right,"right");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(bottom,"bottom");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(source_x,"source_x");
	HX_VISIT_MEMBER_NAME(source_y,"source_y");
	HX_VISIT_MEMBER_NAME(source_w,"source_w");
	HX_VISIT_MEMBER_NAME(source_h,"source_h");
	HX_VISIT_MEMBER_NAME(is_set,"is_set");
	HX_VISIT_MEMBER_NAME(midwidth,"midwidth");
	HX_VISIT_MEMBER_NAME(midheight,"midheight");
	HX_VISIT_MEMBER_NAME(slices,"slices");
	HX_VISIT_MEMBER_NAME(added,"added");
	HX_VISIT_MEMBER_NAME(nineslice_options,"nineslice_options");
	HX_VISIT_MEMBER_NAME(_geometry,"_geometry");
	HX_VISIT_MEMBER_NAME(_batcher,"_batcher");
	 ::luxe::Visual_obj::__Visit(HX_VISIT_ARG);
}

hx::Val NineSlice_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { return hx::Val( top ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return hx::Val( left ); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn() ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"added") ) { return hx::Val( added ); }
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( dirty_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { return hx::Val( bottom ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"is_set") ) { return hx::Val( is_set ); }
		if (HX_FIELD_EQ(inName,"slices") ) { return hx::Val( slices ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_create") ) { return hx::Val( _create_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"source_x") ) { return hx::Val( source_x ); }
		if (HX_FIELD_EQ(inName,"source_y") ) { return hx::Val( source_y ); }
		if (HX_FIELD_EQ(inName,"source_w") ) { return hx::Val( source_w ); }
		if (HX_FIELD_EQ(inName,"source_h") ) { return hx::Val( source_h ); }
		if (HX_FIELD_EQ(inName,"midwidth") ) { return hx::Val( midwidth ); }
		if (HX_FIELD_EQ(inName,"_batcher") ) { return hx::Val( _batcher ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"midheight") ) { return hx::Val( midheight ); }
		if (HX_FIELD_EQ(inName,"_geometry") ) { return hx::Val( _geometry ); }
		if (HX_FIELD_EQ(inName,"ondestroy") ) { return hx::Val( ondestroy_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"update_size") ) { return hx::Val( update_size_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nineslice_options") ) { return hx::Val( nineslice_options ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NineSlice_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { top=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"added") ) { added=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { bottom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"is_set") ) { is_set=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"slices") ) { slices=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"source_x") ) { source_x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"source_y") ) { source_y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"source_w") ) { source_w=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"source_h") ) { source_h=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"midwidth") ) { midwidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_batcher") ) { _batcher=inValue.Cast<  ::phoenix::Batcher >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"midheight") ) { midheight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_geometry") ) { _geometry=inValue.Cast<  ::phoenix::geometry::QuadPackGeometry >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nineslice_options") ) { nineslice_options=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NineSlice_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("top","\x95","\x66","\x58","\x00"));
	outFields->push(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
	outFields->push(HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("bottom","\xeb","\xe6","\x78","\x65"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("source_x","\xd4","\x30","\xa4","\x66"));
	outFields->push(HX_HCSTRING("source_y","\xd5","\x30","\xa4","\x66"));
	outFields->push(HX_HCSTRING("source_w","\xd3","\x30","\xa4","\x66"));
	outFields->push(HX_HCSTRING("source_h","\xc4","\x30","\xa4","\x66"));
	outFields->push(HX_HCSTRING("is_set","\x8d","\x79","\xb0","\x71"));
	outFields->push(HX_HCSTRING("midwidth","\x7e","\x17","\xdb","\x2e"));
	outFields->push(HX_HCSTRING("midheight","\x6f","\xef","\x28","\x87"));
	outFields->push(HX_HCSTRING("slices","\xe1","\x03","\x04","\x70"));
	outFields->push(HX_HCSTRING("added","\xc0","\xd4","\x43","\x1c"));
	outFields->push(HX_HCSTRING("nineslice_options","\xbf","\x96","\x3b","\x67"));
	outFields->push(HX_HCSTRING("_geometry","\x11","\xfa","\x3e","\x1a"));
	outFields->push(HX_HCSTRING("_batcher","\x28","\x7c","\xc8","\xf9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NineSlice_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(NineSlice_obj,top),HX_HCSTRING("top","\x95","\x66","\x58","\x00")},
	{hx::fsFloat,(int)offsetof(NineSlice_obj,left),HX_HCSTRING("left","\x07","\x08","\xb0","\x47")},
	{hx::fsFloat,(int)offsetof(NineSlice_obj,right),HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9")},
	{hx::fsFloat,(int)offsetof(NineSlice_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(NineSlice_obj,bottom),HX_HCSTRING("bottom","\xeb","\xe6","\x78","\x65")},
	{hx::fsFloat,(int)offsetof(NineSlice_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsFloat,(int)offsetof(NineSlice_obj,source_x),HX_HCSTRING("source_x","\xd4","\x30","\xa4","\x66")},
	{hx::fsFloat,(int)offsetof(NineSlice_obj,source_y),HX_HCSTRING("source_y","\xd5","\x30","\xa4","\x66")},
	{hx::fsFloat,(int)offsetof(NineSlice_obj,source_w),HX_HCSTRING("source_w","\xd3","\x30","\xa4","\x66")},
	{hx::fsFloat,(int)offsetof(NineSlice_obj,source_h),HX_HCSTRING("source_h","\xc4","\x30","\xa4","\x66")},
	{hx::fsBool,(int)offsetof(NineSlice_obj,is_set),HX_HCSTRING("is_set","\x8d","\x79","\xb0","\x71")},
	{hx::fsFloat,(int)offsetof(NineSlice_obj,midwidth),HX_HCSTRING("midwidth","\x7e","\x17","\xdb","\x2e")},
	{hx::fsFloat,(int)offsetof(NineSlice_obj,midheight),HX_HCSTRING("midheight","\x6f","\xef","\x28","\x87")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(NineSlice_obj,slices),HX_HCSTRING("slices","\xe1","\x03","\x04","\x70")},
	{hx::fsBool,(int)offsetof(NineSlice_obj,added),HX_HCSTRING("added","\xc0","\xd4","\x43","\x1c")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NineSlice_obj,nineslice_options),HX_HCSTRING("nineslice_options","\xbf","\x96","\x3b","\x67")},
	{hx::fsObject /*::phoenix::geometry::QuadPackGeometry*/ ,(int)offsetof(NineSlice_obj,_geometry),HX_HCSTRING("_geometry","\x11","\xfa","\x3e","\x1a")},
	{hx::fsObject /*::phoenix::Batcher*/ ,(int)offsetof(NineSlice_obj,_batcher),HX_HCSTRING("_batcher","\x28","\x7c","\xc8","\xf9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NineSlice_obj_sStaticStorageInfo = 0;
#endif

static ::String NineSlice_obj_sMemberFields[] = {
	HX_HCSTRING("top","\x95","\x66","\x58","\x00"),
	HX_HCSTRING("left","\x07","\x08","\xb0","\x47"),
	HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("bottom","\xeb","\xe6","\x78","\x65"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("source_x","\xd4","\x30","\xa4","\x66"),
	HX_HCSTRING("source_y","\xd5","\x30","\xa4","\x66"),
	HX_HCSTRING("source_w","\xd3","\x30","\xa4","\x66"),
	HX_HCSTRING("source_h","\xc4","\x30","\xa4","\x66"),
	HX_HCSTRING("is_set","\x8d","\x79","\xb0","\x71"),
	HX_HCSTRING("midwidth","\x7e","\x17","\xdb","\x2e"),
	HX_HCSTRING("midheight","\x6f","\xef","\x28","\x87"),
	HX_HCSTRING("slices","\xe1","\x03","\x04","\x70"),
	HX_HCSTRING("added","\xc0","\xd4","\x43","\x1c"),
	HX_HCSTRING("nineslice_options","\xbf","\x96","\x3b","\x67"),
	HX_HCSTRING("_geometry","\x11","\xfa","\x3e","\x1a"),
	HX_HCSTRING("_batcher","\x28","\x7c","\xc8","\xf9"),
	HX_HCSTRING("lock","\xeb","\x9b","\xb7","\x47"),
	HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"),
	HX_HCSTRING("update_size","\xf7","\xb5","\xcf","\x51"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("_create","\x9b","\x78","\x86","\xea"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("ondestroy","\xbb","\xbd","\xdf","\x2e"),
	::String(null()) };

static void NineSlice_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NineSlice_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NineSlice_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NineSlice_obj::__mClass,"__mClass");
};

#endif

hx::Class NineSlice_obj::__mClass;

void NineSlice_obj::__register()
{
	hx::Object *dummy = new NineSlice_obj;
	NineSlice_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.NineSlice","\xe8","\x3e","\x6e","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NineSlice_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NineSlice_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NineSlice_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NineSlice_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NineSlice_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NineSlice_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
