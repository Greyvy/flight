// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_ResourceStats
#include <luxe/ResourceStats.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d14c7cfc88992408_462_new,"luxe.ResourceStats","new",0x5187990b,"luxe.ResourceStats.new","luxe/Resources.hx",462,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_d14c7cfc88992408_481_toString,"luxe.ResourceStats","toString",0x6d8cbc21,"luxe.ResourceStats.toString","luxe/Resources.hx",481,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_d14c7cfc88992408_496_reset,"luxe.ResourceStats","reset",0xc2ffd33a,"luxe.ResourceStats.reset","luxe/Resources.hx",496,0x2b4e2952)
namespace luxe{

void ResourceStats_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d14c7cfc88992408_462_new)
HXLINE( 473)		this->unknown = (int)0;
HXLINE( 472)		this->audios = (int)0;
HXLINE( 471)		this->bytes = (int)0;
HXLINE( 470)		this->jsons = (int)0;
HXLINE( 469)		this->texts = (int)0;
HXLINE( 468)		this->shaders = (int)0;
HXLINE( 467)		this->rtt = (int)0;
HXLINE( 466)		this->textures = (int)0;
HXLINE( 465)		this->fonts = (int)0;
HXLINE( 464)		this->total = (int)0;
            	}

Dynamic ResourceStats_obj::__CreateEmpty() { return new ResourceStats_obj; }

void *ResourceStats_obj::_hx_vtable = 0;

Dynamic ResourceStats_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ResourceStats_obj > _hx_result = new ResourceStats_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ResourceStats_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5902249b;
}

::String ResourceStats_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_d14c7cfc88992408_481_toString)
HXDLIN( 481)		return ((((((((((((((((((((((((((((((HX_("Resource Statistics\n",35,79,ae,17) + HX_("\ttotal : ",8b,8a,e6,df)) + this->total) + HX_("\n",0a,00,00,00)) + HX_("\ttexture : ",14,32,78,38)) + this->textures) + HX_(" \n",ea,1b,00,00)) + HX_("",00,00,00,00)) + HX_("\trender texture : ",2c,83,8e,34)) + this->rtt) + HX_(" \n",ea,1b,00,00)) + HX_("\tfont : ",6e,6b,c9,98)) + this->fonts) + HX_("\n",0a,00,00,00)) + HX_("\tshader : ",98,37,cc,f1)) + this->shaders) + HX_("\n",0a,00,00,00)) + HX_("\ttext : ",50,1b,66,a1)) + this->texts) + HX_("\n",0a,00,00,00)) + HX_("\tjson : ",b5,04,fc,67)) + this->jsons) + HX_("\n",0a,00,00,00)) + HX_("\tbytes : ",44,f8,6b,cc)) + this->bytes) + HX_("\n",0a,00,00,00)) + HX_("\taudios : ",e0,d6,96,43)) + this->audios) + HX_("\n",0a,00,00,00)) + HX_("\tunknown : ",c5,6e,fe,02)) + this->unknown);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResourceStats_obj,toString,return )

void ResourceStats_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_d14c7cfc88992408_496_reset)
HXLINE( 498)		this->total = (int)0;
HXLINE( 499)		this->fonts = (int)0;
HXLINE( 500)		this->textures = (int)0;
HXLINE( 501)		this->rtt = (int)0;
HXLINE( 502)		this->shaders = (int)0;
HXLINE( 503)		this->texts = (int)0;
HXLINE( 504)		this->jsons = (int)0;
HXLINE( 505)		this->bytes = (int)0;
HXLINE( 506)		this->audios = (int)0;
HXLINE( 507)		this->unknown = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResourceStats_obj,reset,(void))


ResourceStats_obj::ResourceStats_obj()
{
}

hx::Val ResourceStats_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"rtt") ) { return hx::Val( rtt ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"total") ) { return hx::Val( total ); }
		if (HX_FIELD_EQ(inName,"fonts") ) { return hx::Val( fonts ); }
		if (HX_FIELD_EQ(inName,"texts") ) { return hx::Val( texts ); }
		if (HX_FIELD_EQ(inName,"jsons") ) { return hx::Val( jsons ); }
		if (HX_FIELD_EQ(inName,"bytes") ) { return hx::Val( bytes ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"audios") ) { return hx::Val( audios ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"shaders") ) { return hx::Val( shaders ); }
		if (HX_FIELD_EQ(inName,"unknown") ) { return hx::Val( unknown ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textures") ) { return hx::Val( textures ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ResourceStats_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"rtt") ) { rtt=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"total") ) { total=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fonts") ) { fonts=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texts") ) { texts=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jsons") ) { jsons=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bytes") ) { bytes=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"audios") ) { audios=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"shaders") ) { shaders=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unknown") ) { unknown=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textures") ) { textures=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ResourceStats_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("total","\xc4","\x53","\x32","\x14"));
	outFields->push(HX_HCSTRING("fonts","\xc4","\xb7","\x91","\x04"));
	outFields->push(HX_HCSTRING("textures","\x38","\xf7","\xce","\x65"));
	outFields->push(HX_HCSTRING("rtt","\x72","\xe6","\x56","\x00"));
	outFields->push(HX_HCSTRING("shaders","\xae","\x81","\x86","\x5f"));
	outFields->push(HX_HCSTRING("texts","\x26","\x4b","\x99","\x0d"));
	outFields->push(HX_HCSTRING("jsons","\x4b","\xa1","\xd1","\x54"));
	outFields->push(HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd"));
	outFields->push(HX_HCSTRING("audios","\xdd","\x42","\xe9","\x68"));
	outFields->push(HX_HCSTRING("unknown","\x8a","\x23","\x7b","\xe1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ResourceStats_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ResourceStats_obj,total),HX_HCSTRING("total","\xc4","\x53","\x32","\x14")},
	{hx::fsInt,(int)offsetof(ResourceStats_obj,fonts),HX_HCSTRING("fonts","\xc4","\xb7","\x91","\x04")},
	{hx::fsInt,(int)offsetof(ResourceStats_obj,textures),HX_HCSTRING("textures","\x38","\xf7","\xce","\x65")},
	{hx::fsInt,(int)offsetof(ResourceStats_obj,rtt),HX_HCSTRING("rtt","\x72","\xe6","\x56","\x00")},
	{hx::fsInt,(int)offsetof(ResourceStats_obj,shaders),HX_HCSTRING("shaders","\xae","\x81","\x86","\x5f")},
	{hx::fsInt,(int)offsetof(ResourceStats_obj,texts),HX_HCSTRING("texts","\x26","\x4b","\x99","\x0d")},
	{hx::fsInt,(int)offsetof(ResourceStats_obj,jsons),HX_HCSTRING("jsons","\x4b","\xa1","\xd1","\x54")},
	{hx::fsInt,(int)offsetof(ResourceStats_obj,bytes),HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd")},
	{hx::fsInt,(int)offsetof(ResourceStats_obj,audios),HX_HCSTRING("audios","\xdd","\x42","\xe9","\x68")},
	{hx::fsInt,(int)offsetof(ResourceStats_obj,unknown),HX_HCSTRING("unknown","\x8a","\x23","\x7b","\xe1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ResourceStats_obj_sStaticStorageInfo = 0;
#endif

static ::String ResourceStats_obj_sMemberFields[] = {
	HX_HCSTRING("total","\xc4","\x53","\x32","\x14"),
	HX_HCSTRING("fonts","\xc4","\xb7","\x91","\x04"),
	HX_HCSTRING("textures","\x38","\xf7","\xce","\x65"),
	HX_HCSTRING("rtt","\x72","\xe6","\x56","\x00"),
	HX_HCSTRING("shaders","\xae","\x81","\x86","\x5f"),
	HX_HCSTRING("texts","\x26","\x4b","\x99","\x0d"),
	HX_HCSTRING("jsons","\x4b","\xa1","\xd1","\x54"),
	HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd"),
	HX_HCSTRING("audios","\xdd","\x42","\xe9","\x68"),
	HX_HCSTRING("unknown","\x8a","\x23","\x7b","\xe1"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	::String(null()) };

static void ResourceStats_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ResourceStats_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ResourceStats_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ResourceStats_obj::__mClass,"__mClass");
};

#endif

hx::Class ResourceStats_obj::__mClass;

void ResourceStats_obj::__register()
{
	hx::Object *dummy = new ResourceStats_obj;
	ResourceStats_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.ResourceStats","\x99","\xb7","\xd5","\xb7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ResourceStats_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ResourceStats_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ResourceStats_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ResourceStats_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ResourceStats_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ResourceStats_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
