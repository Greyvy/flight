// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Timer
#include <luxe/Timer.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_api_Timer
#include <snow/api/Timer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4570b4ac0ec6fc24_14_new,"luxe.Timer","new",0xbef5cc5f,"luxe.Timer.new","luxe/Timer.hx",14,0x545f8cf2)
HX_LOCAL_STACK_FRAME(_hx_pos_3cc50dcf7bea5375_138_init,"luxe.Timer","init",0x54d5be31,"luxe.Timer.init","luxe/Log.hx",138,0xe5312153)
HX_LOCAL_STACK_FRAME(_hx_pos_4570b4ac0ec6fc24_27_destroy,"luxe.Timer","destroy",0xae6f9479,"luxe.Timer.destroy","luxe/Timer.hx",27,0x545f8cf2)
HX_LOCAL_STACK_FRAME(_hx_pos_4570b4ac0ec6fc24_32_process,"luxe.Timer","process",0x7b3409ee,"luxe.Timer.process","luxe/Timer.hx",32,0x545f8cf2)
HX_LOCAL_STACK_FRAME(_hx_pos_4570b4ac0ec6fc24_37_reset,"luxe.Timer","reset",0x0ee0838e,"luxe.Timer.reset","luxe/Timer.hx",37,0x545f8cf2)
HX_LOCAL_STACK_FRAME(_hx_pos_4570b4ac0ec6fc24_53_schedule,"luxe.Timer","schedule",0xe7cff1f8,"luxe.Timer.schedule","luxe/Timer.hx",53,0x545f8cf2)
HX_LOCAL_STACK_FRAME(_hx_pos_4570b4ac0ec6fc24_49_schedule,"luxe.Timer","schedule",0xe7cff1f8,"luxe.Timer.schedule","luxe/Timer.hx",49,0x545f8cf2)
namespace luxe{

void Timer_obj::__construct( ::luxe::Engine _core){
            	HX_STACKFRAME(&_hx_pos_4570b4ac0ec6fc24_14_new)
HXLINE(  15)		this->core = _core;
HXLINE(  16)		this->timers = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic Timer_obj::__CreateEmpty() { return new Timer_obj; }

void *Timer_obj::_hx_vtable = 0;

Dynamic Timer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Timer_obj > _hx_result = new Timer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Timer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4f6ef027;
}

void Timer_obj::init(){
            	HX_STACKFRAME(&_hx_pos_3cc50dcf7bea5375_138_init)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,init,(void))

void Timer_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_4570b4ac0ec6fc24_27_destroy)
HXDLIN(  27)		this->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,destroy,(void))

void Timer_obj::process(){
            	HX_STACKFRAME(&_hx_pos_4570b4ac0ec6fc24_32_process)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,process,(void))

void Timer_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_4570b4ac0ec6fc24_37_reset)
HXLINE(  39)		{
HXLINE(  39)			int _g = (int)0;
HXDLIN(  39)			::Array< ::Dynamic> _g1 = this->timers;
HXDLIN(  39)			while((_g < _g1->length)){
HXLINE(  39)				 ::snow::api::Timer t = _g1->__get(_g).StaticCast<  ::snow::api::Timer >();
HXDLIN(  39)				_g = (_g + (int)1);
HXLINE(  40)				t->stop();
HXLINE(  41)				t = null();
            			}
            		}
HXLINE(  44)		this->timers = null();
HXLINE(  45)		this->timers = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,reset,(void))

 ::snow::api::Timer Timer_obj::schedule(Float _time_in_seconds, ::Dynamic _on_time, ::Dynamic __o_repeat){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0, ::luxe::Timer,_gthis, ::snow::api::Timer,t, ::Dynamic,repeat, ::Dynamic,_on_time) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_4570b4ac0ec6fc24_53_schedule)
HXLINE(  54)			if (!(repeat)) {
HXLINE(  55)				t->stop();
HXLINE(  56)				_gthis->timers->remove(t);
            			}
HXLINE(  58)			_on_time();
            		}
            		HX_END_LOCAL_FUNC0((void))

 ::Dynamic repeat = __o_repeat.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4570b4ac0ec6fc24_49_schedule)
HXDLIN(  49)		 ::luxe::Timer _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  51)		 ::snow::api::Timer t =  ::snow::api::Timer_obj::__alloc( HX_CTX ,_time_in_seconds);
HXLINE(  53)		t->run =  ::Dynamic(new _hx_Closure_0(_gthis,t,repeat,_on_time));
HXLINE(  61)		this->timers->push(t);
HXLINE(  63)		return t;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Timer_obj,schedule,return )


hx::ObjectPtr< Timer_obj > Timer_obj::__new( ::luxe::Engine _core) {
	hx::ObjectPtr< Timer_obj > __this = new Timer_obj();
	__this->__construct(_core);
	return __this;
}

hx::ObjectPtr< Timer_obj > Timer_obj::__alloc(hx::Ctx *_hx_ctx, ::luxe::Engine _core) {
	Timer_obj *__this = (Timer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Timer_obj), true, "luxe.Timer"));
	*(void **)__this = Timer_obj::_hx_vtable;
	__this->__construct(_core);
	return __this;
}

Timer_obj::Timer_obj()
{
}

void Timer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Timer);
	HX_MARK_MEMBER_NAME(core,"core");
	HX_MARK_MEMBER_NAME(timers,"timers");
	HX_MARK_END_CLASS();
}

void Timer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(core,"core");
	HX_VISIT_MEMBER_NAME(timers,"timers");
}

hx::Val Timer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { return hx::Val( core ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"timers") ) { return hx::Val( timers ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"process") ) { return hx::Val( process_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"schedule") ) { return hx::Val( schedule_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Timer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { core=inValue.Cast<  ::luxe::Engine >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"timers") ) { timers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Timer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"));
	outFields->push(HX_HCSTRING("timers","\x0e","\x0d","\xd2","\x1e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Timer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::Engine*/ ,(int)offsetof(Timer_obj,core),HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Timer_obj,timers),HX_HCSTRING("timers","\x0e","\x0d","\xd2","\x1e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Timer_obj_sStaticStorageInfo = 0;
#endif

static ::String Timer_obj_sMemberFields[] = {
	HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"),
	HX_HCSTRING("timers","\x0e","\x0d","\xd2","\x1e"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("process","\x6f","\xa2","\x4a","\xf1"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("schedule","\x57","\xca","\x7e","\xc5"),
	::String(null()) };

static void Timer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Timer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Timer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Timer_obj::__mClass,"__mClass");
};

#endif

hx::Class Timer_obj::__mClass;

void Timer_obj::__register()
{
	hx::Object *dummy = new Timer_obj;
	Timer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Timer","\xed","\xb0","\x2a","\xc7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Timer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Timer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Timer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Timer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Timer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Timer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
