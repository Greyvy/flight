// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_structural__BalancedBST_NodeColor
#include <luxe/structural/_BalancedBST/NodeColor.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e577c54ae5c5ce59_753_boot,"luxe.structural._BalancedBST.NodeColor","boot",0xc26a4ab8,"luxe.structural._BalancedBST.NodeColor.boot","luxe/structural/BalancedBST.hx",753,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_e577c54ae5c5ce59_754_boot,"luxe.structural._BalancedBST.NodeColor","boot",0xc26a4ab8,"luxe.structural._BalancedBST.NodeColor.boot","luxe/structural/BalancedBST.hx",754,0xa0b365fc)
namespace luxe{
namespace structural{
namespace _BalancedBST{

void NodeColor_obj::__construct() { }

Dynamic NodeColor_obj::__CreateEmpty() { return new NodeColor_obj; }

void *NodeColor_obj::_hx_vtable = 0;

Dynamic NodeColor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NodeColor_obj > _hx_result = new NodeColor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool NodeColor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2a9b1a32;
}

bool NodeColor_obj::red;

bool NodeColor_obj::black;


NodeColor_obj::NodeColor_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *NodeColor_obj_sMemberStorageInfo = 0;
static hx::StaticInfo NodeColor_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &NodeColor_obj::red,HX_HCSTRING("red","\x51","\xd9","\x56","\x00")},
	{hx::fsBool,(void *) &NodeColor_obj::black,HX_HCSTRING("black","\xbf","\xd5","\xf1","\xb4")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void NodeColor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NodeColor_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(NodeColor_obj::red,"red");
	HX_MARK_MEMBER_NAME(NodeColor_obj::black,"black");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NodeColor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NodeColor_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(NodeColor_obj::red,"red");
	HX_VISIT_MEMBER_NAME(NodeColor_obj::black,"black");
};

#endif

hx::Class NodeColor_obj::__mClass;

static ::String NodeColor_obj_sStaticFields[] = {
	HX_HCSTRING("red","\x51","\xd9","\x56","\x00"),
	HX_HCSTRING("black","\xbf","\xd5","\xf1","\xb4"),
	::String(null())
};

void NodeColor_obj::__register()
{
	hx::Object *dummy = new NodeColor_obj;
	NodeColor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.structural._BalancedBST.NodeColor","\xa8","\x27","\xc7","\xe0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NodeColor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NodeColor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< NodeColor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NodeColor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NodeColor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NodeColor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NodeColor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e577c54ae5c5ce59_753_boot)
HXDLIN( 753)		red = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e577c54ae5c5ce59_754_boot)
HXDLIN( 754)		black = false;
            	}
}

} // end namespace luxe
} // end namespace structural
} // end namespace _BalancedBST
