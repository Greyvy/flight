// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_luxe_importers_bitmapfont_BitmapFontParser
#include <luxe/importers/bitmapfont/BitmapFontParser.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_039762eac7de8594_9_parse,"luxe.importers.bitmapfont.BitmapFontParser","parse",0xa6a46bed,"luxe.importers.bitmapfont.BitmapFontParser.parse","luxe/importers/bitmapfont/BitmapFontParser.hx",9,0x0ee4ea77)
HX_LOCAL_STACK_FRAME(_hx_pos_039762eac7de8594_50_parse_token,"luxe.importers.bitmapfont.BitmapFontParser","parse_token",0x41b865e7,"luxe.importers.bitmapfont.BitmapFontParser.parse_token","luxe/importers/bitmapfont/BitmapFontParser.hx",50,0x0ee4ea77)
HX_LOCAL_STACK_FRAME(_hx_pos_039762eac7de8594_121_tokenize_line,"luxe.importers.bitmapfont.BitmapFontParser","tokenize_line",0xce8fd5b2,"luxe.importers.bitmapfont.BitmapFontParser.tokenize_line","luxe/importers/bitmapfont/BitmapFontParser.hx",121,0x0ee4ea77)
HX_LOCAL_STACK_FRAME(_hx_pos_039762eac7de8594_135_trim,"luxe.importers.bitmapfont.BitmapFontParser","trim",0xc7bf1668,"luxe.importers.bitmapfont.BitmapFontParser.trim","luxe/importers/bitmapfont/BitmapFontParser.hx",135,0x0ee4ea77)
HX_LOCAL_STACK_FRAME(_hx_pos_039762eac7de8594_136_unquote,"luxe.importers.bitmapfont.BitmapFontParser","unquote",0x5a0bd87d,"luxe.importers.bitmapfont.BitmapFontParser.unquote","luxe/importers/bitmapfont/BitmapFontParser.hx",136,0x0ee4ea77)
namespace luxe{
namespace importers{
namespace bitmapfont{

void BitmapFontParser_obj::__construct() { }

Dynamic BitmapFontParser_obj::__CreateEmpty() { return new BitmapFontParser_obj; }

void *BitmapFontParser_obj::_hx_vtable = 0;

Dynamic BitmapFontParser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapFontParser_obj > _hx_result = new BitmapFontParser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BitmapFontParser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2e4deae6;
}

 ::Dynamic BitmapFontParser_obj::parse(::String _font_data){
            	HX_GC_STACKFRAME(&_hx_pos_039762eac7de8594_9_parse)
HXLINE(  11)		if ((_font_data.length == (int)0)) {
HXLINE(  12)			HX_STACK_DO_THROW(HX_("BitmapFont:Parser: _font_data is 0 length",e8,56,ed,92));
            		}
HXLINE(  17)		 ::haxe::ds::IntMap _info =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  15)		 ::Dynamic _info1 =  ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("kernings",27,b8,8b,80), ::haxe::ds::IntMap_obj::__alloc( HX_CTX ))
            			->setFixed(1,HX_("char_count",66,af,d5,85),(int)0)
            			->setFixed(2,HX_("pages",44,2b,4d,bd),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(3,HX_("line_height",12,a8,c5,e1),(int)0)
            			->setFixed(4,HX_("face",9d,b4,b5,43),null())
            			->setFixed(5,HX_("chars",dd,9c,b3,45),_info)
            			->setFixed(6,HX_("point_size",50,66,f5,4b),(int)0)
            			->setFixed(7,HX_("base_size",ef,f6,1b,7c),(int)0));
HXLINE(  23)		::Array< ::String > _lines = _font_data.split(HX_("\n",0a,00,00,00));
HXLINE(  25)		if ((_lines->length == (int)0)) {
HXLINE(  26)			HX_STACK_DO_THROW(HX_("BitmapFont; invalid font data specified for parser.",57,b2,88,83));
            		}
HXLINE(  29)		::String _first = _lines->__get((int)0);
HXLINE(  30)		if ((::StringTools_obj::ltrim(_first).substr((int)0,(int)4) != HX_("info",6e,38,bb,45))) {
HXLINE(  31)			HX_STACK_DO_THROW(HX_("BitmapFont; invalid font data specified for parser. Format should be plain ascii text .fnt file only currently.",dc,12,81,6f));
            		}
HXLINE(  34)		{
HXLINE(  34)			int _g = (int)0;
HXDLIN(  34)			while((_g < _lines->length)){
HXLINE(  34)				::String _line = _lines->__get(_g);
HXDLIN(  34)				_g = (_g + (int)1);
HXLINE(  35)				::Array< ::String > _tokens = _line.split(HX_(" ",20,00,00,00));
HXLINE(  36)				{
HXLINE(  36)					int _g1 = (int)0;
HXDLIN(  36)					while((_g1 < _tokens->length)){
HXLINE(  36)						::String _current = _tokens->__get(_g1);
HXDLIN(  36)						_g1 = (_g1 + (int)1);
HXLINE(  37)						::luxe::importers::bitmapfont::BitmapFontParser_obj::parse_token(_current,_tokens,_info1);
            					}
            				}
HXLINE(  39)				_tokens = null();
            			}
            		}
HXLINE(  42)		_lines = null();
HXLINE(  44)		return _info1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapFontParser_obj,parse,return )

void BitmapFontParser_obj::parse_token(::String _token,::Array< ::String > _tokens, ::Dynamic _info){
            	HX_GC_STACKFRAME(&_hx_pos_039762eac7de8594_50_parse_token)
HXLINE(  53)		_tokens->shift();
HXLINE(  55)		 ::haxe::ds::StringMap _items = ::luxe::importers::bitmapfont::BitmapFontParser_obj::tokenize_line(_tokens);
HXLINE(  57)		::String _hx_switch_0 = _token;
            		if (  (_hx_switch_0==HX_("char",d6,5e,bf,41)) ){
HXLINE(  83)			 ::Dynamic _char = ::Std_obj::parseInt(( (::String)(_items->get(HX_("id",db,5b,00,00))) ));
HXLINE(  84)			Float _char1 = ::Std_obj::parseFloat(( (::String)(_items->get(HX_("x",78,00,00,00))) ));
HXLINE(  85)			Float _char2 = ::Std_obj::parseFloat(( (::String)(_items->get(HX_("y",79,00,00,00))) ));
HXLINE(  86)			Float _char3 = ::Std_obj::parseFloat(( (::String)(_items->get(HX_("width",06,b6,62,ca))) ));
HXLINE(  87)			Float _char4 = ::Std_obj::parseFloat(( (::String)(_items->get(HX_("height",e7,07,4c,02))) ));
HXLINE(  88)			Float _char5 = ::Std_obj::parseFloat(( (::String)(_items->get(HX_("xoffset",0b,42,4f,de))) ));
HXLINE(  89)			Float _char6 = ::Std_obj::parseFloat(( (::String)(_items->get(HX_("yoffset",cc,b8,e4,07))) ));
HXLINE(  90)			Float _char7 = ::Std_obj::parseFloat(( (::String)(_items->get(HX_("xadvance",0a,87,b1,be))) ));
HXLINE(  82)			 ::Dynamic _char8 =  ::Dynamic(hx::Anon_obj::Create(9)
            				->setFixed(0,HX_("xadvance",0a,87,b1,be),_char7)
            				->setFixed(1,HX_("width",06,b6,62,ca),_char3)
            				->setFixed(2,HX_("xoffset",0b,42,4f,de),_char5)
            				->setFixed(3,HX_("x",78,00,00,00),_char1)
            				->setFixed(4,HX_("y",79,00,00,00),_char2)
            				->setFixed(5,HX_("id",db,5b,00,00),_char)
            				->setFixed(6,HX_("height",e7,07,4c,02),_char4)
            				->setFixed(7,HX_("yoffset",cc,b8,e4,07),_char6)
            				->setFixed(8,HX_("page",4f,da,51,4a),::Std_obj::parseInt(( (::String)(_items->get(HX_("page",4f,da,51,4a))) ))));
HXLINE(  94)			::haxe::IMap_obj::set( ::Dynamic(_info->__Field(HX_("chars",dd,9c,b3,45),hx::paccDynamic)), ::Dynamic(_char8->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)),_char8);
HXLINE(  80)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("chars",dd,9c,b3,45)) ){
HXLINE(  77)			_info->__SetField(HX_("char_count",66,af,d5,85),::Std_obj::parseInt(( (::String)(_items->get(HX_("count",cf,44,63,4a))) )),hx::paccDynamic);
HXDLIN(  77)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("common",2b,75,2e,c7)) ){
HXLINE(  65)			_info->__SetField(HX_("line_height",12,a8,c5,e1),::Std_obj::parseFloat(( (::String)(_items->get(HX_("lineHeight",fb,02,f4,d6))) )),hx::paccDynamic);
HXLINE(  66)			_info->__SetField(HX_("base_size",ef,f6,1b,7c),::Std_obj::parseFloat(( (::String)(_items->get(HX_("base",11,e8,10,41))) )),hx::paccDynamic);
HXLINE(  64)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("info",6e,38,bb,45)) ){
HXLINE(  60)			::String _s = ( (::String)(_items->get(HX_("face",9d,b4,b5,43))) );
HXDLIN(  60)			if ((_s.indexOf(HX_("\"",22,00,00,00),null()) != (int)-1)) {
HXLINE(  60)				_s = ::StringTools_obj::replace(_s,HX_("\"",22,00,00,00),HX_("",00,00,00,00));
            			}
HXDLIN(  60)			_info->__SetField(HX_("face",9d,b4,b5,43),_s,hx::paccDynamic);
HXLINE(  61)			_info->__SetField(HX_("point_size",50,66,f5,4b),::Std_obj::parseFloat(( (::String)(_items->get(HX_("size",c1,a0,53,4c))) )),hx::paccDynamic);
HXLINE(  59)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("kerning",cc,ba,37,b0)) ){
HXLINE( 100)			 ::Dynamic _first = ::Std_obj::parseInt(( (::String)(_items->get(HX_("first",30,78,9d,00))) ));
HXLINE( 101)			 ::Dynamic _second = ::Std_obj::parseInt(( (::String)(_items->get(HX_("second",74,cf,47,64))) ));
HXLINE( 102)			Float _amount = ::Std_obj::parseFloat(( (::String)(_items->get(HX_("amount",d8,11,03,d5))) ));
HXLINE( 104)			 ::haxe::ds::IntMap _map = ( ( ::haxe::ds::IntMap)(::haxe::IMap_obj::get( ::Dynamic(_info->__Field(HX_("kernings",27,b8,8b,80),hx::paccDynamic)),_first)) );
HXLINE( 105)			if (hx::IsNull( _map )) {
HXLINE( 106)				_map =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 107)				::haxe::IMap_obj::set( ::Dynamic(_info->__Field(HX_("kernings",27,b8,8b,80),hx::paccDynamic)),_first,_map);
            			}
HXLINE( 110)			_map->set(_second,_amount);
HXLINE(  98)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("page",4f,da,51,4a)) ){
HXLINE(  70)			::Array< ::Dynamic> _info1 = ( (::Array< ::Dynamic>)(_info->__Field(HX_("pages",44,2b,4d,bd),hx::paccDynamic)) );
HXLINE(  71)			 ::Dynamic _hx_tmp = ::Std_obj::parseInt(( (::String)(_items->get(HX_("id",db,5b,00,00))) ));
HXLINE(  72)			::String _s1 = ( (::String)(_items->get(HX_("file",7c,ce,bb,43))) );
HXDLIN(  72)			if ((_s1.indexOf(HX_("\"",22,00,00,00),null()) != (int)-1)) {
HXLINE(  72)				_s1 = ::StringTools_obj::replace(_s1,HX_("\"",22,00,00,00),HX_("",00,00,00,00));
            			}
HXLINE(  70)			_info1->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("id",db,5b,00,00),_hx_tmp)
            				->setFixed(1,HX_("file",7c,ce,bb,43),::StringTools_obj::trim(_s1))));
HXDLIN(  70)			goto _hx_goto_3;
            		}
            		/* default */{
            		}
            		_hx_goto_3:;
HXLINE( 117)		_items = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapFontParser_obj,parse_token,(void))

 ::haxe::ds::StringMap BitmapFontParser_obj::tokenize_line(::Array< ::String > _tokens){
            	HX_GC_STACKFRAME(&_hx_pos_039762eac7de8594_121_tokenize_line)
HXLINE( 123)		 ::haxe::ds::StringMap _item_map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 125)		{
HXLINE( 125)			int _g = (int)0;
HXDLIN( 125)			while((_g < _tokens->length)){
HXLINE( 125)				::String _token = _tokens->__get(_g);
HXDLIN( 125)				_g = (_g + (int)1);
HXLINE( 126)				::Array< ::String > _items = _token.split(HX_("=",3d,00,00,00));
HXLINE( 127)				_item_map->set(_items->__get((int)0),_items->__get((int)1));
HXLINE( 128)				_items = null();
            			}
            		}
HXLINE( 131)		return _item_map;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapFontParser_obj,tokenize_line,return )

::String BitmapFontParser_obj::trim(::String _s){
            	HX_STACKFRAME(&_hx_pos_039762eac7de8594_135_trim)
HXDLIN( 135)		return ::StringTools_obj::trim(_s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapFontParser_obj,trim,return )

::String BitmapFontParser_obj::unquote(::String _s){
            	HX_STACKFRAME(&_hx_pos_039762eac7de8594_136_unquote)
HXLINE( 137)		if ((_s.indexOf(HX_("\"",22,00,00,00),null()) != (int)-1)) {
HXLINE( 138)			_s = ::StringTools_obj::replace(_s,HX_("\"",22,00,00,00),HX_("",00,00,00,00));
            		}
HXLINE( 139)		return _s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapFontParser_obj,unquote,return )


BitmapFontParser_obj::BitmapFontParser_obj()
{
}

bool BitmapFontParser_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"trim") ) { outValue = trim_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"unquote") ) { outValue = unquote_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"parse_token") ) { outValue = parse_token_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"tokenize_line") ) { outValue = tokenize_line_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BitmapFontParser_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *BitmapFontParser_obj_sStaticStorageInfo = 0;
#endif

static void BitmapFontParser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapFontParser_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapFontParser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapFontParser_obj::__mClass,"__mClass");
};

#endif

hx::Class BitmapFontParser_obj::__mClass;

static ::String BitmapFontParser_obj_sStaticFields[] = {
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	HX_HCSTRING("parse_token","\xad","\x02","\xbb","\x56"),
	HX_HCSTRING("tokenize_line","\xf8","\xaf","\x07","\x1f"),
	HX_HCSTRING("trim","\xe2","\x9c","\x03","\x4d"),
	HX_HCSTRING("unquote","\x43","\x1a","\x83","\x5a"),
	::String(null())
};

void BitmapFontParser_obj::__register()
{
	hx::Object *dummy = new BitmapFontParser_obj;
	BitmapFontParser_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.importers.bitmapfont.BitmapFontParser","\xa8","\x54","\x97","\x24");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapFontParser_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BitmapFontParser_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BitmapFontParser_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< BitmapFontParser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapFontParser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapFontParser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapFontParser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace importers
} // end namespace bitmapfont
