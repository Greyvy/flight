// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_luxe_Camera
#include <luxe/Camera.h>
#endif
#ifndef INCLUDED_luxe_Component
#include <luxe/Component.h>
#endif
#ifndef INCLUDED_luxe_Debug
#include <luxe/Debug.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_Events
#include <luxe/Events.h>
#endif
#ifndef INCLUDED_luxe_GamepadEvent
#include <luxe/GamepadEvent.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_InputEvent
#include <luxe/InputEvent.h>
#endif
#ifndef INCLUDED_luxe_KeyEvent
#include <luxe/KeyEvent.h>
#endif
#ifndef INCLUDED_luxe_MouseEvent
#include <luxe/MouseEvent.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Scene
#include <luxe/Scene.h>
#endif
#ifndef INCLUDED_luxe_TextEvent
#include <luxe/TextEvent.h>
#endif
#ifndef INCLUDED_luxe_TouchEvent
#include <luxe/TouchEvent.h>
#endif
#ifndef INCLUDED_luxe_components_Components
#include <luxe/components/Components.h>
#endif
#ifndef INCLUDED_luxe_debug_DebugView
#include <luxe/debug/DebugView.h>
#endif
#ifndef INCLUDED_luxe_debug_SceneDebugView
#include <luxe/debug/SceneDebugView.h>
#endif
#ifndef INCLUDED_luxe_structural_OrderedMap_String_luxe_Component
#include <luxe/structural/OrderedMap_String_luxe_Component.h>
#endif
#ifndef INCLUDED_phoenix_Transform
#include <phoenix/Transform.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_api_Timer
#include <snow/api/Timer.h>
#endif
#ifndef INCLUDED_snow_types_WindowEvent
#include <snow/types/WindowEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_10_new,"luxe.Scene","new",0x652ab566,"luxe.Scene.new","luxe/Scene.hx",10,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_95_handle_duplicate_warning,"luxe.Scene","handle_duplicate_warning",0x3544440b,"luxe.Scene.handle_duplicate_warning","luxe/Scene.hx",95,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_103_add,"luxe.Scene","add",0x6520d727,"luxe.Scene.add","luxe/Scene.hx",103,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_132_remove,"luxe.Scene","remove",0x2b461efe,"luxe.Scene.remove","luxe/Scene.hx",132,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_158_get,"luxe.Scene","get",0x6525659c,"luxe.Scene.get","luxe/Scene.hx",158,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_171_empty,"luxe.Scene","empty",0xe3f8ed13,"luxe.Scene.empty","luxe/Scene.hx",171,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_203_get_named_like,"luxe.Scene","get_named_like",0x42ca57e0,"luxe.Scene.get_named_like","luxe/Scene.hx",203,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_222_render,"luxe.Scene","render",0x2be6ee10,"luxe.Scene.render","luxe/Scene.hx",222,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_228_prerender,"luxe.Scene","prerender",0x8547753f,"luxe.Scene.prerender","luxe/Scene.hx",228,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_234_postrender,"luxe.Scene","postrender",0x1efbdf70,"luxe.Scene.postrender","luxe/Scene.hx",234,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_244_keydown,"luxe.Scene","keydown",0x70831d87,"luxe.Scene.keydown","luxe/Scene.hx",244,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_252_keyup,"luxe.Scene","keyup",0x531d8840,"luxe.Scene.keyup","luxe/Scene.hx",252,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_260_textinput,"luxe.Scene","textinput",0x19ef51c3,"luxe.Scene.textinput","luxe/Scene.hx",260,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_270_mousedown,"luxe.Scene","mousedown",0x59faf28d,"luxe.Scene.mousedown","luxe/Scene.hx",270,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_278_mousewheel,"luxe.Scene","mousewheel",0x4d882010,"luxe.Scene.mousewheel","luxe/Scene.hx",278,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_286_mouseup,"luxe.Scene","mouseup",0x7f87efc6,"luxe.Scene.mouseup","luxe/Scene.hx",286,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_294_mousemove,"luxe.Scene","mousemove",0x5feddd3c,"luxe.Scene.mousemove","luxe/Scene.hx",294,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_302_touchdown,"luxe.Scene","touchdown",0x7312c927,"luxe.Scene.touchdown","luxe/Scene.hx",302,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_308_touchup,"luxe.Scene","touchup",0x980d0be0,"luxe.Scene.touchup","luxe/Scene.hx",308,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_314_touchmove,"luxe.Scene","touchmove",0x7905b3d6,"luxe.Scene.touchmove","luxe/Scene.hx",314,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_322_gamepadaxis,"luxe.Scene","gamepadaxis",0xf55ebcc8,"luxe.Scene.gamepadaxis","luxe/Scene.hx",322,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_328_gamepadup,"luxe.Scene","gamepadup",0xb549dec2,"luxe.Scene.gamepadup","luxe/Scene.hx",328,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_334_gamepaddown,"luxe.Scene","gamepaddown",0xf7539889,"luxe.Scene.gamepaddown","luxe/Scene.hx",334,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_340_gamepaddevice,"luxe.Scene","gamepaddevice",0x6323147d,"luxe.Scene.gamepaddevice","luxe/Scene.hx",340,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_349_windowmoved,"luxe.Scene","windowmoved",0x79774d49,"luxe.Scene.windowmoved","luxe/Scene.hx",349,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_355_windowresized,"luxe.Scene","windowresized",0x58b7ce86,"luxe.Scene.windowresized","luxe/Scene.hx",355,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_361_windowsized,"luxe.Scene","windowsized",0xe9ea8999,"luxe.Scene.windowsized","luxe/Scene.hx",361,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_367_windowminimized,"luxe.Scene","windowminimized",0x4dd4bf9c,"luxe.Scene.windowminimized","luxe/Scene.hx",367,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_373_windowrestored,"luxe.Scene","windowrestored",0x9649ce00,"luxe.Scene.windowrestored","luxe/Scene.hx",373,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_381_inputdown,"luxe.Scene","inputdown",0x74d0f6f2,"luxe.Scene.inputdown","luxe/Scene.hx",381,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_387_inputup,"luxe.Scene","inputup",0x9333a0eb,"luxe.Scene.inputup","luxe/Scene.hx",387,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_395__destroy,"luxe.Scene","_destroy",0xd16dabb5,"luxe.Scene._destroy","luxe/Scene.hx",395,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_399_destroy,"luxe.Scene","destroy",0xe39b0d00,"luxe.Scene.destroy","luxe/Scene.hx",399,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_451__do_init,"luxe.Scene","_do_init",0x45b3463f,"luxe.Scene._do_init","luxe/Scene.hx",451,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_474_init,"luxe.Scene","init",0x1cecbb4a,"luxe.Scene.init","luxe/Scene.hx",474,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_491_reset,"luxe.Scene","reset",0x5ae6fc55,"luxe.Scene.reset","luxe/Scene.hx",491,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_501_update,"luxe.Scene","update",0xadc308c3,"luxe.Scene.update","luxe/Scene.hx",501,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_523_handle_delayed_additions,"luxe.Scene","handle_delayed_additions",0xbf640c7d,"luxe.Scene.handle_delayed_additions","luxe/Scene.hx",523,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_557_get_length,"luxe.Scene","get_length",0x88bd6c69,"luxe.Scene.get_length","luxe/Scene.hx",557,0x14d4e1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_54fb3c2ed333dc70_563_toString,"luxe.Scene","toString",0xab9df5e6,"luxe.Scene.toString","luxe/Scene.hx",563,0x14d4e1cb)
namespace luxe{

void Scene_obj::__construct(::String __o__name){
::String _name = __o__name.Default(HX_HCSTRING("untitled scene","\xd1","\x1d","\x02","\xcb"));
            	HX_GC_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_10_new)
HXLINE( 102)		this->entity_count = (int)0;
HXLINE(  33)		this->_has_changed = false;
HXLINE(  21)		this->destroyed = false;
HXLINE(  19)		this->length = (int)0;
HXLINE(  17)		this->started = false;
HXLINE(  15)		this->inited = false;
HXLINE(  39)		super::__construct(_name,null());
HXLINE(  41)		this->entities =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  43)		this->_delayed_init_entities = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  44)		this->_delayed_reset_entities = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  46)		::Luxe_obj::core->emitter->on((int)2,this->init_dyn());
HXLINE(  47)		::Luxe_obj::core->emitter->on((int)8,this->_destroy_dyn());
HXLINE(  48)		::Luxe_obj::core->emitter->on((int)6,this->update_dyn());
HXLINE(  50)		::Luxe_obj::core->emitter->on((int)9,this->prerender_dyn());
HXLINE(  51)		::Luxe_obj::core->emitter->on((int)11,this->postrender_dyn());
HXLINE(  52)		::Luxe_obj::core->emitter->on((int)10,this->render_dyn());
HXLINE(  54)		::Luxe_obj::core->emitter->on((int)12,this->keydown_dyn());
HXLINE(  55)		::Luxe_obj::core->emitter->on((int)13,this->keyup_dyn());
HXLINE(  56)		::Luxe_obj::core->emitter->on((int)14,this->textinput_dyn());
HXLINE(  58)		::Luxe_obj::core->emitter->on((int)16,this->inputup_dyn());
HXLINE(  59)		::Luxe_obj::core->emitter->on((int)15,this->inputdown_dyn());
HXLINE(  61)		::Luxe_obj::core->emitter->on((int)18,this->mouseup_dyn());
HXLINE(  62)		::Luxe_obj::core->emitter->on((int)17,this->mousedown_dyn());
HXLINE(  63)		::Luxe_obj::core->emitter->on((int)19,this->mousemove_dyn());
HXLINE(  64)		::Luxe_obj::core->emitter->on((int)20,this->mousewheel_dyn());
HXLINE(  66)		::Luxe_obj::core->emitter->on((int)22,this->touchup_dyn());
HXLINE(  67)		::Luxe_obj::core->emitter->on((int)21,this->touchdown_dyn());
HXLINE(  68)		::Luxe_obj::core->emitter->on((int)23,this->touchmove_dyn());
HXLINE(  70)		::Luxe_obj::core->emitter->on((int)26,this->gamepadup_dyn());
HXLINE(  71)		::Luxe_obj::core->emitter->on((int)25,this->gamepaddown_dyn());
HXLINE(  72)		::Luxe_obj::core->emitter->on((int)24,this->gamepadaxis_dyn());
HXLINE(  73)		::Luxe_obj::core->emitter->on((int)27,this->gamepaddevice_dyn());
HXLINE(  75)		::Luxe_obj::core->emitter->on((int)29,this->windowmoved_dyn());
HXLINE(  76)		::Luxe_obj::core->emitter->on((int)30,this->windowresized_dyn());
HXLINE(  77)		::Luxe_obj::core->emitter->on((int)31,this->windowsized_dyn());
HXLINE(  78)		::Luxe_obj::core->emitter->on((int)32,this->windowminimized_dyn());
HXLINE(  79)		::Luxe_obj::core->emitter->on((int)33,this->windowrestored_dyn());
HXLINE(  82)		if (::Luxe_obj::core->inited) {
HXLINE(  83)			this->init(null());
            		}
HXLINE(  86)		 ::luxe::debug::SceneDebugView _view = ::Luxe_obj::core->debug->get_view(HX_("Scenes",c7,bd,60,73)).StaticCast<  ::luxe::debug::SceneDebugView >();
HXLINE(  87)		if (hx::IsNotNull( _view )) {
HXLINE(  88)			_view->add_scene(hx::ObjectPtr<OBJ_>(this));
            		}
            	}

Dynamic Scene_obj::__CreateEmpty() { return new Scene_obj; }

void *Scene_obj::_hx_vtable = 0;

Dynamic Scene_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Scene_obj > _hx_result = new Scene_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Scene_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0bbca018) {
		if (inClassId<=(int)0x099ca90a) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x099ca90a;
		} else {
			return inClassId==(int)0x0bbca018;
		}
	} else {
		return inClassId==(int)0x5a7d6576;
	}
}

void Scene_obj::handle_duplicate_warning(::String _name){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_95_handle_duplicate_warning)
HXDLIN(  95)		if (this->entities->exists(_name)) {
HXLINE(  96)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  96)			::String _hx_tmp1 = (HX_("    i / scene / ",cd,27,ce,13) + ((((HX_("",00,00,00,00) + this->get_name()) + HX_(" / adding a second entity named ",25,7f,ee,d9)) + _name) + HX_("!\n                This will replace the existing one, possibly leaving the previous one in limbo.",8a,82,fa,6f)));
HXDLIN(  96)			_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("Scene.hx",12,fd,2c,9b),96,HX_("luxe.Scene",74,ca,c6,2f),HX_("handle_duplicate_warning",d1,8a,7d,4b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,handle_duplicate_warning,(void))

void Scene_obj::add( ::luxe::Entity entity){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_103_add)
HXLINE( 105)		if (hx::IsNull( entity )) {
HXLINE( 105)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("entity was null",7b,c9,a5,af) + ((HX_(" ( ",18,6b,18,00) + HX_("can't put entity in a scene if the entity is null.",41,98,84,9a)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 109)		{
HXLINE( 109)			::String _name = entity->get_name();
HXDLIN( 109)			if (::haxe::IMap_obj::exists(this->entities,_name)) {
HXLINE( 109)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 109)				::String _hx_tmp1 = (HX_("    i / scene / ",cd,27,ce,13) + ((((HX_("",00,00,00,00) + this->get_name()) + HX_(" / adding a second entity named ",25,7f,ee,d9)) + _name) + HX_("!\n                This will replace the existing one, possibly leaving the previous one in limbo.",8a,82,fa,6f)));
HXDLIN( 109)				_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("Scene.hx",12,fd,2c,9b),96,HX_("luxe.Scene",74,ca,c6,2f),HX_("handle_duplicate_warning",d1,8a,7d,4b)));
            			}
            		}
HXLINE( 111)		entity->set_scene(hx::ObjectPtr<OBJ_>(this));
HXLINE( 112)		entity->set_scene_root(hx::ObjectPtr<OBJ_>(this));
HXLINE( 113)		{
HXLINE( 113)			::Dynamic this1 = this->entities;
HXDLIN( 113)			( ( ::haxe::ds::StringMap)(this1) )->set(entity->get_name(),entity);
            		}
HXLINE( 114)		this->entity_count++;
HXLINE( 117)		if (this->inited) {
HXLINE( 119)			this->_delayed_init_entities->push(entity);
            		}
HXLINE( 122)		if (this->started) {
HXLINE( 124)			this->_delayed_reset_entities->push(entity);
            		}
HXLINE( 127)		this->_has_changed = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,add,(void))

bool Scene_obj::remove( ::luxe::Entity entity){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_132_remove)
HXLINE( 134)		if (hx::IsNull( entity )) {
HXLINE( 134)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("entity was null",7b,c9,a5,af) + ((HX_(" ( ",18,6b,18,00) + HX_("can't remove entity from a scene if the entity is null.",21,ea,f3,ee)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 136)		this->_has_changed = true;
HXLINE( 138)		if (hx::IsEq( entity->get_scene(),hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 141)			entity->set_scene(null());
HXLINE( 142)			this->entity_count--;
HXLINE( 143)			::Dynamic this1 = this->entities;
HXDLIN( 143)			return ( ( ::haxe::ds::StringMap)(this1) )->remove(entity->get_name());
            		}
            		else {
HXLINE( 147)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 147)			::String _hx_tmp1 = ((HX_("can't remove the entity(`",e3,42,84,53) + entity->get_name()) + HX_("`) from this scene(`",21,06,3b,37));
HXDLIN( 147)			::String _hx_tmp2 = (HX_("    i / scene / ",cd,27,ce,13) + ((_hx_tmp1 + this->get_name()) + HX_("`), it is not mine (entity.scene != this)",a0,9b,14,b5)));
HXDLIN( 147)			_hx_tmp(_hx_tmp2,hx::SourceInfo(HX_("Scene.hx",12,fd,2c,9b),147,HX_("luxe.Scene",74,ca,c6,2f),HX_("remove",44,9c,88,04)));
HXLINE( 148)			return false;
            		}
HXLINE( 138)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,remove,return )

 ::Dynamic Scene_obj::get(::String _name){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_158_get)
HXDLIN( 158)		return this->entities->get(_name).StaticCast<  ::luxe::Entity >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,get,return )

void Scene_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_171_empty)
HXDLIN( 171)		if ((this->entity_count > (int)0)) {
HXLINE( 181)			 ::Dynamic entity = this->entities->iterator();
HXDLIN( 181)			while(( (bool)(entity->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 181)				 ::luxe::Entity entity1 = ( ( ::luxe::Entity)(entity->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 182)				bool _hx_tmp;
HXDLIN( 182)				if (hx::IsNotNull( entity1 )) {
HXLINE( 182)					_hx_tmp = hx::IsNotEq( entity1,::Luxe_obj::camera );
            				}
            				else {
HXLINE( 182)					_hx_tmp = false;
            				}
HXDLIN( 182)				if (_hx_tmp) {
HXLINE( 184)					entity1->destroy(null());
HXLINE( 185)					entity1 = null();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,empty,(void))

::Array< ::Dynamic> Scene_obj::get_named_like(::String _name,::Array< ::Dynamic> into){
            	HX_GC_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_203_get_named_like)
HXLINE( 205)		if ((this->entity_count > (int)0)) {
HXLINE( 206)			 ::EReg _filter =  ::EReg_obj::__alloc( HX_CTX ,((HX_("^((?:",79,a1,39,3a) + _name) + HX_(")[.]{1})",63,e3,56,33)),HX_("g",67,00,00,00));
HXLINE( 207)			{
HXLINE( 207)				 ::Dynamic _entity = this->entities->iterator();
HXDLIN( 207)				while(( (bool)(_entity->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 207)					 ::luxe::Entity _entity1 = ( ( ::luxe::Entity)(_entity->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 208)					if (_filter->match(_entity1->get_name())) {
HXLINE( 209)						into->push(_entity1);
            					}
            				}
            			}
            		}
HXLINE( 214)		return into;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,get_named_like,return )

void Scene_obj::render( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_222_render)
HXDLIN( 222)		this->emit((int)10,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,render,(void))

void Scene_obj::prerender( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_228_prerender)
HXDLIN( 228)		this->emit((int)9,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,prerender,(void))

void Scene_obj::postrender( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_234_postrender)
HXDLIN( 234)		this->emit((int)11,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,postrender,(void))

void Scene_obj::keydown( ::luxe::KeyEvent e){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_244_keydown)
HXDLIN( 244)		this->emit((int)12,e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,keydown,(void))

void Scene_obj::keyup( ::luxe::KeyEvent e){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_252_keyup)
HXDLIN( 252)		this->emit((int)13,e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,keyup,(void))

void Scene_obj::textinput( ::luxe::TextEvent e){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_260_textinput)
HXDLIN( 260)		this->emit((int)14,e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,textinput,(void))

void Scene_obj::mousedown( ::luxe::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_270_mousedown)
HXDLIN( 270)		this->emit((int)17,e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,mousedown,(void))

void Scene_obj::mousewheel( ::luxe::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_278_mousewheel)
HXDLIN( 278)		this->emit((int)20,e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,mousewheel,(void))

void Scene_obj::mouseup( ::luxe::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_286_mouseup)
HXDLIN( 286)		this->emit((int)18,e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,mouseup,(void))

void Scene_obj::mousemove( ::luxe::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_294_mousemove)
HXDLIN( 294)		this->emit((int)19,e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,mousemove,(void))

void Scene_obj::touchdown( ::luxe::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_302_touchdown)
HXDLIN( 302)		this->emit((int)21,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,touchdown,(void))

void Scene_obj::touchup( ::luxe::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_308_touchup)
HXDLIN( 308)		this->emit((int)22,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,touchup,(void))

void Scene_obj::touchmove( ::luxe::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_314_touchmove)
HXDLIN( 314)		this->emit((int)23,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,touchmove,(void))

void Scene_obj::gamepadaxis( ::luxe::GamepadEvent event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_322_gamepadaxis)
HXDLIN( 322)		this->emit((int)24,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,gamepadaxis,(void))

void Scene_obj::gamepadup( ::luxe::GamepadEvent event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_328_gamepadup)
HXDLIN( 328)		this->emit((int)26,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,gamepadup,(void))

void Scene_obj::gamepaddown( ::luxe::GamepadEvent event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_334_gamepaddown)
HXDLIN( 334)		this->emit((int)25,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,gamepaddown,(void))

void Scene_obj::gamepaddevice( ::luxe::GamepadEvent event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_340_gamepaddevice)
HXDLIN( 340)		this->emit((int)27,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,gamepaddevice,(void))

void Scene_obj::windowmoved( ::snow::types::WindowEvent event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_349_windowmoved)
HXDLIN( 349)		this->emit((int)29,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,windowmoved,(void))

void Scene_obj::windowresized( ::snow::types::WindowEvent event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_355_windowresized)
HXDLIN( 355)		this->emit((int)30,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,windowresized,(void))

void Scene_obj::windowsized( ::snow::types::WindowEvent event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_361_windowsized)
HXDLIN( 361)		this->emit((int)31,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,windowsized,(void))

void Scene_obj::windowminimized( ::snow::types::WindowEvent event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_367_windowminimized)
HXDLIN( 367)		this->emit((int)32,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,windowminimized,(void))

void Scene_obj::windowrestored( ::snow::types::WindowEvent event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_373_windowrestored)
HXDLIN( 373)		this->emit((int)33,event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,windowrestored,(void))

void Scene_obj::inputdown( ::luxe::InputEvent _event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_381_inputdown)
HXDLIN( 381)		this->emit((int)15,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,inputdown,(void))

void Scene_obj::inputup( ::luxe::InputEvent _event){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_387_inputup)
HXDLIN( 387)		this->emit((int)16,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,inputup,(void))

void Scene_obj::_destroy( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_395__destroy)
HXDLIN( 395)		this->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,_destroy,(void))

void Scene_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_399_destroy)
HXLINE( 401)		if ((this->destroyed != false)) {
HXLINE( 401)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion((HX_("destroyed == false",0a,e4,63,7c) + ((HX_(" ( ",18,6b,18,00) + ((HX_("scene / destroying repeatedly `",ba,55,ac,9d) + this->get_name()) + HX_("`",60,00,00,00))) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 405)		this->destroyed = true;
HXLINE( 407)		::Luxe_obj::core->emitter->off((int)2,this->init_dyn());
HXLINE( 408)		::Luxe_obj::core->emitter->off((int)8,this->_destroy_dyn());
HXLINE( 409)		::Luxe_obj::core->emitter->off((int)6,this->update_dyn());
HXLINE( 411)		::Luxe_obj::core->emitter->off((int)9,this->prerender_dyn());
HXLINE( 412)		::Luxe_obj::core->emitter->off((int)11,this->postrender_dyn());
HXLINE( 413)		::Luxe_obj::core->emitter->off((int)10,this->render_dyn());
HXLINE( 415)		::Luxe_obj::core->emitter->off((int)12,this->keydown_dyn());
HXLINE( 416)		::Luxe_obj::core->emitter->off((int)13,this->keyup_dyn());
HXLINE( 417)		::Luxe_obj::core->emitter->off((int)14,this->textinput_dyn());
HXLINE( 419)		::Luxe_obj::core->emitter->off((int)16,this->inputup_dyn());
HXLINE( 420)		::Luxe_obj::core->emitter->off((int)15,this->inputdown_dyn());
HXLINE( 422)		::Luxe_obj::core->emitter->off((int)18,this->mouseup_dyn());
HXLINE( 423)		::Luxe_obj::core->emitter->off((int)17,this->mousedown_dyn());
HXLINE( 424)		::Luxe_obj::core->emitter->off((int)19,this->mousemove_dyn());
HXLINE( 425)		::Luxe_obj::core->emitter->off((int)20,this->mousewheel_dyn());
HXLINE( 427)		::Luxe_obj::core->emitter->off((int)22,this->touchup_dyn());
HXLINE( 428)		::Luxe_obj::core->emitter->off((int)21,this->touchdown_dyn());
HXLINE( 429)		::Luxe_obj::core->emitter->off((int)23,this->touchmove_dyn());
HXLINE( 431)		::Luxe_obj::core->emitter->off((int)26,this->gamepadup_dyn());
HXLINE( 432)		::Luxe_obj::core->emitter->off((int)25,this->gamepaddown_dyn());
HXLINE( 433)		::Luxe_obj::core->emitter->off((int)24,this->gamepadaxis_dyn());
HXLINE( 434)		::Luxe_obj::core->emitter->off((int)27,this->gamepaddevice_dyn());
HXLINE( 436)		::Luxe_obj::core->emitter->off((int)29,this->windowmoved_dyn());
HXLINE( 437)		::Luxe_obj::core->emitter->off((int)30,this->windowresized_dyn());
HXLINE( 438)		::Luxe_obj::core->emitter->off((int)31,this->windowsized_dyn());
HXLINE( 439)		::Luxe_obj::core->emitter->off((int)32,this->windowminimized_dyn());
HXLINE( 440)		::Luxe_obj::core->emitter->off((int)33,this->windowrestored_dyn());
HXLINE( 442)		this->emit((int)8,null());
HXLINE( 444)		 ::luxe::debug::SceneDebugView _view = ::Luxe_obj::core->debug->get_view(HX_("Scenes",c7,bd,60,73)).StaticCast<  ::luxe::debug::SceneDebugView >();
HXLINE( 445)		if (hx::IsNotNull( _view )) {
HXLINE( 446)			_view->remove_scene(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,destroy,(void))

bool Scene_obj::_do_init(){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_451__do_init)
HXLINE( 453)		int _before_count = this->get_length();
HXLINE( 455)		if ((this->entity_count > (int)0)) {
HXLINE( 456)			 ::Dynamic entity = this->entities->iterator();
HXDLIN( 456)			while(( (bool)(entity->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 456)				 ::luxe::Entity entity1 = ( ( ::luxe::Entity)(entity->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 457)				if (hx::IsNotNull( entity1 )) {
HXLINE( 458)					if (!(entity1->inited)) {
HXLINE( 460)						entity1->init();
HXDLIN( 460)						entity1->emit((int)2,null());
HXDLIN( 460)						if ((entity1->component_count > (int)0)) {
HXLINE( 460)							 ::luxe::structural::OrderedMap_String_luxe_Component _g_map;
HXDLIN( 460)							int _g_index = (int)0;
HXDLIN( 460)							_g_map = entity1->_components->components;
HXDLIN( 460)							while((_g_index < _g_map->_keys->length)){
HXLINE( 460)								::Array< ::String > _g_map1 = _g_map->_keys;
HXDLIN( 460)								_g_index = (_g_index + (int)1);
HXDLIN( 460)								 ::luxe::Component _component = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map->map,_g_map1->__get((_g_index - (int)1)))) );
HXDLIN( 460)								_component->init();
            							}
            						}
HXDLIN( 460)						if ((entity1->children->length > (int)0)) {
HXLINE( 460)							int _g = (int)0;
HXDLIN( 460)							::Array< ::Dynamic> _g1 = entity1->children;
HXDLIN( 460)							while((_g < _g1->length)){
HXLINE( 460)								 ::luxe::Entity _child = _g1->__get(_g).StaticCast<  ::luxe::Entity >();
HXDLIN( 460)								_g = (_g + (int)1);
HXDLIN( 460)								_child->_init();
            							}
            						}
HXDLIN( 460)						entity1->inited = true;
            					}
            				}
            			}
            		}
HXLINE( 466)		int _after_count = this->get_length();
HXLINE( 468)		return (_before_count != _after_count);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,_do_init,return )

void Scene_obj::init( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_474_init)
HXLINE( 476)		bool _keep_going = true;
HXLINE( 478)		while(_keep_going){
HXLINE( 479)			_keep_going = this->_do_init();
            		}
HXLINE( 482)		this->inited = true;
HXLINE( 484)		this->emit((int)2,null());
HXLINE( 486)		this->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,init,(void))

void Scene_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_491_reset)
HXLINE( 493)		this->started = false;
HXLINE( 495)		this->emit((int)3,null());
HXLINE( 497)		this->started = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,reset,(void))

void Scene_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_501_update)
HXLINE( 503)		 ::luxe::Debug _hx_tmp = ::Luxe_obj::core->debug;
HXDLIN( 503)		_hx_tmp->start((HX_("scene.",62,49,cc,3e) + this->get_name()),null());
HXLINE( 506)		this->handle_delayed_additions();
HXLINE( 508)		this->emit((int)6,dt);
HXLINE( 511)		if ((this->entity_count > (int)0)) {
HXLINE( 512)			 ::Dynamic entity = this->entities->iterator();
HXDLIN( 512)			while(( (bool)(entity->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 512)				 ::luxe::Entity entity1 = ( ( ::luxe::Entity)(entity->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 513)				if (hx::IsNotNull( entity1 )) {
HXLINE( 514)					if (!(entity1->destroyed)) {
HXLINE( 514)						bool _hx_tmp1;
HXDLIN( 514)						bool _hx_tmp2;
HXDLIN( 514)						if (!(!(entity1->get_active()))) {
HXLINE( 514)							_hx_tmp2 = !(entity1->inited);
            						}
            						else {
HXLINE( 514)							_hx_tmp2 = true;
            						}
HXDLIN( 514)						if (!(_hx_tmp2)) {
HXLINE( 514)							_hx_tmp1 = !(entity1->started);
            						}
            						else {
HXLINE( 514)							_hx_tmp1 = true;
            						}
HXDLIN( 514)						if (!(_hx_tmp1)) {
HXLINE( 514)							{
HXLINE( 514)								 ::phoenix::Transform _this = entity1->get_transform();
HXDLIN( 514)								bool _hx_tmp3;
HXDLIN( 514)								if (hx::IsNotNull( _this->parent )) {
HXLINE( 514)									_hx_tmp3 = _this->parent->dirty;
            								}
            								else {
HXLINE( 514)									_hx_tmp3 = false;
            								}
HXDLIN( 514)								if (_hx_tmp3) {
HXLINE( 514)									_this->parent->clean_check();
            								}
HXDLIN( 514)								bool _hx_tmp4;
HXDLIN( 514)								bool _hx_tmp5;
HXDLIN( 514)								if (_this->dirty) {
HXLINE( 514)									_hx_tmp5 = !(_this->_cleaning);
            								}
            								else {
HXLINE( 514)									_hx_tmp5 = false;
            								}
HXDLIN( 514)								if (_hx_tmp5) {
HXLINE( 514)									_hx_tmp4 = !(_this->manual_update);
            								}
            								else {
HXLINE( 514)									_hx_tmp4 = false;
            								}
HXDLIN( 514)								if (_hx_tmp4) {
HXLINE( 514)									_this->clean();
            								}
            							}
HXDLIN( 514)							entity1->update(dt);
HXDLIN( 514)							if (hx::IsNotNull( entity1->events )) {
HXLINE( 514)								entity1->events->process();
            							}
HXDLIN( 514)							if ((entity1->component_count > (int)0)) {
HXLINE( 514)								 ::luxe::structural::OrderedMap_String_luxe_Component _g_map;
HXDLIN( 514)								int _g_index = (int)0;
HXDLIN( 514)								_g_map = entity1->_components->components;
HXDLIN( 514)								while((_g_index < _g_map->_keys->length)){
HXLINE( 514)									::Array< ::String > _g_map1 = _g_map->_keys;
HXDLIN( 514)									_g_index = (_g_index + (int)1);
HXDLIN( 514)									 ::luxe::Component _component = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map->map,_g_map1->__get((_g_index - (int)1)))) );
HXDLIN( 514)									_component->update(dt);
            								}
            							}
HXDLIN( 514)							bool _hx_tmp6;
HXDLIN( 514)							if (hx::IsNotNull( entity1->children )) {
HXLINE( 514)								_hx_tmp6 = (entity1->children->length > (int)0);
            							}
            							else {
HXLINE( 514)								_hx_tmp6 = false;
            							}
HXDLIN( 514)							if (_hx_tmp6) {
HXLINE( 514)								int _g = (int)0;
HXDLIN( 514)								::Array< ::Dynamic> _g1 = entity1->children;
HXDLIN( 514)								while((_g < _g1->length)){
HXLINE( 514)									 ::luxe::Entity _child = _g1->__get(_g).StaticCast<  ::luxe::Entity >();
HXDLIN( 514)									_g = (_g + (int)1);
HXDLIN( 514)									_child->_update(dt);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 519)		 ::luxe::Debug _hx_tmp7 = ::Luxe_obj::core->debug;
HXDLIN( 519)		_hx_tmp7->end((HX_("scene.",62,49,cc,3e) + this->get_name()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,update,(void))

void Scene_obj::handle_delayed_additions(){
            	HX_GC_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_523_handle_delayed_additions)
HXLINE( 525)		bool _hx_tmp;
HXDLIN( 525)		if ((this->_delayed_init_entities->length == (int)0)) {
HXLINE( 525)			_hx_tmp = (this->_delayed_reset_entities->length != (int)0);
            		}
            		else {
HXLINE( 525)			_hx_tmp = true;
            		}
HXLINE( 529)		if ((this->_delayed_init_entities->length > (int)0)) {
HXLINE( 530)			{
HXLINE( 530)				int _g = (int)0;
HXDLIN( 530)				::Array< ::Dynamic> _g1 = this->_delayed_init_entities;
HXDLIN( 530)				while((_g < _g1->length)){
HXLINE( 530)					 ::luxe::Entity entity = _g1->__get(_g).StaticCast<  ::luxe::Entity >();
HXDLIN( 530)					_g = (_g + (int)1);
HXLINE( 531)					if (entity->destroyed) {
HXLINE( 531)						continue;
            					}
HXLINE( 532)					if (!(entity->inited)) {
HXLINE( 534)						entity->init();
HXDLIN( 534)						entity->emit((int)2,null());
HXDLIN( 534)						if ((entity->component_count > (int)0)) {
HXLINE( 534)							 ::luxe::structural::OrderedMap_String_luxe_Component _g_map;
HXDLIN( 534)							int _g_index = (int)0;
HXDLIN( 534)							_g_map = entity->_components->components;
HXDLIN( 534)							while((_g_index < _g_map->_keys->length)){
HXLINE( 534)								::Array< ::String > _g_map1 = _g_map->_keys;
HXDLIN( 534)								_g_index = (_g_index + (int)1);
HXDLIN( 534)								 ::luxe::Component _component = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map->map,_g_map1->__get((_g_index - (int)1)))) );
HXDLIN( 534)								_component->init();
            							}
            						}
HXDLIN( 534)						if ((entity->children->length > (int)0)) {
HXLINE( 534)							int _g2 = (int)0;
HXDLIN( 534)							::Array< ::Dynamic> _g11 = entity->children;
HXDLIN( 534)							while((_g2 < _g11->length)){
HXLINE( 534)								 ::luxe::Entity _child = _g11->__get(_g2).StaticCast<  ::luxe::Entity >();
HXDLIN( 534)								_g2 = (_g2 + (int)1);
HXDLIN( 534)								_child->_init();
            							}
            						}
HXDLIN( 534)						entity->inited = true;
            					}
            				}
            			}
HXLINE( 539)			this->_delayed_init_entities = null();
HXLINE( 540)			this->_delayed_init_entities = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 543)		if ((this->_delayed_reset_entities->length > (int)0)) {
HXLINE( 544)			{
HXLINE( 544)				int _g3 = (int)0;
HXDLIN( 544)				::Array< ::Dynamic> _g12 = this->_delayed_reset_entities;
HXDLIN( 544)				while((_g3 < _g12->length)){
HXLINE( 544)					 ::luxe::Entity entity1 = _g12->__get(_g3).StaticCast<  ::luxe::Entity >();
HXDLIN( 544)					_g3 = (_g3 + (int)1);
HXLINE( 545)					if (entity1->destroyed) {
HXLINE( 545)						continue;
            					}
HXLINE( 547)					{
HXLINE( 547)						entity1->onreset();
HXDLIN( 547)						entity1->emit((int)3,null());
HXDLIN( 547)						if ((entity1->component_count > (int)0)) {
HXLINE( 547)							 ::luxe::structural::OrderedMap_String_luxe_Component _g_map2;
HXDLIN( 547)							int _g_index1 = (int)0;
HXDLIN( 547)							_g_map2 = entity1->_components->components;
HXDLIN( 547)							while((_g_index1 < _g_map2->_keys->length)){
HXLINE( 547)								::Array< ::String > _g_map3 = _g_map2->_keys;
HXDLIN( 547)								_g_index1 = (_g_index1 + (int)1);
HXDLIN( 547)								 ::luxe::Component _component1 = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map2->map,_g_map3->__get((_g_index1 - (int)1)))) );
HXDLIN( 547)								_component1->onreset();
            							}
            						}
HXDLIN( 547)						if ((entity1->children->length > (int)0)) {
HXLINE( 547)							int _g4 = (int)0;
HXDLIN( 547)							::Array< ::Dynamic> _g13 = entity1->children;
HXDLIN( 547)							while((_g4 < _g13->length)){
HXLINE( 547)								 ::luxe::Entity _child1 = _g13->__get(_g4).StaticCast<  ::luxe::Entity >();
HXDLIN( 547)								_g4 = (_g4 + (int)1);
HXDLIN( 547)								_child1->_reset(null());
            							}
            						}
HXDLIN( 547)						{
HXLINE( 547)							Float _rate = entity1->fixed_rate;
HXDLIN( 547)							if (hx::IsNotNull( entity1->fixed_rate_timer )) {
HXLINE( 547)								entity1->fixed_rate_timer->stop();
HXDLIN( 547)								entity1->fixed_rate_timer = null();
            							}
HXDLIN( 547)							bool _hx_tmp1;
HXDLIN( 547)							bool _hx_tmp2;
HXDLIN( 547)							if ((_rate != (int)0)) {
HXLINE( 547)								_hx_tmp2 = hx::IsNull( entity1->get_parent() );
            							}
            							else {
HXLINE( 547)								_hx_tmp2 = false;
            							}
HXDLIN( 547)							if (_hx_tmp2) {
HXLINE( 547)								_hx_tmp1 = !(entity1->destroyed);
            							}
            							else {
HXLINE( 547)								_hx_tmp1 = false;
            							}
HXDLIN( 547)							if (_hx_tmp1) {
HXLINE( 547)								entity1->fixed_rate_timer =  ::snow::api::Timer_obj::__alloc( HX_CTX ,_rate);
HXDLIN( 547)								entity1->fixed_rate_timer->run = entity1->_fixed_update_dyn();
            							}
            						}
HXDLIN( 547)						entity1->started = true;
            					}
            				}
            			}
HXLINE( 549)			this->_delayed_reset_entities = null();
HXLINE( 550)			this->_delayed_reset_entities = ::Array_obj< ::Dynamic>::__new(0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,handle_delayed_additions,(void))

int Scene_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_557_get_length)
HXDLIN( 557)		return ::Lambda_obj::count(this->entities,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,get_length,return )

::String Scene_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_54fb3c2ed333dc70_563_toString)
HXDLIN( 563)		::String _hx_tmp = ((HX_("luxe Scene: ",68,44,23,a6) + this->get_name()) + HX_(" / ",31,71,18,00));
HXDLIN( 563)		::String _hx_tmp1 = ((_hx_tmp + this->get_length()) + HX_(" entities / id: ",b1,20,b8,c4));
HXDLIN( 563)		return (_hx_tmp1 + this->get_id());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,toString,return )


hx::ObjectPtr< Scene_obj > Scene_obj::__new(::String __o__name) {
	hx::ObjectPtr< Scene_obj > __this = new Scene_obj();
	__this->__construct(__o__name);
	return __this;
}

hx::ObjectPtr< Scene_obj > Scene_obj::__alloc(hx::Ctx *_hx_ctx,::String __o__name) {
	Scene_obj *__this = (Scene_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Scene_obj), true, "luxe.Scene"));
	*(void **)__this = Scene_obj::_hx_vtable;
	__this->__construct(__o__name);
	return __this;
}

Scene_obj::Scene_obj()
{
}

void Scene_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Scene);
	HX_MARK_MEMBER_NAME(entities,"entities");
	HX_MARK_MEMBER_NAME(inited,"inited");
	HX_MARK_MEMBER_NAME(started,"started");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(destroyed,"destroyed");
	HX_MARK_MEMBER_NAME(_delayed_init_entities,"_delayed_init_entities");
	HX_MARK_MEMBER_NAME(_delayed_reset_entities,"_delayed_reset_entities");
	HX_MARK_MEMBER_NAME(_has_changed,"_has_changed");
	HX_MARK_MEMBER_NAME(entity_count,"entity_count");
	 ::luxe::Objects_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Scene_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(entities,"entities");
	HX_VISIT_MEMBER_NAME(inited,"inited");
	HX_VISIT_MEMBER_NAME(started,"started");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(destroyed,"destroyed");
	HX_VISIT_MEMBER_NAME(_delayed_init_entities,"_delayed_init_entities");
	HX_VISIT_MEMBER_NAME(_delayed_reset_entities,"_delayed_reset_entities");
	HX_VISIT_MEMBER_NAME(_has_changed,"_has_changed");
	HX_VISIT_MEMBER_NAME(entity_count,"entity_count");
	 ::luxe::Objects_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Scene_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyup") ) { return hx::Val( keyup_dyn() ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inited") ) { return hx::Val( inited ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( inCallProp == hx::paccAlways ? get_length() : length ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { return hx::Val( started ); }
		if (HX_FIELD_EQ(inName,"keydown") ) { return hx::Val( keydown_dyn() ); }
		if (HX_FIELD_EQ(inName,"mouseup") ) { return hx::Val( mouseup_dyn() ); }
		if (HX_FIELD_EQ(inName,"touchup") ) { return hx::Val( touchup_dyn() ); }
		if (HX_FIELD_EQ(inName,"inputup") ) { return hx::Val( inputup_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"entities") ) { return hx::Val( entities ); }
		if (HX_FIELD_EQ(inName,"_destroy") ) { return hx::Val( _destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"_do_init") ) { return hx::Val( _do_init_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { return hx::Val( destroyed ); }
		if (HX_FIELD_EQ(inName,"prerender") ) { return hx::Val( prerender_dyn() ); }
		if (HX_FIELD_EQ(inName,"textinput") ) { return hx::Val( textinput_dyn() ); }
		if (HX_FIELD_EQ(inName,"mousedown") ) { return hx::Val( mousedown_dyn() ); }
		if (HX_FIELD_EQ(inName,"mousemove") ) { return hx::Val( mousemove_dyn() ); }
		if (HX_FIELD_EQ(inName,"touchdown") ) { return hx::Val( touchdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"touchmove") ) { return hx::Val( touchmove_dyn() ); }
		if (HX_FIELD_EQ(inName,"gamepadup") ) { return hx::Val( gamepadup_dyn() ); }
		if (HX_FIELD_EQ(inName,"inputdown") ) { return hx::Val( inputdown_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"postrender") ) { return hx::Val( postrender_dyn() ); }
		if (HX_FIELD_EQ(inName,"mousewheel") ) { return hx::Val( mousewheel_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gamepadaxis") ) { return hx::Val( gamepadaxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"gamepaddown") ) { return hx::Val( gamepaddown_dyn() ); }
		if (HX_FIELD_EQ(inName,"windowmoved") ) { return hx::Val( windowmoved_dyn() ); }
		if (HX_FIELD_EQ(inName,"windowsized") ) { return hx::Val( windowsized_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_has_changed") ) { return hx::Val( _has_changed ); }
		if (HX_FIELD_EQ(inName,"entity_count") ) { return hx::Val( entity_count ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepaddevice") ) { return hx::Val( gamepaddevice_dyn() ); }
		if (HX_FIELD_EQ(inName,"windowresized") ) { return hx::Val( windowresized_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_named_like") ) { return hx::Val( get_named_like_dyn() ); }
		if (HX_FIELD_EQ(inName,"windowrestored") ) { return hx::Val( windowrestored_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"windowminimized") ) { return hx::Val( windowminimized_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_delayed_init_entities") ) { return hx::Val( _delayed_init_entities ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_delayed_reset_entities") ) { return hx::Val( _delayed_reset_entities ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"handle_duplicate_warning") ) { return hx::Val( handle_duplicate_warning_dyn() ); }
		if (HX_FIELD_EQ(inName,"handle_delayed_additions") ) { return hx::Val( handle_delayed_additions_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Scene_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"inited") ) { inited=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { started=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"entities") ) { entities=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { destroyed=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_has_changed") ) { _has_changed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"entity_count") ) { entity_count=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_delayed_init_entities") ) { _delayed_init_entities=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_delayed_reset_entities") ) { _delayed_reset_entities=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Scene_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("entities","\x41","\x96","\x95","\x92"));
	outFields->push(HX_HCSTRING("inited","\x6f","\x77","\x4c","\x97"));
	outFields->push(HX_HCSTRING("started","\x41","\x29","\x1b","\x35"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4"));
	outFields->push(HX_HCSTRING("_delayed_init_entities","\x34","\xe8","\x4b","\xde"));
	outFields->push(HX_HCSTRING("_delayed_reset_entities","\xcd","\x49","\xde","\xfc"));
	outFields->push(HX_HCSTRING("_has_changed","\xd0","\xe1","\x93","\x65"));
	outFields->push(HX_HCSTRING("entity_count","\x73","\x1b","\xa6","\xcf"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Scene_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Scene_obj,entities),HX_HCSTRING("entities","\x41","\x96","\x95","\x92")},
	{hx::fsBool,(int)offsetof(Scene_obj,inited),HX_HCSTRING("inited","\x6f","\x77","\x4c","\x97")},
	{hx::fsBool,(int)offsetof(Scene_obj,started),HX_HCSTRING("started","\x41","\x29","\x1b","\x35")},
	{hx::fsInt,(int)offsetof(Scene_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsBool,(int)offsetof(Scene_obj,destroyed),HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,_delayed_init_entities),HX_HCSTRING("_delayed_init_entities","\x34","\xe8","\x4b","\xde")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,_delayed_reset_entities),HX_HCSTRING("_delayed_reset_entities","\xcd","\x49","\xde","\xfc")},
	{hx::fsBool,(int)offsetof(Scene_obj,_has_changed),HX_HCSTRING("_has_changed","\xd0","\xe1","\x93","\x65")},
	{hx::fsInt,(int)offsetof(Scene_obj,entity_count),HX_HCSTRING("entity_count","\x73","\x1b","\xa6","\xcf")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Scene_obj_sStaticStorageInfo = 0;
#endif

static ::String Scene_obj_sMemberFields[] = {
	HX_HCSTRING("entities","\x41","\x96","\x95","\x92"),
	HX_HCSTRING("inited","\x6f","\x77","\x4c","\x97"),
	HX_HCSTRING("started","\x41","\x29","\x1b","\x35"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4"),
	HX_HCSTRING("_delayed_init_entities","\x34","\xe8","\x4b","\xde"),
	HX_HCSTRING("_delayed_reset_entities","\xcd","\x49","\xde","\xfc"),
	HX_HCSTRING("_has_changed","\xd0","\xe1","\x93","\x65"),
	HX_HCSTRING("handle_duplicate_warning","\xd1","\x8a","\x7d","\x4b"),
	HX_HCSTRING("entity_count","\x73","\x1b","\xa6","\xcf"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("get_named_like","\x26","\x8b","\x54","\xbc"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("prerender","\xb9","\x07","\x36","\x2f"),
	HX_HCSTRING("postrender","\xb6","\x77","\xcd","\x25"),
	HX_HCSTRING("keydown","\x81","\x3d","\x6e","\xb1"),
	HX_HCSTRING("keyup","\xba","\xd5","\xfe","\xde"),
	HX_HCSTRING("textinput","\x3d","\xe4","\xdd","\xc3"),
	HX_HCSTRING("mousedown","\x07","\x85","\xe9","\x03"),
	HX_HCSTRING("mousewheel","\x56","\xb8","\x59","\x54"),
	HX_HCSTRING("mouseup","\xc0","\x0f","\x73","\xc0"),
	HX_HCSTRING("mousemove","\xb6","\x6f","\xdc","\x09"),
	HX_HCSTRING("touchdown","\xa1","\x5b","\x01","\x1d"),
	HX_HCSTRING("touchup","\xda","\x2b","\xf8","\xd8"),
	HX_HCSTRING("touchmove","\x50","\x46","\xf4","\x22"),
	HX_HCSTRING("gamepadaxis","\xc2","\x61","\xf2","\xe5"),
	HX_HCSTRING("gamepadup","\x3c","\x71","\x38","\x5f"),
	HX_HCSTRING("gamepaddown","\x83","\x3d","\xe7","\xe7"),
	HX_HCSTRING("gamepaddevice","\xf7","\x6b","\xa5","\x5b"),
	HX_HCSTRING("windowmoved","\x43","\xf2","\x0a","\x6a"),
	HX_HCSTRING("windowresized","\x00","\x26","\x3a","\x51"),
	HX_HCSTRING("windowsized","\x93","\x2e","\x7e","\xda"),
	HX_HCSTRING("windowminimized","\x96","\x69","\x37","\x2d"),
	HX_HCSTRING("windowrestored","\x46","\x01","\xd4","\x0f"),
	HX_HCSTRING("inputdown","\x6c","\x89","\xbf","\x1e"),
	HX_HCSTRING("inputup","\xe5","\xc0","\x1e","\xd4"),
	HX_HCSTRING("_destroy","\x7b","\x86","\x3e","\x5e"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("_do_init","\x05","\x21","\x84","\xd2"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("handle_delayed_additions","\x43","\x53","\x9d","\xd5"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Scene_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Scene_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Scene_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Scene_obj::__mClass,"__mClass");
};

#endif

hx::Class Scene_obj::__mClass;

void Scene_obj::__register()
{
	hx::Object *dummy = new Scene_obj;
	Scene_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Scene","\x74","\xca","\xc6","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Scene_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Scene_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Scene_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Scene_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Scene_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Scene_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
