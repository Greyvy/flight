// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_luxe_Debug
#include <luxe/Debug.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_KeyEvent
#include <luxe/KeyEvent.h>
#endif
#ifndef INCLUDED_luxe_MouseEvent
#include <luxe/MouseEvent.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_ResourceStats
#include <luxe/ResourceStats.h>
#endif
#ifndef INCLUDED_luxe_Resources
#include <luxe/Resources.h>
#endif
#ifndef INCLUDED_luxe_Screen
#include <luxe/Screen.h>
#endif
#ifndef INCLUDED_luxe_Text
#include <luxe/Text.h>
#endif
#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
#ifndef INCLUDED_luxe_debug_DebugView
#include <luxe/debug/DebugView.h>
#endif
#ifndef INCLUDED_luxe_debug_Inspector
#include <luxe/debug/Inspector.h>
#endif
#ifndef INCLUDED_luxe_debug_StatsDebugView
#include <luxe/debug/StatsDebugView.h>
#endif
#ifndef INCLUDED_luxe_resource_AudioResource
#include <luxe/resource/AudioResource.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_luxe_resource_TextResource
#include <luxe/resource/TextResource.h>
#endif
#ifndef INCLUDED_luxe_tween_Actuate
#include <luxe/tween/Actuate.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_IGenericActuator
#include <luxe/tween/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_luxe_tween_easing_IEasing
#include <luxe/tween/easing/IEasing.h>
#endif
#ifndef INCLUDED_luxe_tween_easing_Linear
#include <luxe/tween/easing/Linear.h>
#endif
#ifndef INCLUDED_luxe_utils_Utils
#include <luxe/utils/Utils.h>
#endif
#ifndef INCLUDED_phoenix_Batcher
#include <phoenix/Batcher.h>
#endif
#ifndef INCLUDED_phoenix_BitmapFont
#include <phoenix/BitmapFont.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_RendererStats
#include <phoenix/RendererStats.h>
#endif
#ifndef INCLUDED_phoenix_Shader
#include <phoenix/Shader.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Asset
#include <snow/systems/assets/Asset.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetText
#include <snow/systems/assets/AssetText.h>
#endif
#ifndef INCLUDED_snow_systems_audio_AudioSource
#include <snow/systems/audio/AudioSource.h>
#endif
#ifndef INCLUDED_snow_types_AudioData
#include <snow/types/AudioData.h>
#endif
#ifndef INCLUDED_snow_types_WindowEvent
#include <snow/types/WindowEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0c8789f97a853ff5_13_new,"luxe.debug.StatsDebugView","new",0x9c8136be,"luxe.debug.StatsDebugView.new","luxe/debug/StatsDebugView.hx",13,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_56_get_resource_stats_string,"luxe.debug.StatsDebugView","get_resource_stats_string",0x687d7ab7,"luxe.debug.StatsDebugView.get_resource_stats_string","luxe/debug/StatsDebugView.hx",56,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_60_get_batcher_info,"luxe.debug.StatsDebugView","get_batcher_info",0x01c897b1,"luxe.debug.StatsDebugView.get_batcher_info","luxe/debug/StatsDebugView.hx",60,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_72_get_render_stats_string,"luxe.debug.StatsDebugView","get_render_stats_string",0xb1344fef,"luxe.debug.StatsDebugView.get_render_stats_string","luxe/debug/StatsDebugView.hx",72,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_132_create,"luxe.debug.StatsDebugView","create",0xa3e7cf5e,"luxe.debug.StatsDebugView.create","luxe/debug/StatsDebugView.hx",132,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_96_create,"luxe.debug.StatsDebugView","create",0xa3e7cf5e,"luxe.debug.StatsDebugView.create","luxe/debug/StatsDebugView.hx",96,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_136_resize,"luxe.debug.StatsDebugView","resize",0x3053c256,"luxe.debug.StatsDebugView.resize","luxe/debug/StatsDebugView.hx",136,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_172_onwindowsized,"luxe.debug.StatsDebugView","onwindowsized",0xc009fbb2,"luxe.debug.StatsDebugView.onwindowsized","luxe/debug/StatsDebugView.hx",172,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_207_refresh,"luxe.debug.StatsDebugView","refresh",0xa2a3c739,"luxe.debug.StatsDebugView.refresh","luxe/debug/StatsDebugView.hx",207,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_174_refresh,"luxe.debug.StatsDebugView","refresh",0xa2a3c739,"luxe.debug.StatsDebugView.refresh","luxe/debug/StatsDebugView.hx",174,0x06813970)
static const int _hx_array_data_85bbbfcc_13[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_280_process,"luxe.debug.StatsDebugView","process",0xa6cd8fcd,"luxe.debug.StatsDebugView.process","luxe/debug/StatsDebugView.hx",280,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_312_onmousewheel,"luxe.debug.StatsDebugView","onmousewheel",0x733a3417,"luxe.debug.StatsDebugView.onmousewheel","luxe/debug/StatsDebugView.hx",312,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_361_onkeydown,"luxe.debug.StatsDebugView","onkeydown",0x09e74f20,"luxe.debug.StatsDebugView.onkeydown","luxe/debug/StatsDebugView.hx",361,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_371_show,"luxe.debug.StatsDebugView","show",0x57df00df,"luxe.debug.StatsDebugView.show","luxe/debug/StatsDebugView.hx",371,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_380_hide,"luxe.debug.StatsDebugView","hide",0x509a60a4,"luxe.debug.StatsDebugView.hide","luxe/debug/StatsDebugView.hx",380,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_390_reset_tween,"luxe.debug.StatsDebugView","reset_tween",0x367ff519,"luxe.debug.StatsDebugView.reset_tween","luxe/debug/StatsDebugView.hx",390,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_405_reset_tween,"luxe.debug.StatsDebugView","reset_tween",0x367ff519,"luxe.debug.StatsDebugView.reset_tween","luxe/debug/StatsDebugView.hx",405,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_415_reset_tween,"luxe.debug.StatsDebugView","reset_tween",0x367ff519,"luxe.debug.StatsDebugView.reset_tween","luxe/debug/StatsDebugView.hx",415,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_420_refresh_render_stats,"luxe.debug.StatsDebugView","refresh_render_stats",0xe506493c,"luxe.debug.StatsDebugView.refresh_render_stats","luxe/debug/StatsDebugView.hx",420,0x06813970)
HX_LOCAL_STACK_FRAME(_hx_pos_0c8789f97a853ff5_436_update_render_stats,"luxe.debug.StatsDebugView","update_render_stats",0xaa1a0aca,"luxe.debug.StatsDebugView.update_render_stats","luxe/debug/StatsDebugView.hx",436,0x06813970)
namespace luxe{
namespace debug{

void StatsDebugView_obj::__construct( ::luxe::Debug _debug){
            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_13_new)
HXLINE(  95)		this->margin = (int)32;
HXLINE(  20)		this->font_size = (int)15;
HXLINE(  19)		this->debug_geometry_count = (int)13;
HXLINE(  18)		this->debug_draw_call_count = (int)3;
HXLINE(  28)		super::__construct(_debug);
HXLINE(  30)		this->set_name(HX_("Statistics",43,db,e9,f0));
HXLINE(  32)		this->_last_render_stats =  ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("geometry_count",42,a0,8d,12),(int)0)
            			->setFixed(1,HX_("draw_calls",5a,c0,31,4a),(int)0)
            			->setFixed(2,HX_("static_batched_count",d8,88,51,4c),(int)0)
            			->setFixed(3,HX_("batchers",ec,2f,0e,4e),(int)0)
            			->setFixed(4,HX_("dynamic_batched_count",69,37,a8,66),(int)0)
            			->setFixed(5,HX_("visible_count",02,e6,a7,70),(int)0)
            			->setFixed(6,HX_("vert_count",81,db,0c,72),(int)0));
HXLINE(  42)		this->_render_stats =  ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("geometry_count",42,a0,8d,12),(int)0)
            			->setFixed(1,HX_("draw_calls",5a,c0,31,4a),(int)0)
            			->setFixed(2,HX_("static_batched_count",d8,88,51,4c),(int)0)
            			->setFixed(3,HX_("batchers",ec,2f,0e,4e),(int)0)
            			->setFixed(4,HX_("dynamic_batched_count",69,37,a8,66),(int)0)
            			->setFixed(5,HX_("visible_count",02,e6,a7,70),(int)0)
            			->setFixed(6,HX_("vert_count",81,db,0c,72),(int)0));
            	}

Dynamic StatsDebugView_obj::__CreateEmpty() { return new StatsDebugView_obj; }

void *StatsDebugView_obj::_hx_vtable = 0;

Dynamic StatsDebugView_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StatsDebugView_obj > _hx_result = new StatsDebugView_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool StatsDebugView_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0bbca018) {
		if (inClassId<=(int)0x099ca90a) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x099ca90a;
		} else {
			return inClassId==(int)0x0bbca018;
		}
	} else {
		return inClassId==(int)0x21ea53b6 || inClassId==(int)0x5fb4b7fb;
	}
}

::String StatsDebugView_obj::get_resource_stats_string(){
            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_56_get_resource_stats_string)
HXDLIN(  56)		return ::Std_obj::string(::Luxe_obj::resources->stats);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatsDebugView_obj,get_resource_stats_string,return )

::String StatsDebugView_obj::get_batcher_info( ::phoenix::Batcher b){
            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_60_get_batcher_info)
HXLINE(  61)		::String _s = ((HX_("  ",00,1c,00,00) + b->name) + HX_(" (enabled ",87,50,ba,eb));
HXDLIN(  61)		::String _s1 = ((_s + ::Std_obj::string(b->enabled)) + HX_(", layer ",a3,8a,0b,60));
HXDLIN(  61)		::String _s2 = ((_s1 + b->layer) + HX_(")\n",c1,23,00,00));
HXLINE(  62)		::String _s3;
HXDLIN(  62)		if (hx::IsNull( b->shader )) {
HXLINE(  62)			_s3 = HX_("none",b8,12,0a,49);
            		}
            		else {
HXLINE(  62)			_s3 = b->shader->id;
            		}
HXDLIN(  62)		_s2 = (_s2 + ((HX_("    shader: ",0b,fd,61,f1) + _s3) + HX_("\n",0a,00,00,00)));
HXLINE(  63)		_s2 = (_s2 + ((HX_("    max verts/batch: ",b7,5e,9e,f5) + b->max_verts) + HX_("\n",0a,00,00,00)));
HXLINE(  64)		_s2 = (_s2 + ((HX_("    visible geom: ",50,c2,5d,ea) + b->visible_count) + HX_("\n",0a,00,00,00)));
HXLINE(  65)		_s2 = (_s2 + ((HX_("    verts: ",c8,4d,3a,27) + b->vert_count) + HX_("\n",0a,00,00,00)));
HXLINE(  66)		_s2 = (_s2 + ((HX_("    draw calls: ",df,5f,2f,0a) + b->draw_calls) + HX_("\n",0a,00,00,00)));
HXLINE(  67)		_s2 = (_s2 + ((HX_("    batched: ",7f,b5,6a,13) + b->dynamic_batched_count) + HX_("\n",0a,00,00,00)));
HXLINE(  68)		_s2 = (_s2 + ((HX_("    static: ",d4,4e,66,1d) + b->static_batched_count) + HX_("\n",0a,00,00,00)));
HXLINE(  69)		return _s2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StatsDebugView_obj,get_batcher_info,return )

::String StatsDebugView_obj::get_render_stats_string(){
            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_72_get_render_stats_string)
HXLINE(  74)		::String _bs = HX_("",00,00,00,00);
HXLINE(  76)		{
HXLINE(  76)			int _g = (int)0;
HXDLIN(  76)			::Array< ::Dynamic> _g1 = ::phoenix::Batcher_obj::all;
HXDLIN(  76)			while((_g < _g1->length)){
HXLINE(  76)				 ::phoenix::Batcher b = _g1->__get(_g).StaticCast<  ::phoenix::Batcher >();
HXDLIN(  76)				_g = (_g + (int)1);
HXLINE(  77)				if ((b->show_stats != (int)0)) {
HXLINE(  78)					::String _s = ((HX_("  ",00,1c,00,00) + b->name) + HX_(" (enabled ",87,50,ba,eb));
HXDLIN(  78)					::String _s1 = ((_s + ::Std_obj::string(b->enabled)) + HX_(", layer ",a3,8a,0b,60));
HXDLIN(  78)					::String _s2 = ((_s1 + b->layer) + HX_(")\n",c1,23,00,00));
HXDLIN(  78)					::String _s3;
HXDLIN(  78)					if (hx::IsNull( b->shader )) {
HXLINE(  78)						_s3 = HX_("none",b8,12,0a,49);
            					}
            					else {
HXLINE(  78)						_s3 = b->shader->id;
            					}
HXDLIN(  78)					_s2 = (_s2 + ((HX_("    shader: ",0b,fd,61,f1) + _s3) + HX_("\n",0a,00,00,00)));
HXDLIN(  78)					_s2 = (_s2 + ((HX_("    max verts/batch: ",b7,5e,9e,f5) + b->max_verts) + HX_("\n",0a,00,00,00)));
HXDLIN(  78)					_s2 = (_s2 + ((HX_("    visible geom: ",50,c2,5d,ea) + b->visible_count) + HX_("\n",0a,00,00,00)));
HXDLIN(  78)					_s2 = (_s2 + ((HX_("    verts: ",c8,4d,3a,27) + b->vert_count) + HX_("\n",0a,00,00,00)));
HXDLIN(  78)					_s2 = (_s2 + ((HX_("    draw calls: ",df,5f,2f,0a) + b->draw_calls) + HX_("\n",0a,00,00,00)));
HXDLIN(  78)					_s2 = (_s2 + ((HX_("    batched: ",7f,b5,6a,13) + b->dynamic_batched_count) + HX_("\n",0a,00,00,00)));
HXDLIN(  78)					_s2 = (_s2 + ((HX_("    static: ",d4,4e,66,1d) + b->static_batched_count) + HX_("\n",0a,00,00,00)));
HXDLIN(  78)					_bs = (_bs + _s2);
            				}
            			}
            		}
HXLINE(  82)		return ((((((((((((((((((((((HX_("Renderer Statistics\n\n",a0,47,f6,9a) + HX_("total geometry : ",f8,50,55,e4)) + ( (int)(this->_render_stats->__Field(HX_("geometry_count",42,a0,8d,12),hx::paccDynamic)) )) + HX_("\n",0a,00,00,00)) + HX_("visible geometry : ",a6,c2,c2,90)) + ( (int)(this->_render_stats->__Field(HX_("visible_count",02,e6,a7,70),hx::paccDynamic)) )) + HX_("\n",0a,00,00,00)) + HX_("dynamic batch count : ",fe,f1,d0,e5)) + ( (int)(this->_render_stats->__Field(HX_("dynamic_batched_count",69,37,a8,66),hx::paccDynamic)) )) + HX_("\n",0a,00,00,00)) + HX_("static batch count : ",af,e1,4e,f4)) + ( (int)(this->_render_stats->__Field(HX_("static_batched_count",d8,88,51,4c),hx::paccDynamic)) )) + HX_("\n",0a,00,00,00)) + HX_("total draw calls : ",11,66,61,e8)) + ( (int)(this->_render_stats->__Field(HX_("draw_calls",5a,c0,31,4a),hx::paccDynamic)) )) + HX_("\n",0a,00,00,00)) + HX_("total vert count : ",4a,7d,f0,cd)) + ( (int)(this->_render_stats->__Field(HX_("vert_count",81,db,0c,72),hx::paccDynamic)) )) + HX_("\n",0a,00,00,00)) + HX_("batchers : ",5a,06,d0,1b)) + ( (int)(this->_render_stats->__Field(HX_("batchers",ec,2f,0e,4e),hx::paccDynamic)) )) + HX_("\n",0a,00,00,00)) + _bs);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatsDebugView_obj,get_render_stats_string,return )

void StatsDebugView_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::luxe::debug::StatsDebugView,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic _){
            			HX_GC_STACKFRAME(&_hx_pos_0c8789f97a853ff5_132_create)
HXLINE( 132)			if (_gthis->visible) {
HXLINE( 132)				_gthis->refresh();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_0c8789f97a853ff5_96_create)
HXDLIN(  96)		 ::luxe::debug::StatsDebugView _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  98)		 ::luxe::Debug debug = ::Luxe_obj::debug;
HXLINE( 104)		 ::phoenix::Color _hx_tmp =  ::phoenix::Color_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)1)->rgb((int)16121979);
HXLINE( 105)		 ::phoenix::Vector _hx_tmp1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null());
HXLINE( 106)		 ::phoenix::BitmapFont _hx_tmp2 = ::Luxe_obj::renderer->font;
HXLINE( 107)		::String _hx_tmp3 = this->get_render_stats_string();
HXLINE( 100)		this->render_stats_text =  ::luxe::Text_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(10)
            			->setFixed(0,HX_("visible",72,78,24,a3),false)
            			->setFixed(1,HX_("batcher",a7,22,10,c0),debug->batcher)
            			->setFixed(2,HX_("depth",03,f1,29,d7),((Float)999.3))
            			->setFixed(3,HX_("pos",94,5d,55,00),_hx_tmp1)
            			->setFixed(4,HX_("no_scene",8e,a7,34,10),true)
            			->setFixed(5,HX_("font",cf,5d,c0,43),_hx_tmp2)
            			->setFixed(6,HX_("name",4b,72,ff,48),HX_("debug.render.stats",02,a2,35,30))
            			->setFixed(7,HX_("color",63,71,5c,4a),_hx_tmp)
            			->setFixed(8,HX_("point_size",50,66,f5,4b),this->font_size)
            			->setFixed(9,HX_("text",ad,cc,f9,4c),_hx_tmp3)));
HXLINE( 117)		 ::phoenix::Color _hx_tmp4 =  ::phoenix::Color_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)1)->rgb((int)16121979);
HXLINE( 118)		 ::phoenix::Vector _hx_tmp5 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null());
HXLINE( 119)		 ::phoenix::BitmapFont _hx_tmp6 = ::Luxe_obj::renderer->font;
HXLINE( 113)		this->resource_list_text =  ::luxe::Text_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(11)
            			->setFixed(0,HX_("visible",72,78,24,a3),false)
            			->setFixed(1,HX_("batcher",a7,22,10,c0),debug->batcher)
            			->setFixed(2,HX_("depth",03,f1,29,d7),((Float)999.3))
            			->setFixed(3,HX_("pos",94,5d,55,00),_hx_tmp5)
            			->setFixed(4,HX_("no_scene",8e,a7,34,10),true)
            			->setFixed(5,HX_("align",c5,56,91,21),(int)1)
            			->setFixed(6,HX_("font",cf,5d,c0,43),_hx_tmp6)
            			->setFixed(7,HX_("name",4b,72,ff,48),HX_("debug.resource.stats",3a,f2,c9,aa))
            			->setFixed(8,HX_("color",63,71,5c,4a),_hx_tmp4)
            			->setFixed(9,HX_("point_size",50,66,f5,4b),(this->font_size * ((Float)0.9)))
            			->setFixed(10,HX_("text",ad,cc,f9,4c),HX_("",00,00,00,00))));
HXLINE( 127)		this->render_stats_text->geometry->id = HX_("debug.render.stats.geometry",9e,ee,a4,fb);
HXLINE( 128)		this->render_stats_text->geometry->id = HX_("debug.resource.stats.geometry",66,d7,50,e4);
HXLINE( 130)		this->resize();
HXLINE( 132)		::Luxe_obj::resources->on((int)1, ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


void StatsDebugView_obj::resize(){
            	HX_GC_STACKFRAME(&_hx_pos_0c8789f97a853ff5_136_resize)
HXLINE( 138)		bool _hx_tmp;
HXDLIN( 138)		if (hx::IsNotNull( this->resource_list_text )) {
HXLINE( 138)			_hx_tmp = hx::IsNull( this->render_stats_text );
            		}
            		else {
HXLINE( 138)			_hx_tmp = true;
            		}
HXDLIN( 138)		if (_hx_tmp) {
HXLINE( 140)			return;
            		}
HXLINE( 143)		 ::luxe::Debug debug = ::Luxe_obj::debug;
HXLINE( 146)		Float debug1 = debug->inspector->pos->x;
HXDLIN( 146)		Float viewrect = (debug1 + ((Float)this->margin / (Float)(int)2));
HXLINE( 147)		Float debug2 = debug->inspector->pos->y;
HXDLIN( 147)		Float viewrect1 = (debug2 + (this->margin * ((Float)1.5)));
HXLINE( 148)		Float viewrect2 = (debug->inspector->size->x - this->margin);
HXLINE( 149)		Float viewrect3 = (debug->inspector->size->y - this->margin);
HXLINE( 145)		 ::phoenix::Rectangle viewrect4 =  ::phoenix::Rectangle_obj::__alloc( HX_CTX ,viewrect,viewrect1,viewrect2,(viewrect3 - (this->margin * ((Float)1.5))));
HXLINE( 152)		Float left = (debug->padding->x + this->margin);
HXLINE( 153)		Float right = ((debug->padding->x + debug->inspector->size->x) - this->margin);
HXLINE( 154)		Float debug3 = debug->padding->y;
HXDLIN( 154)		Float top = (debug3 + (this->margin * ((Float)1.5)));
HXLINE( 155)		Float render_w = this->render_stats_text->text_bounds->w;
HXLINE( 156)		Float render_h = this->render_stats_text->text_bounds->h;
HXLINE( 158)		if (hx::IsNotNull( this->resource_list_text )) {
HXLINE( 159)			 ::luxe::Text _hx_tmp1 = this->resource_list_text;
HXDLIN( 159)			_hx_tmp1->set_pos( ::phoenix::Vector_obj::__alloc( HX_CTX ,right,top,null(),null()));
HXLINE( 160)			this->resource_list_text->set_clip_rect(viewrect4);
            		}
HXLINE( 163)		if (hx::IsNotNull( this->render_stats_text )) {
HXLINE( 164)			 ::luxe::Text _hx_tmp2 = this->render_stats_text;
HXDLIN( 164)			_hx_tmp2->set_pos( ::phoenix::Vector_obj::__alloc( HX_CTX ,left,top,null(),null()));
HXLINE( 165)			this->render_stats_text->set_clip_rect(viewrect4);
            		}
HXLINE( 168)		this->reset_tween();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatsDebugView_obj,resize,(void))

void StatsDebugView_obj::onwindowsized( ::snow::types::WindowEvent e){
            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_172_onwindowsized)
HXDLIN( 172)		this->resize();
            	}


void StatsDebugView_obj::refresh(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< int >,_total_snd) HXARGC(1)
            		::String _hx_run( ::luxe::resource::AudioResource res){
            			HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_207_refresh)
HXLINE( 208)			::String _s = HX_("",00,00,00,00);
HXLINE( 209)			if (hx::IsNotNull( res->source )) {
HXLINE( 210)				::String _s1;
HXDLIN( 210)				if (res->source->data->is_stream) {
HXLINE( 210)					_s1 = HX_("STREAM \xe2""\x80""\xa2""",e4,c1,ac,7f);
            				}
            				else {
HXLINE( 210)					_s1 = HX_("",00,00,00,00);
            				}
HXDLIN( 210)				_s = (_s + _s1);
HXLINE( 211)				_s = (_s + ((((HX_(" ",20,00,00,00) + res->id) + HX_(" \xe2""\x80""\xa2"" ",3c,76,96,02)) + res->ref) + HX_("\t\n",e1,07,00,00)));
HXLINE( 212)				bool _snd1;
HXDLIN( 212)				if (hx::IsNotNull( res->source->data )) {
HXLINE( 212)					_snd1 = !(res->source->data->is_stream);
            				}
            				else {
HXLINE( 212)					_snd1 = false;
            				}
HXDLIN( 212)				if (_snd1) {
HXLINE( 213)					_s = (_s + (HX_("~",7e,00,00,00) + ::Luxe_obj::utils->bytes_to_string(res->source->data->length,null())));
HXLINE( 214)					::Array< int > _total_snd1 = _total_snd;
HXDLIN( 214)					int _snd2 = (int)0;
HXDLIN( 214)					_total_snd1[_snd2] = (_total_snd1->__get(_snd2) + res->source->data->length);
            				}
HXLINE( 216)				if (hx::IsNotNull( res->source->data )) {
HXLINE( 217)					_s = (_s + ((HX_(" ",20,00,00,00) + res->source->data->channels) + HX_("ch",a5,56,00,00)));
HXLINE( 218)					Float n = ::Math_obj::pow((int)10,(int)1);
HXDLIN( 218)					_s = (_s + ((HX_(" ",20,00,00,00) + ((Float)::Std_obj::_hx_int((((Float)res->source->data->rate / (Float)(int)1000) * n)) / (Float)n)) + HX_("khz",3d,8c,51,00)));
HXLINE( 219)					 ::Dynamic this1 = res->source->data->format;
HXDLIN( 219)					::String _s2;
HXDLIN( 219)					if (hx::IsNull( this1 )) {
HXLINE( 219)						_s2 = (HX_("",00,00,00,00) + this1);
            					}
            					else {
HXLINE( 219)						 ::Dynamic _hx_switch_0 = this1;
            						if (  (_hx_switch_0==(int)0) ){
HXLINE( 219)							_s2 = HX_("af_unknown",f0,be,9a,03);
HXDLIN( 219)							goto _hx_goto_9;
            						}
            						if (  (_hx_switch_0==(int)1) ){
HXLINE( 219)							_s2 = HX_("af_custom",0b,db,9b,65);
HXDLIN( 219)							goto _hx_goto_9;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE( 219)							_s2 = HX_("af_ogg",b5,04,9d,c2);
HXDLIN( 219)							goto _hx_goto_9;
            						}
            						if (  (_hx_switch_0==(int)3) ){
HXLINE( 219)							_s2 = HX_("af_wav",92,11,a3,c2);
HXDLIN( 219)							goto _hx_goto_9;
            						}
            						if (  (_hx_switch_0==(int)4) ){
HXLINE( 219)							_s2 = HX_("af_pcm",80,c3,9d,c2);
HXDLIN( 219)							goto _hx_goto_9;
            						}
            						/* default */{
HXLINE( 219)							_s2 = (HX_("",00,00,00,00) + this1);
            						}
            						_hx_goto_9:;
            					}
HXDLIN( 219)					_s = (_s + (HX_(" ",20,00,00,00) + _s2));
HXLINE( 220)					Float value = res->source->duration();
HXDLIN( 220)					Float n1 = ::Math_obj::pow((int)10,(int)4);
HXDLIN( 220)					_s = (_s + ((HX_(" ",20,00,00,00) + ((Float)::Std_obj::_hx_int((value * n1)) / (Float)n1)) + HX_("s",73,00,00,00)));
            				}
HXLINE( 222)				_s = (_s + HX_("\t\t\n\n",a0,c8,f9,05));
            			}
            			else {
HXLINE( 224)				_s = (_s + ((((HX_("",00,00,00,00) + res->id) + HX_(" \xe2""\x80""\xa2"" ",3c,76,96,02)) + res->ref) + HX_("\t\n",e1,07,00,00)));
            			}
HXLINE( 227)			return _s;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_174_refresh)
HXLINE( 176)		::String bytes_lists = HX_("",00,00,00,00);
HXLINE( 177)		::String text_lists = HX_("",00,00,00,00);
HXLINE( 178)		::String json_lists = HX_("",00,00,00,00);
HXLINE( 179)		::String texture_lists = HX_("",00,00,00,00);
HXLINE( 180)		::String rtt_lists = HX_("",00,00,00,00);
HXLINE( 181)		::String font_lists = HX_("",00,00,00,00);
HXLINE( 182)		::String shader_lists = HX_("",00,00,00,00);
HXLINE( 183)		::String audio_lists = HX_("",00,00,00,00);
HXLINE( 185)		int _total_txt = (int)0;
HXLINE( 186)		int _total_tex = (int)0;
HXLINE( 187)		int _total_rtt = (int)0;
HXLINE( 188)		::Array< int > _total_snd = ::Array_obj< int >::fromData( _hx_array_data_85bbbfcc_13,1);
HXLINE( 189)		int _total_all = (int)0;
HXLINE( 207)		 ::Dynamic _snd =  ::Dynamic(new _hx_Closure_0(_total_snd));
HXLINE( 230)		{
HXLINE( 230)			 ::Dynamic res1 = ::Luxe_obj::resources->cache->iterator();
HXDLIN( 230)			while(( (bool)(res1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 230)				 ::luxe::resource::Resource res2 = ( ( ::luxe::resource::Resource)(res1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 231)				{
HXLINE( 231)					int _g = res2->resource_type;
HXDLIN( 231)					switch((int)(_g)){
            						case (int)1: {
HXLINE( 233)							 ::luxe::resource::TextResource res3 = ( ( ::luxe::resource::TextResource)(res2) );
HXDLIN( 233)							int _l;
HXDLIN( 233)							bool _l1;
HXDLIN( 233)							if (hx::IsNotNull( res3->asset )) {
HXLINE( 233)								_l1 = hx::IsNotNull( res3->asset->text );
            							}
            							else {
HXLINE( 233)								_l1 = false;
            							}
HXDLIN( 233)							if (_l1) {
HXLINE( 233)								_l = res3->asset->text.length;
            							}
            							else {
HXLINE( 233)								_l = (int)0;
            							}
HXDLIN( 233)							_total_txt = (_total_txt + _l);
HXDLIN( 233)							::String text_lists1 = ((HX_("(~",56,23,00,00) + ::Luxe_obj::utils->bytes_to_string(_l,null())) + HX_(") ",d7,23,00,00));
HXDLIN( 233)							text_lists = (text_lists + ((((text_lists1 + res3->id) + HX_(" \xe2""\x80""\xa2"" ",3c,76,96,02)) + res3->ref) + HX_("\t\n",e1,07,00,00)));
            						}
            						break;
            						case (int)2: {
HXLINE( 234)							json_lists = (json_lists + ((((HX_("",00,00,00,00) + res2->id) + HX_(" \xe2""\x80""\xa2"" ",3c,76,96,02)) + res2->ref) + HX_("\t\n",e1,07,00,00)));
            						}
            						break;
            						case (int)3: {
HXLINE( 232)							bytes_lists = (bytes_lists + ((((HX_("",00,00,00,00) + res2->id) + HX_(" \xe2""\x80""\xa2"" ",3c,76,96,02)) + res2->ref) + HX_("\t\n",e1,07,00,00)));
            						}
            						break;
            						case (int)4: {
HXLINE( 235)							 ::phoenix::Texture tex = ( ( ::phoenix::Texture)(res2) );
HXDLIN( 235)							if ((tex->resource_type == (int)5)) {
HXLINE( 235)								_total_rtt = (_total_rtt + tex->memory_use());
            							}
            							else {
HXLINE( 235)								_total_tex = (_total_tex + tex->memory_use());
            							}
HXDLIN( 235)							::String texture_lists1 = ((((HX_("(",28,00,00,00) + tex->width_actual) + HX_("x",78,00,00,00)) + tex->height_actual) + HX_(" ~",5e,1c,00,00));
HXDLIN( 235)							 ::luxe::utils::Utils texture_lists2 = ::Luxe_obj::utils;
HXDLIN( 235)							::String texture_lists3 = ((texture_lists1 + texture_lists2->bytes_to_string(tex->memory_use(),null())) + HX_(")    ",a9,00,ad,b0));
HXDLIN( 235)							texture_lists = (texture_lists + ((((texture_lists3 + tex->id) + HX_(" \xe2""\x80""\xa2"" ",3c,76,96,02)) + tex->ref) + HX_("\t\n",e1,07,00,00)));
            						}
            						break;
            						case (int)5: {
HXLINE( 236)							 ::phoenix::Texture tex1 = ( ( ::phoenix::Texture)(res2) );
HXDLIN( 236)							if ((tex1->resource_type == (int)5)) {
HXLINE( 236)								_total_rtt = (_total_rtt + tex1->memory_use());
            							}
            							else {
HXLINE( 236)								_total_tex = (_total_tex + tex1->memory_use());
            							}
HXDLIN( 236)							::String rtt_lists1 = ((((HX_("(",28,00,00,00) + tex1->width_actual) + HX_("x",78,00,00,00)) + tex1->height_actual) + HX_(" ~",5e,1c,00,00));
HXDLIN( 236)							 ::luxe::utils::Utils rtt_lists2 = ::Luxe_obj::utils;
HXDLIN( 236)							::String rtt_lists3 = ((rtt_lists1 + rtt_lists2->bytes_to_string(tex1->memory_use(),null())) + HX_(")    ",a9,00,ad,b0));
HXDLIN( 236)							rtt_lists = (rtt_lists + ((((rtt_lists3 + tex1->id) + HX_(" \xe2""\x80""\xa2"" ",3c,76,96,02)) + tex1->ref) + HX_("\t\n",e1,07,00,00)));
            						}
            						break;
            						case (int)6: {
HXLINE( 237)							font_lists = (font_lists + ((((HX_("",00,00,00,00) + res2->id) + HX_(" \xe2""\x80""\xa2"" ",3c,76,96,02)) + res2->ref) + HX_("\t\n",e1,07,00,00)));
            						}
            						break;
            						case (int)7: {
HXLINE( 238)							 ::phoenix::Shader res4 = ( ( ::phoenix::Shader)(res2) );
HXDLIN( 238)							shader_lists = (shader_lists + ((((((((HX_("(",28,00,00,00) + res4->vert_id) + HX_(", ",74,26,00,00)) + res4->frag_id) + HX_(")    ",a9,00,ad,b0)) + res4->id) + HX_(" \xe2""\x80""\xa2"" ",3c,76,96,02)) + res4->ref) + HX_("\t\n",e1,07,00,00)));
            						}
            						break;
            						case (int)8: {
HXLINE( 239)							audio_lists = (audio_lists + ( (::String)(_snd(( ( ::luxe::resource::AudioResource)(res2) ))) ));
            						}
            						break;
            						default:{
            						}
            					}
            				}
            			}
            		}
HXLINE( 246)		_total_all = (_total_all + _total_txt);
HXLINE( 247)		_total_all = (_total_all + _total_tex);
HXLINE( 248)		_total_all = (_total_all + _total_rtt);
HXLINE( 249)		_total_all = (_total_all + _total_snd->__get((int)0));
HXLINE( 251)		::String lists = ((HX_("Resource list (",d8,64,2f,2c) + ::Luxe_obj::resources->stats->total) + HX_(" \xe2""\x80""\xa2"" ~",c2,fe,10,41));
HXDLIN( 251)		::String lists1 = ((lists + ::Luxe_obj::utils->bytes_to_string(_total_all,null())) + HX_(")\n\n",29,25,1f,00));
HXLINE( 253)		lists1 = (lists1 + ((HX_("Bytes (",13,7d,4c,27) + ::Luxe_obj::resources->stats->bytes) + HX_(")\n",c1,23,00,00)));
HXLINE( 254)		::String lists2;
HXDLIN( 254)		if ((bytes_lists == HX_("",00,00,00,00))) {
HXLINE( 254)			lists2 = HX_("-\t\n",4e,2d,22,00);
            		}
            		else {
HXLINE( 254)			lists2 = bytes_lists;
            		}
HXDLIN( 254)		lists1 = (lists1 + lists2);
HXLINE( 255)		::String lists3 = ((HX_("\nText (",9f,45,f3,ac) + ::Luxe_obj::resources->stats->texts) + HX_(" \xe2""\x80""\xa2"" ~",c2,fe,10,41));
HXDLIN( 255)		lists1 = (lists1 + ((lists3 + ::Luxe_obj::utils->bytes_to_string(_total_txt,null())) + HX_(")\n",c1,23,00,00)));
HXLINE( 256)		::String lists4;
HXDLIN( 256)		if ((text_lists == HX_("",00,00,00,00))) {
HXLINE( 256)			lists4 = HX_("-\t\n",4e,2d,22,00);
            		}
            		else {
HXLINE( 256)			lists4 = text_lists;
            		}
HXDLIN( 256)		lists1 = (lists1 + lists4);
HXLINE( 257)		lists1 = (lists1 + ((HX_("\nJSON (",ba,a3,f4,34) + ::Luxe_obj::resources->stats->jsons) + HX_(")\n",c1,23,00,00)));
HXLINE( 258)		::String lists5;
HXDLIN( 258)		if ((json_lists == HX_("",00,00,00,00))) {
HXLINE( 258)			lists5 = HX_("-\t\n",4e,2d,22,00);
            		}
            		else {
HXLINE( 258)			lists5 = json_lists;
            		}
HXDLIN( 258)		lists1 = (lists1 + lists5);
HXLINE( 259)		::String lists6 = ((HX_("\nTexture (",39,a0,04,d4) + ::Luxe_obj::resources->stats->textures) + HX_(" \xe2""\x80""\xa2"" ~",c2,fe,10,41));
HXDLIN( 259)		lists1 = (lists1 + ((lists6 + ::Luxe_obj::utils->bytes_to_string(_total_tex,null())) + HX_(")\n",c1,23,00,00)));
HXLINE( 260)		::String lists7;
HXDLIN( 260)		if ((texture_lists == HX_("",00,00,00,00))) {
HXLINE( 260)			lists7 = HX_("-\t\n",4e,2d,22,00);
            		}
            		else {
HXLINE( 260)			lists7 = texture_lists;
            		}
HXDLIN( 260)		lists1 = (lists1 + lists7);
HXLINE( 261)		::String lists8 = ((HX_("\nRenderTexture (",83,0e,5f,c0) + ::Luxe_obj::resources->stats->rtt) + HX_(" \xe2""\x80""\xa2"" ~",c2,fe,10,41));
HXDLIN( 261)		lists1 = (lists1 + ((lists8 + ::Luxe_obj::utils->bytes_to_string(_total_rtt,null())) + HX_(")\n",c1,23,00,00)));
HXLINE( 262)		::String lists9;
HXDLIN( 262)		if ((rtt_lists == HX_("",00,00,00,00))) {
HXLINE( 262)			lists9 = HX_("-\t\n",4e,2d,22,00);
            		}
            		else {
HXLINE( 262)			lists9 = rtt_lists;
            		}
HXDLIN( 262)		lists1 = (lists1 + lists9);
HXLINE( 263)		lists1 = (lists1 + ((HX_("\nFont (",41,e3,59,cf) + ::Luxe_obj::resources->stats->fonts) + HX_(")\n",c1,23,00,00)));
HXLINE( 264)		::String lists10;
HXDLIN( 264)		if ((font_lists == HX_("",00,00,00,00))) {
HXLINE( 264)			lists10 = HX_("-\t\n",4e,2d,22,00);
            		}
            		else {
HXLINE( 264)			lists10 = font_lists;
            		}
HXDLIN( 264)		lists1 = (lists1 + lists10);
HXLINE( 265)		lists1 = (lists1 + ((HX_("\nShader (",97,84,4a,4d) + ::Luxe_obj::resources->stats->shaders) + HX_(")\n",c1,23,00,00)));
HXLINE( 266)		::String lists11;
HXDLIN( 266)		if ((shader_lists == HX_("",00,00,00,00))) {
HXLINE( 266)			lists11 = HX_("-\t\n",4e,2d,22,00);
            		}
            		else {
HXLINE( 266)			lists11 = shader_lists;
            		}
HXDLIN( 266)		lists1 = (lists1 + lists11);
HXLINE( 267)		::String lists12 = ((HX_("\nAudio (",74,93,7a,6c) + ::Luxe_obj::resources->stats->audios) + HX_(" \xe2""\x80""\xa2"" ~",c2,fe,10,41));
HXDLIN( 267)		 ::luxe::utils::Utils lists13 = ::Luxe_obj::utils;
HXDLIN( 267)		lists1 = (lists1 + ((lists12 + lists13->bytes_to_string(_total_snd->__get((int)0),null())) + HX_(")\n",c1,23,00,00)));
HXLINE( 268)		::String lists14;
HXDLIN( 268)		if ((audio_lists == HX_("",00,00,00,00))) {
HXLINE( 268)			lists14 = HX_("-\t\n",4e,2d,22,00);
            		}
            		else {
HXLINE( 268)			lists14 = audio_lists;
            		}
HXDLIN( 268)		lists1 = (lists1 + lists14);
HXLINE( 270)		this->resource_list_text->set_text(lists1);
HXLINE( 272)		if (hx::IsNotNull( this->resource_list_text->geometry )) {
HXLINE( 273)			this->resource_list_text->geometry->set_dirty(true);
            		}
HXLINE( 276)		this->reset_tween();
            	}


void StatsDebugView_obj::process(){
            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_280_process)
HXLINE( 282)		if (!(this->visible)) {
HXLINE( 282)			return;
            		}
HXLINE( 284)		bool dirty = false;
HXLINE( 287)		this->update_render_stats();
HXLINE( 289)		if ((( (int)(this->_last_render_stats->__Field(HX_("batchers",ec,2f,0e,4e),hx::paccDynamic)) ) != ( (int)(this->_render_stats->__Field(HX_("batchers",ec,2f,0e,4e),hx::paccDynamic)) ))) {
HXLINE( 290)			dirty = true;
HXDLIN( 290)			this->_last_render_stats->__SetField(HX_("batchers",ec,2f,0e,4e),( (int)(this->_render_stats->__Field(HX_("batchers",ec,2f,0e,4e),hx::paccDynamic)) ),hx::paccDynamic);
            		}
HXLINE( 291)		if ((( (int)(this->_last_render_stats->__Field(HX_("geometry_count",42,a0,8d,12),hx::paccDynamic)) ) != ( (int)(this->_render_stats->__Field(HX_("geometry_count",42,a0,8d,12),hx::paccDynamic)) ))) {
HXLINE( 292)			dirty = true;
HXDLIN( 292)			this->_last_render_stats->__SetField(HX_("geometry_count",42,a0,8d,12),( (int)(this->_render_stats->__Field(HX_("geometry_count",42,a0,8d,12),hx::paccDynamic)) ),hx::paccDynamic);
            		}
HXLINE( 293)		if ((( (int)(this->_last_render_stats->__Field(HX_("dynamic_batched_count",69,37,a8,66),hx::paccDynamic)) ) != ( (int)(this->_render_stats->__Field(HX_("dynamic_batched_count",69,37,a8,66),hx::paccDynamic)) ))) {
HXLINE( 294)			dirty = true;
HXDLIN( 294)			this->_last_render_stats->__SetField(HX_("dynamic_batched_count",69,37,a8,66),( (int)(this->_render_stats->__Field(HX_("dynamic_batched_count",69,37,a8,66),hx::paccDynamic)) ),hx::paccDynamic);
            		}
HXLINE( 295)		if ((( (int)(this->_last_render_stats->__Field(HX_("static_batched_count",d8,88,51,4c),hx::paccDynamic)) ) != ( (int)(this->_render_stats->__Field(HX_("static_batched_count",d8,88,51,4c),hx::paccDynamic)) ))) {
HXLINE( 296)			dirty = true;
HXDLIN( 296)			this->_last_render_stats->__SetField(HX_("static_batched_count",d8,88,51,4c),( (int)(this->_render_stats->__Field(HX_("static_batched_count",d8,88,51,4c),hx::paccDynamic)) ),hx::paccDynamic);
            		}
HXLINE( 297)		if ((( (int)(this->_last_render_stats->__Field(HX_("visible_count",02,e6,a7,70),hx::paccDynamic)) ) != ( (int)(this->_render_stats->__Field(HX_("visible_count",02,e6,a7,70),hx::paccDynamic)) ))) {
HXLINE( 298)			dirty = true;
HXDLIN( 298)			this->_last_render_stats->__SetField(HX_("visible_count",02,e6,a7,70),( (int)(this->_render_stats->__Field(HX_("visible_count",02,e6,a7,70),hx::paccDynamic)) ),hx::paccDynamic);
            		}
HXLINE( 299)		if ((( (int)(this->_last_render_stats->__Field(HX_("draw_calls",5a,c0,31,4a),hx::paccDynamic)) ) != ( (int)(this->_render_stats->__Field(HX_("draw_calls",5a,c0,31,4a),hx::paccDynamic)) ))) {
HXLINE( 300)			dirty = true;
HXDLIN( 300)			this->_last_render_stats->__SetField(HX_("draw_calls",5a,c0,31,4a),( (int)(this->_render_stats->__Field(HX_("draw_calls",5a,c0,31,4a),hx::paccDynamic)) ),hx::paccDynamic);
            		}
HXLINE( 301)		if ((( (int)(this->_last_render_stats->__Field(HX_("vert_count",81,db,0c,72),hx::paccDynamic)) ) != ( (int)(this->_render_stats->__Field(HX_("vert_count",81,db,0c,72),hx::paccDynamic)) ))) {
HXLINE( 302)			dirty = true;
HXDLIN( 302)			this->_last_render_stats->__SetField(HX_("vert_count",81,db,0c,72),( (int)(this->_render_stats->__Field(HX_("vert_count",81,db,0c,72),hx::paccDynamic)) ),hx::paccDynamic);
            		}
HXLINE( 304)		if (dirty) {
HXLINE( 305)			this->refresh_render_stats();
            		}
            	}


void StatsDebugView_obj::onmousewheel( ::luxe::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_312_onmousewheel)
HXLINE( 314)		::luxe::tween::Actuate_obj::stop(this->resource_list_text->get_pos(),null(),null(),null());
HXLINE( 315)		::luxe::tween::Actuate_obj::stop(this->render_stats_text->get_pos(),null(),null(),null());
HXLINE( 317)		Float vh = (::Luxe_obj::debug->inspector->size->y - this->margin);
HXLINE( 318)		Float max_y = ::Luxe_obj::debug->padding->y;
HXDLIN( 318)		Float max_y1 = (max_y + (this->margin * ((Float)1.5)));
HXLINE( 319)		Float min_y = max_y1;
HXLINE( 321)		Float e1 = e->pos->x;
HXDLIN( 321)		Float px = ((Float)e1 / (Float)::Luxe_obj::core->screen->get_w());
HXLINE( 322)		if ((px > ((Float)0.5))) {
HXLINE( 325)			Float h = this->resource_list_text->text_bounds->h;
HXLINE( 326)			Float diff = (h - vh);
HXLINE( 327)			Float new_y = this->resource_list_text->get_pos()->y;
HXLINE( 329)			if ((diff > (int)0)) {
HXLINE( 330)				min_y = (max_y1 - (diff + (this->margin * (int)2)));
            			}
HXLINE( 333)			new_y = (new_y - (((Float)this->margin / (Float)(int)2) * e->y));
HXLINE( 334)			if ((new_y < min_y)) {
HXLINE( 334)				new_y = min_y;
            			}
            			else {
HXLINE( 334)				if ((new_y > max_y1)) {
HXLINE( 334)					new_y = max_y1;
            				}
            				else {
HXLINE( 334)					new_y = new_y;
            				}
            			}
HXLINE( 335)			{
HXLINE( 335)				 ::phoenix::Vector _this = this->resource_list_text->get_pos();
HXDLIN( 335)				_this->y = new_y;
HXDLIN( 335)				if (!(_this->_construct)) {
HXLINE( 335)					bool _hx_tmp;
HXDLIN( 335)					if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 335)						_hx_tmp = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 335)						_hx_tmp = false;
            					}
HXDLIN( 335)					if (_hx_tmp) {
HXLINE( 335)						_this->listen_y(new_y);
            					}
            				}
            			}
HXLINE( 336)			this->resource_list_text->geometry->set_dirty(true);
            		}
            		else {
HXLINE( 341)			Float h1 = this->render_stats_text->text_bounds->h;
HXLINE( 342)			Float diff1 = (h1 - vh);
HXLINE( 343)			Float new_y1 = this->render_stats_text->get_pos()->y;
HXLINE( 345)			if ((diff1 > (int)0)) {
HXLINE( 346)				min_y = (max_y1 - (diff1 + (this->margin * (int)2)));
            			}
HXLINE( 349)			new_y1 = (new_y1 - (((Float)this->margin / (Float)(int)2) * e->y));
HXLINE( 350)			if ((new_y1 < min_y)) {
HXLINE( 350)				new_y1 = min_y;
            			}
            			else {
HXLINE( 350)				if ((new_y1 > max_y1)) {
HXLINE( 350)					new_y1 = max_y1;
            				}
            				else {
HXLINE( 350)					new_y1 = new_y1;
            				}
            			}
HXLINE( 351)			{
HXLINE( 351)				 ::phoenix::Vector _this1 = this->render_stats_text->get_pos();
HXDLIN( 351)				_this1->y = new_y1;
HXDLIN( 351)				if (!(_this1->_construct)) {
HXLINE( 351)					bool _hx_tmp1;
HXDLIN( 351)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 351)						_hx_tmp1 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 351)						_hx_tmp1 = false;
            					}
HXDLIN( 351)					if (_hx_tmp1) {
HXLINE( 351)						_this1->listen_y(new_y1);
            					}
            				}
            			}
HXLINE( 352)			this->render_stats_text->geometry->set_dirty(true);
            		}
            	}


void StatsDebugView_obj::onkeydown( ::luxe::KeyEvent e){
            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_361_onkeydown)
HXDLIN( 361)		bool _hx_tmp;
HXDLIN( 361)		if ((e->keycode == (int)50)) {
HXDLIN( 361)			_hx_tmp = this->visible;
            		}
            		else {
HXDLIN( 361)			_hx_tmp = false;
            		}
HXDLIN( 361)		if (_hx_tmp) {
HXLINE( 362)			if ((this->debug->batcher->show_stats == (int)0)) {
HXLINE( 363)				this->debug->batcher->set_show_stats((int)1);
            			}
            			else {
HXLINE( 365)				this->debug->batcher->set_show_stats((int)0);
            			}
            		}
            	}


void StatsDebugView_obj::show(){
            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_371_show)
HXLINE( 373)		this->super::show();
HXLINE( 374)		this->refresh();
HXLINE( 375)		this->render_stats_text->set_visible(true);
HXLINE( 376)		this->resource_list_text->set_visible(true);
            	}


void StatsDebugView_obj::hide(){
            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_380_hide)
HXLINE( 382)		this->super::hide();
HXLINE( 383)		this->render_stats_text->set_visible(false);
HXLINE( 384)		this->resource_list_text->set_visible(false);
HXLINE( 385)		::luxe::tween::Actuate_obj::stop(this->resource_list_text->get_pos(),null(),null(),null());
HXLINE( 386)		::luxe::tween::Actuate_obj::stop(this->render_stats_text->get_pos(),null(),null(),null());
            	}


void StatsDebugView_obj::reset_tween(){
            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_390_reset_tween)
HXDLIN( 390)		 ::luxe::debug::StatsDebugView _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 392)		::luxe::tween::Actuate_obj::stop(this->resource_list_text->get_pos(),null(),null(),null());
HXLINE( 393)		::luxe::tween::Actuate_obj::stop(this->render_stats_text->get_pos(),null(),null(),null());
HXLINE( 395)		Float vh = (::Luxe_obj::debug->inspector->size->y - this->margin);
HXLINE( 396)		Float start_y = ::Luxe_obj::debug->padding->y;
HXDLIN( 396)		Float start_y1 = (start_y + (this->margin * ((Float)1.5)));
HXLINE( 398)		Float h = this->resource_list_text->text_bounds->h;
HXLINE( 399)		Float diff = (h - vh);
HXLINE( 400)		{
HXLINE( 400)			 ::phoenix::Vector _this = this->resource_list_text->get_pos();
HXDLIN( 400)			_this->y = start_y1;
HXDLIN( 400)			if (!(_this->_construct)) {
HXLINE( 400)				bool _hx_tmp;
HXDLIN( 400)				if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 400)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 400)					_hx_tmp = false;
            				}
HXDLIN( 400)				if (_hx_tmp) {
HXLINE( 400)					_this->listen_y(start_y1);
            				}
            			}
            		}
HXLINE( 402)		if ((diff > (int)0)) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::luxe::debug::StatsDebugView,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_405_reset_tween)
HXLINE( 405)				_gthis->resource_list_text->geometry->set_dirty(true);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 403)			Float end_y = (start_y1 - (diff + (this->margin * (int)2)));
HXLINE( 404)			 ::phoenix::Vector _hx_tmp1 = this->resource_list_text->get_pos();
HXDLIN( 404)			::Dynamic _hx_tmp2 = ::luxe::tween::actuators::IGenericActuator_obj::reflect(::luxe::tween::actuators::IGenericActuator_obj::delay(::luxe::tween::actuators::IGenericActuator_obj::repeat(::luxe::tween::Actuate_obj::tween(_hx_tmp1,(int)8, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),end_y)),null(),null()),null()),(int)4),null());
HXDLIN( 404)			::luxe::tween::actuators::IGenericActuator_obj::onUpdate(::luxe::tween::actuators::IGenericActuator_obj::ease(_hx_tmp2,::luxe::tween::easing::Linear_obj::get_easeNone()), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
HXLINE( 408)		h = this->render_stats_text->text_bounds->h;
HXLINE( 409)		diff = (h - vh);
HXLINE( 410)		{
HXLINE( 410)			 ::phoenix::Vector _this1 = this->render_stats_text->get_pos();
HXDLIN( 410)			_this1->y = start_y1;
HXDLIN( 410)			if (!(_this1->_construct)) {
HXLINE( 410)				bool _hx_tmp3;
HXDLIN( 410)				if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 410)					_hx_tmp3 = !(_this1->ignore_listeners);
            				}
            				else {
HXLINE( 410)					_hx_tmp3 = false;
            				}
HXDLIN( 410)				if (_hx_tmp3) {
HXLINE( 410)					_this1->listen_y(start_y1);
            				}
            			}
            		}
HXLINE( 412)		if ((diff > (int)0)) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::luxe::debug::StatsDebugView,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_415_reset_tween)
HXLINE( 415)				_gthis->render_stats_text->geometry->set_dirty(true);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 413)			Float end_y1 = (start_y1 - (diff + (this->margin * (int)2)));
HXLINE( 414)			 ::phoenix::Vector _hx_tmp4 = this->render_stats_text->get_pos();
HXDLIN( 414)			::Dynamic _hx_tmp5 = ::luxe::tween::actuators::IGenericActuator_obj::reflect(::luxe::tween::actuators::IGenericActuator_obj::delay(::luxe::tween::actuators::IGenericActuator_obj::repeat(::luxe::tween::Actuate_obj::tween(_hx_tmp4,(int)8, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),end_y1)),null(),null()),null()),(int)4),null());
HXDLIN( 414)			::luxe::tween::actuators::IGenericActuator_obj::onUpdate(::luxe::tween::actuators::IGenericActuator_obj::ease(_hx_tmp5,::luxe::tween::easing::Linear_obj::get_easeNone()), ::Dynamic(new _hx_Closure_1(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatsDebugView_obj,reset_tween,(void))

void StatsDebugView_obj::refresh_render_stats(){
            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_420_refresh_render_stats)
HXLINE( 422)		if (!(this->visible)) {
HXLINE( 423)			return;
            		}
HXLINE( 426)		 ::luxe::Text _hx_tmp = this->render_stats_text;
HXDLIN( 426)		_hx_tmp->set_text(this->get_render_stats_string());
HXLINE( 428)		this->render_stats_text->set_locked(true);
HXLINE( 430)		if (hx::IsNotNull( this->render_stats_text->geometry )) {
HXLINE( 431)			this->render_stats_text->geometry->set_dirty(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatsDebugView_obj,refresh_render_stats,(void))

void StatsDebugView_obj::update_render_stats(){
            	HX_STACKFRAME(&_hx_pos_0c8789f97a853ff5_436_update_render_stats)
HXLINE( 438)		this->_render_stats->__SetField(HX_("batchers",ec,2f,0e,4e),::Luxe_obj::renderer->stats->batchers,hx::paccDynamic);
HXLINE( 439)		this->_render_stats->__SetField(HX_("geometry_count",42,a0,8d,12),::Luxe_obj::renderer->stats->geometry_count,hx::paccDynamic);
HXLINE( 440)		this->_render_stats->__SetField(HX_("visible_count",02,e6,a7,70),::Luxe_obj::renderer->stats->visible_count,hx::paccDynamic);
HXLINE( 441)		this->_render_stats->__SetField(HX_("dynamic_batched_count",69,37,a8,66),::Luxe_obj::renderer->stats->dynamic_batched_count,hx::paccDynamic);
HXLINE( 442)		this->_render_stats->__SetField(HX_("static_batched_count",d8,88,51,4c),::Luxe_obj::renderer->stats->static_batched_count,hx::paccDynamic);
HXLINE( 443)		this->_render_stats->__SetField(HX_("draw_calls",5a,c0,31,4a),::Luxe_obj::renderer->stats->draw_calls,hx::paccDynamic);
HXLINE( 444)		this->_render_stats->__SetField(HX_("vert_count",81,db,0c,72),::Luxe_obj::renderer->stats->vert_count,hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatsDebugView_obj,update_render_stats,(void))


hx::ObjectPtr< StatsDebugView_obj > StatsDebugView_obj::__new( ::luxe::Debug _debug) {
	hx::ObjectPtr< StatsDebugView_obj > __this = new StatsDebugView_obj();
	__this->__construct(_debug);
	return __this;
}

hx::ObjectPtr< StatsDebugView_obj > StatsDebugView_obj::__alloc(hx::Ctx *_hx_ctx, ::luxe::Debug _debug) {
	StatsDebugView_obj *__this = (StatsDebugView_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StatsDebugView_obj), true, "luxe.debug.StatsDebugView"));
	*(void **)__this = StatsDebugView_obj::_hx_vtable;
	__this->__construct(_debug);
	return __this;
}

StatsDebugView_obj::StatsDebugView_obj()
{
}

void StatsDebugView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StatsDebugView);
	HX_MARK_MEMBER_NAME(_last_render_stats,"_last_render_stats");
	HX_MARK_MEMBER_NAME(_render_stats,"_render_stats");
	HX_MARK_MEMBER_NAME(debug_draw_call_count,"debug_draw_call_count");
	HX_MARK_MEMBER_NAME(debug_geometry_count,"debug_geometry_count");
	HX_MARK_MEMBER_NAME(font_size,"font_size");
	HX_MARK_MEMBER_NAME(render_stats_text,"render_stats_text");
	HX_MARK_MEMBER_NAME(resource_list_text,"resource_list_text");
	HX_MARK_MEMBER_NAME(margin,"margin");
	 ::luxe::debug::DebugView_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StatsDebugView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_last_render_stats,"_last_render_stats");
	HX_VISIT_MEMBER_NAME(_render_stats,"_render_stats");
	HX_VISIT_MEMBER_NAME(debug_draw_call_count,"debug_draw_call_count");
	HX_VISIT_MEMBER_NAME(debug_geometry_count,"debug_geometry_count");
	HX_VISIT_MEMBER_NAME(font_size,"font_size");
	HX_VISIT_MEMBER_NAME(render_stats_text,"render_stats_text");
	HX_VISIT_MEMBER_NAME(resource_list_text,"resource_list_text");
	HX_VISIT_MEMBER_NAME(margin,"margin");
	 ::luxe::debug::DebugView_obj::__Visit(HX_VISIT_ARG);
}

hx::Val StatsDebugView_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"show") ) { return hx::Val( show_dyn() ); }
		if (HX_FIELD_EQ(inName,"hide") ) { return hx::Val( hide_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"margin") ) { return hx::Val( margin ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"refresh") ) { return hx::Val( refresh_dyn() ); }
		if (HX_FIELD_EQ(inName,"process") ) { return hx::Val( process_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"font_size") ) { return hx::Val( font_size ); }
		if (HX_FIELD_EQ(inName,"onkeydown") ) { return hx::Val( onkeydown_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"reset_tween") ) { return hx::Val( reset_tween_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onmousewheel") ) { return hx::Val( onmousewheel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_render_stats") ) { return hx::Val( _render_stats ); }
		if (HX_FIELD_EQ(inName,"onwindowsized") ) { return hx::Val( onwindowsized_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_batcher_info") ) { return hx::Val( get_batcher_info_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"render_stats_text") ) { return hx::Val( render_stats_text ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_last_render_stats") ) { return hx::Val( _last_render_stats ); }
		if (HX_FIELD_EQ(inName,"resource_list_text") ) { return hx::Val( resource_list_text ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"update_render_stats") ) { return hx::Val( update_render_stats_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"debug_geometry_count") ) { return hx::Val( debug_geometry_count ); }
		if (HX_FIELD_EQ(inName,"refresh_render_stats") ) { return hx::Val( refresh_render_stats_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"debug_draw_call_count") ) { return hx::Val( debug_draw_call_count ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_render_stats_string") ) { return hx::Val( get_render_stats_string_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"get_resource_stats_string") ) { return hx::Val( get_resource_stats_string_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val StatsDebugView_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"margin") ) { margin=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"font_size") ) { font_size=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_render_stats") ) { _render_stats=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"render_stats_text") ) { render_stats_text=inValue.Cast<  ::luxe::Text >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_last_render_stats") ) { _last_render_stats=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resource_list_text") ) { resource_list_text=inValue.Cast<  ::luxe::Text >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"debug_geometry_count") ) { debug_geometry_count=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"debug_draw_call_count") ) { debug_draw_call_count=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StatsDebugView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_last_render_stats","\xc0","\x3c","\xe7","\x4b"));
	outFields->push(HX_HCSTRING("_render_stats","\x15","\xe0","\x22","\x9d"));
	outFields->push(HX_HCSTRING("debug_draw_call_count","\x9d","\x71","\x24","\xaf"));
	outFields->push(HX_HCSTRING("debug_geometry_count","\xee","\x2b","\x78","\x61"));
	outFields->push(HX_HCSTRING("font_size","\x71","\xf0","\x12","\x18"));
	outFields->push(HX_HCSTRING("render_stats_text","\x96","\xf7","\xe4","\x0a"));
	outFields->push(HX_HCSTRING("resource_list_text","\x7d","\x5d","\xe6","\x1a"));
	outFields->push(HX_HCSTRING("margin","\x2e","\x70","\x6d","\xba"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo StatsDebugView_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(StatsDebugView_obj,_last_render_stats),HX_HCSTRING("_last_render_stats","\xc0","\x3c","\xe7","\x4b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(StatsDebugView_obj,_render_stats),HX_HCSTRING("_render_stats","\x15","\xe0","\x22","\x9d")},
	{hx::fsInt,(int)offsetof(StatsDebugView_obj,debug_draw_call_count),HX_HCSTRING("debug_draw_call_count","\x9d","\x71","\x24","\xaf")},
	{hx::fsInt,(int)offsetof(StatsDebugView_obj,debug_geometry_count),HX_HCSTRING("debug_geometry_count","\xee","\x2b","\x78","\x61")},
	{hx::fsInt,(int)offsetof(StatsDebugView_obj,font_size),HX_HCSTRING("font_size","\x71","\xf0","\x12","\x18")},
	{hx::fsObject /*::luxe::Text*/ ,(int)offsetof(StatsDebugView_obj,render_stats_text),HX_HCSTRING("render_stats_text","\x96","\xf7","\xe4","\x0a")},
	{hx::fsObject /*::luxe::Text*/ ,(int)offsetof(StatsDebugView_obj,resource_list_text),HX_HCSTRING("resource_list_text","\x7d","\x5d","\xe6","\x1a")},
	{hx::fsInt,(int)offsetof(StatsDebugView_obj,margin),HX_HCSTRING("margin","\x2e","\x70","\x6d","\xba")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *StatsDebugView_obj_sStaticStorageInfo = 0;
#endif

static ::String StatsDebugView_obj_sMemberFields[] = {
	HX_HCSTRING("_last_render_stats","\xc0","\x3c","\xe7","\x4b"),
	HX_HCSTRING("_render_stats","\x15","\xe0","\x22","\x9d"),
	HX_HCSTRING("debug_draw_call_count","\x9d","\x71","\x24","\xaf"),
	HX_HCSTRING("debug_geometry_count","\xee","\x2b","\x78","\x61"),
	HX_HCSTRING("font_size","\x71","\xf0","\x12","\x18"),
	HX_HCSTRING("render_stats_text","\x96","\xf7","\xe4","\x0a"),
	HX_HCSTRING("resource_list_text","\x7d","\x5d","\xe6","\x1a"),
	HX_HCSTRING("get_resource_stats_string","\xd9","\xdd","\xed","\x33"),
	HX_HCSTRING("get_batcher_info","\xcf","\x20","\x39","\xeb"),
	HX_HCSTRING("get_render_stats_string","\x91","\x46","\xc0","\x88"),
	HX_HCSTRING("margin","\x2e","\x70","\x6d","\xba"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("onwindowsized","\xd4","\xb3","\x35","\x59"),
	HX_HCSTRING("refresh","\xdb","\xd9","\x20","\xed"),
	HX_HCSTRING("process","\x6f","\xa2","\x4a","\xf1"),
	HX_HCSTRING("onmousewheel","\x35","\x56","\xec","\x35"),
	HX_HCSTRING("onkeydown","\x42","\xce","\xc7","\xbb"),
	HX_HCSTRING("show","\xfd","\xd4","\x52","\x4c"),
	HX_HCSTRING("hide","\xc2","\x34","\x0e","\x45"),
	HX_HCSTRING("reset_tween","\xbb","\x00","\xd8","\x80"),
	HX_HCSTRING("refresh_render_stats","\x5a","\xb9","\xf4","\x71"),
	HX_HCSTRING("update_render_stats","\x6c","\x88","\xb9","\xe8"),
	::String(null()) };

static void StatsDebugView_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StatsDebugView_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StatsDebugView_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StatsDebugView_obj::__mClass,"__mClass");
};

#endif

hx::Class StatsDebugView_obj::__mClass;

void StatsDebugView_obj::__register()
{
	hx::Object *dummy = new StatsDebugView_obj;
	StatsDebugView_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.debug.StatsDebugView","\xcc","\xbf","\xbb","\x85");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = StatsDebugView_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StatsDebugView_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StatsDebugView_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StatsDebugView_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StatsDebugView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StatsDebugView_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace debug
