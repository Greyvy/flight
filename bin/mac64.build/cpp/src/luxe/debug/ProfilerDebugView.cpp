// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_0a05af74edef3e68
#define INCLUDED_0a05af74edef3e68
#include "linc_timestamp.h"
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_cpp_vm_Gc
#include <cpp/vm/Gc.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_luxe_Debug
#include <luxe/Debug.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Text
#include <luxe/Text.h>
#endif
#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
#ifndef INCLUDED_luxe_debug_DebugView
#include <luxe/debug/DebugView.h>
#endif
#ifndef INCLUDED_luxe_debug_Inspector
#include <luxe/debug/Inspector.h>
#endif
#ifndef INCLUDED_luxe_debug_ProfilerDebugView
#include <luxe/debug/ProfilerDebugView.h>
#endif
#ifndef INCLUDED_luxe_debug__ProfilerDebugView_ProfilerBar
#include <luxe/debug/_ProfilerDebugView/ProfilerBar.h>
#endif
#ifndef INCLUDED_luxe_debug__ProfilerDebugView_ProfilerGraph
#include <luxe/debug/_ProfilerDebugView/ProfilerGraph.h>
#endif
#ifndef INCLUDED_luxe_debug__ProfilerDebugView_ProfilerValue
#include <luxe/debug/_ProfilerDebugView/ProfilerValue.h>
#endif
#ifndef INCLUDED_phoenix_Batcher
#include <phoenix/Batcher.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_Runtime
#include <snow/modules/sdl/Runtime.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_13_new,"luxe.debug.ProfilerDebugView","new",0x4a00bf2e,"luxe.debug.ProfilerDebugView.new","luxe/debug/ProfilerDebugView.hx",13,0xef83e3c4)
static const ::String _hx_array_data_3fd2503c_1[] = {
	HX_("bytes",6b,08,98,bd),HX_("Kb",b7,41,00,00),HX_("MB",55,43,00,00),HX_("GB",1b,3e,00,00),HX_("TB",6e,49,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_39_create,"luxe.debug.ProfilerDebugView","create",0x5ed52cee,"luxe.debug.ProfilerDebugView.create","luxe/debug/ProfilerDebugView.hx",39,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_101_update_graph,"luxe.debug.ProfilerDebugView","update_graph",0x793250ca,"luxe.debug.ProfilerDebugView.update_graph","luxe/debug/ProfilerDebugView.hx",101,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_122_process,"luxe.debug.ProfilerDebugView","process",0x7b92103d,"luxe.debug.ProfilerDebugView.process","luxe/debug/ProfilerDebugView.hx",122,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_206_show,"luxe.debug.ProfilerDebugView","show",0x79f6da6f,"luxe.debug.ProfilerDebugView.show","luxe/debug/ProfilerDebugView.hx",206,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_232_hide,"luxe.debug.ProfilerDebugView","hide",0x72b23a34,"luxe.debug.ProfilerDebugView.hide","luxe/debug/ProfilerDebugView.hx",232,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_152_add_offset,"luxe.debug.ProfilerDebugView","add_offset",0xd9745423,"luxe.debug.ProfilerDebugView.add_offset","luxe/debug/ProfilerDebugView.hx",152,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_163_hide_item,"luxe.debug.ProfilerDebugView","hide_item",0xfe5b2a3e,"luxe.debug.ProfilerDebugView.hide_item","luxe/debug/ProfilerDebugView.hx",163,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_171_show_item,"luxe.debug.ProfilerDebugView","show_item",0xd160d423,"luxe.debug.ProfilerDebugView.show_item","luxe/debug/ProfilerDebugView.hx",171,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_179_start,"luxe.debug.ProfilerDebugView","start",0x45ec32b0,"luxe.debug.ProfilerDebugView.start","luxe/debug/ProfilerDebugView.hx",179,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_194_end,"luxe.debug.ProfilerDebugView","end",0x49f9f2a9,"luxe.debug.ProfilerDebugView.end","luxe/debug/ProfilerDebugView.hx",194,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_17_boot,"luxe.debug.ProfilerDebugView","boot",0x6ebf89a4,"luxe.debug.ProfilerDebugView.boot","luxe/debug/ProfilerDebugView.hx",17,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_18_boot,"luxe.debug.ProfilerDebugView","boot",0x6ebf89a4,"luxe.debug.ProfilerDebugView.boot","luxe/debug/ProfilerDebugView.hx",18,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_6ae1ba90d28efd92_19_boot,"luxe.debug.ProfilerDebugView","boot",0x6ebf89a4,"luxe.debug.ProfilerDebugView.boot","luxe/debug/ProfilerDebugView.hx",19,0xef83e3c4)
namespace luxe{
namespace debug{

void ProfilerDebugView_obj::__construct( ::luxe::Debug _debug){
            	HX_GC_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_13_new)
HXLINE( 150)		this->_setup = false;
HXLINE(  99)		this->_byte_levels = ::Array_obj< ::String >::fromData( _hx_array_data_3fd2503c_1,5);
HXLINE(  98)		this->minpeak = ((Float)1.0);
HXLINE(  97)		this->peak = ((Float)1.0);
HXLINE(  96)		this->nexttick = ((Float)0.0);
HXLINE(  95)		this->tickamount = ((Float)0.017);
HXLINE(  38)		this->margin = (int)32;
HXLINE(  31)		super::__construct(_debug);
HXLINE(  33)		this->set_name(HX_("Profiler",49,77,88,c6));
HXLINE(  34)		::luxe::debug::ProfilerDebugView_obj::lists =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}

Dynamic ProfilerDebugView_obj::__CreateEmpty() { return new ProfilerDebugView_obj; }

void *ProfilerDebugView_obj::_hx_vtable = 0;

Dynamic ProfilerDebugView_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ProfilerDebugView_obj > _hx_result = new ProfilerDebugView_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ProfilerDebugView_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x099ca90a) {
		if (inClassId<=(int)0x077a695a) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x077a695a;
		} else {
			return inClassId==(int)0x099ca90a;
		}
	} else {
		return inClassId==(int)0x0bbca018 || inClassId==(int)0x5fb4b7fb;
	}
}

void ProfilerDebugView_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_39_create)
HXLINE(  43)		 ::luxe::Debug debug = ::Luxe_obj::debug;
HXLINE(  46)		Float debug1 = debug->inspector->pos->x;
HXDLIN(  46)		Float viewrect = (debug1 + ((Float)this->margin / (Float)(int)2));
HXLINE(  47)		Float debug2 = debug->inspector->pos->y;
HXDLIN(  47)		Float viewrect1 = (debug2 + (this->margin * ((Float)1.5)));
HXLINE(  48)		Float viewrect2 = (debug->inspector->size->x - this->margin);
HXLINE(  49)		Float viewrect3 = (debug->inspector->size->y - this->margin);
HXLINE(  45)		 ::phoenix::Rectangle viewrect4 =  ::phoenix::Rectangle_obj::__alloc( HX_CTX ,viewrect,viewrect1,viewrect2,(viewrect3 - (this->margin * ((Float)1.5))));
HXLINE(  52)		this->memgraph =  ::luxe::debug::_ProfilerDebugView::ProfilerGraph_obj::__alloc( HX_CTX ,HX_("usage",21,5d,2f,aa),null());
HXLINE(  53)		this->memgraph2 =  ::luxe::debug::_ProfilerDebugView::ProfilerGraph_obj::__alloc( HX_CTX ,HX_("current",39,9c,e3,cb),false);
HXLINE(  54)		this->memgraph3 =  ::luxe::debug::_ProfilerDebugView::ProfilerGraph_obj::__alloc( HX_CTX ,HX_("large",bb,33,bb,6f),false);
HXLINE(  55)		this->memgraph4 =  ::luxe::debug::_ProfilerDebugView::ProfilerGraph_obj::__alloc( HX_CTX ,HX_("reserved",a8,f6,a5,4e),false);
HXLINE(  57)		int gh = (int)48;
HXLINE(  58)		 ::phoenix::Vector gp =  ::phoenix::Vector_obj::__alloc( HX_CTX ,viewrect4->x,viewrect4->h,null(),null());
HXLINE(  59)		Float gw = viewrect4->w;
HXLINE(  61)		this->memgraph->color =  ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null())->rgb((int)16121979);
HXLINE(  62)		this->memgraph2->color =  ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null())->rgb((int)31734);
HXLINE(  63)		this->memgraph3->color =  ::phoenix::Color_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,((Float)0.5))->rgb((int)16121882);
HXLINE(  64)		this->memgraph4->color =  ::phoenix::Color_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,((Float)0.5))->rgb((int)63099);
HXLINE(  66)		this->memgraph->history = (this->memgraph2->history = (this->memgraph3->history = (this->memgraph4->history = (int)256)));
HXLINE(  67)		this->memgraph->height = (this->memgraph2->height = (this->memgraph3->height = (this->memgraph4->height = gh)));
HXLINE(  68)		this->memgraph->width = (this->memgraph2->width = (this->memgraph3->width = (this->memgraph4->width = gw)));
HXLINE(  70)		this->memgraph->create();
HXLINE(  71)		this->memgraph2->create();
HXLINE(  72)		this->memgraph3->create();
HXLINE(  73)		this->memgraph4->create();
HXLINE(  75)		 ::luxe::debug::_ProfilerDebugView::ProfilerGraph _hx_tmp = this->memgraph;
HXDLIN(  75)		 ::luxe::debug::_ProfilerDebugView::ProfilerGraph _hx_tmp1 = this->memgraph2;
HXDLIN(  75)		 ::luxe::debug::_ProfilerDebugView::ProfilerGraph _hx_tmp2 = this->memgraph3;
HXDLIN(  75)		_hx_tmp->set_pos(_hx_tmp1->set_pos(_hx_tmp2->set_pos(this->memgraph4->set_pos(gp))));
HXLINE(  80)		 ::phoenix::Vector _this =  ::phoenix::Vector_obj::__alloc( HX_CTX ,gp->x,gp->y,gp->z,gp->w);
HXDLIN(  80)		{
HXLINE(  80)			Float _x = _this->x;
HXDLIN(  80)			Float _y = (_this->y + -(gh));
HXDLIN(  80)			Float _z = _this->z;
HXDLIN(  80)			bool prev = _this->ignore_listeners;
HXDLIN(  80)			_this->ignore_listeners = true;
HXDLIN(  80)			{
HXLINE(  80)				_this->x = _x;
HXDLIN(  80)				if (!(_this->_construct)) {
HXLINE(  80)					bool _hx_tmp3;
HXDLIN(  80)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE(  80)						_hx_tmp3 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE(  80)						_hx_tmp3 = false;
            					}
HXDLIN(  80)					if (_hx_tmp3) {
HXLINE(  80)						_this->listen_x(_x);
            					}
            				}
            			}
HXDLIN(  80)			{
HXLINE(  80)				_this->y = _y;
HXDLIN(  80)				if (!(_this->_construct)) {
HXLINE(  80)					bool _hx_tmp4;
HXDLIN(  80)					if (hx::IsNotNull( _this->listen_y )) {
HXLINE(  80)						_hx_tmp4 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE(  80)						_hx_tmp4 = false;
            					}
HXDLIN(  80)					if (_hx_tmp4) {
HXLINE(  80)						_this->listen_y(_y);
            					}
            				}
            			}
HXDLIN(  80)			{
HXLINE(  80)				_this->z = _z;
HXDLIN(  80)				if (!(_this->_construct)) {
HXLINE(  80)					bool _hx_tmp5;
HXDLIN(  80)					if (hx::IsNotNull( _this->listen_z )) {
HXLINE(  80)						_hx_tmp5 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE(  80)						_hx_tmp5 = false;
            					}
HXDLIN(  80)					if (_hx_tmp5) {
HXLINE(  80)						_this->listen_z(_z);
            					}
            				}
            			}
HXDLIN(  80)			_this->ignore_listeners = prev;
HXDLIN(  80)			bool _hx_tmp6;
HXDLIN(  80)			if (hx::IsNotNull( _this->listen_x )) {
HXLINE(  80)				_hx_tmp6 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE(  80)				_hx_tmp6 = false;
            			}
HXDLIN(  80)			if (_hx_tmp6) {
HXLINE(  80)				_this->listen_x(_this->x);
            			}
HXDLIN(  80)			bool _hx_tmp7;
HXDLIN(  80)			if (hx::IsNotNull( _this->listen_y )) {
HXLINE(  80)				_hx_tmp7 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE(  80)				_hx_tmp7 = false;
            			}
HXDLIN(  80)			if (_hx_tmp7) {
HXLINE(  80)				_this->listen_y(_this->y);
            			}
HXDLIN(  80)			bool _hx_tmp8;
HXDLIN(  80)			if (hx::IsNotNull( _this->listen_z )) {
HXLINE(  80)				_hx_tmp8 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE(  80)				_hx_tmp8 = false;
            			}
HXDLIN(  80)			if (_hx_tmp8) {
HXLINE(  80)				_this->listen_z(_this->z);
            			}
            		}
HXDLIN(  80)		 ::phoenix::Vector _hx_tmp9 = _this;
HXLINE(  81)		 ::phoenix::Color _hx_tmp10 = ::luxe::debug::ProfilerDebugView_obj::color_normal->clone();
HXLINE(  77)		this->memtext =  ::luxe::Text_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("visible",72,78,24,a3),false)
            			->setFixed(1,HX_("batcher",a7,22,10,c0),::Luxe_obj::debug->batcher)
            			->setFixed(2,HX_("depth",03,f1,29,d7),((Float)999.3))
            			->setFixed(3,HX_("pos",94,5d,55,00),_hx_tmp9)
            			->setFixed(4,HX_("no_scene",8e,a7,34,10),true)
            			->setFixed(5,HX_("name",4b,72,ff,48),HX_("profiler.memgraph",fe,ca,8a,d2))
            			->setFixed(6,HX_("color",63,71,5c,4a),_hx_tmp10)
            			->setFixed(7,HX_("point_size",50,66,f5,4b),(int)12)
            			->setFixed(8,HX_("text",ad,cc,f9,4c),HX_("1 mb",e4,1b,7c,20))));
HXLINE(  89)		this->memtext->color->a = ((Float)0.4);
            	}


void ProfilerDebugView_obj::update_graph( ::luxe::debug::_ProfilerDebugView::ProfilerGraph graph,Float val){
            	HX_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_101_update_graph)
HXLINE( 103)		Float _byte_index = ::Math_obj::log(val);
HXDLIN( 103)		int _byte_index1 = ::Math_obj::floor(((Float)_byte_index / (Float)::Math_obj::log((int)1024)));
HXLINE( 104)		Float _byte_value = ((Float)val / (Float)::Math_obj::pow((int)1024,_byte_index1));
HXLINE( 106)		if ((_byte_value > this->peak)) {
HXLINE( 107)			this->peak = ::Math_obj::ceil((_byte_value + (_byte_value * ((Float)0.1))));
            		}
HXLINE( 110)		if ((_byte_value < this->minpeak)) {
HXLINE( 111)			this->minpeak = ::Math_obj::floor((_byte_value - (_byte_value * ((Float)0.1))));
            		}
HXLINE( 114)		if ((graph->max != this->peak)) {
HXLINE( 115)			graph->set_max(this->peak);
            		}
HXLINE( 118)		Float n = ::Math_obj::pow((int)10,(int)4);
HXDLIN( 118)		graph->set_ping(((Float)::Std_obj::_hx_int((_byte_value * n)) / (Float)n));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ProfilerDebugView_obj,update_graph,(void))

void ProfilerDebugView_obj::process(){
            	HX_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_122_process)
HXLINE( 126)		int u = ::cpp::vm::Gc_obj::memInfo((int)0);
HXLINE( 127)		int c = ::cpp::vm::Gc_obj::memInfo((int)2);
HXLINE( 128)		int l = ::cpp::vm::Gc_obj::memInfo((int)3);
HXLINE( 129)		int r = ::cpp::vm::Gc_obj::memInfo((int)1);
HXLINE( 131)		this->update_graph(this->memgraph,u);
HXLINE( 132)		this->update_graph(this->memgraph2,c);
HXLINE( 133)		this->update_graph(this->memgraph3,l);
HXLINE( 134)		this->update_graph(this->memgraph4,r);
HXLINE( 136)		Float _index = ::Math_obj::log(u);
HXDLIN( 136)		int _index1 = ::Math_obj::floor(((Float)_index / (Float)::Math_obj::log((int)1024)));
HXLINE( 137)		::String s = this->_byte_levels->__get(_index1);
HXLINE( 139)		 ::luxe::Text _hx_tmp = this->memtext;
HXLINE( 140)		::String _hx_tmp1 = ((((HX_("(y axis) ",a7,9b,b1,57) + this->memgraph->max) + HX_(" ",20,00,00,00)) + s) + HX_("\n",0a,00,00,00));
HXDLIN( 140)		::String _hx_tmp2 = (_hx_tmp1 + ((((HX_("usage/pink: ",0a,f5,29,65) + this->memgraph->ping) + HX_(" ",20,00,00,00)) + s) + HX_("  |  ",7c,97,57,82)));
HXDLIN( 140)		::String _hx_tmp3 = (_hx_tmp2 + ((((HX_("current/blue: ",16,ea,96,8e) + this->memgraph2->ping) + HX_(" ",20,00,00,00)) + s) + HX_("\n",0a,00,00,00)));
HXDLIN( 140)		::String _hx_tmp4 = (_hx_tmp3 + ((((HX_("large/red: ",a3,e9,53,46) + this->memgraph3->ping) + HX_(" ",20,00,00,00)) + s) + HX_("  |  ",7c,97,57,82)));
HXLINE( 139)		_hx_tmp->set_text((_hx_tmp4 + ((((HX_("reserved/green: ",82,8a,9c,9f) + this->memgraph4->ping) + HX_(" ",20,00,00,00)) + s) + HX_("\n",0a,00,00,00))));
            	}


void ProfilerDebugView_obj::show(){
            	HX_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_206_show)
HXLINE( 208)		{
HXLINE( 208)			 ::Dynamic _item = ::luxe::debug::ProfilerDebugView_obj::lists->iterator();
HXDLIN( 208)			while(( (bool)(_item->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 208)				 ::luxe::debug::_ProfilerDebugView::ProfilerValue _item1 = ( ( ::luxe::debug::_ProfilerDebugView::ProfilerValue)(_item->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 209)				if (!(_item1->hidden)) {
HXLINE( 210)					_item1->bar->show();
            				}
            			}
            		}
HXLINE( 215)		this->memgraph->show();
HXLINE( 216)		this->memgraph2->show();
HXLINE( 217)		this->memgraph3->show();
HXLINE( 218)		this->memgraph4->show();
HXLINE( 219)		this->memtext->set_visible(true);
HXLINE( 222)		if (!(this->_setup)) {
HXLINE( 227)			this->_setup = true;
            		}
            	}


void ProfilerDebugView_obj::hide(){
            	HX_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_232_hide)
HXLINE( 234)		{
HXLINE( 234)			 ::Dynamic _item = ::luxe::debug::ProfilerDebugView_obj::lists->iterator();
HXDLIN( 234)			while(( (bool)(_item->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 234)				 ::luxe::debug::_ProfilerDebugView::ProfilerValue _item1 = ( ( ::luxe::debug::_ProfilerDebugView::ProfilerValue)(_item->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 235)				_item1->bar->hide();
            			}
            		}
HXLINE( 239)		this->memgraph->hide();
HXLINE( 240)		this->memgraph2->hide();
HXLINE( 241)		this->memgraph3->hide();
HXLINE( 242)		this->memgraph4->hide();
HXLINE( 243)		this->memtext->set_visible(false);
            	}


 ::haxe::ds::StringMap ProfilerDebugView_obj::lists;

 ::phoenix::Color ProfilerDebugView_obj::color_red;

 ::phoenix::Color ProfilerDebugView_obj::color_green;

 ::phoenix::Color ProfilerDebugView_obj::color_normal;

void ProfilerDebugView_obj::add_offset(::String _id,::String _offset){
            	HX_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_152_add_offset)
HXLINE( 153)		 ::luxe::debug::_ProfilerDebugView::ProfilerValue _item = ::luxe::debug::ProfilerDebugView_obj::lists->get(_id).StaticCast<  ::luxe::debug::_ProfilerDebugView::ProfilerValue >();
HXLINE( 154)		 ::luxe::debug::_ProfilerDebugView::ProfilerValue _offsetitem = ::luxe::debug::ProfilerDebugView_obj::lists->get(_offset).StaticCast<  ::luxe::debug::_ProfilerDebugView::ProfilerValue >();
HXLINE( 155)		bool _hx_tmp;
HXDLIN( 155)		if (hx::IsNotNull( _item )) {
HXLINE( 155)			_hx_tmp = hx::IsNotNull( _offsetitem );
            		}
            		else {
HXLINE( 155)			_hx_tmp = false;
            		}
HXDLIN( 155)		if (_hx_tmp) {
HXLINE( 156)			_item->offsets->push(_offsetitem);
            		}
            		else {
HXLINE( 158)			 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 158)			_hx_tmp1((((HX_("not found for ",82,d1,5d,8e) + _id) + HX_(" or ",7d,71,7b,15)) + _offset),hx::SourceInfo(HX_("ProfilerDebugView.hx",4f,00,72,91),158,HX_("luxe.debug.ProfilerDebugView",3c,50,d2,3f),HX_("add_offset",31,ad,ef,68)));
HXLINE( 159)			 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 159)			::String _hx_tmp3 = (::Std_obj::string(_item) + HX_(" / ",31,71,18,00));
HXDLIN( 159)			::String _hx_tmp4 = (_hx_tmp3 + ::Std_obj::string(_offsetitem));
HXDLIN( 159)			_hx_tmp2(_hx_tmp4,hx::SourceInfo(HX_("ProfilerDebugView.hx",4f,00,72,91),159,HX_("luxe.debug.ProfilerDebugView",3c,50,d2,3f),HX_("add_offset",31,ad,ef,68)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ProfilerDebugView_obj,add_offset,(void))

void ProfilerDebugView_obj::hide_item(::String _id){
            	HX_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_163_hide_item)
HXLINE( 164)		 ::luxe::debug::_ProfilerDebugView::ProfilerValue _item = ::luxe::debug::ProfilerDebugView_obj::lists->get(_id).StaticCast<  ::luxe::debug::_ProfilerDebugView::ProfilerValue >();
HXLINE( 165)		if (hx::IsNotNull( _item )) {
HXLINE( 166)			_item->hidden = true;
HXLINE( 167)			_item->bar->hide();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ProfilerDebugView_obj,hide_item,(void))

void ProfilerDebugView_obj::show_item(::String _id){
            	HX_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_171_show_item)
HXLINE( 172)		 ::luxe::debug::_ProfilerDebugView::ProfilerValue _item = ::luxe::debug::ProfilerDebugView_obj::lists->get(_id).StaticCast<  ::luxe::debug::_ProfilerDebugView::ProfilerValue >();
HXLINE( 173)		if (hx::IsNotNull( _item )) {
HXLINE( 174)			_item->hidden = false;
HXLINE( 175)			_item->bar->show();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ProfilerDebugView_obj,show_item,(void))

void ProfilerDebugView_obj::start(::String _id, ::Dynamic _max){
            	HX_GC_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_179_start)
HXLINE( 181)		 ::luxe::debug::_ProfilerDebugView::ProfilerValue _item = ::luxe::debug::ProfilerDebugView_obj::lists->get(_id).StaticCast<  ::luxe::debug::_ProfilerDebugView::ProfilerValue >();
HXLINE( 183)		if (hx::IsNull( _item )) {
HXLINE( 185)			_item =  ::luxe::debug::_ProfilerDebugView::ProfilerValue_obj::__alloc( HX_CTX ,_id, ::luxe::debug::_ProfilerDebugView::ProfilerBar_obj::__alloc( HX_CTX ,_id,_max, ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null())->rgb((int)16121979)));
HXLINE( 186)			 ::luxe::debug::_ProfilerDebugView::ProfilerBar _item1 = _item->bar;
HXDLIN( 186)			Float _hx_tmp = (::Luxe_obj::debug->padding->x * (int)2);
HXDLIN( 186)			Float _hx_tmp1 = (::Luxe_obj::debug->padding->y * (int)3);
HXDLIN( 186)			_item1->set_pos( ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,(_hx_tmp1 + (::Lambda_obj::count(::luxe::debug::ProfilerDebugView_obj::lists,null()) * (int)20)),null(),null()));
HXLINE( 187)			::luxe::debug::ProfilerDebugView_obj::lists->set(_id,_item);
            		}
HXLINE( 190)		 ::snow::Snow _this = ::Luxe_obj::core->app;
HXDLIN( 190)		Float _hx_tmp2 = linc::timestamp::now();
HXDLIN( 190)		_item->start = (_hx_tmp2 - ::snow::modules::sdl::Runtime_obj::timestamp_start);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ProfilerDebugView_obj,start,(void))

void ProfilerDebugView_obj::end(::String _id){
            	HX_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_194_end)
HXLINE( 196)		 ::luxe::debug::_ProfilerDebugView::ProfilerValue _item = ::luxe::debug::ProfilerDebugView_obj::lists->get(_id).StaticCast<  ::luxe::debug::_ProfilerDebugView::ProfilerValue >();
HXLINE( 198)		if (hx::IsNotNull( _item )) {
HXLINE( 199)			_item->set();
            		}
            		else {
HXLINE( 201)			HX_STACK_DO_THROW(((HX_("Debug / profile end called for ",a0,65,ef,fa) + _id) + HX_(" but no start called",bb,30,0a,13)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ProfilerDebugView_obj,end,(void))


hx::ObjectPtr< ProfilerDebugView_obj > ProfilerDebugView_obj::__new( ::luxe::Debug _debug) {
	hx::ObjectPtr< ProfilerDebugView_obj > __this = new ProfilerDebugView_obj();
	__this->__construct(_debug);
	return __this;
}

hx::ObjectPtr< ProfilerDebugView_obj > ProfilerDebugView_obj::__alloc(hx::Ctx *_hx_ctx, ::luxe::Debug _debug) {
	ProfilerDebugView_obj *__this = (ProfilerDebugView_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ProfilerDebugView_obj), true, "luxe.debug.ProfilerDebugView"));
	*(void **)__this = ProfilerDebugView_obj::_hx_vtable;
	__this->__construct(_debug);
	return __this;
}

ProfilerDebugView_obj::ProfilerDebugView_obj()
{
}

void ProfilerDebugView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ProfilerDebugView);
	HX_MARK_MEMBER_NAME(memgraph,"memgraph");
	HX_MARK_MEMBER_NAME(memgraph2,"memgraph2");
	HX_MARK_MEMBER_NAME(memgraph3,"memgraph3");
	HX_MARK_MEMBER_NAME(memgraph4,"memgraph4");
	HX_MARK_MEMBER_NAME(memtext,"memtext");
	HX_MARK_MEMBER_NAME(margin,"margin");
	HX_MARK_MEMBER_NAME(tickamount,"tickamount");
	HX_MARK_MEMBER_NAME(nexttick,"nexttick");
	HX_MARK_MEMBER_NAME(peak,"peak");
	HX_MARK_MEMBER_NAME(minpeak,"minpeak");
	HX_MARK_MEMBER_NAME(_byte_levels,"_byte_levels");
	HX_MARK_MEMBER_NAME(_setup,"_setup");
	 ::luxe::debug::DebugView_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ProfilerDebugView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(memgraph,"memgraph");
	HX_VISIT_MEMBER_NAME(memgraph2,"memgraph2");
	HX_VISIT_MEMBER_NAME(memgraph3,"memgraph3");
	HX_VISIT_MEMBER_NAME(memgraph4,"memgraph4");
	HX_VISIT_MEMBER_NAME(memtext,"memtext");
	HX_VISIT_MEMBER_NAME(margin,"margin");
	HX_VISIT_MEMBER_NAME(tickamount,"tickamount");
	HX_VISIT_MEMBER_NAME(nexttick,"nexttick");
	HX_VISIT_MEMBER_NAME(peak,"peak");
	HX_VISIT_MEMBER_NAME(minpeak,"minpeak");
	HX_VISIT_MEMBER_NAME(_byte_levels,"_byte_levels");
	HX_VISIT_MEMBER_NAME(_setup,"_setup");
	 ::luxe::debug::DebugView_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ProfilerDebugView_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"peak") ) { return hx::Val( peak ); }
		if (HX_FIELD_EQ(inName,"show") ) { return hx::Val( show_dyn() ); }
		if (HX_FIELD_EQ(inName,"hide") ) { return hx::Val( hide_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"margin") ) { return hx::Val( margin ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"_setup") ) { return hx::Val( _setup ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"memtext") ) { return hx::Val( memtext ); }
		if (HX_FIELD_EQ(inName,"minpeak") ) { return hx::Val( minpeak ); }
		if (HX_FIELD_EQ(inName,"process") ) { return hx::Val( process_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"memgraph") ) { return hx::Val( memgraph ); }
		if (HX_FIELD_EQ(inName,"nexttick") ) { return hx::Val( nexttick ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"memgraph2") ) { return hx::Val( memgraph2 ); }
		if (HX_FIELD_EQ(inName,"memgraph3") ) { return hx::Val( memgraph3 ); }
		if (HX_FIELD_EQ(inName,"memgraph4") ) { return hx::Val( memgraph4 ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tickamount") ) { return hx::Val( tickamount ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_byte_levels") ) { return hx::Val( _byte_levels ); }
		if (HX_FIELD_EQ(inName,"update_graph") ) { return hx::Val( update_graph_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ProfilerDebugView_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { outValue = end_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lists") ) { outValue = ( lists ); return true; }
		if (HX_FIELD_EQ(inName,"start") ) { outValue = start_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"color_red") ) { outValue = ( color_red ); return true; }
		if (HX_FIELD_EQ(inName,"hide_item") ) { outValue = hide_item_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"show_item") ) { outValue = show_item_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"add_offset") ) { outValue = add_offset_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"color_green") ) { outValue = ( color_green ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"color_normal") ) { outValue = ( color_normal ); return true; }
	}
	return false;
}

hx::Val ProfilerDebugView_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"peak") ) { peak=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"margin") ) { margin=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_setup") ) { _setup=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"memtext") ) { memtext=inValue.Cast<  ::luxe::Text >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minpeak") ) { minpeak=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"memgraph") ) { memgraph=inValue.Cast<  ::luxe::debug::_ProfilerDebugView::ProfilerGraph >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nexttick") ) { nexttick=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"memgraph2") ) { memgraph2=inValue.Cast<  ::luxe::debug::_ProfilerDebugView::ProfilerGraph >(); return inValue; }
		if (HX_FIELD_EQ(inName,"memgraph3") ) { memgraph3=inValue.Cast<  ::luxe::debug::_ProfilerDebugView::ProfilerGraph >(); return inValue; }
		if (HX_FIELD_EQ(inName,"memgraph4") ) { memgraph4=inValue.Cast<  ::luxe::debug::_ProfilerDebugView::ProfilerGraph >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tickamount") ) { tickamount=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_byte_levels") ) { _byte_levels=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ProfilerDebugView_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lists") ) { lists=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"color_red") ) { color_red=ioValue.Cast<  ::phoenix::Color >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"color_green") ) { color_green=ioValue.Cast<  ::phoenix::Color >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"color_normal") ) { color_normal=ioValue.Cast<  ::phoenix::Color >(); return true; }
	}
	return false;
}

void ProfilerDebugView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("memgraph","\x19","\xd5","\x42","\xf1"));
	outFields->push(HX_HCSTRING("memgraph2","\xf9","\xa0","\x37","\x29"));
	outFields->push(HX_HCSTRING("memgraph3","\xfa","\xa0","\x37","\x29"));
	outFields->push(HX_HCSTRING("memgraph4","\xfb","\xa0","\x37","\x29"));
	outFields->push(HX_HCSTRING("memtext","\x42","\x09","\x56","\x26"));
	outFields->push(HX_HCSTRING("margin","\x2e","\x70","\x6d","\xba"));
	outFields->push(HX_HCSTRING("tickamount","\xf5","\x38","\xc0","\xfb"));
	outFields->push(HX_HCSTRING("nexttick","\xd0","\x3d","\xf0","\x0d"));
	outFields->push(HX_HCSTRING("peak","\x1f","\xde","\x54","\x4a"));
	outFields->push(HX_HCSTRING("minpeak","\xb1","\x20","\x85","\x50"));
	outFields->push(HX_HCSTRING("_byte_levels","\x07","\xd0","\x72","\xd7"));
	outFields->push(HX_HCSTRING("_setup","\xbe","\xf5","\x16","\x76"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ProfilerDebugView_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::debug::_ProfilerDebugView::ProfilerGraph*/ ,(int)offsetof(ProfilerDebugView_obj,memgraph),HX_HCSTRING("memgraph","\x19","\xd5","\x42","\xf1")},
	{hx::fsObject /*::luxe::debug::_ProfilerDebugView::ProfilerGraph*/ ,(int)offsetof(ProfilerDebugView_obj,memgraph2),HX_HCSTRING("memgraph2","\xf9","\xa0","\x37","\x29")},
	{hx::fsObject /*::luxe::debug::_ProfilerDebugView::ProfilerGraph*/ ,(int)offsetof(ProfilerDebugView_obj,memgraph3),HX_HCSTRING("memgraph3","\xfa","\xa0","\x37","\x29")},
	{hx::fsObject /*::luxe::debug::_ProfilerDebugView::ProfilerGraph*/ ,(int)offsetof(ProfilerDebugView_obj,memgraph4),HX_HCSTRING("memgraph4","\xfb","\xa0","\x37","\x29")},
	{hx::fsObject /*::luxe::Text*/ ,(int)offsetof(ProfilerDebugView_obj,memtext),HX_HCSTRING("memtext","\x42","\x09","\x56","\x26")},
	{hx::fsInt,(int)offsetof(ProfilerDebugView_obj,margin),HX_HCSTRING("margin","\x2e","\x70","\x6d","\xba")},
	{hx::fsFloat,(int)offsetof(ProfilerDebugView_obj,tickamount),HX_HCSTRING("tickamount","\xf5","\x38","\xc0","\xfb")},
	{hx::fsFloat,(int)offsetof(ProfilerDebugView_obj,nexttick),HX_HCSTRING("nexttick","\xd0","\x3d","\xf0","\x0d")},
	{hx::fsFloat,(int)offsetof(ProfilerDebugView_obj,peak),HX_HCSTRING("peak","\x1f","\xde","\x54","\x4a")},
	{hx::fsFloat,(int)offsetof(ProfilerDebugView_obj,minpeak),HX_HCSTRING("minpeak","\xb1","\x20","\x85","\x50")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(ProfilerDebugView_obj,_byte_levels),HX_HCSTRING("_byte_levels","\x07","\xd0","\x72","\xd7")},
	{hx::fsBool,(int)offsetof(ProfilerDebugView_obj,_setup),HX_HCSTRING("_setup","\xbe","\xf5","\x16","\x76")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ProfilerDebugView_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &ProfilerDebugView_obj::lists,HX_HCSTRING("lists","\x55","\xb6","\x05","\x75")},
	{hx::fsObject /*::phoenix::Color*/ ,(void *) &ProfilerDebugView_obj::color_red,HX_HCSTRING("color_red","\x35","\x7d","\xb6","\x2f")},
	{hx::fsObject /*::phoenix::Color*/ ,(void *) &ProfilerDebugView_obj::color_green,HX_HCSTRING("color_green","\xa7","\x73","\x68","\x1b")},
	{hx::fsObject /*::phoenix::Color*/ ,(void *) &ProfilerDebugView_obj::color_normal,HX_HCSTRING("color_normal","\xc3","\x54","\xe6","\xfa")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ProfilerDebugView_obj_sMemberFields[] = {
	HX_HCSTRING("memgraph","\x19","\xd5","\x42","\xf1"),
	HX_HCSTRING("memgraph2","\xf9","\xa0","\x37","\x29"),
	HX_HCSTRING("memgraph3","\xfa","\xa0","\x37","\x29"),
	HX_HCSTRING("memgraph4","\xfb","\xa0","\x37","\x29"),
	HX_HCSTRING("memtext","\x42","\x09","\x56","\x26"),
	HX_HCSTRING("margin","\x2e","\x70","\x6d","\xba"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("tickamount","\xf5","\x38","\xc0","\xfb"),
	HX_HCSTRING("nexttick","\xd0","\x3d","\xf0","\x0d"),
	HX_HCSTRING("peak","\x1f","\xde","\x54","\x4a"),
	HX_HCSTRING("minpeak","\xb1","\x20","\x85","\x50"),
	HX_HCSTRING("_byte_levels","\x07","\xd0","\x72","\xd7"),
	HX_HCSTRING("update_graph","\x58","\x89","\x00","\x61"),
	HX_HCSTRING("process","\x6f","\xa2","\x4a","\xf1"),
	HX_HCSTRING("_setup","\xbe","\xf5","\x16","\x76"),
	HX_HCSTRING("show","\xfd","\xd4","\x52","\x4c"),
	HX_HCSTRING("hide","\xc2","\x34","\x0e","\x45"),
	::String(null()) };

static void ProfilerDebugView_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ProfilerDebugView_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ProfilerDebugView_obj::lists,"lists");
	HX_MARK_MEMBER_NAME(ProfilerDebugView_obj::color_red,"color_red");
	HX_MARK_MEMBER_NAME(ProfilerDebugView_obj::color_green,"color_green");
	HX_MARK_MEMBER_NAME(ProfilerDebugView_obj::color_normal,"color_normal");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ProfilerDebugView_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ProfilerDebugView_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ProfilerDebugView_obj::lists,"lists");
	HX_VISIT_MEMBER_NAME(ProfilerDebugView_obj::color_red,"color_red");
	HX_VISIT_MEMBER_NAME(ProfilerDebugView_obj::color_green,"color_green");
	HX_VISIT_MEMBER_NAME(ProfilerDebugView_obj::color_normal,"color_normal");
};

#endif

hx::Class ProfilerDebugView_obj::__mClass;

static ::String ProfilerDebugView_obj_sStaticFields[] = {
	HX_HCSTRING("lists","\x55","\xb6","\x05","\x75"),
	HX_HCSTRING("color_red","\x35","\x7d","\xb6","\x2f"),
	HX_HCSTRING("color_green","\xa7","\x73","\x68","\x1b"),
	HX_HCSTRING("color_normal","\xc3","\x54","\xe6","\xfa"),
	HX_HCSTRING("add_offset","\x31","\xad","\xef","\x68"),
	HX_HCSTRING("hide_item","\xf0","\x2c","\x02","\xc1"),
	HX_HCSTRING("show_item","\xd5","\xd6","\x07","\x94"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	::String(null())
};

void ProfilerDebugView_obj::__register()
{
	hx::Object *dummy = new ProfilerDebugView_obj;
	ProfilerDebugView_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.debug.ProfilerDebugView","\x3c","\x50","\xd2","\x3f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ProfilerDebugView_obj::__GetStatic;
	__mClass->mSetStaticField = &ProfilerDebugView_obj::__SetStatic;
	__mClass->mMarkFunc = ProfilerDebugView_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ProfilerDebugView_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ProfilerDebugView_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ProfilerDebugView_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ProfilerDebugView_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ProfilerDebugView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ProfilerDebugView_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ProfilerDebugView_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_17_boot)
HXDLIN(  17)		color_red =  ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null())->rgb((int)13369344);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_18_boot)
HXDLIN(  18)		color_green =  ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null())->rgb((int)2263108);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_6ae1ba90d28efd92_19_boot)
HXDLIN(  19)		color_normal =  ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null())->rgb((int)15790320);
            	}
}

} // end namespace luxe
} // end namespace debug
