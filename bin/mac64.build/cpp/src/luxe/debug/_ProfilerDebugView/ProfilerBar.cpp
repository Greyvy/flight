// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_luxe_Debug
#include <luxe/Debug.h>
#endif
#ifndef INCLUDED_luxe_Draw
#include <luxe/Draw.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Text
#include <luxe/Text.h>
#endif
#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
#ifndef INCLUDED_luxe_debug_DebugView
#include <luxe/debug/DebugView.h>
#endif
#ifndef INCLUDED_luxe_debug_ProfilerDebugView
#include <luxe/debug/ProfilerDebugView.h>
#endif
#ifndef INCLUDED_luxe_debug__ProfilerDebugView_ProfilerBar
#include <luxe/debug/_ProfilerDebugView/ProfilerBar.h>
#endif
#ifndef INCLUDED_luxe_debug__ProfilerDebugView_ProfilerGraph
#include <luxe/debug/_ProfilerDebugView/ProfilerGraph.h>
#endif
#ifndef INCLUDED_phoenix_Batcher
#include <phoenix/Batcher.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Spatial
#include <phoenix/Spatial.h>
#endif
#ifndef INCLUDED_phoenix_Transform
#include <phoenix/Transform.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_QuadGeometry
#include <phoenix/geometry/QuadGeometry.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a60f0d3ea7ea3ca5_450_new,"luxe.debug._ProfilerDebugView.ProfilerBar","new",0x0df3bd11,"luxe.debug._ProfilerDebugView.ProfilerBar.new","luxe/debug/ProfilerDebugView.hx",450,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_a60f0d3ea7ea3ca5_504_hide,"luxe.debug._ProfilerDebugView.ProfilerBar","hide",0x235d62f1,"luxe.debug._ProfilerDebugView.ProfilerBar.hide","luxe/debug/ProfilerDebugView.hx",504,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_a60f0d3ea7ea3ca5_512_show,"luxe.debug._ProfilerDebugView.ProfilerBar","show",0x2aa2032c,"luxe.debug._ProfilerDebugView.ProfilerBar.show","luxe/debug/ProfilerDebugView.hx",512,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_a60f0d3ea7ea3ca5_520_set_value,"luxe.debug._ProfilerDebugView.ProfilerBar","set_value",0x7162cf45,"luxe.debug._ProfilerDebugView.ProfilerBar.set_value","luxe/debug/ProfilerDebugView.hx",520,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_a60f0d3ea7ea3ca5_546_set_pos,"luxe.debug._ProfilerDebugView.ProfilerBar","set_pos",0x5dbe5068,"luxe.debug._ProfilerDebugView.ProfilerBar.set_pos","luxe/debug/ProfilerDebugView.hx",546,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_a60f0d3ea7ea3ca5_554_set_text,"luxe.debug._ProfilerDebugView.ProfilerBar","set_text",0xab655359,"luxe.debug._ProfilerDebugView.ProfilerBar.set_text","luxe/debug/ProfilerDebugView.hx",554,0xef83e3c4)
namespace luxe{
namespace debug{
namespace _ProfilerDebugView{

void ProfilerBar_obj::__construct(::String _name, ::Dynamic _max, ::phoenix::Color _color){
            	HX_GC_STACKFRAME(&_hx_pos_a60f0d3ea7ea3ca5_450_new)
HXLINE( 461)		this->max = ((Float)16.7);
HXLINE( 460)		this->height = ((Float)8);
HXLINE( 459)		this->visible = false;
HXLINE( 469)		this->name = _name;
HXLINE( 471)		this->graph =  ::luxe::debug::_ProfilerDebugView::ProfilerGraph_obj::__alloc( HX_CTX ,_name,null());
HXLINE( 472)		this->graph->create();
HXLINE( 473)		if (hx::IsNotNull( _max )) {
HXLINE( 473)			this->graph->set_max(_max);
            		}
HXLINE( 478)		 ::phoenix::Vector _hx_tmp =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null());
HXLINE( 475)		this->text_item =  ::luxe::Text_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("batcher",a7,22,10,c0),::Luxe_obj::debug->batcher)
            			->setFixed(1,HX_("depth",03,f1,29,d7),((Float)999.3))
            			->setFixed(2,HX_("pos",94,5d,55,00),_hx_tmp)
            			->setFixed(3,HX_("no_scene",8e,a7,34,10),true)
            			->setFixed(4,HX_("name",4b,72,ff,48),(HX_("profiler.text.",dc,e3,08,7a) + _name))
            			->setFixed(5,HX_("color",63,71,5c,4a),_color)
            			->setFixed(6,HX_("point_size",50,66,f5,4b),(this->height * ((Float)1.8)))
            			->setFixed(7,HX_("text",ad,cc,f9,4c),HX_("",00,00,00,00))));
HXLINE( 486)		 ::luxe::Draw _hx_tmp1 = ::Luxe_obj::draw;
HXLINE( 487)		 ::phoenix::Color _hx_tmp2 =  ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null())->rgb((int)592137);
HXLINE( 486)		this->bg_geometry = _hx_tmp1->box( ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("batcher",a7,22,10,c0),::Luxe_obj::debug->batcher)
            			->setFixed(1,HX_("depth",03,f1,29,d7),((Float)999.3))
            			->setFixed(2,HX_("h",68,00,00,00),this->graph->height)
            			->setFixed(3,HX_("w",77,00,00,00),this->graph->width)
            			->setFixed(4,HX_("x",78,00,00,00),(int)0)
            			->setFixed(5,HX_("y",79,00,00,00),(int)0)
            			->setFixed(6,HX_("color",63,71,5c,4a),_hx_tmp2)));
HXLINE( 496)		 ::phoenix::Batcher _hx_tmp3 = ::Luxe_obj::debug->batcher;
HXLINE( 497)		Float _hx_tmp4 = (this->graph->width - (int)2);
HXLINE( 493)		this->bar_geometry = ::Luxe_obj::draw->box( ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("batcher",a7,22,10,c0),_hx_tmp3)
            			->setFixed(1,HX_("depth",03,f1,29,d7),((Float)999.33))
            			->setFixed(2,HX_("h",68,00,00,00),(this->graph->height - (int)2))
            			->setFixed(3,HX_("w",77,00,00,00),_hx_tmp4)
            			->setFixed(4,HX_("x",78,00,00,00),(int)1)
            			->setFixed(5,HX_("y",79,00,00,00),(int)1)
            			->setFixed(6,HX_("color",63,71,5c,4a),_color)));
HXLINE( 500)		this->hide();
            	}

Dynamic ProfilerBar_obj::__CreateEmpty() { return new ProfilerBar_obj; }

void *ProfilerBar_obj::_hx_vtable = 0;

Dynamic ProfilerBar_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ProfilerBar_obj > _hx_result = new ProfilerBar_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ProfilerBar_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x41204abd;
}

void ProfilerBar_obj::hide(){
            	HX_STACKFRAME(&_hx_pos_a60f0d3ea7ea3ca5_504_hide)
HXLINE( 505)		this->visible = false;
HXLINE( 506)		this->bar_geometry->set_visible(false);
HXLINE( 507)		this->bg_geometry->set_visible(false);
HXLINE( 508)		this->text_item->set_visible(false);
HXLINE( 509)		this->graph->hide();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ProfilerBar_obj,hide,(void))

void ProfilerBar_obj::show(){
            	HX_STACKFRAME(&_hx_pos_a60f0d3ea7ea3ca5_512_show)
HXLINE( 513)		this->visible = true;
HXLINE( 514)		this->bar_geometry->set_visible(true);
HXLINE( 515)		this->bg_geometry->set_visible(true);
HXLINE( 516)		this->text_item->set_visible(true);
HXLINE( 517)		this->graph->show();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ProfilerBar_obj,show,(void))

Float ProfilerBar_obj::set_value(Float _v){
            	HX_STACKFRAME(&_hx_pos_a60f0d3ea7ea3ca5_520_set_value)
HXLINE( 522)		 ::luxe::debug::_ProfilerDebugView::ProfilerGraph _hx_tmp = this->graph;
HXDLIN( 522)		_hx_tmp->set_ping((_v * (int)1000));
HXLINE( 524)		if (!(this->visible)) {
HXLINE( 524)			return (this->value = _v);
            		}
HXLINE( 526)		Float n = ::Math_obj::pow((int)10,(int)4);
HXDLIN( 526)		Float _vv = ((Float)::Std_obj::_hx_int(((_v * (int)1000) * n)) / (Float)n);
HXLINE( 527)		Float _p = ((Float)_vv / (Float)this->max);
HXLINE( 529)		if ((_p < ((Float)0.005))) {
HXLINE( 529)			_p = ((Float)0.005);
            		}
            		else {
HXLINE( 529)			if ((_p > (int)1)) {
HXLINE( 529)				_p = (int)1;
            			}
            			else {
HXLINE( 529)				_p = _p;
            			}
            		}
HXLINE( 531)		if ((_p > (int)1)) {
HXLINE( 532)			this->bar_geometry->set_color(::luxe::debug::ProfilerDebugView_obj::color_red);
            		}
            		else {
HXLINE( 533)			if ((_p < ((Float)0.15))) {
HXLINE( 534)				this->bar_geometry->set_color(::luxe::debug::ProfilerDebugView_obj::color_green);
            			}
            			else {
HXLINE( 536)				this->bar_geometry->set_color(::luxe::debug::ProfilerDebugView_obj::color_normal);
            			}
            		}
HXLINE( 539)		Float nx = ((this->graph->width - (int)2) * _p);
HXLINE( 540)		 ::phoenix::geometry::QuadGeometry _hx_tmp1 = this->bar_geometry;
HXDLIN( 540)		_hx_tmp1->resize_xy(nx,(this->graph->height - (int)2));
HXLINE( 542)		return (this->value = _v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ProfilerBar_obj,set_value,return )

 ::phoenix::Vector ProfilerBar_obj::set_pos( ::phoenix::Vector _p){
            	HX_GC_STACKFRAME(&_hx_pos_a60f0d3ea7ea3ca5_546_set_pos)
HXLINE( 547)		{
HXLINE( 547)			 ::phoenix::Spatial _this = this->bg_geometry->transform->local;
HXDLIN( 547)			_this->pos = _p;
HXDLIN( 547)			if (hx::IsNotNull( _p )) {
HXLINE( 547)				{
HXLINE( 547)					 ::phoenix::Vector _v = _this->pos;
HXDLIN( 547)					 ::Dynamic listener = _this->_pos_change_dyn();
HXDLIN( 547)					_v->listen_x = listener;
HXDLIN( 547)					_v->listen_y = listener;
HXDLIN( 547)					_v->listen_z = listener;
            				}
HXDLIN( 547)				{
HXLINE( 547)					bool _hx_tmp;
HXDLIN( 547)					if (hx::IsNotNull( _this->pos_changed )) {
HXLINE( 547)						_hx_tmp = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 547)						_hx_tmp = false;
            					}
HXDLIN( 547)					if (_hx_tmp) {
HXLINE( 547)						_this->pos_changed(_this->pos);
            					}
            				}
            			}
            		}
HXLINE( 548)		{
HXLINE( 548)			 ::phoenix::Vector _this1 = this->bar_geometry->transform->local->pos;
HXDLIN( 548)			Float _x = (_p->x + (int)1);
HXDLIN( 548)			Float _y = (_p->y + (int)1);
HXDLIN( 548)			bool prev = _this1->ignore_listeners;
HXDLIN( 548)			_this1->ignore_listeners = true;
HXDLIN( 548)			{
HXLINE( 548)				_this1->x = _x;
HXDLIN( 548)				if (!(_this1->_construct)) {
HXLINE( 548)					bool _hx_tmp1;
HXDLIN( 548)					if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 548)						_hx_tmp1 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 548)						_hx_tmp1 = false;
            					}
HXDLIN( 548)					if (_hx_tmp1) {
HXLINE( 548)						_this1->listen_x(_x);
            					}
            				}
            			}
HXDLIN( 548)			{
HXLINE( 548)				_this1->y = _y;
HXDLIN( 548)				if (!(_this1->_construct)) {
HXLINE( 548)					bool _hx_tmp2;
HXDLIN( 548)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 548)						_hx_tmp2 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 548)						_hx_tmp2 = false;
            					}
HXDLIN( 548)					if (_hx_tmp2) {
HXLINE( 548)						_this1->listen_y(_y);
            					}
            				}
            			}
HXDLIN( 548)			_this1->ignore_listeners = prev;
HXDLIN( 548)			bool _hx_tmp3;
HXDLIN( 548)			if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 548)				_hx_tmp3 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 548)				_hx_tmp3 = false;
            			}
HXDLIN( 548)			if (_hx_tmp3) {
HXLINE( 548)				_this1->listen_x(_this1->x);
            			}
HXDLIN( 548)			bool _hx_tmp4;
HXDLIN( 548)			if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 548)				_hx_tmp4 = !(_this1->ignore_listeners);
            			}
            			else {
HXLINE( 548)				_hx_tmp4 = false;
            			}
HXDLIN( 548)			if (_hx_tmp4) {
HXLINE( 548)				_this1->listen_y(_this1->y);
            			}
            		}
HXLINE( 549)		{
HXLINE( 549)			 ::phoenix::Vector _this2 = this->text_item->get_pos();
HXDLIN( 549)			Float _p1 = _p->x;
HXDLIN( 549)			Float _x1 = ((_p1 + (this->graph->width * (int)2)) + (int)10);
HXDLIN( 549)			Float _y1 = (_p->y - (int)6);
HXDLIN( 549)			bool prev1 = _this2->ignore_listeners;
HXDLIN( 549)			_this2->ignore_listeners = true;
HXDLIN( 549)			{
HXLINE( 549)				_this2->x = _x1;
HXDLIN( 549)				if (!(_this2->_construct)) {
HXLINE( 549)					bool _hx_tmp5;
HXDLIN( 549)					if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 549)						_hx_tmp5 = !(_this2->ignore_listeners);
            					}
            					else {
HXLINE( 549)						_hx_tmp5 = false;
            					}
HXDLIN( 549)					if (_hx_tmp5) {
HXLINE( 549)						_this2->listen_x(_x1);
            					}
            				}
            			}
HXDLIN( 549)			{
HXLINE( 549)				_this2->y = _y1;
HXDLIN( 549)				if (!(_this2->_construct)) {
HXLINE( 549)					bool _hx_tmp6;
HXDLIN( 549)					if (hx::IsNotNull( _this2->listen_y )) {
HXLINE( 549)						_hx_tmp6 = !(_this2->ignore_listeners);
            					}
            					else {
HXLINE( 549)						_hx_tmp6 = false;
            					}
HXDLIN( 549)					if (_hx_tmp6) {
HXLINE( 549)						_this2->listen_y(_y1);
            					}
            				}
            			}
HXDLIN( 549)			_this2->ignore_listeners = prev1;
HXDLIN( 549)			bool _hx_tmp7;
HXDLIN( 549)			if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 549)				_hx_tmp7 = !(_this2->ignore_listeners);
            			}
            			else {
HXLINE( 549)				_hx_tmp7 = false;
            			}
HXDLIN( 549)			if (_hx_tmp7) {
HXLINE( 549)				_this2->listen_x(_this2->x);
            			}
HXDLIN( 549)			bool _hx_tmp8;
HXDLIN( 549)			if (hx::IsNotNull( _this2->listen_y )) {
HXLINE( 549)				_hx_tmp8 = !(_this2->ignore_listeners);
            			}
            			else {
HXLINE( 549)				_hx_tmp8 = false;
            			}
HXDLIN( 549)			if (_hx_tmp8) {
HXLINE( 549)				_this2->listen_y(_this2->y);
            			}
            		}
HXLINE( 550)		 ::luxe::debug::_ProfilerDebugView::ProfilerGraph _hx_tmp9 = this->graph;
HXDLIN( 550)		 ::phoenix::Vector _this3 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_p->x,_p->y,_p->z,_p->w);
HXDLIN( 550)		{
HXLINE( 550)			Float _x2 = (_this3->x + (this->graph->width + (int)2));
HXDLIN( 550)			Float _y2 = (_this3->y + (-(this->graph->height) + (int)4));
HXDLIN( 550)			Float _z = _this3->z;
HXDLIN( 550)			bool prev2 = _this3->ignore_listeners;
HXDLIN( 550)			_this3->ignore_listeners = true;
HXDLIN( 550)			{
HXLINE( 550)				_this3->x = _x2;
HXDLIN( 550)				if (!(_this3->_construct)) {
HXLINE( 550)					bool _hx_tmp10;
HXDLIN( 550)					if (hx::IsNotNull( _this3->listen_x )) {
HXLINE( 550)						_hx_tmp10 = !(_this3->ignore_listeners);
            					}
            					else {
HXLINE( 550)						_hx_tmp10 = false;
            					}
HXDLIN( 550)					if (_hx_tmp10) {
HXLINE( 550)						_this3->listen_x(_x2);
            					}
            				}
            			}
HXDLIN( 550)			{
HXLINE( 550)				_this3->y = _y2;
HXDLIN( 550)				if (!(_this3->_construct)) {
HXLINE( 550)					bool _hx_tmp11;
HXDLIN( 550)					if (hx::IsNotNull( _this3->listen_y )) {
HXLINE( 550)						_hx_tmp11 = !(_this3->ignore_listeners);
            					}
            					else {
HXLINE( 550)						_hx_tmp11 = false;
            					}
HXDLIN( 550)					if (_hx_tmp11) {
HXLINE( 550)						_this3->listen_y(_y2);
            					}
            				}
            			}
HXDLIN( 550)			{
HXLINE( 550)				_this3->z = _z;
HXDLIN( 550)				if (!(_this3->_construct)) {
HXLINE( 550)					bool _hx_tmp12;
HXDLIN( 550)					if (hx::IsNotNull( _this3->listen_z )) {
HXLINE( 550)						_hx_tmp12 = !(_this3->ignore_listeners);
            					}
            					else {
HXLINE( 550)						_hx_tmp12 = false;
            					}
HXDLIN( 550)					if (_hx_tmp12) {
HXLINE( 550)						_this3->listen_z(_z);
            					}
            				}
            			}
HXDLIN( 550)			_this3->ignore_listeners = prev2;
HXDLIN( 550)			bool _hx_tmp13;
HXDLIN( 550)			if (hx::IsNotNull( _this3->listen_x )) {
HXLINE( 550)				_hx_tmp13 = !(_this3->ignore_listeners);
            			}
            			else {
HXLINE( 550)				_hx_tmp13 = false;
            			}
HXDLIN( 550)			if (_hx_tmp13) {
HXLINE( 550)				_this3->listen_x(_this3->x);
            			}
HXDLIN( 550)			bool _hx_tmp14;
HXDLIN( 550)			if (hx::IsNotNull( _this3->listen_y )) {
HXLINE( 550)				_hx_tmp14 = !(_this3->ignore_listeners);
            			}
            			else {
HXLINE( 550)				_hx_tmp14 = false;
            			}
HXDLIN( 550)			if (_hx_tmp14) {
HXLINE( 550)				_this3->listen_y(_this3->y);
            			}
HXDLIN( 550)			bool _hx_tmp15;
HXDLIN( 550)			if (hx::IsNotNull( _this3->listen_z )) {
HXLINE( 550)				_hx_tmp15 = !(_this3->ignore_listeners);
            			}
            			else {
HXLINE( 550)				_hx_tmp15 = false;
            			}
HXDLIN( 550)			if (_hx_tmp15) {
HXLINE( 550)				_this3->listen_z(_this3->z);
            			}
            		}
HXDLIN( 550)		_hx_tmp9->set_pos(_this3);
HXLINE( 551)		return (this->pos = _p);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ProfilerBar_obj,set_pos,return )

::String ProfilerBar_obj::set_text(::String _t){
            	HX_STACKFRAME(&_hx_pos_a60f0d3ea7ea3ca5_554_set_text)
HXLINE( 555)		 ::luxe::Text _hx_tmp = this->text_item;
HXDLIN( 555)		_hx_tmp->set_text(((((((HX_("",00,00,00,00) + this->name) + HX_(" (",08,1c,00,00)) + this->graph->max) + HX_("ms) | ",21,7e,2d,e7)) + _t) + HX_("ms",66,5f,00,00)));
HXLINE( 556)		return (this->text = _t);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ProfilerBar_obj,set_text,return )


hx::ObjectPtr< ProfilerBar_obj > ProfilerBar_obj::__new(::String _name, ::Dynamic _max, ::phoenix::Color _color) {
	hx::ObjectPtr< ProfilerBar_obj > __this = new ProfilerBar_obj();
	__this->__construct(_name,_max,_color);
	return __this;
}

hx::ObjectPtr< ProfilerBar_obj > ProfilerBar_obj::__alloc(hx::Ctx *_hx_ctx,::String _name, ::Dynamic _max, ::phoenix::Color _color) {
	ProfilerBar_obj *__this = (ProfilerBar_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ProfilerBar_obj), true, "luxe.debug._ProfilerDebugView.ProfilerBar"));
	*(void **)__this = ProfilerBar_obj::_hx_vtable;
	__this->__construct(_name,_max,_color);
	return __this;
}

ProfilerBar_obj::ProfilerBar_obj()
{
}

void ProfilerBar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ProfilerBar);
	HX_MARK_MEMBER_NAME(bar_geometry,"bar_geometry");
	HX_MARK_MEMBER_NAME(bg_geometry,"bg_geometry");
	HX_MARK_MEMBER_NAME(graph,"graph");
	HX_MARK_MEMBER_NAME(text_item,"text_item");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(visible,"visible");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(max,"max");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_END_CLASS();
}

void ProfilerBar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bar_geometry,"bar_geometry");
	HX_VISIT_MEMBER_NAME(bg_geometry,"bg_geometry");
	HX_VISIT_MEMBER_NAME(graph,"graph");
	HX_VISIT_MEMBER_NAME(text_item,"text_item");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(visible,"visible");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(max,"max");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(value,"value");
}

hx::Val ProfilerBar_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { return hx::Val( max ); }
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"hide") ) { return hx::Val( hide_dyn() ); }
		if (HX_FIELD_EQ(inName,"show") ) { return hx::Val( show_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"graph") ) { return hx::Val( graph ); }
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"visible") ) { return hx::Val( visible ); }
		if (HX_FIELD_EQ(inName,"set_pos") ) { return hx::Val( set_pos_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"text_item") ) { return hx::Val( text_item ); }
		if (HX_FIELD_EQ(inName,"set_value") ) { return hx::Val( set_value_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bg_geometry") ) { return hx::Val( bg_geometry ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bar_geometry") ) { return hx::Val( bar_geometry ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ProfilerBar_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { max=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pos") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pos(inValue.Cast<  ::phoenix::Vector >()) );pos=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"graph") ) { graph=inValue.Cast<  ::luxe::debug::_ProfilerDebugView::ProfilerGraph >(); return inValue; }
		if (HX_FIELD_EQ(inName,"value") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_value(inValue.Cast< Float >()) );value=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"visible") ) { visible=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"text_item") ) { text_item=inValue.Cast<  ::luxe::Text >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bg_geometry") ) { bg_geometry=inValue.Cast<  ::phoenix::geometry::QuadGeometry >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bar_geometry") ) { bar_geometry=inValue.Cast<  ::phoenix::geometry::QuadGeometry >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ProfilerBar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bar_geometry","\xde","\xf5","\xf6","\xba"));
	outFields->push(HX_HCSTRING("bg_geometry","\xac","\x43","\x5a","\xcd"));
	outFields->push(HX_HCSTRING("graph","\x4e","\x0f","\xea","\x99"));
	outFields->push(HX_HCSTRING("text_item","\x25","\x01","\x91","\xfe"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ProfilerBar_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::geometry::QuadGeometry*/ ,(int)offsetof(ProfilerBar_obj,bar_geometry),HX_HCSTRING("bar_geometry","\xde","\xf5","\xf6","\xba")},
	{hx::fsObject /*::phoenix::geometry::QuadGeometry*/ ,(int)offsetof(ProfilerBar_obj,bg_geometry),HX_HCSTRING("bg_geometry","\xac","\x43","\x5a","\xcd")},
	{hx::fsObject /*::luxe::debug::_ProfilerDebugView::ProfilerGraph*/ ,(int)offsetof(ProfilerBar_obj,graph),HX_HCSTRING("graph","\x4e","\x0f","\xea","\x99")},
	{hx::fsObject /*::luxe::Text*/ ,(int)offsetof(ProfilerBar_obj,text_item),HX_HCSTRING("text_item","\x25","\x01","\x91","\xfe")},
	{hx::fsString,(int)offsetof(ProfilerBar_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsBool,(int)offsetof(ProfilerBar_obj,visible),HX_HCSTRING("visible","\x72","\x78","\x24","\xa3")},
	{hx::fsFloat,(int)offsetof(ProfilerBar_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsFloat,(int)offsetof(ProfilerBar_obj,max),HX_HCSTRING("max","\xa4","\x0a","\x53","\x00")},
	{hx::fsString,(int)offsetof(ProfilerBar_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(ProfilerBar_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{hx::fsFloat,(int)offsetof(ProfilerBar_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ProfilerBar_obj_sStaticStorageInfo = 0;
#endif

static ::String ProfilerBar_obj_sMemberFields[] = {
	HX_HCSTRING("bar_geometry","\xde","\xf5","\xf6","\xba"),
	HX_HCSTRING("bg_geometry","\xac","\x43","\x5a","\xcd"),
	HX_HCSTRING("graph","\x4e","\x0f","\xea","\x99"),
	HX_HCSTRING("text_item","\x25","\x01","\x91","\xfe"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("hide","\xc2","\x34","\x0e","\x45"),
	HX_HCSTRING("show","\xfd","\xd4","\x52","\x4c"),
	HX_HCSTRING("set_value","\xd4","\xc7","\xb2","\x58"),
	HX_HCSTRING("set_pos","\x37","\xb7","\xcb","\x19"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	::String(null()) };

static void ProfilerBar_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ProfilerBar_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ProfilerBar_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ProfilerBar_obj::__mClass,"__mClass");
};

#endif

hx::Class ProfilerBar_obj::__mClass;

void ProfilerBar_obj::__register()
{
	hx::Object *dummy = new ProfilerBar_obj;
	ProfilerBar_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.debug._ProfilerDebugView.ProfilerBar","\x9f","\xe0","\x11","\xc4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ProfilerBar_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ProfilerBar_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ProfilerBar_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ProfilerBar_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ProfilerBar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ProfilerBar_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace debug
} // end namespace _ProfilerDebugView
