// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_Tag
#include <luxe/Tag.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5b4dd207071e3811_748_boot,"luxe.Tag","boot",0x19324a9e,"luxe.Tag.boot","luxe/Engine.hx",748,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_5b4dd207071e3811_749_boot,"luxe.Tag","boot",0x19324a9e,"luxe.Tag.boot","luxe/Engine.hx",749,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_5b4dd207071e3811_750_boot,"luxe.Tag","boot",0x19324a9e,"luxe.Tag.boot","luxe/Engine.hx",750,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_5b4dd207071e3811_751_boot,"luxe.Tag","boot",0x19324a9e,"luxe.Tag.boot","luxe/Engine.hx",751,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_5b4dd207071e3811_752_boot,"luxe.Tag","boot",0x19324a9e,"luxe.Tag.boot","luxe/Engine.hx",752,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_5b4dd207071e3811_753_boot,"luxe.Tag","boot",0x19324a9e,"luxe.Tag.boot","luxe/Engine.hx",753,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_5b4dd207071e3811_754_boot,"luxe.Tag","boot",0x19324a9e,"luxe.Tag.boot","luxe/Engine.hx",754,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_5b4dd207071e3811_755_boot,"luxe.Tag","boot",0x19324a9e,"luxe.Tag.boot","luxe/Engine.hx",755,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_5b4dd207071e3811_756_boot,"luxe.Tag","boot",0x19324a9e,"luxe.Tag.boot","luxe/Engine.hx",756,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_5b4dd207071e3811_757_boot,"luxe.Tag","boot",0x19324a9e,"luxe.Tag.boot","luxe/Engine.hx",757,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_5b4dd207071e3811_758_boot,"luxe.Tag","boot",0x19324a9e,"luxe.Tag.boot","luxe/Engine.hx",758,0xb793dd43)
namespace luxe{

void Tag_obj::__construct() { }

Dynamic Tag_obj::__CreateEmpty() { return new Tag_obj; }

void *Tag_obj::_hx_vtable = 0;

Dynamic Tag_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tag_obj > _hx_result = new Tag_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Tag_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0230f474;
}

::String Tag_obj::update;

::String Tag_obj::tick;

::String Tag_obj::game_update;

::String Tag_obj::render;

::String Tag_obj::debug;

::String Tag_obj::updates;

::String Tag_obj::events;

::String Tag_obj::audio;

::String Tag_obj::input;

::String Tag_obj::timer;

::String Tag_obj::scene;


Tag_obj::Tag_obj()
{
}

bool Tag_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"tick") ) { outValue = ( tick ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"debug") ) { outValue = ( debug ); return true; }
		if (HX_FIELD_EQ(inName,"audio") ) { outValue = ( audio ); return true; }
		if (HX_FIELD_EQ(inName,"input") ) { outValue = ( input ); return true; }
		if (HX_FIELD_EQ(inName,"timer") ) { outValue = ( timer ); return true; }
		if (HX_FIELD_EQ(inName,"scene") ) { outValue = ( scene ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { outValue = ( update ); return true; }
		if (HX_FIELD_EQ(inName,"render") ) { outValue = ( render ); return true; }
		if (HX_FIELD_EQ(inName,"events") ) { outValue = ( events ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"updates") ) { outValue = ( updates ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"game_update") ) { outValue = ( game_update ); return true; }
	}
	return false;
}

bool Tag_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"tick") ) { tick=ioValue.Cast< ::String >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"debug") ) { debug=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"audio") ) { audio=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"input") ) { input=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"timer") ) { timer=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"scene") ) { scene=ioValue.Cast< ::String >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { update=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"render") ) { render=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"events") ) { events=ioValue.Cast< ::String >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"updates") ) { updates=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"game_update") ) { game_update=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Tag_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Tag_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Tag_obj::update,HX_HCSTRING("update","\x09","\x86","\x05","\x87")},
	{hx::fsString,(void *) &Tag_obj::tick,HX_HCSTRING("tick","\x5d","\xc3","\xfc","\x4c")},
	{hx::fsString,(void *) &Tag_obj::game_update,HX_HCSTRING("game_update","\xf6","\xe5","\xe1","\x0c")},
	{hx::fsString,(void *) &Tag_obj::render,HX_HCSTRING("render","\x56","\x6b","\x29","\x05")},
	{hx::fsString,(void *) &Tag_obj::debug,HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7")},
	{hx::fsString,(void *) &Tag_obj::updates,HX_HCSTRING("updates","\x4a","\xc2","\xcf","\x9d")},
	{hx::fsString,(void *) &Tag_obj::events,HX_HCSTRING("events","\x19","\x4f","\x6a","\x96")},
	{hx::fsString,(void *) &Tag_obj::audio,HX_HCSTRING("audio","\xd6","\x78","\x80","\x27")},
	{hx::fsString,(void *) &Tag_obj::input,HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsString,(void *) &Tag_obj::timer,HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{hx::fsString,(void *) &Tag_obj::scene,HX_HCSTRING("scene","\x4c","\xd9","\xd1","\x78")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Tag_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tag_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Tag_obj::update,"update");
	HX_MARK_MEMBER_NAME(Tag_obj::tick,"tick");
	HX_MARK_MEMBER_NAME(Tag_obj::game_update,"game_update");
	HX_MARK_MEMBER_NAME(Tag_obj::render,"render");
	HX_MARK_MEMBER_NAME(Tag_obj::debug,"debug");
	HX_MARK_MEMBER_NAME(Tag_obj::updates,"updates");
	HX_MARK_MEMBER_NAME(Tag_obj::events,"events");
	HX_MARK_MEMBER_NAME(Tag_obj::audio,"audio");
	HX_MARK_MEMBER_NAME(Tag_obj::input,"input");
	HX_MARK_MEMBER_NAME(Tag_obj::timer,"timer");
	HX_MARK_MEMBER_NAME(Tag_obj::scene,"scene");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tag_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tag_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Tag_obj::update,"update");
	HX_VISIT_MEMBER_NAME(Tag_obj::tick,"tick");
	HX_VISIT_MEMBER_NAME(Tag_obj::game_update,"game_update");
	HX_VISIT_MEMBER_NAME(Tag_obj::render,"render");
	HX_VISIT_MEMBER_NAME(Tag_obj::debug,"debug");
	HX_VISIT_MEMBER_NAME(Tag_obj::updates,"updates");
	HX_VISIT_MEMBER_NAME(Tag_obj::events,"events");
	HX_VISIT_MEMBER_NAME(Tag_obj::audio,"audio");
	HX_VISIT_MEMBER_NAME(Tag_obj::input,"input");
	HX_VISIT_MEMBER_NAME(Tag_obj::timer,"timer");
	HX_VISIT_MEMBER_NAME(Tag_obj::scene,"scene");
};

#endif

hx::Class Tag_obj::__mClass;

static ::String Tag_obj_sStaticFields[] = {
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("tick","\x5d","\xc3","\xfc","\x4c"),
	HX_HCSTRING("game_update","\xf6","\xe5","\xe1","\x0c"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7"),
	HX_HCSTRING("updates","\x4a","\xc2","\xcf","\x9d"),
	HX_HCSTRING("events","\x19","\x4f","\x6a","\x96"),
	HX_HCSTRING("audio","\xd6","\x78","\x80","\x27"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("scene","\x4c","\xd9","\xd1","\x78"),
	::String(null())
};

void Tag_obj::__register()
{
	hx::Object *dummy = new Tag_obj;
	Tag_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Tag","\x82","\x31","\x8b","\x63");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Tag_obj::__GetStatic;
	__mClass->mSetStaticField = &Tag_obj::__SetStatic;
	__mClass->mMarkFunc = Tag_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Tag_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Tag_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tag_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tag_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tag_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Tag_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5b4dd207071e3811_748_boot)
HXDLIN( 748)		update = HX_("update dt",47,c5,bd,82);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5b4dd207071e3811_749_boot)
HXDLIN( 749)		tick = HX_("tick dt",73,94,b0,1a);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5b4dd207071e3811_750_boot)
HXDLIN( 750)		game_update = HX_("game.update",05,2b,46,17);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5b4dd207071e3811_751_boot)
HXDLIN( 751)		render = HX_("core.render",85,fe,b9,34);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5b4dd207071e3811_752_boot)
HXDLIN( 752)		debug = HX_("core.debug",04,7a,71,ef);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5b4dd207071e3811_753_boot)
HXDLIN( 753)		updates = HX_("core.updates",3b,f8,bf,0c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5b4dd207071e3811_754_boot)
HXDLIN( 754)		events = HX_("core.events",48,e2,fa,c5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5b4dd207071e3811_755_boot)
HXDLIN( 755)		audio = HX_("core.audio",87,a0,d2,3f);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5b4dd207071e3811_756_boot)
HXDLIN( 756)		input = HX_("core.input",bb,eb,6f,d6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5b4dd207071e3811_757_boot)
HXDLIN( 757)		timer = HX_("core.timer",76,e7,87,28);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5b4dd207071e3811_758_boot)
HXDLIN( 758)		scene = HX_("core.scene",fd,00,24,91);
            	}
}

} // end namespace luxe
