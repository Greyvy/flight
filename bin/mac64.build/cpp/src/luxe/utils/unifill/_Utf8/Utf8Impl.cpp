// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_utils_unifill_Exception
#include <luxe/utils/unifill/Exception.h>
#endif
#ifndef INCLUDED_luxe_utils_unifill__Utf8_Utf8Impl
#include <luxe/utils/unifill/_Utf8/Utf8Impl.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_42bfc4baef8164a1_167_code_point_width,"luxe.utils.unifill._Utf8.Utf8Impl","code_point_width",0xe8ec57d4,"luxe.utils.unifill._Utf8.Utf8Impl.code_point_width","luxe/utils/unifill/Utf8.hx",167,0xbecfbbba)
HX_LOCAL_STACK_FRAME(_hx_pos_42bfc4baef8164a1_170_find_prev_code_point,"luxe.utils.unifill._Utf8.Utf8Impl","find_prev_code_point",0xa7890d53,"luxe.utils.unifill._Utf8.Utf8Impl.find_prev_code_point","luxe/utils/unifill/Utf8.hx",170,0xbecfbbba)
HX_LOCAL_STACK_FRAME(_hx_pos_42bfc4baef8164a1_180_encode_code_point,"luxe.utils.unifill._Utf8.Utf8Impl","encode_code_point",0xd40a54d8,"luxe.utils.unifill._Utf8.Utf8Impl.encode_code_point","luxe/utils/unifill/Utf8.hx",180,0xbecfbbba)
HX_LOCAL_STACK_FRAME(_hx_pos_42bfc4baef8164a1_199_decode_code_point,"luxe.utils.unifill._Utf8.Utf8Impl","decode_code_point",0x506510c0,"luxe.utils.unifill._Utf8.Utf8Impl.decode_code_point","luxe/utils/unifill/Utf8.hx",199,0xbecfbbba)
namespace luxe{
namespace utils{
namespace unifill{
namespace _Utf8{

void Utf8Impl_obj::__construct() { }

Dynamic Utf8Impl_obj::__CreateEmpty() { return new Utf8Impl_obj; }

void *Utf8Impl_obj::_hx_vtable = 0;

Dynamic Utf8Impl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Utf8Impl_obj > _hx_result = new Utf8Impl_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Utf8Impl_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6be80645;
}

int Utf8Impl_obj::code_point_width(int c){
            	HX_STACKFRAME(&_hx_pos_42bfc4baef8164a1_167_code_point_width)
HXDLIN( 167)		if ((c < (int)192)) {
HXDLIN( 167)			return (int)1;
            		}
            		else {
HXDLIN( 167)			if ((c < (int)224)) {
HXDLIN( 167)				return (int)2;
            			}
            			else {
HXDLIN( 167)				if ((c < (int)240)) {
HXDLIN( 167)					return (int)3;
            				}
            				else {
HXDLIN( 167)					if ((c < (int)248)) {
HXDLIN( 167)						return (int)4;
            					}
            					else {
HXDLIN( 167)						return (int)1;
            					}
            				}
            			}
            		}
HXDLIN( 167)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utf8Impl_obj,code_point_width,return )

int Utf8Impl_obj::find_prev_code_point( ::Dynamic accessor,int index){
            	HX_STACKFRAME(&_hx_pos_42bfc4baef8164a1_170_find_prev_code_point)
HXLINE( 171)		int c1 = ( (int)(accessor((index - (int)1))) );
HXLINE( 172)		bool _hx_tmp;
HXDLIN( 172)		if ((c1 >= (int)128)) {
HXLINE( 172)			_hx_tmp = (c1 >= (int)192);
            		}
            		else {
HXLINE( 172)			_hx_tmp = true;
            		}
HXDLIN( 172)		if (_hx_tmp) {
HXLINE( 172)			return (int)1;
            		}
            		else {
HXLINE( 173)			if ((((int)( (int)(accessor((index - (int)2))) ) & (int)(int)224) == (int)192)) {
HXLINE( 173)				return (int)2;
            			}
            			else {
HXLINE( 174)				if ((((int)( (int)(accessor((index - (int)3))) ) & (int)(int)240) == (int)224)) {
HXLINE( 174)					return (int)3;
            				}
            				else {
HXLINE( 175)					if ((((int)( (int)(accessor((index - (int)4))) ) & (int)(int)248) == (int)240)) {
HXLINE( 175)						return (int)4;
            					}
            					else {
HXLINE( 176)						return (int)1;
            					}
            				}
            			}
            		}
HXLINE( 172)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utf8Impl_obj,find_prev_code_point,return )

void Utf8Impl_obj::encode_code_point( ::Dynamic addUnit,int codePoint){
            	HX_STACKFRAME(&_hx_pos_42bfc4baef8164a1_180_encode_code_point)
HXDLIN( 180)		if ((codePoint <= (int)127)) {
HXLINE( 181)			addUnit(codePoint);
            		}
            		else {
HXLINE( 182)			if ((codePoint <= (int)2047)) {
HXLINE( 183)				addUnit(((int)(int)192 | (int)((int)codePoint >> (int)(int)6)));
HXLINE( 184)				addUnit(((int)(int)128 | (int)((int)codePoint & (int)(int)63)));
            			}
            			else {
HXLINE( 185)				if ((codePoint <= (int)65535)) {
HXLINE( 186)					addUnit(((int)(int)224 | (int)((int)codePoint >> (int)(int)12)));
HXLINE( 187)					addUnit(((int)(int)128 | (int)((int)((int)codePoint >> (int)(int)6) & (int)(int)63)));
HXLINE( 188)					addUnit(((int)(int)128 | (int)((int)codePoint & (int)(int)63)));
            				}
            				else {
HXLINE( 189)					if ((codePoint <= (int)1114111)) {
HXLINE( 190)						addUnit(((int)(int)240 | (int)((int)codePoint >> (int)(int)18)));
HXLINE( 191)						addUnit(((int)(int)128 | (int)((int)((int)codePoint >> (int)(int)12) & (int)(int)63)));
HXLINE( 192)						addUnit(((int)(int)128 | (int)((int)((int)codePoint >> (int)(int)6) & (int)(int)63)));
HXLINE( 193)						addUnit(((int)(int)128 | (int)((int)codePoint & (int)(int)63)));
            					}
            					else {
HXLINE( 195)						HX_STACK_DO_THROW(::luxe::utils::unifill::Exception_obj::InvalidCodePoint(codePoint));
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utf8Impl_obj,encode_code_point,(void))

int Utf8Impl_obj::decode_code_point(int len, ::Dynamic accessor,int index){
            	HX_STACKFRAME(&_hx_pos_42bfc4baef8164a1_199_decode_code_point)
HXLINE( 200)		int i = index;
HXLINE( 201)		bool _hx_tmp;
HXDLIN( 201)		if ((i >= (int)0)) {
HXLINE( 201)			_hx_tmp = (len <= i);
            		}
            		else {
HXLINE( 201)			_hx_tmp = true;
            		}
HXDLIN( 201)		if (_hx_tmp) {
HXLINE( 202)			HX_STACK_DO_THROW(::luxe::utils::unifill::Exception_obj::InvalidCodeUnitSequence(index));
            		}
HXLINE( 203)		int c1 = ( (int)(accessor(i)) );
HXLINE( 204)		if ((c1 < (int)128)) {
HXLINE( 205)			return c1;
            		}
HXLINE( 207)		if ((c1 < (int)192)) {
HXLINE( 208)			HX_STACK_DO_THROW(::luxe::utils::unifill::Exception_obj::InvalidCodeUnitSequence(index));
            		}
HXLINE( 210)		i = (i + (int)1);
HXLINE( 211)		bool _hx_tmp1;
HXDLIN( 211)		if ((i >= (int)0)) {
HXLINE( 211)			_hx_tmp1 = (len <= i);
            		}
            		else {
HXLINE( 211)			_hx_tmp1 = true;
            		}
HXDLIN( 211)		if (_hx_tmp1) {
HXLINE( 212)			HX_STACK_DO_THROW(::luxe::utils::unifill::Exception_obj::InvalidCodeUnitSequence(index));
            		}
HXLINE( 213)		int c2 = ( (int)(accessor(i)) );
HXLINE( 214)		if ((c1 < (int)224)) {
HXLINE( 215)			bool _hx_tmp2;
HXDLIN( 215)			if ((((int)c1 & (int)(int)30) != (int)0)) {
HXLINE( 215)				_hx_tmp2 = (((int)c2 & (int)(int)192) == (int)128);
            			}
            			else {
HXLINE( 215)				_hx_tmp2 = false;
            			}
HXDLIN( 215)			if (_hx_tmp2) {
HXLINE( 216)				return ((int)((int)((int)c1 & (int)(int)63) << (int)(int)6) | (int)((int)c2 & (int)(int)127));
            			}
            			else {
HXLINE( 218)				HX_STACK_DO_THROW(::luxe::utils::unifill::Exception_obj::InvalidCodeUnitSequence(index));
            			}
            		}
HXLINE( 220)		i = (i + (int)1);
HXLINE( 221)		bool _hx_tmp3;
HXDLIN( 221)		if ((i >= (int)0)) {
HXLINE( 221)			_hx_tmp3 = (len <= i);
            		}
            		else {
HXLINE( 221)			_hx_tmp3 = true;
            		}
HXDLIN( 221)		if (_hx_tmp3) {
HXLINE( 222)			HX_STACK_DO_THROW(::luxe::utils::unifill::Exception_obj::InvalidCodeUnitSequence(index));
            		}
HXLINE( 223)		int c3 = ( (int)(accessor(i)) );
HXLINE( 224)		if ((c1 < (int)240)) {
HXLINE( 225)			bool _hx_tmp4;
HXDLIN( 225)			bool _hx_tmp5;
HXDLIN( 225)			bool _hx_tmp6;
HXDLIN( 225)			bool _hx_tmp7;
HXDLIN( 225)			if ((((int)c1 & (int)(int)15) == (int)0)) {
HXLINE( 225)				_hx_tmp7 = (((int)c2 & (int)(int)32) != (int)0);
            			}
            			else {
HXLINE( 225)				_hx_tmp7 = true;
            			}
HXDLIN( 225)			if (_hx_tmp7) {
HXLINE( 225)				_hx_tmp6 = (((int)c2 & (int)(int)192) == (int)128);
            			}
            			else {
HXLINE( 225)				_hx_tmp6 = false;
            			}
HXDLIN( 225)			if (_hx_tmp6) {
HXLINE( 225)				_hx_tmp5 = (((int)c3 & (int)(int)192) == (int)128);
            			}
            			else {
HXLINE( 225)				_hx_tmp5 = false;
            			}
HXDLIN( 225)			if (_hx_tmp5) {
HXLINE( 226)				bool _hx_tmp8;
HXDLIN( 226)				bool _hx_tmp9;
HXDLIN( 226)				if ((c1 == (int)237)) {
HXLINE( 226)					_hx_tmp9 = ((int)160 <= c2);
            				}
            				else {
HXLINE( 226)					_hx_tmp9 = false;
            				}
HXDLIN( 226)				if (_hx_tmp9) {
HXLINE( 226)					_hx_tmp8 = (c2 <= (int)191);
            				}
            				else {
HXLINE( 226)					_hx_tmp8 = false;
            				}
HXLINE( 225)				_hx_tmp4 = !(_hx_tmp8);
            			}
            			else {
HXLINE( 225)				_hx_tmp4 = false;
            			}
HXDLIN( 225)			if (_hx_tmp4) {
HXLINE( 227)				return ((int)((int)((int)((int)c1 & (int)(int)31) << (int)(int)12) | (int)((int)((int)c2 & (int)(int)127) << (int)(int)6)) | (int)((int)c3 & (int)(int)127));
            			}
            			else {
HXLINE( 229)				HX_STACK_DO_THROW(::luxe::utils::unifill::Exception_obj::InvalidCodeUnitSequence(index));
            			}
            		}
HXLINE( 231)		i = (i + (int)1);
HXLINE( 232)		bool _hx_tmp10;
HXDLIN( 232)		if ((i >= (int)0)) {
HXLINE( 232)			_hx_tmp10 = (len <= i);
            		}
            		else {
HXLINE( 232)			_hx_tmp10 = true;
            		}
HXDLIN( 232)		if (_hx_tmp10) {
HXLINE( 233)			HX_STACK_DO_THROW(::luxe::utils::unifill::Exception_obj::InvalidCodeUnitSequence(index));
            		}
HXLINE( 234)		int c4 = ( (int)(accessor(i)) );
HXLINE( 235)		if ((c1 < (int)248)) {
HXLINE( 236)			bool _hx_tmp11;
HXDLIN( 236)			bool _hx_tmp12;
HXDLIN( 236)			bool _hx_tmp13;
HXDLIN( 236)			bool _hx_tmp14;
HXDLIN( 236)			bool _hx_tmp15;
HXDLIN( 236)			if ((((int)c1 & (int)(int)7) == (int)0)) {
HXLINE( 236)				_hx_tmp15 = (((int)c2 & (int)(int)48) != (int)0);
            			}
            			else {
HXLINE( 236)				_hx_tmp15 = true;
            			}
HXDLIN( 236)			if (_hx_tmp15) {
HXLINE( 236)				_hx_tmp14 = (((int)c2 & (int)(int)192) == (int)128);
            			}
            			else {
HXLINE( 236)				_hx_tmp14 = false;
            			}
HXDLIN( 236)			if (_hx_tmp14) {
HXLINE( 236)				_hx_tmp13 = (((int)c3 & (int)(int)192) == (int)128);
            			}
            			else {
HXLINE( 236)				_hx_tmp13 = false;
            			}
HXDLIN( 236)			if (_hx_tmp13) {
HXLINE( 236)				_hx_tmp12 = (((int)c4 & (int)(int)192) == (int)128);
            			}
            			else {
HXLINE( 236)				_hx_tmp12 = false;
            			}
HXDLIN( 236)			if (_hx_tmp12) {
HXLINE( 237)				bool _hx_tmp16;
HXDLIN( 237)				bool _hx_tmp17;
HXDLIN( 237)				if ((c1 == (int)244)) {
HXLINE( 237)					_hx_tmp17 = (c2 > (int)143);
            				}
            				else {
HXLINE( 237)					_hx_tmp17 = false;
            				}
HXDLIN( 237)				if (!(_hx_tmp17)) {
HXLINE( 237)					_hx_tmp16 = (c1 > (int)244);
            				}
            				else {
HXLINE( 237)					_hx_tmp16 = true;
            				}
HXLINE( 236)				_hx_tmp11 = !(_hx_tmp16);
            			}
            			else {
HXLINE( 236)				_hx_tmp11 = false;
            			}
HXDLIN( 236)			if (_hx_tmp11) {
HXLINE( 238)				return ((int)((int)((int)((int)((int)c1 & (int)(int)15) << (int)(int)18) | (int)((int)((int)c2 & (int)(int)127) << (int)(int)12)) | (int)((int)((int)c3 & (int)(int)127) << (int)(int)6)) | (int)((int)c4 & (int)(int)127));
            			}
            			else {
HXLINE( 240)				HX_STACK_DO_THROW(::luxe::utils::unifill::Exception_obj::InvalidCodeUnitSequence(index));
            			}
            		}
HXLINE( 242)		HX_STACK_DO_THROW(::luxe::utils::unifill::Exception_obj::InvalidCodeUnitSequence(index));
HXDLIN( 242)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utf8Impl_obj,decode_code_point,return )


Utf8Impl_obj::Utf8Impl_obj()
{
}

bool Utf8Impl_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"code_point_width") ) { outValue = code_point_width_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"encode_code_point") ) { outValue = encode_code_point_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"decode_code_point") ) { outValue = decode_code_point_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"find_prev_code_point") ) { outValue = find_prev_code_point_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Utf8Impl_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Utf8Impl_obj_sStaticStorageInfo = 0;
#endif

static void Utf8Impl_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Utf8Impl_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Utf8Impl_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Utf8Impl_obj::__mClass,"__mClass");
};

#endif

hx::Class Utf8Impl_obj::__mClass;

static ::String Utf8Impl_obj_sStaticFields[] = {
	HX_HCSTRING("code_point_width","\x45","\xbc","\xb7","\x0f"),
	HX_HCSTRING("find_prev_code_point","\x44","\xfe","\x1d","\xb2"),
	HX_HCSTRING("encode_code_point","\x47","\xd3","\x36","\x9f"),
	HX_HCSTRING("decode_code_point","\x2f","\x8f","\x91","\x1b"),
	::String(null())
};

void Utf8Impl_obj::__register()
{
	hx::Object *dummy = new Utf8Impl_obj;
	Utf8Impl_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.utils.unifill._Utf8.Utf8Impl","\xbf","\x39","\x1a","\xaa");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Utf8Impl_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Utf8Impl_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Utf8Impl_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Utf8Impl_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Utf8Impl_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Utf8Impl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Utf8Impl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace utils
} // end namespace unifill
} // end namespace _Utf8
