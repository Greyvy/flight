// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif
#ifndef INCLUDED_luxe_utils_unifill_CodePointIter
#include <luxe/utils/unifill/CodePointIter.h>
#endif
#ifndef INCLUDED_luxe_utils_unifill_Unifill
#include <luxe/utils/unifill/Unifill.h>
#endif
#ifndef INCLUDED_luxe_utils_unifill__Utf8_Utf8Impl
#include <luxe/utils/unifill/_Utf8/Utf8Impl.h>
#endif
#ifndef INCLUDED_luxe_utils_unifill__Utf8_Utf8_Impl_
#include <luxe/utils/unifill/_Utf8/Utf8_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7be9e61a97df8db9_14_uLength,"luxe.utils.unifill.Unifill","uLength",0x79ec6e30,"luxe.utils.unifill.Unifill.uLength","luxe/utils/unifill/Unifill.hx",14,0x52105abe)
HX_LOCAL_STACK_FRAME(_hx_pos_7be9e61a97df8db9_21_uCharAt,"luxe.utils.unifill.Unifill","uCharAt",0x925a52b3,"luxe.utils.unifill.Unifill.uCharAt","luxe/utils/unifill/Unifill.hx",21,0x52105abe)
HX_LOCAL_STACK_FRAME(_hx_pos_7be9e61a97df8db9_33_uCharCodeAt,"luxe.utils.unifill.Unifill","uCharCodeAt",0xe1c12d40,"luxe.utils.unifill.Unifill.uCharCodeAt","luxe/utils/unifill/Unifill.hx",33,0x52105abe)
HX_LOCAL_STACK_FRAME(_hx_pos_7be9e61a97df8db9_44_uCodePointAt,"luxe.utils.unifill.Unifill","uCodePointAt",0x7e45822c,"luxe.utils.unifill.Unifill.uCodePointAt","luxe/utils/unifill/Unifill.hx",44,0x52105abe)
HX_LOCAL_STACK_FRAME(_hx_pos_7be9e61a97df8db9_52_uIndexOf,"luxe.utils.unifill.Unifill","uIndexOf",0x8e18903f,"luxe.utils.unifill.Unifill.uIndexOf","luxe/utils/unifill/Unifill.hx",52,0x52105abe)
HX_LOCAL_STACK_FRAME(_hx_pos_7be9e61a97df8db9_62_uLastIndexOf,"luxe.utils.unifill.Unifill","uLastIndexOf",0xc7bc3789,"luxe.utils.unifill.Unifill.uLastIndexOf","luxe/utils/unifill/Unifill.hx",62,0x52105abe)
HX_LOCAL_STACK_FRAME(_hx_pos_7be9e61a97df8db9_73_uSplit,"luxe.utils.unifill.Unifill","uSplit",0x5a3c48d0,"luxe.utils.unifill.Unifill.uSplit","luxe/utils/unifill/Unifill.hx",73,0x52105abe)
HX_LOCAL_STACK_FRAME(_hx_pos_7be9e61a97df8db9_85_uSubstr,"luxe.utils.unifill.Unifill","uSubstr",0x74efc87b,"luxe.utils.unifill.Unifill.uSubstr","luxe/utils/unifill/Unifill.hx",85,0x52105abe)
HX_LOCAL_STACK_FRAME(_hx_pos_7be9e61a97df8db9_100_uSubstring,"luxe.utils.unifill.Unifill","uSubstring",0x8eba8347,"luxe.utils.unifill.Unifill.uSubstring","luxe/utils/unifill/Unifill.hx",100,0x52105abe)
HX_LOCAL_STACK_FRAME(_hx_pos_7be9e61a97df8db9_113_uIterator,"luxe.utils.unifill.Unifill","uIterator",0x945f89b8,"luxe.utils.unifill.Unifill.uIterator","luxe/utils/unifill/Unifill.hx",113,0x52105abe)
HX_LOCAL_STACK_FRAME(_hx_pos_7be9e61a97df8db9_119_uCompare,"luxe.utils.unifill.Unifill","uCompare",0x30c2601b,"luxe.utils.unifill.Unifill.uCompare","luxe/utils/unifill/Unifill.hx",119,0x52105abe)
HX_LOCAL_STACK_FRAME(_hx_pos_7be9e61a97df8db9_141_uToString,"luxe.utils.unifill.Unifill","uToString",0x39341076,"luxe.utils.unifill.Unifill.uToString","luxe/utils/unifill/Unifill.hx",141,0x52105abe)
namespace luxe{
namespace utils{
namespace unifill{

void Unifill_obj::__construct() { }

Dynamic Unifill_obj::__CreateEmpty() { return new Unifill_obj; }

void *Unifill_obj::_hx_vtable = 0;

Dynamic Unifill_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Unifill_obj > _hx_result = new Unifill_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Unifill_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x49af9abb;
}

int Unifill_obj::uLength(::String s){
            	HX_STACKFRAME(&_hx_pos_7be9e61a97df8db9_14_uLength)
HXDLIN(  14)		::String this1 = s;
HXDLIN(  14)		::String this2 = this1;
HXDLIN(  14)		return ::luxe::utils::unifill::_Utf8::Utf8_Impl__obj::codePointCount(this2,(int)0,s.length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Unifill_obj,uLength,return )

::String Unifill_obj::uCharAt(::String s,int index){
            	HX_GC_STACKFRAME(&_hx_pos_7be9e61a97df8db9_21_uCharAt)
HXDLIN(  21)		int codePoint = ::haxe::Utf8_obj::charCodeAt(s,index);
HXDLIN(  21)		 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXDLIN(  21)		::luxe::utils::unifill::_Utf8::Utf8Impl_obj::encode_code_point(buf->addByte_dyn(),codePoint);
HXDLIN(  21)		::String this1 = buf->getBytes()->toString();
HXDLIN(  21)		::String this2 = this1;
HXDLIN(  21)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Unifill_obj,uCharAt,return )

int Unifill_obj::uCharCodeAt(::String s,int index){
            	HX_STACKFRAME(&_hx_pos_7be9e61a97df8db9_33_uCharCodeAt)
HXDLIN(  33)		return ::haxe::Utf8_obj::charCodeAt(s,index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Unifill_obj,uCharCodeAt,return )

int Unifill_obj::uCodePointAt(::String s,int index){
            	HX_STACKFRAME(&_hx_pos_7be9e61a97df8db9_44_uCodePointAt)
HXDLIN(  44)		return ::haxe::Utf8_obj::charCodeAt(s,index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Unifill_obj,uCodePointAt,return )

int Unifill_obj::uIndexOf(::String s,::String value,hx::Null< int >  __o_startIndex){
int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_7be9e61a97df8db9_52_uIndexOf)
HXLINE(  53)		::String this1 = s;
HXDLIN(  53)		::String this2 = this1;
HXDLIN(  53)		::String this3 = this2;
HXDLIN(  53)		int index;
HXDLIN(  53)		if ((startIndex >= (int)0)) {
HXLINE(  53)			int index1 = (int)0;
HXDLIN(  53)			int len = this3.length;
HXDLIN(  53)			int i = (int)0;
HXDLIN(  53)			while(true){
HXLINE(  53)				bool index2;
HXDLIN(  53)				if ((i < startIndex)) {
HXLINE(  53)					index2 = (index1 < len);
            				}
            				else {
HXLINE(  53)					index2 = false;
            				}
HXDLIN(  53)				if (!(index2)) {
HXLINE(  53)					goto _hx_goto_4;
            				}
HXDLIN(  53)				int c = this3.cca(index1);
HXDLIN(  53)				int index3;
HXDLIN(  53)				if ((c < (int)192)) {
HXLINE(  53)					index3 = (int)1;
            				}
            				else {
HXLINE(  53)					if ((c < (int)224)) {
HXLINE(  53)						index3 = (int)2;
            					}
            					else {
HXLINE(  53)						if ((c < (int)240)) {
HXLINE(  53)							index3 = (int)3;
            						}
            						else {
HXLINE(  53)							if ((c < (int)248)) {
HXLINE(  53)								index3 = (int)4;
            							}
            							else {
HXLINE(  53)								index3 = (int)1;
            							}
            						}
            					}
            				}
HXDLIN(  53)				index1 = (index1 + index3);
HXDLIN(  53)				i = (i + (int)1);
            			}
            			_hx_goto_4:;
HXDLIN(  53)			index = index1;
            		}
            		else {
HXLINE(  53)			int index4 = (int)0;
HXDLIN(  53)			int count = (int)0;
HXDLIN(  53)			while(true){
HXLINE(  53)				bool index5;
HXDLIN(  53)				if ((count < -(startIndex))) {
HXLINE(  53)					index5 = ((int)0 < index4);
            				}
            				else {
HXLINE(  53)					index5 = false;
            				}
HXDLIN(  53)				if (!(index5)) {
HXLINE(  53)					goto _hx_goto_5;
            				}
HXDLIN(  53)				::String this4 = this3;
HXDLIN(  53)				::String this5 = this4;
HXDLIN(  53)				int c1 = this5.cca((index4 - (int)1));
HXDLIN(  53)				int index6;
HXDLIN(  53)				bool index7;
HXDLIN(  53)				if ((c1 >= (int)128)) {
HXLINE(  53)					index7 = (c1 >= (int)192);
            				}
            				else {
HXLINE(  53)					index7 = true;
            				}
HXDLIN(  53)				if (index7) {
HXLINE(  53)					index6 = (int)1;
            				}
            				else {
HXLINE(  53)					::String this6 = this4;
HXDLIN(  53)					if ((((int)this6.cca((index4 - (int)2)) & (int)(int)224) == (int)192)) {
HXLINE(  53)						index6 = (int)2;
            					}
            					else {
HXLINE(  53)						::String this7 = this4;
HXDLIN(  53)						if ((((int)this7.cca((index4 - (int)3)) & (int)(int)240) == (int)224)) {
HXLINE(  53)							index6 = (int)3;
            						}
            						else {
HXLINE(  53)							::String this8 = this4;
HXDLIN(  53)							if ((((int)this8.cca((index4 - (int)4)) & (int)(int)248) == (int)240)) {
HXLINE(  53)								index6 = (int)4;
            							}
            							else {
HXLINE(  53)								index6 = (int)1;
            							}
            						}
            					}
            				}
HXDLIN(  53)				index4 = (index4 - index6);
HXDLIN(  53)				count = (count + (int)1);
            			}
            			_hx_goto_5:;
HXDLIN(  53)			index = index4;
            		}
HXDLIN(  53)		int index8 = s.indexOf(value,index);
HXLINE(  54)		if ((index8 >= (int)0)) {
HXLINE(  54)			::String this9 = s;
HXDLIN(  54)			::String this10 = this9;
HXDLIN(  54)			return ::luxe::utils::unifill::_Utf8::Utf8_Impl__obj::codePointCount(this10,(int)0,index8);
            		}
            		else {
HXLINE(  54)			return (int)-1;
            		}
HXDLIN(  54)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Unifill_obj,uIndexOf,return )

int Unifill_obj::uLastIndexOf(::String s,::String value, ::Dynamic startIndex){
            	HX_STACKFRAME(&_hx_pos_7be9e61a97df8db9_62_uLastIndexOf)
HXLINE(  63)		if (hx::IsNull( startIndex )) {
HXLINE(  64)			startIndex = (s.length - (int)1);
            		}
HXLINE(  65)		int codePointOffset = startIndex;
HXDLIN(  65)		::String this1 = s;
HXDLIN(  65)		::String this2 = this1;
HXDLIN(  65)		::String this3 = this2;
HXDLIN(  65)		int index;
HXDLIN(  65)		if ((codePointOffset >= (int)0)) {
HXLINE(  65)			int index1 = (int)0;
HXDLIN(  65)			int len = this3.length;
HXDLIN(  65)			int i = (int)0;
HXDLIN(  65)			while(true){
HXLINE(  65)				bool index2;
HXDLIN(  65)				if ((i < codePointOffset)) {
HXLINE(  65)					index2 = (index1 < len);
            				}
            				else {
HXLINE(  65)					index2 = false;
            				}
HXDLIN(  65)				if (!(index2)) {
HXLINE(  65)					goto _hx_goto_7;
            				}
HXDLIN(  65)				int c = this3.cca(index1);
HXDLIN(  65)				int index3;
HXDLIN(  65)				if ((c < (int)192)) {
HXLINE(  65)					index3 = (int)1;
            				}
            				else {
HXLINE(  65)					if ((c < (int)224)) {
HXLINE(  65)						index3 = (int)2;
            					}
            					else {
HXLINE(  65)						if ((c < (int)240)) {
HXLINE(  65)							index3 = (int)3;
            						}
            						else {
HXLINE(  65)							if ((c < (int)248)) {
HXLINE(  65)								index3 = (int)4;
            							}
            							else {
HXLINE(  65)								index3 = (int)1;
            							}
            						}
            					}
            				}
HXDLIN(  65)				index1 = (index1 + index3);
HXDLIN(  65)				i = (i + (int)1);
            			}
            			_hx_goto_7:;
HXDLIN(  65)			index = index1;
            		}
            		else {
HXLINE(  65)			int index4 = (int)0;
HXDLIN(  65)			int count = (int)0;
HXDLIN(  65)			while(true){
HXLINE(  65)				bool index5;
HXDLIN(  65)				if ((count < -(codePointOffset))) {
HXLINE(  65)					index5 = ((int)0 < index4);
            				}
            				else {
HXLINE(  65)					index5 = false;
            				}
HXDLIN(  65)				if (!(index5)) {
HXLINE(  65)					goto _hx_goto_8;
            				}
HXDLIN(  65)				::String this4 = this3;
HXDLIN(  65)				::String this5 = this4;
HXDLIN(  65)				int c1 = this5.cca((index4 - (int)1));
HXDLIN(  65)				int index6;
HXDLIN(  65)				bool index7;
HXDLIN(  65)				if ((c1 >= (int)128)) {
HXLINE(  65)					index7 = (c1 >= (int)192);
            				}
            				else {
HXLINE(  65)					index7 = true;
            				}
HXDLIN(  65)				if (index7) {
HXLINE(  65)					index6 = (int)1;
            				}
            				else {
HXLINE(  65)					::String this6 = this4;
HXDLIN(  65)					if ((((int)this6.cca((index4 - (int)2)) & (int)(int)224) == (int)192)) {
HXLINE(  65)						index6 = (int)2;
            					}
            					else {
HXLINE(  65)						::String this7 = this4;
HXDLIN(  65)						if ((((int)this7.cca((index4 - (int)3)) & (int)(int)240) == (int)224)) {
HXLINE(  65)							index6 = (int)3;
            						}
            						else {
HXLINE(  65)							::String this8 = this4;
HXDLIN(  65)							if ((((int)this8.cca((index4 - (int)4)) & (int)(int)248) == (int)240)) {
HXLINE(  65)								index6 = (int)4;
            							}
            							else {
HXLINE(  65)								index6 = (int)1;
            							}
            						}
            					}
            				}
HXDLIN(  65)				index4 = (index4 - index6);
HXDLIN(  65)				count = (count + (int)1);
            			}
            			_hx_goto_8:;
HXDLIN(  65)			index = index4;
            		}
HXDLIN(  65)		int index8 = s.lastIndexOf(value,index);
HXLINE(  66)		if ((index8 >= (int)0)) {
HXLINE(  66)			::String this9 = s;
HXDLIN(  66)			::String this10 = this9;
HXDLIN(  66)			return ::luxe::utils::unifill::_Utf8::Utf8_Impl__obj::codePointCount(this10,(int)0,index8);
            		}
            		else {
HXLINE(  66)			return (int)-1;
            		}
HXDLIN(  66)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Unifill_obj,uLastIndexOf,return )

::Array< ::String > Unifill_obj::uSplit(::String s,::String delimiter){
            	HX_STACKFRAME(&_hx_pos_7be9e61a97df8db9_73_uSplit)
HXDLIN(  73)		if ((delimiter.length == (int)0)) {
HXLINE(  74)			::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN(  74)			{
HXLINE(  74)				::String _g1_string;
HXDLIN(  74)				int _g1_index;
HXDLIN(  74)				int _g1_i;
HXDLIN(  74)				int _g1_endIndex;
HXDLIN(  74)				_g1_i = (int)0;
HXDLIN(  74)				_g1_string = s;
HXDLIN(  74)				_g1_index = (int)0;
HXDLIN(  74)				_g1_endIndex = s.length;
HXDLIN(  74)				while((_g1_index < _g1_endIndex)){
HXLINE(  74)					_g1_i = _g1_index;
HXDLIN(  74)					::String this1 = _g1_string;
HXDLIN(  74)					::String this2 = this1;
HXDLIN(  74)					int c = this2.cca(_g1_index);
HXDLIN(  74)					int _g1_index1;
HXDLIN(  74)					if ((c < (int)192)) {
HXLINE(  74)						_g1_index1 = (int)1;
            					}
            					else {
HXLINE(  74)						if ((c < (int)224)) {
HXLINE(  74)							_g1_index1 = (int)2;
            						}
            						else {
HXLINE(  74)							if ((c < (int)240)) {
HXLINE(  74)								_g1_index1 = (int)3;
            							}
            							else {
HXLINE(  74)								if ((c < (int)248)) {
HXLINE(  74)									_g1_index1 = (int)4;
            								}
            								else {
HXLINE(  74)									_g1_index1 = (int)1;
            								}
            							}
            						}
            					}
HXDLIN(  74)					_g1_index = (_g1_index + _g1_index1);
HXDLIN(  74)					int i = _g1_i;
HXDLIN(  74)					::String this3 = s;
HXDLIN(  74)					::String this4 = this3;
HXDLIN(  74)					::String this5 = this4;
HXDLIN(  74)					int c1 = this5.cca(i);
HXDLIN(  74)					 ::Dynamic len;
HXDLIN(  74)					if ((c1 < (int)192)) {
HXLINE(  74)						len = (int)1;
            					}
            					else {
HXLINE(  74)						if ((c1 < (int)224)) {
HXLINE(  74)							len = (int)2;
            						}
            						else {
HXLINE(  74)							if ((c1 < (int)240)) {
HXLINE(  74)								len = (int)3;
            							}
            							else {
HXLINE(  74)								if ((c1 < (int)248)) {
HXLINE(  74)									len = (int)4;
            								}
            								else {
HXLINE(  74)									len = (int)1;
            								}
            							}
            						}
            					}
HXDLIN(  74)					::String this6 = this5.substr(i,len);
HXDLIN(  74)					::String this7 = this6;
HXDLIN(  74)					_g->push(this7);
            				}
            			}
HXDLIN(  74)			return _g;
            		}
            		else {
HXLINE(  76)			return s.split(delimiter);
            		}
HXLINE(  73)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Unifill_obj,uSplit,return )

::String Unifill_obj::uSubstr(::String s,int startIndex, ::Dynamic length){
            	HX_STACKFRAME(&_hx_pos_7be9e61a97df8db9_85_uSubstr)
HXLINE(  86)		int index;
HXLINE(  87)		if ((startIndex >= (int)0)) {
HXLINE(  86)			index = (int)0;
            		}
            		else {
HXLINE(  86)			index = s.length;
            		}
HXDLIN(  86)		::String this1 = s;
HXDLIN(  86)		::String this2 = this1;
HXDLIN(  86)		::String this3 = this2;
HXDLIN(  86)		int si;
HXDLIN(  86)		if ((startIndex >= (int)0)) {
HXLINE(  86)			int index1 = index;
HXDLIN(  86)			int len = this3.length;
HXDLIN(  86)			int i = (int)0;
HXDLIN(  86)			while(true){
HXLINE(  86)				bool si1;
HXDLIN(  86)				if ((i < startIndex)) {
HXLINE(  86)					si1 = (index1 < len);
            				}
            				else {
HXLINE(  86)					si1 = false;
            				}
HXDLIN(  86)				if (!(si1)) {
HXLINE(  86)					goto _hx_goto_12;
            				}
HXDLIN(  86)				int c = this3.cca(index1);
HXDLIN(  86)				int index2;
HXDLIN(  86)				if ((c < (int)192)) {
HXLINE(  86)					index2 = (int)1;
            				}
            				else {
HXLINE(  86)					if ((c < (int)224)) {
HXLINE(  86)						index2 = (int)2;
            					}
            					else {
HXLINE(  86)						if ((c < (int)240)) {
HXLINE(  86)							index2 = (int)3;
            						}
            						else {
HXLINE(  86)							if ((c < (int)248)) {
HXLINE(  86)								index2 = (int)4;
            							}
            							else {
HXLINE(  86)								index2 = (int)1;
            							}
            						}
            					}
            				}
HXDLIN(  86)				index1 = (index1 + index2);
HXDLIN(  86)				i = (i + (int)1);
            			}
            			_hx_goto_12:;
HXDLIN(  86)			si = index1;
            		}
            		else {
HXLINE(  86)			int index3 = index;
HXDLIN(  86)			int count = (int)0;
HXDLIN(  86)			while(true){
HXLINE(  86)				bool si2;
HXDLIN(  86)				if ((count < -(startIndex))) {
HXLINE(  86)					si2 = ((int)0 < index3);
            				}
            				else {
HXLINE(  86)					si2 = false;
            				}
HXDLIN(  86)				if (!(si2)) {
HXLINE(  86)					goto _hx_goto_13;
            				}
HXDLIN(  86)				::String this4 = this3;
HXDLIN(  86)				::String this5 = this4;
HXDLIN(  86)				int c1 = this5.cca((index3 - (int)1));
HXDLIN(  86)				int index4;
HXDLIN(  86)				bool index5;
HXDLIN(  86)				if ((c1 >= (int)128)) {
HXLINE(  86)					index5 = (c1 >= (int)192);
            				}
            				else {
HXLINE(  86)					index5 = true;
            				}
HXDLIN(  86)				if (index5) {
HXLINE(  86)					index4 = (int)1;
            				}
            				else {
HXLINE(  86)					::String this6 = this4;
HXDLIN(  86)					if ((((int)this6.cca((index3 - (int)2)) & (int)(int)224) == (int)192)) {
HXLINE(  86)						index4 = (int)2;
            					}
            					else {
HXLINE(  86)						::String this7 = this4;
HXDLIN(  86)						if ((((int)this7.cca((index3 - (int)3)) & (int)(int)240) == (int)224)) {
HXLINE(  86)							index4 = (int)3;
            						}
            						else {
HXLINE(  86)							::String this8 = this4;
HXDLIN(  86)							if ((((int)this8.cca((index3 - (int)4)) & (int)(int)248) == (int)240)) {
HXLINE(  86)								index4 = (int)4;
            							}
            							else {
HXLINE(  86)								index4 = (int)1;
            							}
            						}
            					}
            				}
HXDLIN(  86)				index3 = (index3 - index4);
HXDLIN(  86)				count = (count + (int)1);
            			}
            			_hx_goto_13:;
HXDLIN(  86)			si = index3;
            		}
HXLINE(  89)		int ei;
HXDLIN(  89)		if (hx::IsNull( length )) {
HXLINE(  89)			ei = s.length;
            		}
            		else {
HXLINE(  90)			if (hx::IsLess( length,(int)0 )) {
HXLINE(  89)				ei = si;
            			}
            			else {
HXLINE(  91)				int codePointOffset = length;
HXDLIN(  91)				::String this9 = s;
HXDLIN(  91)				::String this10 = this9;
HXDLIN(  91)				::String this11 = this10;
HXDLIN(  91)				if ((codePointOffset >= (int)0)) {
HXLINE(  91)					int index6 = si;
HXDLIN(  91)					int len1 = this11.length;
HXDLIN(  91)					int i1 = (int)0;
HXDLIN(  91)					while(true){
HXLINE(  91)						bool ei1;
HXDLIN(  91)						if ((i1 < codePointOffset)) {
HXLINE(  91)							ei1 = (index6 < len1);
            						}
            						else {
HXLINE(  91)							ei1 = false;
            						}
HXDLIN(  91)						if (!(ei1)) {
HXLINE(  91)							goto _hx_goto_14;
            						}
HXDLIN(  91)						int c2 = this11.cca(index6);
HXDLIN(  91)						int index7;
HXDLIN(  91)						if ((c2 < (int)192)) {
HXLINE(  91)							index7 = (int)1;
            						}
            						else {
HXLINE(  91)							if ((c2 < (int)224)) {
HXLINE(  91)								index7 = (int)2;
            							}
            							else {
HXLINE(  91)								if ((c2 < (int)240)) {
HXLINE(  91)									index7 = (int)3;
            								}
            								else {
HXLINE(  91)									if ((c2 < (int)248)) {
HXLINE(  91)										index7 = (int)4;
            									}
            									else {
HXLINE(  91)										index7 = (int)1;
            									}
            								}
            							}
            						}
HXDLIN(  91)						index6 = (index6 + index7);
HXDLIN(  91)						i1 = (i1 + (int)1);
            					}
            					_hx_goto_14:;
HXLINE(  89)					ei = index6;
            				}
            				else {
HXLINE(  91)					int index8 = si;
HXDLIN(  91)					int count1 = (int)0;
HXDLIN(  91)					while(true){
HXLINE(  91)						bool ei2;
HXDLIN(  91)						if ((count1 < -(codePointOffset))) {
HXLINE(  91)							ei2 = ((int)0 < index8);
            						}
            						else {
HXLINE(  91)							ei2 = false;
            						}
HXDLIN(  91)						if (!(ei2)) {
HXLINE(  91)							goto _hx_goto_15;
            						}
HXDLIN(  91)						::String this12 = this11;
HXDLIN(  91)						::String this13 = this12;
HXDLIN(  91)						int c11 = this13.cca((index8 - (int)1));
HXDLIN(  91)						int index9;
HXDLIN(  91)						bool index10;
HXDLIN(  91)						if ((c11 >= (int)128)) {
HXLINE(  91)							index10 = (c11 >= (int)192);
            						}
            						else {
HXLINE(  91)							index10 = true;
            						}
HXDLIN(  91)						if (index10) {
HXLINE(  91)							index9 = (int)1;
            						}
            						else {
HXLINE(  91)							::String this14 = this12;
HXDLIN(  91)							if ((((int)this14.cca((index8 - (int)2)) & (int)(int)224) == (int)192)) {
HXLINE(  91)								index9 = (int)2;
            							}
            							else {
HXLINE(  91)								::String this15 = this12;
HXDLIN(  91)								if ((((int)this15.cca((index8 - (int)3)) & (int)(int)240) == (int)224)) {
HXLINE(  91)									index9 = (int)3;
            								}
            								else {
HXLINE(  91)									::String this16 = this12;
HXDLIN(  91)									if ((((int)this16.cca((index8 - (int)4)) & (int)(int)248) == (int)240)) {
HXLINE(  91)										index9 = (int)4;
            									}
            									else {
HXLINE(  91)										index9 = (int)1;
            									}
            								}
            							}
            						}
HXDLIN(  91)						index8 = (index8 - index9);
HXDLIN(  91)						count1 = (count1 + (int)1);
            					}
            					_hx_goto_15:;
HXLINE(  89)					ei = index8;
            				}
            			}
            		}
HXLINE(  92)		return s.substring(si,ei);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Unifill_obj,uSubstr,return )

::String Unifill_obj::uSubstring(::String s,int startIndex, ::Dynamic endIndex){
            	HX_STACKFRAME(&_hx_pos_7be9e61a97df8db9_100_uSubstring)
HXLINE( 101)		int si;
HXDLIN( 101)		if ((startIndex < (int)0)) {
HXLINE( 101)			si = (int)0;
            		}
            		else {
HXLINE( 102)			::String this1 = s;
HXDLIN( 102)			::String this2 = this1;
HXDLIN( 102)			::String this3 = this2;
HXDLIN( 102)			if ((startIndex >= (int)0)) {
HXLINE( 102)				int index = (int)0;
HXDLIN( 102)				int len = this3.length;
HXDLIN( 102)				int i = (int)0;
HXDLIN( 102)				while(true){
HXLINE( 102)					bool si1;
HXDLIN( 102)					if ((i < startIndex)) {
HXLINE( 102)						si1 = (index < len);
            					}
            					else {
HXLINE( 102)						si1 = false;
            					}
HXDLIN( 102)					if (!(si1)) {
HXLINE( 102)						goto _hx_goto_17;
            					}
HXDLIN( 102)					int c = this3.cca(index);
HXDLIN( 102)					int index1;
HXDLIN( 102)					if ((c < (int)192)) {
HXLINE( 102)						index1 = (int)1;
            					}
            					else {
HXLINE( 102)						if ((c < (int)224)) {
HXLINE( 102)							index1 = (int)2;
            						}
            						else {
HXLINE( 102)							if ((c < (int)240)) {
HXLINE( 102)								index1 = (int)3;
            							}
            							else {
HXLINE( 102)								if ((c < (int)248)) {
HXLINE( 102)									index1 = (int)4;
            								}
            								else {
HXLINE( 102)									index1 = (int)1;
            								}
            							}
            						}
            					}
HXDLIN( 102)					index = (index + index1);
HXDLIN( 102)					i = (i + (int)1);
            				}
            				_hx_goto_17:;
HXLINE( 101)				si = index;
            			}
            			else {
HXLINE( 102)				int index2 = (int)0;
HXDLIN( 102)				int count = (int)0;
HXDLIN( 102)				while(true){
HXLINE( 102)					bool si2;
HXDLIN( 102)					if ((count < -(startIndex))) {
HXLINE( 102)						si2 = ((int)0 < index2);
            					}
            					else {
HXLINE( 102)						si2 = false;
            					}
HXDLIN( 102)					if (!(si2)) {
HXLINE( 102)						goto _hx_goto_18;
            					}
HXDLIN( 102)					::String this4 = this3;
HXDLIN( 102)					::String this5 = this4;
HXDLIN( 102)					int c1 = this5.cca((index2 - (int)1));
HXDLIN( 102)					int index3;
HXDLIN( 102)					bool index4;
HXDLIN( 102)					if ((c1 >= (int)128)) {
HXLINE( 102)						index4 = (c1 >= (int)192);
            					}
            					else {
HXLINE( 102)						index4 = true;
            					}
HXDLIN( 102)					if (index4) {
HXLINE( 102)						index3 = (int)1;
            					}
            					else {
HXLINE( 102)						::String this6 = this4;
HXDLIN( 102)						if ((((int)this6.cca((index2 - (int)2)) & (int)(int)224) == (int)192)) {
HXLINE( 102)							index3 = (int)2;
            						}
            						else {
HXLINE( 102)							::String this7 = this4;
HXDLIN( 102)							if ((((int)this7.cca((index2 - (int)3)) & (int)(int)240) == (int)224)) {
HXLINE( 102)								index3 = (int)3;
            							}
            							else {
HXLINE( 102)								::String this8 = this4;
HXDLIN( 102)								if ((((int)this8.cca((index2 - (int)4)) & (int)(int)248) == (int)240)) {
HXLINE( 102)									index3 = (int)4;
            								}
            								else {
HXLINE( 102)									index3 = (int)1;
            								}
            							}
            						}
            					}
HXDLIN( 102)					index2 = (index2 - index3);
HXDLIN( 102)					count = (count + (int)1);
            				}
            				_hx_goto_18:;
HXLINE( 101)				si = index2;
            			}
            		}
HXLINE( 103)		int ei;
HXDLIN( 103)		if (hx::IsNull( endIndex )) {
HXLINE( 103)			ei = s.length;
            		}
            		else {
HXLINE( 104)			if (hx::IsLess( endIndex,(int)0 )) {
HXLINE( 103)				ei = (int)0;
            			}
            			else {
HXLINE( 105)				int codePointOffset = endIndex;
HXDLIN( 105)				::String this9 = s;
HXDLIN( 105)				::String this10 = this9;
HXDLIN( 105)				::String this11 = this10;
HXDLIN( 105)				if ((codePointOffset >= (int)0)) {
HXLINE( 105)					int index5 = (int)0;
HXDLIN( 105)					int len1 = this11.length;
HXDLIN( 105)					int i1 = (int)0;
HXDLIN( 105)					while(true){
HXLINE( 105)						bool ei1;
HXDLIN( 105)						if ((i1 < codePointOffset)) {
HXLINE( 105)							ei1 = (index5 < len1);
            						}
            						else {
HXLINE( 105)							ei1 = false;
            						}
HXDLIN( 105)						if (!(ei1)) {
HXLINE( 105)							goto _hx_goto_19;
            						}
HXDLIN( 105)						int c2 = this11.cca(index5);
HXDLIN( 105)						int index6;
HXDLIN( 105)						if ((c2 < (int)192)) {
HXLINE( 105)							index6 = (int)1;
            						}
            						else {
HXLINE( 105)							if ((c2 < (int)224)) {
HXLINE( 105)								index6 = (int)2;
            							}
            							else {
HXLINE( 105)								if ((c2 < (int)240)) {
HXLINE( 105)									index6 = (int)3;
            								}
            								else {
HXLINE( 105)									if ((c2 < (int)248)) {
HXLINE( 105)										index6 = (int)4;
            									}
            									else {
HXLINE( 105)										index6 = (int)1;
            									}
            								}
            							}
            						}
HXDLIN( 105)						index5 = (index5 + index6);
HXDLIN( 105)						i1 = (i1 + (int)1);
            					}
            					_hx_goto_19:;
HXLINE( 103)					ei = index5;
            				}
            				else {
HXLINE( 105)					int index7 = (int)0;
HXDLIN( 105)					int count1 = (int)0;
HXDLIN( 105)					while(true){
HXLINE( 105)						bool ei2;
HXDLIN( 105)						if ((count1 < -(codePointOffset))) {
HXLINE( 105)							ei2 = ((int)0 < index7);
            						}
            						else {
HXLINE( 105)							ei2 = false;
            						}
HXDLIN( 105)						if (!(ei2)) {
HXLINE( 105)							goto _hx_goto_20;
            						}
HXDLIN( 105)						::String this12 = this11;
HXDLIN( 105)						::String this13 = this12;
HXDLIN( 105)						int c11 = this13.cca((index7 - (int)1));
HXDLIN( 105)						int index8;
HXDLIN( 105)						bool index9;
HXDLIN( 105)						if ((c11 >= (int)128)) {
HXLINE( 105)							index9 = (c11 >= (int)192);
            						}
            						else {
HXLINE( 105)							index9 = true;
            						}
HXDLIN( 105)						if (index9) {
HXLINE( 105)							index8 = (int)1;
            						}
            						else {
HXLINE( 105)							::String this14 = this12;
HXDLIN( 105)							if ((((int)this14.cca((index7 - (int)2)) & (int)(int)224) == (int)192)) {
HXLINE( 105)								index8 = (int)2;
            							}
            							else {
HXLINE( 105)								::String this15 = this12;
HXDLIN( 105)								if ((((int)this15.cca((index7 - (int)3)) & (int)(int)240) == (int)224)) {
HXLINE( 105)									index8 = (int)3;
            								}
            								else {
HXLINE( 105)									::String this16 = this12;
HXDLIN( 105)									if ((((int)this16.cca((index7 - (int)4)) & (int)(int)248) == (int)240)) {
HXLINE( 105)										index8 = (int)4;
            									}
            									else {
HXLINE( 105)										index8 = (int)1;
            									}
            								}
            							}
            						}
HXDLIN( 105)						index7 = (index7 - index8);
HXDLIN( 105)						count1 = (count1 + (int)1);
            					}
            					_hx_goto_20:;
HXLINE( 103)					ei = index7;
            				}
            			}
            		}
HXLINE( 106)		return s.substring(si,ei);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Unifill_obj,uSubstring,return )

 ::luxe::utils::unifill::CodePointIter Unifill_obj::uIterator(::String s){
            	HX_GC_STACKFRAME(&_hx_pos_7be9e61a97df8db9_113_uIterator)
HXDLIN( 113)		return  ::luxe::utils::unifill::CodePointIter_obj::__alloc( HX_CTX ,s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Unifill_obj,uIterator,return )

int Unifill_obj::uCompare(::String a,::String b){
            	HX_STACKFRAME(&_hx_pos_7be9e61a97df8db9_119_uCompare)
HXLINE( 120)		::String aiter_string;
HXDLIN( 120)		int aiter_index;
HXDLIN( 120)		int aiter_i;
HXDLIN( 120)		int aiter_endIndex;
HXDLIN( 120)		aiter_i = (int)0;
HXDLIN( 120)		aiter_string = a;
HXDLIN( 120)		aiter_index = (int)0;
HXDLIN( 120)		aiter_endIndex = a.length;
HXLINE( 121)		::String biter_string;
HXDLIN( 121)		int biter_index;
HXDLIN( 121)		int biter_i;
HXDLIN( 121)		int biter_endIndex;
HXDLIN( 121)		biter_i = (int)0;
HXDLIN( 121)		biter_string = b;
HXDLIN( 121)		biter_index = (int)0;
HXDLIN( 121)		biter_endIndex = b.length;
HXLINE( 122)		while(true){
HXLINE( 122)			bool _hx_tmp;
HXDLIN( 122)			if ((aiter_index < aiter_endIndex)) {
HXLINE( 122)				_hx_tmp = (biter_index < biter_endIndex);
            			}
            			else {
HXLINE( 122)				_hx_tmp = false;
            			}
HXDLIN( 122)			if (!(_hx_tmp)) {
HXLINE( 122)				goto _hx_goto_23;
            			}
HXLINE( 123)			aiter_i = aiter_index;
HXDLIN( 123)			::String this1 = aiter_string;
HXDLIN( 123)			::String this2 = this1;
HXDLIN( 123)			int c = this2.cca(aiter_index);
HXDLIN( 123)			int aiter_index1;
HXDLIN( 123)			if ((c < (int)192)) {
HXLINE( 123)				aiter_index1 = (int)1;
            			}
            			else {
HXLINE( 123)				if ((c < (int)224)) {
HXLINE( 123)					aiter_index1 = (int)2;
            				}
            				else {
HXLINE( 123)					if ((c < (int)240)) {
HXLINE( 123)						aiter_index1 = (int)3;
            					}
            					else {
HXLINE( 123)						if ((c < (int)248)) {
HXLINE( 123)							aiter_index1 = (int)4;
            						}
            						else {
HXLINE( 123)							aiter_index1 = (int)1;
            						}
            					}
            				}
            			}
HXDLIN( 123)			aiter_index = (aiter_index + aiter_index1);
HXDLIN( 123)			::String this3 = a;
HXDLIN( 123)			::String this4 = this3;
HXDLIN( 123)			int acode = ::luxe::utils::unifill::_Utf8::Utf8_Impl__obj::codePointAt(this4,aiter_i);
HXLINE( 124)			biter_i = biter_index;
HXDLIN( 124)			::String this5 = biter_string;
HXDLIN( 124)			::String this6 = this5;
HXDLIN( 124)			int c1 = this6.cca(biter_index);
HXDLIN( 124)			int biter_index1;
HXDLIN( 124)			if ((c1 < (int)192)) {
HXLINE( 124)				biter_index1 = (int)1;
            			}
            			else {
HXLINE( 124)				if ((c1 < (int)224)) {
HXLINE( 124)					biter_index1 = (int)2;
            				}
            				else {
HXLINE( 124)					if ((c1 < (int)240)) {
HXLINE( 124)						biter_index1 = (int)3;
            					}
            					else {
HXLINE( 124)						if ((c1 < (int)248)) {
HXLINE( 124)							biter_index1 = (int)4;
            						}
            						else {
HXLINE( 124)							biter_index1 = (int)1;
            						}
            					}
            				}
            			}
HXDLIN( 124)			biter_index = (biter_index + biter_index1);
HXDLIN( 124)			::String this7 = b;
HXDLIN( 124)			::String this8 = this7;
HXDLIN( 124)			int bcode = ::luxe::utils::unifill::_Utf8::Utf8_Impl__obj::codePointAt(this8,biter_i);
HXLINE( 125)			if ((acode < bcode)) {
HXLINE( 126)				return (int)-1;
            			}
HXLINE( 127)			if ((acode > bcode)) {
HXLINE( 128)				return (int)1;
            			}
            		}
            		_hx_goto_23:;
HXLINE( 130)		if ((biter_index < biter_endIndex)) {
HXLINE( 131)			return (int)-1;
            		}
HXLINE( 132)		if ((aiter_index < aiter_endIndex)) {
HXLINE( 133)			return (int)1;
            		}
HXLINE( 134)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Unifill_obj,uCompare,return )

::String Unifill_obj::uToString( ::Dynamic codePoints){
            	HX_GC_STACKFRAME(&_hx_pos_7be9e61a97df8db9_141_uToString)
HXDLIN( 141)		 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXDLIN( 141)		{
HXDLIN( 141)			 ::Dynamic c = codePoints->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic)();
HXDLIN( 141)			while(( (bool)(c->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 141)				int c1 = ( (int)(c->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 141)				::luxe::utils::unifill::_Utf8::Utf8Impl_obj::encode_code_point(buf->addByte_dyn(),c1);
            			}
            		}
HXDLIN( 141)		::String this1 = buf->getBytes()->toString();
HXDLIN( 141)		::String this2 = this1;
HXDLIN( 141)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Unifill_obj,uToString,return )


Unifill_obj::Unifill_obj()
{
}

bool Unifill_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"uSplit") ) { outValue = uSplit_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"uLength") ) { outValue = uLength_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uCharAt") ) { outValue = uCharAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uSubstr") ) { outValue = uSubstr_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uIndexOf") ) { outValue = uIndexOf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uCompare") ) { outValue = uCompare_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"uIterator") ) { outValue = uIterator_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uToString") ) { outValue = uToString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uSubstring") ) { outValue = uSubstring_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"uCharCodeAt") ) { outValue = uCharCodeAt_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"uCodePointAt") ) { outValue = uCodePointAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uLastIndexOf") ) { outValue = uLastIndexOf_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Unifill_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Unifill_obj_sStaticStorageInfo = 0;
#endif

static void Unifill_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Unifill_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Unifill_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Unifill_obj::__mClass,"__mClass");
};

#endif

hx::Class Unifill_obj::__mClass;

static ::String Unifill_obj_sStaticFields[] = {
	HX_HCSTRING("uLength","\x3b","\x4f","\xeb","\xd4"),
	HX_HCSTRING("uCharAt","\xbe","\x33","\x59","\xed"),
	HX_HCSTRING("uCharCodeAt","\xcb","\xef","\xac","\x11"),
	HX_HCSTRING("uCodePointAt","\x41","\xf9","\xa3","\x3c"),
	HX_HCSTRING("uIndexOf","\xd4","\x98","\x1e","\xd2"),
	HX_HCSTRING("uLastIndexOf","\x9e","\xae","\x1a","\x86"),
	HX_HCSTRING("uSplit","\x25","\x92","\x5d","\xdc"),
	HX_HCSTRING("uSubstr","\x86","\xa9","\xee","\xcf"),
	HX_HCSTRING("uSubstring","\x1c","\x9b","\xc3","\x66"),
	HX_HCSTRING("uIterator","\x83","\x03","\xa1","\xd5"),
	HX_HCSTRING("uCompare","\xb0","\x68","\xc8","\x74"),
	HX_HCSTRING("uToString","\x41","\x8a","\x75","\x7a"),
	::String(null())
};

void Unifill_obj::__register()
{
	hx::Object *dummy = new Unifill_obj;
	Unifill_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.utils.unifill.Unifill","\x63","\x02","\xc3","\xec");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Unifill_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Unifill_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Unifill_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Unifill_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Unifill_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Unifill_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Unifill_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace utils
} // end namespace unifill
