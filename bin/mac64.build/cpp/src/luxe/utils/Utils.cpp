// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_0a05af74edef3e68
#define INCLUDED_0a05af74edef3e68
#include "linc_timestamp.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_CallStack
#include <haxe/CallStack.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe_crypto_Md5
#include <haxe/crypto/Md5.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Resources
#include <luxe/Resources.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_luxe_utils_GeometryUtils
#include <luxe/utils/GeometryUtils.h>
#endif
#ifndef INCLUDED_luxe_utils_Random
#include <luxe/utils/Random.h>
#endif
#ifndef INCLUDED_luxe_utils_Utils
#include <luxe/utils/Utils.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_Runtime
#include <snow/modules/sdl/Runtime.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_18_new,"luxe.utils.Utils","new",0x3458be4e,"luxe.utils.Utils.new","luxe/utils/Utils.hx",18,0x2d9d0da4)
static const ::String _hx_array_data_b4343f5c_1[] = {
	HX_("bytes",6b,08,98,bd),HX_("Kb",b7,41,00,00),HX_("MB",55,43,00,00),HX_("GB",1b,3e,00,00),HX_("TB",6e,49,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_32_pos_info,"luxe.utils.Utils","pos_info",0x7ca7118b,"luxe.utils.Utils.pos_info","luxe/utils/Utils.hx",32,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_46_uniqueid,"luxe.utils.Utils","uniqueid",0xd69a687e,"luxe.utils.Utils.uniqueid","luxe/utils/Utils.hx",46,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_37_uniqueid,"luxe.utils.Utils","uniqueid",0xd69a687e,"luxe.utils.Utils.uniqueid","luxe/utils/Utils.hx",37,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_64_uniquehash,"luxe.utils.Utils","uniquehash",0x7fb8eb31,"luxe.utils.Utils.uniquehash","luxe/utils/Utils.hx",64,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_70_hash,"luxe.utils.Utils","hash",0x95537220,"luxe.utils.Utils.hash","luxe/utils/Utils.hx",70,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_75_hashdjb2,"luxe.utils.Utils","hashdjb2",0x98311cb6,"luxe.utils.Utils.hashdjb2","luxe/utils/Utils.hx",75,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_90_uniqueid2,"luxe.utils.Utils","uniqueid2",0xf08105f4,"luxe.utils.Utils.uniqueid2","luxe/utils/Utils.hx",90,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_95_stacktrace,"luxe.utils.Utils","stacktrace",0x8b198e0f,"luxe.utils.Utils.stacktrace","luxe/utils/Utils.hx",95,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_131_path_is_relative,"luxe.utils.Utils","path_is_relative",0x5216f779,"luxe.utils.Utils.path_is_relative","luxe/utils/Utils.hx",131,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_142_find_assets_sequence,"luxe.utils.Utils","find_assets_sequence",0x9fff7fc9,"luxe.utils.Utils.find_assets_sequence","luxe/utils/Utils.hx",142,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_181_find_assets_sequence,"luxe.utils.Utils","find_assets_sequence",0x9fff7fc9,"luxe.utils.Utils.find_assets_sequence","luxe/utils/Utils.hx",181,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_239_text_wrap_column_knuth_plass,"luxe.utils.Utils","text_wrap_column_knuth_plass",0x0e2647d8,"luxe.utils.Utils.text_wrap_column_knuth_plass","luxe/utils/Utils.hx",239,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_205_text_wrap_column_knuth_plass,"luxe.utils.Utils","text_wrap_column_knuth_plass",0x0e2647d8,"luxe.utils.Utils.text_wrap_column_knuth_plass","luxe/utils/Utils.hx",205,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_274_text_wrap_column,"luxe.utils.Utils","text_wrap_column",0x0983136b,"luxe.utils.Utils.text_wrap_column","luxe/utils/Utils.hx",274,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_287_bytes_to_string,"luxe.utils.Utils","bytes_to_string",0xf09ebd2f,"luxe.utils.Utils.bytes_to_string","luxe/utils/Utils.hx",287,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_298_array_to_bytes,"luxe.utils.Utils","array_to_bytes",0x20cc2edf,"luxe.utils.Utils.array_to_bytes","luxe/utils/Utils.hx",298,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_311_premultiply_alpha,"luxe.utils.Utils","premultiply_alpha",0xe2216d94,"luxe.utils.Utils.premultiply_alpha","luxe/utils/Utils.hx",311,0x2d9d0da4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf44bc5555a0b3fb_339_premultiply_alpha_normalized,"luxe.utils.Utils","premultiply_alpha_normalized",0x57d04442,"luxe.utils.Utils.premultiply_alpha_normalized","luxe/utils/Utils.hx",339,0x2d9d0da4)
namespace luxe{
namespace utils{

void Utils_obj::__construct( ::luxe::Engine _luxe){
            	HX_GC_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_18_new)
HXLINE(  21)		this->core = _luxe;
HXLINE(  23)		this->geometry =  ::luxe::utils::GeometryUtils_obj::__alloc( HX_CTX );
HXLINE(  24)		this->random =  ::luxe::utils::Random_obj::__alloc( HX_CTX ,(::Math_obj::random() * (int)2147483647));
HXLINE(  26)		this->_byte_levels = ::Array_obj< ::String >::fromData( _hx_array_data_b4343f5c_1,5);
            	}

Dynamic Utils_obj::__CreateEmpty() { return new Utils_obj; }

void *Utils_obj::_hx_vtable = 0;

Dynamic Utils_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Utils_obj > _hx_result = new Utils_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Utils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7d5ca79a;
}

::String Utils_obj::pos_info( ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_32_pos_info)
HXDLIN(  32)		return ((((((((HX_("",00,00,00,00) + ( (::String)(pos->__Field(HX_("fileName",e7,5a,43,62),hx::paccDynamic)) )) + HX_(":",3a,00,00,00)) + ( (int)(pos->__Field(HX_("lineNumber",dd,81,22,76),hx::paccDynamic)) )) + HX_(":(",ae,32,00,00)) + ( (::String)(pos->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) )) + HX_(":",3a,00,00,00)) + ( (::String)(pos->__Field(HX_("methodName",cc,19,0f,12),hx::paccDynamic)) )) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,pos_info,return )

::String Utils_obj::uniqueid( ::Dynamic val){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::String _hx_run(int value){
            			HX_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_46_uniqueid)
HXLINE(  46)			if ((value > (int)9)) {
HXLINE(  47)				int ascii = ((int)65 + (value - (int)10));
HXLINE(  48)				if ((ascii > (int)90)) {
HXLINE(  48)					ascii = (ascii + (int)6);
            				}
HXLINE(  49)				return ::String::fromCharCode(ascii);
            			}
            			else {
HXLINE(  50)				return ::Std_obj::string(value).charAt((int)0);
            			}
HXLINE(  46)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_37_uniqueid)
HXLINE(  41)		if (hx::IsNull( val )) {
HXLINE(  42)			val = ::Std_obj::random((int)2147483647);
            		}
HXLINE(  45)		 ::Dynamic to_char =  ::Dynamic(new _hx_Closure_0());
HXLINE(  53)		int r = ::Std_obj::_hx_int(hx::Mod(val,(int)62));
HXLINE(  54)		int q = ::Std_obj::_hx_int(((Float)val / (Float)(int)62));
HXLINE(  55)		if ((q > (int)0)) {
HXLINE(  55)			::String _hx_tmp = this->uniqueid(q);
HXDLIN(  55)			return (_hx_tmp + ( (::String)(to_char(r)) ));
            		}
            		else {
HXLINE(  56)			return ::Std_obj::string(to_char(r));
            		}
HXLINE(  55)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,uniqueid,return )

int Utils_obj::uniquehash(){
            	HX_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_64_uniquehash)
HXDLIN(  64)		return this->hash(this->uniqueid(null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Utils_obj,uniquehash,return )

int Utils_obj::hash(::String string){
            	HX_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_70_hash)
HXDLIN(  70)		return this->hashdjb2(string);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,hash,return )

int Utils_obj::hashdjb2(::String string){
            	HX_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_75_hashdjb2)
HXLINE(  78)		int _hash = (int)5381;
HXLINE(  79)		{
HXLINE(  79)			int _g1 = (int)0;
HXDLIN(  79)			int _g = string.length;
HXDLIN(  79)			while((_g1 < _g)){
HXLINE(  79)				_g1 = (_g1 + (int)1);
HXDLIN(  79)				int i = (_g1 - (int)1);
HXLINE(  80)				_hash = ((((int)_hash << (int)(int)5) + _hash) + string.charCodeAt(i));
            			}
            		}
HXLINE(  83)		return _hash;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,hashdjb2,return )

::String Utils_obj::uniqueid2(){
            	HX_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_90_uniqueid2)
HXDLIN(  90)		 ::snow::Snow _this = ::Luxe_obj::core->app;
HXDLIN(  90)		Float _hx_tmp = linc::timestamp::now();
HXDLIN(  90)		Float _hx_tmp1 = (_hx_tmp - ::snow::modules::sdl::Runtime_obj::timestamp_start);
HXDLIN(  90)		return ::haxe::crypto::Md5_obj::encode(::Std_obj::string((_hx_tmp1 * ::Math_obj::random())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Utils_obj,uniqueid2,return )

::String Utils_obj::stacktrace( ::Dynamic __o__depth){
 ::Dynamic _depth = __o__depth.Default(100);
            	HX_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_95_stacktrace)
HXLINE(  97)		::String result = HX_("\n",0a,00,00,00);
HXLINE(  99)		::Array< ::Dynamic> stack = ::haxe::CallStack_obj::callStack();
HXLINE( 101)		stack->shift().StaticCast<  ::haxe::StackItem >();
HXLINE( 102)		stack->reverse();
HXLINE( 104)		int total = ::Std_obj::_hx_int(::Math_obj::min(stack->length,_depth));
HXLINE( 106)		{
HXLINE( 106)			int _g1 = (int)0;
HXDLIN( 106)			int _g = total;
HXDLIN( 106)			while((_g1 < _g)){
HXLINE( 106)				_g1 = (_g1 + (int)1);
HXDLIN( 106)				int i = (_g1 - (int)1);
HXLINE( 107)				 ::haxe::StackItem stackitem = stack->__get(i).StaticCast<  ::haxe::StackItem >();
HXLINE( 109)				{
HXLINE( 109)					 ::haxe::StackItem _g2 = stack->__get(i).StaticCast<  ::haxe::StackItem >();
HXDLIN( 109)					if ((_hx_getEnumValueIndex(_g2) == (int)2)) {
HXLINE( 110)						int line = _g2->_hx_getInt(2);
HXDLIN( 110)						::String file = _g2->_hx_getString(1);
HXDLIN( 110)						 ::haxe::StackItem s = _g2->_hx_getObject(0).StaticCast<  ::haxe::StackItem >();
HXLINE( 111)						if (hx::IsNotNull( s )) {
HXLINE( 111)							if ((_hx_getEnumValueIndex(s) == (int)3)) {
HXLINE( 112)								::String method = s->_hx_getString(1);
HXDLIN( 112)								::String classname = s->_hx_getString(0);
HXLINE( 113)								result = (result + (((((((HX_("   at ",ad,ef,ae,4d) + file) + HX_(":",3a,00,00,00)) + line) + HX_(": ",a6,32,00,00)) + classname) + HX_(".",2e,00,00,00)) + method));
            							}
            						}
            					}
            				}
HXLINE( 119)				if ((i != (total - (int)1))) {
HXLINE( 120)					result = (result + HX_("\n",0a,00,00,00));
            				}
            			}
            		}
HXLINE( 124)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,stacktrace,return )

bool Utils_obj::path_is_relative(::String _path){
            	HX_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_131_path_is_relative)
HXDLIN( 131)		bool _hx_tmp;
HXDLIN( 131)		bool _hx_tmp1;
HXDLIN( 131)		bool _hx_tmp2;
HXDLIN( 131)		if ((_path.charAt((int)0) != HX_("#",23,00,00,00))) {
HXDLIN( 131)			_hx_tmp2 = (_path.charAt((int)0) != HX_("/",2f,00,00,00));
            		}
            		else {
HXDLIN( 131)			_hx_tmp2 = false;
            		}
HXDLIN( 131)		if (_hx_tmp2) {
HXDLIN( 131)			_hx_tmp1 = (_path.indexOf(HX_(":\\",e2,32,00,00),null()) == (int)-1);
            		}
            		else {
HXDLIN( 131)			_hx_tmp1 = false;
            		}
HXDLIN( 131)		if (_hx_tmp1) {
HXDLIN( 131)			_hx_tmp = (_path.indexOf(HX_(":/",b5,32,00,00),null()) == (int)-1);
            		}
            		else {
HXDLIN( 131)			_hx_tmp = false;
            		}
HXDLIN( 131)		if (_hx_tmp) {
HXLINE( 136)			bool _hx_tmp3;
HXDLIN( 136)			if ((_path.indexOf(HX_("//",20,29,00,00),null()) != (int)-1)) {
HXLINE( 137)				int _hx_tmp4 = _path.indexOf(HX_("//",20,29,00,00),null());
HXLINE( 136)				_hx_tmp3 = (_hx_tmp4 > _path.indexOf(HX_("#",23,00,00,00),null()));
            			}
            			else {
HXLINE( 136)				_hx_tmp3 = true;
            			}
HXDLIN( 136)			if (!(_hx_tmp3)) {
HXLINE( 138)				int _hx_tmp5 = _path.indexOf(HX_("//",20,29,00,00),null());
HXDLIN( 138)				return (_hx_tmp5 > _path.indexOf(HX_("?",3f,00,00,00),null()));
            			}
            			else {
HXLINE( 136)				return true;
            			}
            		}
            		else {
HXDLIN( 131)			return false;
            		}
HXDLIN( 131)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,path_is_relative,return )

::Array< ::String > Utils_obj::find_assets_sequence(::String _name,::String __o__ext,::String __o__start){
::String _ext = __o__ext.Default(HX_HCSTRING(".png","\x3b","\x2d","\xbd","\x1e"));
::String _start = __o__start.Default(HX_HCSTRING("1","\x31","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_142_find_assets_sequence)
HXLINE( 144)		::Array< ::String > _final = ::Array_obj< ::String >::__new(0);
HXLINE( 146)		::String _sequence_type = HX_("",00,00,00,00);
HXLINE( 147)		 ::EReg _pattern_regex = null();
HXLINE( 150)		::String _type0 = ((_name + _start) + _ext);
HXLINE( 151)		 ::EReg _type0_re =  ::EReg_obj::__alloc( HX_CTX ,((HX_("(",28,00,00,00) + _name) + HX_(")(\\d+\\b)",3f,5b,08,22)),HX_("gi",22,5a,00,00));
HXLINE( 152)		::String _type1 = (((_name + HX_("_",5f,00,00,00)) + _start) + _ext);
HXLINE( 153)		 ::EReg _type1_re =  ::EReg_obj::__alloc( HX_CTX ,((HX_("(",28,00,00,00) + _name) + HX_("_)(\\d+\\b)",9e,52,9e,69)),HX_("gi",22,5a,00,00));
HXLINE( 154)		::String _type2 = (((_name + HX_("-",2d,00,00,00)) + _start) + _ext);
HXLINE( 155)		 ::EReg _type2_re =  ::EReg_obj::__alloc( HX_CTX ,((HX_("(",28,00,00,00) + _name) + HX_("-)(\\d+\\b)",6c,d0,77,36)),HX_("gi",22,5a,00,00));
HXLINE( 158)		if (::haxe::IMap_obj::exists(::Luxe_obj::resources->cache,_type0)) {
HXLINE( 159)			_sequence_type = _type0;
HXLINE( 160)			_pattern_regex = _type0_re;
            		}
            		else {
HXLINE( 161)			if (::haxe::IMap_obj::exists(::Luxe_obj::resources->cache,_type1)) {
HXLINE( 162)				_sequence_type = _type1;
HXLINE( 163)				_pattern_regex = _type1_re;
            			}
            			else {
HXLINE( 164)				if (::haxe::IMap_obj::exists(::Luxe_obj::resources->cache,_type2)) {
HXLINE( 165)					_sequence_type = _type2;
HXLINE( 166)					_pattern_regex = _type2_re;
            				}
            				else {
HXLINE( 168)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 168)					_hx_tmp(((((((((HX_("Sequence requested from ",85,e3,98,f0) + _name) + HX_(" but no assets found like `",f2,48,70,9c)) + _type0) + HX_("` or `",e3,7f,ca,18)) + _type1) + HX_("` or `",e3,7f,ca,18)) + _type2) + HX_("`",60,00,00,00)),hx::SourceInfo(HX_("Utils.hx",4d,09,60,4c),168,HX_("luxe.utils.Utils",5c,3f,34,b4),HX_("find_assets_sequence",77,f9,76,fb)));
            				}
            			}
            		}
HXLINE( 171)		if ((_sequence_type != HX_("",00,00,00,00))) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::EReg,_pattern_regex) HXARGC(2)
            			int _hx_run(::String a,::String b){
            				HX_GC_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_181_find_assets_sequence)
HXLINE( 183)				if ((a == b)) {
HXLINE( 183)					return (int)0;
            				}
HXLINE( 185)				_pattern_regex->match(a);
HXLINE( 186)				 ::Dynamic _a_index = ::Std_obj::parseInt(_pattern_regex->matched((int)2));
HXLINE( 188)				_pattern_regex->match(b);
HXLINE( 189)				 ::Dynamic _b_index = ::Std_obj::parseInt(_pattern_regex->matched((int)2));
HXLINE( 191)				if (hx::IsLess( _a_index,_b_index )) {
HXLINE( 191)					return (int)-1;
            				}
HXLINE( 193)				return (int)1;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 172)			{
HXLINE( 172)				 ::Dynamic _asset = this->core->resources->cache->iterator();
HXDLIN( 172)				while(( (bool)(_asset->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 172)					 ::luxe::resource::Resource _asset1 = ( ( ::luxe::resource::Resource)(_asset->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 176)					if (_pattern_regex->match(_asset1->id)) {
HXLINE( 177)						_final->push(_asset1->id);
            					}
            				}
            			}
HXLINE( 181)			_final->sort( ::Dynamic(new _hx_Closure_0(_pattern_regex)));
            		}
HXLINE( 199)		return _final;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,find_assets_sequence,return )

::Array< ::String > Utils_obj::text_wrap_column_knuth_plass(::String _string,hx::Null< int >  __o__column){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< int >,lengths) HXARGC(1)
            		void _hx_run(::String w){
            			HX_GC_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_239_text_wrap_column_knuth_plass)
HXLINE( 239)			lengths->push(w.length);
            		}
            		HX_END_LOCAL_FUNC1((void))

int _column = __o__column.Default(80);
            	HX_GC_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_205_text_wrap_column_knuth_plass)
HXLINE( 207)		::Array< ::String > result = ::Array_obj< ::String >::__new(0);
HXLINE( 233)		::Array< ::String > words = ::Array_obj< ::String >::__new(0);
HXLINE( 234)		::Array< int > lengths = ::Array_obj< int >::__new(0);
HXLINE( 235)		 ::haxe::ds::IntMap _g =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXDLIN( 235)		_g->set((int)0,(int)0);
HXDLIN( 235)		 ::haxe::ds::IntMap badness = _g;
HXLINE( 236)		 ::haxe::ds::IntMap extra =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 238)		{
HXLINE( 238)			::String s = _string;
HXDLIN( 238)			 ::EReg rgx =  ::EReg_obj::__alloc( HX_CTX ,HX_("(\\b[^\\s]+\\b)",cd,3a,67,c4),HX_("gm",26,5a,00,00));
HXDLIN( 238)			while(rgx->match(s)){
HXLINE( 238)				words->push(rgx->matched((int)1));
HXDLIN( 238)				s = rgx->matchedRight();
            			}
HXDLIN( 238)			if ((words->length == (int)0)) {
HXLINE( 238)				words->push(_string);
            			}
            		}
HXLINE( 239)		words->map( ::Dynamic(new _hx_Closure_0(lengths)));
HXLINE( 241)		int n = words->length;
HXLINE( 243)		{
HXLINE( 243)			int _g2 = (int)1;
HXDLIN( 243)			int _g1 = (n + (int)1);
HXDLIN( 243)			while((_g2 < _g1)){
HXLINE( 243)				_g2 = (_g2 + (int)1);
HXDLIN( 243)				int i = (_g2 - (int)1);
HXLINE( 245)				 ::haxe::ds::IntMap sums =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 246)				int k = i;
HXLINE( 248)				while(true){
HXLINE( 248)					bool _hx_tmp;
HXDLIN( 248)					int total = (int)0;
HXDLIN( 248)					{
HXLINE( 248)						int _g11 = (k - (int)1);
HXDLIN( 248)						int _g3 = i;
HXDLIN( 248)						while((_g11 < _g3)){
HXLINE( 248)							_g11 = (_g11 + (int)1);
HXDLIN( 248)							int i1 = (_g11 - (int)1);
HXDLIN( 248)							total = (total + lengths->__get(i1));
            						}
            					}
HXDLIN( 248)					if (((total + ((i - k) + (int)1)) <= _column)) {
HXLINE( 248)						_hx_tmp = (k > (int)0);
            					}
            					else {
HXLINE( 248)						_hx_tmp = false;
            					}
HXDLIN( 248)					if (!(_hx_tmp)) {
HXLINE( 248)						goto _hx_goto_18;
            					}
HXLINE( 249)					int total1 = (int)0;
HXDLIN( 249)					{
HXLINE( 249)						int _g12 = (k - (int)1);
HXDLIN( 249)						int _g4 = i;
HXDLIN( 249)						while((_g12 < _g4)){
HXLINE( 249)							_g12 = (_g12 + (int)1);
HXDLIN( 249)							int i2 = (_g12 - (int)1);
HXDLIN( 249)							total1 = (total1 + lengths->__get(i2));
            						}
            					}
HXDLIN( 249)					int a = (_column - (total1 + ((i - k) + (int)1)));
HXLINE( 250)					{
HXLINE( 250)						Float k1 = ::Math_obj::pow(a,(int)3);
HXDLIN( 250)						sums->set(::Std_obj::_hx_int((k1 + badness->get((k - (int)1)))),k);
            					}
HXLINE( 251)					k = (k - (int)1);
            				}
            				_hx_goto_18:;
HXLINE( 254)				int min = (int)1073741823;
HXDLIN( 254)				{
HXLINE( 254)					 ::Dynamic item = sums->keys();
HXDLIN( 254)					while(( (bool)(item->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 254)						int item1 = ( (int)(item->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 254)						if ((item1 < min)) {
HXLINE( 254)							min = item1;
            						}
            					}
            				}
HXDLIN( 254)				int mn = min;
HXLINE( 255)				badness->set(i,mn);
HXLINE( 256)				{
HXLINE( 256)					int v = ( (int)(sums->get(mn)) );
HXDLIN( 256)					extra->set(i,v);
            				}
            			}
            		}
HXLINE( 260)		int line = (int)1;
HXLINE( 261)		while((n > (int)1)){
HXLINE( 262)			result->unshift(words->slice((extra->get(n) - (int)1),n)->join(HX_(" ",20,00,00,00)));
HXLINE( 263)			n = (extra->get(n) - (int)1);
HXLINE( 264)			line = (line + (int)1);
            		}
HXLINE( 267)		if ((result->length == (int)0)) {
HXLINE( 267)			result->push(_string);
            		}
HXLINE( 268)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,text_wrap_column_knuth_plass,return )

::String Utils_obj::text_wrap_column(::String _text,::String __o__brk,hx::Null< int >  __o__column){
::String _brk = __o__brk.Default(HX_HCSTRING("\n","\x0a","\x00","\x00","\x00"));
int _column = __o__column.Default(80);
            	HX_GC_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_274_text_wrap_column)
HXLINE( 280)		 ::EReg result =  ::EReg_obj::__alloc( HX_CTX ,((((HX_("(.{1,",d0,84,cc,26) + _column) + HX_("})(?: +|$)\n?|(.{",2d,01,cf,7a)) + _column) + HX_("})",0c,6d,00,00)),HX_("gimu",0a,06,65,44));
HXDLIN( 280)		::String result1 = result->replace(_text,(HX_("$1$2",5b,fc,f0,17) + _brk));
HXLINE( 282)		return ::StringTools_obj::rtrim(result1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,text_wrap_column,return )

::String Utils_obj::bytes_to_string(int bytes, ::Dynamic __o_precision){
 ::Dynamic precision = __o_precision.Default(3);
            	HX_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_287_bytes_to_string)
HXLINE( 289)		int index;
HXDLIN( 289)		if ((bytes == (int)0)) {
HXLINE( 289)			index = (int)0;
            		}
            		else {
HXLINE( 289)			Float index1 = ::Math_obj::log(bytes);
HXDLIN( 289)			index = ::Math_obj::floor(((Float)index1 / (Float)::Math_obj::log((int)1024)));
            		}
HXLINE( 290)		Float _byte_value = ((Float)bytes / (Float)::Math_obj::pow((int)1024,index));
HXLINE( 291)		Float n = ::Math_obj::pow((int)10,precision);
HXDLIN( 291)		_byte_value = ((Float)::Std_obj::_hx_int((_byte_value * n)) / (Float)n);
HXLINE( 293)		return ((_byte_value + HX_(" ",20,00,00,00)) + this->_byte_levels->__get(index));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,bytes_to_string,return )

 ::haxe::io::Bytes Utils_obj::array_to_bytes(::Array< int > array){
            	HX_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_298_array_to_bytes)
HXLINE( 300)		if (hx::IsNull( array )) {
HXLINE( 300)			return null();
            		}
HXLINE( 301)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc(array->length);
HXLINE( 302)		{
HXLINE( 302)			int _g1 = (int)0;
HXDLIN( 302)			int _g = bytes->length;
HXDLIN( 302)			while((_g1 < _g)){
HXLINE( 302)				_g1 = (_g1 + (int)1);
HXDLIN( 302)				int n = (_g1 - (int)1);
HXDLIN( 302)				::Array< unsigned char > bytes1 = bytes->b;
HXDLIN( 302)				bytes1[n] = array->__get(n);
            			}
            		}
HXLINE( 304)		return bytes;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,array_to_bytes,return )

 ::snow::api::buffers::ArrayBufferView Utils_obj::premultiply_alpha( ::snow::api::buffers::ArrayBufferView _pixels){
            	HX_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_311_premultiply_alpha)
HXLINE( 313)		int count = _pixels->length;
HXLINE( 314)		int read = ((int)::__hxcpp_memory_get_byte(_pixels->buffer,_pixels->byteOffset) & (int)(int)255);
HXLINE( 315)		int index = (int)0;
HXLINE( 317)		while((index < count)){
HXLINE( 319)			int r = ((int)::__hxcpp_memory_get_byte(_pixels->buffer,(_pixels->byteOffset + index)) & (int)(int)255);
HXLINE( 320)			int _pixels1 = _pixels->byteOffset;
HXDLIN( 320)			int g = ((int)::__hxcpp_memory_get_byte(_pixels->buffer,(_pixels1 + (index + (int)1))) & (int)(int)255);
HXLINE( 321)			int _pixels2 = _pixels->byteOffset;
HXDLIN( 321)			int b = ((int)::__hxcpp_memory_get_byte(_pixels->buffer,(_pixels2 + (index + (int)2))) & (int)(int)255);
HXLINE( 322)			int _pixels3 = _pixels->byteOffset;
HXDLIN( 322)			Float a = ((Float)((int)::__hxcpp_memory_get_byte(_pixels->buffer,(_pixels3 + (index + (int)3))) & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 324)			{
HXLINE( 324)				int val = ::Std_obj::_hx_int((r * a));
HXDLIN( 324)				::__hxcpp_memory_set_byte(_pixels->buffer,(_pixels->byteOffset + index),val);
            			}
HXLINE( 325)			{
HXLINE( 325)				int val1 = ::Std_obj::_hx_int((g * a));
HXDLIN( 325)				{
HXLINE( 325)					int _pixels4 = _pixels->byteOffset;
HXDLIN( 325)					::__hxcpp_memory_set_byte(_pixels->buffer,(_pixels4 + (index + (int)1)),val1);
            				}
            			}
HXLINE( 326)			{
HXLINE( 326)				int val2 = ::Std_obj::_hx_int((b * a));
HXDLIN( 326)				{
HXLINE( 326)					int _pixels5 = _pixels->byteOffset;
HXDLIN( 326)					::__hxcpp_memory_set_byte(_pixels->buffer,(_pixels5 + (index + (int)2)),val2);
            				}
            			}
HXLINE( 328)			index = (index + (int)4);
            		}
HXLINE( 332)		return _pixels;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,premultiply_alpha,return )

 ::snow::api::buffers::ArrayBufferView Utils_obj::premultiply_alpha_normalized( ::snow::api::buffers::ArrayBufferView _pixels){
            	HX_STACKFRAME(&_hx_pos_cf44bc5555a0b3fb_339_premultiply_alpha_normalized)
HXLINE( 341)		int count = _pixels->length;
HXLINE( 342)		int read = ((int)::__hxcpp_memory_get_byte(_pixels->buffer,_pixels->byteOffset) & (int)(int)255);
HXLINE( 343)		int index = (int)0;
HXLINE( 345)		while((index < count)){
HXLINE( 347)			int r = ((int)::__hxcpp_memory_get_byte(_pixels->buffer,(_pixels->byteOffset + index)) & (int)(int)255);
HXLINE( 348)			int _pixels1 = _pixels->byteOffset;
HXDLIN( 348)			int g = ((int)::__hxcpp_memory_get_byte(_pixels->buffer,(_pixels1 + (index + (int)1))) & (int)(int)255);
HXLINE( 349)			int _pixels2 = _pixels->byteOffset;
HXDLIN( 349)			int b = ((int)::__hxcpp_memory_get_byte(_pixels->buffer,(_pixels2 + (index + (int)2))) & (int)(int)255);
HXLINE( 350)			int _pixels3 = _pixels->byteOffset;
HXDLIN( 350)			int a = ((int)::__hxcpp_memory_get_byte(_pixels->buffer,(_pixels3 + (index + (int)3))) & (int)(int)255);
HXLINE( 352)			::__hxcpp_memory_set_byte(_pixels->buffer,(_pixels->byteOffset + index),(r * a));
HXLINE( 353)			{
HXLINE( 353)				int _pixels4 = _pixels->byteOffset;
HXDLIN( 353)				::__hxcpp_memory_set_byte(_pixels->buffer,(_pixels4 + (index + (int)1)),(g * a));
            			}
HXLINE( 354)			{
HXLINE( 354)				int _pixels5 = _pixels->byteOffset;
HXDLIN( 354)				::__hxcpp_memory_set_byte(_pixels->buffer,(_pixels5 + (index + (int)2)),(b * a));
            			}
HXLINE( 356)			index = (index + (int)4);
            		}
HXLINE( 360)		return _pixels;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,premultiply_alpha_normalized,return )


hx::ObjectPtr< Utils_obj > Utils_obj::__new( ::luxe::Engine _luxe) {
	hx::ObjectPtr< Utils_obj > __this = new Utils_obj();
	__this->__construct(_luxe);
	return __this;
}

hx::ObjectPtr< Utils_obj > Utils_obj::__alloc(hx::Ctx *_hx_ctx, ::luxe::Engine _luxe) {
	Utils_obj *__this = (Utils_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Utils_obj), true, "luxe.utils.Utils"));
	*(void **)__this = Utils_obj::_hx_vtable;
	__this->__construct(_luxe);
	return __this;
}

Utils_obj::Utils_obj()
{
}

void Utils_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Utils);
	HX_MARK_MEMBER_NAME(geometry,"geometry");
	HX_MARK_MEMBER_NAME(random,"random");
	HX_MARK_MEMBER_NAME(core,"core");
	HX_MARK_MEMBER_NAME(_byte_levels,"_byte_levels");
	HX_MARK_END_CLASS();
}

void Utils_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(geometry,"geometry");
	HX_VISIT_MEMBER_NAME(random,"random");
	HX_VISIT_MEMBER_NAME(core,"core");
	HX_VISIT_MEMBER_NAME(_byte_levels,"_byte_levels");
}

hx::Val Utils_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { return hx::Val( core ); }
		if (HX_FIELD_EQ(inName,"hash") ) { return hx::Val( hash_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"random") ) { return hx::Val( random ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"geometry") ) { return hx::Val( geometry ); }
		if (HX_FIELD_EQ(inName,"pos_info") ) { return hx::Val( pos_info_dyn() ); }
		if (HX_FIELD_EQ(inName,"uniqueid") ) { return hx::Val( uniqueid_dyn() ); }
		if (HX_FIELD_EQ(inName,"hashdjb2") ) { return hx::Val( hashdjb2_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"uniqueid2") ) { return hx::Val( uniqueid2_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uniquehash") ) { return hx::Val( uniquehash_dyn() ); }
		if (HX_FIELD_EQ(inName,"stacktrace") ) { return hx::Val( stacktrace_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_byte_levels") ) { return hx::Val( _byte_levels ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"array_to_bytes") ) { return hx::Val( array_to_bytes_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bytes_to_string") ) { return hx::Val( bytes_to_string_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"path_is_relative") ) { return hx::Val( path_is_relative_dyn() ); }
		if (HX_FIELD_EQ(inName,"text_wrap_column") ) { return hx::Val( text_wrap_column_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"premultiply_alpha") ) { return hx::Val( premultiply_alpha_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"find_assets_sequence") ) { return hx::Val( find_assets_sequence_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"text_wrap_column_knuth_plass") ) { return hx::Val( text_wrap_column_knuth_plass_dyn() ); }
		if (HX_FIELD_EQ(inName,"premultiply_alpha_normalized") ) { return hx::Val( premultiply_alpha_normalized_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Utils_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { core=inValue.Cast<  ::luxe::Engine >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"random") ) { random=inValue.Cast<  ::luxe::utils::Random >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"geometry") ) { geometry=inValue.Cast<  ::luxe::utils::GeometryUtils >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_byte_levels") ) { _byte_levels=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Utils_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("geometry","\xb2","\x02","\xa9","\xd2"));
	outFields->push(HX_HCSTRING("random","\x03","\x22","\x8f","\xb7"));
	outFields->push(HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"));
	outFields->push(HX_HCSTRING("_byte_levels","\x07","\xd0","\x72","\xd7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Utils_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::utils::GeometryUtils*/ ,(int)offsetof(Utils_obj,geometry),HX_HCSTRING("geometry","\xb2","\x02","\xa9","\xd2")},
	{hx::fsObject /*::luxe::utils::Random*/ ,(int)offsetof(Utils_obj,random),HX_HCSTRING("random","\x03","\x22","\x8f","\xb7")},
	{hx::fsObject /*::luxe::Engine*/ ,(int)offsetof(Utils_obj,core),HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Utils_obj,_byte_levels),HX_HCSTRING("_byte_levels","\x07","\xd0","\x72","\xd7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Utils_obj_sStaticStorageInfo = 0;
#endif

static ::String Utils_obj_sMemberFields[] = {
	HX_HCSTRING("geometry","\xb2","\x02","\xa9","\xd2"),
	HX_HCSTRING("random","\x03","\x22","\x8f","\xb7"),
	HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"),
	HX_HCSTRING("_byte_levels","\x07","\xd0","\x72","\xd7"),
	HX_HCSTRING("pos_info","\x39","\x3e","\xb7","\x01"),
	HX_HCSTRING("uniqueid","\x2c","\x95","\xaa","\x5b"),
	HX_HCSTRING("uniquehash","\x5f","\x1f","\xb0","\x8a"),
	HX_HCSTRING("hash","\xce","\x2f","\x08","\x45"),
	HX_HCSTRING("hashdjb2","\x64","\x49","\x41","\x1d"),
	HX_HCSTRING("uniqueid2","\x86","\xf1","\x97","\xd9"),
	HX_HCSTRING("stacktrace","\x3d","\xc2","\x10","\x96"),
	HX_HCSTRING("path_is_relative","\x27","\x82","\x48","\x45"),
	HX_HCSTRING("find_assets_sequence","\x77","\xf9","\x76","\xfb"),
	HX_HCSTRING("text_wrap_column_knuth_plass","\x86","\x1f","\x54","\xb3"),
	HX_HCSTRING("text_wrap_column","\x19","\x9e","\xb4","\xfc"),
	HX_HCSTRING("bytes_to_string","\x41","\xa2","\x75","\xb9"),
	HX_HCSTRING("array_to_bytes","\x0d","\x12","\xdc","\xc5"),
	HX_HCSTRING("premultiply_alpha","\x26","\x3b","\x49","\xba"),
	HX_HCSTRING("premultiply_alpha_normalized","\xf0","\x1b","\xfe","\xfc"),
	::String(null()) };

static void Utils_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Utils_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Utils_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Utils_obj::__mClass,"__mClass");
};

#endif

hx::Class Utils_obj::__mClass;

void Utils_obj::__register()
{
	hx::Object *dummy = new Utils_obj;
	Utils_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.utils.Utils","\x5c","\x3f","\x34","\xb4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Utils_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Utils_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Utils_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Utils_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Utils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Utils_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace utils
