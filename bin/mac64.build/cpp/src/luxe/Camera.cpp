// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_luxe_Camera
#include <luxe/Camera.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_SizeMode
#include <luxe/SizeMode.h>
#endif
#ifndef INCLUDED_luxe_tween_Actuate
#include <luxe/tween/Actuate.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_IGenericActuator
#include <luxe/tween/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_luxe_tween_easing_IEasing
#include <luxe/tween/easing/IEasing.h>
#endif
#ifndef INCLUDED_luxe_tween_easing_Quad
#include <luxe/tween/easing/Quad.h>
#endif
#ifndef INCLUDED_luxe_utils_GeometryUtils
#include <luxe/utils/GeometryUtils.h>
#endif
#ifndef INCLUDED_luxe_utils_Utils
#include <luxe/utils/Utils.h>
#endif
#ifndef INCLUDED_phoenix_Camera
#include <phoenix/Camera.h>
#endif
#ifndef INCLUDED_phoenix_Quaternion
#include <phoenix/Quaternion.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Spatial
#include <phoenix/Spatial.h>
#endif
#ifndef INCLUDED_phoenix_Transform
#include <phoenix/Transform.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_snow_types_WindowEvent
#include <snow/types/WindowEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_30_new,"luxe.Camera","new",0x2ec87bef,"luxe.Camera.new","luxe/Camera.hx",30,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_98_get_viewport,"luxe.Camera","get_viewport",0xdc75eb00,"luxe.Camera.get_viewport","luxe/Camera.hx",98,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_102_set_viewport,"luxe.Camera","set_viewport",0xf16f0e74,"luxe.Camera.set_viewport","luxe/Camera.hx",102,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_106_get_center,"luxe.Camera","get_center",0xe3d709ef,"luxe.Camera.get_center","luxe/Camera.hx",106,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_109_set_center,"luxe.Camera","set_center",0xe754a863,"luxe.Camera.set_center","luxe/Camera.hx",109,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_117_get_minimum_zoom,"luxe.Camera","get_minimum_zoom",0x56a621fe,"luxe.Camera.get_minimum_zoom","luxe/Camera.hx",117,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_121_set_minimum_zoom,"luxe.Camera","set_minimum_zoom",0xace80f72,"luxe.Camera.set_minimum_zoom","luxe/Camera.hx",121,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_125_get_zoom,"luxe.Camera","get_zoom",0xf17b6cad,"luxe.Camera.get_zoom","luxe/Camera.hx",125,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_128_set_zoom,"luxe.Camera","set_zoom",0x9fd8c621,"luxe.Camera.set_zoom","luxe/Camera.hx",128,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_144_get_size,"luxe.Camera","get_size",0xecd66a5b,"luxe.Camera.get_size","luxe/Camera.hx",144,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_148_get_size_mode,"luxe.Camera","get_size_mode",0xfd951b07,"luxe.Camera.get_size_mode","luxe/Camera.hx",148,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_151_set_size_mode,"luxe.Camera","set_size_mode",0x429afd13,"luxe.Camera.set_size_mode","luxe/Camera.hx",151,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_166__onwindowsized,"luxe.Camera","_onwindowsized",0x6dbb14e6,"luxe.Camera._onwindowsized","luxe/Camera.hx",166,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_174_set_size,"luxe.Camera","set_size",0x9b33c3cf,"luxe.Camera.set_size","luxe/Camera.hx",174,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_239_focus,"luxe.Camera","focus",0x3a2b4d27,"luxe.Camera.focus","luxe/Camera.hx",239,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_234_focus,"luxe.Camera","focus",0x3a2b4d27,"luxe.Camera.focus","luxe/Camera.hx",234,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_247_screen_point_to_world,"luxe.Camera","screen_point_to_world",0x4663cc5f,"luxe.Camera.screen_point_to_world","luxe/Camera.hx",247,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_254_world_point_to_screen,"luxe.Camera","world_point_to_screen",0x46a6e923,"luxe.Camera.world_point_to_screen","luxe/Camera.hx",254,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_259_set_pos_from_transform,"luxe.Camera","set_pos_from_transform",0x5d9e6830,"luxe.Camera.set_pos_from_transform","luxe/Camera.hx",259,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_287_set_rotation_from_transform,"luxe.Camera","set_rotation_from_transform",0xfae455ea,"luxe.Camera.set_rotation_from_transform","luxe/Camera.hx",287,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_297_set_scale_from_transform,"luxe.Camera","set_scale_from_transform",0x39fbfb7a,"luxe.Camera.set_scale_from_transform","luxe/Camera.hx",297,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_308_shake,"luxe.Camera","shake",0xb1becc15,"luxe.Camera.shake","luxe/Camera.hx",308,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_41c62dc8211f2cc6_319_update,"luxe.Camera","update",0x3f133dda,"luxe.Camera.update","luxe/Camera.hx",319,0xd52a0e40)
HX_LOCAL_STACK_FRAME(_hx_pos_a9578d583b418b94_35_init,"luxe.Camera","init",0xbd5caca1,"luxe.Camera.init","luxe/macros/EntityRules.hx",35,0xed942299)
HX_LOCAL_STACK_FRAME(_hx_pos_a9578d583b418b94_47_ondestroy,"luxe.Camera","ondestroy",0xbd23fe8a,"luxe.Camera.ondestroy","luxe/macros/EntityRules.hx",47,0xed942299)
namespace luxe{

void Camera_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_30_new)
HXLINE( 164)		this->_connected = false;
HXLINE(  58)		this->minimum_shake = ((Float)0.1);
HXLINE(  56)		this->shaking = false;
HXLINE(  68)		this->_size_factor =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  69)		this->_rotation_radian =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  70)		this->_rotation_cache =  ::phoenix::Quaternion_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  71)		this->set_size_mode(::luxe::SizeMode_obj::fit_dyn());
HXLINE(  73)		::String _name = HX_("untitled camera",80,f6,97,4f);
HXLINE(  75)		if (hx::IsNotNull( _options )) {
HXLINE(  76)			if (hx::IsNotNull( ( (::String)(_options->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) )) {
HXLINE(  77)				_name = ( (::String)(_options->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXLINE(  78)				_options->__SetField(HX_("camera_name",65,11,29,5d),((HX_("",00,00,00,00) + _name) + HX_(".view",93,e1,bd,ca)),hx::paccDynamic);
            			}
            		}
            		else {
HXLINE(  81)			_options =  ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("no_scene",8e,a7,34,10),false));
            		}
HXLINE(  87)		if (hx::IsNull( ( ( ::phoenix::Camera)(_options->__Field(HX_("view",65,32,4f,4e),hx::paccDynamic)) ) )) {
HXLINE(  87)			_options->__SetField(HX_("view",65,32,4f,4e), ::phoenix::Camera_obj::__alloc( HX_CTX ,_options),hx::paccDynamic);
            		}
HXDLIN(  87)		this->view = ( ( ::phoenix::Camera)(_options->__Field(HX_("view",65,32,4f,4e),hx::paccDynamic)) );
HXLINE(  90)		super::__construct( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("no_scene",8e,a7,34,10), ::Dynamic(_options->__Field(HX_("no_scene",8e,a7,34,10),hx::paccDynamic)))
            			->setFixed(1,HX_("name",4b,72,ff,48),_name)));
            	}

Dynamic Camera_obj::__CreateEmpty() { return new Camera_obj; }

void *Camera_obj::_hx_vtable = 0;

Dynamic Camera_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Camera_obj > _hx_result = new Camera_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Camera_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0bbca018) {
		if (inClassId<=(int)0x099ca90a) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x099ca90a;
		} else {
			return inClassId==(int)0x0bbca018;
		}
	} else {
		return inClassId==(int)0x17ed3881 || inClassId==(int)0x4bfb5f3b;
	}
}

 ::phoenix::Rectangle Camera_obj::get_viewport(){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_98_get_viewport)
HXDLIN(  98)		return this->view->viewport;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,get_viewport,return )

 ::phoenix::Rectangle Camera_obj::set_viewport( ::phoenix::Rectangle _v){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_102_set_viewport)
HXDLIN( 102)		return this->view->set_viewport(_v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_viewport,return )

 ::phoenix::Vector Camera_obj::get_center(){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_106_get_center)
HXDLIN( 106)		return this->view->center;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,get_center,return )

 ::phoenix::Vector Camera_obj::set_center( ::phoenix::Vector _c){
            	HX_GC_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_109_set_center)
HXLINE( 111)		Float _c1 = _c->x;
HXDLIN( 111)		Float _hx_tmp = (_c1 - ((Float)this->get_viewport()->w / (Float)(int)2));
HXDLIN( 111)		Float _c2 = _c->y;
HXDLIN( 111)		this->set_pos( ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,(_c2 - ((Float)this->get_viewport()->h / (Float)(int)2)),null(),null()));
HXLINE( 112)		return this->view->set_center(_c);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_center,return )

Float Camera_obj::get_minimum_zoom(){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_117_get_minimum_zoom)
HXDLIN( 117)		return this->view->minimum_zoom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,get_minimum_zoom,return )

Float Camera_obj::set_minimum_zoom(Float _m){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_121_set_minimum_zoom)
HXDLIN( 121)		return (this->view->minimum_zoom = _m);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_minimum_zoom,return )

Float Camera_obj::get_zoom(){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_125_get_zoom)
HXDLIN( 125)		return this->view->zoom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,get_zoom,return )

Float Camera_obj::set_zoom(Float _z){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_128_set_zoom)
HXLINE( 131)		this->view->set_zoom(_z);
HXLINE( 134)		if (hx::IsNotNull( this->get_size() )) {
HXLINE( 135)			{
HXLINE( 135)				 ::phoenix::Vector _g = this->view->transform->local->scale;
HXDLIN( 135)				{
HXLINE( 135)					Float _g1 = _g->x;
HXDLIN( 135)					Float _x = (_g1 * ((Float)(int)1 / (Float)this->_size_factor->x));
HXDLIN( 135)					_g->x = _x;
HXDLIN( 135)					if (!(_g->_construct)) {
HXLINE( 135)						bool _hx_tmp;
HXDLIN( 135)						if (hx::IsNotNull( _g->listen_x )) {
HXLINE( 135)							_hx_tmp = !(_g->ignore_listeners);
            						}
            						else {
HXLINE( 135)							_hx_tmp = false;
            						}
HXDLIN( 135)						if (_hx_tmp) {
HXLINE( 135)							_g->listen_x(_x);
            						}
            					}
            				}
            			}
HXLINE( 136)			{
HXLINE( 136)				 ::phoenix::Vector _g2 = this->view->transform->local->scale;
HXDLIN( 136)				{
HXLINE( 136)					Float _g3 = _g2->y;
HXDLIN( 136)					Float _y = (_g3 * ((Float)(int)1 / (Float)this->_size_factor->y));
HXDLIN( 136)					_g2->y = _y;
HXDLIN( 136)					if (!(_g2->_construct)) {
HXLINE( 136)						bool _hx_tmp1;
HXDLIN( 136)						if (hx::IsNotNull( _g2->listen_y )) {
HXLINE( 136)							_hx_tmp1 = !(_g2->ignore_listeners);
            						}
            						else {
HXLINE( 136)							_hx_tmp1 = false;
            						}
HXDLIN( 136)						if (_hx_tmp1) {
HXLINE( 136)							_g2->listen_y(_y);
            						}
            					}
            				}
            			}
            		}
HXLINE( 139)		return this->view->zoom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_zoom,return )

 ::phoenix::Vector Camera_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_144_get_size)
HXDLIN( 144)		return this->size;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,get_size,return )

 ::luxe::SizeMode Camera_obj::get_size_mode(){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_148_get_size_mode)
HXDLIN( 148)		return this->size_mode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,get_size_mode,return )

 ::luxe::SizeMode Camera_obj::set_size_mode( ::luxe::SizeMode _m){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_151_set_size_mode)
HXLINE( 153)		if (hx::IsNotNull( this->get_size_mode() )) {
HXLINE( 154)			this->size_mode = _m;
HXLINE( 155)			if (hx::IsNotNull( this->get_size() )) {
HXLINE( 156)				this->set_size(this->get_size());
            			}
            		}
HXLINE( 160)		return (this->size_mode = _m);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_size_mode,return )

void Camera_obj::_onwindowsized( ::snow::types::WindowEvent _event){
            	HX_GC_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_166__onwindowsized)
HXDLIN( 166)		if (hx::IsNotNull( this->get_size() )) {
HXLINE( 169)			Float _hx_tmp = this->get_viewport()->x;
HXDLIN( 169)			this->set_viewport( ::phoenix::Rectangle_obj::__alloc( HX_CTX ,_hx_tmp,this->get_viewport()->y,_event->x,_event->y));
HXLINE( 170)			this->set_size(this->get_size());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,_onwindowsized,(void))

 ::phoenix::Vector Camera_obj::set_size( ::phoenix::Vector _size){
            	HX_GC_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_174_set_size)
HXLINE( 177)		if (hx::IsNull( _size )) {
HXLINE( 178)			Float _hx_tmp = ((Float)this->get_viewport()->w / (Float)(int)2);
HXDLIN( 178)			this->set_center( ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,((Float)this->get_viewport()->h / (Float)(int)2),null(),null()));
HXLINE( 179)			this->size = null();
HXLINE( 180)			{
HXLINE( 180)				 ::phoenix::Vector _this = this->_size_factor;
HXDLIN( 180)				 ::phoenix::Vector _this1 = this->_size_factor;
HXDLIN( 180)				_this1->y = (int)1;
HXDLIN( 180)				Float _x;
HXDLIN( 180)				if (_this1->_construct) {
HXLINE( 180)					_x = _this1->y;
            				}
            				else {
HXLINE( 180)					bool _x1;
HXDLIN( 180)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 180)						_x1 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 180)						_x1 = false;
            					}
HXDLIN( 180)					if (_x1) {
HXLINE( 180)						_this1->listen_y((int)1);
            					}
HXDLIN( 180)					_x = _this1->y;
            				}
HXDLIN( 180)				_this->x = _x;
HXDLIN( 180)				if (!(_this->_construct)) {
HXLINE( 180)					bool _hx_tmp1;
HXDLIN( 180)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 180)						_hx_tmp1 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 180)						_hx_tmp1 = false;
            					}
HXDLIN( 180)					if (_hx_tmp1) {
HXLINE( 180)						_this->listen_x(_x);
            					}
            				}
            			}
HXLINE( 181)			this->set_zoom(this->get_zoom());
HXLINE( 182)			this->_connected = false;
HXLINE( 183)			::Luxe_obj::off((int)31,this->_onwindowsized_dyn());
HXLINE( 184)			return this->get_size();
            		}
HXLINE( 187)		if (!(this->_connected)) {
HXLINE( 188)			::Luxe_obj::on((int)31,this->_onwindowsized_dyn());
HXLINE( 189)			this->_connected = true;
            		}
HXLINE( 196)		Float _ratio_x = ((Float)this->get_viewport()->w / (Float)_size->x);
HXLINE( 197)		Float _ratio_y = ((Float)this->get_viewport()->h / (Float)_size->y);
HXLINE( 198)		Float _shortest = ::Math_obj::max(_ratio_x,_ratio_y);
HXLINE( 199)		Float _longest = ::Math_obj::min(_ratio_x,_ratio_y);
HXLINE( 201)		{
HXLINE( 201)			 ::luxe::SizeMode _g = this->get_size_mode();
HXDLIN( 201)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 204)					_ratio_y = _longest;
HXDLIN( 204)					_ratio_x = _ratio_y;
            				}
            				break;
            				case (int)1: {
HXLINE( 208)					_ratio_y = _shortest;
HXDLIN( 208)					_ratio_x = _ratio_y;
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            			}
            		}
HXLINE( 218)		{
HXLINE( 218)			 ::phoenix::Vector _this2 = this->_size_factor;
HXDLIN( 218)			_this2->x = _ratio_x;
HXDLIN( 218)			if (!(_this2->_construct)) {
HXLINE( 218)				bool _hx_tmp2;
HXDLIN( 218)				if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 218)					_hx_tmp2 = !(_this2->ignore_listeners);
            				}
            				else {
HXLINE( 218)					_hx_tmp2 = false;
            				}
HXDLIN( 218)				if (_hx_tmp2) {
HXLINE( 218)					_this2->listen_x(_ratio_x);
            				}
            			}
            		}
HXLINE( 219)		{
HXLINE( 219)			 ::phoenix::Vector _this3 = this->_size_factor;
HXDLIN( 219)			_this3->y = _ratio_y;
HXDLIN( 219)			if (!(_this3->_construct)) {
HXLINE( 219)				bool _hx_tmp3;
HXDLIN( 219)				if (hx::IsNotNull( _this3->listen_y )) {
HXLINE( 219)					_hx_tmp3 = !(_this3->ignore_listeners);
            				}
            				else {
HXLINE( 219)					_hx_tmp3 = false;
            				}
HXDLIN( 219)				if (_hx_tmp3) {
HXLINE( 219)					_this3->listen_y(_ratio_y);
            				}
            			}
            		}
HXLINE( 221)		{
HXLINE( 221)			 ::phoenix::Vector _this4 = this->view->transform->local->scale;
HXDLIN( 221)			Float _x2 = this->_size_factor->x;
HXDLIN( 221)			Float _x3 = ((Float)(int)1 / (Float)(_x2 * this->get_zoom()));
HXDLIN( 221)			_this4->x = _x3;
HXDLIN( 221)			if (!(_this4->_construct)) {
HXLINE( 221)				bool _hx_tmp4;
HXDLIN( 221)				if (hx::IsNotNull( _this4->listen_x )) {
HXLINE( 221)					_hx_tmp4 = !(_this4->ignore_listeners);
            				}
            				else {
HXLINE( 221)					_hx_tmp4 = false;
            				}
HXDLIN( 221)				if (_hx_tmp4) {
HXLINE( 221)					_this4->listen_x(_x3);
            				}
            			}
            		}
HXLINE( 222)		{
HXLINE( 222)			 ::phoenix::Vector _this5 = this->view->transform->local->scale;
HXDLIN( 222)			Float _y = this->_size_factor->y;
HXDLIN( 222)			Float _y1 = ((Float)(int)1 / (Float)(_y * this->get_zoom()));
HXDLIN( 222)			_this5->y = _y1;
HXDLIN( 222)			if (!(_this5->_construct)) {
HXLINE( 222)				bool _hx_tmp5;
HXDLIN( 222)				if (hx::IsNotNull( _this5->listen_y )) {
HXLINE( 222)					_hx_tmp5 = !(_this5->ignore_listeners);
            				}
            				else {
HXLINE( 222)					_hx_tmp5 = false;
            				}
HXDLIN( 222)				if (_hx_tmp5) {
HXLINE( 222)					_this5->listen_y(_y1);
            				}
            			}
            		}
HXLINE( 225)		Float _hx_tmp6 = ((Float)_size->x / (Float)(int)2);
HXDLIN( 225)		this->set_center( ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp6,((Float)_size->y / (Float)(int)2),null(),null()));
HXLINE( 228)		return (this->size =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_size->x,_size->y,_size->z,_size->w));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,set_size,return )

void Camera_obj::focus( ::phoenix::Vector _p,hx::Null< Float >  __o__t, ::Dynamic _oncomplete){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::luxe::Camera,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_239_focus)
HXLINE( 239)			 ::phoenix::Vector _this = _gthis->get_transform()->local->pos;
HXDLIN( 239)			Float _x = _gthis->view->pos->x;
HXDLIN( 239)			Float _y = _gthis->view->pos->y;
HXDLIN( 239)			bool prev = _this->ignore_listeners;
HXDLIN( 239)			_this->ignore_listeners = true;
HXDLIN( 239)			{
HXLINE( 239)				_this->x = _x;
HXDLIN( 239)				if (!(_this->_construct)) {
HXLINE( 239)					bool _hx_tmp1;
HXDLIN( 239)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 239)						_hx_tmp1 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 239)						_hx_tmp1 = false;
            					}
HXDLIN( 239)					if (_hx_tmp1) {
HXLINE( 239)						_this->listen_x(_x);
            					}
            				}
            			}
HXDLIN( 239)			{
HXLINE( 239)				_this->y = _y;
HXDLIN( 239)				if (!(_this->_construct)) {
HXLINE( 239)					bool _hx_tmp2;
HXDLIN( 239)					if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 239)						_hx_tmp2 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 239)						_hx_tmp2 = false;
            					}
HXDLIN( 239)					if (_hx_tmp2) {
HXLINE( 239)						_this->listen_y(_y);
            					}
            				}
            			}
HXDLIN( 239)			_this->ignore_listeners = prev;
HXDLIN( 239)			bool _hx_tmp3;
HXDLIN( 239)			if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 239)				_hx_tmp3 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 239)				_hx_tmp3 = false;
            			}
HXDLIN( 239)			if (_hx_tmp3) {
HXLINE( 239)				_this->listen_x(_this->x);
            			}
HXDLIN( 239)			bool _hx_tmp4;
HXDLIN( 239)			if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 239)				_hx_tmp4 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 239)				_hx_tmp4 = false;
            			}
HXDLIN( 239)			if (_hx_tmp4) {
HXLINE( 239)				_this->listen_y(_this->y);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

Float _t = __o__t.Default(((Float)0.6));
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_234_focus)
HXDLIN( 234)		 ::luxe::Camera _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 236)		::Dynamic _hx_tmp = ::luxe::tween::actuators::IGenericActuator_obj::onComplete(::luxe::tween::Actuate_obj::tween(this->view->center,_t, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),_p->x)
            			->setFixed(1,HX_("y",79,00,00,00),_p->y)),true,null()),_oncomplete,null());
HXDLIN( 236)		::luxe::tween::actuators::IGenericActuator_obj::onUpdate(::luxe::tween::actuators::IGenericActuator_obj::ease(_hx_tmp,::luxe::tween::easing::Quad_obj::get_easeInOut()), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(Camera_obj,focus,(void))

 ::phoenix::Vector Camera_obj::screen_point_to_world( ::phoenix::Vector _vector){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_247_screen_point_to_world)
HXDLIN( 247)		return this->view->screen_point_to_world(_vector);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,screen_point_to_world,return )

 ::phoenix::Vector Camera_obj::world_point_to_screen( ::phoenix::Vector _vector, ::phoenix::Rectangle _viewport){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_254_world_point_to_screen)
HXDLIN( 254)		return this->view->world_point_to_screen(_vector,_viewport);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Camera_obj,world_point_to_screen,return )

void Camera_obj::set_pos_from_transform( ::phoenix::Vector _pos){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_259_set_pos_from_transform)
HXLINE( 261)		Float _vw = this->view->viewport->w;
HXLINE( 262)		Float _vh = this->view->viewport->h;
HXLINE( 263)		Float _hvw = ((Float)_vw / (Float)(int)2);
HXLINE( 264)		Float _hvh = ((Float)_vh / (Float)(int)2);
HXLINE( 266)		Float _px = _pos->x;
HXLINE( 267)		Float _py = _pos->y;
HXLINE( 269)		if (hx::IsNotNull( this->bounds )) {
HXLINE( 270)			if ((_px < this->bounds->x)) {
HXLINE( 270)				_px = this->bounds->x;
            			}
HXLINE( 271)			if ((_py < this->bounds->y)) {
HXLINE( 271)				_py = this->bounds->y;
            			}
HXLINE( 272)			if (((_px + _hvw) > (this->bounds->w - _vw))) {
HXLINE( 272)				_px = ((this->bounds->w - _vw) - _hvw);
            			}
HXLINE( 273)			if (((_py + _hvh) > (this->bounds->h - _vh))) {
HXLINE( 273)				_py = ((this->bounds->h - _vh) - _hvh);
            			}
            		}
HXLINE( 276)		bool _prev = _pos->ignore_listeners;
HXLINE( 277)		_pos->ignore_listeners = true;
HXLINE( 278)		{
HXLINE( 278)			bool prev = _pos->ignore_listeners;
HXDLIN( 278)			_pos->ignore_listeners = true;
HXDLIN( 278)			{
HXLINE( 278)				_pos->x = _px;
HXDLIN( 278)				if (!(_pos->_construct)) {
HXLINE( 278)					bool _hx_tmp;
HXDLIN( 278)					if (hx::IsNotNull( _pos->listen_x )) {
HXLINE( 278)						_hx_tmp = !(_pos->ignore_listeners);
            					}
            					else {
HXLINE( 278)						_hx_tmp = false;
            					}
HXDLIN( 278)					if (_hx_tmp) {
HXLINE( 278)						_pos->listen_x(_px);
            					}
            				}
            			}
HXDLIN( 278)			{
HXLINE( 278)				_pos->y = _py;
HXDLIN( 278)				if (!(_pos->_construct)) {
HXLINE( 278)					bool _hx_tmp1;
HXDLIN( 278)					if (hx::IsNotNull( _pos->listen_y )) {
HXLINE( 278)						_hx_tmp1 = !(_pos->ignore_listeners);
            					}
            					else {
HXLINE( 278)						_hx_tmp1 = false;
            					}
HXDLIN( 278)					if (_hx_tmp1) {
HXLINE( 278)						_pos->listen_y(_py);
            					}
            				}
            			}
HXDLIN( 278)			_pos->ignore_listeners = prev;
HXDLIN( 278)			bool _hx_tmp2;
HXDLIN( 278)			if (hx::IsNotNull( _pos->listen_x )) {
HXLINE( 278)				_hx_tmp2 = !(_pos->ignore_listeners);
            			}
            			else {
HXLINE( 278)				_hx_tmp2 = false;
            			}
HXDLIN( 278)			if (_hx_tmp2) {
HXLINE( 278)				_pos->listen_x(_pos->x);
            			}
HXDLIN( 278)			bool _hx_tmp3;
HXDLIN( 278)			if (hx::IsNotNull( _pos->listen_y )) {
HXLINE( 278)				_hx_tmp3 = !(_pos->ignore_listeners);
            			}
            			else {
HXLINE( 278)				_hx_tmp3 = false;
            			}
HXDLIN( 278)			if (_hx_tmp3) {
HXLINE( 278)				_pos->listen_y(_pos->y);
            			}
            		}
HXLINE( 279)		_pos->ignore_listeners = _prev;
HXLINE( 281)		this->super::set_pos_from_transform(_pos);
HXLINE( 283)		 ::phoenix::Camera _hx_tmp4 = this->view;
HXDLIN( 283)		 ::phoenix::Vector _this = this->view->pos;
HXDLIN( 283)		Float _x = _pos->x;
HXDLIN( 283)		Float _y = _pos->y;
HXDLIN( 283)		Float _z = _pos->z;
HXDLIN( 283)		bool prev1 = _this->ignore_listeners;
HXDLIN( 283)		_this->ignore_listeners = true;
HXDLIN( 283)		{
HXLINE( 283)			_this->x = _x;
HXDLIN( 283)			if (!(_this->_construct)) {
HXLINE( 283)				bool _hx_tmp5;
HXDLIN( 283)				if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 283)					_hx_tmp5 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 283)					_hx_tmp5 = false;
            				}
HXDLIN( 283)				if (_hx_tmp5) {
HXLINE( 283)					_this->listen_x(_x);
            				}
            			}
            		}
HXDLIN( 283)		{
HXLINE( 283)			_this->y = _y;
HXDLIN( 283)			if (!(_this->_construct)) {
HXLINE( 283)				bool _hx_tmp6;
HXDLIN( 283)				if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 283)					_hx_tmp6 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 283)					_hx_tmp6 = false;
            				}
HXDLIN( 283)				if (_hx_tmp6) {
HXLINE( 283)					_this->listen_y(_y);
            				}
            			}
            		}
HXDLIN( 283)		{
HXLINE( 283)			_this->z = _z;
HXDLIN( 283)			if (!(_this->_construct)) {
HXLINE( 283)				bool _hx_tmp7;
HXDLIN( 283)				if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 283)					_hx_tmp7 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 283)					_hx_tmp7 = false;
            				}
HXDLIN( 283)				if (_hx_tmp7) {
HXLINE( 283)					_this->listen_z(_z);
            				}
            			}
            		}
HXDLIN( 283)		_this->ignore_listeners = prev1;
HXDLIN( 283)		bool _hx_tmp8;
HXDLIN( 283)		if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 283)			_hx_tmp8 = !(_this->ignore_listeners);
            		}
            		else {
HXLINE( 283)			_hx_tmp8 = false;
            		}
HXDLIN( 283)		if (_hx_tmp8) {
HXLINE( 283)			_this->listen_x(_this->x);
            		}
HXDLIN( 283)		bool _hx_tmp9;
HXDLIN( 283)		if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 283)			_hx_tmp9 = !(_this->ignore_listeners);
            		}
            		else {
HXLINE( 283)			_hx_tmp9 = false;
            		}
HXDLIN( 283)		if (_hx_tmp9) {
HXLINE( 283)			_this->listen_y(_this->y);
            		}
HXDLIN( 283)		bool _hx_tmp10;
HXDLIN( 283)		if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 283)			_hx_tmp10 = !(_this->ignore_listeners);
            		}
            		else {
HXLINE( 283)			_hx_tmp10 = false;
            		}
HXDLIN( 283)		if (_hx_tmp10) {
HXLINE( 283)			_this->listen_z(_this->z);
            		}
HXDLIN( 283)		_hx_tmp4->set_pos(_this);
            	}


void Camera_obj::set_rotation_from_transform( ::phoenix::Quaternion _rotation){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_287_set_rotation_from_transform)
HXLINE( 289)		this->super::set_rotation_from_transform(_rotation);
HXLINE( 291)		if (hx::IsNotNull( this->view )) {
HXLINE( 292)			 ::phoenix::Spatial _this = this->view->transform->local;
HXDLIN( 292)			_this->rotation = _rotation;
HXDLIN( 292)			if (hx::IsNotNull( _rotation )) {
HXLINE( 292)				{
HXLINE( 292)					 ::phoenix::Quaternion _q = _this->rotation;
HXDLIN( 292)					 ::Dynamic listener = _this->_rotation_change_dyn();
HXDLIN( 292)					_q->listen_x = listener;
HXDLIN( 292)					_q->listen_y = listener;
HXDLIN( 292)					_q->listen_z = listener;
HXDLIN( 292)					_q->listen_w = listener;
            				}
HXDLIN( 292)				{
HXLINE( 292)					bool _hx_tmp;
HXDLIN( 292)					if (hx::IsNotNull( _this->rotation_changed )) {
HXLINE( 292)						_hx_tmp = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 292)						_hx_tmp = false;
            					}
HXDLIN( 292)					if (_hx_tmp) {
HXLINE( 292)						_this->rotation_changed(_this->rotation);
            					}
            				}
            			}
            		}
            	}


void Camera_obj::set_scale_from_transform( ::phoenix::Vector _scale){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_297_set_scale_from_transform)
HXLINE( 299)		this->super::set_scale_from_transform(_scale);
HXLINE( 301)		if (hx::IsNotNull( this->view )) {
HXLINE( 302)			 ::phoenix::Spatial _this = this->view->transform->local;
HXDLIN( 302)			_this->scale = _scale;
HXDLIN( 302)			if (hx::IsNotNull( _scale )) {
HXLINE( 302)				{
HXLINE( 302)					 ::phoenix::Vector _v = _this->scale;
HXDLIN( 302)					 ::Dynamic listener = _this->_scale_change_dyn();
HXDLIN( 302)					_v->listen_x = listener;
HXDLIN( 302)					_v->listen_y = listener;
HXDLIN( 302)					_v->listen_z = listener;
            				}
HXDLIN( 302)				{
HXLINE( 302)					bool _hx_tmp;
HXDLIN( 302)					if (hx::IsNotNull( _this->scale_changed )) {
HXLINE( 302)						_hx_tmp = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 302)						_hx_tmp = false;
            					}
HXDLIN( 302)					if (_hx_tmp) {
HXLINE( 302)						_this->scale_changed(_this->scale);
            					}
            				}
            			}
            		}
            	}


void Camera_obj::shake(Float _amount){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_308_shake)
HXLINE( 310)		this->shake_amount = _amount;
HXLINE( 311)		this->shaking = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,shake,(void))

void Camera_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_41c62dc8211f2cc6_319_update)
HXDLIN( 319)		if (this->shaking) {
HXLINE( 322)			this->shake_vector = ::Luxe_obj::utils->geometry->random_point_in_unit_circle();
HXLINE( 325)			{
HXLINE( 325)				 ::phoenix::Vector _g = this->shake_vector;
HXDLIN( 325)				{
HXLINE( 325)					Float _x = (_g->x * this->shake_amount);
HXDLIN( 325)					_g->x = _x;
HXDLIN( 325)					if (!(_g->_construct)) {
HXLINE( 325)						bool _hx_tmp;
HXDLIN( 325)						if (hx::IsNotNull( _g->listen_x )) {
HXLINE( 325)							_hx_tmp = !(_g->ignore_listeners);
            						}
            						else {
HXLINE( 325)							_hx_tmp = false;
            						}
HXDLIN( 325)						if (_hx_tmp) {
HXLINE( 325)							_g->listen_x(_x);
            						}
            					}
            				}
            			}
HXLINE( 326)			{
HXLINE( 326)				 ::phoenix::Vector _g1 = this->shake_vector;
HXDLIN( 326)				{
HXLINE( 326)					Float _y = (_g1->y * this->shake_amount);
HXDLIN( 326)					_g1->y = _y;
HXDLIN( 326)					if (!(_g1->_construct)) {
HXLINE( 326)						bool _hx_tmp1;
HXDLIN( 326)						if (hx::IsNotNull( _g1->listen_y )) {
HXLINE( 326)							_hx_tmp1 = !(_g1->ignore_listeners);
            						}
            						else {
HXLINE( 326)							_hx_tmp1 = false;
            						}
HXDLIN( 326)						if (_hx_tmp1) {
HXLINE( 326)							_g1->listen_y(_y);
            						}
            					}
            				}
            			}
HXLINE( 327)			{
HXLINE( 327)				 ::phoenix::Vector _g2 = this->shake_vector;
HXDLIN( 327)				{
HXLINE( 327)					Float _z = (_g2->z * this->shake_amount);
HXDLIN( 327)					_g2->z = _z;
HXDLIN( 327)					if (!(_g2->_construct)) {
HXLINE( 327)						bool _hx_tmp2;
HXDLIN( 327)						if (hx::IsNotNull( _g2->listen_z )) {
HXLINE( 327)							_hx_tmp2 = !(_g2->ignore_listeners);
            						}
            						else {
HXLINE( 327)							_hx_tmp2 = false;
            						}
HXDLIN( 327)						if (_hx_tmp2) {
HXLINE( 327)							_g2->listen_z(_z);
            						}
            					}
            				}
            			}
HXLINE( 330)			 ::luxe::Camera _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 330)			_hx_tmp3->shake_amount = (_hx_tmp3->shake_amount * ((Float)0.9));
HXLINE( 333)			if ((this->shake_amount <= this->minimum_shake)) {
HXLINE( 334)				this->shake_amount = (int)0;
HXLINE( 335)				this->shaking = false;
            			}
HXLINE( 339)			 ::phoenix::Camera _hx_tmp4 = this->view;
HXDLIN( 339)			 ::phoenix::Vector _this = this->view->pos;
HXDLIN( 339)			 ::phoenix::Vector _x1 = this->get_transform()->local->pos;
HXDLIN( 339)			Float _x2 = (_x1->x + this->shake_vector->x);
HXDLIN( 339)			 ::phoenix::Vector _y1 = this->get_transform()->local->pos;
HXDLIN( 339)			Float _y2 = (_y1->y + this->shake_vector->y);
HXDLIN( 339)			 ::phoenix::Vector _z1 = this->get_transform()->local->pos;
HXDLIN( 339)			Float _z2 = (_z1->z + this->shake_vector->z);
HXDLIN( 339)			bool prev = _this->ignore_listeners;
HXDLIN( 339)			_this->ignore_listeners = true;
HXDLIN( 339)			{
HXLINE( 339)				_this->x = _x2;
HXDLIN( 339)				if (!(_this->_construct)) {
HXLINE( 339)					bool _hx_tmp5;
HXDLIN( 339)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 339)						_hx_tmp5 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 339)						_hx_tmp5 = false;
            					}
HXDLIN( 339)					if (_hx_tmp5) {
HXLINE( 339)						_this->listen_x(_x2);
            					}
            				}
            			}
HXDLIN( 339)			{
HXLINE( 339)				_this->y = _y2;
HXDLIN( 339)				if (!(_this->_construct)) {
HXLINE( 339)					bool _hx_tmp6;
HXDLIN( 339)					if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 339)						_hx_tmp6 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 339)						_hx_tmp6 = false;
            					}
HXDLIN( 339)					if (_hx_tmp6) {
HXLINE( 339)						_this->listen_y(_y2);
            					}
            				}
            			}
HXDLIN( 339)			{
HXLINE( 339)				_this->z = _z2;
HXDLIN( 339)				if (!(_this->_construct)) {
HXLINE( 339)					bool _hx_tmp7;
HXDLIN( 339)					if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 339)						_hx_tmp7 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 339)						_hx_tmp7 = false;
            					}
HXDLIN( 339)					if (_hx_tmp7) {
HXLINE( 339)						_this->listen_z(_z2);
            					}
            				}
            			}
HXDLIN( 339)			_this->ignore_listeners = prev;
HXDLIN( 339)			bool _hx_tmp8;
HXDLIN( 339)			if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 339)				_hx_tmp8 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 339)				_hx_tmp8 = false;
            			}
HXDLIN( 339)			if (_hx_tmp8) {
HXLINE( 339)				_this->listen_x(_this->x);
            			}
HXDLIN( 339)			bool _hx_tmp9;
HXDLIN( 339)			if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 339)				_hx_tmp9 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 339)				_hx_tmp9 = false;
            			}
HXDLIN( 339)			if (_hx_tmp9) {
HXLINE( 339)				_this->listen_y(_this->y);
            			}
HXDLIN( 339)			bool _hx_tmp10;
HXDLIN( 339)			if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 339)				_hx_tmp10 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 339)				_hx_tmp10 = false;
            			}
HXDLIN( 339)			if (_hx_tmp10) {
HXLINE( 339)				_this->listen_z(_this->z);
            			}
HXDLIN( 339)			_hx_tmp4->set_pos(_this);
            		}
            	}


void Camera_obj::init(){
            	HX_STACKFRAME(&_hx_pos_a9578d583b418b94_35_init)
HXDLIN(  35)		this->super::init();
            	}


void Camera_obj::ondestroy(){
            	HX_STACKFRAME(&_hx_pos_a9578d583b418b94_47_ondestroy)
HXDLIN(  47)		this->super::ondestroy();
            	}



hx::ObjectPtr< Camera_obj > Camera_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< Camera_obj > __this = new Camera_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< Camera_obj > Camera_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	Camera_obj *__this = (Camera_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Camera_obj), true, "luxe.Camera"));
	*(void **)__this = Camera_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

Camera_obj::Camera_obj()
{
}

void Camera_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Camera);
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(size_mode,"size_mode");
	HX_MARK_MEMBER_NAME(view,"view");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(shake_vector,"shake_vector");
	HX_MARK_MEMBER_NAME(shake_amount,"shake_amount");
	HX_MARK_MEMBER_NAME(shaking,"shaking");
	HX_MARK_MEMBER_NAME(minimum_shake,"minimum_shake");
	HX_MARK_MEMBER_NAME(_size_factor,"_size_factor");
	HX_MARK_MEMBER_NAME(_rotation_radian,"_rotation_radian");
	HX_MARK_MEMBER_NAME(_rotation_cache,"_rotation_cache");
	HX_MARK_MEMBER_NAME(_connected,"_connected");
	 ::luxe::Entity_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Camera_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(size_mode,"size_mode");
	HX_VISIT_MEMBER_NAME(view,"view");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(shake_vector,"shake_vector");
	HX_VISIT_MEMBER_NAME(shake_amount,"shake_amount");
	HX_VISIT_MEMBER_NAME(shaking,"shaking");
	HX_VISIT_MEMBER_NAME(minimum_shake,"minimum_shake");
	HX_VISIT_MEMBER_NAME(_size_factor,"_size_factor");
	HX_VISIT_MEMBER_NAME(_rotation_radian,"_rotation_radian");
	HX_VISIT_MEMBER_NAME(_rotation_cache,"_rotation_cache");
	HX_VISIT_MEMBER_NAME(_connected,"_connected");
	 ::luxe::Entity_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Camera_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_zoom() ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( inCallProp == hx::paccAlways ? get_size() : size ); }
		if (HX_FIELD_EQ(inName,"view") ) { return hx::Val( view ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { return hx::Val( focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"shake") ) { return hx::Val( shake_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"center") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_center() ); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"shaking") ) { return hx::Val( shaking ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"viewport") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_viewport() ); }
		if (HX_FIELD_EQ(inName,"get_zoom") ) { return hx::Val( get_zoom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_zoom") ) { return hx::Val( set_zoom_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"size_mode") ) { return hx::Val( inCallProp == hx::paccAlways ? get_size_mode() : size_mode ); }
		if (HX_FIELD_EQ(inName,"ondestroy") ) { return hx::Val( ondestroy_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_center") ) { return hx::Val( get_center_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_center") ) { return hx::Val( set_center_dyn() ); }
		if (HX_FIELD_EQ(inName,"_connected") ) { return hx::Val( _connected ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"minimum_zoom") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_minimum_zoom() ); }
		if (HX_FIELD_EQ(inName,"shake_vector") ) { return hx::Val( shake_vector ); }
		if (HX_FIELD_EQ(inName,"shake_amount") ) { return hx::Val( shake_amount ); }
		if (HX_FIELD_EQ(inName,"_size_factor") ) { return hx::Val( _size_factor ); }
		if (HX_FIELD_EQ(inName,"get_viewport") ) { return hx::Val( get_viewport_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_viewport") ) { return hx::Val( set_viewport_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"minimum_shake") ) { return hx::Val( minimum_shake ); }
		if (HX_FIELD_EQ(inName,"get_size_mode") ) { return hx::Val( get_size_mode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size_mode") ) { return hx::Val( set_size_mode_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_onwindowsized") ) { return hx::Val( _onwindowsized_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_rotation_cache") ) { return hx::Val( _rotation_cache ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_rotation_radian") ) { return hx::Val( _rotation_radian ); }
		if (HX_FIELD_EQ(inName,"get_minimum_zoom") ) { return hx::Val( get_minimum_zoom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_minimum_zoom") ) { return hx::Val( set_minimum_zoom_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"screen_point_to_world") ) { return hx::Val( screen_point_to_world_dyn() ); }
		if (HX_FIELD_EQ(inName,"world_point_to_screen") ) { return hx::Val( world_point_to_screen_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"set_pos_from_transform") ) { return hx::Val( set_pos_from_transform_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"set_scale_from_transform") ) { return hx::Val( set_scale_from_transform_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"set_rotation_from_transform") ) { return hx::Val( set_rotation_from_transform_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Camera_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_zoom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size(inValue.Cast<  ::phoenix::Vector >()) );size=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"view") ) { view=inValue.Cast<  ::phoenix::Camera >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"center") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_center(inValue.Cast<  ::phoenix::Vector >()) ); }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::phoenix::Rectangle >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"shaking") ) { shaking=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"viewport") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_viewport(inValue.Cast<  ::phoenix::Rectangle >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"size_mode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size_mode(inValue.Cast<  ::luxe::SizeMode >()) );size_mode=inValue.Cast<  ::luxe::SizeMode >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_connected") ) { _connected=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"minimum_zoom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_minimum_zoom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"shake_vector") ) { shake_vector=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shake_amount") ) { shake_amount=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_size_factor") ) { _size_factor=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"minimum_shake") ) { minimum_shake=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_rotation_cache") ) { _rotation_cache=inValue.Cast<  ::phoenix::Quaternion >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_rotation_radian") ) { _rotation_radian=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Camera_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("viewport","\x66","\x4c","\xa5","\x9c"));
	outFields->push(HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"));
	outFields->push(HX_HCSTRING("zoom","\x13","\xa3","\xf8","\x50"));
	outFields->push(HX_HCSTRING("minimum_zoom","\x64","\x2e","\x79","\xf3"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("size_mode","\xe1","\xf2","\xda","\x66"));
	outFields->push(HX_HCSTRING("view","\x65","\x32","\x4f","\x4e"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("shake_vector","\x5c","\xe8","\x33","\x81"));
	outFields->push(HX_HCSTRING("shake_amount","\x71","\x49","\xd9","\xbe"));
	outFields->push(HX_HCSTRING("shaking","\x83","\x05","\x2a","\x64"));
	outFields->push(HX_HCSTRING("minimum_shake","\x55","\x3a","\x16","\x0a"));
	outFields->push(HX_HCSTRING("_size_factor","\xce","\xc1","\xf6","\x92"));
	outFields->push(HX_HCSTRING("_rotation_radian","\x83","\x19","\xf0","\x9d"));
	outFields->push(HX_HCSTRING("_rotation_cache","\xe0","\xe9","\xe0","\x66"));
	outFields->push(HX_HCSTRING("_connected","\x8a","\x5e","\x99","\xfe"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Camera_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Camera_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{hx::fsObject /*::luxe::SizeMode*/ ,(int)offsetof(Camera_obj,size_mode),HX_HCSTRING("size_mode","\xe1","\xf2","\xda","\x66")},
	{hx::fsObject /*::phoenix::Camera*/ ,(int)offsetof(Camera_obj,view),HX_HCSTRING("view","\x65","\x32","\x4f","\x4e")},
	{hx::fsObject /*::phoenix::Rectangle*/ ,(int)offsetof(Camera_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Camera_obj,shake_vector),HX_HCSTRING("shake_vector","\x5c","\xe8","\x33","\x81")},
	{hx::fsFloat,(int)offsetof(Camera_obj,shake_amount),HX_HCSTRING("shake_amount","\x71","\x49","\xd9","\xbe")},
	{hx::fsBool,(int)offsetof(Camera_obj,shaking),HX_HCSTRING("shaking","\x83","\x05","\x2a","\x64")},
	{hx::fsFloat,(int)offsetof(Camera_obj,minimum_shake),HX_HCSTRING("minimum_shake","\x55","\x3a","\x16","\x0a")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Camera_obj,_size_factor),HX_HCSTRING("_size_factor","\xce","\xc1","\xf6","\x92")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Camera_obj,_rotation_radian),HX_HCSTRING("_rotation_radian","\x83","\x19","\xf0","\x9d")},
	{hx::fsObject /*::phoenix::Quaternion*/ ,(int)offsetof(Camera_obj,_rotation_cache),HX_HCSTRING("_rotation_cache","\xe0","\xe9","\xe0","\x66")},
	{hx::fsBool,(int)offsetof(Camera_obj,_connected),HX_HCSTRING("_connected","\x8a","\x5e","\x99","\xfe")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Camera_obj_sStaticStorageInfo = 0;
#endif

static ::String Camera_obj_sMemberFields[] = {
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("size_mode","\xe1","\xf2","\xda","\x66"),
	HX_HCSTRING("view","\x65","\x32","\x4f","\x4e"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("shake_vector","\x5c","\xe8","\x33","\x81"),
	HX_HCSTRING("shake_amount","\x71","\x49","\xd9","\xbe"),
	HX_HCSTRING("shaking","\x83","\x05","\x2a","\x64"),
	HX_HCSTRING("minimum_shake","\x55","\x3a","\x16","\x0a"),
	HX_HCSTRING("_size_factor","\xce","\xc1","\xf6","\x92"),
	HX_HCSTRING("_rotation_radian","\x83","\x19","\xf0","\x9d"),
	HX_HCSTRING("_rotation_cache","\xe0","\xe9","\xe0","\x66"),
	HX_HCSTRING("get_viewport","\x6f","\x00","\xbf","\x51"),
	HX_HCSTRING("set_viewport","\xe3","\x23","\xb8","\x66"),
	HX_HCSTRING("get_center","\x9e","\x95","\x62","\xf6"),
	HX_HCSTRING("set_center","\x12","\x34","\xe0","\xf9"),
	HX_HCSTRING("get_minimum_zoom","\xed","\x1a","\x18","\xf8"),
	HX_HCSTRING("set_minimum_zoom","\x61","\x08","\x5a","\x4e"),
	HX_HCSTRING("get_zoom","\x9c","\x5e","\xb3","\xd0"),
	HX_HCSTRING("set_zoom","\x10","\xb8","\x10","\x7f"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("get_size_mode","\xb8","\xc6","\x3e","\x28"),
	HX_HCSTRING("set_size_mode","\xc4","\xa8","\x44","\x6d"),
	HX_HCSTRING("_connected","\x8a","\x5e","\x99","\xfe"),
	HX_HCSTRING("_onwindowsized","\x15","\xa4","\x87","\x97"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04"),
	HX_HCSTRING("screen_point_to_world","\x10","\x11","\x1a","\xdc"),
	HX_HCSTRING("world_point_to_screen","\xd4","\x2d","\x5d","\xdc"),
	HX_HCSTRING("set_pos_from_transform","\x5f","\x3e","\x64","\xc7"),
	HX_HCSTRING("set_rotation_from_transform","\x5b","\xb5","\xfc","\x30"),
	HX_HCSTRING("set_scale_from_transform","\x69","\xfb","\x86","\x01"),
	HX_HCSTRING("shake","\xc6","\xde","\x1c","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("ondestroy","\xbb","\xbd","\xdf","\x2e"),
	::String(null()) };

static void Camera_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Camera_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Camera_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Camera_obj::__mClass,"__mClass");
};

#endif

hx::Class Camera_obj::__mClass;

void Camera_obj::__register()
{
	hx::Object *dummy = new Camera_obj;
	Camera_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Camera","\x7d","\x58","\xea","\x16");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Camera_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Camera_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Camera_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Camera_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Camera_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Camera_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
