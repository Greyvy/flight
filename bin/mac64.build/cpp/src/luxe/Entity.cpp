// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_luxe_Component
#include <luxe/Component.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_Events
#include <luxe/Events.h>
#endif
#ifndef INCLUDED_luxe_GamepadEvent
#include <luxe/GamepadEvent.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_InputEvent
#include <luxe/InputEvent.h>
#endif
#ifndef INCLUDED_luxe_KeyEvent
#include <luxe/KeyEvent.h>
#endif
#ifndef INCLUDED_luxe_MouseEvent
#include <luxe/MouseEvent.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Scene
#include <luxe/Scene.h>
#endif
#ifndef INCLUDED_luxe_TextEvent
#include <luxe/TextEvent.h>
#endif
#ifndef INCLUDED_luxe_TouchEvent
#include <luxe/TouchEvent.h>
#endif
#ifndef INCLUDED_luxe_components_Components
#include <luxe/components/Components.h>
#endif
#ifndef INCLUDED_luxe_structural_OrderedMap_String_luxe_Component
#include <luxe/structural/OrderedMap_String_luxe_Component.h>
#endif
#ifndef INCLUDED_phoenix_Quaternion
#include <phoenix/Quaternion.h>
#endif
#ifndef INCLUDED_phoenix_Spatial
#include <phoenix/Spatial.h>
#endif
#ifndef INCLUDED_phoenix_Transform
#include <phoenix/Transform.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_snow_api_Timer
#include <snow/api/Timer.h>
#endif
#ifndef INCLUDED_snow_types_WindowEvent
#include <snow/types/WindowEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f96bc7d58685410e_22_new,"luxe.Entity","new",0x3aab5f6d,"luxe.Entity.new","luxe/Entity.hx",22,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_73_init,"luxe.Entity","init",0x1800d763,"luxe.Entity.init","luxe/Entity.hx",73,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_75_update,"luxe.Entity","update",0xab291d1c,"luxe.Entity.update","luxe/Entity.hx",75,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_77_onfixedupdate,"luxe.Entity","onfixedupdate",0xe3a5550b,"luxe.Entity.onfixedupdate","luxe/Entity.hx",77,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_80_onreset,"luxe.Entity","onreset",0x64d911dd,"luxe.Entity.onreset","luxe/Entity.hx",80,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_82_ondestroy,"luxe.Entity","ondestroy",0xde639488,"luxe.Entity.ondestroy","luxe/Entity.hx",82,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_85_onkeyup,"luxe.Entity","onkeyup",0x5d0f9dc8,"luxe.Entity.onkeyup","luxe/Entity.hx",85,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_87_onkeydown,"luxe.Entity","onkeydown",0x6b4ba50f,"luxe.Entity.onkeydown","luxe/Entity.hx",87,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_89_ontextinput,"luxe.Entity","ontextinput",0xbd8ecb4b,"luxe.Entity.ontextinput","luxe/Entity.hx",89,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_92_oninputdown,"luxe.Entity","oninputdown",0x1870707a,"luxe.Entity.oninputdown","luxe/Entity.hx",92,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_94_oninputup,"luxe.Entity","oninputup",0x8dfc2873,"luxe.Entity.oninputup","luxe/Entity.hx",94,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_97_onmousedown,"luxe.Entity","onmousedown",0xfd9a6c15,"luxe.Entity.onmousedown","luxe/Entity.hx",97,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_99_onmouseup,"luxe.Entity","onmouseup",0x7a50774e,"luxe.Entity.onmouseup","luxe/Entity.hx",99,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_101_onmousemove,"luxe.Entity","onmousemove",0x038d56c4,"luxe.Entity.onmousemove","luxe/Entity.hx",101,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_103_onmousewheel,"luxe.Entity","onmousewheel",0xd572fd88,"luxe.Entity.onmousewheel","luxe/Entity.hx",103,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_106_ontouchdown,"luxe.Entity","ontouchdown",0x16b242af,"luxe.Entity.ontouchdown","luxe/Entity.hx",106,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_108_ontouchup,"luxe.Entity","ontouchup",0x92d59368,"luxe.Entity.ontouchup","luxe/Entity.hx",108,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_110_ontouchmove,"luxe.Entity","ontouchmove",0x1ca52d5e,"luxe.Entity.ontouchmove","luxe/Entity.hx",110,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_113_ongamepadup,"luxe.Entity","ongamepadup",0x58e9584a,"luxe.Entity.ongamepadup","luxe/Entity.hx",113,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_115_ongamepaddown,"luxe.Entity","ongamepaddown",0x5cea8411,"luxe.Entity.ongamepaddown","luxe/Entity.hx",115,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_117_ongamepadaxis,"luxe.Entity","ongamepadaxis",0x5af5a850,"luxe.Entity.ongamepadaxis","luxe/Entity.hx",117,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_119_ongamepaddevice,"luxe.Entity","ongamepaddevice",0x8cf1f205,"luxe.Entity.ongamepaddevice","luxe/Entity.hx",119,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_122_onwindowmoved,"luxe.Entity","onwindowmoved",0xdf0e38d1,"luxe.Entity.onwindowmoved","luxe/Entity.hx",122,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_124_onwindowresized,"luxe.Entity","onwindowresized",0x8286ac0e,"luxe.Entity.onwindowresized","luxe/Entity.hx",124,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_126_onwindowsized,"luxe.Entity","onwindowsized",0x4f817521,"luxe.Entity.onwindowsized","luxe/Entity.hx",126,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_128_onwindowminimized,"luxe.Entity","onwindowminimized",0xaf3c0f24,"luxe.Entity.onwindowminimized","luxe/Entity.hx",128,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_130_onwindowrestored,"luxe.Entity","onwindowrestored",0x017cc778,"luxe.Entity.onwindowrestored","luxe/Entity.hx",130,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_251_add,"luxe.Entity","add",0x3aa1812e,"luxe.Entity.add","luxe/Entity.hx",251,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_257_remove,"luxe.Entity","remove",0x28ac3357,"luxe.Entity.remove","luxe/Entity.hx",257,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_264_get,"luxe.Entity","get",0x3aa60fa3,"luxe.Entity.get","luxe/Entity.hx",264,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_269_get_any,"luxe.Entity","get_any",0xa1bf5d10,"luxe.Entity.get_any","luxe/Entity.hx",269,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_274_has,"luxe.Entity","has",0x3aa6ce67,"luxe.Entity.has","luxe/Entity.hx",274,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_282__init,"luxe.Entity","_init",0x236f833c,"luxe.Entity._init","luxe/Entity.hx",282,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_316__reset,"luxe.Entity","_reset",0x06d32823,"luxe.Entity._reset","luxe/Entity.hx",316,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_349_destroy,"luxe.Entity","destroy",0x9f86c687,"luxe.Entity.destroy","luxe/Entity.hx",349,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_423__update,"luxe.Entity","_update",0x707d3135,"luxe.Entity._update","luxe/Entity.hx",423,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_466__fixed_update,"luxe.Entity","_fixed_update",0x8f91c8e0,"luxe.Entity._fixed_update","luxe/Entity.hx",466,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_498__find_emit_source,"luxe.Entity","_find_emit_source",0x482d2e6d,"luxe.Entity._find_emit_source","luxe/Entity.hx",498,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_549__listen,"luxe.Entity","_listen",0xd9717373,"luxe.Entity._listen","luxe/Entity.hx",549,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_605__unlisten,"luxe.Entity","_unlisten",0xe95ac58c,"luxe.Entity._unlisten","luxe/Entity.hx",605,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_655__detach_scene,"luxe.Entity","_detach_scene",0xe66c124c,"luxe.Entity._detach_scene","luxe/Entity.hx",655,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_689__attach_scene,"luxe.Entity","_attach_scene",0xae36123e,"luxe.Entity._attach_scene","luxe/Entity.hx",689,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_698__keyup,"luxe.Entity","_keyup",0xff09b40e,"luxe.Entity._keyup","luxe/Entity.hx",698,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_711__keydown,"luxe.Entity","_keydown",0x10ac58d5,"luxe.Entity._keydown","luxe/Entity.hx",711,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_724__textinput,"luxe.Entity","_textinput",0x03587c91,"luxe.Entity._textinput","luxe/Entity.hx",724,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_740__mousedown,"luxe.Entity","_mousedown",0x43641d5b,"luxe.Entity._mousedown","luxe/Entity.hx",740,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_754__mouseup,"luxe.Entity","_mouseup",0x1fb12b14,"luxe.Entity._mouseup","luxe/Entity.hx",754,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_767__mousewheel,"luxe.Entity","_mousewheel",0xa0246982,"luxe.Entity._mousewheel","luxe/Entity.hx",767,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_780__mousemove,"luxe.Entity","_mousemove",0x4957080a,"luxe.Entity._mousemove","luxe/Entity.hx",780,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_794__touchdown,"luxe.Entity","_touchdown",0x5c7bf3f5,"luxe.Entity._touchdown","luxe/Entity.hx",794,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_807__touchup,"luxe.Entity","_touchup",0x3836472e,"luxe.Entity._touchup","luxe/Entity.hx",807,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_820__touchmove,"luxe.Entity","_touchmove",0x626edea4,"luxe.Entity._touchmove","luxe/Entity.hx",820,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_834__gamepadaxis,"luxe.Entity","_gamepadaxis",0xeb82b716,"luxe.Entity._gamepadaxis","luxe/Entity.hx",834,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_847__gamepaddown,"luxe.Entity","_gamepaddown",0xed7792d7,"luxe.Entity._gamepaddown","luxe/Entity.hx",847,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_860__gamepadup,"luxe.Entity","_gamepadup",0x9eb30990,"luxe.Entity._gamepadup","luxe/Entity.hx",860,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_873__gamepaddevice,"luxe.Entity","_gamepaddevice",0x25f4be4b,"luxe.Entity._gamepaddevice","luxe/Entity.hx",873,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_888__windowmoved,"luxe.Entity","_windowmoved",0x6f9b4797,"luxe.Entity._windowmoved","luxe/Entity.hx",888,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_901__windowresized,"luxe.Entity","_windowresized",0x1b897854,"luxe.Entity._windowresized","luxe/Entity.hx",901,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_914__windowsized,"luxe.Entity","_windowsized",0xe00e83e7,"luxe.Entity._windowsized","luxe/Entity.hx",914,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_927__windowminimized,"luxe.Entity","_windowminimized",0xa7bef8ea,"luxe.Entity._windowminimized","luxe/Entity.hx",927,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_940__windowrestored,"luxe.Entity","_windowrestored",0x4aecb872,"luxe.Entity._windowrestored","luxe/Entity.hx",940,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_955__inputdown,"luxe.Entity","_inputdown",0x5e3a21c0,"luxe.Entity._inputdown","luxe/Entity.hx",955,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_968__inputup,"luxe.Entity","_inputup",0x335cdc39,"luxe.Entity._inputup","luxe/Entity.hx",968,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_986_get_fixed_rate,"luxe.Entity","get_fixed_rate",0x56a59b27,"luxe.Entity.get_fixed_rate","luxe/Entity.hx",986,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_990_set_fixed_rate,"luxe.Entity","set_fixed_rate",0x76c5839b,"luxe.Entity.set_fixed_rate","luxe/Entity.hx",990,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1004__stop_fixed_rate_timer,"luxe.Entity","_stop_fixed_rate_timer",0xf4198482,"luxe.Entity._stop_fixed_rate_timer","luxe/Entity.hx",1004,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1011__set_fixed_rate_timer,"luxe.Entity","_set_fixed_rate_timer",0x33475eba,"luxe.Entity._set_fixed_rate_timer","luxe/Entity.hx",1011,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1028_get_components,"luxe.Entity","get_components",0x5c119f72,"luxe.Entity.get_components","luxe/Entity.hx",1028,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1034__add_child,"luxe.Entity","_add_child",0x04ab4a12,"luxe.Entity._add_child","luxe/Entity.hx",1034,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1064__remove_child,"luxe.Entity","_remove_child",0x54f46c4d,"luxe.Entity._remove_child","luxe/Entity.hx",1064,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1073_set_pos_from_transform,"luxe.Entity","set_pos_from_transform",0x2a7e6b72,"luxe.Entity.set_pos_from_transform","luxe/Entity.hx",1073,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1084_set_rotation_from_transform,"luxe.Entity","set_rotation_from_transform",0xf7a74368,"luxe.Entity.set_rotation_from_transform","luxe/Entity.hx",1084,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1095_set_scale_from_transform,"luxe.Entity","set_scale_from_transform",0x0154d33c,"luxe.Entity.set_scale_from_transform","luxe/Entity.hx",1095,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1106_set_origin_from_transform,"luxe.Entity","set_origin_from_transform",0x1a1cb7c0,"luxe.Entity.set_origin_from_transform","luxe/Entity.hx",1106,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1117_set_parent_from_transform,"luxe.Entity","set_parent_from_transform",0xc1ab18fc,"luxe.Entity.set_parent_from_transform","luxe/Entity.hx",1117,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1129_set_pos,"luxe.Entity","set_pos",0x94cc50c4,"luxe.Entity.set_pos","luxe/Entity.hx",1129,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1135_get_pos,"luxe.Entity","get_pos",0xa1cabfb8,"luxe.Entity.get_pos","luxe/Entity.hx",1135,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1143_set_rotation,"luxe.Entity","set_rotation",0x721fbc0e,"luxe.Entity.set_rotation","luxe/Entity.hx",1143,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1149_get_rotation,"luxe.Entity","get_rotation",0x5d26989a,"luxe.Entity.get_rotation","luxe/Entity.hx",1149,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1157_set_scale,"luxe.Entity","set_scale",0x4f4cedba,"luxe.Entity.set_scale","luxe/Entity.hx",1157,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1163_get_scale,"luxe.Entity","get_scale",0x6bfc01ae,"luxe.Entity.get_scale","luxe/Entity.hx",1163,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1171_set_origin,"luxe.Entity","set_origin",0x22de44b6,"luxe.Entity.set_origin","luxe/Entity.hx",1171,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1178_get_origin,"luxe.Entity","get_origin",0x1f60a642,"luxe.Entity.get_origin","luxe/Entity.hx",1178,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1186_set_transform,"luxe.Entity","set_transform",0x4248a49c,"luxe.Entity.set_transform","luxe/Entity.hx",1186,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1193_get_transform,"luxe.Entity","get_transform",0xfd42c290,"luxe.Entity.get_transform","luxe/Entity.hx",1193,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1199_set_parent,"luxe.Entity","set_parent",0xc55b2ffa,"luxe.Entity.set_parent","luxe/Entity.hx",1199,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1230_get_parent,"luxe.Entity","get_parent",0xc1dd9186,"luxe.Entity.get_parent","luxe/Entity.hx",1230,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1236_set_scene,"luxe.Entity","set_scene",0x4f4ff87c,"luxe.Entity.set_scene","luxe/Entity.hx",1236,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1250_get_scene,"luxe.Entity","get_scene",0x6bff0c70,"luxe.Entity.get_scene","luxe/Entity.hx",1250,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1254_set_scene_root,"luxe.Entity","set_scene_root",0xe6cdd005,"luxe.Entity.set_scene_root","luxe/Entity.hx",1254,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1268_set_name,"luxe.Entity","set_name",0x9c9d491b,"luxe.Entity.set_name","luxe/Entity.hx",1268,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1287_set_active,"luxe.Entity","set_active",0xee236c96,"luxe.Entity.set_active","luxe/Entity.hx",1287,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1293_get_active,"luxe.Entity","get_active",0xeaa5ce22,"luxe.Entity.get_active","luxe/Entity.hx",1293,0x55caa482)
HX_LOCAL_STACK_FRAME(_hx_pos_f96bc7d58685410e_1299_toString,"luxe.Entity","toString",0x5df4927f,"luxe.Entity.toString","luxe/Entity.hx",1299,0x55caa482)
namespace luxe{

void Entity_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_f96bc7d58685410e_22_new)
HXLINE( 250)		this->component_count = (int)0;
HXLINE(  45)		this->active = true;
HXLINE(  39)		this->fixed_rate = ((Float)0);
HXLINE(  36)		this->started = false;
HXLINE(  34)		this->inited = false;
HXLINE(  32)		this->destroyed = false;
HXLINE( 136)		super::__construct(HX_("entity",23,13,1c,05),null());
HXLINE( 139)		{
HXLINE( 139)			 ::luxe::Entity _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 139)			::String _hx_tmp = _g->get_name();
HXDLIN( 139)			_g->set_name((_hx_tmp + (HX_(".",2e,00,00,00) + this->get_id())));
            		}
HXLINE( 141)		this->options = _options;
HXLINE( 145)		this->_components =  ::luxe::components::Components_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 146)		this->children = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 147)		this->events =  ::luxe::Events_obj::__alloc( HX_CTX );
HXLINE( 149)		bool _hx_tmp1;
HXDLIN( 149)		if (hx::IsNotNull( this->options )) {
HXLINE( 149)			_hx_tmp1 = hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("transform",6c,2d,93,45),hx::paccDynamic)) );
            		}
            		else {
HXLINE( 149)			_hx_tmp1 = false;
            		}
HXDLIN( 149)		if (_hx_tmp1) {
HXLINE( 150)			this->set_transform(( ( ::phoenix::Transform)(this->options->__Field(HX_("transform",6c,2d,93,45),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 152)			this->set_transform( ::phoenix::Transform_obj::__alloc( HX_CTX ));
            		}
HXLINE( 156)		{
HXLINE( 156)			 ::phoenix::Transform _this = this->get_transform();
HXDLIN( 156)			if (hx::IsNull( _this->_pos_handlers )) {
HXLINE( 156)				_this->_pos_handlers = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXDLIN( 156)			_this->_pos_handlers->push(this->set_pos_from_transform_dyn());
            		}
HXLINE( 157)		{
HXLINE( 157)			 ::phoenix::Transform _this1 = this->get_transform();
HXDLIN( 157)			if (hx::IsNull( _this1->_scale_handlers )) {
HXLINE( 157)				_this1->_scale_handlers = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXDLIN( 157)			_this1->_scale_handlers->push(this->set_scale_from_transform_dyn());
            		}
HXLINE( 158)		{
HXLINE( 158)			 ::phoenix::Transform _this2 = this->get_transform();
HXDLIN( 158)			if (hx::IsNull( _this2->_origin_handlers )) {
HXLINE( 158)				_this2->_origin_handlers = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXDLIN( 158)			_this2->_origin_handlers->push(this->set_origin_from_transform_dyn());
            		}
HXLINE( 159)		{
HXLINE( 159)			 ::phoenix::Transform _this3 = this->get_transform();
HXDLIN( 159)			if (hx::IsNull( _this3->_parent_handlers )) {
HXLINE( 159)				_this3->_parent_handlers = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXDLIN( 159)			_this3->_parent_handlers->push(this->set_parent_from_transform_dyn());
            		}
HXLINE( 160)		{
HXLINE( 160)			 ::phoenix::Transform _this4 = this->get_transform();
HXDLIN( 160)			if (hx::IsNull( _this4->_rotation_handlers )) {
HXLINE( 160)				_this4->_rotation_handlers = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXDLIN( 160)			_this4->_rotation_handlers->push(this->set_rotation_from_transform_dyn());
            		}
HXLINE( 162)		if (hx::IsNotNull( this->options )) {
HXLINE( 166)			if (hx::IsNull(  ::Dynamic(this->options->__Field(HX_("name_unique",c5,e1,83,6f),hx::paccDynamic)) )) {
HXLINE( 166)				this->options->__SetField(HX_("name_unique",c5,e1,83,6f),false,hx::paccDynamic);
            			}
HXLINE( 168)			if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) )) {
HXLINE( 169)				this->set_name(( (::String)(this->options->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ));
HXLINE( 170)				if (( (bool)(this->options->__Field(HX_("name_unique",c5,e1,83,6f),hx::paccDynamic)) )) {
HXLINE( 171)					 ::luxe::Entity _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 171)					::String _hx_tmp2 = _g1->get_name();
HXDLIN( 171)					_g1->set_name((_hx_tmp2 + (HX_(".",2e,00,00,00) + this->get_id())));
            				}
            			}
HXLINE( 176)			if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) )) {
HXLINE( 177)				 ::phoenix::Vector _op = ( ( ::phoenix::Vector)(this->options->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXLINE( 178)				this->set_pos( ::phoenix::Vector_obj::__alloc( HX_CTX ,_op->x,_op->y,_op->z,_op->w));
            			}
HXLINE( 181)			if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)) )) {
HXLINE( 182)				 ::phoenix::Vector _os = ( ( ::phoenix::Vector)(this->options->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)) );
HXLINE( 183)				this->set_scale( ::phoenix::Vector_obj::__alloc( HX_CTX ,_os->x,_os->y,_os->z,_os->w));
            			}
HXLINE( 190)			bool _should_add = true;
HXLINE( 192)			if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("no_scene",8e,a7,34,10),hx::paccDynamic)) )) {
HXLINE( 193)				if (hx::IsEq(  ::Dynamic(this->options->__Field(HX_("no_scene",8e,a7,34,10),hx::paccDynamic)),true )) {
HXLINE( 194)					_should_add = false;
            				}
            			}
HXLINE( 199)			if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("parent",2a,05,7e,ed),hx::paccDynamic)) )) {
HXLINE( 201)				_should_add = false;
HXLINE( 202)				this->set_parent(( ( ::luxe::Entity)(this->options->__Field(HX_("parent",2a,05,7e,ed),hx::paccDynamic)) ));
            			}
HXLINE( 207)			if (_should_add) {
HXLINE( 209)				if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("scene",4c,d9,d1,78),hx::paccDynamic)) )) {
HXLINE( 210)					this->set_scene(( ( ::luxe::Scene)(this->options->__Field(HX_("scene",4c,d9,d1,78),hx::paccDynamic)) ));
            				}
            				else {
HXLINE( 213)					this->set_scene(::Luxe_obj::scene);
            				}
            			}
            		}
            		else {
HXLINE( 221)			this->set_scene(::Luxe_obj::scene);
            		}
HXLINE( 229)		if (hx::IsNotNull( this->get_scene() )) {
HXLINE( 233)			this->get_scene()->add(hx::ObjectPtr<OBJ_>(this));
            		}
            	}

Dynamic Entity_obj::__CreateEmpty() { return new Entity_obj; }

void *Entity_obj::_hx_vtable = 0;

Dynamic Entity_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Entity_obj > _hx_result = new Entity_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Entity_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0bbca018) {
		if (inClassId<=(int)0x099ca90a) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x099ca90a;
		} else {
			return inClassId==(int)0x0bbca018;
		}
	} else {
		return inClassId==(int)0x17ed3881;
	}
}

void Entity_obj::init(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_73_init)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,init,(void))

void Entity_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_75_update)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,update,(void))

void Entity_obj::onfixedupdate(Float rate){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_77_onfixedupdate)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,onfixedupdate,(void))

void Entity_obj::onreset(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_80_onreset)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,onreset,(void))

void Entity_obj::ondestroy(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_82_ondestroy)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,ondestroy,(void))

void Entity_obj::onkeyup( ::luxe::KeyEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_85_onkeyup)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,onkeyup,(void))

void Entity_obj::onkeydown( ::luxe::KeyEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_87_onkeydown)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,onkeydown,(void))

void Entity_obj::ontextinput( ::luxe::TextEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_89_ontextinput)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,ontextinput,(void))

void Entity_obj::oninputdown( ::luxe::InputEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_92_oninputdown)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,oninputdown,(void))

void Entity_obj::oninputup( ::luxe::InputEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_94_oninputup)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,oninputup,(void))

void Entity_obj::onmousedown( ::luxe::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_97_onmousedown)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,onmousedown,(void))

void Entity_obj::onmouseup( ::luxe::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_99_onmouseup)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,onmouseup,(void))

void Entity_obj::onmousemove( ::luxe::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_101_onmousemove)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,onmousemove,(void))

void Entity_obj::onmousewheel( ::luxe::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_103_onmousewheel)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,onmousewheel,(void))

void Entity_obj::ontouchdown( ::luxe::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_106_ontouchdown)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,ontouchdown,(void))

void Entity_obj::ontouchup( ::luxe::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_108_ontouchup)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,ontouchup,(void))

void Entity_obj::ontouchmove( ::luxe::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_110_ontouchmove)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,ontouchmove,(void))

void Entity_obj::ongamepadup( ::luxe::GamepadEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_113_ongamepadup)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,ongamepadup,(void))

void Entity_obj::ongamepaddown( ::luxe::GamepadEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_115_ongamepaddown)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,ongamepaddown,(void))

void Entity_obj::ongamepadaxis( ::luxe::GamepadEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_117_ongamepadaxis)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,ongamepadaxis,(void))

void Entity_obj::ongamepaddevice( ::luxe::GamepadEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_119_ongamepaddevice)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,ongamepaddevice,(void))

void Entity_obj::onwindowmoved( ::snow::types::WindowEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_122_onwindowmoved)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,onwindowmoved,(void))

void Entity_obj::onwindowresized( ::snow::types::WindowEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_124_onwindowresized)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,onwindowresized,(void))

void Entity_obj::onwindowsized( ::snow::types::WindowEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_126_onwindowsized)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,onwindowsized,(void))

void Entity_obj::onwindowminimized( ::snow::types::WindowEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_128_onwindowminimized)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,onwindowminimized,(void))

void Entity_obj::onwindowrestored( ::snow::types::WindowEvent event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_130_onwindowrestored)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,onwindowrestored,(void))

 ::Dynamic Entity_obj::add( ::Dynamic _component){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_251_add)
HXLINE( 252)		this->component_count++;
HXLINE( 253)		return this->_components->add(_component);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,add,return )

bool Entity_obj::remove(::String _name){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_257_remove)
HXLINE( 258)		this->component_count--;
HXLINE( 259)		return this->_components->remove(_name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,remove,return )

 ::Dynamic Entity_obj::get(::String _name, ::Dynamic __o__in_children){
 ::Dynamic _in_children = __o__in_children.Default(false);
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_264_get)
HXDLIN( 264)		return this->_components->get(_name,_in_children);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Entity_obj,get,return )

::cpp::VirtualArray Entity_obj::get_any(::String _name, ::Dynamic __o__in_children, ::Dynamic __o__first_only){
 ::Dynamic _in_children = __o__in_children.Default(false);
 ::Dynamic _first_only = __o__first_only.Default(true);
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_269_get_any)
HXDLIN( 269)		return this->_components->get_any(_name,_in_children,_first_only);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Entity_obj,get_any,return )

bool Entity_obj::has(::String _name){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_274_has)
HXDLIN( 274)		return this->_components->has(_name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,has,return )

void Entity_obj::_init(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_282__init)
HXLINE( 289)		this->init();
HXLINE( 292)		this->emit((int)2,null());
HXLINE( 294)		if ((this->component_count > (int)0)) {
HXLINE( 296)			 ::luxe::structural::OrderedMap_String_luxe_Component _g_map;
HXDLIN( 296)			int _g_index = (int)0;
HXDLIN( 296)			_g_map = this->_components->components;
HXDLIN( 296)			while((_g_index < _g_map->_keys->length)){
HXLINE( 296)				::Array< ::String > _g_map1 = _g_map->_keys;
HXDLIN( 296)				_g_index = (_g_index + (int)1);
HXDLIN( 296)				 ::luxe::Component _component = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map->map,_g_map1->__get((_g_index - (int)1)))) );
HXLINE( 298)				_component->init();
            			}
            		}
HXLINE( 303)		if ((this->children->length > (int)0)) {
HXLINE( 304)			int _g = (int)0;
HXDLIN( 304)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN( 304)			while((_g < _g1->length)){
HXLINE( 304)				 ::luxe::Entity _child = _g1->__get(_g).StaticCast<  ::luxe::Entity >();
HXDLIN( 304)				_g = (_g + (int)1);
HXLINE( 306)				_child->_init();
            			}
            		}
HXLINE( 311)		this->inited = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,_init,(void))

void Entity_obj::_reset( ::Dynamic _){
            	HX_GC_STACKFRAME(&_hx_pos_f96bc7d58685410e_316__reset)
HXLINE( 321)		this->onreset();
HXLINE( 323)		this->emit((int)3,null());
HXLINE( 325)		if ((this->component_count > (int)0)) {
HXLINE( 326)			 ::luxe::structural::OrderedMap_String_luxe_Component _g_map;
HXDLIN( 326)			int _g_index = (int)0;
HXDLIN( 326)			_g_map = this->_components->components;
HXDLIN( 326)			while((_g_index < _g_map->_keys->length)){
HXLINE( 326)				::Array< ::String > _g_map1 = _g_map->_keys;
HXDLIN( 326)				_g_index = (_g_index + (int)1);
HXDLIN( 326)				 ::luxe::Component _component = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map->map,_g_map1->__get((_g_index - (int)1)))) );
HXLINE( 328)				_component->onreset();
            			}
            		}
HXLINE( 333)		if ((this->children->length > (int)0)) {
HXLINE( 334)			int _g = (int)0;
HXDLIN( 334)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN( 334)			while((_g < _g1->length)){
HXLINE( 334)				 ::luxe::Entity _child = _g1->__get(_g).StaticCast<  ::luxe::Entity >();
HXDLIN( 334)				_g = (_g + (int)1);
HXLINE( 335)				_child->_reset(_);
            			}
            		}
HXLINE( 341)		{
HXLINE( 341)			Float _rate = this->fixed_rate;
HXDLIN( 341)			if (hx::IsNotNull( this->fixed_rate_timer )) {
HXLINE( 341)				this->fixed_rate_timer->stop();
HXDLIN( 341)				this->fixed_rate_timer = null();
            			}
HXDLIN( 341)			bool _hx_tmp;
HXDLIN( 341)			bool _hx_tmp1;
HXDLIN( 341)			if ((_rate != (int)0)) {
HXLINE( 341)				_hx_tmp1 = hx::IsNull( this->get_parent() );
            			}
            			else {
HXLINE( 341)				_hx_tmp1 = false;
            			}
HXDLIN( 341)			if (_hx_tmp1) {
HXLINE( 341)				_hx_tmp = !(this->destroyed);
            			}
            			else {
HXLINE( 341)				_hx_tmp = false;
            			}
HXDLIN( 341)			if (_hx_tmp) {
HXLINE( 341)				this->fixed_rate_timer =  ::snow::api::Timer_obj::__alloc( HX_CTX ,_rate);
HXDLIN( 341)				this->fixed_rate_timer->run = this->_fixed_update_dyn();
            			}
            		}
HXLINE( 344)		this->started = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_reset,(void))

void Entity_obj::destroy( ::Dynamic __o__from_parent){
 ::Dynamic _from_parent = __o__from_parent.Default(false);
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_349_destroy)
HXLINE( 351)		if ((this->destroyed != false)) {
HXLINE( 351)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion((HX_("destroyed == false",0a,e4,63,7c) + ((HX_(" ( ",18,6b,18,00) + (HX_("entity / destroying repeatedly ",2f,49,13,93) + this->get_name())) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 356)		if ((this->children->length > (int)0)) {
HXLINE( 357)			int _g = (int)0;
HXDLIN( 357)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN( 357)			while((_g < _g1->length)){
HXLINE( 357)				 ::luxe::Entity _child = _g1->__get(_g).StaticCast<  ::luxe::Entity >();
HXDLIN( 357)				_g = (_g + (int)1);
HXLINE( 359)				_child->destroy(true);
HXLINE( 360)				_child = null();
            			}
            		}
HXLINE( 364)		if ((this->component_count > (int)0)) {
HXLINE( 365)			 ::luxe::structural::OrderedMap_String_luxe_Component _g_map;
HXDLIN( 365)			int _g_index = (int)0;
HXDLIN( 365)			_g_map = this->_components->components;
HXDLIN( 365)			while((_g_index < _g_map->_keys->length)){
HXLINE( 365)				::Array< ::String > _g_map1 = _g_map->_keys;
HXDLIN( 365)				_g_index = (_g_index + (int)1);
HXDLIN( 365)				 ::luxe::Component _component = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map->map,_g_map1->__get((_g_index - (int)1)))) );
HXLINE( 367)				_component->onremoved();
HXLINE( 369)				_component->ondestroy();
HXLINE( 370)				_component = null();
            			}
            		}
HXLINE( 374)		this->children = null();
HXLINE( 375)		this->_components->destroy();
HXLINE( 376)		this->_components = null();
HXLINE( 377)		this->component_count = (int)0;
HXLINE( 380)		this->emit((int)8,null());
HXLINE( 382)		this->ondestroy();
HXLINE( 385)		bool _hx_tmp;
HXDLIN( 385)		if (hx::IsNotNull( this->get_parent() )) {
HXLINE( 385)			_hx_tmp = !(_from_parent);
            		}
            		else {
HXLINE( 385)			_hx_tmp = false;
            		}
HXDLIN( 385)		if (_hx_tmp) {
HXLINE( 387)			this->get_parent()->_remove_child(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 391)		if (hx::IsNotNull( this->fixed_rate_timer )) {
HXLINE( 391)			this->fixed_rate_timer->stop();
HXDLIN( 391)			this->fixed_rate_timer = null();
            		}
HXLINE( 394)		this->destroyed = true;
HXLINE( 395)		this->inited = false;
HXLINE( 396)		this->started = false;
HXLINE( 401)		if (hx::IsNotNull( this->get_scene() )) {
HXLINE( 402)			this->get_scene()->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 406)		if (hx::IsNotNull( this->events )) {
HXLINE( 407)			this->events->destroy();
HXLINE( 408)			this->events = null();
            		}
HXLINE( 411)		if (hx::IsNotNull( this->get_transform() )) {
HXLINE( 412)			this->get_transform()->destroy();
HXLINE( 413)			this->set_transform(null());
            		}
HXLINE( 416)		this->_emitter_destroy();
HXLINE( 418)		this->set_id(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,destroy,(void))

void Entity_obj::_update(Float dt){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_423__update)
HXLINE( 425)		if (this->destroyed) {
HXLINE( 427)			return;
            		}
HXLINE( 430)		bool _hx_tmp;
HXDLIN( 430)		bool _hx_tmp1;
HXDLIN( 430)		if (!(!(this->get_active()))) {
HXLINE( 430)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 430)			_hx_tmp1 = true;
            		}
HXDLIN( 430)		if (!(_hx_tmp1)) {
HXLINE( 430)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 430)			_hx_tmp = true;
            		}
HXDLIN( 430)		if (_hx_tmp) {
HXLINE( 431)			return;
            		}
HXLINE( 437)		{
HXLINE( 437)			 ::phoenix::Transform _this = this->get_transform();
HXDLIN( 437)			bool _hx_tmp2;
HXDLIN( 437)			if (hx::IsNotNull( _this->parent )) {
HXLINE( 437)				_hx_tmp2 = _this->parent->dirty;
            			}
            			else {
HXLINE( 437)				_hx_tmp2 = false;
            			}
HXDLIN( 437)			if (_hx_tmp2) {
HXLINE( 437)				_this->parent->clean_check();
            			}
HXDLIN( 437)			bool _hx_tmp3;
HXDLIN( 437)			bool _hx_tmp4;
HXDLIN( 437)			if (_this->dirty) {
HXLINE( 437)				_hx_tmp4 = !(_this->_cleaning);
            			}
            			else {
HXLINE( 437)				_hx_tmp4 = false;
            			}
HXDLIN( 437)			if (_hx_tmp4) {
HXLINE( 437)				_hx_tmp3 = !(_this->manual_update);
            			}
            			else {
HXLINE( 437)				_hx_tmp3 = false;
            			}
HXDLIN( 437)			if (_hx_tmp3) {
HXLINE( 437)				_this->clean();
            			}
            		}
HXLINE( 440)		this->update(dt);
HXLINE( 442)		if (hx::IsNotNull( this->events )) {
HXLINE( 444)			this->events->process();
            		}
HXLINE( 448)		if ((this->component_count > (int)0)) {
HXLINE( 449)			 ::luxe::structural::OrderedMap_String_luxe_Component _g_map;
HXDLIN( 449)			int _g_index = (int)0;
HXDLIN( 449)			_g_map = this->_components->components;
HXDLIN( 449)			while((_g_index < _g_map->_keys->length)){
HXLINE( 449)				::Array< ::String > _g_map1 = _g_map->_keys;
HXDLIN( 449)				_g_index = (_g_index + (int)1);
HXDLIN( 449)				 ::luxe::Component _component = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map->map,_g_map1->__get((_g_index - (int)1)))) );
HXLINE( 450)				_component->update(dt);
            			}
            		}
HXLINE( 455)		bool _hx_tmp5;
HXDLIN( 455)		if (hx::IsNotNull( this->children )) {
HXLINE( 455)			_hx_tmp5 = (this->children->length > (int)0);
            		}
            		else {
HXLINE( 455)			_hx_tmp5 = false;
            		}
HXDLIN( 455)		if (_hx_tmp5) {
HXLINE( 456)			int _g = (int)0;
HXDLIN( 456)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN( 456)			while((_g < _g1->length)){
HXLINE( 456)				 ::luxe::Entity _child = _g1->__get(_g).StaticCast<  ::luxe::Entity >();
HXDLIN( 456)				_g = (_g + (int)1);
HXLINE( 457)				_child->_update(dt);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_update,(void))

void Entity_obj::_fixed_update(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_466__fixed_update)
HXLINE( 468)		if (this->destroyed) {
HXLINE( 469)			return;
            		}
HXLINE( 472)		bool _hx_tmp;
HXDLIN( 472)		bool _hx_tmp1;
HXDLIN( 472)		if (!(!(this->get_active()))) {
HXLINE( 472)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 472)			_hx_tmp1 = true;
            		}
HXDLIN( 472)		if (!(_hx_tmp1)) {
HXLINE( 472)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 472)			_hx_tmp = true;
            		}
HXDLIN( 472)		if (_hx_tmp) {
HXLINE( 473)			return;
            		}
HXLINE( 478)		this->emit((int)7,null());
HXLINE( 480)		this->onfixedupdate(this->fixed_rate);
HXLINE( 482)		if ((this->component_count > (int)0)) {
HXLINE( 483)			 ::luxe::structural::OrderedMap_String_luxe_Component _g_map;
HXDLIN( 483)			int _g_index = (int)0;
HXDLIN( 483)			_g_map = this->_components->components;
HXDLIN( 483)			while((_g_index < _g_map->_keys->length)){
HXLINE( 483)				::Array< ::String > _g_map1 = _g_map->_keys;
HXDLIN( 483)				_g_index = (_g_index + (int)1);
HXDLIN( 483)				 ::luxe::Component _component = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map->map,_g_map1->__get((_g_index - (int)1)))) );
HXLINE( 484)				_component->onfixedupdate(this->fixed_rate);
            			}
            		}
HXLINE( 488)		if ((this->children->length > (int)0)) {
HXLINE( 489)			int _g = (int)0;
HXDLIN( 489)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN( 489)			while((_g < _g1->length)){
HXLINE( 489)				 ::luxe::Entity _child = _g1->__get(_g).StaticCast<  ::luxe::Entity >();
HXDLIN( 489)				_g = (_g + (int)1);
HXLINE( 490)				_child->_fixed_update();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,_fixed_update,(void))

 ::luxe::Emitter Entity_obj::_find_emit_source( ::Dynamic __o__from_unlisten){
 ::Dynamic _from_unlisten = __o__from_unlisten.Default(false);
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_498__find_emit_source)
HXLINE( 500)		 ::luxe::Scene _source = null();
HXLINE( 502)		if (hx::IsNotNull( this->get_scene() )) {
HXLINE( 504)			_source = this->get_scene();
            		}
            		else {
HXLINE( 506)			if (hx::IsNotNull( this->get_parent() )) {
HXLINE( 508)				bool _looking = true;
HXLINE( 509)				 ::luxe::Entity _parent = this->get_parent();
HXLINE( 511)				while(_looking){
HXLINE( 514)					if (hx::IsNull( _parent->get_scene() )) {
HXLINE( 516)						if (hx::IsNull( _parent->get_parent() )) {
HXLINE( 517)							if (!(_from_unlisten)) {
HXLINE( 518)								 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 518)								_hx_tmp((HX_("   i / entity / ",66,18,d6,1b) + HX_("entity has no parent or scene, currently no core events will reach it.",d6,2c,12,32)),hx::SourceInfo(HX_("Entity.hx",5b,67,8a,5c),518,HX_("luxe.Entity",fb,24,7a,64),HX_("_find_emit_source",a0,42,92,24)));
            							}
HXLINE( 520)							_looking = false;
HXLINE( 521)							goto _hx_goto_47;
            						}
            						else {
HXLINE( 525)							_parent = _parent->get_parent();
            						}
            					}
            					else {
HXLINE( 530)						_source = _parent->get_scene();
HXLINE( 531)						_looking = false;
HXLINE( 532)						goto _hx_goto_47;
            					}
            				}
            				_hx_goto_47:;
            			}
            			else {
HXLINE( 539)				if (!(_from_unlisten)) {
HXLINE( 540)					 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 540)					_hx_tmp1((HX_("   i / entity / ",66,18,d6,1b) + HX_("entity has no parent or scene, currently no core events will reach it.",d6,2c,12,32)),hx::SourceInfo(HX_("Entity.hx",5b,67,8a,5c),540,HX_("luxe.Entity",fb,24,7a,64),HX_("_find_emit_source",a0,42,92,24)));
            				}
            			}
            		}
HXLINE( 544)		return _source;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_find_emit_source,return )

void Entity_obj::_listen(int _event, ::Dynamic _handler, ::Dynamic __o__self){
 ::Dynamic _self = __o__self.Default(false);
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_549__listen)
HXLINE( 559)		if (!(_self)) {
HXLINE( 560)			this->on(_event,_handler);
            		}
HXLINE( 563)		 ::luxe::Scene _source = null();
HXDLIN( 563)		if (hx::IsNotNull( this->get_scene() )) {
HXLINE( 563)			_source = this->get_scene();
            		}
            		else {
HXLINE( 563)			if (hx::IsNotNull( this->get_parent() )) {
HXLINE( 563)				bool _looking = true;
HXDLIN( 563)				 ::luxe::Entity _parent = this->get_parent();
HXDLIN( 563)				while(_looking){
HXLINE( 563)					if (hx::IsNull( _parent->get_scene() )) {
HXLINE( 563)						if (hx::IsNull( _parent->get_parent() )) {
HXLINE( 563)							 ::Dynamic _source1 = ::haxe::Log_obj::trace;
HXDLIN( 563)							_source1((HX_("   i / entity / ",66,18,d6,1b) + HX_("entity has no parent or scene, currently no core events will reach it.",d6,2c,12,32)),hx::SourceInfo(HX_("Entity.hx",5b,67,8a,5c),518,HX_("luxe.Entity",fb,24,7a,64),HX_("_find_emit_source",a0,42,92,24)));
HXDLIN( 563)							_looking = false;
HXDLIN( 563)							goto _hx_goto_49;
            						}
            						else {
HXLINE( 563)							_parent = _parent->get_parent();
            						}
            					}
            					else {
HXLINE( 563)						_source = _parent->get_scene();
HXDLIN( 563)						_looking = false;
HXDLIN( 563)						goto _hx_goto_49;
            					}
            				}
            				_hx_goto_49:;
            			}
            			else {
HXLINE( 563)				 ::Dynamic _source2 = ::haxe::Log_obj::trace;
HXDLIN( 563)				_source2((HX_("   i / entity / ",66,18,d6,1b) + HX_("entity has no parent or scene, currently no core events will reach it.",d6,2c,12,32)),hx::SourceInfo(HX_("Entity.hx",5b,67,8a,5c),540,HX_("luxe.Entity",fb,24,7a,64),HX_("_find_emit_source",a0,42,92,24)));
            			}
            		}
HXDLIN( 563)		 ::luxe::Emitter _source3 = ( ( ::luxe::Emitter)(_source) );
HXLINE( 567)		if (hx::IsNotNull( _source3 )) {
HXLINE( 568)			switch((int)(_event)){
            				case (int)12: {
HXLINE( 571)					_source3->on(_event,this->_keydown_dyn());
            				}
            				break;
            				case (int)13: {
HXLINE( 570)					_source3->on(_event,this->_keyup_dyn());
            				}
            				break;
            				case (int)14: {
HXLINE( 572)					_source3->on(_event,this->_textinput_dyn());
            				}
            				break;
            				case (int)15: {
HXLINE( 584)					_source3->on(_event,this->_inputdown_dyn());
            				}
            				break;
            				case (int)16: {
HXLINE( 583)					_source3->on(_event,this->_inputup_dyn());
            				}
            				break;
            				case (int)17: {
HXLINE( 574)					_source3->on(_event,this->_mousedown_dyn());
            				}
            				break;
            				case (int)18: {
HXLINE( 575)					_source3->on(_event,this->_mouseup_dyn());
            				}
            				break;
            				case (int)19: {
HXLINE( 576)					_source3->on(_event,this->_mousemove_dyn());
            				}
            				break;
            				case (int)20: {
HXLINE( 577)					_source3->on(_event,this->_mousewheel_dyn());
            				}
            				break;
            				case (int)21: {
HXLINE( 579)					_source3->on(_event,this->_touchdown_dyn());
            				}
            				break;
            				case (int)22: {
HXLINE( 580)					_source3->on(_event,this->_touchup_dyn());
            				}
            				break;
            				case (int)23: {
HXLINE( 581)					_source3->on(_event,this->_touchmove_dyn());
            				}
            				break;
            				case (int)24: {
HXLINE( 588)					_source3->on(_event,this->_gamepadaxis_dyn());
            				}
            				break;
            				case (int)25: {
HXLINE( 586)					_source3->on(_event,this->_gamepaddown_dyn());
            				}
            				break;
            				case (int)26: {
HXLINE( 587)					_source3->on(_event,this->_gamepadup_dyn());
            				}
            				break;
            				case (int)27: {
HXLINE( 589)					_source3->on(_event,this->_gamepaddevice_dyn());
            				}
            				break;
            				case (int)29: {
HXLINE( 591)					_source3->on(_event,this->_windowmoved_dyn());
            				}
            				break;
            				case (int)30: {
HXLINE( 592)					_source3->on(_event,this->_windowresized_dyn());
            				}
            				break;
            				case (int)31: {
HXLINE( 593)					_source3->on(_event,this->_windowsized_dyn());
            				}
            				break;
            				case (int)32: {
HXLINE( 594)					_source3->on(_event,this->_windowminimized_dyn());
            				}
            				break;
            				case (int)33: {
HXLINE( 595)					_source3->on(_event,this->_windowrestored_dyn());
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Entity_obj,_listen,(void))

void Entity_obj::_unlisten(int _event, ::Dynamic _handler, ::Dynamic __o__self){
 ::Dynamic _self = __o__self.Default(false);
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_605__unlisten)
HXLINE( 607)		 ::luxe::Scene _source = null();
HXDLIN( 607)		if (hx::IsNotNull( this->get_scene() )) {
HXLINE( 607)			_source = this->get_scene();
            		}
            		else {
HXLINE( 607)			if (hx::IsNotNull( this->get_parent() )) {
HXLINE( 607)				bool _looking = true;
HXDLIN( 607)				 ::luxe::Entity _parent = this->get_parent();
HXDLIN( 607)				while(_looking){
HXLINE( 607)					if (hx::IsNull( _parent->get_scene() )) {
HXLINE( 607)						if (hx::IsNull( _parent->get_parent() )) {
HXLINE( 607)							_looking = false;
HXDLIN( 607)							goto _hx_goto_51;
            						}
            						else {
HXLINE( 607)							_parent = _parent->get_parent();
            						}
            					}
            					else {
HXLINE( 607)						_source = _parent->get_scene();
HXDLIN( 607)						_looking = false;
HXDLIN( 607)						goto _hx_goto_51;
            					}
            				}
            				_hx_goto_51:;
            			}
            		}
HXDLIN( 607)		 ::luxe::Emitter _source1 = ( ( ::luxe::Emitter)(_source) );
HXLINE( 611)		if (!(_self)) {
HXLINE( 612)			this->off(_event,_handler);
            		}
HXLINE( 615)		if (hx::IsNotNull( _source1 )) {
HXLINE( 616)			switch((int)(_event)){
            				case (int)12: {
HXLINE( 619)					_source1->off(_event,this->_keydown_dyn());
            				}
            				break;
            				case (int)13: {
HXLINE( 618)					_source1->off(_event,this->_keyup_dyn());
            				}
            				break;
            				case (int)14: {
HXLINE( 620)					_source1->off(_event,this->_textinput_dyn());
            				}
            				break;
            				case (int)15: {
HXLINE( 632)					_source1->off(_event,this->_inputdown_dyn());
            				}
            				break;
            				case (int)16: {
HXLINE( 631)					_source1->off(_event,this->_inputup_dyn());
            				}
            				break;
            				case (int)17: {
HXLINE( 622)					_source1->off(_event,this->_mousedown_dyn());
            				}
            				break;
            				case (int)18: {
HXLINE( 623)					_source1->off(_event,this->_mouseup_dyn());
            				}
            				break;
            				case (int)19: {
HXLINE( 624)					_source1->off(_event,this->_mousemove_dyn());
            				}
            				break;
            				case (int)20: {
HXLINE( 625)					_source1->off(_event,this->_mousewheel_dyn());
            				}
            				break;
            				case (int)21: {
HXLINE( 627)					_source1->off(_event,this->_touchdown_dyn());
            				}
            				break;
            				case (int)22: {
HXLINE( 628)					_source1->off(_event,this->_touchup_dyn());
            				}
            				break;
            				case (int)23: {
HXLINE( 629)					_source1->off(_event,this->_touchmove_dyn());
            				}
            				break;
            				case (int)24: {
HXLINE( 636)					_source1->off(_event,this->_gamepadaxis_dyn());
            				}
            				break;
            				case (int)25: {
HXLINE( 634)					_source1->off(_event,this->_gamepaddown_dyn());
            				}
            				break;
            				case (int)26: {
HXLINE( 635)					_source1->off(_event,this->_gamepadup_dyn());
            				}
            				break;
            				case (int)27: {
HXLINE( 637)					_source1->off(_event,this->_gamepaddevice_dyn());
            				}
            				break;
            				case (int)29: {
HXLINE( 639)					_source1->off(_event,this->_windowmoved_dyn());
            				}
            				break;
            				case (int)30: {
HXLINE( 640)					_source1->off(_event,this->_windowresized_dyn());
            				}
            				break;
            				case (int)31: {
HXLINE( 641)					_source1->off(_event,this->_windowsized_dyn());
            				}
            				break;
            				case (int)32: {
HXLINE( 642)					_source1->off(_event,this->_windowminimized_dyn());
            				}
            				break;
            				case (int)33: {
HXLINE( 643)					_source1->off(_event,this->_windowrestored_dyn());
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Entity_obj,_unlisten,(void))

void Entity_obj::_detach_scene(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_655__detach_scene)
HXDLIN( 655)		if (hx::IsNotNull( this->get_scene() )) {
HXLINE( 657)			this->get_scene()->off((int)3,this->_reset_dyn());
HXLINE( 658)			this->get_scene()->off((int)8,this->destroy_dyn());
HXLINE( 661)			this->get_scene()->off((int)13,this->_keyup_dyn());
HXLINE( 662)			this->get_scene()->off((int)12,this->_keydown_dyn());
HXLINE( 663)			this->get_scene()->off((int)14,this->_textinput_dyn());
HXLINE( 664)			this->get_scene()->off((int)17,this->_mousedown_dyn());
HXLINE( 665)			this->get_scene()->off((int)18,this->_mouseup_dyn());
HXLINE( 666)			this->get_scene()->off((int)19,this->_mousemove_dyn());
HXLINE( 667)			this->get_scene()->off((int)20,this->_mousewheel_dyn());
HXLINE( 668)			this->get_scene()->off((int)21,this->_touchdown_dyn());
HXLINE( 669)			this->get_scene()->off((int)22,this->_touchup_dyn());
HXLINE( 670)			this->get_scene()->off((int)23,this->_touchmove_dyn());
HXLINE( 671)			this->get_scene()->off((int)16,this->_inputup_dyn());
HXLINE( 672)			this->get_scene()->off((int)15,this->_inputdown_dyn());
HXLINE( 673)			this->get_scene()->off((int)25,this->_gamepaddown_dyn());
HXLINE( 674)			this->get_scene()->off((int)26,this->_gamepadup_dyn());
HXLINE( 675)			this->get_scene()->off((int)24,this->_gamepadaxis_dyn());
HXLINE( 676)			this->get_scene()->off((int)27,this->_gamepaddevice_dyn());
HXLINE( 677)			this->get_scene()->off((int)29,this->_windowmoved_dyn());
HXLINE( 678)			this->get_scene()->off((int)30,this->_windowresized_dyn());
HXLINE( 679)			this->get_scene()->off((int)31,this->_windowsized_dyn());
HXLINE( 680)			this->get_scene()->off((int)32,this->_windowminimized_dyn());
HXLINE( 681)			this->get_scene()->off((int)33,this->_windowrestored_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,_detach_scene,(void))

void Entity_obj::_attach_scene(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_689__attach_scene)
HXDLIN( 689)		if (hx::IsNotNull( this->get_scene() )) {
HXLINE( 690)			this->get_scene()->on((int)3,this->_reset_dyn());
HXLINE( 691)			this->get_scene()->on((int)8,this->destroy_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,_attach_scene,(void))

void Entity_obj::_keyup( ::luxe::KeyEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_698__keyup)
HXLINE( 700)		bool _hx_tmp;
HXDLIN( 700)		bool _hx_tmp1;
HXDLIN( 700)		if (!(!(this->get_active()))) {
HXLINE( 700)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 700)			_hx_tmp1 = true;
            		}
HXDLIN( 700)		if (!(_hx_tmp1)) {
HXLINE( 700)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 700)			_hx_tmp = true;
            		}
HXDLIN( 700)		if (_hx_tmp) {
HXLINE( 701)			return;
            		}
HXLINE( 706)		this->onkeyup(_event);
HXLINE( 707)		this->emit((int)13,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_keyup,(void))

void Entity_obj::_keydown( ::luxe::KeyEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_711__keydown)
HXLINE( 713)		bool _hx_tmp;
HXDLIN( 713)		bool _hx_tmp1;
HXDLIN( 713)		if (!(!(this->get_active()))) {
HXLINE( 713)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 713)			_hx_tmp1 = true;
            		}
HXDLIN( 713)		if (!(_hx_tmp1)) {
HXLINE( 713)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 713)			_hx_tmp = true;
            		}
HXDLIN( 713)		if (_hx_tmp) {
HXLINE( 714)			return;
            		}
HXLINE( 719)		this->onkeydown(_event);
HXLINE( 720)		this->emit((int)12,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_keydown,(void))

void Entity_obj::_textinput( ::luxe::TextEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_724__textinput)
HXLINE( 726)		bool _hx_tmp;
HXDLIN( 726)		bool _hx_tmp1;
HXDLIN( 726)		if (!(!(this->get_active()))) {
HXLINE( 726)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 726)			_hx_tmp1 = true;
            		}
HXDLIN( 726)		if (!(_hx_tmp1)) {
HXLINE( 726)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 726)			_hx_tmp = true;
            		}
HXDLIN( 726)		if (_hx_tmp) {
HXLINE( 727)			return;
            		}
HXLINE( 732)		this->ontextinput(_event);
HXLINE( 733)		this->emit((int)14,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_textinput,(void))

void Entity_obj::_mousedown( ::luxe::MouseEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_740__mousedown)
HXLINE( 742)		bool _hx_tmp;
HXDLIN( 742)		bool _hx_tmp1;
HXDLIN( 742)		if (!(!(this->get_active()))) {
HXLINE( 742)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 742)			_hx_tmp1 = true;
            		}
HXDLIN( 742)		if (!(_hx_tmp1)) {
HXLINE( 742)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 742)			_hx_tmp = true;
            		}
HXDLIN( 742)		if (_hx_tmp) {
HXLINE( 743)			return;
            		}
HXLINE( 748)		this->onmousedown(_event);
HXLINE( 749)		this->emit((int)17,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_mousedown,(void))

void Entity_obj::_mouseup( ::luxe::MouseEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_754__mouseup)
HXLINE( 756)		bool _hx_tmp;
HXDLIN( 756)		bool _hx_tmp1;
HXDLIN( 756)		if (!(!(this->get_active()))) {
HXLINE( 756)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 756)			_hx_tmp1 = true;
            		}
HXDLIN( 756)		if (!(_hx_tmp1)) {
HXLINE( 756)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 756)			_hx_tmp = true;
            		}
HXDLIN( 756)		if (_hx_tmp) {
HXLINE( 757)			return;
            		}
HXLINE( 762)		this->onmouseup(_event);
HXLINE( 763)		this->emit((int)18,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_mouseup,(void))

void Entity_obj::_mousewheel( ::luxe::MouseEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_767__mousewheel)
HXLINE( 769)		bool _hx_tmp;
HXDLIN( 769)		bool _hx_tmp1;
HXDLIN( 769)		if (!(!(this->get_active()))) {
HXLINE( 769)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 769)			_hx_tmp1 = true;
            		}
HXDLIN( 769)		if (!(_hx_tmp1)) {
HXLINE( 769)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 769)			_hx_tmp = true;
            		}
HXDLIN( 769)		if (_hx_tmp) {
HXLINE( 770)			return;
            		}
HXLINE( 775)		this->onmousewheel(_event);
HXLINE( 776)		this->emit((int)20,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_mousewheel,(void))

void Entity_obj::_mousemove( ::luxe::MouseEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_780__mousemove)
HXLINE( 782)		bool _hx_tmp;
HXDLIN( 782)		bool _hx_tmp1;
HXDLIN( 782)		if (!(!(this->get_active()))) {
HXLINE( 782)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 782)			_hx_tmp1 = true;
            		}
HXDLIN( 782)		if (!(_hx_tmp1)) {
HXLINE( 782)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 782)			_hx_tmp = true;
            		}
HXDLIN( 782)		if (_hx_tmp) {
HXLINE( 783)			return;
            		}
HXLINE( 788)		this->onmousemove(_event);
HXLINE( 789)		this->emit((int)19,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_mousemove,(void))

void Entity_obj::_touchdown( ::luxe::TouchEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_794__touchdown)
HXLINE( 796)		bool _hx_tmp;
HXDLIN( 796)		bool _hx_tmp1;
HXDLIN( 796)		if (!(!(this->get_active()))) {
HXLINE( 796)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 796)			_hx_tmp1 = true;
            		}
HXDLIN( 796)		if (!(_hx_tmp1)) {
HXLINE( 796)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 796)			_hx_tmp = true;
            		}
HXDLIN( 796)		if (_hx_tmp) {
HXLINE( 797)			return;
            		}
HXLINE( 802)		this->ontouchdown(_event);
HXLINE( 803)		this->emit((int)21,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_touchdown,(void))

void Entity_obj::_touchup( ::luxe::TouchEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_807__touchup)
HXLINE( 809)		bool _hx_tmp;
HXDLIN( 809)		bool _hx_tmp1;
HXDLIN( 809)		if (!(!(this->get_active()))) {
HXLINE( 809)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 809)			_hx_tmp1 = true;
            		}
HXDLIN( 809)		if (!(_hx_tmp1)) {
HXLINE( 809)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 809)			_hx_tmp = true;
            		}
HXDLIN( 809)		if (_hx_tmp) {
HXLINE( 810)			return;
            		}
HXLINE( 815)		this->ontouchup(_event);
HXLINE( 816)		this->emit((int)22,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_touchup,(void))

void Entity_obj::_touchmove( ::luxe::TouchEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_820__touchmove)
HXLINE( 822)		bool _hx_tmp;
HXDLIN( 822)		bool _hx_tmp1;
HXDLIN( 822)		if (!(!(this->get_active()))) {
HXLINE( 822)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 822)			_hx_tmp1 = true;
            		}
HXDLIN( 822)		if (!(_hx_tmp1)) {
HXLINE( 822)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 822)			_hx_tmp = true;
            		}
HXDLIN( 822)		if (_hx_tmp) {
HXLINE( 823)			return;
            		}
HXLINE( 828)		this->ontouchmove(_event);
HXLINE( 829)		this->emit((int)23,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_touchmove,(void))

void Entity_obj::_gamepadaxis( ::luxe::GamepadEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_834__gamepadaxis)
HXLINE( 836)		bool _hx_tmp;
HXDLIN( 836)		bool _hx_tmp1;
HXDLIN( 836)		if (!(!(this->get_active()))) {
HXLINE( 836)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 836)			_hx_tmp1 = true;
            		}
HXDLIN( 836)		if (!(_hx_tmp1)) {
HXLINE( 836)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 836)			_hx_tmp = true;
            		}
HXDLIN( 836)		if (_hx_tmp) {
HXLINE( 837)			return;
            		}
HXLINE( 842)		this->ongamepadaxis(_event);
HXLINE( 843)		this->emit((int)24,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_gamepadaxis,(void))

void Entity_obj::_gamepaddown( ::luxe::GamepadEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_847__gamepaddown)
HXLINE( 849)		bool _hx_tmp;
HXDLIN( 849)		bool _hx_tmp1;
HXDLIN( 849)		if (!(!(this->get_active()))) {
HXLINE( 849)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 849)			_hx_tmp1 = true;
            		}
HXDLIN( 849)		if (!(_hx_tmp1)) {
HXLINE( 849)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 849)			_hx_tmp = true;
            		}
HXDLIN( 849)		if (_hx_tmp) {
HXLINE( 850)			return;
            		}
HXLINE( 855)		this->ongamepaddown(_event);
HXLINE( 856)		this->emit((int)25,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_gamepaddown,(void))

void Entity_obj::_gamepadup( ::luxe::GamepadEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_860__gamepadup)
HXLINE( 862)		bool _hx_tmp;
HXDLIN( 862)		bool _hx_tmp1;
HXDLIN( 862)		if (!(!(this->get_active()))) {
HXLINE( 862)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 862)			_hx_tmp1 = true;
            		}
HXDLIN( 862)		if (!(_hx_tmp1)) {
HXLINE( 862)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 862)			_hx_tmp = true;
            		}
HXDLIN( 862)		if (_hx_tmp) {
HXLINE( 863)			return;
            		}
HXLINE( 868)		this->ongamepadup(_event);
HXLINE( 869)		this->emit((int)26,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_gamepadup,(void))

void Entity_obj::_gamepaddevice( ::luxe::GamepadEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_873__gamepaddevice)
HXLINE( 875)		bool _hx_tmp;
HXDLIN( 875)		bool _hx_tmp1;
HXDLIN( 875)		if (!(!(this->get_active()))) {
HXLINE( 875)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 875)			_hx_tmp1 = true;
            		}
HXDLIN( 875)		if (!(_hx_tmp1)) {
HXLINE( 875)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 875)			_hx_tmp = true;
            		}
HXDLIN( 875)		if (_hx_tmp) {
HXLINE( 876)			return;
            		}
HXLINE( 881)		this->ongamepaddevice(_event);
HXLINE( 882)		this->emit((int)27,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_gamepaddevice,(void))

void Entity_obj::_windowmoved( ::snow::types::WindowEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_888__windowmoved)
HXLINE( 890)		bool _hx_tmp;
HXDLIN( 890)		bool _hx_tmp1;
HXDLIN( 890)		if (!(!(this->get_active()))) {
HXLINE( 890)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 890)			_hx_tmp1 = true;
            		}
HXDLIN( 890)		if (!(_hx_tmp1)) {
HXLINE( 890)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 890)			_hx_tmp = true;
            		}
HXDLIN( 890)		if (_hx_tmp) {
HXLINE( 891)			return;
            		}
HXLINE( 896)		this->onwindowmoved(_event);
HXLINE( 897)		this->emit((int)29,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_windowmoved,(void))

void Entity_obj::_windowresized( ::snow::types::WindowEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_901__windowresized)
HXLINE( 903)		bool _hx_tmp;
HXDLIN( 903)		bool _hx_tmp1;
HXDLIN( 903)		if (!(!(this->get_active()))) {
HXLINE( 903)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 903)			_hx_tmp1 = true;
            		}
HXDLIN( 903)		if (!(_hx_tmp1)) {
HXLINE( 903)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 903)			_hx_tmp = true;
            		}
HXDLIN( 903)		if (_hx_tmp) {
HXLINE( 904)			return;
            		}
HXLINE( 909)		this->onwindowresized(_event);
HXLINE( 910)		this->emit((int)30,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_windowresized,(void))

void Entity_obj::_windowsized( ::snow::types::WindowEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_914__windowsized)
HXLINE( 916)		bool _hx_tmp;
HXDLIN( 916)		bool _hx_tmp1;
HXDLIN( 916)		if (!(!(this->get_active()))) {
HXLINE( 916)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 916)			_hx_tmp1 = true;
            		}
HXDLIN( 916)		if (!(_hx_tmp1)) {
HXLINE( 916)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 916)			_hx_tmp = true;
            		}
HXDLIN( 916)		if (_hx_tmp) {
HXLINE( 917)			return;
            		}
HXLINE( 922)		this->onwindowsized(_event);
HXLINE( 923)		this->emit((int)31,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_windowsized,(void))

void Entity_obj::_windowminimized( ::snow::types::WindowEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_927__windowminimized)
HXLINE( 929)		bool _hx_tmp;
HXDLIN( 929)		bool _hx_tmp1;
HXDLIN( 929)		if (!(!(this->get_active()))) {
HXLINE( 929)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 929)			_hx_tmp1 = true;
            		}
HXDLIN( 929)		if (!(_hx_tmp1)) {
HXLINE( 929)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 929)			_hx_tmp = true;
            		}
HXDLIN( 929)		if (_hx_tmp) {
HXLINE( 930)			return;
            		}
HXLINE( 935)		this->onwindowminimized(_event);
HXLINE( 936)		this->emit((int)32,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_windowminimized,(void))

void Entity_obj::_windowrestored( ::snow::types::WindowEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_940__windowrestored)
HXLINE( 942)		bool _hx_tmp;
HXDLIN( 942)		bool _hx_tmp1;
HXDLIN( 942)		if (!(!(this->get_active()))) {
HXLINE( 942)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 942)			_hx_tmp1 = true;
            		}
HXDLIN( 942)		if (!(_hx_tmp1)) {
HXLINE( 942)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 942)			_hx_tmp = true;
            		}
HXDLIN( 942)		if (_hx_tmp) {
HXLINE( 943)			return;
            		}
HXLINE( 948)		this->onwindowrestored(_event);
HXLINE( 949)		this->emit((int)33,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_windowrestored,(void))

void Entity_obj::_inputdown( ::luxe::InputEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_955__inputdown)
HXLINE( 957)		bool _hx_tmp;
HXDLIN( 957)		bool _hx_tmp1;
HXDLIN( 957)		if (!(!(this->get_active()))) {
HXLINE( 957)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 957)			_hx_tmp1 = true;
            		}
HXDLIN( 957)		if (!(_hx_tmp1)) {
HXLINE( 957)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 957)			_hx_tmp = true;
            		}
HXDLIN( 957)		if (_hx_tmp) {
HXLINE( 958)			return;
            		}
HXLINE( 963)		this->oninputdown(_event);
HXLINE( 964)		this->emit((int)15,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_inputdown,(void))

void Entity_obj::_inputup( ::luxe::InputEvent _event){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_968__inputup)
HXLINE( 970)		bool _hx_tmp;
HXDLIN( 970)		bool _hx_tmp1;
HXDLIN( 970)		if (!(!(this->get_active()))) {
HXLINE( 970)			_hx_tmp1 = !(this->inited);
            		}
            		else {
HXLINE( 970)			_hx_tmp1 = true;
            		}
HXDLIN( 970)		if (!(_hx_tmp1)) {
HXLINE( 970)			_hx_tmp = !(this->started);
            		}
            		else {
HXLINE( 970)			_hx_tmp = true;
            		}
HXDLIN( 970)		if (_hx_tmp) {
HXLINE( 971)			return;
            		}
HXLINE( 976)		this->oninputup(_event);
HXLINE( 977)		this->emit((int)16,_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_inputup,(void))

Float Entity_obj::get_fixed_rate(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_986_get_fixed_rate)
HXDLIN( 986)		return this->fixed_rate;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,get_fixed_rate,return )

Float Entity_obj::set_fixed_rate(Float _rate){
            	HX_GC_STACKFRAME(&_hx_pos_f96bc7d58685410e_990_set_fixed_rate)
HXLINE( 992)		this->fixed_rate = _rate;
HXLINE( 994)		if (this->started) {
HXLINE( 995)			if (hx::IsNotNull( this->fixed_rate_timer )) {
HXLINE( 995)				this->fixed_rate_timer->stop();
HXDLIN( 995)				this->fixed_rate_timer = null();
            			}
HXDLIN( 995)			bool _hx_tmp;
HXDLIN( 995)			bool _hx_tmp1;
HXDLIN( 995)			if ((_rate != (int)0)) {
HXLINE( 995)				_hx_tmp1 = hx::IsNull( this->get_parent() );
            			}
            			else {
HXLINE( 995)				_hx_tmp1 = false;
            			}
HXDLIN( 995)			if (_hx_tmp1) {
HXLINE( 995)				_hx_tmp = !(this->destroyed);
            			}
            			else {
HXLINE( 995)				_hx_tmp = false;
            			}
HXDLIN( 995)			if (_hx_tmp) {
HXLINE( 995)				this->fixed_rate_timer =  ::snow::api::Timer_obj::__alloc( HX_CTX ,_rate);
HXDLIN( 995)				this->fixed_rate_timer->run = this->_fixed_update_dyn();
            			}
            		}
HXLINE( 998)		return this->fixed_rate;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_fixed_rate,return )

void Entity_obj::_stop_fixed_rate_timer(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1004__stop_fixed_rate_timer)
HXDLIN(1004)		if (hx::IsNotNull( this->fixed_rate_timer )) {
HXLINE(1005)			this->fixed_rate_timer->stop();
HXLINE(1006)			this->fixed_rate_timer = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,_stop_fixed_rate_timer,(void))

void Entity_obj::_set_fixed_rate_timer(Float _rate){
            	HX_GC_STACKFRAME(&_hx_pos_f96bc7d58685410e_1011__set_fixed_rate_timer)
HXLINE(1013)		if (hx::IsNotNull( this->fixed_rate_timer )) {
HXLINE(1013)			this->fixed_rate_timer->stop();
HXDLIN(1013)			this->fixed_rate_timer = null();
            		}
HXLINE(1018)		bool _hx_tmp;
HXDLIN(1018)		bool _hx_tmp1;
HXDLIN(1018)		if ((_rate != (int)0)) {
HXLINE(1018)			_hx_tmp1 = hx::IsNull( this->get_parent() );
            		}
            		else {
HXLINE(1018)			_hx_tmp1 = false;
            		}
HXDLIN(1018)		if (_hx_tmp1) {
HXLINE(1018)			_hx_tmp = !(this->destroyed);
            		}
            		else {
HXLINE(1018)			_hx_tmp = false;
            		}
HXDLIN(1018)		if (_hx_tmp) {
HXLINE(1019)			this->fixed_rate_timer =  ::snow::api::Timer_obj::__alloc( HX_CTX ,_rate);
HXLINE(1020)			this->fixed_rate_timer->run = this->_fixed_update_dyn();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_set_fixed_rate_timer,(void))

 ::luxe::structural::OrderedMap_String_luxe_Component Entity_obj::get_components(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1028_get_components)
HXDLIN(1028)		return this->_components->components;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,get_components,return )

void Entity_obj::_add_child( ::luxe::Entity child){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1034__add_child)
HXLINE(1036)		this->children->push(child);
HXLINE(1038)		child->set_scene_root(this->scene_root);
HXLINE(1043)		if (hx::IsNotNull( child->get_scene() )) {
HXLINE(1045)			bool _removed = child->get_scene()->remove(child);
            		}
            		else {
HXLINE(1050)			bool _hx_tmp;
HXDLIN(1050)			if (this->inited) {
HXLINE(1050)				_hx_tmp = !(child->inited);
            			}
            			else {
HXLINE(1050)				_hx_tmp = false;
            			}
HXDLIN(1050)			if (_hx_tmp) {
HXLINE(1051)				this->scene_root->_delayed_init_entities->push(child);
            			}
HXLINE(1054)			bool _hx_tmp1;
HXDLIN(1054)			if (this->started) {
HXLINE(1054)				_hx_tmp1 = !(child->started);
            			}
            			else {
HXLINE(1054)				_hx_tmp1 = false;
            			}
HXDLIN(1054)			if (_hx_tmp1) {
HXLINE(1055)				this->scene_root->_delayed_reset_entities->push(child);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_add_child,(void))

void Entity_obj::_remove_child( ::luxe::Entity child){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1064__remove_child)
HXDLIN(1064)		this->children->remove(child);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,_remove_child,(void))

void Entity_obj::set_pos_from_transform( ::phoenix::Vector _pos){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1073_set_pos_from_transform)
HXDLIN(1073)		if ((this->component_count > (int)0)) {
HXLINE(1074)			 ::luxe::structural::OrderedMap_String_luxe_Component _g_map;
HXDLIN(1074)			int _g_index = (int)0;
HXDLIN(1074)			_g_map = this->_components->components;
HXDLIN(1074)			while((_g_index < _g_map->_keys->length)){
HXLINE(1074)				::Array< ::String > _g_map1 = _g_map->_keys;
HXDLIN(1074)				_g_index = (_g_index + (int)1);
HXDLIN(1074)				 ::luxe::Component _component = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map->map,_g_map1->__get((_g_index - (int)1)))) );
HXLINE(1075)				_component->entity_pos_change(_pos);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_pos_from_transform,(void))

void Entity_obj::set_rotation_from_transform( ::phoenix::Quaternion _rotation){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1084_set_rotation_from_transform)
HXDLIN(1084)		if ((this->component_count > (int)0)) {
HXLINE(1085)			 ::luxe::structural::OrderedMap_String_luxe_Component _g_map;
HXDLIN(1085)			int _g_index = (int)0;
HXDLIN(1085)			_g_map = this->_components->components;
HXDLIN(1085)			while((_g_index < _g_map->_keys->length)){
HXLINE(1085)				::Array< ::String > _g_map1 = _g_map->_keys;
HXDLIN(1085)				_g_index = (_g_index + (int)1);
HXDLIN(1085)				 ::luxe::Component _component = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map->map,_g_map1->__get((_g_index - (int)1)))) );
HXLINE(1086)				_component->entity_rotation_change(_rotation);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_rotation_from_transform,(void))

void Entity_obj::set_scale_from_transform( ::phoenix::Vector _scale){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1095_set_scale_from_transform)
HXDLIN(1095)		if ((this->component_count > (int)0)) {
HXLINE(1096)			 ::luxe::structural::OrderedMap_String_luxe_Component _g_map;
HXDLIN(1096)			int _g_index = (int)0;
HXDLIN(1096)			_g_map = this->_components->components;
HXDLIN(1096)			while((_g_index < _g_map->_keys->length)){
HXLINE(1096)				::Array< ::String > _g_map1 = _g_map->_keys;
HXDLIN(1096)				_g_index = (_g_index + (int)1);
HXDLIN(1096)				 ::luxe::Component _component = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map->map,_g_map1->__get((_g_index - (int)1)))) );
HXLINE(1097)				_component->entity_scale_change(_scale);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_scale_from_transform,(void))

void Entity_obj::set_origin_from_transform( ::phoenix::Vector _origin){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1106_set_origin_from_transform)
HXDLIN(1106)		if ((this->component_count > (int)0)) {
HXLINE(1107)			 ::luxe::structural::OrderedMap_String_luxe_Component _g_map;
HXDLIN(1107)			int _g_index = (int)0;
HXDLIN(1107)			_g_map = this->_components->components;
HXDLIN(1107)			while((_g_index < _g_map->_keys->length)){
HXLINE(1107)				::Array< ::String > _g_map1 = _g_map->_keys;
HXDLIN(1107)				_g_index = (_g_index + (int)1);
HXDLIN(1107)				 ::luxe::Component _component = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map->map,_g_map1->__get((_g_index - (int)1)))) );
HXLINE(1108)				_component->entity_origin_change(_origin);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_origin_from_transform,(void))

void Entity_obj::set_parent_from_transform( ::phoenix::Transform _parent){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1117_set_parent_from_transform)
HXDLIN(1117)		if ((this->component_count > (int)0)) {
HXLINE(1118)			 ::luxe::structural::OrderedMap_String_luxe_Component _g_map;
HXDLIN(1118)			int _g_index = (int)0;
HXDLIN(1118)			_g_map = this->_components->components;
HXDLIN(1118)			while((_g_index < _g_map->_keys->length)){
HXLINE(1118)				::Array< ::String > _g_map1 = _g_map->_keys;
HXDLIN(1118)				_g_index = (_g_index + (int)1);
HXDLIN(1118)				 ::luxe::Component _component = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_g_map->map,_g_map1->__get((_g_index - (int)1)))) );
HXLINE(1119)				_component->entity_parent_change(_parent);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_parent_from_transform,(void))

 ::phoenix::Vector Entity_obj::set_pos( ::phoenix::Vector _p){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1129_set_pos)
HXDLIN(1129)		 ::phoenix::Spatial _this = this->get_transform()->local;
HXDLIN(1129)		_this->pos = _p;
HXDLIN(1129)		if (hx::IsNotNull( _p )) {
HXDLIN(1129)			{
HXDLIN(1129)				 ::phoenix::Vector _v = _this->pos;
HXDLIN(1129)				 ::Dynamic listener = _this->_pos_change_dyn();
HXDLIN(1129)				_v->listen_x = listener;
HXDLIN(1129)				_v->listen_y = listener;
HXDLIN(1129)				_v->listen_z = listener;
            			}
HXDLIN(1129)			{
HXDLIN(1129)				bool _hx_tmp;
HXDLIN(1129)				if (hx::IsNotNull( _this->pos_changed )) {
HXDLIN(1129)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXDLIN(1129)					_hx_tmp = false;
            				}
HXDLIN(1129)				if (_hx_tmp) {
HXDLIN(1129)					_this->pos_changed(_this->pos);
            				}
            			}
            		}
HXDLIN(1129)		return _this->pos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_pos,return )

 ::phoenix::Vector Entity_obj::get_pos(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1135_get_pos)
HXDLIN(1135)		return this->get_transform()->local->pos;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,get_pos,return )

 ::phoenix::Quaternion Entity_obj::set_rotation( ::phoenix::Quaternion _r){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1143_set_rotation)
HXDLIN(1143)		 ::phoenix::Spatial _this = this->get_transform()->local;
HXDLIN(1143)		_this->rotation = _r;
HXDLIN(1143)		if (hx::IsNotNull( _r )) {
HXDLIN(1143)			{
HXDLIN(1143)				 ::phoenix::Quaternion _q = _this->rotation;
HXDLIN(1143)				 ::Dynamic listener = _this->_rotation_change_dyn();
HXDLIN(1143)				_q->listen_x = listener;
HXDLIN(1143)				_q->listen_y = listener;
HXDLIN(1143)				_q->listen_z = listener;
HXDLIN(1143)				_q->listen_w = listener;
            			}
HXDLIN(1143)			{
HXDLIN(1143)				bool _hx_tmp;
HXDLIN(1143)				if (hx::IsNotNull( _this->rotation_changed )) {
HXDLIN(1143)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXDLIN(1143)					_hx_tmp = false;
            				}
HXDLIN(1143)				if (_hx_tmp) {
HXDLIN(1143)					_this->rotation_changed(_this->rotation);
            				}
            			}
            		}
HXDLIN(1143)		return _this->rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_rotation,return )

 ::phoenix::Quaternion Entity_obj::get_rotation(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1149_get_rotation)
HXDLIN(1149)		return this->get_transform()->local->rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,get_rotation,return )

 ::phoenix::Vector Entity_obj::set_scale( ::phoenix::Vector _s){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1157_set_scale)
HXDLIN(1157)		 ::phoenix::Spatial _this = this->get_transform()->local;
HXDLIN(1157)		_this->scale = _s;
HXDLIN(1157)		if (hx::IsNotNull( _s )) {
HXDLIN(1157)			{
HXDLIN(1157)				 ::phoenix::Vector _v = _this->scale;
HXDLIN(1157)				 ::Dynamic listener = _this->_scale_change_dyn();
HXDLIN(1157)				_v->listen_x = listener;
HXDLIN(1157)				_v->listen_y = listener;
HXDLIN(1157)				_v->listen_z = listener;
            			}
HXDLIN(1157)			{
HXDLIN(1157)				bool _hx_tmp;
HXDLIN(1157)				if (hx::IsNotNull( _this->scale_changed )) {
HXDLIN(1157)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXDLIN(1157)					_hx_tmp = false;
            				}
HXDLIN(1157)				if (_hx_tmp) {
HXDLIN(1157)					_this->scale_changed(_this->scale);
            				}
            			}
            		}
HXDLIN(1157)		return _this->scale;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_scale,return )

 ::phoenix::Vector Entity_obj::get_scale(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1163_get_scale)
HXDLIN(1163)		return this->get_transform()->local->scale;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,get_scale,return )

 ::phoenix::Vector Entity_obj::set_origin( ::phoenix::Vector _origin){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1171_set_origin)
HXDLIN(1171)		 ::phoenix::Transform _this = this->get_transform();
HXDLIN(1171)		{
HXDLIN(1171)			_this->dirty = true;
HXDLIN(1171)			bool _hx_tmp;
HXDLIN(1171)			bool _hx_tmp1;
HXDLIN(1171)			bool _hx_tmp2;
HXDLIN(1171)			if (_this->dirty) {
HXDLIN(1171)				_hx_tmp2 = !(_this->_setup);
            			}
            			else {
HXDLIN(1171)				_hx_tmp2 = false;
            			}
HXDLIN(1171)			if (_hx_tmp2) {
HXDLIN(1171)				_hx_tmp1 = hx::IsNotNull( _this->_dirty_handlers );
            			}
            			else {
HXDLIN(1171)				_hx_tmp1 = false;
            			}
HXDLIN(1171)			if (_hx_tmp1) {
HXDLIN(1171)				_hx_tmp = (_this->_dirty_handlers->length > (int)0);
            			}
            			else {
HXDLIN(1171)				_hx_tmp = false;
            			}
HXDLIN(1171)			if (_hx_tmp) {
HXDLIN(1171)				int _g = (int)0;
HXDLIN(1171)				::Array< ::Dynamic> _g1 = _this->_dirty_handlers;
HXDLIN(1171)				while((_g < _g1->length)){
HXDLIN(1171)					 ::Dynamic _handler = _g1->__get(_g);
HXDLIN(1171)					_g = (_g + (int)1);
HXDLIN(1171)					if (hx::IsNotNull( _handler )) {
HXDLIN(1171)						_handler(_this);
            					}
            				}
            			}
            		}
HXDLIN(1171)		_this->origin = _origin;
HXDLIN(1171)		bool _hx_tmp3;
HXDLIN(1171)		if (hx::IsNotNull( _this->_origin_handlers )) {
HXDLIN(1171)			_hx_tmp3 = (_this->_origin_handlers->length > (int)0);
            		}
            		else {
HXDLIN(1171)			_hx_tmp3 = false;
            		}
HXDLIN(1171)		if (_hx_tmp3) {
HXDLIN(1171)			 ::phoenix::Vector _origin1 = _this->origin;
HXDLIN(1171)			{
HXDLIN(1171)				int _g2 = (int)0;
HXDLIN(1171)				::Array< ::Dynamic> _g11 = _this->_origin_handlers;
HXDLIN(1171)				while((_g2 < _g11->length)){
HXDLIN(1171)					 ::Dynamic _handler1 = _g11->__get(_g2);
HXDLIN(1171)					_g2 = (_g2 + (int)1);
HXDLIN(1171)					if (hx::IsNotNull( _handler1 )) {
HXDLIN(1171)						_handler1(_origin1);
            					}
            				}
            			}
            		}
HXDLIN(1171)		return _this->origin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_origin,return )

 ::phoenix::Vector Entity_obj::get_origin(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1178_get_origin)
HXDLIN(1178)		return this->get_transform()->origin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,get_origin,return )

 ::phoenix::Transform Entity_obj::set_transform( ::phoenix::Transform _transform){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1186_set_transform)
HXDLIN(1186)		return (this->transform = _transform);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_transform,return )

 ::phoenix::Transform Entity_obj::get_transform(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1193_get_transform)
HXDLIN(1193)		return this->transform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,get_transform,return )

 ::luxe::Entity Entity_obj::set_parent( ::luxe::Entity other){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1199_set_parent)
HXLINE(1201)		if (hx::IsEq( other,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1201)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion((HX_("other != this",b2,e2,97,d0) + ((HX_(" ( ",18,6b,18,00) + HX_("Entity setting itself as parent makes no sense",2e,bd,1f,18)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE(1207)		if (hx::IsNotNull( this->get_parent() )) {
HXLINE(1208)			this->get_parent()->_remove_child(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1212)		this->parent = other;
HXLINE(1216)		if (hx::IsNotNull( this->get_parent() )) {
HXLINE(1217)			this->get_parent()->_add_child(hx::ObjectPtr<OBJ_>(this));
HXLINE(1218)			{
HXLINE(1218)				 ::phoenix::Transform _this = this->get_transform();
HXDLIN(1218)				 ::phoenix::Transform _p = this->get_parent()->get_transform();
HXDLIN(1218)				{
HXLINE(1218)					_this->dirty = true;
HXDLIN(1218)					bool _hx_tmp;
HXDLIN(1218)					bool _hx_tmp1;
HXDLIN(1218)					bool _hx_tmp2;
HXDLIN(1218)					if (_this->dirty) {
HXLINE(1218)						_hx_tmp2 = !(_this->_setup);
            					}
            					else {
HXLINE(1218)						_hx_tmp2 = false;
            					}
HXDLIN(1218)					if (_hx_tmp2) {
HXLINE(1218)						_hx_tmp1 = hx::IsNotNull( _this->_dirty_handlers );
            					}
            					else {
HXLINE(1218)						_hx_tmp1 = false;
            					}
HXDLIN(1218)					if (_hx_tmp1) {
HXLINE(1218)						_hx_tmp = (_this->_dirty_handlers->length > (int)0);
            					}
            					else {
HXLINE(1218)						_hx_tmp = false;
            					}
HXDLIN(1218)					if (_hx_tmp) {
HXLINE(1218)						int _g = (int)0;
HXDLIN(1218)						::Array< ::Dynamic> _g1 = _this->_dirty_handlers;
HXDLIN(1218)						while((_g < _g1->length)){
HXLINE(1218)							 ::Dynamic _handler = _g1->__get(_g);
HXDLIN(1218)							_g = (_g + (int)1);
HXDLIN(1218)							if (hx::IsNotNull( _handler )) {
HXLINE(1218)								_handler(_this);
            							}
            						}
            					}
            				}
HXDLIN(1218)				if (hx::IsNotNull( _this->parent )) {
HXLINE(1218)					 ::phoenix::Transform _this1 = _this->parent;
HXDLIN(1218)					if (hx::IsNotNull( _this1->_clean_handlers )) {
HXLINE(1218)						_this1->_clean_handlers->remove(_this->on_parent_cleaned_dyn());
            					}
            				}
HXDLIN(1218)				_this->parent = _p;
HXDLIN(1218)				bool _hx_tmp3;
HXDLIN(1218)				if (hx::IsNotNull( _this->_parent_handlers )) {
HXLINE(1218)					_hx_tmp3 = (_this->_parent_handlers->length > (int)0);
            				}
            				else {
HXLINE(1218)					_hx_tmp3 = false;
            				}
HXDLIN(1218)				if (_hx_tmp3) {
HXLINE(1218)					 ::phoenix::Transform _parent = _this->parent;
HXDLIN(1218)					{
HXLINE(1218)						int _g2 = (int)0;
HXDLIN(1218)						::Array< ::Dynamic> _g11 = _this->_parent_handlers;
HXDLIN(1218)						while((_g2 < _g11->length)){
HXLINE(1218)							 ::Dynamic _handler1 = _g11->__get(_g2);
HXDLIN(1218)							_g2 = (_g2 + (int)1);
HXDLIN(1218)							if (hx::IsNotNull( _handler1 )) {
HXLINE(1218)								_handler1(_parent);
            							}
            						}
            					}
            				}
HXDLIN(1218)				if (hx::IsNotNull( _this->parent )) {
HXLINE(1218)					 ::phoenix::Transform _this2 = _this->parent;
HXDLIN(1218)					if (hx::IsNull( _this2->_clean_handlers )) {
HXLINE(1218)						_this2->_clean_handlers = ::Array_obj< ::Dynamic>::__new(0);
            					}
HXDLIN(1218)					_this2->_clean_handlers->push(_this->on_parent_cleaned_dyn());
            				}
            			}
            		}
            		else {
HXLINE(1220)			{
HXLINE(1220)				 ::phoenix::Transform _this3 = this->get_transform();
HXDLIN(1220)				{
HXLINE(1220)					_this3->dirty = true;
HXDLIN(1220)					bool _hx_tmp4;
HXDLIN(1220)					bool _hx_tmp5;
HXDLIN(1220)					bool _hx_tmp6;
HXDLIN(1220)					if (_this3->dirty) {
HXLINE(1220)						_hx_tmp6 = !(_this3->_setup);
            					}
            					else {
HXLINE(1220)						_hx_tmp6 = false;
            					}
HXDLIN(1220)					if (_hx_tmp6) {
HXLINE(1220)						_hx_tmp5 = hx::IsNotNull( _this3->_dirty_handlers );
            					}
            					else {
HXLINE(1220)						_hx_tmp5 = false;
            					}
HXDLIN(1220)					if (_hx_tmp5) {
HXLINE(1220)						_hx_tmp4 = (_this3->_dirty_handlers->length > (int)0);
            					}
            					else {
HXLINE(1220)						_hx_tmp4 = false;
            					}
HXDLIN(1220)					if (_hx_tmp4) {
HXLINE(1220)						int _g3 = (int)0;
HXDLIN(1220)						::Array< ::Dynamic> _g12 = _this3->_dirty_handlers;
HXDLIN(1220)						while((_g3 < _g12->length)){
HXLINE(1220)							 ::Dynamic _handler2 = _g12->__get(_g3);
HXDLIN(1220)							_g3 = (_g3 + (int)1);
HXDLIN(1220)							if (hx::IsNotNull( _handler2 )) {
HXLINE(1220)								_handler2(_this3);
            							}
            						}
            					}
            				}
HXDLIN(1220)				if (hx::IsNotNull( _this3->parent )) {
HXLINE(1220)					 ::phoenix::Transform _this4 = _this3->parent;
HXDLIN(1220)					if (hx::IsNotNull( _this4->_clean_handlers )) {
HXLINE(1220)						_this4->_clean_handlers->remove(_this3->on_parent_cleaned_dyn());
            					}
            				}
HXDLIN(1220)				_this3->parent = null();
HXDLIN(1220)				bool _hx_tmp7;
HXDLIN(1220)				if (hx::IsNotNull( _this3->_parent_handlers )) {
HXLINE(1220)					_hx_tmp7 = (_this3->_parent_handlers->length > (int)0);
            				}
            				else {
HXLINE(1220)					_hx_tmp7 = false;
            				}
HXDLIN(1220)				if (_hx_tmp7) {
HXLINE(1220)					 ::phoenix::Transform _parent1 = _this3->parent;
HXDLIN(1220)					{
HXLINE(1220)						int _g4 = (int)0;
HXDLIN(1220)						::Array< ::Dynamic> _g13 = _this3->_parent_handlers;
HXDLIN(1220)						while((_g4 < _g13->length)){
HXLINE(1220)							 ::Dynamic _handler3 = _g13->__get(_g4);
HXDLIN(1220)							_g4 = (_g4 + (int)1);
HXDLIN(1220)							if (hx::IsNotNull( _handler3 )) {
HXLINE(1220)								_handler3(_parent1);
            							}
            						}
            					}
            				}
HXDLIN(1220)				if (hx::IsNotNull( _this3->parent )) {
HXLINE(1220)					 ::phoenix::Transform _this5 = _this3->parent;
HXDLIN(1220)					if (hx::IsNull( _this5->_clean_handlers )) {
HXLINE(1220)						_this5->_clean_handlers = ::Array_obj< ::Dynamic>::__new(0);
            					}
HXDLIN(1220)					_this5->_clean_handlers->push(_this3->on_parent_cleaned_dyn());
            				}
            			}
HXLINE(1221)			this->scene_root->add(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1224)		return this->get_parent();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_parent,return )

 ::luxe::Entity Entity_obj::get_parent(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1230_get_parent)
HXDLIN(1230)		return this->parent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,get_parent,return )

 ::luxe::Scene Entity_obj::set_scene( ::luxe::Scene _scene){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1236_set_scene)
HXLINE(1238)		this->_detach_scene();
HXLINE(1240)		this->scene = _scene;
HXLINE(1242)		this->_attach_scene();
HXLINE(1244)		return this->get_scene();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_scene,return )

 ::luxe::Scene Entity_obj::get_scene(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1250_get_scene)
HXDLIN(1250)		return this->scene;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,get_scene,return )

 ::luxe::Scene Entity_obj::set_scene_root( ::luxe::Scene _scene){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1254_set_scene_root)
HXLINE(1256)		this->scene_root = _scene;
HXLINE(1258)		{
HXLINE(1258)			int _g = (int)0;
HXDLIN(1258)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN(1258)			while((_g < _g1->length)){
HXLINE(1258)				 ::luxe::Entity _child = _g1->__get(_g).StaticCast<  ::luxe::Entity >();
HXDLIN(1258)				_g = (_g + (int)1);
HXLINE(1259)				_child->set_scene_root(_scene);
            			}
            		}
HXLINE(1262)		return this->scene_root;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_scene_root,return )

::String Entity_obj::set_name(::String _name){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1268_set_name)
HXLINE(1270)		 ::luxe::Scene _scene = this->get_scene();
HXLINE(1272)		bool _hx_tmp;
HXDLIN(1272)		if (hx::IsNotNull( _scene )) {
HXLINE(1272)			_hx_tmp = hx::IsNotNull( this->get_name() );
            		}
            		else {
HXLINE(1272)			_hx_tmp = false;
            		}
HXDLIN(1272)		if (_hx_tmp) {
HXLINE(1273)			{
HXLINE(1273)				::Dynamic this1 = _scene->entities;
HXDLIN(1273)				( ( ::haxe::ds::StringMap)(this1) )->remove(this->get_name());
            			}
HXLINE(1274)			if (::haxe::IMap_obj::exists(_scene->entities,_name)) {
HXLINE(1274)				 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN(1274)				::String _hx_tmp2 = (HX_("    i / scene / ",cd,27,ce,13) + ((((HX_("",00,00,00,00) + _scene->get_name()) + HX_(" / adding a second entity named ",25,7f,ee,d9)) + _name) + HX_("!\n                This will replace the existing one, possibly leaving the previous one in limbo.",8a,82,fa,6f)));
HXDLIN(1274)				_hx_tmp1(_hx_tmp2,hx::SourceInfo(HX_("Scene.hx",12,fd,2c,9b),96,HX_("luxe.Scene",74,ca,c6,2f),HX_("handle_duplicate_warning",d1,8a,7d,4b)));
            			}
HXLINE(1275)			_scene->entities->set(_name,hx::ObjectPtr<OBJ_>(this));
HXLINE(1276)			_scene->_has_changed = true;
            		}
HXLINE(1279)		return (this->name = _name);
            	}


bool Entity_obj::set_active(bool _active){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1287_set_active)
HXDLIN(1287)		return (this->active = _active);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,set_active,return )

bool Entity_obj::get_active(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1293_get_active)
HXDLIN(1293)		return this->active;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,get_active,return )

::String Entity_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_f96bc7d58685410e_1299_toString)
HXLINE(1300)		if (this->destroyed) {
HXLINE(1300)			::String _hx_tmp = ((HX_("luxe Entity: ",53,0e,d6,89) + this->get_name()) + HX_(" / DESTROYED / id: ",8a,2d,b8,dc));
HXDLIN(1300)			return (_hx_tmp + this->get_id());
            		}
HXLINE(1303)		::Array< ::String > _list = ::Array_obj< ::String >::__new(0);
HXDLIN(1303)		{
HXLINE(1303)			 ::Dynamic _c = this->_components->components->_keys->iterator();
HXDLIN(1303)			while(( (bool)(_c->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1303)				::String _c1 = ( (::String)(_c->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(1303)				_list->push(_c1);
            			}
            		}
HXLINE(1304)		::String _hx_tmp1 = ((HX_("luxe Entity: ",53,0e,d6,89) + this->get_name()) + HX_(" / ",31,71,18,00));
HXDLIN(1304)		::String _hx_tmp2 = ((_hx_tmp1 + ::Lambda_obj::count(this->_components->components,null())) + HX_(" components:[",97,89,16,df));
HXDLIN(1304)		::String _hx_tmp3 = ((_hx_tmp2 + _list->join(HX_(", ",74,26,00,00))) + HX_("] / id: ",35,4e,4e,77));
HXDLIN(1304)		return (_hx_tmp3 + this->get_id());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,toString,return )


hx::ObjectPtr< Entity_obj > Entity_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< Entity_obj > __this = new Entity_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< Entity_obj > Entity_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	Entity_obj *__this = (Entity_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Entity_obj), true, "luxe.Entity"));
	*(void **)__this = Entity_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

Entity_obj::Entity_obj()
{
}

void Entity_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Entity);
	HX_MARK_MEMBER_NAME(events,"events");
	HX_MARK_MEMBER_NAME(children,"children");
	HX_MARK_MEMBER_NAME(destroyed,"destroyed");
	HX_MARK_MEMBER_NAME(inited,"inited");
	HX_MARK_MEMBER_NAME(started,"started");
	HX_MARK_MEMBER_NAME(fixed_rate,"fixed_rate");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(scene,"scene");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(transform,"transform");
	HX_MARK_MEMBER_NAME(_components,"_components");
	HX_MARK_MEMBER_NAME(fixed_rate_timer,"fixed_rate_timer");
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(scene_root,"scene_root");
	HX_MARK_MEMBER_NAME(component_count,"component_count");
	 ::luxe::Objects_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Entity_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(events,"events");
	HX_VISIT_MEMBER_NAME(children,"children");
	HX_VISIT_MEMBER_NAME(destroyed,"destroyed");
	HX_VISIT_MEMBER_NAME(inited,"inited");
	HX_VISIT_MEMBER_NAME(started,"started");
	HX_VISIT_MEMBER_NAME(fixed_rate,"fixed_rate");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(scene,"scene");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(transform,"transform");
	HX_VISIT_MEMBER_NAME(_components,"_components");
	HX_VISIT_MEMBER_NAME(fixed_rate_timer,"fixed_rate_timer");
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(scene_root,"scene_root");
	HX_VISIT_MEMBER_NAME(component_count,"component_count");
	 ::luxe::Objects_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Entity_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pos() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scene") ) { return hx::Val( inCallProp == hx::paccAlways ? get_scene() : scene ); }
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scale() ); }
		if (HX_FIELD_EQ(inName,"_init") ) { return hx::Val( _init_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"events") ) { return hx::Val( events ); }
		if (HX_FIELD_EQ(inName,"inited") ) { return hx::Val( inited ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( inCallProp == hx::paccAlways ? get_parent() : parent ); }
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( inCallProp == hx::paccAlways ? get_active() : active ); }
		if (HX_FIELD_EQ(inName,"origin") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_origin() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"_reset") ) { return hx::Val( _reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_keyup") ) { return hx::Val( _keyup_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { return hx::Val( started ); }
		if (HX_FIELD_EQ(inName,"options") ) { return hx::Val( options ); }
		if (HX_FIELD_EQ(inName,"onreset") ) { return hx::Val( onreset_dyn() ); }
		if (HX_FIELD_EQ(inName,"onkeyup") ) { return hx::Val( onkeyup_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_any") ) { return hx::Val( get_any_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"_update") ) { return hx::Val( _update_dyn() ); }
		if (HX_FIELD_EQ(inName,"_listen") ) { return hx::Val( _listen_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pos") ) { return hx::Val( set_pos_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_pos") ) { return hx::Val( get_pos_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"children") ) { return hx::Val( children ); }
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotation() ); }
		if (HX_FIELD_EQ(inName,"_keydown") ) { return hx::Val( _keydown_dyn() ); }
		if (HX_FIELD_EQ(inName,"_mouseup") ) { return hx::Val( _mouseup_dyn() ); }
		if (HX_FIELD_EQ(inName,"_touchup") ) { return hx::Val( _touchup_dyn() ); }
		if (HX_FIELD_EQ(inName,"_inputup") ) { return hx::Val( _inputup_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_name") ) { return hx::Val( set_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { return hx::Val( destroyed ); }
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( inCallProp == hx::paccAlways ? get_transform() : transform ); }
		if (HX_FIELD_EQ(inName,"ondestroy") ) { return hx::Val( ondestroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"onkeydown") ) { return hx::Val( onkeydown_dyn() ); }
		if (HX_FIELD_EQ(inName,"oninputup") ) { return hx::Val( oninputup_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmouseup") ) { return hx::Val( onmouseup_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontouchup") ) { return hx::Val( ontouchup_dyn() ); }
		if (HX_FIELD_EQ(inName,"_unlisten") ) { return hx::Val( _unlisten_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scale") ) { return hx::Val( set_scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scale") ) { return hx::Val( get_scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scene") ) { return hx::Val( set_scene_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scene") ) { return hx::Val( get_scene_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"components") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_components() ); }
		if (HX_FIELD_EQ(inName,"fixed_rate") ) { return hx::Val( inCallProp == hx::paccAlways ? get_fixed_rate() : fixed_rate ); }
		if (HX_FIELD_EQ(inName,"scene_root") ) { return hx::Val( scene_root ); }
		if (HX_FIELD_EQ(inName,"_textinput") ) { return hx::Val( _textinput_dyn() ); }
		if (HX_FIELD_EQ(inName,"_mousedown") ) { return hx::Val( _mousedown_dyn() ); }
		if (HX_FIELD_EQ(inName,"_mousemove") ) { return hx::Val( _mousemove_dyn() ); }
		if (HX_FIELD_EQ(inName,"_touchdown") ) { return hx::Val( _touchdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"_touchmove") ) { return hx::Val( _touchmove_dyn() ); }
		if (HX_FIELD_EQ(inName,"_gamepadup") ) { return hx::Val( _gamepadup_dyn() ); }
		if (HX_FIELD_EQ(inName,"_inputdown") ) { return hx::Val( _inputdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"_add_child") ) { return hx::Val( _add_child_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_origin") ) { return hx::Val( set_origin_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_origin") ) { return hx::Val( get_origin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_parent") ) { return hx::Val( set_parent_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_parent") ) { return hx::Val( get_parent_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_active") ) { return hx::Val( set_active_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_active") ) { return hx::Val( get_active_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_components") ) { return hx::Val( _components ); }
		if (HX_FIELD_EQ(inName,"ontextinput") ) { return hx::Val( ontextinput_dyn() ); }
		if (HX_FIELD_EQ(inName,"oninputdown") ) { return hx::Val( oninputdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmousedown") ) { return hx::Val( onmousedown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmousemove") ) { return hx::Val( onmousemove_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontouchdown") ) { return hx::Val( ontouchdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontouchmove") ) { return hx::Val( ontouchmove_dyn() ); }
		if (HX_FIELD_EQ(inName,"ongamepadup") ) { return hx::Val( ongamepadup_dyn() ); }
		if (HX_FIELD_EQ(inName,"_mousewheel") ) { return hx::Val( _mousewheel_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onmousewheel") ) { return hx::Val( onmousewheel_dyn() ); }
		if (HX_FIELD_EQ(inName,"_gamepadaxis") ) { return hx::Val( _gamepadaxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"_gamepaddown") ) { return hx::Val( _gamepaddown_dyn() ); }
		if (HX_FIELD_EQ(inName,"_windowmoved") ) { return hx::Val( _windowmoved_dyn() ); }
		if (HX_FIELD_EQ(inName,"_windowsized") ) { return hx::Val( _windowsized_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return hx::Val( get_rotation_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onfixedupdate") ) { return hx::Val( onfixedupdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"ongamepaddown") ) { return hx::Val( ongamepaddown_dyn() ); }
		if (HX_FIELD_EQ(inName,"ongamepadaxis") ) { return hx::Val( ongamepadaxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"onwindowmoved") ) { return hx::Val( onwindowmoved_dyn() ); }
		if (HX_FIELD_EQ(inName,"onwindowsized") ) { return hx::Val( onwindowsized_dyn() ); }
		if (HX_FIELD_EQ(inName,"_fixed_update") ) { return hx::Val( _fixed_update_dyn() ); }
		if (HX_FIELD_EQ(inName,"_detach_scene") ) { return hx::Val( _detach_scene_dyn() ); }
		if (HX_FIELD_EQ(inName,"_attach_scene") ) { return hx::Val( _attach_scene_dyn() ); }
		if (HX_FIELD_EQ(inName,"_remove_child") ) { return hx::Val( _remove_child_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_transform") ) { return hx::Val( set_transform_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_transform") ) { return hx::Val( get_transform_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_gamepaddevice") ) { return hx::Val( _gamepaddevice_dyn() ); }
		if (HX_FIELD_EQ(inName,"_windowresized") ) { return hx::Val( _windowresized_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fixed_rate") ) { return hx::Val( get_fixed_rate_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fixed_rate") ) { return hx::Val( set_fixed_rate_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_components") ) { return hx::Val( get_components_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scene_root") ) { return hx::Val( set_scene_root_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"ongamepaddevice") ) { return hx::Val( ongamepaddevice_dyn() ); }
		if (HX_FIELD_EQ(inName,"onwindowresized") ) { return hx::Val( onwindowresized_dyn() ); }
		if (HX_FIELD_EQ(inName,"component_count") ) { return hx::Val( component_count ); }
		if (HX_FIELD_EQ(inName,"_windowrestored") ) { return hx::Val( _windowrestored_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fixed_rate_timer") ) { return hx::Val( fixed_rate_timer ); }
		if (HX_FIELD_EQ(inName,"onwindowrestored") ) { return hx::Val( onwindowrestored_dyn() ); }
		if (HX_FIELD_EQ(inName,"_windowminimized") ) { return hx::Val( _windowminimized_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onwindowminimized") ) { return hx::Val( onwindowminimized_dyn() ); }
		if (HX_FIELD_EQ(inName,"_find_emit_source") ) { return hx::Val( _find_emit_source_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_set_fixed_rate_timer") ) { return hx::Val( _set_fixed_rate_timer_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_stop_fixed_rate_timer") ) { return hx::Val( _stop_fixed_rate_timer_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pos_from_transform") ) { return hx::Val( set_pos_from_transform_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"set_scale_from_transform") ) { return hx::Val( set_scale_from_transform_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"set_origin_from_transform") ) { return hx::Val( set_origin_from_transform_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_parent_from_transform") ) { return hx::Val( set_parent_from_transform_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"set_rotation_from_transform") ) { return hx::Val( set_rotation_from_transform_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Entity_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pos(inValue.Cast<  ::phoenix::Vector >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scene") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scene(inValue.Cast<  ::luxe::Scene >()) );scene=inValue.Cast<  ::luxe::Scene >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scale(inValue.Cast<  ::phoenix::Vector >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"events") ) { events=inValue.Cast<  ::luxe::Events >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inited") ) { inited=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_parent(inValue.Cast<  ::luxe::Entity >()) );parent=inValue.Cast<  ::luxe::Entity >(); return inValue; }
		if (HX_FIELD_EQ(inName,"active") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_active(inValue.Cast< bool >()) );active=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"origin") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_origin(inValue.Cast<  ::phoenix::Vector >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { started=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"children") ) { children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation(inValue.Cast<  ::phoenix::Quaternion >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { destroyed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transform(inValue.Cast<  ::phoenix::Transform >()) );transform=inValue.Cast<  ::phoenix::Transform >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fixed_rate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fixed_rate(inValue.Cast< Float >()) );fixed_rate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scene_root") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scene_root(inValue.Cast<  ::luxe::Scene >()) );scene_root=inValue.Cast<  ::luxe::Scene >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_components") ) { _components=inValue.Cast<  ::luxe::components::Components >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"component_count") ) { component_count=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fixed_rate_timer") ) { fixed_rate_timer=inValue.Cast<  ::snow::api::Timer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Entity_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("components","\x16","\xb5","\x1e","\x5a"));
	outFields->push(HX_HCSTRING("events","\x19","\x4f","\x6a","\x96"));
	outFields->push(HX_HCSTRING("children","\x3f","\x19","\x6a","\x70"));
	outFields->push(HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4"));
	outFields->push(HX_HCSTRING("inited","\x6f","\x77","\x4c","\x97"));
	outFields->push(HX_HCSTRING("started","\x41","\x29","\x1b","\x35"));
	outFields->push(HX_HCSTRING("fixed_rate","\xcb","\xb0","\xb2","\x54"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("scene","\x4c","\xd9","\xd1","\x78"));
	outFields->push(HX_HCSTRING("active","\xc6","\x41","\x46","\x16"));
	outFields->push(HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"));
	outFields->push(HX_HCSTRING("_components","\x35","\x82","\xa8","\x2c"));
	outFields->push(HX_HCSTRING("fixed_rate_timer","\x11","\xe2","\x78","\xad"));
	outFields->push(HX_HCSTRING("options","\x5e","\x33","\xfe","\xdf"));
	outFields->push(HX_HCSTRING("scene_root","\x35","\xfd","\xba","\xc4"));
	outFields->push(HX_HCSTRING("component_count","\x8d","\x28","\x8b","\xe8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Entity_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::Events*/ ,(int)offsetof(Entity_obj,events),HX_HCSTRING("events","\x19","\x4f","\x6a","\x96")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Entity_obj,children),HX_HCSTRING("children","\x3f","\x19","\x6a","\x70")},
	{hx::fsBool,(int)offsetof(Entity_obj,destroyed),HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4")},
	{hx::fsBool,(int)offsetof(Entity_obj,inited),HX_HCSTRING("inited","\x6f","\x77","\x4c","\x97")},
	{hx::fsBool,(int)offsetof(Entity_obj,started),HX_HCSTRING("started","\x41","\x29","\x1b","\x35")},
	{hx::fsFloat,(int)offsetof(Entity_obj,fixed_rate),HX_HCSTRING("fixed_rate","\xcb","\xb0","\xb2","\x54")},
	{hx::fsObject /*::luxe::Entity*/ ,(int)offsetof(Entity_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsObject /*::luxe::Scene*/ ,(int)offsetof(Entity_obj,scene),HX_HCSTRING("scene","\x4c","\xd9","\xd1","\x78")},
	{hx::fsBool,(int)offsetof(Entity_obj,active),HX_HCSTRING("active","\xc6","\x41","\x46","\x16")},
	{hx::fsObject /*::phoenix::Transform*/ ,(int)offsetof(Entity_obj,transform),HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45")},
	{hx::fsObject /*::luxe::components::Components*/ ,(int)offsetof(Entity_obj,_components),HX_HCSTRING("_components","\x35","\x82","\xa8","\x2c")},
	{hx::fsObject /*::snow::api::Timer*/ ,(int)offsetof(Entity_obj,fixed_rate_timer),HX_HCSTRING("fixed_rate_timer","\x11","\xe2","\x78","\xad")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Entity_obj,options),HX_HCSTRING("options","\x5e","\x33","\xfe","\xdf")},
	{hx::fsObject /*::luxe::Scene*/ ,(int)offsetof(Entity_obj,scene_root),HX_HCSTRING("scene_root","\x35","\xfd","\xba","\xc4")},
	{hx::fsInt,(int)offsetof(Entity_obj,component_count),HX_HCSTRING("component_count","\x8d","\x28","\x8b","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Entity_obj_sStaticStorageInfo = 0;
#endif

static ::String Entity_obj_sMemberFields[] = {
	HX_HCSTRING("events","\x19","\x4f","\x6a","\x96"),
	HX_HCSTRING("children","\x3f","\x19","\x6a","\x70"),
	HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4"),
	HX_HCSTRING("inited","\x6f","\x77","\x4c","\x97"),
	HX_HCSTRING("started","\x41","\x29","\x1b","\x35"),
	HX_HCSTRING("fixed_rate","\xcb","\xb0","\xb2","\x54"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("scene","\x4c","\xd9","\xd1","\x78"),
	HX_HCSTRING("active","\xc6","\x41","\x46","\x16"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("_components","\x35","\x82","\xa8","\x2c"),
	HX_HCSTRING("fixed_rate_timer","\x11","\xe2","\x78","\xad"),
	HX_HCSTRING("options","\x5e","\x33","\xfe","\xdf"),
	HX_HCSTRING("scene_root","\x35","\xfd","\xba","\xc4"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("onfixedupdate","\xbe","\x93","\x59","\xed"),
	HX_HCSTRING("onreset","\x50","\x78","\xd8","\xe9"),
	HX_HCSTRING("ondestroy","\xbb","\xbd","\xdf","\x2e"),
	HX_HCSTRING("onkeyup","\x3b","\x04","\x0f","\xe2"),
	HX_HCSTRING("onkeydown","\x42","\xce","\xc7","\xbb"),
	HX_HCSTRING("ontextinput","\x3e","\xe7","\x4d","\x44"),
	HX_HCSTRING("oninputdown","\x6d","\x8c","\x2f","\x9f"),
	HX_HCSTRING("oninputup","\xa6","\x51","\x78","\xde"),
	HX_HCSTRING("onmousedown","\x08","\x88","\x59","\x84"),
	HX_HCSTRING("onmouseup","\x81","\xa0","\xcc","\xca"),
	HX_HCSTRING("onmousemove","\xb7","\x72","\x4c","\x8a"),
	HX_HCSTRING("onmousewheel","\x35","\x56","\xec","\x35"),
	HX_HCSTRING("ontouchdown","\xa2","\x5e","\x71","\x9d"),
	HX_HCSTRING("ontouchup","\x9b","\xbc","\x51","\xe3"),
	HX_HCSTRING("ontouchmove","\x51","\x49","\x64","\xa3"),
	HX_HCSTRING("ongamepadup","\x3d","\x74","\xa8","\xdf"),
	HX_HCSTRING("ongamepaddown","\xc4","\xc2","\x9e","\x66"),
	HX_HCSTRING("ongamepadaxis","\x03","\xe7","\xa9","\x64"),
	HX_HCSTRING("ongamepaddevice","\x78","\x83","\x39","\x9b"),
	HX_HCSTRING("onwindowmoved","\x84","\x77","\xc2","\xe8"),
	HX_HCSTRING("onwindowresized","\x81","\x3d","\xce","\x90"),
	HX_HCSTRING("onwindowsized","\xd4","\xb3","\x35","\x59"),
	HX_HCSTRING("onwindowminimized","\x57","\x23","\xa1","\x8b"),
	HX_HCSTRING("onwindowrestored","\xa5","\x7a","\xd4","\x71"),
	HX_HCSTRING("component_count","\x8d","\x28","\x8b","\xe8"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("get_any","\x83","\xc3","\xbe","\x26"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("_init","\xef","\x56","\xcc","\xf8"),
	HX_HCSTRING("_reset","\x10","\x91","\xaf","\xe2"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("_update","\xa8","\x97","\x7c","\xf5"),
	HX_HCSTRING("_fixed_update","\x93","\x07","\x46","\x99"),
	HX_HCSTRING("_find_emit_source","\xa0","\x42","\x92","\x24"),
	HX_HCSTRING("_listen","\xe6","\xd9","\x70","\x5e"),
	HX_HCSTRING("_unlisten","\xbf","\xee","\xd6","\x39"),
	HX_HCSTRING("_detach_scene","\xff","\x50","\x20","\xf0"),
	HX_HCSTRING("_attach_scene","\xf1","\x50","\xea","\xb7"),
	HX_HCSTRING("_keyup","\xfb","\x1c","\xe6","\xda"),
	HX_HCSTRING("_keydown","\x02","\x97","\x26","\xeb"),
	HX_HCSTRING("_textinput","\xfe","\x5f","\x80","\x1f"),
	HX_HCSTRING("_mousedown","\xc8","\x00","\x8c","\x5f"),
	HX_HCSTRING("_mouseup","\x41","\x69","\x2b","\xfa"),
	HX_HCSTRING("_mousewheel","\x75","\x85","\xe3","\x26"),
	HX_HCSTRING("_mousemove","\x77","\xeb","\x7e","\x65"),
	HX_HCSTRING("_touchdown","\x62","\xd7","\xa3","\x78"),
	HX_HCSTRING("_touchup","\x5b","\x85","\xb0","\x12"),
	HX_HCSTRING("_touchmove","\x11","\xc2","\x96","\x7e"),
	HX_HCSTRING("_gamepadaxis","\xc3","\x0f","\xfc","\x4b"),
	HX_HCSTRING("_gamepaddown","\x84","\xeb","\xf0","\x4d"),
	HX_HCSTRING("_gamepadup","\xfd","\xec","\xda","\xba"),
	HX_HCSTRING("_gamepaddevice","\x38","\x5c","\xf7","\x99"),
	HX_HCSTRING("_windowmoved","\x44","\xa0","\x14","\xd0"),
	HX_HCSTRING("_windowresized","\x41","\x16","\x8c","\x8f"),
	HX_HCSTRING("_windowsized","\x94","\xdc","\x87","\x40"),
	HX_HCSTRING("_windowminimized","\x17","\xac","\x16","\x18"),
	HX_HCSTRING("_windowrestored","\xe5","\x49","\x34","\x59"),
	HX_HCSTRING("_inputdown","\x2d","\x05","\x62","\x7a"),
	HX_HCSTRING("_inputup","\x66","\x1a","\xd7","\x0d"),
	HX_HCSTRING("get_fixed_rate","\x14","\x39","\xa8","\xca"),
	HX_HCSTRING("set_fixed_rate","\x88","\x21","\xc8","\xea"),
	HX_HCSTRING("_stop_fixed_rate_timer","\x6f","\x57","\xff","\x90"),
	HX_HCSTRING("_set_fixed_rate_timer","\x6d","\x08","\x36","\x07"),
	HX_HCSTRING("get_components","\x5f","\x3d","\x14","\xd0"),
	HX_HCSTRING("_add_child","\x7f","\x2d","\xd3","\x20"),
	HX_HCSTRING("_remove_child","\x00","\xab","\xa8","\x5e"),
	HX_HCSTRING("set_pos_from_transform","\x5f","\x3e","\x64","\xc7"),
	HX_HCSTRING("set_rotation_from_transform","\x5b","\xb5","\xfc","\x30"),
	HX_HCSTRING("set_scale_from_transform","\x69","\xfb","\x86","\x01"),
	HX_HCSTRING("set_origin_from_transform","\xf3","\xb6","\xcd","\x45"),
	HX_HCSTRING("set_parent_from_transform","\x2f","\x18","\x5c","\xed"),
	HX_HCSTRING("set_pos","\x37","\xb7","\xcb","\x19"),
	HX_HCSTRING("get_pos","\x2b","\x26","\xca","\x26"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("get_rotation","\x47","\xf1","\x9f","\xbd"),
	HX_HCSTRING("set_scale","\xed","\x16","\xc9","\x9f"),
	HX_HCSTRING("get_scale","\xe1","\x2a","\x78","\xbc"),
	HX_HCSTRING("set_origin","\x23","\x28","\x06","\x3f"),
	HX_HCSTRING("get_origin","\xaf","\x89","\x88","\x3b"),
	HX_HCSTRING("set_transform","\x4f","\xe3","\xfc","\x4b"),
	HX_HCSTRING("get_transform","\x43","\x01","\xf7","\x06"),
	HX_HCSTRING("set_parent","\x67","\x13","\x83","\xe1"),
	HX_HCSTRING("get_parent","\xf3","\x74","\x05","\xde"),
	HX_HCSTRING("set_scene","\xaf","\x21","\xcc","\x9f"),
	HX_HCSTRING("get_scene","\xa3","\x35","\x7b","\xbc"),
	HX_HCSTRING("set_scene_root","\xf2","\x6d","\xd0","\x5a"),
	HX_HCSTRING("set_name","\x48","\x87","\x17","\x77"),
	HX_HCSTRING("set_active","\x03","\x50","\x4b","\x0a"),
	HX_HCSTRING("get_active","\x8f","\xb1","\xcd","\x06"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Entity_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Entity_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Entity_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Entity_obj::__mClass,"__mClass");
};

#endif

hx::Class Entity_obj::__mClass;

void Entity_obj::__register()
{
	hx::Object *dummy = new Entity_obj;
	Entity_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Entity","\xfb","\x24","\x7a","\x64");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Entity_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Entity_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Entity_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Entity_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Entity_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Entity_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
