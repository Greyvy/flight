// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_luxe_Cursor
#include <luxe/Cursor.h>
#endif
#ifndef INCLUDED_luxe_Debug
#include <luxe/Debug.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_KeyEvent
#include <luxe/KeyEvent.h>
#endif
#ifndef INCLUDED_luxe_MouseEvent
#include <luxe/MouseEvent.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Screen
#include <luxe/Screen.h>
#endif
#ifndef INCLUDED_luxe_Text
#include <luxe/Text.h>
#endif
#ifndef INCLUDED_luxe_TouchEvent
#include <luxe/TouchEvent.h>
#endif
#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
#ifndef INCLUDED_luxe_debug_DebugView
#include <luxe/debug/DebugView.h>
#endif
#ifndef INCLUDED_luxe_debug_Inspector
#include <luxe/debug/Inspector.h>
#endif
#ifndef INCLUDED_luxe_debug_ProfilerDebugView
#include <luxe/debug/ProfilerDebugView.h>
#endif
#ifndef INCLUDED_luxe_debug_SceneDebugView
#include <luxe/debug/SceneDebugView.h>
#endif
#ifndef INCLUDED_luxe_debug_StatsDebugView
#include <luxe/debug/StatsDebugView.h>
#endif
#ifndef INCLUDED_luxe_debug_TraceDebugView
#include <luxe/debug/TraceDebugView.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_luxe_structural_BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry
#include <luxe/structural/BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.h>
#endif
#ifndef INCLUDED_luxe_structural_BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry
#include <luxe/structural/BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.h>
#endif
#ifndef INCLUDED_phoenix_Batcher
#include <phoenix/Batcher.h>
#endif
#ifndef INCLUDED_phoenix_BitmapFont
#include <phoenix/BitmapFont.h>
#endif
#ifndef INCLUDED_phoenix_Camera
#include <phoenix/Camera.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_RenderState
#include <phoenix/RenderState.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_RendererStats
#include <phoenix/RendererStats.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_QuadGeometry
#include <phoenix/geometry/QuadGeometry.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_types_WindowEvent
#include <snow/types/WindowEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_edafb2596e925d6f_23_new,"luxe.Debug","new",0xf1f6bded,"luxe.Debug.new","luxe/Debug.hx",23,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_62_get_view,"luxe.Debug","get_view",0xa5fdc141,"luxe.Debug.get_view","luxe/Debug.hx",62,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_81_start,"luxe.Debug","start",0x566e9f2f,"luxe.Debug.start","luxe/Debug.hx",81,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_90_end,"luxe.Debug","end",0xf1eff168,"luxe.Debug.end","luxe/Debug.hx",90,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_99_init,"luxe.Debug","init",0xc2a828e3,"luxe.Debug.init","luxe/Debug.hx",99,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_169_create_debug_console,"luxe.Debug","create_debug_console",0x55dabe3b,"luxe.Debug.create_debug_console","luxe/Debug.hx",169,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_121_create_debug_console,"luxe.Debug","create_debug_console",0x55dabe3b,"luxe.Debug.create_debug_console","luxe/Debug.hx",121,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_199_render,"luxe.Debug","render",0x498bb3e9,"luxe.Debug.render","luxe/Debug.hx",199,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_250_mouseup,"luxe.Debug","mouseup",0x521047cd,"luxe.Debug.mouseup","luxe/Debug.hx",250,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_258_mousedown,"luxe.Debug","mousedown",0x214e9a54,"luxe.Debug.mousedown","luxe/Debug.hx",258,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_266_mousemove,"luxe.Debug","mousemove",0x27418503,"luxe.Debug.mousemove","luxe/Debug.hx",266,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_274_mousewheel,"luxe.Debug","mousewheel",0xef674669,"luxe.Debug.mousewheel","luxe/Debug.hx",274,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_282_touchup,"luxe.Debug","touchup",0x6a9563e7,"luxe.Debug.touchup","luxe/Debug.hx",282,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_308_touchdown,"luxe.Debug","touchdown",0x3a6670ee,"luxe.Debug.touchdown","luxe/Debug.hx",308,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_316_touchmove,"luxe.Debug","touchmove",0x40595b9d,"luxe.Debug.touchmove","luxe/Debug.hx",316,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_325_keyup,"luxe.Debug","keyup",0xb1620087,"luxe.Debug.keyup","luxe/Debug.hx",325,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_343_keydown,"luxe.Debug","keydown",0x430b758e,"luxe.Debug.keydown","luxe/Debug.hx",343,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_375_refresh,"luxe.Debug","refresh",0x7ebe11e8,"luxe.Debug.refresh","luxe/Debug.hx",375,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_382_switch_view,"luxe.Debug","switch_view",0x7281325d,"luxe.Debug.switch_view","luxe/Debug.hx",382,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_406_set_visible,"luxe.Debug","set_visible",0x445aa222,"luxe.Debug.set_visible","luxe/Debug.hx",406,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_439_destroy,"luxe.Debug","destroy",0xb6236507,"luxe.Debug.destroy","luxe/Debug.hx",439,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_453_process,"luxe.Debug","process",0x82e7da7c,"luxe.Debug.process","luxe/Debug.hx",453,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_220_internal_trace,"luxe.Debug","internal_trace",0x7eeb5c56,"luxe.Debug.internal_trace","luxe/Debug.hx",220,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_194_boot,"luxe.Debug","boot",0xbe087205,"luxe.Debug.boot","luxe/Debug.hx",194,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_215_boot,"luxe.Debug","boot",0xbe087205,"luxe.Debug.boot","luxe/Debug.hx",215,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_217_boot,"luxe.Debug","boot",0xbe087205,"luxe.Debug.boot","luxe/Debug.hx",217,0xe4198724)
HX_LOCAL_STACK_FRAME(_hx_pos_edafb2596e925d6f_218_boot,"luxe.Debug","boot",0xbe087205,"luxe.Debug.boot","luxe/Debug.hx",218,0xe4198724)
namespace luxe{

void Debug_obj::__construct( ::luxe::Engine _app){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_23_new)
HXLINE( 404)		this->last_cursor_grab = false;
HXLINE(  51)		this->profiling = false;
HXLINE(  50)		this->profile_path = HX_("profile.txt",ab,d0,4f,c6);
HXLINE(  43)		this->last_view_index = (int)0;
HXLINE(  42)		this->current_view_index = (int)0;
HXLINE(  39)		this->dt_average_count = (int)0;
HXLINE(  38)		this->dt_average_span = (int)60;
HXLINE(  37)		this->dt_average_accum = ((Float)0);
HXLINE(  36)		this->dt_average = ((Float)0);
HXLINE(  26)		this->visible = false;
HXLINE(  55)		this->app = _app;
            	}

Dynamic Debug_obj::__CreateEmpty() { return new Debug_obj; }

void *Debug_obj::_hx_vtable = 0;

Dynamic Debug_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Debug_obj > _hx_result = new Debug_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Debug_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6791b099;
}

 ::Dynamic Debug_obj::get_view(::String _name){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_62_get_view)
HXLINE(  64)		{
HXLINE(  64)			int _g = (int)0;
HXDLIN(  64)			::Array< ::Dynamic> _g1 = ::luxe::Debug_obj::views;
HXDLIN(  64)			while((_g < _g1->length)){
HXLINE(  64)				 ::luxe::debug::DebugView view = _g1->__get(_g).StaticCast<  ::luxe::debug::DebugView >();
HXDLIN(  64)				_g = (_g + (int)1);
HXLINE(  66)				if ((view->get_name() == _name)) {
HXLINE(  67)					return view;
            				}
            			}
            		}
HXLINE(  72)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,get_view,return )

void Debug_obj::start(::String _name, ::Dynamic _max){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_81_start)
HXDLIN(  81)		if (!(this->app->headless)) {
HXLINE(  82)			::luxe::debug::ProfilerDebugView_obj::start(_name,_max);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Debug_obj,start,(void))

void Debug_obj::end(::String _name){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_90_end)
HXDLIN(  90)		if (!(this->app->headless)) {
HXLINE(  91)			::luxe::debug::ProfilerDebugView_obj::end(_name);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,end,(void))

void Debug_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_edafb2596e925d6f_99_init)
HXLINE( 101)		::luxe::Debug_obj::views = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 105)		::Array< ::Dynamic> _hx_tmp = ::luxe::Debug_obj::views;
HXDLIN( 105)		_hx_tmp->push( ::luxe::debug::TraceDebugView_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this)));
HXLINE( 106)		::Array< ::Dynamic> _hx_tmp1 = ::luxe::Debug_obj::views;
HXDLIN( 106)		_hx_tmp1->push( ::luxe::debug::StatsDebugView_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this)));
HXLINE( 108)		::Array< ::Dynamic> _hx_tmp2 = ::luxe::Debug_obj::views;
HXDLIN( 108)		_hx_tmp2->push( ::luxe::debug::ProfilerDebugView_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this)));
HXLINE( 109)		::Array< ::Dynamic> _hx_tmp3 = ::luxe::Debug_obj::views;
HXDLIN( 109)		_hx_tmp3->push( ::luxe::debug::SceneDebugView_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this)));
HXLINE( 111)		this->current_view = ::luxe::Debug_obj::views->__get((int)0).StaticCast<  ::luxe::debug::DebugView >();
HXLINE( 115)		::haxe::Log_obj::trace = ::luxe::Debug_obj::internal_trace_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,init,(void))

void Debug_obj::create_debug_console(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::luxe::Debug,_gthis) HXARGC(1)
            		void _hx_run( ::snow::types::WindowEvent _event){
            			HX_GC_STACKFRAME(&_hx_pos_edafb2596e925d6f_169_create_debug_console)
HXLINE( 171)			 ::Dynamic _w = _event->x;
HXLINE( 172)			 ::Dynamic _h = _event->y;
HXLINE( 174)			{
HXLINE( 174)				 ::phoenix::Vector _this1 = _gthis->padding;
HXDLIN( 174)				Float _x = (_w * ((Float)0.05));
HXDLIN( 174)				Float _y = (_h * ((Float)0.05));
HXDLIN( 174)				bool prev = _this1->ignore_listeners;
HXDLIN( 174)				_this1->ignore_listeners = true;
HXDLIN( 174)				{
HXLINE( 174)					_this1->x = _x;
HXDLIN( 174)					if (!(_this1->_construct)) {
HXLINE( 174)						bool _hx_tmp8;
HXDLIN( 174)						if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 174)							_hx_tmp8 = !(_this1->ignore_listeners);
            						}
            						else {
HXLINE( 174)							_hx_tmp8 = false;
            						}
HXDLIN( 174)						if (_hx_tmp8) {
HXLINE( 174)							_this1->listen_x(_x);
            						}
            					}
            				}
HXDLIN( 174)				{
HXLINE( 174)					_this1->y = _y;
HXDLIN( 174)					if (!(_this1->_construct)) {
HXLINE( 174)						bool _hx_tmp9;
HXDLIN( 174)						if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 174)							_hx_tmp9 = !(_this1->ignore_listeners);
            						}
            						else {
HXLINE( 174)							_hx_tmp9 = false;
            						}
HXDLIN( 174)						if (_hx_tmp9) {
HXLINE( 174)							_this1->listen_y(_y);
            						}
            					}
            				}
HXDLIN( 174)				_this1->ignore_listeners = prev;
HXDLIN( 174)				bool _hx_tmp10;
HXDLIN( 174)				if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 174)					_hx_tmp10 = !(_this1->ignore_listeners);
            				}
            				else {
HXLINE( 174)					_hx_tmp10 = false;
            				}
HXDLIN( 174)				if (_hx_tmp10) {
HXLINE( 174)					_this1->listen_x(_this1->x);
            				}
HXDLIN( 174)				bool _hx_tmp11;
HXDLIN( 174)				if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 174)					_hx_tmp11 = !(_this1->ignore_listeners);
            				}
            				else {
HXLINE( 174)					_hx_tmp11 = false;
            				}
HXDLIN( 174)				if (_hx_tmp11) {
HXLINE( 174)					_this1->listen_y(_this1->y);
            				}
            			}
HXLINE( 176)			_gthis->overlay->resize_xy(_w,_h);
HXLINE( 177)			 ::phoenix::Camera _gthis1 = _gthis->view;
HXDLIN( 177)			_gthis1->set_viewport( ::phoenix::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,_w,_h));
HXLINE( 178)			 ::luxe::debug::Inspector _gthis2 = _gthis->inspector;
HXDLIN( 178)			Float _hx_tmp12 = (_w - (_gthis->padding->x * (int)2));
HXDLIN( 178)			_gthis2->set_size( ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp12,(_h - (_gthis->padding->y * (int)2)),null(),null()));
HXLINE( 179)			 ::luxe::debug::Inspector _gthis3 = _gthis->inspector;
HXDLIN( 179)			_gthis3->set_pos( ::phoenix::Vector_obj::__alloc( HX_CTX ,_gthis->padding->x,_gthis->padding->y,null(),null()));
HXLINE( 181)			{
HXLINE( 181)				int _g = (int)0;
HXDLIN( 181)				::Array< ::Dynamic> _g1 = ::luxe::Debug_obj::views;
HXDLIN( 181)				while((_g < _g1->length)){
HXLINE( 181)					 ::luxe::debug::DebugView view = _g1->__get(_g).StaticCast<  ::luxe::debug::DebugView >();
HXDLIN( 181)					_g = (_g + (int)1);
HXLINE( 182)					view->onwindowsized(_event);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_edafb2596e925d6f_121_create_debug_console)
HXDLIN( 121)		 ::luxe::Debug _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 125)		this->app->emitter->on((int)13,this->keyup_dyn());
HXLINE( 126)		this->app->emitter->on((int)12,this->keydown_dyn());
HXLINE( 127)		this->app->emitter->on((int)18,this->mouseup_dyn());
HXLINE( 128)		this->app->emitter->on((int)17,this->mousedown_dyn());
HXLINE( 129)		this->app->emitter->on((int)19,this->mousemove_dyn());
HXLINE( 130)		this->app->emitter->on((int)20,this->mousewheel_dyn());
HXLINE( 131)		this->app->emitter->on((int)22,this->touchup_dyn());
HXLINE( 132)		this->app->emitter->on((int)21,this->touchdown_dyn());
HXLINE( 133)		this->app->emitter->on((int)23,this->touchmove_dyn());
HXLINE( 136)		 ::phoenix::Renderer _hx_tmp = this->app->renderer;
HXDLIN( 136)		this->batcher =  ::phoenix::Batcher_obj::__alloc( HX_CTX ,_hx_tmp,HX_("debug_batcher",7b,d9,ce,3f),::Math_obj::floor(::Math_obj::pow((int)2,(int)20)));
HXLINE( 137)		this->batcher->set_show_stats((int)0);
HXLINE( 140)		this->view =  ::phoenix::Camera_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("camera_name",65,11,29,5d),HX_("debug_batcher_camera",29,74,ee,d9))));
HXLINE( 142)		this->batcher->view = this->view;
HXLINE( 144)		{
HXLINE( 144)			 ::phoenix::Batcher _this = this->batcher;
HXDLIN( 144)			_this->layer = (int)999;
HXDLIN( 144)			_this->renderer->batchers->sort(_this->renderer->sort_batchers_dyn());
            		}
HXLINE( 149)		 ::Dynamic _hx_tmp1 = this->app->screen->get_w();
HXDLIN( 149)		 ::Dynamic _hx_tmp2 = this->app->screen->get_h();
HXLINE( 146)		this->overlay =  ::phoenix::geometry::QuadGeometry_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("visible",72,78,24,a3),false)
            			->setFixed(1,HX_("batcher",a7,22,10,c0),this->batcher)
            			->setFixed(2,HX_("depth",03,f1,29,d7),(int)999)
            			->setFixed(3,HX_("h",68,00,00,00),_hx_tmp2)
            			->setFixed(4,HX_("w",77,00,00,00),_hx_tmp1)
            			->setFixed(5,HX_("x",78,00,00,00),(int)0)
            			->setFixed(6,HX_("y",79,00,00,00),(int)0)
            			->setFixed(7,HX_("id",db,5b,00,00),HX_("debug.overlay",75,22,27,36))
            			->setFixed(8,HX_("color",63,71,5c,4a), ::phoenix::Color_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,((Float)0.8)))));
HXLINE( 156)		this->overlay->set_locked(true);
HXLINE( 159)		Float _hx_tmp3 = (this->app->screen->get_w() * ((Float)0.05));
HXDLIN( 159)		this->padding =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp3,(this->app->screen->get_h() * ((Float)0.05)),null(),null());
HXLINE( 161)		 ::phoenix::Vector _hx_tmp4 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,this->padding->x,this->padding->y,null(),null());
HXLINE( 162)		int _hx_tmp5 = this->app->screen->get_w();
HXDLIN( 162)		Float _hx_tmp6 = (_hx_tmp5 - (this->padding->x * (int)2));
HXDLIN( 162)		int _hx_tmp7 = this->app->screen->get_h();
HXLINE( 160)		this->inspector =  ::luxe::debug::Inspector_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("batcher",a7,22,10,c0),this->batcher)
            			->setFixed(1,HX_("pos",94,5d,55,00),_hx_tmp4)
            			->setFixed(2,HX_("size",c1,a0,53,4c), ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp6,(_hx_tmp7 - (this->padding->y * (int)2)),null(),null()))));
HXLINE( 167)		this->inspector->onrefresh = this->refresh_dyn();
HXLINE( 169)		this->app->emitter->on((int)31, ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 186)		{
HXLINE( 186)			int _g2 = (int)0;
HXDLIN( 186)			::Array< ::Dynamic> _g11 = ::luxe::Debug_obj::views;
HXDLIN( 186)			while((_g2 < _g11->length)){
HXLINE( 186)				 ::luxe::debug::DebugView view1 = _g11->__get(_g2).StaticCast<  ::luxe::debug::DebugView >();
HXDLIN( 186)				_g2 = (_g2 + (int)1);
HXLINE( 187)				view1->create();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,create_debug_console,(void))

void Debug_obj::render(){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_199_render)
HXDLIN( 199)		if (this->visible) {
HXLINE( 201)			this->start(::luxe::Debug_obj::debug_batch_tag,null());
HXLINE( 203)			{
HXLINE( 203)				 ::phoenix::Batcher _this = this->batcher;
HXDLIN( 203)				if ((_this->name != HX_("",00,00,00,00))) {
HXLINE( 203)					::Luxe_obj::debug->start(_this->name,null());
            				}
HXDLIN( 203)				_this->draw_calls = (int)0;
HXDLIN( 203)				_this->vert_count = (int)0;
HXDLIN( 203)				_this->emitter->emit((int)1,_this);
HXDLIN( 203)				{
HXLINE( 203)					_this->view->process();
HXDLIN( 203)					_this->renderer->state->viewport(_this->view->viewport->x,_this->view->viewport->y,_this->view->viewport->w,_this->view->viewport->h);
            				}
HXDLIN( 203)				_this->batch(false);
HXDLIN( 203)				_this->emitter->emit((int)2,_this);
HXDLIN( 203)				 ::phoenix::RendererStats _stats = _this->renderer->stats;
HXDLIN( 203)				 ::phoenix::RendererStats _stats1 = _stats;
HXDLIN( 203)				 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node = _this->geometry->root;
HXDLIN( 203)				int _hx_tmp;
HXDLIN( 203)				if (hx::IsNull( _node )) {
HXLINE( 203)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE( 203)					_hx_tmp = _node->nodecount;
            				}
HXDLIN( 203)				_stats1->geometry_count = (_stats1->geometry_count + (_hx_tmp * _this->show_stats));
HXDLIN( 203)				 ::phoenix::RendererStats _stats2 = _stats;
HXDLIN( 203)				_stats2->dynamic_batched_count = (_stats2->dynamic_batched_count + (_this->dynamic_batched_count * _this->show_stats));
HXDLIN( 203)				 ::phoenix::RendererStats _stats3 = _stats;
HXDLIN( 203)				_stats3->static_batched_count = (_stats3->static_batched_count + (_this->static_batched_count * _this->show_stats));
HXDLIN( 203)				 ::phoenix::RendererStats _stats4 = _stats;
HXDLIN( 203)				_stats4->visible_count = (_stats4->visible_count + (_this->visible_count * _this->show_stats));
HXDLIN( 203)				 ::phoenix::RendererStats _stats5 = _stats;
HXDLIN( 203)				_stats5->draw_calls = (_stats5->draw_calls + (_this->draw_calls * _this->show_stats));
HXDLIN( 203)				 ::phoenix::RendererStats _stats6 = _stats;
HXDLIN( 203)				_stats6->vert_count = (_stats6->vert_count + (_this->vert_count * _this->show_stats));
HXDLIN( 203)				if ((_this->name != HX_("",00,00,00,00))) {
HXLINE( 203)					::Luxe_obj::debug->end(_this->name);
            				}
            			}
HXLINE( 205)			this->end(::luxe::Debug_obj::debug_batch_tag);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,render,(void))

void Debug_obj::mouseup( ::luxe::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_250_mouseup)
HXDLIN( 250)		if (this->visible) {
HXLINE( 251)			int _g = (int)0;
HXDLIN( 251)			::Array< ::Dynamic> _g1 = ::luxe::Debug_obj::views;
HXDLIN( 251)			while((_g < _g1->length)){
HXLINE( 251)				 ::luxe::debug::DebugView view = _g1->__get(_g).StaticCast<  ::luxe::debug::DebugView >();
HXDLIN( 251)				_g = (_g + (int)1);
HXLINE( 252)				view->onmouseup(e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,mouseup,(void))

void Debug_obj::mousedown( ::luxe::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_258_mousedown)
HXDLIN( 258)		if (this->visible) {
HXLINE( 259)			int _g = (int)0;
HXDLIN( 259)			::Array< ::Dynamic> _g1 = ::luxe::Debug_obj::views;
HXDLIN( 259)			while((_g < _g1->length)){
HXLINE( 259)				 ::luxe::debug::DebugView view = _g1->__get(_g).StaticCast<  ::luxe::debug::DebugView >();
HXDLIN( 259)				_g = (_g + (int)1);
HXLINE( 260)				view->onmousedown(e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,mousedown,(void))

void Debug_obj::mousemove( ::luxe::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_266_mousemove)
HXDLIN( 266)		if (this->visible) {
HXLINE( 267)			int _g = (int)0;
HXDLIN( 267)			::Array< ::Dynamic> _g1 = ::luxe::Debug_obj::views;
HXDLIN( 267)			while((_g < _g1->length)){
HXLINE( 267)				 ::luxe::debug::DebugView view = _g1->__get(_g).StaticCast<  ::luxe::debug::DebugView >();
HXDLIN( 267)				_g = (_g + (int)1);
HXLINE( 268)				view->onmousemove(e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,mousemove,(void))

void Debug_obj::mousewheel( ::luxe::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_274_mousewheel)
HXDLIN( 274)		if (this->visible) {
HXLINE( 275)			int _g = (int)0;
HXDLIN( 275)			::Array< ::Dynamic> _g1 = ::luxe::Debug_obj::views;
HXDLIN( 275)			while((_g < _g1->length)){
HXLINE( 275)				 ::luxe::debug::DebugView view = _g1->__get(_g).StaticCast<  ::luxe::debug::DebugView >();
HXDLIN( 275)				_g = (_g + (int)1);
HXLINE( 276)				view->onmousewheel(e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,mousewheel,(void))

void Debug_obj::touchup( ::luxe::TouchEvent e){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_282_touchup)
HXDLIN( 282)		if (this->visible) {
HXLINE( 283)			int _g = (int)0;
HXDLIN( 283)			::Array< ::Dynamic> _g1 = ::luxe::Debug_obj::views;
HXDLIN( 283)			while((_g < _g1->length)){
HXLINE( 283)				 ::luxe::debug::DebugView view = _g1->__get(_g).StaticCast<  ::luxe::debug::DebugView >();
HXDLIN( 283)				_g = (_g + (int)1);
HXLINE( 284)				view->ontouchup(e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,touchup,(void))

void Debug_obj::touchdown( ::luxe::TouchEvent e){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_308_touchdown)
HXDLIN( 308)		if (this->visible) {
HXLINE( 309)			int _g = (int)0;
HXDLIN( 309)			::Array< ::Dynamic> _g1 = ::luxe::Debug_obj::views;
HXDLIN( 309)			while((_g < _g1->length)){
HXLINE( 309)				 ::luxe::debug::DebugView view = _g1->__get(_g).StaticCast<  ::luxe::debug::DebugView >();
HXDLIN( 309)				_g = (_g + (int)1);
HXLINE( 310)				view->ontouchdown(e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,touchdown,(void))

void Debug_obj::touchmove( ::luxe::TouchEvent e){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_316_touchmove)
HXDLIN( 316)		if (this->visible) {
HXLINE( 317)			int _g = (int)0;
HXDLIN( 317)			::Array< ::Dynamic> _g1 = ::luxe::Debug_obj::views;
HXDLIN( 317)			while((_g < _g1->length)){
HXLINE( 317)				 ::luxe::debug::DebugView view = _g1->__get(_g).StaticCast<  ::luxe::debug::DebugView >();
HXDLIN( 317)				_g = (_g + (int)1);
HXLINE( 318)				view->ontouchmove(e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,touchmove,(void))

void Debug_obj::keyup( ::luxe::KeyEvent e){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_325_keyup)
HXDLIN( 325)		if (this->visible) {
HXLINE( 326)			int _g = (int)0;
HXDLIN( 326)			::Array< ::Dynamic> _g1 = ::luxe::Debug_obj::views;
HXDLIN( 326)			while((_g < _g1->length)){
HXLINE( 326)				 ::luxe::debug::DebugView view = _g1->__get(_g).StaticCast<  ::luxe::debug::DebugView >();
HXDLIN( 326)				_g = (_g + (int)1);
HXLINE( 327)				view->onkeyup(e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,keyup,(void))

void Debug_obj::keydown( ::luxe::KeyEvent e){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_343_keydown)
HXLINE( 345)		if ((e->scancode == (int)53)) {
HXLINE( 346)			this->set_visible(!(this->visible));
            		}
HXLINE( 349)		if (this->visible) {
HXLINE( 351)			bool _hx_tmp;
HXDLIN( 351)			if ((e->keycode == (int)49)) {
HXLINE( 351)				_hx_tmp = this->visible;
            			}
            			else {
HXLINE( 351)				_hx_tmp = false;
            			}
HXDLIN( 351)			if (_hx_tmp) {
HXLINE( 352)				this->switch_view();
            			}
HXLINE( 355)			{
HXLINE( 355)				int _g = (int)0;
HXDLIN( 355)				::Array< ::Dynamic> _g1 = ::luxe::Debug_obj::views;
HXDLIN( 355)				while((_g < _g1->length)){
HXLINE( 355)					 ::luxe::debug::DebugView view = _g1->__get(_g).StaticCast<  ::luxe::debug::DebugView >();
HXDLIN( 355)					_g = (_g + (int)1);
HXLINE( 356)					view->onkeydown(e);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,keydown,(void))

void Debug_obj::refresh(){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_375_refresh)
HXDLIN( 375)		if (hx::IsNotNull( this->current_view )) {
HXLINE( 376)			this->current_view->refresh();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,refresh,(void))

void Debug_obj::switch_view(){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_382_switch_view)
HXLINE( 385)		this->last_view_index = this->current_view_index;
HXLINE( 387)		this->current_view_index++;
HXLINE( 390)		int _hx_tmp = this->current_view_index;
HXDLIN( 390)		if ((_hx_tmp > (::luxe::Debug_obj::views->length - (int)1))) {
HXLINE( 391)			this->current_view_index = (int)0;
            		}
HXLINE( 395)		::luxe::Debug_obj::views->__get(this->last_view_index).StaticCast<  ::luxe::debug::DebugView >()->hide();
HXLINE( 397)		this->current_view = ::luxe::Debug_obj::views->__get(this->current_view_index).StaticCast<  ::luxe::debug::DebugView >();
HXLINE( 400)		this->current_view->show();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,switch_view,(void))

bool Debug_obj::set_visible(bool _value){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_406_set_visible)
HXLINE( 412)		this->visible = _value;
HXLINE( 413)		this->overlay->set_visible(this->visible);
HXLINE( 415)		if (this->visible) {
HXLINE( 418)			this->last_cursor_grab = this->app->screen->cursor->get_grab();
HXLINE( 419)			this->app->screen->cursor->set_grab(false);
HXLINE( 421)			this->current_view->show();
HXLINE( 422)			this->inspector->show();
            		}
            		else {
HXLINE( 426)			if ((this->last_cursor_grab != false)) {
HXLINE( 427)				this->app->screen->cursor->set_grab(this->last_cursor_grab);
            			}
HXLINE( 430)			this->current_view->hide();
HXLINE( 431)			this->inspector->hide();
            		}
HXLINE( 435)		return this->visible;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,set_visible,return )

void Debug_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_439_destroy)
HXLINE( 441)		this->app->emitter->off((int)13,this->keyup_dyn());
HXLINE( 442)		this->app->emitter->off((int)12,this->keydown_dyn());
HXLINE( 443)		this->app->emitter->off((int)18,this->mouseup_dyn());
HXLINE( 444)		this->app->emitter->off((int)17,this->mousedown_dyn());
HXLINE( 445)		this->app->emitter->off((int)19,this->mousemove_dyn());
HXLINE( 446)		this->app->emitter->off((int)20,this->mousewheel_dyn());
HXLINE( 449)		::luxe::Debug_obj::shut_down = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,destroy,(void))

void Debug_obj::process(){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_453_process)
HXLINE( 455)		 ::luxe::Debug _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 455)		_hx_tmp->dt_average_accum = (_hx_tmp->dt_average_accum + this->app->frame_delta);
HXLINE( 456)		this->dt_average_count++;
HXLINE( 458)		int _hx_tmp1 = this->dt_average_count;
HXDLIN( 458)		if ((_hx_tmp1 == (this->dt_average_span - (int)1))) {
HXLINE( 459)			this->dt_average = ((Float)this->dt_average_accum / (Float)this->dt_average_span);
HXLINE( 460)			this->dt_average_accum = this->dt_average;
HXLINE( 461)			this->dt_average_count = (int)0;
            		}
HXLINE( 464)		if (!(this->visible)) {
HXLINE( 465)			return;
            		}
HXLINE( 469)		 ::luxe::Text _hx_tmp2 = this->inspector->title;
HXDLIN( 469)		::String _hx_tmp3 = ((HX_("[",5b,00,00,00) + this->current_view->get_name()) + HX_("] / ",f4,48,91,3d));
HXDLIN( 469)		::String _hx_tmp4 = ((_hx_tmp3 + ::Math_obj::round(((Float)(int)1 / (Float)this->dt_average))) + HX_(" / ",31,71,18,00));
HXDLIN( 469)		Float n = ::Math_obj::pow((int)10,(int)5);
HXDLIN( 469)		::String _hx_tmp5 = ((_hx_tmp4 + ((Float)::Std_obj::_hx_int((this->app->frame_delta * n)) / (Float)n)) + HX_(" / ",31,71,18,00));
HXDLIN( 469)		Float n1 = ::Math_obj::pow((int)10,(int)5);
HXDLIN( 469)		_hx_tmp2->set_text((_hx_tmp5 + ((Float)::Std_obj::_hx_int((this->dt_average * n1)) / (Float)n1)));
HXLINE( 471)		{
HXLINE( 471)			int _g = (int)0;
HXDLIN( 471)			::Array< ::Dynamic> _g1 = ::luxe::Debug_obj::views;
HXDLIN( 471)			while((_g < _g1->length)){
HXLINE( 471)				 ::luxe::debug::DebugView view = _g1->__get(_g).StaticCast<  ::luxe::debug::DebugView >();
HXDLIN( 471)				_g = (_g + (int)1);
HXLINE( 472)				view->process();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,process,(void))

::Array< ::Dynamic> Debug_obj::views;

::String Debug_obj::debug_batch_tag;

::Array< ::Dynamic> Debug_obj::trace_callbacks;

bool Debug_obj::shut_down;

bool Debug_obj::tracing;

void Debug_obj::internal_trace( ::Dynamic _value, ::Dynamic _info){
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_220_internal_trace)
HXLINE( 222)		if ((::luxe::Debug_obj::tracing != false)) {
HXLINE( 222)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion((HX_("tracing == false",c1,8b,93,ba) + ((HX_(" ( ",18,6b,18,00) + HX_("luxe.Debug: calling trace from a trace callback is an infinite loop!",31,c6,c8,3e)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 223)		::luxe::Debug_obj::tracing = true;
HXLINE( 225)		::String _out = (HX_("",00,00,00,00) + ::Std_obj::string(_value));
HXLINE( 227)		bool _hx_tmp;
HXDLIN( 227)		if (hx::IsNotNull( _info )) {
HXLINE( 227)			_hx_tmp = hx::IsNotNull( ( (::cpp::VirtualArray)(_info->__Field(HX_("customParams",d7,51,18,ed),hx::paccDynamic)) ) );
            		}
            		else {
HXLINE( 227)			_hx_tmp = false;
            		}
HXDLIN( 227)		if (_hx_tmp) {
HXLINE( 228)			_out = (_out + (HX_(" ",20,00,00,00) + ( (::cpp::VirtualArray)(_info->__Field(HX_("customParams",d7,51,18,ed),hx::paccDynamic)) )->join(HX_(" ",20,00,00,00))));
            		}
HXLINE( 232)		__trace(_out,_info);
HXLINE( 237)		if (!(::luxe::Debug_obj::shut_down)) {
HXLINE( 238)			int _g = (int)0;
HXDLIN( 238)			::Array< ::Dynamic> _g1 = ::luxe::Debug_obj::trace_callbacks;
HXDLIN( 238)			while((_g < _g1->length)){
HXLINE( 238)				 ::Dynamic _callback = _g1->__get(_g);
HXDLIN( 238)				_g = (_g + (int)1);
HXLINE( 239)				_callback(_value,_info);
            			}
            		}
HXLINE( 243)		::luxe::Debug_obj::tracing = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Debug_obj,internal_trace,(void))


hx::ObjectPtr< Debug_obj > Debug_obj::__new( ::luxe::Engine _app) {
	hx::ObjectPtr< Debug_obj > __this = new Debug_obj();
	__this->__construct(_app);
	return __this;
}

hx::ObjectPtr< Debug_obj > Debug_obj::__alloc(hx::Ctx *_hx_ctx, ::luxe::Engine _app) {
	Debug_obj *__this = (Debug_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Debug_obj), true, "luxe.Debug"));
	*(void **)__this = Debug_obj::_hx_vtable;
	__this->__construct(_app);
	return __this;
}

Debug_obj::Debug_obj()
{
}

void Debug_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Debug);
	HX_MARK_MEMBER_NAME(app,"app");
	HX_MARK_MEMBER_NAME(visible,"visible");
	HX_MARK_MEMBER_NAME(inspector,"inspector");
	HX_MARK_MEMBER_NAME(overlay,"overlay");
	HX_MARK_MEMBER_NAME(batcher,"batcher");
	HX_MARK_MEMBER_NAME(view,"view");
	HX_MARK_MEMBER_NAME(debug_font,"debug_font");
	HX_MARK_MEMBER_NAME(dt_average,"dt_average");
	HX_MARK_MEMBER_NAME(dt_average_accum,"dt_average_accum");
	HX_MARK_MEMBER_NAME(dt_average_span,"dt_average_span");
	HX_MARK_MEMBER_NAME(dt_average_count,"dt_average_count");
	HX_MARK_MEMBER_NAME(current_view_index,"current_view_index");
	HX_MARK_MEMBER_NAME(last_view_index,"last_view_index");
	HX_MARK_MEMBER_NAME(current_view,"current_view");
	HX_MARK_MEMBER_NAME(padding,"padding");
	HX_MARK_MEMBER_NAME(profile_path,"profile_path");
	HX_MARK_MEMBER_NAME(profiling,"profiling");
	HX_MARK_MEMBER_NAME(last_cursor_grab,"last_cursor_grab");
	HX_MARK_END_CLASS();
}

void Debug_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(app,"app");
	HX_VISIT_MEMBER_NAME(visible,"visible");
	HX_VISIT_MEMBER_NAME(inspector,"inspector");
	HX_VISIT_MEMBER_NAME(overlay,"overlay");
	HX_VISIT_MEMBER_NAME(batcher,"batcher");
	HX_VISIT_MEMBER_NAME(view,"view");
	HX_VISIT_MEMBER_NAME(debug_font,"debug_font");
	HX_VISIT_MEMBER_NAME(dt_average,"dt_average");
	HX_VISIT_MEMBER_NAME(dt_average_accum,"dt_average_accum");
	HX_VISIT_MEMBER_NAME(dt_average_span,"dt_average_span");
	HX_VISIT_MEMBER_NAME(dt_average_count,"dt_average_count");
	HX_VISIT_MEMBER_NAME(current_view_index,"current_view_index");
	HX_VISIT_MEMBER_NAME(last_view_index,"last_view_index");
	HX_VISIT_MEMBER_NAME(current_view,"current_view");
	HX_VISIT_MEMBER_NAME(padding,"padding");
	HX_VISIT_MEMBER_NAME(profile_path,"profile_path");
	HX_VISIT_MEMBER_NAME(profiling,"profiling");
	HX_VISIT_MEMBER_NAME(last_cursor_grab,"last_cursor_grab");
}

hx::Val Debug_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { return hx::Val( app ); }
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"view") ) { return hx::Val( view ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyup") ) { return hx::Val( keyup_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"visible") ) { return hx::Val( visible ); }
		if (HX_FIELD_EQ(inName,"overlay") ) { return hx::Val( overlay ); }
		if (HX_FIELD_EQ(inName,"batcher") ) { return hx::Val( batcher ); }
		if (HX_FIELD_EQ(inName,"padding") ) { return hx::Val( padding ); }
		if (HX_FIELD_EQ(inName,"mouseup") ) { return hx::Val( mouseup_dyn() ); }
		if (HX_FIELD_EQ(inName,"touchup") ) { return hx::Val( touchup_dyn() ); }
		if (HX_FIELD_EQ(inName,"keydown") ) { return hx::Val( keydown_dyn() ); }
		if (HX_FIELD_EQ(inName,"refresh") ) { return hx::Val( refresh_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"process") ) { return hx::Val( process_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_view") ) { return hx::Val( get_view_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inspector") ) { return hx::Val( inspector ); }
		if (HX_FIELD_EQ(inName,"profiling") ) { return hx::Val( profiling ); }
		if (HX_FIELD_EQ(inName,"mousedown") ) { return hx::Val( mousedown_dyn() ); }
		if (HX_FIELD_EQ(inName,"mousemove") ) { return hx::Val( mousemove_dyn() ); }
		if (HX_FIELD_EQ(inName,"touchdown") ) { return hx::Val( touchdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"touchmove") ) { return hx::Val( touchmove_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"debug_font") ) { return hx::Val( debug_font ); }
		if (HX_FIELD_EQ(inName,"dt_average") ) { return hx::Val( dt_average ); }
		if (HX_FIELD_EQ(inName,"mousewheel") ) { return hx::Val( mousewheel_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"switch_view") ) { return hx::Val( switch_view_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"current_view") ) { return hx::Val( current_view ); }
		if (HX_FIELD_EQ(inName,"profile_path") ) { return hx::Val( profile_path ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dt_average_span") ) { return hx::Val( dt_average_span ); }
		if (HX_FIELD_EQ(inName,"last_view_index") ) { return hx::Val( last_view_index ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"dt_average_accum") ) { return hx::Val( dt_average_accum ); }
		if (HX_FIELD_EQ(inName,"dt_average_count") ) { return hx::Val( dt_average_count ); }
		if (HX_FIELD_EQ(inName,"last_cursor_grab") ) { return hx::Val( last_cursor_grab ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"current_view_index") ) { return hx::Val( current_view_index ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"create_debug_console") ) { return hx::Val( create_debug_console_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Debug_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"views") ) { outValue = ( views ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tracing") ) { outValue = ( tracing ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"shut_down") ) { outValue = ( shut_down ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"internal_trace") ) { outValue = internal_trace_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"debug_batch_tag") ) { outValue = ( debug_batch_tag ); return true; }
		if (HX_FIELD_EQ(inName,"trace_callbacks") ) { outValue = ( trace_callbacks ); return true; }
	}
	return false;
}

hx::Val Debug_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { app=inValue.Cast<  ::luxe::Engine >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"view") ) { view=inValue.Cast<  ::phoenix::Camera >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_visible(inValue.Cast< bool >()) );visible=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"overlay") ) { overlay=inValue.Cast<  ::phoenix::geometry::QuadGeometry >(); return inValue; }
		if (HX_FIELD_EQ(inName,"batcher") ) { batcher=inValue.Cast<  ::phoenix::Batcher >(); return inValue; }
		if (HX_FIELD_EQ(inName,"padding") ) { padding=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inspector") ) { inspector=inValue.Cast<  ::luxe::debug::Inspector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"profiling") ) { profiling=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"debug_font") ) { debug_font=inValue.Cast<  ::phoenix::BitmapFont >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dt_average") ) { dt_average=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"current_view") ) { current_view=inValue.Cast<  ::luxe::debug::DebugView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"profile_path") ) { profile_path=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dt_average_span") ) { dt_average_span=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"last_view_index") ) { last_view_index=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"dt_average_accum") ) { dt_average_accum=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dt_average_count") ) { dt_average_count=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"last_cursor_grab") ) { last_cursor_grab=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"current_view_index") ) { current_view_index=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Debug_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"views") ) { views=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tracing") ) { tracing=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"shut_down") ) { shut_down=ioValue.Cast< bool >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"debug_batch_tag") ) { debug_batch_tag=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"trace_callbacks") ) { trace_callbacks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void Debug_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("app","\xa1","\xfc","\x49","\x00"));
	outFields->push(HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"));
	outFields->push(HX_HCSTRING("inspector","\xf7","\xf9","\x0e","\xf8"));
	outFields->push(HX_HCSTRING("overlay","\x90","\x43","\x10","\xa9"));
	outFields->push(HX_HCSTRING("batcher","\xa7","\x22","\x10","\xc0"));
	outFields->push(HX_HCSTRING("view","\x65","\x32","\x4f","\x4e"));
	outFields->push(HX_HCSTRING("debug_font","\x7b","\xda","\x87","\x62"));
	outFields->push(HX_HCSTRING("dt_average","\x6e","\x32","\x0e","\x4f"));
	outFields->push(HX_HCSTRING("dt_average_accum","\x08","\xea","\x79","\x34"));
	outFields->push(HX_HCSTRING("dt_average_span","\x7b","\x35","\xe8","\x30"));
	outFields->push(HX_HCSTRING("dt_average_count","\xfe","\x44","\x43","\x63"));
	outFields->push(HX_HCSTRING("current_view_index","\xfe","\x87","\xa7","\x2c"));
	outFields->push(HX_HCSTRING("last_view_index","\x01","\x45","\x48","\x57"));
	outFields->push(HX_HCSTRING("current_view","\x6b","\xc3","\x3e","\xb5"));
	outFields->push(HX_HCSTRING("padding","\xd1","\x59","\x7d","\xd0"));
	outFields->push(HX_HCSTRING("profile_path","\xbb","\xe3","\x72","\xf3"));
	outFields->push(HX_HCSTRING("profiling","\xa6","\x0e","\x10","\x4f"));
	outFields->push(HX_HCSTRING("last_cursor_grab","\x6c","\xb6","\xf8","\xdd"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Debug_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::Engine*/ ,(int)offsetof(Debug_obj,app),HX_HCSTRING("app","\xa1","\xfc","\x49","\x00")},
	{hx::fsBool,(int)offsetof(Debug_obj,visible),HX_HCSTRING("visible","\x72","\x78","\x24","\xa3")},
	{hx::fsObject /*::luxe::debug::Inspector*/ ,(int)offsetof(Debug_obj,inspector),HX_HCSTRING("inspector","\xf7","\xf9","\x0e","\xf8")},
	{hx::fsObject /*::phoenix::geometry::QuadGeometry*/ ,(int)offsetof(Debug_obj,overlay),HX_HCSTRING("overlay","\x90","\x43","\x10","\xa9")},
	{hx::fsObject /*::phoenix::Batcher*/ ,(int)offsetof(Debug_obj,batcher),HX_HCSTRING("batcher","\xa7","\x22","\x10","\xc0")},
	{hx::fsObject /*::phoenix::Camera*/ ,(int)offsetof(Debug_obj,view),HX_HCSTRING("view","\x65","\x32","\x4f","\x4e")},
	{hx::fsObject /*::phoenix::BitmapFont*/ ,(int)offsetof(Debug_obj,debug_font),HX_HCSTRING("debug_font","\x7b","\xda","\x87","\x62")},
	{hx::fsFloat,(int)offsetof(Debug_obj,dt_average),HX_HCSTRING("dt_average","\x6e","\x32","\x0e","\x4f")},
	{hx::fsFloat,(int)offsetof(Debug_obj,dt_average_accum),HX_HCSTRING("dt_average_accum","\x08","\xea","\x79","\x34")},
	{hx::fsInt,(int)offsetof(Debug_obj,dt_average_span),HX_HCSTRING("dt_average_span","\x7b","\x35","\xe8","\x30")},
	{hx::fsInt,(int)offsetof(Debug_obj,dt_average_count),HX_HCSTRING("dt_average_count","\xfe","\x44","\x43","\x63")},
	{hx::fsInt,(int)offsetof(Debug_obj,current_view_index),HX_HCSTRING("current_view_index","\xfe","\x87","\xa7","\x2c")},
	{hx::fsInt,(int)offsetof(Debug_obj,last_view_index),HX_HCSTRING("last_view_index","\x01","\x45","\x48","\x57")},
	{hx::fsObject /*::luxe::debug::DebugView*/ ,(int)offsetof(Debug_obj,current_view),HX_HCSTRING("current_view","\x6b","\xc3","\x3e","\xb5")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Debug_obj,padding),HX_HCSTRING("padding","\xd1","\x59","\x7d","\xd0")},
	{hx::fsString,(int)offsetof(Debug_obj,profile_path),HX_HCSTRING("profile_path","\xbb","\xe3","\x72","\xf3")},
	{hx::fsBool,(int)offsetof(Debug_obj,profiling),HX_HCSTRING("profiling","\xa6","\x0e","\x10","\x4f")},
	{hx::fsBool,(int)offsetof(Debug_obj,last_cursor_grab),HX_HCSTRING("last_cursor_grab","\x6c","\xb6","\xf8","\xdd")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Debug_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Debug_obj::views,HX_HCSTRING("views","\x6e","\xe6","\xfc","\x36")},
	{hx::fsString,(void *) &Debug_obj::debug_batch_tag,HX_HCSTRING("debug_batch_tag","\xe9","\xff","\x5e","\xf0")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &Debug_obj::trace_callbacks,HX_HCSTRING("trace_callbacks","\x94","\x35","\x4d","\xe8")},
	{hx::fsBool,(void *) &Debug_obj::shut_down,HX_HCSTRING("shut_down","\x8d","\xbd","\x24","\x57")},
	{hx::fsBool,(void *) &Debug_obj::tracing,HX_HCSTRING("tracing","\x02","\x63","\x07","\x88")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Debug_obj_sMemberFields[] = {
	HX_HCSTRING("app","\xa1","\xfc","\x49","\x00"),
	HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"),
	HX_HCSTRING("inspector","\xf7","\xf9","\x0e","\xf8"),
	HX_HCSTRING("overlay","\x90","\x43","\x10","\xa9"),
	HX_HCSTRING("batcher","\xa7","\x22","\x10","\xc0"),
	HX_HCSTRING("view","\x65","\x32","\x4f","\x4e"),
	HX_HCSTRING("debug_font","\x7b","\xda","\x87","\x62"),
	HX_HCSTRING("dt_average","\x6e","\x32","\x0e","\x4f"),
	HX_HCSTRING("dt_average_accum","\x08","\xea","\x79","\x34"),
	HX_HCSTRING("dt_average_span","\x7b","\x35","\xe8","\x30"),
	HX_HCSTRING("dt_average_count","\xfe","\x44","\x43","\x63"),
	HX_HCSTRING("current_view_index","\xfe","\x87","\xa7","\x2c"),
	HX_HCSTRING("last_view_index","\x01","\x45","\x48","\x57"),
	HX_HCSTRING("current_view","\x6b","\xc3","\x3e","\xb5"),
	HX_HCSTRING("padding","\xd1","\x59","\x7d","\xd0"),
	HX_HCSTRING("profile_path","\xbb","\xe3","\x72","\xf3"),
	HX_HCSTRING("profiling","\xa6","\x0e","\x10","\x4f"),
	HX_HCSTRING("get_view","\xee","\xed","\x09","\xce"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("create_debug_console","\x68","\xba","\x8d","\x98"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("mouseup","\xc0","\x0f","\x73","\xc0"),
	HX_HCSTRING("mousedown","\x07","\x85","\xe9","\x03"),
	HX_HCSTRING("mousemove","\xb6","\x6f","\xdc","\x09"),
	HX_HCSTRING("mousewheel","\x56","\xb8","\x59","\x54"),
	HX_HCSTRING("touchup","\xda","\x2b","\xf8","\xd8"),
	HX_HCSTRING("touchdown","\xa1","\x5b","\x01","\x1d"),
	HX_HCSTRING("touchmove","\x50","\x46","\xf4","\x22"),
	HX_HCSTRING("keyup","\xba","\xd5","\xfe","\xde"),
	HX_HCSTRING("keydown","\x81","\x3d","\x6e","\xb1"),
	HX_HCSTRING("refresh","\xdb","\xd9","\x20","\xed"),
	HX_HCSTRING("switch_view","\xd0","\x6f","\xb2","\x61"),
	HX_HCSTRING("last_cursor_grab","\x6c","\xb6","\xf8","\xdd"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("process","\x6f","\xa2","\x4a","\xf1"),
	::String(null()) };

static void Debug_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Debug_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Debug_obj::views,"views");
	HX_MARK_MEMBER_NAME(Debug_obj::debug_batch_tag,"debug_batch_tag");
	HX_MARK_MEMBER_NAME(Debug_obj::trace_callbacks,"trace_callbacks");
	HX_MARK_MEMBER_NAME(Debug_obj::shut_down,"shut_down");
	HX_MARK_MEMBER_NAME(Debug_obj::tracing,"tracing");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Debug_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Debug_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Debug_obj::views,"views");
	HX_VISIT_MEMBER_NAME(Debug_obj::debug_batch_tag,"debug_batch_tag");
	HX_VISIT_MEMBER_NAME(Debug_obj::trace_callbacks,"trace_callbacks");
	HX_VISIT_MEMBER_NAME(Debug_obj::shut_down,"shut_down");
	HX_VISIT_MEMBER_NAME(Debug_obj::tracing,"tracing");
};

#endif

hx::Class Debug_obj::__mClass;

static ::String Debug_obj_sStaticFields[] = {
	HX_HCSTRING("views","\x6e","\xe6","\xfc","\x36"),
	HX_HCSTRING("debug_batch_tag","\xe9","\xff","\x5e","\xf0"),
	HX_HCSTRING("trace_callbacks","\x94","\x35","\x4d","\xe8"),
	HX_HCSTRING("shut_down","\x8d","\xbd","\x24","\x57"),
	HX_HCSTRING("tracing","\x02","\x63","\x07","\x88"),
	HX_HCSTRING("internal_trace","\xc3","\xc8","\x61","\x02"),
	::String(null())
};

void Debug_obj::__register()
{
	hx::Object *dummy = new Debug_obj;
	Debug_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Debug","\x7b","\x43","\x14","\x8e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Debug_obj::__GetStatic;
	__mClass->mSetStaticField = &Debug_obj::__SetStatic;
	__mClass->mMarkFunc = Debug_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Debug_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Debug_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Debug_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Debug_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Debug_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Debug_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Debug_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_194_boot)
HXDLIN( 194)		debug_batch_tag = HX_("batcher.debug_batcher",74,ad,60,92);
            	}
{
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_215_boot)
HXDLIN( 215)		trace_callbacks = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_217_boot)
HXDLIN( 217)		shut_down = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_edafb2596e925d6f_218_boot)
HXDLIN( 218)		tracing = false;
            	}
}

} // end namespace luxe
