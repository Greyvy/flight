// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Sprite
#include <luxe/Sprite.h>
#endif
#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_luxe_utils_GeometryUtils
#include <luxe/utils/GeometryUtils.h>
#endif
#ifndef INCLUDED_luxe_utils_Utils
#include <luxe/utils/Utils.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_GeometryState
#include <phoenix/geometry/GeometryState.h>
#endif
#ifndef INCLUDED_phoenix_geometry_QuadGeometry
#include <phoenix/geometry/QuadGeometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextureCoord
#include <phoenix/geometry/TextureCoord.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextureCoordSet
#include <phoenix/geometry/TextureCoordSet.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Vertex
#include <phoenix/geometry/Vertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b2bee25f3baefa46_14_new,"luxe.Sprite","new",0x6e38414f,"luxe.Sprite.new","luxe/Sprite.hx",14,0xf10014e0)
HX_LOCAL_STACK_FRAME(_hx_pos_b2bee25f3baefa46_51_on_geometry_created,"luxe.Sprite","on_geometry_created",0x10f5ed6a,"luxe.Sprite.on_geometry_created","luxe/Sprite.hx",51,0xf10014e0)
HX_LOCAL_STACK_FRAME(_hx_pos_b2bee25f3baefa46_76_set_geometry,"luxe.Sprite","set_geometry",0x6c4f5360,"luxe.Sprite.set_geometry","luxe/Sprite.hx",76,0xf10014e0)
HX_LOCAL_STACK_FRAME(_hx_pos_b2bee25f3baefa46_83_ondestroy,"luxe.Sprite","ondestroy",0x56420bea,"luxe.Sprite.ondestroy","luxe/Sprite.hx",83,0xf10014e0)
HX_LOCAL_STACK_FRAME(_hx_pos_b2bee25f3baefa46_96_point_inside,"luxe.Sprite","point_inside",0xed3d407c,"luxe.Sprite.point_inside","luxe/Sprite.hx",96,0xf10014e0)
HX_LOCAL_STACK_FRAME(_hx_pos_b2bee25f3baefa46_105_point_inside_AABB,"luxe.Sprite","point_inside_AABB",0x3f350483,"luxe.Sprite.point_inside_AABB","luxe/Sprite.hx",105,0xf10014e0)
HX_LOCAL_STACK_FRAME(_hx_pos_b2bee25f3baefa46_137_set_uv,"luxe.Sprite","set_uv",0x6df3e08f,"luxe.Sprite.set_uv","luxe/Sprite.hx",137,0xf10014e0)
HX_LOCAL_STACK_FRAME(_hx_pos_b2bee25f3baefa46_154_set_flipy,"luxe.Sprite","set_flipy",0x50eedbbe,"luxe.Sprite.set_flipy","luxe/Sprite.hx",154,0xf10014e0)
HX_LOCAL_STACK_FRAME(_hx_pos_b2bee25f3baefa46_168_set_flipx,"luxe.Sprite","set_flipx",0x50eedbbd,"luxe.Sprite.set_flipx","luxe/Sprite.hx",168,0xf10014e0)
HX_LOCAL_STACK_FRAME(_hx_pos_b2bee25f3baefa46_184_set_size,"luxe.Sprite","set_size",0xb9bc826f,"luxe.Sprite.set_size","luxe/Sprite.hx",184,0xf10014e0)
HX_LOCAL_STACK_FRAME(_hx_pos_b2bee25f3baefa46_209_set_centered,"luxe.Sprite","set_centered",0x28f6ae22,"luxe.Sprite.set_centered","luxe/Sprite.hx",209,0xf10014e0)
HX_LOCAL_STACK_FRAME(_hx_pos_b2bee25f3baefa46_226__uv_change,"luxe.Sprite","_uv_change",0x95c3d180,"luxe.Sprite._uv_change","luxe/Sprite.hx",226,0xf10014e0)
HX_LOCAL_STACK_FRAME(_hx_pos_1510ae3b6386cd5e_35_init,"luxe.Sprite","init",0xffb99b41,"luxe.Sprite.init","luxe/macros/EntityRules.hx",35,0xed942299)
namespace luxe{

void Sprite_obj::__construct( ::Dynamic options){
            	HX_GC_STACKFRAME(&_hx_pos_b2bee25f3baefa46_14_new)
HXLINE(  19)		this->flipy = false;
HXLINE(  18)		this->flipx = false;
HXLINE(  17)		this->centered = true;
HXLINE(  27)		this->set_uv( ::phoenix::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null()));
HXLINE(  29)		if (hx::IsNull( options )) {
HXLINE(  29)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("options was null",e0,49,a9,08) + ((HX_(" ( ",18,6b,18,00) + HX_("Sprite requires non-null options",7c,e0,5a,f8)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE(  32)		if (hx::IsNotNull( options->__Field(HX_("centered",74,5d,50,8f),hx::paccDynamic) )) {
HXLINE(  33)			this->set_centered(( (bool)(options->__Field(HX_("centered",74,5d,50,8f),hx::paccDynamic)) ));
            		}
HXLINE(  37)		if (hx::IsNotNull( options->__Field(HX_("flipx",2b,45,92,02),hx::paccDynamic) )) {
HXLINE(  38)			this->set_flipx(( (bool)(options->__Field(HX_("flipx",2b,45,92,02),hx::paccDynamic)) ));
            		}
HXLINE(  42)		if (hx::IsNotNull( options->__Field(HX_("flipy",2c,45,92,02),hx::paccDynamic) )) {
HXLINE(  43)			this->set_flipy(( (bool)(options->__Field(HX_("flipy",2c,45,92,02),hx::paccDynamic)) ));
            		}
HXLINE(  47)		super::__construct(options);
            	}

Dynamic Sprite_obj::__CreateEmpty() { return new Sprite_obj; }

void *Sprite_obj::_hx_vtable = 0;

Dynamic Sprite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Sprite_obj > _hx_result = new Sprite_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Sprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0bbca018) {
		if (inClassId<=(int)0x099ca90a) {
			if (inClassId<=(int)0x025d481e) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x025d481e;
			} else {
				return inClassId==(int)0x099ca90a;
			}
		} else {
			return inClassId==(int)0x0bbca018;
		}
	} else {
		return inClassId==(int)0x17ed3881 || inClassId==(int)0x5804f49b;
	}
}

void Sprite_obj::on_geometry_created(){
            	HX_GC_STACKFRAME(&_hx_pos_b2bee25f3baefa46_51_on_geometry_created)
HXLINE(  53)		this->super::on_geometry_created();
HXLINE(  55)		if (hx::IsNotNull( this->texture )) {
HXLINE(  59)			if (hx::IsNull(  ::Dynamic(this->options->__Field(HX_("uv",61,66,00,00),hx::paccDynamic)) )) {
HXLINE(  59)				this->options->__SetField(HX_("uv",61,66,00,00), ::phoenix::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->texture->width,this->texture->height),hx::paccDynamic);
            			}
HXDLIN(  59)			this->set_uv(( ( ::phoenix::Rectangle)(this->options->__Field(HX_("uv",61,66,00,00),hx::paccDynamic)) ));
HXLINE(  62)			if ((this->texture->resource_type == (int)5)) {
HXLINE(  63)				this->set_flipy(true);
            			}
            		}
HXLINE(  69)		this->set_centered(!(!(this->centered)));
HXLINE(  71)		this->set_flipx(!(!(this->flipx)));
HXLINE(  72)		this->set_flipy(!(!(this->flipy)));
            	}


 ::phoenix::geometry::Geometry Sprite_obj::set_geometry( ::phoenix::geometry::Geometry _g){
            	HX_STACKFRAME(&_hx_pos_b2bee25f3baefa46_76_set_geometry)
HXLINE(  78)		this->geometry_quad = ( ( ::phoenix::geometry::QuadGeometry)(_g) );
HXLINE(  79)		return this->super::set_geometry(_g);
            	}


void Sprite_obj::ondestroy(){
            	HX_STACKFRAME(&_hx_pos_b2bee25f3baefa46_83_ondestroy)
HXLINE(  85)		this->set_uv(null());
HXLINE(  86)		this->geometry_quad = null();
HXLINE(  88)		this->super::ondestroy();
            	}


bool Sprite_obj::point_inside( ::phoenix::Vector _p){
            	HX_STACKFRAME(&_hx_pos_b2bee25f3baefa46_96_point_inside)
HXLINE(  98)		if (hx::IsNull( this->geometry )) {
HXLINE(  98)			return false;
            		}
HXLINE( 100)		return ::Luxe_obj::utils->geometry->point_in_geometry(_p,this->geometry);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite_obj,point_inside,return )

bool Sprite_obj::point_inside_AABB( ::phoenix::Vector _p){
            	HX_STACKFRAME(&_hx_pos_b2bee25f3baefa46_105_point_inside_AABB)
HXLINE( 107)		if (hx::IsNull( this->get_pos() )) {
HXLINE( 107)			return false;
            		}
HXLINE( 108)		if (hx::IsNull( this->size )) {
HXLINE( 108)			return false;
            		}
HXLINE( 111)		Float _s_x = this->size->x;
HXDLIN( 111)		Float _s_x1 = (_s_x * this->get_scale()->x);
HXLINE( 112)		Float _s_y = this->size->y;
HXDLIN( 112)		Float _s_y1 = (_s_y * this->get_scale()->y);
HXLINE( 114)		if (this->centered) {
HXLINE( 115)			Float _hx = ((Float)_s_x1 / (Float)(int)2);
HXLINE( 116)			Float _hy = ((Float)_s_y1 / (Float)(int)2);
HXLINE( 117)			Float _p1 = _p->x;
HXDLIN( 117)			if ((_p1 < (this->get_pos()->x - _hx))) {
HXLINE( 117)				return false;
            			}
HXLINE( 118)			Float _p2 = _p->y;
HXDLIN( 118)			if ((_p2 < (this->get_pos()->y - _hy))) {
HXLINE( 118)				return false;
            			}
HXLINE( 119)			Float _p3 = _p->x;
HXDLIN( 119)			if ((_p3 > ((this->get_pos()->x + _s_x1) - _hx))) {
HXLINE( 119)				return false;
            			}
HXLINE( 120)			Float _p4 = _p->y;
HXDLIN( 120)			if ((_p4 > ((this->get_pos()->y + _s_y1) - _hy))) {
HXLINE( 120)				return false;
            			}
            		}
            		else {
HXLINE( 122)			Float _p5 = _p->x;
HXDLIN( 122)			if ((_p5 < this->get_pos()->x)) {
HXLINE( 122)				return false;
            			}
HXLINE( 123)			Float _p6 = _p->y;
HXDLIN( 123)			if ((_p6 < this->get_pos()->y)) {
HXLINE( 123)				return false;
            			}
HXLINE( 124)			Float _p7 = _p->x;
HXDLIN( 124)			if ((_p7 > (this->get_pos()->x + _s_x1))) {
HXLINE( 124)				return false;
            			}
HXLINE( 125)			Float _p8 = _p->y;
HXDLIN( 125)			if ((_p8 > (this->get_pos()->y + _s_y1))) {
HXLINE( 125)				return false;
            			}
            		}
HXLINE( 128)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite_obj,point_inside_AABB,return )

 ::phoenix::Rectangle Sprite_obj::set_uv( ::phoenix::Rectangle _uv){
            	HX_STACKFRAME(&_hx_pos_b2bee25f3baefa46_137_set_uv)
HXLINE( 139)		if (hx::IsNull( _uv )) {
HXLINE( 139)			return (this->uv = _uv);
            		}
HXLINE( 141)		if (hx::IsNotNull( this->geometry_quad )) {
HXLINE( 142)			 ::phoenix::geometry::QuadGeometry _this = this->geometry_quad;
HXDLIN( 142)			if (hx::IsNull( _this->state->texture )) {
HXLINE( 142)				HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("texture was null",c3,9c,a8,99) + ((HX_(" ( ",18,6b,18,00) + HX_("QuadGeometry; Calling UV on a geometry with null texture.",65,99,fb,a6)) + HX_(" )",09,1c,00,00)))));
            			}
HXDLIN( 142)			Float tlx = ((Float)_uv->x / (Float)_this->state->texture->width_actual);
HXDLIN( 142)			Float tly = ((Float)_uv->y / (Float)_this->state->texture->height_actual);
HXDLIN( 142)			Float szx = ((Float)_uv->w / (Float)_this->state->texture->width_actual);
HXDLIN( 142)			Float szy = ((Float)_uv->h / (Float)_this->state->texture->height_actual);
HXDLIN( 142)			if ((_this->vertices->length != (int)0)) {
HXLINE( 142)				Float sz_x = szx;
HXDLIN( 142)				Float sz_y = szy;
HXDLIN( 142)				Float tl_x = tlx;
HXDLIN( 142)				Float tl_y = tly;
HXDLIN( 142)				_this->_uv_x = tl_x;
HXDLIN( 142)				_this->_uv_y = tl_y;
HXDLIN( 142)				_this->_uv_w = sz_x;
HXDLIN( 142)				_this->_uv_h = sz_y;
HXDLIN( 142)				Float tr_x = (tl_x + sz_x);
HXDLIN( 142)				Float tr_y = tl_y;
HXDLIN( 142)				Float br_x = (tl_x + sz_x);
HXDLIN( 142)				Float br_y = (tl_y + sz_y);
HXDLIN( 142)				Float bl_x = tl_x;
HXDLIN( 142)				Float bl_y = (tl_y + sz_y);
HXDLIN( 142)				Float tmp_x = ((Float)0.0);
HXDLIN( 142)				Float tmp_y = ((Float)0.0);
HXDLIN( 142)				int rotations = ::Std_obj::_hx_int(((Float)_this->uv_angle / (Float)(int)90));
HXDLIN( 142)				rotations = (rotations - ((int)4 * ::Math_obj::floor(((Float)rotations / (Float)(int)4))));
HXDLIN( 142)				{
HXLINE( 142)					int _g1 = (int)0;
HXDLIN( 142)					int _g = rotations;
HXDLIN( 142)					while((_g1 < _g)){
HXLINE( 142)						_g1 = (_g1 + (int)1);
HXDLIN( 142)						int r = (_g1 - (int)1);
HXDLIN( 142)						{
HXLINE( 142)							tmp_x = tl_x;
HXDLIN( 142)							tl_x = bl_x;
HXDLIN( 142)							bl_x = br_x;
HXDLIN( 142)							br_x = tr_x;
HXDLIN( 142)							tr_x = tmp_x;
HXDLIN( 142)							tmp_y = tl_y;
HXDLIN( 142)							tl_y = bl_y;
HXDLIN( 142)							bl_y = br_y;
HXDLIN( 142)							br_y = tr_y;
HXDLIN( 142)							tr_y = tmp_y;
            						}
            					}
            				}
HXDLIN( 142)				if (_this->flipy) {
HXLINE( 142)					tmp_y = bl_y;
HXDLIN( 142)					bl_y = tl_y;
HXDLIN( 142)					tl_y = tmp_y;
HXDLIN( 142)					tmp_x = bl_x;
HXDLIN( 142)					bl_x = tl_x;
HXDLIN( 142)					tl_x = tmp_x;
HXDLIN( 142)					tmp_y = br_y;
HXDLIN( 142)					br_y = tr_y;
HXDLIN( 142)					tr_y = tmp_y;
HXDLIN( 142)					tmp_x = br_x;
HXDLIN( 142)					br_x = tr_x;
HXDLIN( 142)					tr_x = tmp_x;
            				}
HXDLIN( 142)				if (_this->flipx) {
HXLINE( 142)					tmp_x = tr_x;
HXDLIN( 142)					tr_x = tl_x;
HXDLIN( 142)					tl_x = tmp_x;
HXDLIN( 142)					tmp_y = tr_y;
HXDLIN( 142)					tr_y = tl_y;
HXDLIN( 142)					tl_y = tmp_y;
HXDLIN( 142)					tmp_x = br_x;
HXDLIN( 142)					br_x = bl_x;
HXDLIN( 142)					bl_x = tmp_x;
HXDLIN( 142)					tmp_y = br_y;
HXDLIN( 142)					br_y = bl_y;
HXDLIN( 142)					bl_y = tmp_y;
            				}
HXDLIN( 142)				{
HXLINE( 142)					 ::phoenix::geometry::TextureCoord _this1 = _this->vertices->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 142)					_this1->u = tl_x;
HXDLIN( 142)					_this1->v = tl_y;
            				}
HXDLIN( 142)				{
HXLINE( 142)					 ::phoenix::geometry::TextureCoord _this2 = _this->vertices->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 142)					_this2->u = tr_x;
HXDLIN( 142)					_this2->v = tr_y;
            				}
HXDLIN( 142)				{
HXLINE( 142)					 ::phoenix::geometry::TextureCoord _this3 = _this->vertices->__get((int)2).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 142)					_this3->u = br_x;
HXDLIN( 142)					_this3->v = br_y;
            				}
HXDLIN( 142)				{
HXLINE( 142)					 ::phoenix::geometry::TextureCoord _this4 = _this->vertices->__get((int)3).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 142)					_this4->u = bl_x;
HXDLIN( 142)					_this4->v = bl_y;
            				}
HXDLIN( 142)				{
HXLINE( 142)					 ::phoenix::geometry::TextureCoord _this5 = _this->vertices->__get((int)4).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 142)					_this5->u = tl_x;
HXDLIN( 142)					_this5->v = tl_y;
            				}
HXDLIN( 142)				{
HXLINE( 142)					 ::phoenix::geometry::TextureCoord _this6 = _this->vertices->__get((int)5).StaticCast<  ::phoenix::geometry::Vertex >()->uv->uv0;
HXDLIN( 142)					_this6->u = br_x;
HXDLIN( 142)					_this6->v = br_y;
            				}
HXDLIN( 142)				_this->set_dirty(true);
            			}
            		}
HXLINE( 145)		this->uv = _uv;
HXLINE( 147)		::phoenix::Rectangle_obj::listen(this->uv,this->_uv_change_dyn());
HXLINE( 149)		return this->uv;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite_obj,set_uv,return )

bool Sprite_obj::set_flipy(bool _v){
            	HX_STACKFRAME(&_hx_pos_b2bee25f3baefa46_154_set_flipy)
HXLINE( 156)		if ((_v == this->flipy)) {
HXLINE( 157)			return this->flipy;
            		}
HXLINE( 160)		if (hx::IsNotNull( this->geometry_quad )) {
HXLINE( 161)			this->geometry_quad->set_flipy(_v);
            		}
HXLINE( 164)		return (this->flipy = _v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite_obj,set_flipy,return )

bool Sprite_obj::set_flipx(bool _v){
            	HX_STACKFRAME(&_hx_pos_b2bee25f3baefa46_168_set_flipx)
HXLINE( 170)		if ((_v == this->flipx)) {
HXLINE( 171)			return this->flipx;
            		}
HXLINE( 174)		if (hx::IsNotNull( this->geometry_quad )) {
HXLINE( 175)			this->geometry_quad->set_flipx(_v);
            		}
HXLINE( 178)		return (this->flipx = _v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite_obj,set_flipx,return )

 ::phoenix::Vector Sprite_obj::set_size( ::phoenix::Vector _v){
            	HX_GC_STACKFRAME(&_hx_pos_b2bee25f3baefa46_184_set_size)
HXLINE( 188)		if (hx::IsNotNull( this->geometry_quad )) {
HXLINE( 190)			{
HXLINE( 190)				 ::phoenix::geometry::QuadGeometry _this = this->geometry_quad;
HXDLIN( 190)				Float quad_z;
HXDLIN( 190)				Float quad_y;
HXDLIN( 190)				Float quad_x;
HXDLIN( 190)				Float quad_w;
HXDLIN( 190)				 ::Dynamic quad_listen_z;
HXDLIN( 190)				 ::Dynamic quad_listen_y;
HXDLIN( 190)				 ::Dynamic quad_listen_x;
HXDLIN( 190)				bool quad_ignore_listeners;
HXDLIN( 190)				bool quad__construct;
HXDLIN( 190)				Float _x = _v->x;
HXDLIN( 190)				Float _y = _v->y;
HXDLIN( 190)				Float _z = (int)0;
HXDLIN( 190)				quad_x = ((Float)0);
HXDLIN( 190)				quad_y = ((Float)0);
HXDLIN( 190)				quad_z = ((Float)0);
HXDLIN( 190)				quad_w = ((Float)0);
HXDLIN( 190)				quad_ignore_listeners = false;
HXDLIN( 190)				quad__construct = false;
HXDLIN( 190)				quad__construct = true;
HXDLIN( 190)				quad_x = _x;
HXDLIN( 190)				if (!(quad__construct)) {
HXLINE( 190)					bool _hx_tmp;
HXDLIN( 190)					if (hx::IsNotNull( quad_listen_x )) {
HXLINE( 190)						_hx_tmp = !(quad_ignore_listeners);
            					}
            					else {
HXLINE( 190)						_hx_tmp = false;
            					}
HXDLIN( 190)					if (_hx_tmp) {
HXLINE( 190)						quad_listen_x(_x);
            					}
            				}
HXDLIN( 190)				quad_y = _y;
HXDLIN( 190)				if (!(quad__construct)) {
HXLINE( 190)					bool _hx_tmp1;
HXDLIN( 190)					if (hx::IsNotNull( quad_listen_y )) {
HXLINE( 190)						_hx_tmp1 = !(quad_ignore_listeners);
            					}
            					else {
HXLINE( 190)						_hx_tmp1 = false;
            					}
HXDLIN( 190)					if (_hx_tmp1) {
HXLINE( 190)						quad_listen_y(_y);
            					}
            				}
HXDLIN( 190)				quad_z = _z;
HXDLIN( 190)				if (!(quad__construct)) {
HXLINE( 190)					bool _hx_tmp2;
HXDLIN( 190)					if (hx::IsNotNull( quad_listen_z )) {
HXLINE( 190)						_hx_tmp2 = !(quad_ignore_listeners);
            					}
            					else {
HXLINE( 190)						_hx_tmp2 = false;
            					}
HXDLIN( 190)					if (_hx_tmp2) {
HXLINE( 190)						quad_listen_z(_z);
            					}
            				}
HXDLIN( 190)				quad_w = (int)0;
HXDLIN( 190)				quad__construct = false;
HXDLIN( 190)				_this->resize_xy(quad_x,quad_y);
            			}
HXLINE( 193)			if (!(this->_has_custom_origin)) {
HXLINE( 194)				if (this->centered) {
HXLINE( 196)					 ::phoenix::Vector _this1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_v->x,_v->y,_v->z,_v->w);
HXDLIN( 196)					{
HXLINE( 196)						Float _x1 = ((Float)_this1->x / (Float)(int)2);
HXDLIN( 196)						Float _y1 = ((Float)_this1->y / (Float)(int)2);
HXDLIN( 196)						Float _z1 = ((Float)_this1->z / (Float)(int)2);
HXDLIN( 196)						bool prev = _this1->ignore_listeners;
HXDLIN( 196)						_this1->ignore_listeners = true;
HXDLIN( 196)						{
HXLINE( 196)							_this1->x = _x1;
HXDLIN( 196)							if (!(_this1->_construct)) {
HXLINE( 196)								bool _hx_tmp3;
HXDLIN( 196)								if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 196)									_hx_tmp3 = !(_this1->ignore_listeners);
            								}
            								else {
HXLINE( 196)									_hx_tmp3 = false;
            								}
HXDLIN( 196)								if (_hx_tmp3) {
HXLINE( 196)									_this1->listen_x(_x1);
            								}
            							}
            						}
HXDLIN( 196)						{
HXLINE( 196)							_this1->y = _y1;
HXDLIN( 196)							if (!(_this1->_construct)) {
HXLINE( 196)								bool _hx_tmp4;
HXDLIN( 196)								if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 196)									_hx_tmp4 = !(_this1->ignore_listeners);
            								}
            								else {
HXLINE( 196)									_hx_tmp4 = false;
            								}
HXDLIN( 196)								if (_hx_tmp4) {
HXLINE( 196)									_this1->listen_y(_y1);
            								}
            							}
            						}
HXDLIN( 196)						{
HXLINE( 196)							_this1->z = _z1;
HXDLIN( 196)							if (!(_this1->_construct)) {
HXLINE( 196)								bool _hx_tmp5;
HXDLIN( 196)								if (hx::IsNotNull( _this1->listen_z )) {
HXLINE( 196)									_hx_tmp5 = !(_this1->ignore_listeners);
            								}
            								else {
HXLINE( 196)									_hx_tmp5 = false;
            								}
HXDLIN( 196)								if (_hx_tmp5) {
HXLINE( 196)									_this1->listen_z(_z1);
            								}
            							}
            						}
HXDLIN( 196)						_this1->ignore_listeners = prev;
HXDLIN( 196)						bool _hx_tmp6;
HXDLIN( 196)						if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 196)							_hx_tmp6 = !(_this1->ignore_listeners);
            						}
            						else {
HXLINE( 196)							_hx_tmp6 = false;
            						}
HXDLIN( 196)						if (_hx_tmp6) {
HXLINE( 196)							_this1->listen_x(_this1->x);
            						}
HXDLIN( 196)						bool _hx_tmp7;
HXDLIN( 196)						if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 196)							_hx_tmp7 = !(_this1->ignore_listeners);
            						}
            						else {
HXLINE( 196)							_hx_tmp7 = false;
            						}
HXDLIN( 196)						if (_hx_tmp7) {
HXLINE( 196)							_this1->listen_y(_this1->y);
            						}
HXDLIN( 196)						bool _hx_tmp8;
HXDLIN( 196)						if (hx::IsNotNull( _this1->listen_z )) {
HXLINE( 196)							_hx_tmp8 = !(_this1->ignore_listeners);
            						}
            						else {
HXLINE( 196)							_hx_tmp8 = false;
            						}
HXDLIN( 196)						if (_hx_tmp8) {
HXLINE( 196)							_this1->listen_z(_this1->z);
            						}
            					}
HXDLIN( 196)					this->set_origin(_this1);
            				}
            			}
            		}
HXLINE( 203)		return this->super::set_size(_v);
            	}


bool Sprite_obj::set_centered(bool _c){
            	HX_GC_STACKFRAME(&_hx_pos_b2bee25f3baefa46_209_set_centered)
HXLINE( 212)		if (hx::IsNotNull( this->size )) {
HXLINE( 213)			if (_c) {
HXLINE( 214)				Float _hx_tmp = ((Float)this->size->x / (Float)(int)2);
HXDLIN( 214)				this->set_origin( ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,((Float)this->size->y / (Float)(int)2),null(),null()));
            			}
            			else {
HXLINE( 216)				this->set_origin( ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null()));
            			}
            		}
HXLINE( 220)		return (this->centered = _c);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite_obj,set_centered,return )

void Sprite_obj::_uv_change(Float _v){
            	HX_STACKFRAME(&_hx_pos_b2bee25f3baefa46_226__uv_change)
HXDLIN( 226)		this->set_uv(this->uv);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite_obj,_uv_change,(void))

void Sprite_obj::init(){
            	HX_STACKFRAME(&_hx_pos_1510ae3b6386cd5e_35_init)
HXDLIN(  35)		this->super::init();
            	}



hx::ObjectPtr< Sprite_obj > Sprite_obj::__new( ::Dynamic options) {
	hx::ObjectPtr< Sprite_obj > __this = new Sprite_obj();
	__this->__construct(options);
	return __this;
}

hx::ObjectPtr< Sprite_obj > Sprite_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic options) {
	Sprite_obj *__this = (Sprite_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Sprite_obj), true, "luxe.Sprite"));
	*(void **)__this = Sprite_obj::_hx_vtable;
	__this->__construct(options);
	return __this;
}

Sprite_obj::Sprite_obj()
{
}

void Sprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Sprite);
	HX_MARK_MEMBER_NAME(centered,"centered");
	HX_MARK_MEMBER_NAME(flipx,"flipx");
	HX_MARK_MEMBER_NAME(flipy,"flipy");
	HX_MARK_MEMBER_NAME(uv,"uv");
	HX_MARK_MEMBER_NAME(geometry_quad,"geometry_quad");
	 ::luxe::Visual_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Sprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(centered,"centered");
	HX_VISIT_MEMBER_NAME(flipx,"flipx");
	HX_VISIT_MEMBER_NAME(flipy,"flipy");
	HX_VISIT_MEMBER_NAME(uv,"uv");
	HX_VISIT_MEMBER_NAME(geometry_quad,"geometry_quad");
	 ::luxe::Visual_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Sprite_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { return hx::Val( uv ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"flipx") ) { return hx::Val( flipx ); }
		if (HX_FIELD_EQ(inName,"flipy") ) { return hx::Val( flipy ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"set_uv") ) { return hx::Val( set_uv_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"centered") ) { return hx::Val( centered ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ondestroy") ) { return hx::Val( ondestroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_flipy") ) { return hx::Val( set_flipy_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_flipx") ) { return hx::Val( set_flipx_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_uv_change") ) { return hx::Val( _uv_change_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_geometry") ) { return hx::Val( set_geometry_dyn() ); }
		if (HX_FIELD_EQ(inName,"point_inside") ) { return hx::Val( point_inside_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_centered") ) { return hx::Val( set_centered_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"geometry_quad") ) { return hx::Val( geometry_quad ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"point_inside_AABB") ) { return hx::Val( point_inside_AABB_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"on_geometry_created") ) { return hx::Val( on_geometry_created_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Sprite_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_uv(inValue.Cast<  ::phoenix::Rectangle >()) );uv=inValue.Cast<  ::phoenix::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"flipx") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_flipx(inValue.Cast< bool >()) );flipx=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipy") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_flipy(inValue.Cast< bool >()) );flipy=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"centered") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_centered(inValue.Cast< bool >()) );centered=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"geometry_quad") ) { geometry_quad=inValue.Cast<  ::phoenix::geometry::QuadGeometry >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Sprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("centered","\x74","\x5d","\x50","\x8f"));
	outFields->push(HX_HCSTRING("flipx","\x2b","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("flipy","\x2c","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("uv","\x61","\x66","\x00","\x00"));
	outFields->push(HX_HCSTRING("geometry_quad","\xb4","\x4c","\x11","\xc9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Sprite_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Sprite_obj,centered),HX_HCSTRING("centered","\x74","\x5d","\x50","\x8f")},
	{hx::fsBool,(int)offsetof(Sprite_obj,flipx),HX_HCSTRING("flipx","\x2b","\x45","\x92","\x02")},
	{hx::fsBool,(int)offsetof(Sprite_obj,flipy),HX_HCSTRING("flipy","\x2c","\x45","\x92","\x02")},
	{hx::fsObject /*::phoenix::Rectangle*/ ,(int)offsetof(Sprite_obj,uv),HX_HCSTRING("uv","\x61","\x66","\x00","\x00")},
	{hx::fsObject /*::phoenix::geometry::QuadGeometry*/ ,(int)offsetof(Sprite_obj,geometry_quad),HX_HCSTRING("geometry_quad","\xb4","\x4c","\x11","\xc9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Sprite_obj_sStaticStorageInfo = 0;
#endif

static ::String Sprite_obj_sMemberFields[] = {
	HX_HCSTRING("centered","\x74","\x5d","\x50","\x8f"),
	HX_HCSTRING("flipx","\x2b","\x45","\x92","\x02"),
	HX_HCSTRING("flipy","\x2c","\x45","\x92","\x02"),
	HX_HCSTRING("uv","\x61","\x66","\x00","\x00"),
	HX_HCSTRING("geometry_quad","\xb4","\x4c","\x11","\xc9"),
	HX_HCSTRING("on_geometry_created","\x7b","\x6e","\x90","\xad"),
	HX_HCSTRING("set_geometry","\x2f","\xda","\xbb","\x9c"),
	HX_HCSTRING("ondestroy","\xbb","\xbd","\xdf","\x2e"),
	HX_HCSTRING("point_inside","\x4b","\xc7","\xa9","\x1d"),
	HX_HCSTRING("point_inside_AABB","\x54","\x6f","\x82","\x9d"),
	HX_HCSTRING("set_uv","\x1e","\x52","\x78","\x6f"),
	HX_HCSTRING("set_flipy","\x8f","\x8d","\x8c","\x29"),
	HX_HCSTRING("set_flipx","\x8e","\x8d","\x8c","\x29"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("set_centered","\xf1","\x34","\x63","\x59"),
	HX_HCSTRING("_uv_change","\x8f","\xb6","\x21","\x47"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null()) };

static void Sprite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Sprite_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Sprite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Sprite_obj::__mClass,"__mClass");
};

#endif

hx::Class Sprite_obj::__mClass;

void Sprite_obj::__register()
{
	hx::Object *dummy = new Sprite_obj;
	Sprite_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Sprite","\xdd","\xed","\xf3","\x22");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Sprite_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Sprite_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Sprite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Sprite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sprite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
