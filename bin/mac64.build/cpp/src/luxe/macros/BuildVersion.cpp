// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_macros_BuildVersion
#include <luxe/macros/BuildVersion.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e0a5d78669ae2d30_70_try_git,"luxe.macros.BuildVersion","try_git",0xaec0ed39,"luxe.macros.BuildVersion.try_git","luxe/macros/BuildVersion.hx",70,0x8b16c365)
HX_LOCAL_STACK_FRAME(_hx_pos_e0a5d78669ae2d30_17_boot,"luxe.macros.BuildVersion","boot",0x717141e7,"luxe.macros.BuildVersion.boot","luxe/macros/BuildVersion.hx",17,0x8b16c365)
namespace luxe{
namespace macros{

void BuildVersion_obj::__construct() { }

Dynamic BuildVersion_obj::__CreateEmpty() { return new BuildVersion_obj; }

void *BuildVersion_obj::_hx_vtable = 0;

Dynamic BuildVersion_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BuildVersion_obj > _hx_result = new BuildVersion_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BuildVersion_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x02dd3c87;
}

bool BuildVersion_obj::_save;

::String BuildVersion_obj::try_git(::String root){
            	HX_STACKFRAME(&_hx_pos_e0a5d78669ae2d30_70_try_git)
HXDLIN(  70)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BuildVersion_obj,try_git,return )


BuildVersion_obj::BuildVersion_obj()
{
}

bool BuildVersion_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_save") ) { outValue = ( _save ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"try_git") ) { outValue = try_git_dyn(); return true; }
	}
	return false;
}

bool BuildVersion_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_save") ) { _save=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BuildVersion_obj_sMemberStorageInfo = 0;
static hx::StaticInfo BuildVersion_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &BuildVersion_obj::_save,HX_HCSTRING("_save","\x1c","\xa7","\x5e","\xff")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void BuildVersion_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BuildVersion_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BuildVersion_obj::_save,"_save");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BuildVersion_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BuildVersion_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BuildVersion_obj::_save,"_save");
};

#endif

hx::Class BuildVersion_obj::__mClass;

static ::String BuildVersion_obj_sStaticFields[] = {
	HX_HCSTRING("_save","\x1c","\xa7","\x5e","\xff"),
	HX_HCSTRING("try_git","\xce","\xeb","\xfe","\x56"),
	::String(null())
};

void BuildVersion_obj::__register()
{
	hx::Object *dummy = new BuildVersion_obj;
	BuildVersion_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.macros.BuildVersion","\xd9","\x7e","\x61","\xa7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BuildVersion_obj::__GetStatic;
	__mClass->mSetStaticField = &BuildVersion_obj::__SetStatic;
	__mClass->mMarkFunc = BuildVersion_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BuildVersion_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< BuildVersion_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BuildVersion_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BuildVersion_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BuildVersion_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BuildVersion_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e0a5d78669ae2d30_17_boot)
HXDLIN(  17)		_save = false;
            	}
}

} // end namespace luxe
} // end namespace macros
