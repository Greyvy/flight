// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_InteractState
#include <luxe/InteractState.h>
#endif
#ifndef INCLUDED_luxe_TouchEvent
#include <luxe/TouchEvent.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cf79416d4948f300_731_new,"luxe.TouchEvent","new",0xeb8b8025,"luxe.TouchEvent.new","luxe/Input.hx",731,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_cf79416d4948f300_753_set,"luxe.TouchEvent","set",0xeb8f4b67,"luxe.TouchEvent.set","luxe/Input.hx",753,0x19edc1cd)
namespace luxe{

void TouchEvent_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_cf79416d4948f300_731_new)
HXDLIN( 731)		this->pos =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}

Dynamic TouchEvent_obj::__CreateEmpty() { return new TouchEvent_obj; }

void *TouchEvent_obj::_hx_vtable = 0;

Dynamic TouchEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TouchEvent_obj > _hx_result = new TouchEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TouchEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x634bc771;
}

void TouchEvent_obj::set(Float _x,Float _y,Float _dx,Float _dy,int _touch_id, ::luxe::InteractState _state,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_cf79416d4948f300_753_set)
HXLINE( 755)		this->x = _x;
HXLINE( 756)		this->y = _y;
HXLINE( 757)		this->dx = _dx;
HXLINE( 758)		this->dy = _dy;
HXLINE( 759)		this->touch_id = _touch_id;
HXLINE( 760)		this->timestamp = _timestamp;
HXLINE( 761)		this->state = _state;
HXLINE( 763)		{
HXLINE( 763)			 ::phoenix::Vector _this = this->pos;
HXDLIN( 763)			bool prev = _this->ignore_listeners;
HXDLIN( 763)			_this->ignore_listeners = true;
HXDLIN( 763)			{
HXLINE( 763)				_this->x = _x;
HXDLIN( 763)				if (!(_this->_construct)) {
HXLINE( 763)					bool _hx_tmp;
HXDLIN( 763)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 763)						_hx_tmp = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 763)						_hx_tmp = false;
            					}
HXDLIN( 763)					if (_hx_tmp) {
HXLINE( 763)						_this->listen_x(_x);
            					}
            				}
            			}
HXDLIN( 763)			{
HXLINE( 763)				_this->y = _y;
HXDLIN( 763)				if (!(_this->_construct)) {
HXLINE( 763)					bool _hx_tmp1;
HXDLIN( 763)					if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 763)						_hx_tmp1 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 763)						_hx_tmp1 = false;
            					}
HXDLIN( 763)					if (_hx_tmp1) {
HXLINE( 763)						_this->listen_y(_y);
            					}
            				}
            			}
HXDLIN( 763)			_this->ignore_listeners = prev;
HXDLIN( 763)			bool _hx_tmp2;
HXDLIN( 763)			if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 763)				_hx_tmp2 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 763)				_hx_tmp2 = false;
            			}
HXDLIN( 763)			if (_hx_tmp2) {
HXLINE( 763)				_this->listen_x(_this->x);
            			}
HXDLIN( 763)			bool _hx_tmp3;
HXDLIN( 763)			if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 763)				_hx_tmp3 = !(_this->ignore_listeners);
            			}
            			else {
HXLINE( 763)				_hx_tmp3 = false;
            			}
HXDLIN( 763)			if (_hx_tmp3) {
HXLINE( 763)				_this->listen_y(_this->y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(TouchEvent_obj,set,(void))


hx::ObjectPtr< TouchEvent_obj > TouchEvent_obj::__new() {
	hx::ObjectPtr< TouchEvent_obj > __this = new TouchEvent_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TouchEvent_obj > TouchEvent_obj::__alloc(hx::Ctx *_hx_ctx) {
	TouchEvent_obj *__this = (TouchEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TouchEvent_obj), true, "luxe.TouchEvent"));
	*(void **)__this = TouchEvent_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TouchEvent_obj::TouchEvent_obj()
{
}

void TouchEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TouchEvent);
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(timestamp,"timestamp");
	HX_MARK_MEMBER_NAME(touch_id,"touch_id");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(dx,"dx");
	HX_MARK_MEMBER_NAME(dy,"dy");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_END_CLASS();
}

void TouchEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(timestamp,"timestamp");
	HX_VISIT_MEMBER_NAME(touch_id,"touch_id");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(dx,"dx");
	HX_VISIT_MEMBER_NAME(dy,"dy");
	HX_VISIT_MEMBER_NAME(pos,"pos");
}

hx::Val TouchEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"dx") ) { return hx::Val( dx ); }
		if (HX_FIELD_EQ(inName,"dy") ) { return hx::Val( dy ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"touch_id") ) { return hx::Val( touch_id ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timestamp") ) { return hx::Val( timestamp ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TouchEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"dx") ) { dx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dy") ) { dy=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::luxe::InteractState >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"touch_id") ) { touch_id=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timestamp") ) { timestamp=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TouchEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	outFields->push(HX_HCSTRING("timestamp","\xd6","\xd4","\xce","\xa5"));
	outFields->push(HX_HCSTRING("touch_id","\x9b","\x7b","\x1d","\x00"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("dx","\x94","\x57","\x00","\x00"));
	outFields->push(HX_HCSTRING("dy","\x95","\x57","\x00","\x00"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TouchEvent_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::InteractState*/ ,(int)offsetof(TouchEvent_obj,state),HX_HCSTRING("state","\x11","\x76","\x0b","\x84")},
	{hx::fsFloat,(int)offsetof(TouchEvent_obj,timestamp),HX_HCSTRING("timestamp","\xd6","\xd4","\xce","\xa5")},
	{hx::fsInt,(int)offsetof(TouchEvent_obj,touch_id),HX_HCSTRING("touch_id","\x9b","\x7b","\x1d","\x00")},
	{hx::fsFloat,(int)offsetof(TouchEvent_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TouchEvent_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TouchEvent_obj,dx),HX_HCSTRING("dx","\x94","\x57","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TouchEvent_obj,dy),HX_HCSTRING("dy","\x95","\x57","\x00","\x00")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(TouchEvent_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TouchEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String TouchEvent_obj_sMemberFields[] = {
	HX_HCSTRING("state","\x11","\x76","\x0b","\x84"),
	HX_HCSTRING("timestamp","\xd6","\xd4","\xce","\xa5"),
	HX_HCSTRING("touch_id","\x9b","\x7b","\x1d","\x00"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("dx","\x94","\x57","\x00","\x00"),
	HX_HCSTRING("dy","\x95","\x57","\x00","\x00"),
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void TouchEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TouchEvent_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TouchEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TouchEvent_obj::__mClass,"__mClass");
};

#endif

hx::Class TouchEvent_obj::__mClass;

void TouchEvent_obj::__register()
{
	hx::Object *dummy = new TouchEvent_obj;
	TouchEvent_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.TouchEvent","\xb3","\x89","\x1d","\x04");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TouchEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TouchEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TouchEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TouchEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TouchEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TouchEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
