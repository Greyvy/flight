// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_luxe_Cursor
#include <luxe/Cursor.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Screen
#include <luxe/Screen.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_Runtime
#include <snow/modules/sdl/Runtime.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_75819900af226312_58_new,"luxe.Screen","new",0x40e0e036,"luxe.Screen.new","luxe/Screen.hx",58,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_75819900af226312_69_toString,"luxe.Screen","toString",0xc38a9916,"luxe.Screen.toString","luxe/Screen.hx",69,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_75819900af226312_75_point_inside,"luxe.Screen","point_inside",0xfec30cb5,"luxe.Screen.point_inside","luxe/Screen.hx",75,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_75819900af226312_87_point_inside_xy,"luxe.Screen","point_inside_xy",0xc398918b,"luxe.Screen.point_inside_xy","luxe/Screen.hx",87,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_75819900af226312_100_internal_resized,"luxe.Screen","internal_resized",0x20806418,"luxe.Screen.internal_resized","luxe/Screen.hx",100,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_75819900af226312_111_get_mid,"luxe.Screen","get_mid",0x6c488cf5,"luxe.Screen.get_mid","luxe/Screen.hx",111,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_75819900af226312_112_get_size,"luxe.Screen","get_size",0x572a24b4,"luxe.Screen.get_size","luxe/Screen.hx",112,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_75819900af226312_113_get_bounds,"luxe.Screen","get_bounds",0xb6932d28,"luxe.Screen.get_bounds","luxe/Screen.hx",113,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_75819900af226312_114_get_w,"luxe.Screen","get_w",0xdb31d6a4,"luxe.Screen.get_w","luxe/Screen.hx",114,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_75819900af226312_115_get_h,"luxe.Screen","get_h",0xdb31d695,"luxe.Screen.get_h","luxe/Screen.hx",115,0xd2f30fd9)
HX_LOCAL_STACK_FRAME(_hx_pos_75819900af226312_116_get_device_pixel_ratio,"luxe.Screen","get_device_pixel_ratio",0x5897661c,"luxe.Screen.get_device_pixel_ratio","luxe/Screen.hx",116,0xd2f30fd9)
namespace luxe{

void Screen_obj::__construct( ::luxe::Engine _core,int _w,int _h){
            	HX_GC_STACKFRAME(&_hx_pos_75819900af226312_58_new)
HXLINE(  60)		this->core = _core;
HXLINE(  61)		this->cursor =  ::luxe::Cursor_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE(  63)		this->width = _w;
HXLINE(  64)		this->height = _h;
            	}

Dynamic Screen_obj::__CreateEmpty() { return new Screen_obj; }

void *Screen_obj::_hx_vtable = 0;

Dynamic Screen_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Screen_obj > _hx_result = new Screen_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Screen_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1afd5a66;
}

::String Screen_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_75819900af226312_69_toString)
HXDLIN(  69)		::String _hx_tmp = ((HX_("luxe.Screen({ w:",cc,3e,df,17) + this->get_w()) + HX_(", h:",46,06,2e,1d));
HXDLIN(  69)		return ((_hx_tmp + this->get_h()) + HX_(" })",2c,b5,18,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Screen_obj,toString,return )

bool Screen_obj::point_inside( ::phoenix::Vector _p){
            	HX_STACKFRAME(&_hx_pos_75819900af226312_75_point_inside)
HXLINE(  77)		if ((_p->x < (int)0)) {
HXLINE(  77)			return false;
            		}
HXLINE(  78)		if ((_p->y < (int)0)) {
HXLINE(  78)			return false;
            		}
HXLINE(  79)		if ((_p->x > this->width)) {
HXLINE(  79)			return false;
            		}
HXLINE(  80)		if ((_p->y > this->height)) {
HXLINE(  80)			return false;
            		}
HXLINE(  82)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Screen_obj,point_inside,return )

bool Screen_obj::point_inside_xy(Float _x,Float _y){
            	HX_STACKFRAME(&_hx_pos_75819900af226312_87_point_inside_xy)
HXLINE(  89)		if ((_x < (int)0)) {
HXLINE(  89)			return false;
            		}
HXLINE(  90)		if ((_y < (int)0)) {
HXLINE(  90)			return false;
            		}
HXLINE(  91)		if ((_x > this->width)) {
HXLINE(  91)			return false;
            		}
HXLINE(  92)		if ((_y > this->height)) {
HXLINE(  92)			return false;
            		}
HXLINE(  94)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Screen_obj,point_inside_xy,return )

void Screen_obj::internal_resized(Float _w,Float _h){
            	HX_STACKFRAME(&_hx_pos_75819900af226312_100_internal_resized)
HXLINE( 102)		this->width = _w;
HXLINE( 103)		this->height = _h;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Screen_obj,internal_resized,(void))

 ::phoenix::Vector Screen_obj::get_mid(){
            	HX_GC_STACKFRAME(&_hx_pos_75819900af226312_111_get_mid)
HXDLIN( 111)		int _hx_tmp = ::Math_obj::round(((Float)this->get_w() / (Float)(int)2));
HXDLIN( 111)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,::Math_obj::round(((Float)this->get_h() / (Float)(int)2)),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Screen_obj,get_mid,return )

 ::phoenix::Vector Screen_obj::get_size(){
            	HX_GC_STACKFRAME(&_hx_pos_75819900af226312_112_get_size)
HXDLIN( 112)		int _hx_tmp = this->get_w();
HXDLIN( 112)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,this->get_h(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Screen_obj,get_size,return )

 ::phoenix::Rectangle Screen_obj::get_bounds(){
            	HX_GC_STACKFRAME(&_hx_pos_75819900af226312_113_get_bounds)
HXDLIN( 113)		int _hx_tmp = this->get_w();
HXDLIN( 113)		return  ::phoenix::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,_hx_tmp,this->get_h());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Screen_obj,get_bounds,return )

int Screen_obj::get_w(){
            	HX_STACKFRAME(&_hx_pos_75819900af226312_114_get_w)
HXDLIN( 114)		return ::Std_obj::_hx_int(this->width);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Screen_obj,get_w,return )

int Screen_obj::get_h(){
            	HX_STACKFRAME(&_hx_pos_75819900af226312_115_get_h)
HXDLIN( 115)		return ::Std_obj::_hx_int(this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Screen_obj,get_h,return )

Float Screen_obj::get_device_pixel_ratio(){
            	HX_STACKFRAME(&_hx_pos_75819900af226312_116_get_device_pixel_ratio)
HXDLIN( 116)		return this->core->app->runtime->window_device_pixel_ratio();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Screen_obj,get_device_pixel_ratio,return )


hx::ObjectPtr< Screen_obj > Screen_obj::__new( ::luxe::Engine _core,int _w,int _h) {
	hx::ObjectPtr< Screen_obj > __this = new Screen_obj();
	__this->__construct(_core,_w,_h);
	return __this;
}

hx::ObjectPtr< Screen_obj > Screen_obj::__alloc(hx::Ctx *_hx_ctx, ::luxe::Engine _core,int _w,int _h) {
	Screen_obj *__this = (Screen_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Screen_obj), true, "luxe.Screen"));
	*(void **)__this = Screen_obj::_hx_vtable;
	__this->__construct(_core,_w,_h);
	return __this;
}

Screen_obj::Screen_obj()
{
}

void Screen_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Screen);
	HX_MARK_MEMBER_NAME(mid,"mid");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(w,"w");
	HX_MARK_MEMBER_NAME(h,"h");
	HX_MARK_MEMBER_NAME(device_pixel_ratio,"device_pixel_ratio");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(cursor,"cursor");
	HX_MARK_MEMBER_NAME(core,"core");
	HX_MARK_END_CLASS();
}

void Screen_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mid,"mid");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(w,"w");
	HX_VISIT_MEMBER_NAME(h,"h");
	HX_VISIT_MEMBER_NAME(device_pixel_ratio,"device_pixel_ratio");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(cursor,"cursor");
	HX_VISIT_MEMBER_NAME(core,"core");
}

hx::Val Screen_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { return hx::Val( inCallProp == hx::paccAlways ? get_w() : w ); }
		if (HX_FIELD_EQ(inName,"h") ) { return hx::Val( inCallProp == hx::paccAlways ? get_h() : h ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"mid") ) { return hx::Val( inCallProp == hx::paccAlways ? get_mid() : mid ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( inCallProp == hx::paccAlways ? get_size() : size ); }
		if (HX_FIELD_EQ(inName,"core") ) { return hx::Val( core ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"get_w") ) { return hx::Val( get_w_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_h") ) { return hx::Val( get_h_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( inCallProp == hx::paccAlways ? get_bounds() : bounds ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"cursor") ) { return hx::Val( cursor ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_mid") ) { return hx::Val( get_mid_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_bounds") ) { return hx::Val( get_bounds_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"point_inside") ) { return hx::Val( point_inside_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"point_inside_xy") ) { return hx::Val( point_inside_xy_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"internal_resized") ) { return hx::Val( internal_resized_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"device_pixel_ratio") ) { return hx::Val( inCallProp == hx::paccAlways ? get_device_pixel_ratio() : device_pixel_ratio ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_device_pixel_ratio") ) { return hx::Val( get_device_pixel_ratio_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Screen_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"h") ) { h=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"mid") ) { mid=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"core") ) { core=inValue.Cast<  ::luxe::Engine >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::phoenix::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cursor") ) { cursor=inValue.Cast<  ::luxe::Cursor >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"device_pixel_ratio") ) { device_pixel_ratio=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Screen_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mid","\x88","\x11","\x53","\x00"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("w","\x77","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("h","\x68","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("device_pixel_ratio","\xe9","\xfe","\xa8","\x15"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("cursor","\xd6","\x8e","\xe8","\x3e"));
	outFields->push(HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Screen_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Screen_obj,mid),HX_HCSTRING("mid","\x88","\x11","\x53","\x00")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Screen_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{hx::fsObject /*::phoenix::Rectangle*/ ,(int)offsetof(Screen_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsInt,(int)offsetof(Screen_obj,w),HX_HCSTRING("w","\x77","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Screen_obj,h),HX_HCSTRING("h","\x68","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Screen_obj,device_pixel_ratio),HX_HCSTRING("device_pixel_ratio","\xe9","\xfe","\xa8","\x15")},
	{hx::fsFloat,(int)offsetof(Screen_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(Screen_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::luxe::Cursor*/ ,(int)offsetof(Screen_obj,cursor),HX_HCSTRING("cursor","\xd6","\x8e","\xe8","\x3e")},
	{hx::fsObject /*::luxe::Engine*/ ,(int)offsetof(Screen_obj,core),HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Screen_obj_sStaticStorageInfo = 0;
#endif

static ::String Screen_obj_sMemberFields[] = {
	HX_HCSTRING("mid","\x88","\x11","\x53","\x00"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("w","\x77","\x00","\x00","\x00"),
	HX_HCSTRING("h","\x68","\x00","\x00","\x00"),
	HX_HCSTRING("device_pixel_ratio","\xe9","\xfe","\xa8","\x15"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("cursor","\xd6","\x8e","\xe8","\x3e"),
	HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("point_inside","\x4b","\xc7","\xa9","\x1d"),
	HX_HCSTRING("point_inside_xy","\xb5","\x18","\x48","\xcd"),
	HX_HCSTRING("internal_resized","\xae","\x21","\x67","\x90"),
	HX_HCSTRING("get_mid","\x1f","\xda","\xc7","\x26"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("get_bounds","\x3e","\xf6","\xa4","\x56"),
	HX_HCSTRING("get_w","\x4e","\xa5","\x60","\x91"),
	HX_HCSTRING("get_h","\x3f","\xa5","\x60","\x91"),
	HX_HCSTRING("get_device_pixel_ratio","\x32","\x78","\x3d","\x6f"),
	::String(null()) };

static void Screen_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Screen_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Screen_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Screen_obj::__mClass,"__mClass");
};

#endif

hx::Class Screen_obj::__mClass;

void Screen_obj::__register()
{
	hx::Object *dummy = new Screen_obj;
	Screen_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Screen","\x44","\x4d","\xbb","\xa6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Screen_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Screen_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Screen_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Screen_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Screen_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Screen_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
