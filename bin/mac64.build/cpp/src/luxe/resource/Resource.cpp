// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Resources
#include <luxe/Resources.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_760439f59c096dcd_11_new,"luxe.resource.Resource","new",0x99ea21c8,"luxe.resource.Resource.new","luxe/resource/Resource.hx",11,0x204e02c8)
HX_LOCAL_STACK_FRAME(_hx_pos_760439f59c096dcd_52_destroy,"luxe.resource.Resource","destroy",0x97c55262,"luxe.resource.Resource.destroy","luxe/resource/Resource.hx",52,0x204e02c8)
HX_LOCAL_STACK_FRAME(_hx_pos_760439f59c096dcd_77_invalidate,"luxe.resource.Resource","invalidate",0x1eee4513,"luxe.resource.Resource.invalidate","luxe/resource/Resource.hx",77,0x204e02c8)
HX_LOCAL_STACK_FRAME(_hx_pos_760439f59c096dcd_90_reload,"luxe.resource.Resource","reload",0xdb0fd2f1,"luxe.resource.Resource.reload","luxe/resource/Resource.hx",90,0x204e02c8)
HX_LOCAL_STACK_FRAME(_hx_pos_760439f59c096dcd_97_memory_use,"luxe.resource.Resource","memory_use",0x92507c61,"luxe.resource.Resource.memory_use","luxe/resource/Resource.hx",97,0x204e02c8)
HX_LOCAL_STACK_FRAME(_hx_pos_760439f59c096dcd_102_set_ref,"luxe.resource.Resource","set_ref",0x8d0c585e,"luxe.resource.Resource.set_ref","luxe/resource/Resource.hx",102,0x204e02c8)
HX_LOCAL_STACK_FRAME(_hx_pos_760439f59c096dcd_117_set_state,"luxe.resource.Resource","set_state",0xc8670ddc,"luxe.resource.Resource.set_state","luxe/resource/Resource.hx",117,0x204e02c8)
HX_LOCAL_STACK_FRAME(_hx_pos_760439f59c096dcd_136_clear,"luxe.resource.Resource","clear",0x3136ecf5,"luxe.resource.Resource.clear","luxe/resource/Resource.hx",136,0x204e02c8)
HX_LOCAL_STACK_FRAME(_hx_pos_760439f59c096dcd_142_state_string,"luxe.resource.Resource","state_string",0xa1c85a17,"luxe.resource.Resource.state_string","luxe/resource/Resource.hx",142,0x204e02c8)
HX_LOCAL_STACK_FRAME(_hx_pos_760439f59c096dcd_154_type_string,"luxe.resource.Resource","type_string",0xd6096c5e,"luxe.resource.Resource.type_string","luxe/resource/Resource.hx",154,0x204e02c8)
HX_LOCAL_STACK_FRAME(_hx_pos_760439f59c096dcd_166_toString,"luxe.resource.Resource","toString",0x9c706644,"luxe.resource.Resource.toString","luxe/resource/Resource.hx",166,0x204e02c8)
namespace luxe{
namespace resource{

void Resource_obj::__construct( ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_760439f59c096dcd_11_new)
HXLINE(  30)		this->ref = (int)0;
HXLINE(  34)		if (hx::IsNull( _options )) {
HXLINE(  34)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("_options was null",3f,38,24,a1)));
            		}
HXLINE(  35)		if (hx::IsNull( ( (::String)(_options->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ) )) {
HXLINE(  35)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("_options.id was null",b4,3b,ea,09)));
            		}
HXLINE(  37)		if (hx::IsNull( ( ( ::luxe::Resources)(_options->__Field(HX_("system",ef,96,e2,f2),hx::paccDynamic)) ) )) {
HXLINE(  37)			_options->__SetField(HX_("system",ef,96,e2,f2),::Luxe_obj::resources,hx::paccDynamic);
            		}
HXLINE(  38)		if (hx::IsNull( _options->__Field(HX_("resource_type",0b,87,30,9c),hx::paccDynamic) )) {
HXLINE(  38)			_options->__SetField(HX_("resource_type",0b,87,30,9c),(int)0,hx::paccDynamic);
            		}
HXLINE(  40)		this->id = ( (::String)(_options->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE(  41)		this->_hx_system = ( ( ::luxe::Resources)(_options->__Field(HX_("system",ef,96,e2,f2),hx::paccDynamic)) );
HXLINE(  42)		this->resource_type = ( (int)(_options->__Field(HX_("resource_type",0b,87,30,9c),hx::paccDynamic)) );
HXLINE(  43)		this->set_state((int)0);
HXLINE(  44)		this->set_ref((int)1);
            	}

Dynamic Resource_obj::__CreateEmpty() { return new Resource_obj; }

void *Resource_obj::_hx_vtable = 0;

Dynamic Resource_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Resource_obj > _hx_result = new Resource_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Resource_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x40d63fd6;
}

void Resource_obj::destroy( ::Dynamic __o__force){
 ::Dynamic _force = __o__force.Default(false);
            	HX_STACKFRAME(&_hx_pos_760439f59c096dcd_52_destroy)
HXLINE(  54)		if ((this->state == (int)6)) {
HXLINE(  54)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion(HX_("state != ResourceState.destroyed",79,be,a0,bf)));
            		}
HXLINE(  56)		if (!(_force)) {
HXLINE(  57)			if ((this->ref <= (int)0)) {
HXLINE(  57)				HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion(HX_("ref > 0",81,7a,cf,b6)));
            			}
HXLINE(  58)			{
HXLINE(  58)				 ::luxe::resource::Resource _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  58)				int _g1 = _g->ref;
HXDLIN(  58)				_g->set_ref((_g1 - (int)1));
            			}
HXLINE(  59)			if ((this->ref < (int)0)) {
HXLINE(  59)				HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion(HX_("ref >= 0",fc,a9,d1,3e)));
            			}
            		}
HXLINE(  64)		bool _hx_tmp;
HXDLIN(  64)		if ((this->ref != (int)0)) {
HXLINE(  64)			_hx_tmp = _force;
            		}
            		else {
HXLINE(  64)			_hx_tmp = true;
            		}
HXDLIN(  64)		if (_hx_tmp) {
HXLINE(  66)			this->clear();
HXLINE(  67)			this->set_state((int)6);
HXLINE(  68)			this->_hx_system->remove(hx::ObjectPtr<OBJ_>(this));
HXLINE(  69)			this->_hx_system->emit((int)8,hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resource_obj,destroy,(void))

void Resource_obj::invalidate(){
            	HX_STACKFRAME(&_hx_pos_760439f59c096dcd_77_invalidate)
HXLINE(  79)		if ((this->state == (int)6)) {
HXLINE(  79)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion(HX_("state != ResourceState.destroyed",79,be,a0,bf)));
            		}
HXLINE(  81)		this->clear();
HXLINE(  82)		this->set_state((int)5);
HXLINE(  83)		this->_hx_system->emit((int)6,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Resource_obj,invalidate,(void))

 ::snow::api::Promise Resource_obj::reload(){
            	HX_STACKFRAME(&_hx_pos_760439f59c096dcd_90_reload)
HXDLIN(  90)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Resource_obj,reload,return )

Float Resource_obj::memory_use(){
            	HX_STACKFRAME(&_hx_pos_760439f59c096dcd_97_memory_use)
HXDLIN(  97)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Resource_obj,memory_use,return )

int Resource_obj::set_ref(int _ref){
            	HX_STACKFRAME(&_hx_pos_760439f59c096dcd_102_set_ref)
HXLINE( 104)		int pre = this->ref;
HXLINE( 105)		this->ref = _ref;
HXLINE( 107)		if ((this->ref > pre)) {
HXLINE( 108)			this->_hx_system->emit((int)9,hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXLINE( 109)			if ((this->ref < pre)) {
HXLINE( 110)				this->_hx_system->emit((int)10,hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 113)		return this->ref;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resource_obj,set_ref,return )

int Resource_obj::set_state(int _state){
            	HX_STACKFRAME(&_hx_pos_760439f59c096dcd_117_set_state)
HXLINE( 119)		this->state = _state;
HXLINE( 121)		{
HXLINE( 121)			int _g = this->state;
HXDLIN( 121)			switch((int)(_g)){
            				case (int)2: {
HXLINE( 123)					this->_hx_system->emit((int)3,hx::ObjectPtr<OBJ_>(this));
            				}
            				break;
            				case (int)3: {
HXLINE( 125)					this->_hx_system->emit((int)4,hx::ObjectPtr<OBJ_>(this));
            				}
            				break;
            				case (int)4: {
HXLINE( 127)					this->_hx_system->emit((int)5,hx::ObjectPtr<OBJ_>(this));
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 131)		return this->state;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resource_obj,set_state,return )

void Resource_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_760439f59c096dcd_136_clear)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Resource_obj,clear,(void))

::String Resource_obj::state_string(){
            	HX_STACKFRAME(&_hx_pos_760439f59c096dcd_142_state_string)
HXDLIN( 142)		int _g = this->state;
HXDLIN( 142)		switch((int)(_g)){
            			case (int)1: {
HXLINE( 143)				return HX_("listed",3d,c8,f9,ef);
            			}
            			break;
            			case (int)2: {
HXLINE( 144)				return HX_("loading",7c,ce,f2,08);
            			}
            			break;
            			case (int)3: {
HXLINE( 145)				return HX_("loaded",05,48,6f,58);
            			}
            			break;
            			case (int)4: {
HXLINE( 146)				return HX_("failed",bd,c5,fe,e7);
            			}
            			break;
            			case (int)5: {
HXLINE( 147)				return HX_("invalidated",89,32,ac,bd);
            			}
            			break;
            			case (int)6: {
HXLINE( 148)				return HX_("destroyed",d9,37,27,f4);
            			}
            			break;
            			default:{
HXLINE( 149)				return HX_("unknown",8a,23,7b,e1);
            			}
            		}
HXLINE( 142)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Resource_obj,state_string,return )

::String Resource_obj::type_string(){
            	HX_STACKFRAME(&_hx_pos_760439f59c096dcd_154_type_string)
HXDLIN( 154)		int _g = this->resource_type;
HXDLIN( 154)		switch((int)(_g)){
            			case (int)1: {
HXLINE( 156)				return HX_("text",ad,cc,f9,4c);
            			}
            			break;
            			case (int)2: {
HXLINE( 157)				return HX_("json",28,42,68,46);
            			}
            			break;
            			case (int)3: {
HXLINE( 155)				return HX_("bytes",6b,08,98,bd);
            			}
            			break;
            			case (int)4: {
HXLINE( 158)				return HX_("texture",db,c8,e0,9e);
            			}
            			break;
            			case (int)6: {
HXLINE( 160)				return HX_("font",cf,5d,c0,43);
            			}
            			break;
            			case (int)7: {
HXLINE( 159)				return HX_("shader",25,bf,20,1d);
            			}
            			break;
            			default:{
HXLINE( 161)				return (HX_("",00,00,00,00) + this->resource_type);
            			}
            		}
HXLINE( 154)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Resource_obj,type_string,return )

::String Resource_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_760439f59c096dcd_166_toString)
HXDLIN( 166)		::String _hx_tmp = ((HX_("Resource(`",a6,d3,bc,37) + this->id) + HX_("`, ",d4,fe,48,00));
HXDLIN( 166)		::String _hx_tmp1 = ((_hx_tmp + this->type_string()) + HX_(", ",74,26,00,00));
HXDLIN( 166)		return ((_hx_tmp1 + this->state_string()) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Resource_obj,toString,return )


hx::ObjectPtr< Resource_obj > Resource_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< Resource_obj > __this = new Resource_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< Resource_obj > Resource_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	Resource_obj *__this = (Resource_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Resource_obj), true, "luxe.resource.Resource"));
	*(void **)__this = Resource_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

Resource_obj::Resource_obj()
{
}

void Resource_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Resource);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(_hx_system,"system");
	HX_MARK_MEMBER_NAME(resource_type,"resource_type");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(ref,"ref");
	HX_MARK_END_CLASS();
}

void Resource_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(_hx_system,"system");
	HX_VISIT_MEMBER_NAME(resource_type,"resource_type");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(ref,"ref");
}

hx::Val Resource_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ref") ) { return hx::Val( ref ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"system") ) { return hx::Val( _hx_system ); }
		if (HX_FIELD_EQ(inName,"reload") ) { return hx::Val( reload_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_ref") ) { return hx::Val( set_ref_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_state") ) { return hx::Val( set_state_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"invalidate") ) { return hx::Val( invalidate_dyn() ); }
		if (HX_FIELD_EQ(inName,"memory_use") ) { return hx::Val( memory_use_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"type_string") ) { return hx::Val( type_string_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"state_string") ) { return hx::Val( state_string_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"resource_type") ) { return hx::Val( resource_type ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Resource_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ref") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_ref(inValue.Cast< int >()) );ref=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_state(inValue.Cast< int >()) );state=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"system") ) { _hx_system=inValue.Cast<  ::luxe::Resources >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"resource_type") ) { resource_type=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Resource_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("system","\xef","\x96","\xe2","\xf2"));
	outFields->push(HX_HCSTRING("resource_type","\x0b","\x87","\x30","\x9c"));
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	outFields->push(HX_HCSTRING("ref","\x53","\xd9","\x56","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Resource_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Resource_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsObject /*::luxe::Resources*/ ,(int)offsetof(Resource_obj,_hx_system),HX_HCSTRING("system","\xef","\x96","\xe2","\xf2")},
	{hx::fsInt,(int)offsetof(Resource_obj,resource_type),HX_HCSTRING("resource_type","\x0b","\x87","\x30","\x9c")},
	{hx::fsInt,(int)offsetof(Resource_obj,state),HX_HCSTRING("state","\x11","\x76","\x0b","\x84")},
	{hx::fsInt,(int)offsetof(Resource_obj,ref),HX_HCSTRING("ref","\x53","\xd9","\x56","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Resource_obj_sStaticStorageInfo = 0;
#endif

static ::String Resource_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("system","\xef","\x96","\xe2","\xf2"),
	HX_HCSTRING("resource_type","\x0b","\x87","\x30","\x9c"),
	HX_HCSTRING("state","\x11","\x76","\x0b","\x84"),
	HX_HCSTRING("ref","\x53","\xd9","\x56","\x00"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("invalidate","\x7b","\x19","\x2a","\x87"),
	HX_HCSTRING("reload","\x59","\x53","\xdf","\x03"),
	HX_HCSTRING("memory_use","\xc9","\x50","\x8c","\xfa"),
	HX_HCSTRING("set_ref","\xf6","\x32","\xcd","\x19"),
	HX_HCSTRING("set_state","\x74","\xbe","\x05","\xab"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("state_string","\x7f","\x18","\xf0","\x6f"),
	HX_HCSTRING("type_string","\xf6","\x72","\x27","\xa2"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Resource_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Resource_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Resource_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Resource_obj::__mClass,"__mClass");
};

#endif

hx::Class Resource_obj::__mClass;

void Resource_obj::__register()
{
	hx::Object *dummy = new Resource_obj;
	Resource_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.resource.Resource","\xd6","\xdd","\xbb","\xbb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Resource_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Resource_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Resource_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Resource_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Resource_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Resource_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace resource
