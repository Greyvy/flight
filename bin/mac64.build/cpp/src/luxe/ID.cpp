// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_utils_Utils
#include <luxe/utils/Utils.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6d0e69f8e8934671_3_new,"luxe.ID","new",0xa0d20805,"luxe.ID.new","luxe/Objects.hx",3,0xf92c5f83)
namespace luxe{

void ID_obj::__construct(::String __o__name,::String __o__id){
::String _name = __o__name.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String _id = __o__id.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_6d0e69f8e8934671_3_new)
HXLINE(   8)		this->name = HX_("",00,00,00,00);
HXLINE(  12)		this->name = _name;
HXLINE(  13)		::String _hx_tmp;
HXDLIN(  13)		if ((_id == HX_("",00,00,00,00))) {
HXLINE(  13)			_hx_tmp = ::Luxe_obj::utils->uniqueid(null());
            		}
            		else {
HXLINE(  13)			_hx_tmp = _id;
            		}
HXDLIN(  13)		this->id = _hx_tmp;
            	}

Dynamic ID_obj::__CreateEmpty() { return new ID_obj; }

void *ID_obj::_hx_vtable = 0;

Dynamic ID_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ID_obj > _hx_result = new ID_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ID_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6b65f151;
}


hx::ObjectPtr< ID_obj > ID_obj::__new(::String __o__name,::String __o__id) {
	hx::ObjectPtr< ID_obj > __this = new ID_obj();
	__this->__construct(__o__name,__o__id);
	return __this;
}

hx::ObjectPtr< ID_obj > ID_obj::__alloc(hx::Ctx *_hx_ctx,::String __o__name,::String __o__id) {
	ID_obj *__this = (ID_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ID_obj), true, "luxe.ID"));
	*(void **)__this = ID_obj::_hx_vtable;
	__this->__construct(__o__name,__o__id);
	return __this;
}

ID_obj::ID_obj()
{
}

void ID_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ID);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_END_CLASS();
}

void ID_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(name,"name");
}

hx::Val ID_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ID_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ID_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ID_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(ID_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsString,(int)offsetof(ID_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ID_obj_sStaticStorageInfo = 0;
#endif

static ::String ID_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	::String(null()) };

static void ID_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ID_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ID_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ID_obj::__mClass,"__mClass");
};

#endif

hx::Class ID_obj::__mClass;

void ID_obj::__register()
{
	hx::Object *dummy = new ID_obj;
	ID_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.ID","\x93","\xa1","\xca","\xad");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ID_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ID_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ID_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ID_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ID_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ID_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
