// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_geometry_QuadPackGeometry
#define INCLUDED_phoenix_geometry_QuadPackGeometry

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS1(phoenix,Color)
HX_DECLARE_CLASS1(phoenix,Rectangle)
HX_DECLARE_CLASS1(phoenix,Vector)
HX_DECLARE_CLASS2(phoenix,geometry,Geometry)
HX_DECLARE_CLASS2(phoenix,geometry,QuadPackGeometry)

namespace phoenix{
namespace geometry{


class HXCPP_CLASS_ATTRIBUTES QuadPackGeometry_obj : public  ::phoenix::geometry::Geometry_obj
{
	public:
		typedef  ::phoenix::geometry::Geometry_obj super;
		typedef QuadPackGeometry_obj OBJ_;
		QuadPackGeometry_obj();

	public:
		enum { _hx_ClassId = 0x7b699af3 };

		void __construct( ::Dynamic _options);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="phoenix.geometry.QuadPackGeometry")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"phoenix.geometry.QuadPackGeometry"); }
		static hx::ObjectPtr< QuadPackGeometry_obj > __new( ::Dynamic _options);
		static hx::ObjectPtr< QuadPackGeometry_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic _options);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~QuadPackGeometry_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("QuadPackGeometry","\x32","\x86","\x41","\xb4"); }

		 ::haxe::ds::IntMap quads;
		void clear();
		::Dynamic clear_dyn();

		int quad_add( ::Dynamic _options);
		::Dynamic quad_add_dyn();

		void quad_remove(int _quad_id);
		::Dynamic quad_remove_dyn();

		void quad_visible(int _quad_id,bool visible);
		::Dynamic quad_visible_dyn();

		void quad_resize(int _quad_id, ::phoenix::Rectangle _size);
		::Dynamic quad_resize_dyn();

		void quad_pos(int _quad_id, ::phoenix::Vector _p);
		::Dynamic quad_pos_dyn();

		void quad_color(int _quad_id, ::phoenix::Color _c);
		::Dynamic quad_color_dyn();

		void quad_alpha(int _quad_id,Float _a);
		::Dynamic quad_alpha_dyn();

		void quad_uv_space(int _quad_id, ::phoenix::Rectangle _uv);
		::Dynamic quad_uv_space_dyn();

		void quad_uv(int _quad_id, ::phoenix::Rectangle _uv);
		::Dynamic quad_uv_dyn();

		void quad_flipx(int _quad_id,bool _flip);
		::Dynamic quad_flipx_dyn();

		void quad_flipy(int _quad_id,bool _flip);
		::Dynamic quad_flipy_dyn();

};

} // end namespace phoenix
} // end namespace geometry

#endif /* INCLUDED_phoenix_geometry_QuadPackGeometry */ 
