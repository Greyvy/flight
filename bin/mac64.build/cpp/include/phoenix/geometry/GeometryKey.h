// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_geometry_GeometryKey
#define INCLUDED_phoenix_geometry_GeometryKey

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_ff0a57908aaeb32e_904_new)
HX_DECLARE_CLASS2(luxe,resource,Resource)
HX_DECLARE_CLASS1(phoenix,Shader)
HX_DECLARE_CLASS1(phoenix,Texture)
HX_DECLARE_CLASS2(phoenix,geometry,GeometryKey)

namespace phoenix{
namespace geometry{


class HXCPP_CLASS_ATTRIBUTES GeometryKey_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GeometryKey_obj OBJ_;
		GeometryKey_obj();

	public:
		enum { _hx_ClassId = 0x70ea34cc };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="phoenix.geometry.GeometryKey")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"phoenix.geometry.GeometryKey"); }

		hx::ObjectPtr< GeometryKey_obj > __new() {
			hx::ObjectPtr< GeometryKey_obj > __this = new GeometryKey_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< GeometryKey_obj > __alloc(hx::Ctx *_hx_ctx) {
			GeometryKey_obj *__this = (GeometryKey_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GeometryKey_obj), true, "phoenix.geometry.GeometryKey"));
			*(void **)__this = GeometryKey_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_ff0a57908aaeb32e_904_new)
HXLINE( 920)		( ( ::phoenix::geometry::GeometryKey)(__this) )->blend_dest_rgb = (int)0;
HXLINE( 919)		( ( ::phoenix::geometry::GeometryKey)(__this) )->blend_dest_alpha = (int)0;
HXLINE( 918)		( ( ::phoenix::geometry::GeometryKey)(__this) )->blend_src_rgb = (int)0;
HXLINE( 917)		( ( ::phoenix::geometry::GeometryKey)(__this) )->blend_src_alpha = (int)0;
HXLINE( 916)		( ( ::phoenix::geometry::GeometryKey)(__this) )->blend_disabled = false;
HXLINE( 915)		( ( ::phoenix::geometry::GeometryKey)(__this) )->clip = false;
HXLINE( 914)		( ( ::phoenix::geometry::GeometryKey)(__this) )->depth = ((Float)0);
HXLINE( 910)		( ( ::phoenix::geometry::GeometryKey)(__this) )->uuid = HX_("",00,00,00,00);
HXLINE( 909)		( ( ::phoenix::geometry::GeometryKey)(__this) )->sequence = (int)0;
HXLINE( 908)		( ( ::phoenix::geometry::GeometryKey)(__this) )->timestamp = ((Float)0);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GeometryKey_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("GeometryKey","\xed","\x11","\x78","\x29"); }

		Float timestamp;
		int sequence;
		::String uuid;
		int primitive_type;
		 ::phoenix::Texture texture;
		 ::phoenix::Shader shader;
		Float depth;
		bool clip;
		bool blend_disabled;
		int blend_src_alpha;
		int blend_src_rgb;
		int blend_dest_alpha;
		int blend_dest_rgb;
};

} // end namespace phoenix
} // end namespace geometry

#endif /* INCLUDED_phoenix_geometry_GeometryKey */ 
