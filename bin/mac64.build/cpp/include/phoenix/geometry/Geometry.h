// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_geometry_Geometry
#define INCLUDED_phoenix_geometry_Geometry

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(luxe,ID)
HX_DECLARE_CLASS2(luxe,resource,Resource)
HX_DECLARE_CLASS1(opengl,GLObject)
HX_DECLARE_CLASS1(phoenix,Batcher)
HX_DECLARE_CLASS1(phoenix,Color)
HX_DECLARE_CLASS1(phoenix,Rectangle)
HX_DECLARE_CLASS1(phoenix,Shader)
HX_DECLARE_CLASS1(phoenix,Texture)
HX_DECLARE_CLASS1(phoenix,Transform)
HX_DECLARE_CLASS1(phoenix,Uniforms)
HX_DECLARE_CLASS1(phoenix,Vector)
HX_DECLARE_CLASS2(phoenix,geometry,Geometry)
HX_DECLARE_CLASS2(phoenix,geometry,GeometryKey)
HX_DECLARE_CLASS2(phoenix,geometry,GeometryState)
HX_DECLARE_CLASS2(phoenix,geometry,Vertex)
HX_DECLARE_CLASS3(snow,api,buffers,ArrayBufferView)

namespace phoenix{
namespace geometry{


class HXCPP_CLASS_ATTRIBUTES Geometry_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Geometry_obj OBJ_;
		Geometry_obj();

	public:
		enum { _hx_ClassId = 0x6c1faa93 };

		void __construct( ::Dynamic _options);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="phoenix.geometry.Geometry")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"phoenix.geometry.Geometry"); }
		static hx::ObjectPtr< Geometry_obj > __new( ::Dynamic _options);
		static hx::ObjectPtr< Geometry_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic _options);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Geometry_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Geometry","\xd2","\xbe","\x5a","\xac"); }

		static void __boot();
		static int _sequence_key;
		 ::phoenix::Transform transform;
		::Array< ::Dynamic> vertices;
		bool object_space;
		bool buffer_based;
		int buffer_type;
		 ::snow::api::buffers::ArrayBufferView buffer_pos;
		 ::snow::api::buffers::ArrayBufferView buffer_tcoords;
		 ::snow::api::buffers::ArrayBufferView buffer_colors;
		 ::snow::api::buffers::ArrayBufferView buffer_normals;
		 ::opengl::GLObject vb_pos;
		 ::opengl::GLObject vb_tcoords;
		 ::opengl::GLObject vb_colors;
		 ::opengl::GLObject vb_normals;
		 ::phoenix::Uniforms uniforms;
		bool added;
		::Array< ::Dynamic> batchers;
		 ::phoenix::geometry::GeometryState state;
		bool dropped;
		::String uuid;
		::String id;
		int primitive_type;
		 ::phoenix::Texture texture;
		 ::phoenix::Shader shader;
		Float depth;
		 ::phoenix::Rectangle clip_rect;
		bool blend_disabled;
		int blend_src_alpha;
		int blend_src_rgb;
		int blend_dest_alpha;
		int blend_dest_rgb;
		int shadow_primitive_type;
		 ::phoenix::Texture shadow_texture;
		 ::phoenix::Shader shadow_shader;
		Float shadow_depth;
		bool shadow_clip;
		bool shadow_blend_disabled;
		int shadow_blend_src_alpha;
		int shadow_blend_src_rgb;
		int shadow_blend_dest_alpha;
		int shadow_blend_dest_rgb;
		bool dirty_primitive_type;
		bool dirty_texture;
		bool dirty_shader;
		bool dirty_depth;
		bool dirty_clip;
		bool dirty_blend;
		bool visible;
		bool immediate;
		bool locked;
		bool dirty;
		 ::phoenix::Color color;
		bool dirty_based;
		bool clip;
		 ::phoenix::Vector _final_vert_position;
		 ::phoenix::geometry::GeometryKey key;
		::String key_string();
		::Dynamic key_string_dyn();

		void refresh_key();
		::Dynamic refresh_key_dyn();

		void str();
		::Dynamic str_dyn();

		virtual void drop( ::Dynamic remove);
		::Dynamic drop_dyn();

		void add( ::phoenix::geometry::Vertex v);
		::Dynamic add_dyn();

		void remove( ::phoenix::geometry::Vertex v);
		::Dynamic remove_dyn();

		void batch_object_space(int vert_index,int tcoord_index,int color_index,int normal_index, ::snow::api::buffers::ArrayBufferView vertlist, ::snow::api::buffers::ArrayBufferView tcoordlist, ::snow::api::buffers::ArrayBufferView colorlist, ::snow::api::buffers::ArrayBufferView normallist);
		::Dynamic batch_object_space_dyn();

		void batch_into_arrays(::Array< Float > vertlist,::Array< Float > tcoordlist,::Array< Float > colorlist,::Array< Float > normallist);
		::Dynamic batch_into_arrays_dyn();

		void destroy_vbos();
		::Dynamic destroy_vbos_dyn();

		void create_vbos();
		::Dynamic create_vbos_dyn();

		void bind();
		::Dynamic bind_dyn();

		void bind_pos();
		::Dynamic bind_pos_dyn();

		void bind_tcoords();
		::Dynamic bind_tcoords_dyn();

		void bind_colors();
		::Dynamic bind_colors_dyn();

		void unbind();
		::Dynamic unbind_dyn();

		void bind_and_upload();
		::Dynamic bind_and_upload_dyn();

		int _prev_count;
		bool update_buffers();
		::Dynamic update_buffers_dyn();

		void draw();
		::Dynamic draw_dyn();

		void translate( ::phoenix::Vector _offset);
		::Dynamic translate_dyn();

		bool set_locked(bool _locked);
		::Dynamic set_locked_dyn();

		bool get_locked();
		::Dynamic get_locked_dyn();

		bool set_dirty(bool _dirty);
		::Dynamic set_dirty_dyn();

		bool get_dirty();
		::Dynamic get_dirty_dyn();

		void refresh();
		::Dynamic refresh_dyn();

		int get_primitive_type();
		::Dynamic get_primitive_type_dyn();

		int set_primitive_type(int val);
		::Dynamic set_primitive_type_dyn();

		 ::phoenix::Texture get_texture();
		::Dynamic get_texture_dyn();

		 ::phoenix::Texture set_texture( ::phoenix::Texture val);
		::Dynamic set_texture_dyn();

		bool set_visible(bool val);
		::Dynamic set_visible_dyn();

		 ::phoenix::Color set_color( ::phoenix::Color val);
		::Dynamic set_color_dyn();

		 ::phoenix::Shader get_shader();
		::Dynamic get_shader_dyn();

		 ::phoenix::Shader set_shader( ::phoenix::Shader val);
		::Dynamic set_shader_dyn();

		Float get_depth();
		::Dynamic get_depth_dyn();

		Float set_depth(Float val);
		::Dynamic set_depth_dyn();

		bool get_blend_disabled();
		::Dynamic get_blend_disabled_dyn();

		int get_blend_src_alpha();
		::Dynamic get_blend_src_alpha_dyn();

		int get_blend_src_rgb();
		::Dynamic get_blend_src_rgb_dyn();

		int get_blend_dest_alpha();
		::Dynamic get_blend_dest_alpha_dyn();

		int get_blend_dest_rgb();
		::Dynamic get_blend_dest_rgb_dyn();

		bool set_blend_disabled(bool val);
		::Dynamic set_blend_disabled_dyn();

		int set_blend_src_alpha(int val);
		::Dynamic set_blend_src_alpha_dyn();

		int set_blend_src_rgb(int val);
		::Dynamic set_blend_src_rgb_dyn();

		int set_blend_dest_alpha(int val);
		::Dynamic set_blend_dest_alpha_dyn();

		int set_blend_dest_rgb(int val);
		::Dynamic set_blend_dest_rgb_dyn();

		bool get_clip();
		::Dynamic get_clip_dyn();

		bool set_clip(bool val);
		::Dynamic set_clip_dyn();

		 ::phoenix::Rectangle get_clip_rect();
		::Dynamic get_clip_rect_dyn();

		 ::phoenix::Rectangle set_clip_rect( ::phoenix::Rectangle val);
		::Dynamic set_clip_rect_dyn();

};

} // end namespace phoenix
} // end namespace geometry

#endif /* INCLUDED_phoenix_geometry_Geometry */ 
