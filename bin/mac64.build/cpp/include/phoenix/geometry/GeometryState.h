// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_geometry_GeometryState
#define INCLUDED_phoenix_geometry_GeometryState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(luxe,resource,Resource)
HX_DECLARE_CLASS1(phoenix,Shader)
HX_DECLARE_CLASS1(phoenix,Texture)
HX_DECLARE_CLASS2(phoenix,geometry,GeometryState)

namespace phoenix{
namespace geometry{


class HXCPP_CLASS_ATTRIBUTES GeometryState_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GeometryState_obj OBJ_;
		GeometryState_obj();

	public:
		enum { _hx_ClassId = 0x5e9f2746 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="phoenix.geometry.GeometryState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"phoenix.geometry.GeometryState"); }
		static hx::ObjectPtr< GeometryState_obj > __new();
		static hx::ObjectPtr< GeometryState_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GeometryState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("GeometryState","\xdf","\x2d","\x1f","\x2a"); }

		bool dirty;
		bool log;
		bool ignore_blend;
		int primitive_type;
		 ::phoenix::Shader shader;
		 ::phoenix::Texture texture;
		Float depth;
		bool clip;
		Float clip_x;
		Float clip_y;
		Float clip_w;
		Float clip_h;
		bool blend_disabled;
		int blend_src_alpha;
		int blend_src_rgb;
		int blend_dest_alpha;
		int blend_dest_rgb;
		void clone_onto( ::phoenix::geometry::GeometryState _other);
		::Dynamic clone_onto_dyn();

		void str();
		::Dynamic str_dyn();

		void clean();
		::Dynamic clean_dyn();

		int set_primitive_type(int val);
		::Dynamic set_primitive_type_dyn();

		 ::phoenix::Texture set_texture( ::phoenix::Texture val);
		::Dynamic set_texture_dyn();

		 ::phoenix::Shader set_shader( ::phoenix::Shader val);
		::Dynamic set_shader_dyn();

		Float set_depth(Float val);
		::Dynamic set_depth_dyn();

		bool set_clip(bool val);
		::Dynamic set_clip_dyn();

		Float set_clip_x(Float val);
		::Dynamic set_clip_x_dyn();

		Float set_clip_y(Float val);
		::Dynamic set_clip_y_dyn();

		Float set_clip_w(Float val);
		::Dynamic set_clip_w_dyn();

		Float set_clip_h(Float val);
		::Dynamic set_clip_h_dyn();

		bool set_blend_disabled(bool val);
		::Dynamic set_blend_disabled_dyn();

		int set_blend_src_alpha(int val);
		::Dynamic set_blend_src_alpha_dyn();

		int set_blend_src_rgb(int val);
		::Dynamic set_blend_src_rgb_dyn();

		int set_blend_dest_alpha(int val);
		::Dynamic set_blend_dest_alpha_dyn();

		int set_blend_dest_rgb(int val);
		::Dynamic set_blend_dest_rgb_dyn();

};

} // end namespace phoenix
} // end namespace geometry

#endif /* INCLUDED_phoenix_geometry_GeometryState */ 
