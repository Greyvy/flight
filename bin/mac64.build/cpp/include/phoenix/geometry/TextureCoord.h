// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_geometry_TextureCoord
#define INCLUDED_phoenix_geometry_TextureCoord

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_5153454287530a66_62_new)
HX_DECLARE_CLASS2(phoenix,geometry,TextureCoord)

namespace phoenix{
namespace geometry{


class HXCPP_CLASS_ATTRIBUTES TextureCoord_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TextureCoord_obj OBJ_;
		TextureCoord_obj();

	public:
		enum { _hx_ClassId = 0x477d143b };

		void __construct(hx::Null< Float >  __o__u,hx::Null< Float >  __o__v,hx::Null< Float >  __o__w,hx::Null< Float >  __o__t);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="phoenix.geometry.TextureCoord")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"phoenix.geometry.TextureCoord"); }

		hx::ObjectPtr< TextureCoord_obj > __new(hx::Null< Float >  __o__u,hx::Null< Float >  __o__v,hx::Null< Float >  __o__w,hx::Null< Float >  __o__t) {
			hx::ObjectPtr< TextureCoord_obj > __this = new TextureCoord_obj();
			__this->__construct(__o__u,__o__v,__o__w,__o__t);
			return __this;
		}

		static hx::ObjectPtr< TextureCoord_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o__u,hx::Null< Float >  __o__v,hx::Null< Float >  __o__w,hx::Null< Float >  __o__t) {
			TextureCoord_obj *__this = (TextureCoord_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextureCoord_obj), false, "phoenix.geometry.TextureCoord"));
			*(void **)__this = TextureCoord_obj::_hx_vtable;
{
Float _u = __o__u.Default(((Float)0.0));
Float _v = __o__v.Default(((Float)0.0));
Float _w = __o__w.Default(((Float)0.0));
Float _t = __o__t.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_5153454287530a66_62_new)
HXLINE(  68)		( ( ::phoenix::geometry::TextureCoord)(__this) )->t = ((Float)0.0);
HXLINE(  67)		( ( ::phoenix::geometry::TextureCoord)(__this) )->w = ((Float)0.0);
HXLINE(  66)		( ( ::phoenix::geometry::TextureCoord)(__this) )->v = ((Float)0.0);
HXLINE(  65)		( ( ::phoenix::geometry::TextureCoord)(__this) )->u = ((Float)0.0);
HXLINE(  73)		( ( ::phoenix::geometry::TextureCoord)(__this) )->u = _u;
HXLINE(  74)		( ( ::phoenix::geometry::TextureCoord)(__this) )->v = _v;
HXLINE(  75)		( ( ::phoenix::geometry::TextureCoord)(__this) )->w = _w;
HXLINE(  76)		( ( ::phoenix::geometry::TextureCoord)(__this) )->t = _t;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TextureCoord_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("TextureCoord","\xfa","\xb3","\x10","\x0b"); }

		Float u;
		Float v;
		Float w;
		Float t;
		 ::phoenix::geometry::TextureCoord clone();
		::Dynamic clone_dyn();

		 ::phoenix::geometry::TextureCoord set(Float _u,Float _v,Float _w,Float _t);
		::Dynamic set_dyn();

		 ::phoenix::geometry::TextureCoord set_uv(Float _u,Float _v);
		::Dynamic set_uv_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace phoenix
} // end namespace geometry

#endif /* INCLUDED_phoenix_geometry_TextureCoord */ 
