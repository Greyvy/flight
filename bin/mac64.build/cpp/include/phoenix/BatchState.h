// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_BatchState
#define INCLUDED_phoenix_BatchState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(luxe,resource,Resource)
HX_DECLARE_CLASS1(phoenix,BatchState)
HX_DECLARE_CLASS1(phoenix,Batcher)
HX_DECLARE_CLASS1(phoenix,Rectangle)
HX_DECLARE_CLASS1(phoenix,Shader)
HX_DECLARE_CLASS2(phoenix,geometry,Geometry)
HX_DECLARE_CLASS2(phoenix,geometry,GeometryState)

namespace phoenix{


class HXCPP_CLASS_ATTRIBUTES BatchState_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BatchState_obj OBJ_;
		BatchState_obj();

	public:
		enum { _hx_ClassId = 0x7fd37436 };

		void __construct( ::phoenix::Batcher _r);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="phoenix.BatchState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"phoenix.BatchState"); }
		static hx::ObjectPtr< BatchState_obj > __new( ::phoenix::Batcher _r);
		static hx::ObjectPtr< BatchState_obj > __alloc(hx::Ctx *_hx_ctx, ::phoenix::Batcher _r);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BatchState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("BatchState","\x17","\xc0","\xaa","\x2c"); }

		 ::phoenix::Batcher batcher;
		 ::phoenix::geometry::GeometryState geom_state;
		 ::phoenix::geometry::GeometryState last_geom_state;
		 ::Dynamic last_texture_id;
		 ::Dynamic last_shader_id;
		bool is_clipping;
		 ::phoenix::Rectangle clip_rect;
		 ::phoenix::Rectangle last_clip_rect;
		bool last_blend_disabled;
		int last_blend_src_alpha;
		int last_blend_src_rgb;
		int last_blend_dest_alpha;
		int last_blend_dest_rgb;
		bool log;
		 ::phoenix::Shader active_shader();
		::Dynamic active_shader_dyn();

		void activate( ::phoenix::Batcher batcher);
		::Dynamic activate_dyn();

		void deactivate( ::phoenix::Batcher batcher);
		::Dynamic deactivate_dyn();

		bool update( ::phoenix::geometry::Geometry geom);
		::Dynamic update_dyn();

		void str();
		::Dynamic str_dyn();

};

} // end namespace phoenix

#endif /* INCLUDED_phoenix_BatchState */ 
