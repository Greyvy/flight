// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_utils_Rendering
#define INCLUDED_phoenix_utils_Rendering

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(phoenix,utils,Rendering)

namespace phoenix{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES Rendering_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Rendering_obj OBJ_;
		Rendering_obj();

	public:
		enum { _hx_ClassId = 0x70495a22 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="phoenix.utils.Rendering")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"phoenix.utils.Rendering"); }

		hx::ObjectPtr< Rendering_obj > __new() {
			hx::ObjectPtr< Rendering_obj > __this = new Rendering_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Rendering_obj > __alloc(hx::Ctx *_hx_ctx) {
			Rendering_obj *__this = (Rendering_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Rendering_obj), false, "phoenix.utils.Rendering"));
			*(void **)__this = Rendering_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Rendering_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Rendering","\x2c","\xbb","\x46","\x6f"); }

		static int gl_blend_mode_from_BlendMode(int _b);
		static ::Dynamic gl_blend_mode_from_BlendMode_dyn();

		static Float fovx_to_y(Float fovx,Float aspect);
		static ::Dynamic fovx_to_y_dyn();

};

} // end namespace phoenix
} // end namespace utils

#endif /* INCLUDED_phoenix_utils_Rendering */ 
