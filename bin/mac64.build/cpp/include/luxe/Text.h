// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_Text
#define INCLUDED_luxe_Text

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
HX_DECLARE_CLASS1(luxe,Emitter)
HX_DECLARE_CLASS1(luxe,Entity)
HX_DECLARE_CLASS1(luxe,Objects)
HX_DECLARE_CLASS1(luxe,Text)
HX_DECLARE_CLASS1(luxe,Visual)
HX_DECLARE_CLASS2(luxe,resource,Resource)
HX_DECLARE_CLASS1(phoenix,BitmapFont)
HX_DECLARE_CLASS1(phoenix,Color)
HX_DECLARE_CLASS1(phoenix,Rectangle)
HX_DECLARE_CLASS1(phoenix,Vector)
HX_DECLARE_CLASS2(phoenix,geometry,Geometry)
HX_DECLARE_CLASS2(phoenix,geometry,TextGeometry)

namespace luxe{


class HXCPP_CLASS_ATTRIBUTES Text_obj : public  ::luxe::Visual_obj
{
	public:
		typedef  ::luxe::Visual_obj super;
		typedef Text_obj OBJ_;
		Text_obj();

	public:
		enum { _hx_ClassId = 0x3ae43e8b };

		void __construct( ::Dynamic _options);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.Text")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.Text"); }
		static hx::ObjectPtr< Text_obj > __new( ::Dynamic _options);
		static hx::ObjectPtr< Text_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic _options);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Text_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Text","\xcd","\xf8","\xd2","\x37"); }

		 ::phoenix::geometry::TextGeometry geom;
		::String get_text();
		::Dynamic get_text_dyn();

		::String set_text(::String _s);
		::Dynamic set_text_dyn();

		 ::phoenix::BitmapFont get_font();
		::Dynamic get_font_dyn();

		 ::phoenix::BitmapFont set_font( ::phoenix::BitmapFont _f);
		::Dynamic set_font_dyn();

		Float get_point_size();
		::Dynamic get_point_size_dyn();

		Float set_point_size(Float _s);
		::Dynamic set_point_size_dyn();

		Float get_letter_spacing();
		::Dynamic get_letter_spacing_dyn();

		Float set_letter_spacing(Float _s);
		::Dynamic set_letter_spacing_dyn();

		Float get_line_spacing();
		::Dynamic get_line_spacing_dyn();

		Float set_line_spacing(Float _s);
		::Dynamic set_line_spacing_dyn();

		 ::phoenix::Rectangle get_bounds();
		::Dynamic get_bounds_dyn();

		 ::phoenix::Rectangle set_bounds( ::phoenix::Rectangle _b);
		::Dynamic set_bounds_dyn();

		bool get_bounds_wrap();
		::Dynamic get_bounds_wrap_dyn();

		bool set_bounds_wrap(bool _b);
		::Dynamic set_bounds_wrap_dyn();

		int get_align();
		::Dynamic get_align_dyn();

		int set_align(int _a);
		::Dynamic set_align_dyn();

		int get_align_vertical();
		::Dynamic get_align_vertical_dyn();

		int set_align_vertical(int _a);
		::Dynamic set_align_vertical_dyn();

		bool get_sdf();
		::Dynamic get_sdf_dyn();

		bool set_sdf(bool _s);
		::Dynamic set_sdf_dyn();

		Float get_smoothness();
		::Dynamic get_smoothness_dyn();

		Float set_smoothness(Float _s);
		::Dynamic set_smoothness_dyn();

		Float get_thickness();
		::Dynamic get_thickness_dyn();

		Float set_thickness(Float _t);
		::Dynamic set_thickness_dyn();

		Float get_outline();
		::Dynamic get_outline_dyn();

		Float set_outline(Float _o);
		::Dynamic set_outline_dyn();

		 ::phoenix::Color get_outline_color();
		::Dynamic get_outline_color_dyn();

		 ::phoenix::Color set_outline_color( ::phoenix::Color _c);
		::Dynamic set_outline_color_dyn();

		Float get_glow_threshold();
		::Dynamic get_glow_threshold_dyn();

		Float set_glow_threshold(Float _s);
		::Dynamic set_glow_threshold_dyn();

		Float get_glow_amount();
		::Dynamic get_glow_amount_dyn();

		Float set_glow_amount(Float _e);
		::Dynamic set_glow_amount_dyn();

		 ::phoenix::Color get_glow_color();
		::Dynamic get_glow_color_dyn();

		 ::phoenix::Color set_glow_color( ::phoenix::Color _c);
		::Dynamic set_glow_color_dyn();

		 ::Dynamic text_options;
		bool point_inside( ::phoenix::Vector p);
		::Dynamic point_inside_dyn();

		void set_pos_from_transform( ::phoenix::Vector _p);

		 ::phoenix::Rectangle text_bounds;
		void on_geom_text_update( ::Dynamic _);
		::Dynamic on_geom_text_update_dyn();

		void _update_bounds();
		::Dynamic _update_bounds_dyn();

		void ondestroy();

		void init();

};

} // end namespace luxe

#endif /* INCLUDED_luxe_Text */ 
