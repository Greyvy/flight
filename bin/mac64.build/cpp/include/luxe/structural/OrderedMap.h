// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_structural_OrderedMap
#define INCLUDED_luxe_structural_OrderedMap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(luxe,structural,OrderedMap)
HX_DECLARE_CLASS2(luxe,structural,OrderedMapIterator)

namespace luxe{
namespace structural{


class HXCPP_CLASS_ATTRIBUTES OrderedMap_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef OrderedMap_obj OBJ_;
		OrderedMap_obj();

	public:
		enum { _hx_ClassId = 0x4c3b0ec6 };

		void __construct(::Dynamic _map);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.structural.OrderedMap")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.structural.OrderedMap"); }
		static hx::ObjectPtr< OrderedMap_obj > __new(::Dynamic _map);
		static hx::ObjectPtr< OrderedMap_obj > __alloc(hx::Ctx *_hx_ctx,::Dynamic _map);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~OrderedMap_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		 ::Dynamic iterator_8b3ae2fb();

		void set_41d0cb46( ::Dynamic k, ::Dynamic v);
		::String __ToString() const { return HX_HCSTRING("OrderedMap","\x4f","\x00","\xa4","\x04"); }

		::Dynamic map;
		int idx;
		::cpp::VirtualArray _keys;
		void set( ::Dynamic key, ::Dynamic value);
		::Dynamic set_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		 ::luxe::structural::OrderedMapIterator iterator();
		::Dynamic iterator_dyn();

		bool remove( ::Dynamic key);
		::Dynamic remove_dyn();

		bool exists( ::Dynamic key);
		::Dynamic exists_dyn();

		 ::Dynamic get( ::Dynamic key);
		::Dynamic get_dyn();

		 ::Dynamic keys();
		::Dynamic keys_dyn();

};

} // end namespace luxe
} // end namespace structural

#endif /* INCLUDED_luxe_structural_OrderedMap */ 
