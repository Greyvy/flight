// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_structural__BalancedBST_NodeColor
#define INCLUDED_luxe_structural__BalancedBST_NodeColor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(luxe,structural,_BalancedBST,NodeColor)

namespace luxe{
namespace structural{
namespace _BalancedBST{


class HXCPP_CLASS_ATTRIBUTES NodeColor_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef NodeColor_obj OBJ_;
		NodeColor_obj();

	public:
		enum { _hx_ClassId = 0x2a9b1a32 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="luxe.structural._BalancedBST.NodeColor")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"luxe.structural._BalancedBST.NodeColor"); }

		hx::ObjectPtr< NodeColor_obj > __new() {
			hx::ObjectPtr< NodeColor_obj > __this = new NodeColor_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< NodeColor_obj > __alloc(hx::Ctx *_hx_ctx) {
			NodeColor_obj *__this = (NodeColor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NodeColor_obj), false, "luxe.structural._BalancedBST.NodeColor"));
			*(void **)__this = NodeColor_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~NodeColor_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("NodeColor","\xe1","\x2f","\x65","\x90"); }

		static void __boot();
		static bool red;
		static bool black;
};

} // end namespace luxe
} // end namespace structural
} // end namespace _BalancedBST

#endif /* INCLUDED_luxe_structural__BalancedBST_NodeColor */ 
