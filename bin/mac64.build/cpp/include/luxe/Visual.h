// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_Visual
#define INCLUDED_luxe_Visual

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
HX_DECLARE_CLASS1(luxe,Emitter)
HX_DECLARE_CLASS1(luxe,Entity)
HX_DECLARE_CLASS1(luxe,ID)
HX_DECLARE_CLASS1(luxe,Objects)
HX_DECLARE_CLASS1(luxe,Visual)
HX_DECLARE_CLASS2(luxe,resource,Resource)
HX_DECLARE_CLASS1(phoenix,Color)
HX_DECLARE_CLASS1(phoenix,Quaternion)
HX_DECLARE_CLASS1(phoenix,Rectangle)
HX_DECLARE_CLASS1(phoenix,Shader)
HX_DECLARE_CLASS1(phoenix,Texture)
HX_DECLARE_CLASS1(phoenix,Transform)
HX_DECLARE_CLASS1(phoenix,Vector)
HX_DECLARE_CLASS2(phoenix,geometry,Geometry)

namespace luxe{


class HXCPP_CLASS_ATTRIBUTES Visual_obj : public  ::luxe::Entity_obj
{
	public:
		typedef  ::luxe::Entity_obj super;
		typedef Visual_obj OBJ_;
		Visual_obj();

	public:
		enum { _hx_ClassId = 0x025d481e };

		void __construct( ::Dynamic _options);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.Visual")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.Visual"); }
		static hx::ObjectPtr< Visual_obj > __new( ::Dynamic _options);
		static hx::ObjectPtr< Visual_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic _options);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Visual_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Visual","\xe0","\x96","\x20","\x24"); }

		 ::phoenix::Vector size;
		 ::phoenix::geometry::Geometry geometry;
		bool locked;
		 ::phoenix::Texture texture;
		 ::phoenix::Shader shader;
		 ::phoenix::Color color;
		bool visible;
		Float depth;
		 ::phoenix::Rectangle clip_rect;
		Float radians;
		 ::phoenix::Vector _rotation_euler;
		 ::phoenix::Quaternion _rotation_quat;
		bool _has_custom_origin;
		bool _creating_geometry;
		void _create_geometry();
		::Dynamic _create_geometry_dyn();

		virtual void ondestroy();

		virtual void on_geometry_created();
		::Dynamic on_geometry_created_dyn();

		bool set_visible(bool _v);
		::Dynamic set_visible_dyn();

		Float set_depth(Float _v);
		::Dynamic set_depth_dyn();

		 ::phoenix::Color set_color( ::phoenix::Color _c);
		::Dynamic set_color_dyn();

		 ::phoenix::Texture set_texture( ::phoenix::Texture _t);
		::Dynamic set_texture_dyn();

		 ::phoenix::Shader set_shader( ::phoenix::Shader _s);
		::Dynamic set_shader_dyn();

		bool ignore_texture_on_geometry_change;
		virtual  ::phoenix::geometry::Geometry set_geometry( ::phoenix::geometry::Geometry _g);
		::Dynamic set_geometry_dyn();

		void set_parent_from_transform( ::phoenix::Transform _parent);

		void set_rotation_from_transform( ::phoenix::Quaternion _rotation);

		virtual  ::phoenix::Vector set_size( ::phoenix::Vector _v);
		::Dynamic set_size_dyn();

		bool get_blend_disabled();
		::Dynamic get_blend_disabled_dyn();

		int get_blend_src();
		::Dynamic get_blend_src_dyn();

		int get_blend_dest();
		::Dynamic get_blend_dest_dyn();

		int get_blend_src_alpha();
		::Dynamic get_blend_src_alpha_dyn();

		int get_blend_src_rgb();
		::Dynamic get_blend_src_rgb_dyn();

		int get_blend_dest_alpha();
		::Dynamic get_blend_dest_alpha_dyn();

		int get_blend_dest_rgb();
		::Dynamic get_blend_dest_rgb_dyn();

		bool set_blend_disabled(bool val);
		::Dynamic set_blend_disabled_dyn();

		int set_blend_src(int val);
		::Dynamic set_blend_src_dyn();

		int set_blend_dest(int val);
		::Dynamic set_blend_dest_dyn();

		int set_blend_src_alpha(int val);
		::Dynamic set_blend_src_alpha_dyn();

		int set_blend_src_rgb(int val);
		::Dynamic set_blend_src_rgb_dyn();

		int set_blend_dest_alpha(int val);
		::Dynamic set_blend_dest_alpha_dyn();

		int set_blend_dest_rgb(int val);
		::Dynamic set_blend_dest_rgb_dyn();

		Float get_rotation_z();
		::Dynamic get_rotation_z_dyn();

		Float set_rotation_z(Float _degrees);
		::Dynamic set_rotation_z_dyn();

		Float set_radians(Float _r);
		::Dynamic set_radians_dyn();

		Float get_radians();
		::Dynamic get_radians_dyn();

		bool set_locked(bool _l);
		::Dynamic set_locked_dyn();

		 ::phoenix::Rectangle set_clip_rect( ::phoenix::Rectangle _val);
		::Dynamic set_clip_rect_dyn();

		void _size_change(Float _v);
		::Dynamic _size_change_dyn();

		virtual void init();

};

} // end namespace luxe

#endif /* INCLUDED_luxe_Visual */ 
