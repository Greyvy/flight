// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_debug_StatsDebugView
#define INCLUDED_luxe_debug_StatsDebugView

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_luxe_debug_DebugView
#include <luxe/debug/DebugView.h>
#endif
HX_DECLARE_CLASS1(luxe,Debug)
HX_DECLARE_CLASS1(luxe,Emitter)
HX_DECLARE_CLASS1(luxe,Entity)
HX_DECLARE_CLASS1(luxe,KeyEvent)
HX_DECLARE_CLASS1(luxe,MouseEvent)
HX_DECLARE_CLASS1(luxe,Objects)
HX_DECLARE_CLASS1(luxe,Text)
HX_DECLARE_CLASS1(luxe,Visual)
HX_DECLARE_CLASS2(luxe,debug,DebugView)
HX_DECLARE_CLASS2(luxe,debug,StatsDebugView)
HX_DECLARE_CLASS1(phoenix,Batcher)
HX_DECLARE_CLASS2(snow,types,WindowEvent)

namespace luxe{
namespace debug{


class HXCPP_CLASS_ATTRIBUTES StatsDebugView_obj : public  ::luxe::debug::DebugView_obj
{
	public:
		typedef  ::luxe::debug::DebugView_obj super;
		typedef StatsDebugView_obj OBJ_;
		StatsDebugView_obj();

	public:
		enum { _hx_ClassId = 0x21ea53b6 };

		void __construct( ::luxe::Debug _debug);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.debug.StatsDebugView")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.debug.StatsDebugView"); }
		static hx::ObjectPtr< StatsDebugView_obj > __new( ::luxe::Debug _debug);
		static hx::ObjectPtr< StatsDebugView_obj > __alloc(hx::Ctx *_hx_ctx, ::luxe::Debug _debug);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~StatsDebugView_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("StatsDebugView","\x59","\x98","\x9d","\x3c"); }

		 ::Dynamic _last_render_stats;
		 ::Dynamic _render_stats;
		int debug_draw_call_count;
		int debug_geometry_count;
		int font_size;
		 ::luxe::Text render_stats_text;
		 ::luxe::Text resource_list_text;
		::String get_resource_stats_string();
		::Dynamic get_resource_stats_string_dyn();

		::String get_batcher_info( ::phoenix::Batcher b);
		::Dynamic get_batcher_info_dyn();

		::String get_render_stats_string();
		::Dynamic get_render_stats_string_dyn();

		int margin;
		void create();

		void resize();
		::Dynamic resize_dyn();

		void onwindowsized( ::snow::types::WindowEvent e);

		void refresh();

		void process();

		void onmousewheel( ::luxe::MouseEvent e);

		void onkeydown( ::luxe::KeyEvent e);

		void show();

		void hide();

		void reset_tween();
		::Dynamic reset_tween_dyn();

		void refresh_render_stats();
		::Dynamic refresh_render_stats_dyn();

		void update_render_stats();
		::Dynamic update_render_stats_dyn();

};

} // end namespace luxe
} // end namespace debug

#endif /* INCLUDED_luxe_debug_StatsDebugView */ 
