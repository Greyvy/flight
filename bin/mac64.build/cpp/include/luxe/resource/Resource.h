// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_resource_Resource
#define INCLUDED_luxe_resource_Resource

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(luxe,Resources)
HX_DECLARE_CLASS2(luxe,resource,Resource)
HX_DECLARE_CLASS2(snow,api,Promise)

namespace luxe{
namespace resource{


class HXCPP_CLASS_ATTRIBUTES Resource_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Resource_obj OBJ_;
		Resource_obj();

	public:
		enum { _hx_ClassId = 0x40d63fd6 };

		void __construct( ::Dynamic _options);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.resource.Resource")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.resource.Resource"); }
		static hx::ObjectPtr< Resource_obj > __new( ::Dynamic _options);
		static hx::ObjectPtr< Resource_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic _options);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Resource_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Resource","\xee","\x18","\x52","\xec"); }

		::String id;
		 ::luxe::Resources _hx_system;
		int resource_type;
		int state;
		int ref;
		void destroy( ::Dynamic _force);
		::Dynamic destroy_dyn();

		void invalidate();
		::Dynamic invalidate_dyn();

		virtual  ::snow::api::Promise reload();
		::Dynamic reload_dyn();

		virtual Float memory_use();
		::Dynamic memory_use_dyn();

		int set_ref(int _ref);
		::Dynamic set_ref_dyn();

		int set_state(int _state);
		::Dynamic set_state_dyn();

		virtual void clear();
		::Dynamic clear_dyn();

		::String state_string();
		::Dynamic state_string_dyn();

		::String type_string();
		::Dynamic type_string_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace luxe
} // end namespace resource

#endif /* INCLUDED_luxe_resource_Resource */ 
