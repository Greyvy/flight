// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_debug_SceneDebugView
#define INCLUDED_luxe_debug_SceneDebugView

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_luxe_debug_DebugView
#include <luxe/debug/DebugView.h>
#endif
HX_DECLARE_CLASS1(luxe,Debug)
HX_DECLARE_CLASS1(luxe,Emitter)
HX_DECLARE_CLASS1(luxe,Entity)
HX_DECLARE_CLASS1(luxe,KeyEvent)
HX_DECLARE_CLASS1(luxe,MouseEvent)
HX_DECLARE_CLASS1(luxe,Objects)
HX_DECLARE_CLASS1(luxe,Scene)
HX_DECLARE_CLASS1(luxe,Text)
HX_DECLARE_CLASS1(luxe,Visual)
HX_DECLARE_CLASS2(luxe,debug,DebugView)
HX_DECLARE_CLASS2(luxe,debug,SceneDebugView)
HX_DECLARE_CLASS2(snow,types,WindowEvent)

namespace luxe{
namespace debug{


class HXCPP_CLASS_ATTRIBUTES SceneDebugView_obj : public  ::luxe::debug::DebugView_obj
{
	public:
		typedef  ::luxe::debug::DebugView_obj super;
		typedef SceneDebugView_obj OBJ_;
		SceneDebugView_obj();

	public:
		enum { _hx_ClassId = 0x6d8c6d05 };

		void __construct( ::luxe::Debug _debug);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.debug.SceneDebugView")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.debug.SceneDebugView"); }
		static hx::ObjectPtr< SceneDebugView_obj > __new( ::luxe::Debug _debug);
		static hx::ObjectPtr< SceneDebugView_obj > __alloc(hx::Ctx *_hx_ctx, ::luxe::Debug _debug);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SceneDebugView_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("SceneDebugView","\x8c","\xe7","\x89","\x18"); }

		 ::luxe::Text items_list;
		int margin;
		Float font_size;
		void create();

		::Array< ::Dynamic> scenes;
		void add_scene( ::luxe::Scene _scene);
		::Dynamic add_scene_dyn();

		bool remove_scene( ::luxe::Scene _scene);
		::Dynamic remove_scene_dyn();

		void onkeydown( ::luxe::KeyEvent e);

		bool hide_ids;
		void toggle_ids();
		::Dynamic toggle_ids_dyn();

		::String tabs(int _d);
		::Dynamic tabs_dyn();

		::String list_entity(::String _list, ::luxe::Entity e,hx::Null< int >  _depth);
		::Dynamic list_entity_dyn();

		::String get_list();
		::Dynamic get_list_dyn();

		void refresh();

		void process();

		void onmousewheel( ::luxe::MouseEvent e);

		void show();

		void hide();

		void resize();
		::Dynamic resize_dyn();

		void onwindowsized( ::snow::types::WindowEvent e);

};

} // end namespace luxe
} // end namespace debug

#endif /* INCLUDED_luxe_debug_SceneDebugView */ 
