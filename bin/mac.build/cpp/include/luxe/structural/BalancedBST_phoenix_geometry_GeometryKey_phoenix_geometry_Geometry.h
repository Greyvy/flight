// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_structural_BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry
#define INCLUDED_luxe_structural_BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(luxe,structural,BalancedBSTIterator_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry)
HX_DECLARE_CLASS2(luxe,structural,BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry)
HX_DECLARE_CLASS2(luxe,structural,BalancedBSTTraverseMethod)
HX_DECLARE_CLASS2(luxe,structural,BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry)
HX_DECLARE_CLASS2(phoenix,geometry,Geometry)
HX_DECLARE_CLASS2(phoenix,geometry,GeometryKey)

namespace luxe{
namespace structural{


class HXCPP_CLASS_ATTRIBUTES BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj OBJ_;
		BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj();

	public:
		enum { _hx_ClassId = 0x046b4e9b };

		void __construct( ::Dynamic compare_function);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"); }
		static hx::ObjectPtr< BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj > __new( ::Dynamic compare_function);
		static hx::ObjectPtr< BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic compare_function);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","\x24","\x97","\x28","\xc6"); }

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry root;
		 ::Dynamic compare;
		Dynamic compare_dyn() { return compare;}
		bool empty;
		int size();
		::Dynamic size_dyn();

		int depth();
		::Dynamic depth_dyn();

		void insert( ::phoenix::geometry::GeometryKey _key, ::phoenix::geometry::Geometry _value);
		::Dynamic insert_dyn();

		bool contains( ::phoenix::geometry::GeometryKey _key);
		::Dynamic contains_dyn();

		 ::phoenix::geometry::Geometry find( ::phoenix::geometry::GeometryKey _key);
		::Dynamic find_dyn();

		int rank( ::phoenix::geometry::GeometryKey _key);
		::Dynamic rank_dyn();

		 ::phoenix::geometry::GeometryKey select(int _rank);
		::Dynamic select_dyn();

		 ::phoenix::geometry::GeometryKey smallest();
		::Dynamic smallest_dyn();

		 ::phoenix::geometry::GeometryKey largest();
		::Dynamic largest_dyn();

		bool remove( ::phoenix::geometry::GeometryKey _key);
		::Dynamic remove_dyn();

		bool remove_smallest();
		::Dynamic remove_smallest_dyn();

		bool remove_largest();
		::Dynamic remove_largest_dyn();

		 ::phoenix::geometry::GeometryKey floor( ::phoenix::geometry::GeometryKey _key);
		::Dynamic floor_dyn();

		 ::phoenix::geometry::GeometryKey ceil( ::phoenix::geometry::GeometryKey _key);
		::Dynamic ceil_dyn();

		::Array< ::Dynamic> toArray();
		::Dynamic toArray_dyn();

		::Array< ::Dynamic> keys();
		::Dynamic keys_dyn();

		 ::luxe::structural::BalancedBSTIterator_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry iterator();
		::Dynamic iterator_dyn();

		void traverse_node( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node, ::luxe::structural::BalancedBSTTraverseMethod _method, ::Dynamic _on_traverse);
		::Dynamic traverse_node_dyn();

		bool get_empty();
		::Dynamic get_empty_dyn();

		int node_depth( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic node_depth_dyn();

		int node_count( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic node_count_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry node_insert( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node, ::phoenix::geometry::GeometryKey _key, ::phoenix::geometry::Geometry _value);
		::Dynamic node_insert_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry node_update_count( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic node_update_count_dyn();

		 ::phoenix::geometry::Geometry node_find( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node, ::phoenix::geometry::GeometryKey _key);
		::Dynamic node_find_dyn();

		int node_rank( ::phoenix::geometry::GeometryKey _key, ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic node_rank_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry node_select( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node,int _rank);
		::Dynamic node_select_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry node_smallest( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic node_smallest_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry node_largest( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic node_largest_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry node_floor( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node, ::phoenix::geometry::GeometryKey _key);
		::Dynamic node_floor_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry node_ceil( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node, ::phoenix::geometry::GeometryKey _key);
		::Dynamic node_ceil_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry node_remove_smallest( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic node_remove_smallest_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry node_remove_largest( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic node_remove_largest_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry node_remove( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node, ::phoenix::geometry::GeometryKey _key);
		::Dynamic node_remove_dyn();

		bool is_red( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic is_red_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry rotate_left( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic rotate_left_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry rotate_right( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic rotate_right_dyn();

		void swap_color( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic swap_color_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry move_red_left( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic move_red_left_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry move_red_right( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic move_red_right_dyn();

		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry balance( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node);
		::Dynamic balance_dyn();

};

} // end namespace luxe
} // end namespace structural

#endif /* INCLUDED_luxe_structural_BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry */ 
