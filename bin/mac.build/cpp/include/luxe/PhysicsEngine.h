// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_PhysicsEngine
#define INCLUDED_luxe_PhysicsEngine

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(luxe,PhysicsEngine)
HX_DECLARE_CLASS1(phoenix,Vector)

namespace luxe{


class HXCPP_CLASS_ATTRIBUTES PhysicsEngine_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef PhysicsEngine_obj OBJ_;
		PhysicsEngine_obj();

	public:
		enum { _hx_ClassId = 0x7fba2d4b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.PhysicsEngine")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.PhysicsEngine"); }
		static hx::ObjectPtr< PhysicsEngine_obj > __new();
		static hx::ObjectPtr< PhysicsEngine_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PhysicsEngine_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PhysicsEngine","\xc9","\x93","\x43","\x4f"); }

		::String name;
		bool paused;
		 ::phoenix::Vector gravity;
		bool draw;
		void init();
		::Dynamic init_dyn();

		void _render( ::Dynamic _);
		::Dynamic _render_dyn();

		void process();
		::Dynamic process_dyn();

		void update();
		::Dynamic update_dyn();

		void render();
		::Dynamic render_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		bool get_paused();
		::Dynamic get_paused_dyn();

		bool set_paused( ::Dynamic _pause);
		::Dynamic set_paused_dyn();

		bool get_draw();
		::Dynamic get_draw_dyn();

		bool set_draw(bool _draw);
		::Dynamic set_draw_dyn();

		 ::phoenix::Vector get_gravity();
		::Dynamic get_gravity_dyn();

		 ::phoenix::Vector set_gravity( ::phoenix::Vector _gravity);
		::Dynamic set_gravity_dyn();

};

} // end namespace luxe

#endif /* INCLUDED_luxe_PhysicsEngine */ 
