// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_Entity
#define INCLUDED_luxe_Entity

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS1(luxe,Emitter)
HX_DECLARE_CLASS1(luxe,Entity)
HX_DECLARE_CLASS1(luxe,Events)
HX_DECLARE_CLASS1(luxe,GamepadEvent)
HX_DECLARE_CLASS1(luxe,ID)
HX_DECLARE_CLASS1(luxe,InputEvent)
HX_DECLARE_CLASS1(luxe,KeyEvent)
HX_DECLARE_CLASS1(luxe,MouseEvent)
HX_DECLARE_CLASS1(luxe,Objects)
HX_DECLARE_CLASS1(luxe,Scene)
HX_DECLARE_CLASS1(luxe,TextEvent)
HX_DECLARE_CLASS1(luxe,TouchEvent)
HX_DECLARE_CLASS2(luxe,components,Components)
HX_DECLARE_CLASS2(luxe,structural,OrderedMap_String_luxe_Component)
HX_DECLARE_CLASS1(phoenix,Quaternion)
HX_DECLARE_CLASS1(phoenix,Transform)
HX_DECLARE_CLASS1(phoenix,Vector)
HX_DECLARE_CLASS2(snow,api,Timer)
HX_DECLARE_CLASS2(snow,types,WindowEvent)

namespace luxe{


class HXCPP_CLASS_ATTRIBUTES Entity_obj : public  ::luxe::Objects_obj
{
	public:
		typedef  ::luxe::Objects_obj super;
		typedef Entity_obj OBJ_;
		Entity_obj();

	public:
		enum { _hx_ClassId = 0x17ed3881 };

		void __construct( ::Dynamic _options);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.Entity")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.Entity"); }
		static hx::ObjectPtr< Entity_obj > __new( ::Dynamic _options);
		static hx::ObjectPtr< Entity_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic _options);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Entity_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Entity","\x43","\x87","\xb0","\x39"); }

		 ::luxe::Events events;
		::Array< ::Dynamic> children;
		bool destroyed;
		bool inited;
		bool started;
		Float fixed_rate;
		 ::luxe::Entity parent;
		 ::luxe::Scene scene;
		bool active;
		 ::phoenix::Transform transform;
		 ::luxe::components::Components _components;
		 ::snow::api::Timer fixed_rate_timer;
		 ::Dynamic options;
		 ::luxe::Scene scene_root;
		virtual void init();
		::Dynamic init_dyn();

		virtual void update(Float dt);
		::Dynamic update_dyn();

		void onfixedupdate(Float rate);
		::Dynamic onfixedupdate_dyn();

		void onreset();
		::Dynamic onreset_dyn();

		virtual void ondestroy();
		::Dynamic ondestroy_dyn();

		void onkeyup( ::luxe::KeyEvent event);
		::Dynamic onkeyup_dyn();

		void onkeydown( ::luxe::KeyEvent event);
		::Dynamic onkeydown_dyn();

		void ontextinput( ::luxe::TextEvent event);
		::Dynamic ontextinput_dyn();

		void oninputdown( ::luxe::InputEvent event);
		::Dynamic oninputdown_dyn();

		void oninputup( ::luxe::InputEvent event);
		::Dynamic oninputup_dyn();

		void onmousedown( ::luxe::MouseEvent event);
		::Dynamic onmousedown_dyn();

		void onmouseup( ::luxe::MouseEvent event);
		::Dynamic onmouseup_dyn();

		void onmousemove( ::luxe::MouseEvent event);
		::Dynamic onmousemove_dyn();

		void onmousewheel( ::luxe::MouseEvent event);
		::Dynamic onmousewheel_dyn();

		void ontouchdown( ::luxe::TouchEvent event);
		::Dynamic ontouchdown_dyn();

		void ontouchup( ::luxe::TouchEvent event);
		::Dynamic ontouchup_dyn();

		void ontouchmove( ::luxe::TouchEvent event);
		::Dynamic ontouchmove_dyn();

		void ongamepadup( ::luxe::GamepadEvent event);
		::Dynamic ongamepadup_dyn();

		void ongamepaddown( ::luxe::GamepadEvent event);
		::Dynamic ongamepaddown_dyn();

		void ongamepadaxis( ::luxe::GamepadEvent event);
		::Dynamic ongamepadaxis_dyn();

		void ongamepaddevice( ::luxe::GamepadEvent event);
		::Dynamic ongamepaddevice_dyn();

		void onwindowmoved( ::snow::types::WindowEvent event);
		::Dynamic onwindowmoved_dyn();

		void onwindowresized( ::snow::types::WindowEvent event);
		::Dynamic onwindowresized_dyn();

		void onwindowsized( ::snow::types::WindowEvent event);
		::Dynamic onwindowsized_dyn();

		void onwindowminimized( ::snow::types::WindowEvent event);
		::Dynamic onwindowminimized_dyn();

		void onwindowrestored( ::snow::types::WindowEvent event);
		::Dynamic onwindowrestored_dyn();

		int component_count;
		 ::Dynamic add( ::Dynamic _component);
		::Dynamic add_dyn();

		bool remove(::String _name);
		::Dynamic remove_dyn();

		 ::Dynamic get(::String _name, ::Dynamic _in_children);
		::Dynamic get_dyn();

		::cpp::VirtualArray get_any(::String _name, ::Dynamic _in_children, ::Dynamic _first_only);
		::Dynamic get_any_dyn();

		bool has(::String _name);
		::Dynamic has_dyn();

		void _init();
		::Dynamic _init_dyn();

		void _reset( ::Dynamic _);
		::Dynamic _reset_dyn();

		void destroy( ::Dynamic _from_parent);
		::Dynamic destroy_dyn();

		void _update(Float dt);
		::Dynamic _update_dyn();

		void _fixed_update();
		::Dynamic _fixed_update_dyn();

		 ::luxe::Emitter _find_emit_source( ::Dynamic _from_unlisten);
		::Dynamic _find_emit_source_dyn();

		void _listen(int _event, ::Dynamic _handler, ::Dynamic _self);
		::Dynamic _listen_dyn();

		void _unlisten(int _event, ::Dynamic _handler, ::Dynamic _self);
		::Dynamic _unlisten_dyn();

		void _detach_scene();
		::Dynamic _detach_scene_dyn();

		void _attach_scene();
		::Dynamic _attach_scene_dyn();

		void _keyup( ::luxe::KeyEvent _event);
		::Dynamic _keyup_dyn();

		void _keydown( ::luxe::KeyEvent _event);
		::Dynamic _keydown_dyn();

		void _textinput( ::luxe::TextEvent _event);
		::Dynamic _textinput_dyn();

		void _mousedown( ::luxe::MouseEvent _event);
		::Dynamic _mousedown_dyn();

		void _mouseup( ::luxe::MouseEvent _event);
		::Dynamic _mouseup_dyn();

		void _mousewheel( ::luxe::MouseEvent _event);
		::Dynamic _mousewheel_dyn();

		void _mousemove( ::luxe::MouseEvent _event);
		::Dynamic _mousemove_dyn();

		void _touchdown( ::luxe::TouchEvent _event);
		::Dynamic _touchdown_dyn();

		void _touchup( ::luxe::TouchEvent _event);
		::Dynamic _touchup_dyn();

		void _touchmove( ::luxe::TouchEvent _event);
		::Dynamic _touchmove_dyn();

		void _gamepadaxis( ::luxe::GamepadEvent _event);
		::Dynamic _gamepadaxis_dyn();

		void _gamepaddown( ::luxe::GamepadEvent _event);
		::Dynamic _gamepaddown_dyn();

		void _gamepadup( ::luxe::GamepadEvent _event);
		::Dynamic _gamepadup_dyn();

		void _gamepaddevice( ::luxe::GamepadEvent _event);
		::Dynamic _gamepaddevice_dyn();

		void _windowmoved( ::snow::types::WindowEvent _event);
		::Dynamic _windowmoved_dyn();

		void _windowresized( ::snow::types::WindowEvent _event);
		::Dynamic _windowresized_dyn();

		void _windowsized( ::snow::types::WindowEvent _event);
		::Dynamic _windowsized_dyn();

		void _windowminimized( ::snow::types::WindowEvent _event);
		::Dynamic _windowminimized_dyn();

		void _windowrestored( ::snow::types::WindowEvent _event);
		::Dynamic _windowrestored_dyn();

		void _inputdown( ::luxe::InputEvent _event);
		::Dynamic _inputdown_dyn();

		void _inputup( ::luxe::InputEvent _event);
		::Dynamic _inputup_dyn();

		Float get_fixed_rate();
		::Dynamic get_fixed_rate_dyn();

		Float set_fixed_rate(Float _rate);
		::Dynamic set_fixed_rate_dyn();

		void _stop_fixed_rate_timer();
		::Dynamic _stop_fixed_rate_timer_dyn();

		void _set_fixed_rate_timer(Float _rate);
		::Dynamic _set_fixed_rate_timer_dyn();

		 ::luxe::structural::OrderedMap_String_luxe_Component get_components();
		::Dynamic get_components_dyn();

		void _add_child( ::luxe::Entity child);
		::Dynamic _add_child_dyn();

		void _remove_child( ::luxe::Entity child);
		::Dynamic _remove_child_dyn();

		virtual void set_pos_from_transform( ::phoenix::Vector _pos);
		::Dynamic set_pos_from_transform_dyn();

		virtual void set_rotation_from_transform( ::phoenix::Quaternion _rotation);
		::Dynamic set_rotation_from_transform_dyn();

		virtual void set_scale_from_transform( ::phoenix::Vector _scale);
		::Dynamic set_scale_from_transform_dyn();

		void set_origin_from_transform( ::phoenix::Vector _origin);
		::Dynamic set_origin_from_transform_dyn();

		virtual void set_parent_from_transform( ::phoenix::Transform _parent);
		::Dynamic set_parent_from_transform_dyn();

		 ::phoenix::Vector set_pos( ::phoenix::Vector _p);
		::Dynamic set_pos_dyn();

		 ::phoenix::Vector get_pos();
		::Dynamic get_pos_dyn();

		 ::phoenix::Quaternion set_rotation( ::phoenix::Quaternion _r);
		::Dynamic set_rotation_dyn();

		 ::phoenix::Quaternion get_rotation();
		::Dynamic get_rotation_dyn();

		 ::phoenix::Vector set_scale( ::phoenix::Vector _s);
		::Dynamic set_scale_dyn();

		 ::phoenix::Vector get_scale();
		::Dynamic get_scale_dyn();

		 ::phoenix::Vector set_origin( ::phoenix::Vector _origin);
		::Dynamic set_origin_dyn();

		 ::phoenix::Vector get_origin();
		::Dynamic get_origin_dyn();

		 ::phoenix::Transform set_transform( ::phoenix::Transform _transform);
		::Dynamic set_transform_dyn();

		 ::phoenix::Transform get_transform();
		::Dynamic get_transform_dyn();

		 ::luxe::Entity set_parent( ::luxe::Entity other);
		::Dynamic set_parent_dyn();

		 ::luxe::Entity get_parent();
		::Dynamic get_parent_dyn();

		 ::luxe::Scene set_scene( ::luxe::Scene _scene);
		::Dynamic set_scene_dyn();

		 ::luxe::Scene get_scene();
		::Dynamic get_scene_dyn();

		 ::luxe::Scene set_scene_root( ::luxe::Scene _scene);
		::Dynamic set_scene_root_dyn();

		::String set_name(::String _name);

		bool set_active(bool _active);
		::Dynamic set_active_dyn();

		bool get_active();
		::Dynamic get_active_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace luxe

#endif /* INCLUDED_luxe_Entity */ 
