// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_utils_GeometryUtils
#define INCLUDED_luxe_utils_GeometryUtils

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(luxe,utils,GeometryUtils)
HX_DECLARE_CLASS1(phoenix,Vector)
HX_DECLARE_CLASS2(phoenix,geometry,Geometry)

namespace luxe{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES GeometryUtils_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GeometryUtils_obj OBJ_;
		GeometryUtils_obj();

	public:
		enum { _hx_ClassId = 0x0f4f3324 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.utils.GeometryUtils")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.utils.GeometryUtils"); }
		static hx::ObjectPtr< GeometryUtils_obj > __new();
		static hx::ObjectPtr< GeometryUtils_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GeometryUtils_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("GeometryUtils","\xff","\x61","\xf2","\x50"); }

		static void __boot();
		static Float two_pi;
		int segments_for_smooth_circle(Float _radius,hx::Null< Float >  _smooth);
		::Dynamic segments_for_smooth_circle_dyn();

		 ::phoenix::Vector random_point_in_unit_circle();
		::Dynamic random_point_in_unit_circle_dyn();

		bool point_in_polygon( ::phoenix::Vector _point, ::phoenix::Vector _offset,::Array< ::Dynamic> _verts);
		::Dynamic point_in_polygon_dyn();

		 ::phoenix::Vector _v_cache;
		bool point_in_geometry( ::phoenix::Vector _point, ::phoenix::geometry::Geometry _geometry);
		::Dynamic point_in_geometry_dyn();

		 ::phoenix::Vector intersect_ray_plane( ::phoenix::Vector _ray_start, ::phoenix::Vector _ray_dir, ::phoenix::Vector _plane_normal, ::phoenix::Vector _plane_point);
		::Dynamic intersect_ray_plane_dyn();

};

} // end namespace luxe
} // end namespace utils

#endif /* INCLUDED_luxe_utils_GeometryUtils */ 
