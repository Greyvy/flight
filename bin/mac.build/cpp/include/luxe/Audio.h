// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_Audio
#define INCLUDED_luxe_Audio

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(luxe,Audio)
HX_DECLARE_CLASS1(luxe,Engine)
HX_DECLARE_CLASS1(snow,App)
HX_DECLARE_CLASS3(snow,systems,audio,AudioInstance)
HX_DECLARE_CLASS3(snow,systems,audio,AudioSource)

namespace luxe{


class HXCPP_CLASS_ATTRIBUTES Audio_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Audio_obj OBJ_;
		Audio_obj();

	public:
		enum { _hx_ClassId = 0x092c0500 };

		void __construct( ::luxe::Engine _core);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.Audio")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.Audio"); }
		static hx::ObjectPtr< Audio_obj > __new( ::luxe::Engine _core);
		static hx::ObjectPtr< Audio_obj > __alloc(hx::Ctx *_hx_ctx, ::luxe::Engine _core);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Audio_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Audio","\xb6","\xe8","\xad","\xba"); }

		 ::luxe::Engine core;
		void on(int _event, ::Dynamic _handler);
		::Dynamic on_dyn();

		bool off(int _event, ::Dynamic _handler);
		::Dynamic off_dyn();

		void emit(int _event, ::Dynamic _handle);
		::Dynamic emit_dyn();

		 ::Dynamic play( ::snow::systems::audio::AudioSource _source, ::Dynamic _volume, ::Dynamic _paused);
		::Dynamic play_dyn();

		 ::Dynamic loop( ::snow::systems::audio::AudioSource _source, ::Dynamic _volume, ::Dynamic _paused);
		::Dynamic loop_dyn();

		void pause( ::Dynamic _handle);
		::Dynamic pause_dyn();

		void unpause( ::Dynamic _handle);
		::Dynamic unpause_dyn();

		void stop( ::Dynamic _handle);
		::Dynamic stop_dyn();

		void volume( ::Dynamic _handle,Float _volume);
		::Dynamic volume_dyn();

		void pan( ::Dynamic _handle,Float _pan);
		::Dynamic pan_dyn();

		void pitch( ::Dynamic _handle,Float _pitch);
		::Dynamic pitch_dyn();

		void position( ::Dynamic _handle,Float _position);
		::Dynamic position_dyn();

		int state_of( ::Dynamic _handle);
		::Dynamic state_of_dyn();

		bool loop_of( ::Dynamic _handle);
		::Dynamic loop_of_dyn();

		 ::snow::systems::audio::AudioInstance instance_of( ::Dynamic _handle);
		::Dynamic instance_of_dyn();

		Float volume_of( ::Dynamic _handle);
		::Dynamic volume_of_dyn();

		Float pan_of( ::Dynamic _handle);
		::Dynamic pan_of_dyn();

		Float pitch_of( ::Dynamic _handle);
		::Dynamic pitch_of_dyn();

		Float position_of( ::Dynamic _handle);
		::Dynamic position_of_dyn();

		void suspend();
		::Dynamic suspend_dyn();

		void resume();
		::Dynamic resume_dyn();

		bool get_active();
		::Dynamic get_active_dyn();

		bool set_active(bool _val);
		::Dynamic set_active_dyn();

		void init();
		::Dynamic init_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		void process();
		::Dynamic process_dyn();

};

} // end namespace luxe

#endif /* INCLUDED_luxe_Audio */ 
