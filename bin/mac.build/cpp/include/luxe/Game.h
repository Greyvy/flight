// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_Game
#define INCLUDED_luxe_Game

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(luxe,Engine)
HX_DECLARE_CLASS1(luxe,Game)
HX_DECLARE_CLASS1(luxe,GamepadEvent)
HX_DECLARE_CLASS1(luxe,InputEvent)
HX_DECLARE_CLASS1(luxe,KeyEvent)
HX_DECLARE_CLASS1(luxe,MouseEvent)
HX_DECLARE_CLASS1(luxe,TextEvent)
HX_DECLARE_CLASS1(luxe,TouchEvent)
HX_DECLARE_CLASS1(snow,App)
HX_DECLARE_CLASS2(snow,types,SystemEvent)
HX_DECLARE_CLASS2(snow,types,WindowEvent)

namespace luxe{


class HXCPP_CLASS_ATTRIBUTES Game_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Game_obj OBJ_;
		Game_obj();

	public:
		enum { _hx_ClassId = 0x324965d0 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.Game")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.Game"); }
		static hx::ObjectPtr< Game_obj > __new();
		static hx::ObjectPtr< Game_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Game_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Game","\x12","\x20","\x38","\x2f"); }

		static void main();
		static ::Dynamic main_dyn();

		 ::luxe::Engine app;
		virtual  ::Dynamic config( ::Dynamic _config);
		::Dynamic config_dyn();

		virtual void ready();
		::Dynamic ready_dyn();

		virtual void update(Float dt);
		::Dynamic update_dyn();

		void ondestroy();
		::Dynamic ondestroy_dyn();

		void onprerender();
		::Dynamic onprerender_dyn();

		void onrender();
		::Dynamic onrender_dyn();

		void onpostrender();
		::Dynamic onpostrender_dyn();

		void oninputdown( ::luxe::InputEvent event);
		::Dynamic oninputdown_dyn();

		void oninputup( ::luxe::InputEvent event);
		::Dynamic oninputup_dyn();

		void onmousedown( ::luxe::MouseEvent event);
		::Dynamic onmousedown_dyn();

		void onmouseup( ::luxe::MouseEvent event);
		::Dynamic onmouseup_dyn();

		void onmousewheel( ::luxe::MouseEvent event);
		::Dynamic onmousewheel_dyn();

		void onmousemove( ::luxe::MouseEvent event);
		::Dynamic onmousemove_dyn();

		void onkeydown( ::luxe::KeyEvent event);
		::Dynamic onkeydown_dyn();

		virtual void onkeyup( ::luxe::KeyEvent event);
		::Dynamic onkeyup_dyn();

		void ontextinput( ::luxe::TextEvent event);
		::Dynamic ontextinput_dyn();

		void ontouchdown( ::luxe::TouchEvent event);
		::Dynamic ontouchdown_dyn();

		void ontouchup( ::luxe::TouchEvent event);
		::Dynamic ontouchup_dyn();

		void ontouchmove( ::luxe::TouchEvent event);
		::Dynamic ontouchmove_dyn();

		void ongamepadaxis( ::luxe::GamepadEvent event);
		::Dynamic ongamepadaxis_dyn();

		void ongamepaddown( ::luxe::GamepadEvent event);
		::Dynamic ongamepaddown_dyn();

		void ongamepadup( ::luxe::GamepadEvent event);
		::Dynamic ongamepadup_dyn();

		void ongamepaddevice( ::luxe::GamepadEvent event);
		::Dynamic ongamepaddevice_dyn();

		void onwindowmoved( ::snow::types::WindowEvent event);
		::Dynamic onwindowmoved_dyn();

		void onwindowresized( ::snow::types::WindowEvent event);
		::Dynamic onwindowresized_dyn();

		void onwindowsized( ::snow::types::WindowEvent event);
		::Dynamic onwindowsized_dyn();

		void onwindowminimized( ::snow::types::WindowEvent event);
		::Dynamic onwindowminimized_dyn();

		void onwindowrestored( ::snow::types::WindowEvent event);
		::Dynamic onwindowrestored_dyn();

		void onevent( ::snow::types::SystemEvent event);
		::Dynamic onevent_dyn();

};

} // end namespace luxe

#endif /* INCLUDED_luxe_Game */ 
