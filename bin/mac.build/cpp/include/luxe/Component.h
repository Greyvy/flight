// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_Component
#define INCLUDED_luxe_Component

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
HX_DECLARE_CLASS1(luxe,Component)
HX_DECLARE_CLASS1(luxe,Emitter)
HX_DECLARE_CLASS1(luxe,Entity)
HX_DECLARE_CLASS1(luxe,GamepadEvent)
HX_DECLARE_CLASS1(luxe,ID)
HX_DECLARE_CLASS1(luxe,InputEvent)
HX_DECLARE_CLASS1(luxe,KeyEvent)
HX_DECLARE_CLASS1(luxe,MouseEvent)
HX_DECLARE_CLASS1(luxe,Objects)
HX_DECLARE_CLASS1(luxe,TextEvent)
HX_DECLARE_CLASS1(luxe,TouchEvent)
HX_DECLARE_CLASS1(phoenix,Quaternion)
HX_DECLARE_CLASS1(phoenix,Transform)
HX_DECLARE_CLASS1(phoenix,Vector)
HX_DECLARE_CLASS2(snow,types,WindowEvent)

namespace luxe{


class HXCPP_CLASS_ATTRIBUTES Component_obj : public  ::luxe::ID_obj
{
	public:
		typedef  ::luxe::ID_obj super;
		typedef Component_obj OBJ_;
		Component_obj();

	public:
		enum { _hx_ClassId = 0x56fa0a3b };

		void __construct( ::Dynamic _options);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.Component")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.Component"); }
		static hx::ObjectPtr< Component_obj > __new( ::Dynamic _options);
		static hx::ObjectPtr< Component_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic _options);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Component_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Component","\x9d","\xd0","\x26","\xb1"); }

		 ::luxe::Entity entity;
		 ::phoenix::Transform transform;
		virtual void init();
		::Dynamic init_dyn();

		virtual void update(Float dt);
		::Dynamic update_dyn();

		void onadded();
		::Dynamic onadded_dyn();

		virtual void onremoved();
		::Dynamic onremoved_dyn();

		void onfixedupdate(Float rate);
		::Dynamic onfixedupdate_dyn();

		void onreset();
		::Dynamic onreset_dyn();

		virtual void ondestroy();
		::Dynamic ondestroy_dyn();

		void onkeyup( ::luxe::KeyEvent event);
		::Dynamic onkeyup_dyn();

		void onkeydown( ::luxe::KeyEvent event);
		::Dynamic onkeydown_dyn();

		void ontextinput( ::luxe::TextEvent event);
		::Dynamic ontextinput_dyn();

		void oninputdown( ::luxe::InputEvent event);
		::Dynamic oninputdown_dyn();

		void oninputup( ::luxe::InputEvent event);
		::Dynamic oninputup_dyn();

		void onmousedown( ::luxe::MouseEvent event);
		::Dynamic onmousedown_dyn();

		void onmouseup( ::luxe::MouseEvent event);
		::Dynamic onmouseup_dyn();

		void onmousemove( ::luxe::MouseEvent event);
		::Dynamic onmousemove_dyn();

		void onmousewheel( ::luxe::MouseEvent event);
		::Dynamic onmousewheel_dyn();

		void ontouchdown( ::luxe::TouchEvent event);
		::Dynamic ontouchdown_dyn();

		void ontouchup( ::luxe::TouchEvent event);
		::Dynamic ontouchup_dyn();

		void ontouchmove( ::luxe::TouchEvent event);
		::Dynamic ontouchmove_dyn();

		void ongamepadup( ::luxe::GamepadEvent event);
		::Dynamic ongamepadup_dyn();

		void ongamepaddown( ::luxe::GamepadEvent event);
		::Dynamic ongamepaddown_dyn();

		void ongamepadaxis( ::luxe::GamepadEvent event);
		::Dynamic ongamepadaxis_dyn();

		void ongamepaddevice( ::luxe::GamepadEvent event);
		::Dynamic ongamepaddevice_dyn();

		void onwindowmoved( ::snow::types::WindowEvent event);
		::Dynamic onwindowmoved_dyn();

		void onwindowresized( ::snow::types::WindowEvent event);
		::Dynamic onwindowresized_dyn();

		void onwindowsized( ::snow::types::WindowEvent event);
		::Dynamic onwindowsized_dyn();

		void onwindowminimized( ::snow::types::WindowEvent event);
		::Dynamic onwindowminimized_dyn();

		void onwindowrestored( ::snow::types::WindowEvent event);
		::Dynamic onwindowrestored_dyn();

		 ::Dynamic add( ::Dynamic component);
		::Dynamic add_dyn();

		bool remove(::String _name);
		::Dynamic remove_dyn();

		 ::Dynamic get(::String _name, ::Dynamic in_children);
		::Dynamic get_dyn();

		::cpp::VirtualArray get_any(::String _name, ::Dynamic in_children, ::Dynamic first_only);
		::Dynamic get_any_dyn();

		bool has(::String _name);
		::Dynamic has_dyn();

		void _detach_entity();
		::Dynamic _detach_entity_dyn();

		void _attach_entity();
		::Dynamic _attach_entity_dyn();

		 ::luxe::Entity set_entity( ::luxe::Entity _entity);
		::Dynamic set_entity_dyn();

		 ::luxe::Entity get_entity();
		::Dynamic get_entity_dyn();

		 ::phoenix::Vector set_pos( ::phoenix::Vector _p);
		::Dynamic set_pos_dyn();

		 ::phoenix::Vector get_pos();
		::Dynamic get_pos_dyn();

		 ::phoenix::Quaternion set_rotation( ::phoenix::Quaternion _r);
		::Dynamic set_rotation_dyn();

		 ::phoenix::Quaternion get_rotation();
		::Dynamic get_rotation_dyn();

		 ::phoenix::Vector set_scale( ::phoenix::Vector _s);
		::Dynamic set_scale_dyn();

		 ::phoenix::Vector get_scale();
		::Dynamic get_scale_dyn();

		 ::phoenix::Vector set_origin( ::phoenix::Vector _o);
		::Dynamic set_origin_dyn();

		 ::phoenix::Vector get_origin();
		::Dynamic get_origin_dyn();

		 ::phoenix::Transform set_transform( ::phoenix::Transform _o);
		::Dynamic set_transform_dyn();

		 ::phoenix::Transform get_transform();
		::Dynamic get_transform_dyn();

		void entity_pos_change( ::phoenix::Vector _pos);
		::Dynamic entity_pos_change_dyn();

		void entity_scale_change( ::phoenix::Vector _scale);
		::Dynamic entity_scale_change_dyn();

		void entity_rotation_change( ::phoenix::Quaternion _rotation);
		::Dynamic entity_rotation_change_dyn();

		void entity_origin_change( ::phoenix::Vector _origin);
		::Dynamic entity_origin_change_dyn();

		void entity_parent_change( ::phoenix::Transform _parent);
		::Dynamic entity_parent_change_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace luxe

#endif /* INCLUDED_luxe_Component */ 
