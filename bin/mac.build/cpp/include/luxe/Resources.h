// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_Resources
#define INCLUDED_luxe_Resources

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(luxe,Emitter)
HX_DECLARE_CLASS1(luxe,Parcel)
HX_DECLARE_CLASS1(luxe,ResourceStats)
HX_DECLARE_CLASS1(luxe,Resources)
HX_DECLARE_CLASS2(luxe,resource,AudioResource)
HX_DECLARE_CLASS2(luxe,resource,BytesResource)
HX_DECLARE_CLASS2(luxe,resource,JSONResource)
HX_DECLARE_CLASS2(luxe,resource,Resource)
HX_DECLARE_CLASS2(luxe,resource,TextResource)
HX_DECLARE_CLASS1(phoenix,BitmapFont)
HX_DECLARE_CLASS1(phoenix,Shader)
HX_DECLARE_CLASS1(phoenix,Texture)
HX_DECLARE_CLASS2(snow,api,Promise)

namespace luxe{


class HXCPP_CLASS_ATTRIBUTES Resources_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Resources_obj OBJ_;
		Resources_obj();

	public:
		enum { _hx_ClassId = 0x14e6c10f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.Resources")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.Resources"); }
		static hx::ObjectPtr< Resources_obj > __new();
		static hx::ObjectPtr< Resources_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Resources_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Resources","\xc5","\xb7","\x83","\xdb"); }

		::Array< ::Dynamic> parcels;
		 ::haxe::ds::StringMap cache;
		 ::luxe::ResourceStats stats;
		 ::luxe::Emitter emitter;
		void track( ::luxe::Parcel _cache);
		::Dynamic track_dyn();

		void untrack( ::luxe::Parcel _cache);
		::Dynamic untrack_dyn();

		void add( ::luxe::resource::Resource resource);
		::Dynamic add_dyn();

		bool remove( ::luxe::resource::Resource resource);
		::Dynamic remove_dyn();

		bool destroy(::String _id, ::Dynamic _force);
		::Dynamic destroy_dyn();

		bool invalidate(::String _id);
		::Dynamic invalidate_dyn();

		void on(int ev, ::Dynamic handler);
		::Dynamic on_dyn();

		void off(int ev, ::Dynamic handler);
		::Dynamic off_dyn();

		void emit(int ev, ::Dynamic data);
		::Dynamic emit_dyn();

		 ::snow::api::Promise load_bytes(::String _id);
		::Dynamic load_bytes_dyn();

		 ::snow::api::Promise load_text(::String _id);
		::Dynamic load_text_dyn();

		 ::snow::api::Promise load_json(::String _id);
		::Dynamic load_json_dyn();

		 ::snow::api::Promise load_texture(::String _id, ::Dynamic _options);
		::Dynamic load_texture_dyn();

		 ::snow::api::Promise load_font(::String _id, ::Dynamic _options);
		::Dynamic load_font_dyn();

		 ::snow::api::Promise load_shader(::String _id, ::Dynamic _options);
		::Dynamic load_shader_dyn();

		 ::snow::api::Promise load_audio(::String _id, ::Dynamic _options);
		::Dynamic load_audio_dyn();

		bool has(::String _id);
		::Dynamic has_dyn();

		 ::luxe::resource::Resource get(::String _id);
		::Dynamic get_dyn();

		 ::luxe::resource::BytesResource bytes(::String _id);
		::Dynamic bytes_dyn();

		 ::luxe::resource::TextResource text(::String _id);
		::Dynamic text_dyn();

		 ::luxe::resource::JSONResource json(::String _id);
		::Dynamic json_dyn();

		 ::phoenix::Texture texture(::String _id);
		::Dynamic texture_dyn();

		 ::phoenix::BitmapFont font(::String _id);
		::Dynamic font_dyn();

		 ::phoenix::Shader shader(::String _id);
		::Dynamic shader_dyn();

		 ::luxe::resource::AudioResource audio(::String _id);
		::Dynamic audio_dyn();

		 ::Dynamic fetch(::String _id);
		::Dynamic fetch_dyn();

		void update_stats( ::luxe::resource::Resource _res,int _offset);
		::Dynamic update_stats_dyn();

};

} // end namespace luxe

#endif /* INCLUDED_luxe_Resources */ 
