// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_Scene
#define INCLUDED_luxe_Scene

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(luxe,Emitter)
HX_DECLARE_CLASS1(luxe,Entity)
HX_DECLARE_CLASS1(luxe,GamepadEvent)
HX_DECLARE_CLASS1(luxe,InputEvent)
HX_DECLARE_CLASS1(luxe,KeyEvent)
HX_DECLARE_CLASS1(luxe,MouseEvent)
HX_DECLARE_CLASS1(luxe,Objects)
HX_DECLARE_CLASS1(luxe,Scene)
HX_DECLARE_CLASS1(luxe,TextEvent)
HX_DECLARE_CLASS1(luxe,TouchEvent)
HX_DECLARE_CLASS2(snow,types,WindowEvent)

namespace luxe{


class HXCPP_CLASS_ATTRIBUTES Scene_obj : public  ::luxe::Objects_obj
{
	public:
		typedef  ::luxe::Objects_obj super;
		typedef Scene_obj OBJ_;
		Scene_obj();

	public:
		enum { _hx_ClassId = 0x5a7d6576 };

		void __construct(::String __o__name);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.Scene")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.Scene"); }
		static hx::ObjectPtr< Scene_obj > __new(::String __o__name);
		static hx::ObjectPtr< Scene_obj > __alloc(hx::Ctx *_hx_ctx,::String __o__name);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Scene_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Scene","\x2c","\x49","\xff","\x0b"); }

		 ::haxe::ds::StringMap entities;
		bool inited;
		bool started;
		int length;
		bool destroyed;
		::Array< ::Dynamic> _delayed_init_entities;
		::Array< ::Dynamic> _delayed_reset_entities;
		bool _has_changed;
		void handle_duplicate_warning(::String _name);
		::Dynamic handle_duplicate_warning_dyn();

		int entity_count;
		void add( ::luxe::Entity entity);
		::Dynamic add_dyn();

		bool remove( ::luxe::Entity entity);
		::Dynamic remove_dyn();

		 ::Dynamic get(::String _name);
		::Dynamic get_dyn();

		void empty();
		::Dynamic empty_dyn();

		::Array< ::Dynamic> get_named_like(::String _name,::Array< ::Dynamic> into);
		::Dynamic get_named_like_dyn();

		void render( ::Dynamic _);
		::Dynamic render_dyn();

		void prerender( ::Dynamic _);
		::Dynamic prerender_dyn();

		void postrender( ::Dynamic _);
		::Dynamic postrender_dyn();

		void keydown( ::luxe::KeyEvent e);
		::Dynamic keydown_dyn();

		void keyup( ::luxe::KeyEvent e);
		::Dynamic keyup_dyn();

		void textinput( ::luxe::TextEvent e);
		::Dynamic textinput_dyn();

		void mousedown( ::luxe::MouseEvent e);
		::Dynamic mousedown_dyn();

		void mousewheel( ::luxe::MouseEvent e);
		::Dynamic mousewheel_dyn();

		void mouseup( ::luxe::MouseEvent e);
		::Dynamic mouseup_dyn();

		void mousemove( ::luxe::MouseEvent e);
		::Dynamic mousemove_dyn();

		void touchdown( ::luxe::TouchEvent event);
		::Dynamic touchdown_dyn();

		void touchup( ::luxe::TouchEvent event);
		::Dynamic touchup_dyn();

		void touchmove( ::luxe::TouchEvent event);
		::Dynamic touchmove_dyn();

		void gamepadaxis( ::luxe::GamepadEvent event);
		::Dynamic gamepadaxis_dyn();

		void gamepadup( ::luxe::GamepadEvent event);
		::Dynamic gamepadup_dyn();

		void gamepaddown( ::luxe::GamepadEvent event);
		::Dynamic gamepaddown_dyn();

		void gamepaddevice( ::luxe::GamepadEvent event);
		::Dynamic gamepaddevice_dyn();

		void windowmoved( ::snow::types::WindowEvent event);
		::Dynamic windowmoved_dyn();

		void windowresized( ::snow::types::WindowEvent event);
		::Dynamic windowresized_dyn();

		void windowsized( ::snow::types::WindowEvent event);
		::Dynamic windowsized_dyn();

		void windowminimized( ::snow::types::WindowEvent event);
		::Dynamic windowminimized_dyn();

		void windowrestored( ::snow::types::WindowEvent event);
		::Dynamic windowrestored_dyn();

		void inputdown( ::luxe::InputEvent _event);
		::Dynamic inputdown_dyn();

		void inputup( ::luxe::InputEvent _event);
		::Dynamic inputup_dyn();

		void _destroy( ::Dynamic _);
		::Dynamic _destroy_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		bool _do_init();
		::Dynamic _do_init_dyn();

		void init( ::Dynamic _);
		::Dynamic init_dyn();

		void reset();
		::Dynamic reset_dyn();

		void update(Float dt);
		::Dynamic update_dyn();

		void handle_delayed_additions();
		::Dynamic handle_delayed_additions_dyn();

		int get_length();
		::Dynamic get_length_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace luxe

#endif /* INCLUDED_luxe_Scene */ 
