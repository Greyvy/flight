// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_collision_ShapeDrawer
#define INCLUDED_luxe_collision_ShapeDrawer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(luxe,collision,ShapeDrawer)
HX_DECLARE_CLASS3(luxe,collision,data,ShapeCollision)
HX_DECLARE_CLASS3(luxe,collision,shapes,Circle)
HX_DECLARE_CLASS3(luxe,collision,shapes,Polygon)
HX_DECLARE_CLASS3(luxe,collision,shapes,Shape)
HX_DECLARE_CLASS1(phoenix,Vector)

namespace luxe{
namespace collision{


class HXCPP_CLASS_ATTRIBUTES ShapeDrawer_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ShapeDrawer_obj OBJ_;
		ShapeDrawer_obj();

	public:
		enum { _hx_ClassId = 0x64773956 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="luxe.collision.ShapeDrawer")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"luxe.collision.ShapeDrawer"); }
		static hx::ObjectPtr< ShapeDrawer_obj > __new();
		static hx::ObjectPtr< ShapeDrawer_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ShapeDrawer_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ShapeDrawer","\x52","\x0b","\x4b","\x56"); }

		virtual void drawLine(Float p0x,Float p0y,Float p1x,Float p1y, ::Dynamic startPoint);
		::Dynamic drawLine_dyn();

		void drawShape( ::luxe::collision::shapes::Shape shape);
		::Dynamic drawShape_dyn();

		void drawPolygon( ::luxe::collision::shapes::Polygon poly);
		::Dynamic drawPolygon_dyn();

		void drawCircle( ::luxe::collision::shapes::Circle circle);
		::Dynamic drawCircle_dyn();

		void drawPoint(Float x,Float y,hx::Null< Float >  size);
		::Dynamic drawPoint_dyn();

		void drawShapeCollision( ::luxe::collision::data::ShapeCollision c, ::Dynamic length);
		::Dynamic drawShapeCollision_dyn();

		void drawVertList(::Array< ::Dynamic> _verts);
		::Dynamic drawVertList_dyn();

};

} // end namespace luxe
} // end namespace collision

#endif /* INCLUDED_luxe_collision_ShapeDrawer */ 
