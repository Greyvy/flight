// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_collision_sat_SAT2D
#define INCLUDED_luxe_collision_sat_SAT2D

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(luxe,collision,data,RayCollision)
HX_DECLARE_CLASS3(luxe,collision,data,RayIntersection)
HX_DECLARE_CLASS3(luxe,collision,data,ShapeCollision)
HX_DECLARE_CLASS3(luxe,collision,sat,SAT2D)
HX_DECLARE_CLASS3(luxe,collision,shapes,Circle)
HX_DECLARE_CLASS3(luxe,collision,shapes,Polygon)
HX_DECLARE_CLASS3(luxe,collision,shapes,Ray)
HX_DECLARE_CLASS3(luxe,collision,shapes,Shape)
HX_DECLARE_CLASS1(phoenix,Vector)

namespace luxe{
namespace collision{
namespace sat{


class HXCPP_CLASS_ATTRIBUTES SAT2D_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef SAT2D_obj OBJ_;
		SAT2D_obj();

	public:
		enum { _hx_ClassId = 0x3fd399ae };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="luxe.collision.sat.SAT2D")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"luxe.collision.sat.SAT2D"); }

		hx::ObjectPtr< SAT2D_obj > __new() {
			hx::ObjectPtr< SAT2D_obj > __this = new SAT2D_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< SAT2D_obj > __alloc(hx::Ctx *_hx_ctx) {
			SAT2D_obj *__this = (SAT2D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SAT2D_obj), false, "luxe.collision.sat.SAT2D"));
			*(void **)__this = SAT2D_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SAT2D_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("SAT2D","\x58","\xed","\x78","\xf5"); }

		static void __boot();
		static  ::luxe::collision::data::ShapeCollision testCircleVsPolygon( ::luxe::collision::shapes::Circle circle, ::luxe::collision::shapes::Polygon polygon, ::luxe::collision::data::ShapeCollision into,hx::Null< bool >  flip);
		static ::Dynamic testCircleVsPolygon_dyn();

		static  ::luxe::collision::data::ShapeCollision testCircleVsCircle( ::luxe::collision::shapes::Circle circleA, ::luxe::collision::shapes::Circle circleB, ::luxe::collision::data::ShapeCollision into,hx::Null< bool >  flip);
		static ::Dynamic testCircleVsCircle_dyn();

		static  ::luxe::collision::data::ShapeCollision tmp1;
		static  ::luxe::collision::data::ShapeCollision tmp2;
		static  ::luxe::collision::data::ShapeCollision testPolygonVsPolygon( ::luxe::collision::shapes::Polygon polygon1, ::luxe::collision::shapes::Polygon polygon2, ::luxe::collision::data::ShapeCollision into,hx::Null< bool >  flip);
		static ::Dynamic testPolygonVsPolygon_dyn();

		static  ::luxe::collision::data::RayCollision testRayVsCircle( ::luxe::collision::shapes::Ray ray, ::luxe::collision::shapes::Circle circle, ::luxe::collision::data::RayCollision into);
		static ::Dynamic testRayVsCircle_dyn();

		static  ::luxe::collision::data::RayCollision testRayVsPolygon( ::luxe::collision::shapes::Ray ray, ::luxe::collision::shapes::Polygon polygon, ::luxe::collision::data::RayCollision into);
		static ::Dynamic testRayVsPolygon_dyn();

		static  ::luxe::collision::data::RayIntersection testRayVsRay( ::luxe::collision::shapes::Ray ray1, ::luxe::collision::shapes::Ray ray2, ::luxe::collision::data::RayIntersection into);
		static ::Dynamic testRayVsRay_dyn();

		static  ::luxe::collision::data::ShapeCollision checkPolygons( ::luxe::collision::shapes::Polygon polygon1, ::luxe::collision::shapes::Polygon polygon2, ::luxe::collision::data::ShapeCollision into,hx::Null< bool >  flip);
		static ::Dynamic checkPolygons_dyn();

		static Float rayU(Float udelta,Float aX,Float aY,Float bX,Float bY,Float dX,Float dY);
		static ::Dynamic rayU_dyn();

		static Float findNormalAxisX(::Array< ::Dynamic> verts,int index);
		static ::Dynamic findNormalAxisX_dyn();

		static Float findNormalAxisY(::Array< ::Dynamic> verts,int index);
		static ::Dynamic findNormalAxisY_dyn();

};

} // end namespace luxe
} // end namespace collision
} // end namespace sat

#endif /* INCLUDED_luxe_collision_sat_SAT2D */ 
