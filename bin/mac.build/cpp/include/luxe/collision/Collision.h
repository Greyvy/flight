// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_collision_Collision
#define INCLUDED_luxe_collision_Collision

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(luxe,collision,Collision)
HX_DECLARE_CLASS2(luxe,collision,Results_luxe_collision_data_RayCollision)
HX_DECLARE_CLASS2(luxe,collision,Results_luxe_collision_data_RayIntersection)
HX_DECLARE_CLASS2(luxe,collision,Results_luxe_collision_data_ShapeCollision)
HX_DECLARE_CLASS3(luxe,collision,data,RayCollision)
HX_DECLARE_CLASS3(luxe,collision,data,RayIntersection)
HX_DECLARE_CLASS3(luxe,collision,data,ShapeCollision)
HX_DECLARE_CLASS3(luxe,collision,shapes,Polygon)
HX_DECLARE_CLASS3(luxe,collision,shapes,Ray)
HX_DECLARE_CLASS3(luxe,collision,shapes,Shape)

namespace luxe{
namespace collision{


class HXCPP_CLASS_ATTRIBUTES Collision_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Collision_obj OBJ_;
		Collision_obj();

	public:
		enum { _hx_ClassId = 0x0b213582 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="luxe.collision.Collision")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"luxe.collision.Collision"); }

		hx::ObjectPtr< Collision_obj > __new() {
			hx::ObjectPtr< Collision_obj > __this = new Collision_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Collision_obj > __alloc(hx::Ctx *_hx_ctx) {
			Collision_obj *__this = (Collision_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Collision_obj), false, "luxe.collision.Collision"));
			*(void **)__this = Collision_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Collision_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Collision","\x52","\x88","\x0d","\x7d"); }

		static  ::luxe::collision::data::ShapeCollision shapeWithShape( ::luxe::collision::shapes::Shape shape1, ::luxe::collision::shapes::Shape shape2, ::luxe::collision::data::ShapeCollision into);
		static ::Dynamic shapeWithShape_dyn();

		static  ::luxe::collision::Results_luxe_collision_data_ShapeCollision shapeWithShapes( ::luxe::collision::shapes::Shape shape1,::Array< ::Dynamic> shapes, ::luxe::collision::Results_luxe_collision_data_ShapeCollision into);
		static ::Dynamic shapeWithShapes_dyn();

		static  ::luxe::collision::data::RayCollision rayWithShape( ::luxe::collision::shapes::Ray ray, ::luxe::collision::shapes::Shape shape, ::luxe::collision::data::RayCollision into);
		static ::Dynamic rayWithShape_dyn();

		static  ::luxe::collision::Results_luxe_collision_data_RayCollision rayWithShapes( ::luxe::collision::shapes::Ray ray,::Array< ::Dynamic> shapes, ::luxe::collision::Results_luxe_collision_data_RayCollision into);
		static ::Dynamic rayWithShapes_dyn();

		static  ::luxe::collision::data::RayIntersection rayWithRay( ::luxe::collision::shapes::Ray ray1, ::luxe::collision::shapes::Ray ray2, ::luxe::collision::data::RayIntersection into);
		static ::Dynamic rayWithRay_dyn();

		static  ::luxe::collision::Results_luxe_collision_data_RayIntersection rayWithRays( ::luxe::collision::shapes::Ray ray,::Array< ::Dynamic> rays, ::luxe::collision::Results_luxe_collision_data_RayIntersection into);
		static ::Dynamic rayWithRays_dyn();

		static bool pointInPoly(Float x,Float y, ::luxe::collision::shapes::Polygon poly);
		static ::Dynamic pointInPoly_dyn();

};

} // end namespace luxe
} // end namespace collision

#endif /* INCLUDED_luxe_collision_Collision */ 
