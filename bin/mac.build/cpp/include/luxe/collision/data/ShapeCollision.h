// Generated by Haxe 3.4.5
#ifndef INCLUDED_luxe_collision_data_ShapeCollision
#define INCLUDED_luxe_collision_data_ShapeCollision

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(luxe,collision,data,ShapeCollision)
HX_DECLARE_CLASS3(luxe,collision,shapes,Shape)

namespace luxe{
namespace collision{
namespace data{


class HXCPP_CLASS_ATTRIBUTES ShapeCollision_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ShapeCollision_obj OBJ_;
		ShapeCollision_obj();

	public:
		enum { _hx_ClassId = 0x078e8b97 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="luxe.collision.data.ShapeCollision")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"luxe.collision.data.ShapeCollision"); }
		static hx::ObjectPtr< ShapeCollision_obj > __new();
		static hx::ObjectPtr< ShapeCollision_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ShapeCollision_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ShapeCollision","\x31","\x4d","\xab","\x19"); }

		Float overlap;
		Float separationX;
		Float separationY;
		Float unitVectorX;
		Float unitVectorY;
		Float otherOverlap;
		Float otherSeparationX;
		Float otherSeparationY;
		Float otherUnitVectorX;
		Float otherUnitVectorY;
		 ::luxe::collision::shapes::Shape shape1;
		 ::luxe::collision::shapes::Shape shape2;
		 ::luxe::collision::data::ShapeCollision reset();
		::Dynamic reset_dyn();

		 ::luxe::collision::data::ShapeCollision clone();
		::Dynamic clone_dyn();

		void copy_from( ::luxe::collision::data::ShapeCollision _other);
		::Dynamic copy_from_dyn();

};

} // end namespace luxe
} // end namespace collision
} // end namespace data

#endif /* INCLUDED_luxe_collision_data_ShapeCollision */ 
