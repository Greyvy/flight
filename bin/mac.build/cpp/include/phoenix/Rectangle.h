// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_Rectangle
#define INCLUDED_phoenix_Rectangle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(phoenix,Rectangle)
HX_DECLARE_CLASS1(phoenix,Vector)

namespace phoenix{


class HXCPP_CLASS_ATTRIBUTES Rectangle_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Rectangle_obj OBJ_;
		Rectangle_obj();

	public:
		enum { _hx_ClassId = 0x7a9fef28 };

		void __construct( ::Dynamic __o__x, ::Dynamic __o__y, ::Dynamic __o__w, ::Dynamic __o__h);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="phoenix.Rectangle")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"phoenix.Rectangle"); }
		static hx::ObjectPtr< Rectangle_obj > __new( ::Dynamic __o__x, ::Dynamic __o__y, ::Dynamic __o__w, ::Dynamic __o__h);
		static hx::ObjectPtr< Rectangle_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic __o__x, ::Dynamic __o__y, ::Dynamic __o__w, ::Dynamic __o__h);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Rectangle_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Rectangle","\x0f","\xb4","\x4f","\xbb"); }

		static void listen( ::phoenix::Rectangle _r, ::Dynamic listener);
		static ::Dynamic listen_dyn();

		Float x;
		Float y;
		Float w;
		Float h;
		bool ignore_listeners;
		 ::Dynamic listen_x;
		Dynamic listen_x_dyn() { return listen_x;}
		 ::Dynamic listen_y;
		Dynamic listen_y_dyn() { return listen_y;}
		 ::Dynamic listen_w;
		Dynamic listen_w_dyn() { return listen_w;}
		 ::Dynamic listen_h;
		Dynamic listen_h_dyn() { return listen_h;}
		virtual ::String toString();
		::Dynamic toString_dyn();

		bool point_inside( ::phoenix::Vector _p);
		::Dynamic point_inside_dyn();

		bool overlaps( ::phoenix::Rectangle _other);
		::Dynamic overlaps_dyn();

		 ::phoenix::Rectangle clone();
		::Dynamic clone_dyn();

		bool equal( ::phoenix::Rectangle _other);
		::Dynamic equal_dyn();

		void copy_from( ::phoenix::Rectangle _rect);
		::Dynamic copy_from_dyn();

		 ::phoenix::Rectangle set( ::Dynamic _x, ::Dynamic _y, ::Dynamic _w, ::Dynamic _h);
		::Dynamic set_dyn();

		Float set_x(Float _x);
		::Dynamic set_x_dyn();

		Float set_y(Float _y);
		::Dynamic set_y_dyn();

		Float set_w(Float _w);
		::Dynamic set_w_dyn();

		Float set_h(Float _h);
		::Dynamic set_h_dyn();

};

} // end namespace phoenix

#endif /* INCLUDED_phoenix_Rectangle */ 
