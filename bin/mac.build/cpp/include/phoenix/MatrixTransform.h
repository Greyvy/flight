// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_MatrixTransform
#define INCLUDED_phoenix_MatrixTransform

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(phoenix,MatrixTransform)
HX_DECLARE_CLASS1(phoenix,Quaternion)
HX_DECLARE_CLASS1(phoenix,Vector)

namespace phoenix{


class HXCPP_CLASS_ATTRIBUTES MatrixTransform_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MatrixTransform_obj OBJ_;
		MatrixTransform_obj();

	public:
		enum { _hx_ClassId = 0x7dcbc39c };

		void __construct( ::phoenix::Vector p, ::phoenix::Quaternion r, ::phoenix::Vector s);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="phoenix.MatrixTransform")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"phoenix.MatrixTransform"); }
		static hx::ObjectPtr< MatrixTransform_obj > __new( ::phoenix::Vector p, ::phoenix::Quaternion r, ::phoenix::Vector s);
		static hx::ObjectPtr< MatrixTransform_obj > __alloc(hx::Ctx *_hx_ctx, ::phoenix::Vector p, ::phoenix::Quaternion r, ::phoenix::Vector s);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MatrixTransform_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MatrixTransform","\xcb","\x8e","\x5b","\x5b"); }

		 ::phoenix::Vector pos;
		 ::phoenix::Quaternion rotation;
		 ::phoenix::Vector scale;
		void destroy();
		::Dynamic destroy_dyn();

};

} // end namespace phoenix

#endif /* INCLUDED_phoenix_MatrixTransform */ 
