// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_Transform
#define INCLUDED_phoenix_Transform

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
HX_DECLARE_CLASS1(luxe,ID)
HX_DECLARE_CLASS1(phoenix,Matrix)
HX_DECLARE_CLASS1(phoenix,Quaternion)
HX_DECLARE_CLASS1(phoenix,Spatial)
HX_DECLARE_CLASS1(phoenix,Transform)
HX_DECLARE_CLASS1(phoenix,Vector)

namespace phoenix{


class HXCPP_CLASS_ATTRIBUTES Transform_obj : public  ::luxe::ID_obj
{
	public:
		typedef  ::luxe::ID_obj super;
		typedef Transform_obj OBJ_;
		Transform_obj();

	public:
		enum { _hx_ClassId = 0x22bfdf5d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="phoenix.Transform")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"phoenix.Transform"); }
		static hx::ObjectPtr< Transform_obj > __new();
		static hx::ObjectPtr< Transform_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Transform_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Transform","\x4c","\x0d","\x66","\xe7"); }

		 ::phoenix::Transform parent;
		 ::phoenix::Spatial local;
		 ::phoenix::Spatial world;
		 ::phoenix::Vector origin;
		bool dirty;
		bool manual_update;
		 ::phoenix::Matrix _origin_undo_matrix;
		 ::phoenix::Matrix _pos_matrix;
		 ::phoenix::Matrix _rotation_matrix;
		bool _setup;
		bool _cleaning;
		::Array< ::Dynamic> _clean_handlers;
		::Array< ::Dynamic> _dirty_handlers;
		::Array< ::Dynamic> _pos_handlers;
		::Array< ::Dynamic> _rotation_handlers;
		::Array< ::Dynamic> _scale_handlers;
		::Array< ::Dynamic> _origin_handlers;
		::Array< ::Dynamic> _parent_handlers;
		bool _destroying;
		void destroy();
		::Dynamic destroy_dyn();

		bool set_dirty(bool _dirty);
		::Dynamic set_dirty_dyn();

		void on_local_pos_change( ::phoenix::Vector v);
		::Dynamic on_local_pos_change_dyn();

		void on_local_rotation_change( ::phoenix::Quaternion r);
		::Dynamic on_local_rotation_change_dyn();

		void on_local_scale_change( ::phoenix::Vector s);
		::Dynamic on_local_scale_change_dyn();

		void on_parent_cleaned( ::phoenix::Transform p);
		::Dynamic on_parent_cleaned_dyn();

		 ::phoenix::Spatial get_local();
		::Dynamic get_local_dyn();

		 ::phoenix::Spatial set_local( ::phoenix::Spatial l);
		::Dynamic set_local_dyn();

		 ::phoenix::Spatial get_world();
		::Dynamic get_world_dyn();

		void clean_check();
		::Dynamic clean_check_dyn();

		void clean();
		::Dynamic clean_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		 ::phoenix::Vector get_origin();
		::Dynamic get_origin_dyn();

		 ::phoenix::Vector set_origin( ::phoenix::Vector o);
		::Dynamic set_origin_dyn();

		 ::phoenix::Spatial set_world( ::phoenix::Spatial w);
		::Dynamic set_world_dyn();

		 ::phoenix::Transform get_parent();
		::Dynamic get_parent_dyn();

		 ::phoenix::Transform set_parent( ::phoenix::Transform _p);
		::Dynamic set_parent_dyn();

		 ::phoenix::Vector get_pos();
		::Dynamic get_pos_dyn();

		 ::phoenix::Quaternion get_rotation();
		::Dynamic get_rotation_dyn();

		 ::phoenix::Vector get_scale();
		::Dynamic get_scale_dyn();

		 ::phoenix::Vector set_pos( ::phoenix::Vector value);
		::Dynamic set_pos_dyn();

		 ::phoenix::Quaternion set_rotation( ::phoenix::Quaternion value);
		::Dynamic set_rotation_dyn();

		 ::phoenix::Vector set_scale( ::phoenix::Vector value);
		::Dynamic set_scale_dyn();

		void propagate_clean();
		::Dynamic propagate_clean_dyn();

		void propagate_dirty();
		::Dynamic propagate_dirty_dyn();

		void propagate_pos( ::phoenix::Vector _pos);
		::Dynamic propagate_pos_dyn();

		void propagate_rotation( ::phoenix::Quaternion _rotation);
		::Dynamic propagate_rotation_dyn();

		void propagate_scale( ::phoenix::Vector _scale);
		::Dynamic propagate_scale_dyn();

		void propagate_origin( ::phoenix::Vector _origin);
		::Dynamic propagate_origin_dyn();

		void propagate_parent( ::phoenix::Transform _parent);
		::Dynamic propagate_parent_dyn();

		void listen( ::Dynamic _handler);
		::Dynamic listen_dyn();

		bool unlisten( ::Dynamic _handler);
		::Dynamic unlisten_dyn();

		void listen_dirty( ::Dynamic _handler);
		::Dynamic listen_dirty_dyn();

		bool unlisten_dirty( ::Dynamic _handler);
		::Dynamic unlisten_dirty_dyn();

		void listen_pos( ::Dynamic _handler);
		::Dynamic listen_pos_dyn();

		bool unlisten_pos( ::Dynamic _handler);
		::Dynamic unlisten_pos_dyn();

		void listen_scale( ::Dynamic _handler);
		::Dynamic listen_scale_dyn();

		bool unlisten_scale( ::Dynamic _handler);
		::Dynamic unlisten_scale_dyn();

		void listen_rotation( ::Dynamic _handler);
		::Dynamic listen_rotation_dyn();

		bool unlisten_rotation( ::Dynamic _handler);
		::Dynamic unlisten_rotation_dyn();

		void listen_origin( ::Dynamic _handler);
		::Dynamic listen_origin_dyn();

		bool unlisten_origin( ::Dynamic _handler);
		::Dynamic unlisten_origin_dyn();

		void listen_parent( ::Dynamic _handler);
		::Dynamic listen_parent_dyn();

		bool unlisten_parent( ::Dynamic _handler);
		::Dynamic unlisten_parent_dyn();

};

} // end namespace phoenix

#endif /* INCLUDED_phoenix_Transform */ 
