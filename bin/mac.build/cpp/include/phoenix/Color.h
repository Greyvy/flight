// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_Color
#define INCLUDED_phoenix_Color

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(luxe,tween,actuators,IGenericActuator)
HX_DECLARE_CLASS1(phoenix,Color)
HX_DECLARE_CLASS1(phoenix,ColorHSL)
HX_DECLARE_CLASS1(phoenix,ColorHSV)

namespace phoenix{


class HXCPP_CLASS_ATTRIBUTES Color_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Color_obj OBJ_;
		Color_obj();

	public:
		enum { _hx_ClassId = 0x4a8b16d4 };

		void __construct(hx::Null< Float >  __o__r,hx::Null< Float >  __o__g,hx::Null< Float >  __o__b,hx::Null< Float >  __o__a);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="phoenix.Color")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"phoenix.Color"); }
		static hx::ObjectPtr< Color_obj > __new(hx::Null< Float >  __o__r,hx::Null< Float >  __o__g,hx::Null< Float >  __o__b,hx::Null< Float >  __o__a);
		static hx::ObjectPtr< Color_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o__r,hx::Null< Float >  __o__g,hx::Null< Float >  __o__b,hx::Null< Float >  __o__a);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Color_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Color","\x43","\xe1","\x89","\xdd"); }

		static  ::phoenix::Color random( ::Dynamic _include_alpha);
		static ::Dynamic random_dyn();

		Float r;
		Float g;
		Float b;
		Float a;
		bool is_hsl;
		bool is_hsv;
		bool refreshing;
		Float set_r(Float _r);
		::Dynamic set_r_dyn();

		Float set_g(Float _g);
		::Dynamic set_g_dyn();

		Float set_b(Float _b);
		::Dynamic set_b_dyn();

		virtual  ::phoenix::Color set( ::Dynamic _r, ::Dynamic _g, ::Dynamic _b, ::Dynamic _a);
		::Dynamic set_dyn();

		Float maxRGB();
		::Dynamic maxRGB_dyn();

		Float minRGB();
		::Dynamic minRGB_dyn();

		virtual ::Dynamic tween( ::Dynamic _time_in_seconds, ::Dynamic _properties_to_tween,hx::Null< bool >  _override);
		::Dynamic tween_dyn();

		virtual  ::phoenix::Color clone();
		::Dynamic clone_dyn();

		 ::phoenix::Color rgb(hx::Null< int >  _rgb);
		::Dynamic rgb_dyn();

		virtual  ::phoenix::ColorHSL toColorHSL();
		::Dynamic toColorHSL_dyn();

		 ::phoenix::ColorHSV toColorHSV();
		::Dynamic toColorHSV_dyn();

		void fromColorHSV( ::phoenix::ColorHSV _color_hsv);
		::Dynamic fromColorHSV_dyn();

		virtual  ::phoenix::Color fromColorHSL( ::phoenix::ColorHSL _color_hsl);
		::Dynamic fromColorHSL_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		void from_int(int _i);
		::Dynamic from_int_dyn();

};

} // end namespace phoenix

#endif /* INCLUDED_phoenix_Color */ 
