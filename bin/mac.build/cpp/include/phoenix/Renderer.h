// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_Renderer
#define INCLUDED_phoenix_Renderer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(luxe,Engine)
HX_DECLARE_CLASS2(luxe,resource,Resource)
HX_DECLARE_CLASS1(opengl,GLObject)
HX_DECLARE_CLASS1(phoenix,Backbuffer)
HX_DECLARE_CLASS1(phoenix,Batcher)
HX_DECLARE_CLASS1(phoenix,BitmapFont)
HX_DECLARE_CLASS1(phoenix,Camera)
HX_DECLARE_CLASS1(phoenix,Color)
HX_DECLARE_CLASS1(phoenix,RenderPath)
HX_DECLARE_CLASS1(phoenix,RenderState)
HX_DECLARE_CLASS1(phoenix,RenderTarget)
HX_DECLARE_CLASS1(phoenix,Renderer)
HX_DECLARE_CLASS1(phoenix,RendererStats)
HX_DECLARE_CLASS1(snow,App)
HX_DECLARE_CLASS3(snow,systems,assets,Asset)
HX_DECLARE_CLASS3(snow,systems,assets,AssetImage)

namespace phoenix{


class HXCPP_CLASS_ATTRIBUTES Renderer_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Renderer_obj OBJ_;
		Renderer_obj();

	public:
		enum { _hx_ClassId = 0x0d5cab8e };

		void __construct( ::luxe::Engine _core, ::snow::systems::assets::AssetImage _asset);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="phoenix.Renderer")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"phoenix.Renderer"); }
		static hx::ObjectPtr< Renderer_obj > __new( ::luxe::Engine _core, ::snow::systems::assets::AssetImage _asset);
		static hx::ObjectPtr< Renderer_obj > __alloc(hx::Ctx *_hx_ctx, ::luxe::Engine _core, ::snow::systems::assets::AssetImage _asset);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Renderer_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Renderer","\x63","\x81","\x8d","\x8c"); }

		::Array< ::Dynamic> batchers;
		 ::luxe::Engine core;
		 ::phoenix::RenderState state;
		 ::opengl::GLObject default_framebuffer;
		 ::opengl::GLObject default_renderbuffer;
		 ::Dynamic shaders;
		 ::phoenix::Batcher batcher;
		 ::phoenix::Camera camera;
		 ::phoenix::BitmapFont font;
		 ::snow::systems::assets::AssetImage font_asset;
		 ::phoenix::RenderPath render_path;
		 ::phoenix::RenderPath default_render_path;
		::Dynamic target;
		::Dynamic default_target;
		 ::phoenix::Backbuffer backbuffer;
		bool should_clear;
		bool stop;
		int stop_count;
		 ::phoenix::Color clear_color;
		 ::phoenix::RendererStats stats;
		void init();
		::Dynamic init_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		int sort_batchers( ::phoenix::Batcher a, ::phoenix::Batcher b);
		::Dynamic sort_batchers_dyn();

		void add_batch( ::phoenix::Batcher batch);
		::Dynamic add_batch_dyn();

		void remove_batch( ::phoenix::Batcher batch);
		::Dynamic remove_batch_dyn();

		 ::phoenix::Batcher create_batcher( ::Dynamic options);
		::Dynamic create_batcher_dyn();

		void clear( ::phoenix::Color _color);
		::Dynamic clear_dyn();

		void blend_disable(bool disabled_state);
		::Dynamic blend_disable_dyn();

		void blend_mode( ::Dynamic _src_mode,hx::Null< int >  _dst_mode);
		::Dynamic blend_mode_dyn();

		void blend_equation( ::Dynamic _equation);
		::Dynamic blend_equation_dyn();

		void internal_resized(int _w,int _h);
		::Dynamic internal_resized_dyn();

		void process();
		::Dynamic process_dyn();

		void prerender();
		::Dynamic prerender_dyn();

		::Dynamic get_target();
		::Dynamic get_target_dyn();

		::Dynamic set_target(::Dynamic _target);
		::Dynamic set_target_dyn();

		void bind_target(::Dynamic _target);
		::Dynamic bind_target_dyn();

		void create_default_shaders();
		::Dynamic create_default_shaders_dyn();

		void create_default_font();
		::Dynamic create_default_font_dyn();

};

} // end namespace phoenix

#endif /* INCLUDED_phoenix_Renderer */ 
