// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_geometry_QuadGeometry
#define INCLUDED_phoenix_geometry_QuadGeometry

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
HX_DECLARE_CLASS1(phoenix,Rectangle)
HX_DECLARE_CLASS1(phoenix,Vector)
HX_DECLARE_CLASS2(phoenix,geometry,Geometry)
HX_DECLARE_CLASS2(phoenix,geometry,QuadGeometry)

namespace phoenix{
namespace geometry{


class HXCPP_CLASS_ATTRIBUTES QuadGeometry_obj : public  ::phoenix::geometry::Geometry_obj
{
	public:
		typedef  ::phoenix::geometry::Geometry_obj super;
		typedef QuadGeometry_obj OBJ_;
		QuadGeometry_obj();

	public:
		enum { _hx_ClassId = 0x7fb26a6a };

		void __construct( ::Dynamic _options);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="phoenix.geometry.QuadGeometry")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"phoenix.geometry.QuadGeometry"); }
		static hx::ObjectPtr< QuadGeometry_obj > __new( ::Dynamic _options);
		static hx::ObjectPtr< QuadGeometry_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic _options);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~QuadGeometry_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("QuadGeometry","\xb9","\xe2","\x17","\xa2"); }

		bool flipx;
		bool flipy;
		int uv_angle;
		Float _uv_x;
		Float _uv_y;
		Float _uv_w;
		Float _uv_h;
		void uv( ::phoenix::Rectangle _rect);
		::Dynamic uv_dyn();

		void uv_space(Float _rect_x,Float _rect_y,Float _rect_w,Float _rect_h);
		::Dynamic uv_space_dyn();

		void resize_xy(Float _x,Float _y);
		::Dynamic resize_xy_dyn();

		void resize( ::phoenix::Vector quad);
		::Dynamic resize_dyn();

		void set( ::phoenix::Rectangle quad);
		::Dynamic set_dyn();

		void set_xywh(Float _x,Float _y,Float _w,Float _h);
		::Dynamic set_xywh_dyn();

		bool set_flipx(bool _val);
		::Dynamic set_flipx_dyn();

		bool set_flipy(bool _val);
		::Dynamic set_flipy_dyn();

		int set_uv_angle(int _val);
		::Dynamic set_uv_angle_dyn();

};

} // end namespace phoenix
} // end namespace geometry

#endif /* INCLUDED_phoenix_geometry_QuadGeometry */ 
