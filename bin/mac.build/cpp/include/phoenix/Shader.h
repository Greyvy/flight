// Generated by Haxe 3.4.5
#ifndef INCLUDED_phoenix_Shader
#define INCLUDED_phoenix_Shader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
HX_DECLARE_CLASS2(luxe,resource,Resource)
HX_DECLARE_CLASS1(opengl,GLObject)
HX_DECLARE_CLASS1(phoenix,Color)
HX_DECLARE_CLASS1(phoenix,Matrix)
HX_DECLARE_CLASS1(phoenix,Shader)
HX_DECLARE_CLASS1(phoenix,Texture)
HX_DECLARE_CLASS1(phoenix,Uniforms)
HX_DECLARE_CLASS1(phoenix,Vector)
HX_DECLARE_CLASS2(snow,api,Promise)
HX_DECLARE_CLASS3(snow,api,buffers,ArrayBufferView)

namespace phoenix{


class HXCPP_CLASS_ATTRIBUTES Shader_obj : public  ::luxe::resource::Resource_obj
{
	public:
		typedef  ::luxe::resource::Resource_obj super;
		typedef Shader_obj OBJ_;
		Shader_obj();

	public:
		enum { _hx_ClassId = 0x45c2dc94 };

		void __construct( ::Dynamic _options);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="phoenix.Shader")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"phoenix.Shader"); }
		static hx::ObjectPtr< Shader_obj > __new( ::Dynamic _options);
		static hx::ObjectPtr< Shader_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic _options);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Shader_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Shader","\x45","\x33","\xb5","\x51"); }

		::String log;
		::String vert_source;
		::String frag_source;
		::String vert_id;
		::String frag_id;
		 ::opengl::GLObject vert_shader;
		 ::opengl::GLObject frag_shader;
		 ::opengl::GLObject program;
		 ::opengl::GLObject shader;
		bool no_default_uniforms;
		 ::opengl::GLObject proj_attribute;
		 ::opengl::GLObject view_attribute;
		 ::phoenix::Uniforms uniforms;
		void activate();
		::Dynamic activate_dyn();

		void use();
		::Dynamic use_dyn();

		void deactivate();
		::Dynamic deactivate_dyn();

		 ::phoenix::Shader clone(::String _id);
		::Dynamic clone_dyn();

		void set_int(::String _name,int _value);
		::Dynamic set_int_dyn();

		void set_float(::String _name,Float _value);
		::Dynamic set_float_dyn();

		void set_vector2(::String _name, ::phoenix::Vector _value);
		::Dynamic set_vector2_dyn();

		void set_vector2_arr(::String _name, ::snow::api::buffers::ArrayBufferView _value);
		::Dynamic set_vector2_arr_dyn();

		void set_vector3(::String _name, ::phoenix::Vector _value);
		::Dynamic set_vector3_dyn();

		void set_vector3_arr(::String _name, ::snow::api::buffers::ArrayBufferView _value);
		::Dynamic set_vector3_arr_dyn();

		void set_vector4(::String _name, ::phoenix::Vector _value);
		::Dynamic set_vector4_dyn();

		void set_vector4_arr(::String _name, ::snow::api::buffers::ArrayBufferView _value);
		::Dynamic set_vector4_arr_dyn();

		void set_matrix4(::String _name, ::phoenix::Matrix _value);
		::Dynamic set_matrix4_dyn();

		void set_matrix4_arr(::String _name, ::snow::api::buffers::ArrayBufferView _value);
		::Dynamic set_matrix4_arr_dyn();

		void set_color(::String _name, ::phoenix::Color _value);
		::Dynamic set_color_dyn();

		void set_texture(::String _name, ::phoenix::Texture _value);
		::Dynamic set_texture_dyn();

		 ::opengl::GLObject compile(int _type,::String _source);
		::Dynamic compile_dyn();

		bool link();
		::Dynamic link_dyn();

		 ::opengl::GLObject location(::String _name);
		::Dynamic location_dyn();

		void clear();

		 ::snow::api::Promise reload();

		bool from_string(::String _vert_source,::String _fragment_source);
		::Dynamic from_string_dyn();

		void add_log(::String _log);
		::Dynamic add_log_dyn();

		virtual ::String toString();

		::String format_log(::String _log);
		::Dynamic format_log_dyn();

};

} // end namespace phoenix

#endif /* INCLUDED_phoenix_Shader */ 
