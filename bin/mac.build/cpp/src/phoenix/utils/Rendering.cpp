// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_phoenix_utils_Rendering
#include <phoenix/utils/Rendering.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2871aa6e9a9e3cd7_11_gl_blend_mode_from_BlendMode,"phoenix.utils.Rendering","gl_blend_mode_from_BlendMode",0xf5abd9d1,"phoenix.utils.Rendering.gl_blend_mode_from_BlendMode","phoenix/utils/Rendering.hx",11,0x8a2baeb0)
HX_LOCAL_STACK_FRAME(_hx_pos_2871aa6e9a9e3cd7_39_fovx_to_y,"phoenix.utils.Rendering","fovx_to_y",0xb6e51a8b,"phoenix.utils.Rendering.fovx_to_y","phoenix/utils/Rendering.hx",39,0x8a2baeb0)
namespace phoenix{
namespace utils{

void Rendering_obj::__construct() { }

Dynamic Rendering_obj::__CreateEmpty() { return new Rendering_obj; }

void *Rendering_obj::_hx_vtable = 0;

Dynamic Rendering_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rendering_obj > _hx_result = new Rendering_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Rendering_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x70495a22;
}

int Rendering_obj::gl_blend_mode_from_BlendMode(int _b){
            	HX_STACKFRAME(&_hx_pos_2871aa6e9a9e3cd7_11_gl_blend_mode_from_BlendMode)
HXDLIN(  11)		switch((int)(_b)){
            			case (int)0: {
HXLINE(  13)				return (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE(  15)				return (int)1;
            			}
            			break;
            			case (int)768: {
HXLINE(  17)				return (int)768;
            			}
            			break;
            			case (int)769: {
HXLINE(  19)				return (int)769;
            			}
            			break;
            			case (int)770: {
HXLINE(  21)				return (int)770;
            			}
            			break;
            			case (int)771: {
HXLINE(  23)				return (int)771;
            			}
            			break;
            			case (int)772: {
HXLINE(  25)				return (int)772;
            			}
            			break;
            			case (int)773: {
HXLINE(  27)				return (int)773;
            			}
            			break;
            			case (int)774: {
HXLINE(  29)				return (int)774;
            			}
            			break;
            			case (int)775: {
HXLINE(  31)				return (int)775;
            			}
            			break;
            			case (int)776: {
HXLINE(  33)				return (int)776;
            			}
            			break;
            		}
HXLINE(  11)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rendering_obj,gl_blend_mode_from_BlendMode,return )

Float Rendering_obj::fovx_to_y(Float fovx,Float aspect){
            	HX_STACKFRAME(&_hx_pos_2871aa6e9a9e3cd7_39_fovx_to_y)
HXDLIN(  39)		Float _hx_tmp = ((Float)(int)180 / (Float)::Math_obj::PI);
HXDLIN(  39)		Float _hx_tmp1 = ::Math_obj::tan(((Float)(fovx * ((Float)::Math_obj::PI / (Float)(int)180)) / (Float)(int)2));
HXDLIN(  39)		return (_hx_tmp * ((int)2 * ::Math_obj::atan((_hx_tmp1 * ((Float)(int)1 / (Float)aspect)))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rendering_obj,fovx_to_y,return )


Rendering_obj::Rendering_obj()
{
}

bool Rendering_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fovx_to_y") ) { outValue = fovx_to_y_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"gl_blend_mode_from_BlendMode") ) { outValue = gl_blend_mode_from_BlendMode_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Rendering_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Rendering_obj_sStaticStorageInfo = 0;
#endif

static void Rendering_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rendering_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rendering_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rendering_obj::__mClass,"__mClass");
};

#endif

hx::Class Rendering_obj::__mClass;

static ::String Rendering_obj_sStaticFields[] = {
	HX_HCSTRING("gl_blend_mode_from_BlendMode","\x73","\xba","\x54","\xcb"),
	HX_HCSTRING("fovx_to_y","\xa9","\xc4","\xd9","\xfe"),
	::String(null())
};

void Rendering_obj::__register()
{
	hx::Object *dummy = new Rendering_obj;
	Rendering_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.utils.Rendering","\xd0","\xe7","\x6b","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Rendering_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Rendering_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Rendering_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Rendering_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rendering_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rendering_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rendering_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
} // end namespace utils
