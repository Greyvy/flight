// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_phoenix_Matrix
#include <phoenix/Matrix.h>
#endif
#ifndef INCLUDED_phoenix_MatrixTransform
#include <phoenix/MatrixTransform.h>
#endif
#ifndef INCLUDED_phoenix_Quaternion
#include <phoenix/Quaternion.h>
#endif
#ifndef INCLUDED_phoenix_Spatial
#include <phoenix/Spatial.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_31767c605e1e317f_547_new,"phoenix.Spatial","new",0x51d44037,"phoenix.Spatial.new","phoenix/Transform.hx",547,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_31767c605e1e317f_578_destroy,"phoenix.Spatial","destroy",0x7b90d451,"phoenix.Spatial.destroy","phoenix/Transform.hx",578,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_31767c605e1e317f_591_decompose,"phoenix.Spatial","decompose",0xa72c2ec8,"phoenix.Spatial.decompose","phoenix/Transform.hx",591,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_31767c605e1e317f_609_get_matrix,"phoenix.Spatial","get_matrix",0x73a8ef13,"phoenix.Spatial.get_matrix","phoenix/Transform.hx",609,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_31767c605e1e317f_613_set_matrix,"phoenix.Spatial","set_matrix",0x77268d87,"phoenix.Spatial.set_matrix","phoenix/Transform.hx",613,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_31767c605e1e317f_627_propagate_pos,"phoenix.Spatial","propagate_pos",0x23adb615,"phoenix.Spatial.propagate_pos","phoenix/Transform.hx",627,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_31767c605e1e317f_633_propagate_rotation,"phoenix.Spatial","propagate_rotation",0xc1f8711d,"phoenix.Spatial.propagate_rotation","phoenix/Transform.hx",633,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_31767c605e1e317f_639_propagate_scale,"phoenix.Spatial","propagate_scale",0x654f094b,"phoenix.Spatial.propagate_scale","phoenix/Transform.hx",639,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_31767c605e1e317f_644_set_pos,"phoenix.Spatial","set_pos",0x70d65e8e,"phoenix.Spatial.set_pos","phoenix/Transform.hx",644,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_31767c605e1e317f_660_set_rotation,"phoenix.Spatial","set_rotation",0x199d7204,"phoenix.Spatial.set_rotation","phoenix/Transform.hx",660,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_31767c605e1e317f_676_set_scale,"phoenix.Spatial","set_scale",0xcc4d8204,"phoenix.Spatial.set_scale","phoenix/Transform.hx",676,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_31767c605e1e317f_695__pos_change,"phoenix.Spatial","_pos_change",0xe8244bf1,"phoenix.Spatial._pos_change","phoenix/Transform.hx",695,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_31767c605e1e317f_697__scale_change,"phoenix.Spatial","_scale_change",0xaf1def3b,"phoenix.Spatial._scale_change","phoenix/Transform.hx",697,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_31767c605e1e317f_699__rotation_change,"phoenix.Spatial","_rotation_change",0x09a321db,"phoenix.Spatial._rotation_change","phoenix/Transform.hx",699,0x44da8ab2)
namespace phoenix{

void Spatial_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_31767c605e1e317f_547_new)
HXLINE( 563)		this->_setup = true;
HXLINE( 557)		this->auto_decompose = false;
HXLINE( 556)		this->ignore_listeners = false;
HXLINE( 567)		{
HXLINE( 567)			 ::phoenix::Matrix _m =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXDLIN( 567)			this->matrix = _m;
HXDLIN( 567)			if (hx::IsNotNull( _m )) {
HXLINE( 567)				 ::phoenix::Matrix _this = this->matrix;
HXDLIN( 567)				int i = (int)0;
HXDLIN( 567)				while((i < (int)16)){
HXLINE( 567)					{
HXLINE( 567)						 ::snow::api::buffers::ArrayBufferView this1 = _this->_float32array;
HXDLIN( 567)						{
HXLINE( 567)							int this2 = this1->byteOffset;
HXDLIN( 567)							::Array< unsigned char > this11 = this1->buffer;
HXDLIN( 567)							::__hxcpp_memory_set_float(this11,(this2 + (i * (int)4)),_this->elements->__get(i));
            						}
            					}
HXDLIN( 567)					i = (i + (int)1);
            				}
HXDLIN( 567)				this->floats = _this->_float32array;
            			}
            		}
HXLINE( 568)		 ::phoenix::Matrix _this1 = this->matrix;
HXDLIN( 568)		int i1 = (int)0;
HXDLIN( 568)		while((i1 < (int)16)){
HXLINE( 568)			{
HXLINE( 568)				 ::snow::api::buffers::ArrayBufferView this3 = _this1->_float32array;
HXDLIN( 568)				{
HXLINE( 568)					int this4 = this3->byteOffset;
HXDLIN( 568)					::Array< unsigned char > this31 = this3->buffer;
HXDLIN( 568)					::__hxcpp_memory_set_float(this31,(this4 + (i1 * (int)4)),_this1->elements->__get(i1));
            				}
            			}
HXDLIN( 568)			i1 = (i1 + (int)1);
            		}
HXDLIN( 568)		this->floats = _this1->_float32array;
HXLINE( 570)		{
HXLINE( 570)			 ::phoenix::Vector _p =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN( 570)			this->pos = _p;
HXDLIN( 570)			if (hx::IsNotNull( _p )) {
HXLINE( 570)				{
HXLINE( 570)					 ::phoenix::Vector _v = this->pos;
HXDLIN( 570)					 ::Dynamic listener = this->_pos_change_dyn();
HXDLIN( 570)					_v->listen_x = listener;
HXDLIN( 570)					_v->listen_y = listener;
HXDLIN( 570)					_v->listen_z = listener;
            				}
HXDLIN( 570)				{
HXLINE( 570)					bool _hx_tmp;
HXDLIN( 570)					if (hx::IsNotNull( this->pos_changed )) {
HXLINE( 570)						_hx_tmp = !(this->ignore_listeners);
            					}
            					else {
HXLINE( 570)						_hx_tmp = false;
            					}
HXDLIN( 570)					if (_hx_tmp) {
HXLINE( 570)						this->pos_changed(this->pos);
            					}
            				}
            			}
            		}
HXLINE( 571)		{
HXLINE( 571)			 ::phoenix::Quaternion _r =  ::phoenix::Quaternion_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN( 571)			this->rotation = _r;
HXDLIN( 571)			if (hx::IsNotNull( _r )) {
HXLINE( 571)				{
HXLINE( 571)					 ::phoenix::Quaternion _q = this->rotation;
HXDLIN( 571)					 ::Dynamic listener1 = this->_rotation_change_dyn();
HXDLIN( 571)					_q->listen_x = listener1;
HXDLIN( 571)					_q->listen_y = listener1;
HXDLIN( 571)					_q->listen_z = listener1;
HXDLIN( 571)					_q->listen_w = listener1;
            				}
HXDLIN( 571)				{
HXLINE( 571)					bool _hx_tmp1;
HXDLIN( 571)					if (hx::IsNotNull( this->rotation_changed )) {
HXLINE( 571)						_hx_tmp1 = !(this->ignore_listeners);
            					}
            					else {
HXLINE( 571)						_hx_tmp1 = false;
            					}
HXDLIN( 571)					if (_hx_tmp1) {
HXLINE( 571)						this->rotation_changed(this->rotation);
            					}
            				}
            			}
            		}
HXLINE( 572)		{
HXLINE( 572)			 ::phoenix::Vector _s =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)1,(int)1,(int)1,null());
HXDLIN( 572)			this->scale = _s;
HXDLIN( 572)			if (hx::IsNotNull( _s )) {
HXLINE( 572)				{
HXLINE( 572)					 ::phoenix::Vector _v1 = this->scale;
HXDLIN( 572)					 ::Dynamic listener2 = this->_scale_change_dyn();
HXDLIN( 572)					_v1->listen_x = listener2;
HXDLIN( 572)					_v1->listen_y = listener2;
HXDLIN( 572)					_v1->listen_z = listener2;
            				}
HXDLIN( 572)				{
HXLINE( 572)					bool _hx_tmp2;
HXDLIN( 572)					if (hx::IsNotNull( this->scale_changed )) {
HXLINE( 572)						_hx_tmp2 = !(this->ignore_listeners);
            					}
            					else {
HXLINE( 572)						_hx_tmp2 = false;
            					}
HXDLIN( 572)					if (_hx_tmp2) {
HXLINE( 572)						this->scale_changed(this->scale);
            					}
            				}
            			}
            		}
HXLINE( 574)		this->_setup = false;
            	}

Dynamic Spatial_obj::__CreateEmpty() { return new Spatial_obj; }

void *Spatial_obj::_hx_vtable = 0;

Dynamic Spatial_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Spatial_obj > _hx_result = new Spatial_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Spatial_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x022f6c75;
}

void Spatial_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_31767c605e1e317f_578_destroy)
HXLINE( 580)		this->matrix = null();
HXLINE( 581)		this->floats = null();
HXLINE( 582)		this->pos = null();
HXLINE( 583)		this->rotation = null();
HXLINE( 584)		this->scale = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Spatial_obj,destroy,(void))

 ::phoenix::Spatial Spatial_obj::decompose(hx::Null< bool >  __o__force){
bool _force = __o__force.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_31767c605e1e317f_591_decompose)
HXLINE( 593)		bool _hx_tmp;
HXDLIN( 593)		if (!(this->auto_decompose)) {
HXLINE( 593)			_hx_tmp = _force;
            		}
            		else {
HXLINE( 593)			_hx_tmp = true;
            		}
HXDLIN( 593)		if (_hx_tmp) {
HXLINE( 595)			 ::phoenix::Matrix _this = this->matrix;
HXDLIN( 595)			 ::phoenix::Vector _position = null();
HXDLIN( 595)			 ::phoenix::Quaternion _quaternion = null();
HXDLIN( 595)			 ::phoenix::Vector _scale = null();
HXDLIN( 595)			::Array< Float > te = _this->elements;
HXDLIN( 595)			 ::phoenix::Matrix matrix =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXDLIN( 595)			Float _ax_x = te->__get((int)0);
HXDLIN( 595)			Float _ax_y = te->__get((int)1);
HXDLIN( 595)			Float _ax_z = te->__get((int)2);
HXDLIN( 595)			Float _ay_x = te->__get((int)4);
HXDLIN( 595)			Float _ay_y = te->__get((int)5);
HXDLIN( 595)			Float _ay_z = te->__get((int)6);
HXDLIN( 595)			Float _az_x = te->__get((int)8);
HXDLIN( 595)			Float _az_y = te->__get((int)9);
HXDLIN( 595)			Float _az_z = te->__get((int)10);
HXDLIN( 595)			Float _ax_length = ::Math_obj::sqrt((((_ax_x * _ax_x) + (_ax_y * _ax_y)) + (_ax_z * _ax_z)));
HXDLIN( 595)			Float _ay_length = ::Math_obj::sqrt((((_ay_x * _ay_x) + (_ay_y * _ay_y)) + (_ay_z * _ay_z)));
HXDLIN( 595)			Float _az_length = ::Math_obj::sqrt((((_az_x * _az_x) + (_az_y * _az_y)) + (_az_z * _az_z)));
HXDLIN( 595)			if (hx::IsNull( _quaternion )) {
HXLINE( 595)				_quaternion =  ::phoenix::Quaternion_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXDLIN( 595)			if (hx::IsNull( _position )) {
HXLINE( 595)				_position =  ::phoenix::Vector_obj::__alloc( HX_CTX ,te->__get((int)12),te->__get((int)13),te->__get((int)14),null());
            			}
            			else {
HXLINE( 595)				{
HXLINE( 595)					Float _x = te->__get((int)12);
HXDLIN( 595)					_position->x = _x;
HXDLIN( 595)					if (!(_position->_construct)) {
HXLINE( 595)						bool _hx_tmp1;
HXDLIN( 595)						if (hx::IsNotNull( _position->listen_x )) {
HXLINE( 595)							_hx_tmp1 = !(_position->ignore_listeners);
            						}
            						else {
HXLINE( 595)							_hx_tmp1 = false;
            						}
HXDLIN( 595)						if (_hx_tmp1) {
HXLINE( 595)							_position->listen_x(_x);
            						}
            					}
            				}
HXDLIN( 595)				{
HXLINE( 595)					Float _y = te->__get((int)13);
HXDLIN( 595)					_position->y = _y;
HXDLIN( 595)					if (!(_position->_construct)) {
HXLINE( 595)						bool _hx_tmp2;
HXDLIN( 595)						if (hx::IsNotNull( _position->listen_y )) {
HXLINE( 595)							_hx_tmp2 = !(_position->ignore_listeners);
            						}
            						else {
HXLINE( 595)							_hx_tmp2 = false;
            						}
HXDLIN( 595)						if (_hx_tmp2) {
HXLINE( 595)							_position->listen_y(_y);
            						}
            					}
            				}
HXDLIN( 595)				{
HXLINE( 595)					Float _z = te->__get((int)14);
HXDLIN( 595)					_position->z = _z;
HXDLIN( 595)					if (!(_position->_construct)) {
HXLINE( 595)						bool _hx_tmp3;
HXDLIN( 595)						if (hx::IsNotNull( _position->listen_z )) {
HXLINE( 595)							_hx_tmp3 = !(_position->ignore_listeners);
            						}
            						else {
HXLINE( 595)							_hx_tmp3 = false;
            						}
HXDLIN( 595)						if (_hx_tmp3) {
HXLINE( 595)							_position->listen_z(_z);
            						}
            					}
            				}
            			}
HXDLIN( 595)			if (hx::IsNull( _scale )) {
HXLINE( 595)				_scale =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_ax_length,_ay_length,_az_length,null());
            			}
            			else {
HXLINE( 595)				{
HXLINE( 595)					_scale->x = _ax_length;
HXDLIN( 595)					if (!(_scale->_construct)) {
HXLINE( 595)						bool _hx_tmp4;
HXDLIN( 595)						if (hx::IsNotNull( _scale->listen_x )) {
HXLINE( 595)							_hx_tmp4 = !(_scale->ignore_listeners);
            						}
            						else {
HXLINE( 595)							_hx_tmp4 = false;
            						}
HXDLIN( 595)						if (_hx_tmp4) {
HXLINE( 595)							_scale->listen_x(_ax_length);
            						}
            					}
            				}
HXDLIN( 595)				{
HXLINE( 595)					_scale->y = _ay_length;
HXDLIN( 595)					if (!(_scale->_construct)) {
HXLINE( 595)						bool _hx_tmp5;
HXDLIN( 595)						if (hx::IsNotNull( _scale->listen_y )) {
HXLINE( 595)							_hx_tmp5 = !(_scale->ignore_listeners);
            						}
            						else {
HXLINE( 595)							_hx_tmp5 = false;
            						}
HXDLIN( 595)						if (_hx_tmp5) {
HXLINE( 595)							_scale->listen_y(_ay_length);
            						}
            					}
            				}
HXDLIN( 595)				{
HXLINE( 595)					_scale->z = _az_length;
HXDLIN( 595)					if (!(_scale->_construct)) {
HXLINE( 595)						bool _hx_tmp6;
HXDLIN( 595)						if (hx::IsNotNull( _scale->listen_z )) {
HXLINE( 595)							_hx_tmp6 = !(_scale->ignore_listeners);
            						}
            						else {
HXLINE( 595)							_hx_tmp6 = false;
            						}
HXDLIN( 595)						if (_hx_tmp6) {
HXLINE( 595)							_scale->listen_z(_az_length);
            						}
            					}
            				}
            			}
HXDLIN( 595)			matrix->elements = _this->elements->concat(::Array_obj< Float >::__new(0));
HXDLIN( 595)			::Array< Float > me = matrix->elements;
HXDLIN( 595)			::Array< Float > me1 = me;
HXDLIN( 595)			int _hx_tmp7 = (int)0;
HXDLIN( 595)			me1[_hx_tmp7] = ((Float)me1->__get(_hx_tmp7) / (Float)_ax_length);
HXDLIN( 595)			::Array< Float > me2 = me;
HXDLIN( 595)			int _hx_tmp8 = (int)1;
HXDLIN( 595)			me2[_hx_tmp8] = ((Float)me2->__get(_hx_tmp8) / (Float)_ax_length);
HXDLIN( 595)			::Array< Float > me3 = me;
HXDLIN( 595)			int _hx_tmp9 = (int)2;
HXDLIN( 595)			me3[_hx_tmp9] = ((Float)me3->__get(_hx_tmp9) / (Float)_ax_length);
HXDLIN( 595)			::Array< Float > me4 = me;
HXDLIN( 595)			int _hx_tmp10 = (int)4;
HXDLIN( 595)			me4[_hx_tmp10] = ((Float)me4->__get(_hx_tmp10) / (Float)_ay_length);
HXDLIN( 595)			::Array< Float > me5 = me;
HXDLIN( 595)			int _hx_tmp11 = (int)5;
HXDLIN( 595)			me5[_hx_tmp11] = ((Float)me5->__get(_hx_tmp11) / (Float)_ay_length);
HXDLIN( 595)			::Array< Float > me6 = me;
HXDLIN( 595)			int _hx_tmp12 = (int)6;
HXDLIN( 595)			me6[_hx_tmp12] = ((Float)me6->__get(_hx_tmp12) / (Float)_ay_length);
HXDLIN( 595)			::Array< Float > me7 = me;
HXDLIN( 595)			int _hx_tmp13 = (int)8;
HXDLIN( 595)			me7[_hx_tmp13] = ((Float)me7->__get(_hx_tmp13) / (Float)_az_length);
HXDLIN( 595)			::Array< Float > me8 = me;
HXDLIN( 595)			int _hx_tmp14 = (int)9;
HXDLIN( 595)			me8[_hx_tmp14] = ((Float)me8->__get(_hx_tmp14) / (Float)_az_length);
HXDLIN( 595)			::Array< Float > me9 = me;
HXDLIN( 595)			int _hx_tmp15 = (int)10;
HXDLIN( 595)			me9[_hx_tmp15] = ((Float)me9->__get(_hx_tmp15) / (Float)_az_length);
HXDLIN( 595)			_quaternion->setFromRotationMatrix(matrix);
HXDLIN( 595)			if (hx::IsNull( _this->_transform )) {
HXLINE( 595)				_this->_transform =  ::phoenix::MatrixTransform_obj::__alloc( HX_CTX ,_position,_quaternion,_scale);
            			}
            			else {
HXLINE( 595)				_this->_transform->pos = _position;
HXDLIN( 595)				_this->_transform->rotation = _quaternion;
HXDLIN( 595)				_this->_transform->scale = _scale;
            			}
HXDLIN( 595)			 ::phoenix::MatrixTransform _transform = _this->_transform;
HXLINE( 597)			{
HXLINE( 597)				 ::phoenix::Vector _p = _transform->pos;
HXDLIN( 597)				this->pos = _p;
HXDLIN( 597)				if (hx::IsNotNull( _p )) {
HXLINE( 597)					{
HXLINE( 597)						 ::phoenix::Vector _v = this->pos;
HXDLIN( 597)						 ::Dynamic listener = this->_pos_change_dyn();
HXDLIN( 597)						_v->listen_x = listener;
HXDLIN( 597)						_v->listen_y = listener;
HXDLIN( 597)						_v->listen_z = listener;
            					}
HXDLIN( 597)					{
HXLINE( 597)						bool _hx_tmp16;
HXDLIN( 597)						if (hx::IsNotNull( this->pos_changed )) {
HXLINE( 597)							_hx_tmp16 = !(this->ignore_listeners);
            						}
            						else {
HXLINE( 597)							_hx_tmp16 = false;
            						}
HXDLIN( 597)						if (_hx_tmp16) {
HXLINE( 597)							this->pos_changed(this->pos);
            						}
            					}
            				}
            			}
HXLINE( 598)			{
HXLINE( 598)				 ::phoenix::Quaternion _r = _transform->rotation;
HXDLIN( 598)				this->rotation = _r;
HXDLIN( 598)				if (hx::IsNotNull( _r )) {
HXLINE( 598)					{
HXLINE( 598)						 ::phoenix::Quaternion _q = this->rotation;
HXDLIN( 598)						 ::Dynamic listener1 = this->_rotation_change_dyn();
HXDLIN( 598)						_q->listen_x = listener1;
HXDLIN( 598)						_q->listen_y = listener1;
HXDLIN( 598)						_q->listen_z = listener1;
HXDLIN( 598)						_q->listen_w = listener1;
            					}
HXDLIN( 598)					{
HXLINE( 598)						bool _hx_tmp17;
HXDLIN( 598)						if (hx::IsNotNull( this->rotation_changed )) {
HXLINE( 598)							_hx_tmp17 = !(this->ignore_listeners);
            						}
            						else {
HXLINE( 598)							_hx_tmp17 = false;
            						}
HXDLIN( 598)						if (_hx_tmp17) {
HXLINE( 598)							this->rotation_changed(this->rotation);
            						}
            					}
            				}
            			}
HXLINE( 599)			{
HXLINE( 599)				 ::phoenix::Vector _s = _transform->scale;
HXDLIN( 599)				this->scale = _s;
HXDLIN( 599)				if (hx::IsNotNull( _s )) {
HXLINE( 599)					{
HXLINE( 599)						 ::phoenix::Vector _v1 = this->scale;
HXDLIN( 599)						 ::Dynamic listener2 = this->_scale_change_dyn();
HXDLIN( 599)						_v1->listen_x = listener2;
HXDLIN( 599)						_v1->listen_y = listener2;
HXDLIN( 599)						_v1->listen_z = listener2;
            					}
HXDLIN( 599)					{
HXLINE( 599)						bool _hx_tmp18;
HXDLIN( 599)						if (hx::IsNotNull( this->scale_changed )) {
HXLINE( 599)							_hx_tmp18 = !(this->ignore_listeners);
            						}
            						else {
HXLINE( 599)							_hx_tmp18 = false;
            						}
HXDLIN( 599)						if (_hx_tmp18) {
HXLINE( 599)							this->scale_changed(this->scale);
            						}
            					}
            				}
            			}
            		}
HXLINE( 603)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spatial_obj,decompose,return )

 ::phoenix::Matrix Spatial_obj::get_matrix(){
            	HX_STACKFRAME(&_hx_pos_31767c605e1e317f_609_get_matrix)
HXDLIN( 609)		return this->matrix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Spatial_obj,get_matrix,return )

 ::phoenix::Matrix Spatial_obj::set_matrix( ::phoenix::Matrix _m){
            	HX_STACKFRAME(&_hx_pos_31767c605e1e317f_613_set_matrix)
HXLINE( 615)		this->matrix = _m;
HXLINE( 618)		if (hx::IsNotNull( _m )) {
HXLINE( 619)			 ::phoenix::Matrix _this = this->matrix;
HXDLIN( 619)			int i = (int)0;
HXDLIN( 619)			while((i < (int)16)){
HXLINE( 619)				{
HXLINE( 619)					 ::snow::api::buffers::ArrayBufferView this1 = _this->_float32array;
HXDLIN( 619)					{
HXLINE( 619)						int this2 = this1->byteOffset;
HXDLIN( 619)						::__hxcpp_memory_set_float(this1->buffer,(this2 + (i * (int)4)),_this->elements->__get(i));
            					}
            				}
HXDLIN( 619)				i = (i + (int)1);
            			}
HXDLIN( 619)			this->floats = _this->_float32array;
            		}
HXLINE( 622)		return this->matrix;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spatial_obj,set_matrix,return )

void Spatial_obj::propagate_pos( ::phoenix::Vector _p){
            	HX_STACKFRAME(&_hx_pos_31767c605e1e317f_627_propagate_pos)
HXDLIN( 627)		bool _hx_tmp;
HXDLIN( 627)		if (hx::IsNotNull( this->pos_changed )) {
HXDLIN( 627)			_hx_tmp = !(this->ignore_listeners);
            		}
            		else {
HXDLIN( 627)			_hx_tmp = false;
            		}
HXDLIN( 627)		if (_hx_tmp) {
HXLINE( 628)			this->pos_changed(_p);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spatial_obj,propagate_pos,(void))

void Spatial_obj::propagate_rotation( ::phoenix::Quaternion _r){
            	HX_STACKFRAME(&_hx_pos_31767c605e1e317f_633_propagate_rotation)
HXDLIN( 633)		bool _hx_tmp;
HXDLIN( 633)		if (hx::IsNotNull( this->rotation_changed )) {
HXDLIN( 633)			_hx_tmp = !(this->ignore_listeners);
            		}
            		else {
HXDLIN( 633)			_hx_tmp = false;
            		}
HXDLIN( 633)		if (_hx_tmp) {
HXLINE( 634)			this->rotation_changed(_r);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spatial_obj,propagate_rotation,(void))

void Spatial_obj::propagate_scale( ::phoenix::Vector _s){
            	HX_STACKFRAME(&_hx_pos_31767c605e1e317f_639_propagate_scale)
HXDLIN( 639)		bool _hx_tmp;
HXDLIN( 639)		if (hx::IsNotNull( this->scale_changed )) {
HXDLIN( 639)			_hx_tmp = !(this->ignore_listeners);
            		}
            		else {
HXDLIN( 639)			_hx_tmp = false;
            		}
HXDLIN( 639)		if (_hx_tmp) {
HXLINE( 640)			this->scale_changed(_s);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spatial_obj,propagate_scale,(void))

 ::phoenix::Vector Spatial_obj::set_pos( ::phoenix::Vector _p){
            	HX_STACKFRAME(&_hx_pos_31767c605e1e317f_644_set_pos)
HXLINE( 646)		this->pos = _p;
HXLINE( 648)		if (hx::IsNotNull( _p )) {
HXLINE( 650)			{
HXLINE( 650)				 ::phoenix::Vector _v = this->pos;
HXDLIN( 650)				 ::Dynamic listener = this->_pos_change_dyn();
HXDLIN( 650)				_v->listen_x = listener;
HXDLIN( 650)				_v->listen_y = listener;
HXDLIN( 650)				_v->listen_z = listener;
            			}
HXLINE( 652)			{
HXLINE( 652)				bool _hx_tmp;
HXDLIN( 652)				if (hx::IsNotNull( this->pos_changed )) {
HXLINE( 652)					_hx_tmp = !(this->ignore_listeners);
            				}
            				else {
HXLINE( 652)					_hx_tmp = false;
            				}
HXDLIN( 652)				if (_hx_tmp) {
HXLINE( 652)					this->pos_changed(this->pos);
            				}
            			}
            		}
HXLINE( 656)		return this->pos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spatial_obj,set_pos,return )

 ::phoenix::Quaternion Spatial_obj::set_rotation( ::phoenix::Quaternion _r){
            	HX_STACKFRAME(&_hx_pos_31767c605e1e317f_660_set_rotation)
HXLINE( 662)		this->rotation = _r;
HXLINE( 664)		if (hx::IsNotNull( _r )) {
HXLINE( 666)			{
HXLINE( 666)				 ::phoenix::Quaternion _q = this->rotation;
HXDLIN( 666)				 ::Dynamic listener = this->_rotation_change_dyn();
HXDLIN( 666)				_q->listen_x = listener;
HXDLIN( 666)				_q->listen_y = listener;
HXDLIN( 666)				_q->listen_z = listener;
HXDLIN( 666)				_q->listen_w = listener;
            			}
HXLINE( 668)			{
HXLINE( 668)				bool _hx_tmp;
HXDLIN( 668)				if (hx::IsNotNull( this->rotation_changed )) {
HXLINE( 668)					_hx_tmp = !(this->ignore_listeners);
            				}
            				else {
HXLINE( 668)					_hx_tmp = false;
            				}
HXDLIN( 668)				if (_hx_tmp) {
HXLINE( 668)					this->rotation_changed(this->rotation);
            				}
            			}
            		}
HXLINE( 672)		return this->rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spatial_obj,set_rotation,return )

 ::phoenix::Vector Spatial_obj::set_scale( ::phoenix::Vector _s){
            	HX_STACKFRAME(&_hx_pos_31767c605e1e317f_676_set_scale)
HXLINE( 678)		this->scale = _s;
HXLINE( 680)		if (hx::IsNotNull( _s )) {
HXLINE( 682)			{
HXLINE( 682)				 ::phoenix::Vector _v = this->scale;
HXDLIN( 682)				 ::Dynamic listener = this->_scale_change_dyn();
HXDLIN( 682)				_v->listen_x = listener;
HXDLIN( 682)				_v->listen_y = listener;
HXDLIN( 682)				_v->listen_z = listener;
            			}
HXLINE( 684)			{
HXLINE( 684)				bool _hx_tmp;
HXDLIN( 684)				if (hx::IsNotNull( this->scale_changed )) {
HXLINE( 684)					_hx_tmp = !(this->ignore_listeners);
            				}
            				else {
HXLINE( 684)					_hx_tmp = false;
            				}
HXDLIN( 684)				if (_hx_tmp) {
HXLINE( 684)					this->scale_changed(this->scale);
            				}
            			}
            		}
HXLINE( 688)		return this->scale;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spatial_obj,set_scale,return )

void Spatial_obj::_pos_change(Float _v){
            	HX_STACKFRAME(&_hx_pos_31767c605e1e317f_695__pos_change)
HXDLIN( 695)		this->set_pos(this->pos);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spatial_obj,_pos_change,(void))

void Spatial_obj::_scale_change(Float _v){
            	HX_STACKFRAME(&_hx_pos_31767c605e1e317f_697__scale_change)
HXDLIN( 697)		this->set_scale(this->scale);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spatial_obj,_scale_change,(void))

void Spatial_obj::_rotation_change(Float _v){
            	HX_STACKFRAME(&_hx_pos_31767c605e1e317f_699__rotation_change)
HXDLIN( 699)		this->set_rotation(this->rotation);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Spatial_obj,_rotation_change,(void))


hx::ObjectPtr< Spatial_obj > Spatial_obj::__new() {
	hx::ObjectPtr< Spatial_obj > __this = new Spatial_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Spatial_obj > Spatial_obj::__alloc(hx::Ctx *_hx_ctx) {
	Spatial_obj *__this = (Spatial_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Spatial_obj), true, "phoenix.Spatial"));
	*(void **)__this = Spatial_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Spatial_obj::Spatial_obj()
{
}

void Spatial_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Spatial);
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(rotation,"rotation");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_MEMBER_NAME(floats,"floats");
	HX_MARK_MEMBER_NAME(ignore_listeners,"ignore_listeners");
	HX_MARK_MEMBER_NAME(auto_decompose,"auto_decompose");
	HX_MARK_MEMBER_NAME(pos_changed,"pos_changed");
	HX_MARK_MEMBER_NAME(rotation_changed,"rotation_changed");
	HX_MARK_MEMBER_NAME(scale_changed,"scale_changed");
	HX_MARK_MEMBER_NAME(_setup,"_setup");
	HX_MARK_END_CLASS();
}

void Spatial_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(rotation,"rotation");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
	HX_VISIT_MEMBER_NAME(floats,"floats");
	HX_VISIT_MEMBER_NAME(ignore_listeners,"ignore_listeners");
	HX_VISIT_MEMBER_NAME(auto_decompose,"auto_decompose");
	HX_VISIT_MEMBER_NAME(pos_changed,"pos_changed");
	HX_VISIT_MEMBER_NAME(rotation_changed,"rotation_changed");
	HX_VISIT_MEMBER_NAME(scale_changed,"scale_changed");
	HX_VISIT_MEMBER_NAME(_setup,"_setup");
}

hx::Val Spatial_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { return hx::Val( inCallProp == hx::paccAlways ? get_matrix() : matrix ); }
		if (HX_FIELD_EQ(inName,"floats") ) { return hx::Val( floats ); }
		if (HX_FIELD_EQ(inName,"_setup") ) { return hx::Val( _setup ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pos") ) { return hx::Val( set_pos_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { return hx::Val( rotation ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scale") ) { return hx::Val( set_scale_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_matrix") ) { return hx::Val( get_matrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_matrix") ) { return hx::Val( set_matrix_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pos_changed") ) { return hx::Val( pos_changed ); }
		if (HX_FIELD_EQ(inName,"_pos_change") ) { return hx::Val( _pos_change_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"scale_changed") ) { return hx::Val( scale_changed ); }
		if (HX_FIELD_EQ(inName,"propagate_pos") ) { return hx::Val( propagate_pos_dyn() ); }
		if (HX_FIELD_EQ(inName,"_scale_change") ) { return hx::Val( _scale_change_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"auto_decompose") ) { return hx::Val( auto_decompose ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"propagate_scale") ) { return hx::Val( propagate_scale_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"ignore_listeners") ) { return hx::Val( ignore_listeners ); }
		if (HX_FIELD_EQ(inName,"rotation_changed") ) { return hx::Val( rotation_changed ); }
		if (HX_FIELD_EQ(inName,"_rotation_change") ) { return hx::Val( _rotation_change_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"propagate_rotation") ) { return hx::Val( propagate_rotation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Spatial_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pos(inValue.Cast<  ::phoenix::Vector >()) );pos=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scale(inValue.Cast<  ::phoenix::Vector >()) );scale=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_matrix(inValue.Cast<  ::phoenix::Matrix >()) );matrix=inValue.Cast<  ::phoenix::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"floats") ) { floats=inValue.Cast<  ::snow::api::buffers::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_setup") ) { _setup=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation(inValue.Cast<  ::phoenix::Quaternion >()) );rotation=inValue.Cast<  ::phoenix::Quaternion >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pos_changed") ) { pos_changed=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"scale_changed") ) { scale_changed=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"auto_decompose") ) { auto_decompose=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"ignore_listeners") ) { ignore_listeners=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rotation_changed") ) { rotation_changed=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Spatial_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"));
	outFields->push(HX_HCSTRING("floats","\x57","\x23","\x56","\x41"));
	outFields->push(HX_HCSTRING("ignore_listeners","\xd2","\x64","\x1e","\xf7"));
	outFields->push(HX_HCSTRING("auto_decompose","\xa1","\x5f","\x1e","\x26"));
	outFields->push(HX_HCSTRING("_setup","\xbe","\xf5","\x16","\x76"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Spatial_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Spatial_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{hx::fsObject /*::phoenix::Quaternion*/ ,(int)offsetof(Spatial_obj,rotation),HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Spatial_obj,scale),HX_HCSTRING("scale","\x8a","\xce","\xce","\x78")},
	{hx::fsObject /*::phoenix::Matrix*/ ,(int)offsetof(Spatial_obj,matrix),HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb")},
	{hx::fsObject /*::snow::api::buffers::ArrayBufferView*/ ,(int)offsetof(Spatial_obj,floats),HX_HCSTRING("floats","\x57","\x23","\x56","\x41")},
	{hx::fsBool,(int)offsetof(Spatial_obj,ignore_listeners),HX_HCSTRING("ignore_listeners","\xd2","\x64","\x1e","\xf7")},
	{hx::fsBool,(int)offsetof(Spatial_obj,auto_decompose),HX_HCSTRING("auto_decompose","\xa1","\x5f","\x1e","\x26")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Spatial_obj,pos_changed),HX_HCSTRING("pos_changed","\x09","\x1c","\x90","\x8a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Spatial_obj,rotation_changed),HX_HCSTRING("rotation_changed","\xb3","\xb5","\x87","\xa1")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Spatial_obj,scale_changed),HX_HCSTRING("scale_changed","\xff","\x72","\xf4","\xf5")},
	{hx::fsBool,(int)offsetof(Spatial_obj,_setup),HX_HCSTRING("_setup","\xbe","\xf5","\x16","\x76")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Spatial_obj_sStaticStorageInfo = 0;
#endif

static ::String Spatial_obj_sMemberFields[] = {
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"),
	HX_HCSTRING("floats","\x57","\x23","\x56","\x41"),
	HX_HCSTRING("ignore_listeners","\xd2","\x64","\x1e","\xf7"),
	HX_HCSTRING("auto_decompose","\xa1","\x5f","\x1e","\x26"),
	HX_HCSTRING("pos_changed","\x09","\x1c","\x90","\x8a"),
	HX_HCSTRING("rotation_changed","\xb3","\xb5","\x87","\xa1"),
	HX_HCSTRING("scale_changed","\xff","\x72","\xf4","\xf5"),
	HX_HCSTRING("_setup","\xbe","\xf5","\x16","\x76"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("decompose","\xb1","\xc3","\xa7","\x7a"),
	HX_HCSTRING("get_matrix","\x0a","\xa6","\x4f","\xac"),
	HX_HCSTRING("set_matrix","\x7e","\x44","\xcd","\xaf"),
	HX_HCSTRING("propagate_pos","\x7e","\x73","\xe0","\x46"),
	HX_HCSTRING("propagate_rotation","\x14","\x77","\x31","\x38"),
	HX_HCSTRING("propagate_scale","\xf4","\xb2","\xba","\xc8"),
	HX_HCSTRING("set_pos","\x37","\xb7","\xcb","\x19"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("set_scale","\xed","\x16","\xc9","\x9f"),
	HX_HCSTRING("_pos_change","\x1a","\xad","\x5d","\x41"),
	HX_HCSTRING("_scale_change","\xa4","\xac","\x50","\xd2"),
	HX_HCSTRING("_rotation_change","\x12","\xec","\x6b","\xa4"),
	::String(null()) };

static void Spatial_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Spatial_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Spatial_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Spatial_obj::__mClass,"__mClass");
};

#endif

hx::Class Spatial_obj::__mClass;

void Spatial_obj::__register()
{
	hx::Object *dummy = new Spatial_obj;
	Spatial_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.Spatial","\xc5","\x58","\x1c","\x44");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Spatial_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Spatial_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Spatial_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Spatial_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Spatial_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Spatial_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
