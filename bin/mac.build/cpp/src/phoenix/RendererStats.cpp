// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_phoenix_RendererStats
#include <phoenix/RendererStats.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bead5b303057ff3e_445_new,"phoenix.RendererStats","new",0x1cd0e80f,"phoenix.RendererStats.new","phoenix/Renderer.hx",445,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_bead5b303057ff3e_456_reset,"phoenix.RendererStats","reset",0xee7deb3e,"phoenix.RendererStats.reset","phoenix/Renderer.hx",456,0x3d4c7b7b)
HX_LOCAL_STACK_FRAME(_hx_pos_bead5b303057ff3e_466_toString,"phoenix.RendererStats","toString",0xe4927e9d,"phoenix.RendererStats.toString","phoenix/Renderer.hx",466,0x3d4c7b7b)
namespace phoenix{

void RendererStats_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_bead5b303057ff3e_445_new)
HXLINE( 454)		this->vert_count = (int)0;
HXLINE( 453)		this->draw_calls = (int)0;
HXLINE( 452)		this->visible_count = (int)0;
HXLINE( 451)		this->static_batched_count = (int)0;
HXLINE( 450)		this->dynamic_batched_count = (int)0;
HXLINE( 449)		this->geometry_count = (int)0;
HXLINE( 448)		this->batchers = (int)0;
            	}

Dynamic RendererStats_obj::__CreateEmpty() { return new RendererStats_obj; }

void *RendererStats_obj::_hx_vtable = 0;

Dynamic RendererStats_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RendererStats_obj > _hx_result = new RendererStats_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RendererStats_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x116a6e79;
}

void RendererStats_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_bead5b303057ff3e_456_reset)
HXLINE( 457)		this->geometry_count = (int)0;
HXLINE( 458)		this->dynamic_batched_count = (int)0;
HXLINE( 459)		this->static_batched_count = (int)0;
HXLINE( 460)		this->visible_count = (int)0;
HXLINE( 461)		this->draw_calls = (int)0;
HXLINE( 462)		this->vert_count = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RendererStats_obj,reset,(void))

::String RendererStats_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_bead5b303057ff3e_466_toString)
HXDLIN( 466)		return ((((((((((((((((((((HX_("Renderer Statistics\n",2a,3d,5f,b8) + HX_("\tbatcher count : ",f9,33,1a,9c)) + this->batchers) + HX_("\n",0a,00,00,00)) + HX_("\ttotal geometry : ",cf,b6,d8,89)) + this->geometry_count) + HX_("\n",0a,00,00,00)) + HX_("\tvisible geometry : ",3d,8c,4c,2a)) + this->visible_count) + HX_("\n",0a,00,00,00)) + HX_("\tdynamic batched geometry : ",c3,d0,13,9c)) + this->dynamic_batched_count) + HX_("\n",0a,00,00,00)) + HX_("\tstatic batched geometry : ",24,4e,71,28)) + this->static_batched_count) + HX_("\n",0a,00,00,00)) + HX_("\ttotal draw calls : ",a8,2f,eb,81)) + this->draw_calls) + HX_("\n",0a,00,00,00)) + HX_("\ttotal vertices : ",e8,3f,2e,7a)) + this->vert_count);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RendererStats_obj,toString,return )


RendererStats_obj::RendererStats_obj()
{
}

hx::Val RendererStats_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"batchers") ) { return hx::Val( batchers ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"draw_calls") ) { return hx::Val( draw_calls ); }
		if (HX_FIELD_EQ(inName,"vert_count") ) { return hx::Val( vert_count ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visible_count") ) { return hx::Val( visible_count ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"geometry_count") ) { return hx::Val( geometry_count ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"static_batched_count") ) { return hx::Val( static_batched_count ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"dynamic_batched_count") ) { return hx::Val( dynamic_batched_count ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RendererStats_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"batchers") ) { batchers=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"draw_calls") ) { draw_calls=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vert_count") ) { vert_count=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visible_count") ) { visible_count=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"geometry_count") ) { geometry_count=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"static_batched_count") ) { static_batched_count=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"dynamic_batched_count") ) { dynamic_batched_count=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RendererStats_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("batchers","\xec","\x2f","\x0e","\x4e"));
	outFields->push(HX_HCSTRING("geometry_count","\x42","\xa0","\x8d","\x12"));
	outFields->push(HX_HCSTRING("dynamic_batched_count","\x69","\x37","\xa8","\x66"));
	outFields->push(HX_HCSTRING("static_batched_count","\xd8","\x88","\x51","\x4c"));
	outFields->push(HX_HCSTRING("visible_count","\x02","\xe6","\xa7","\x70"));
	outFields->push(HX_HCSTRING("draw_calls","\x5a","\xc0","\x31","\x4a"));
	outFields->push(HX_HCSTRING("vert_count","\x81","\xdb","\x0c","\x72"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RendererStats_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(RendererStats_obj,batchers),HX_HCSTRING("batchers","\xec","\x2f","\x0e","\x4e")},
	{hx::fsInt,(int)offsetof(RendererStats_obj,geometry_count),HX_HCSTRING("geometry_count","\x42","\xa0","\x8d","\x12")},
	{hx::fsInt,(int)offsetof(RendererStats_obj,dynamic_batched_count),HX_HCSTRING("dynamic_batched_count","\x69","\x37","\xa8","\x66")},
	{hx::fsInt,(int)offsetof(RendererStats_obj,static_batched_count),HX_HCSTRING("static_batched_count","\xd8","\x88","\x51","\x4c")},
	{hx::fsInt,(int)offsetof(RendererStats_obj,visible_count),HX_HCSTRING("visible_count","\x02","\xe6","\xa7","\x70")},
	{hx::fsInt,(int)offsetof(RendererStats_obj,draw_calls),HX_HCSTRING("draw_calls","\x5a","\xc0","\x31","\x4a")},
	{hx::fsInt,(int)offsetof(RendererStats_obj,vert_count),HX_HCSTRING("vert_count","\x81","\xdb","\x0c","\x72")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RendererStats_obj_sStaticStorageInfo = 0;
#endif

static ::String RendererStats_obj_sMemberFields[] = {
	HX_HCSTRING("batchers","\xec","\x2f","\x0e","\x4e"),
	HX_HCSTRING("geometry_count","\x42","\xa0","\x8d","\x12"),
	HX_HCSTRING("dynamic_batched_count","\x69","\x37","\xa8","\x66"),
	HX_HCSTRING("static_batched_count","\xd8","\x88","\x51","\x4c"),
	HX_HCSTRING("visible_count","\x02","\xe6","\xa7","\x70"),
	HX_HCSTRING("draw_calls","\x5a","\xc0","\x31","\x4a"),
	HX_HCSTRING("vert_count","\x81","\xdb","\x0c","\x72"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void RendererStats_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RendererStats_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RendererStats_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RendererStats_obj::__mClass,"__mClass");
};

#endif

hx::Class RendererStats_obj::__mClass;

void RendererStats_obj::__register()
{
	hx::Object *dummy = new RendererStats_obj;
	RendererStats_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.RendererStats","\x9d","\x34","\x02","\x19");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RendererStats_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RendererStats_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RendererStats_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RendererStats_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RendererStats_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RendererStats_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
