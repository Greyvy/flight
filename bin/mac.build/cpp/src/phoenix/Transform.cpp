// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_phoenix_Matrix
#include <phoenix/Matrix.h>
#endif
#ifndef INCLUDED_phoenix_MatrixTransform
#include <phoenix/MatrixTransform.h>
#endif
#ifndef INCLUDED_phoenix_Quaternion
#include <phoenix/Quaternion.h>
#endif
#ifndef INCLUDED_phoenix_Spatial
#include <phoenix/Spatial.h>
#endif
#ifndef INCLUDED_phoenix_Transform
#include <phoenix/Transform.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_11_new,"phoenix.Transform","new",0x37b5fb1f,"phoenix.Transform.new","phoenix/Transform.hx",11,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_71_destroy,"phoenix.Transform","destroy",0x82ce2339,"phoenix.Transform.destroy","phoenix/Transform.hx",71,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_102_set_dirty,"phoenix.Transform","set_dirty",0x79abdc74,"phoenix.Transform.set_dirty","phoenix/Transform.hx",102,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_119_on_local_pos_change,"phoenix.Transform","on_local_pos_change",0x565988ae,"phoenix.Transform.on_local_pos_change","phoenix/Transform.hx",119,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_130_on_local_rotation_change,"phoenix.Transform","on_local_rotation_change",0xf66797fe,"phoenix.Transform.on_local_rotation_change","phoenix/Transform.hx",130,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_141_on_local_scale_change,"phoenix.Transform","on_local_scale_change",0x02a99538,"phoenix.Transform.on_local_scale_change","phoenix/Transform.hx",141,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_154_on_parent_cleaned,"phoenix.Transform","on_parent_cleaned",0x89be7432,"phoenix.Transform.on_parent_cleaned","phoenix/Transform.hx",154,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_160_get_local,"phoenix.Transform","get_local",0x357b69c1,"phoenix.Transform.get_local","phoenix/Transform.hx",160,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_164_set_local,"phoenix.Transform","set_local",0x18cc55cd,"phoenix.Transform.set_local","phoenix/Transform.hx",164,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_181_get_world,"phoenix.Transform","get_world",0x8aef36a8,"phoenix.Transform.get_world","phoenix/Transform.hx",181,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_191_clean_check,"phoenix.Transform","clean_check",0x615a2011,"phoenix.Transform.clean_check","phoenix/Transform.hx",191,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_204_clean,"phoenix.Transform","clean",0xbcad0a08,"phoenix.Transform.clean","phoenix/Transform.hx",204,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_255_toString,"phoenix.Transform","toString",0x591e518d,"phoenix.Transform.toString","phoenix/Transform.hx",255,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_260_get_origin,"phoenix.Transform","get_origin",0x87c2c4d0,"phoenix.Transform.get_origin","phoenix/Transform.hx",260,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_264_set_origin,"phoenix.Transform","set_origin",0x8b406344,"phoenix.Transform.set_origin","phoenix/Transform.hx",264,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_279_set_world,"phoenix.Transform","set_world",0x6e4022b4,"phoenix.Transform.set_world","phoenix/Transform.hx",279,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_293_get_parent,"phoenix.Transform","get_parent",0x2a3fb014,"phoenix.Transform.get_parent","phoenix/Transform.hx",293,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_297_set_parent,"phoenix.Transform","set_parent",0x2dbd4e88,"phoenix.Transform.set_parent","phoenix/Transform.hx",297,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_324_get_pos,"phoenix.Transform","get_pos",0x85121c6a,"phoenix.Transform.get_pos","phoenix/Transform.hx",324,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_328_get_rotation,"phoenix.Transform","get_rotation",0x3937f6a8,"phoenix.Transform.get_rotation","phoenix/Transform.hx",328,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_332_get_scale,"phoenix.Transform","get_scale",0x35596ee0,"phoenix.Transform.get_scale","phoenix/Transform.hx",332,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_337_set_pos,"phoenix.Transform","set_pos",0x7813ad76,"phoenix.Transform.set_pos","phoenix/Transform.hx",337,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_341_set_rotation,"phoenix.Transform","set_rotation",0x4e311a1c,"phoenix.Transform.set_rotation","phoenix/Transform.hx",341,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_345_set_scale,"phoenix.Transform","set_scale",0x18aa5aec,"phoenix.Transform.set_scale","phoenix/Transform.hx",345,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_350_propagate_clean,"phoenix.Transform","propagate_clean",0xf9de2332,"phoenix.Transform.propagate_clean","phoenix/Transform.hx",350,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_358_propagate_dirty,"phoenix.Transform","propagate_dirty",0x8b5301bb,"phoenix.Transform.propagate_dirty","phoenix/Transform.hx",358,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_366_propagate_pos,"phoenix.Transform","propagate_pos",0xf04d22fd,"phoenix.Transform.propagate_pos","phoenix/Transform.hx",366,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_374_propagate_rotation,"phoenix.Transform","propagate_rotation",0x22bd3b35,"phoenix.Transform.propagate_rotation","phoenix/Transform.hx",374,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_382_propagate_scale,"phoenix.Transform","propagate_scale",0x2a518033,"phoenix.Transform.propagate_scale","phoenix/Transform.hx",382,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_390_propagate_origin,"phoenix.Transform","propagate_origin",0xebd9dc1d,"phoenix.Transform.propagate_origin","phoenix/Transform.hx",390,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_398_propagate_parent,"phoenix.Transform","propagate_parent",0x8e56c761,"phoenix.Transform.propagate_parent","phoenix/Transform.hx",398,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_405_listen,"phoenix.Transform","listen",0x430d9ee8,"phoenix.Transform.listen","phoenix/Transform.hx",405,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_415_unlisten,"phoenix.Transform","unlisten",0x12f07841,"phoenix.Transform.unlisten","phoenix/Transform.hx",415,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_425_listen_dirty,"phoenix.Transform","listen_dirty",0x4f43543b,"phoenix.Transform.listen_dirty","phoenix/Transform.hx",425,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_435_unlisten_dirty,"phoenix.Transform","unlisten_dirty",0x5b453654,"phoenix.Transform.unlisten_dirty","phoenix/Transform.hx",435,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_445_listen_pos,"phoenix.Transform","listen_pos",0x714bd57d,"phoenix.Transform.listen_pos","phoenix/Transform.hx",445,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_455_unlisten_pos,"phoenix.Transform","unlisten_pos",0x0cb8cf56,"phoenix.Transform.unlisten_pos","phoenix/Transform.hx",455,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_465_listen_scale,"phoenix.Transform","listen_scale",0xee41d2b3,"phoenix.Transform.listen_scale","phoenix/Transform.hx",465,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_475_unlisten_scale,"phoenix.Transform","unlisten_scale",0xfa43b4cc,"phoenix.Transform.unlisten_scale","phoenix/Transform.hx",475,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_485_listen_rotation,"phoenix.Transform","listen_rotation",0xfce778b5,"phoenix.Transform.listen_rotation","phoenix/Transform.hx",485,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_495_unlisten_rotation,"phoenix.Transform","unlisten_rotation",0x1a452c3c,"phoenix.Transform.unlisten_rotation","phoenix/Transform.hx",495,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_505_listen_origin,"phoenix.Transform","listen_origin",0x9a31b99d,"phoenix.Transform.listen_origin","phoenix/Transform.hx",505,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_515_unlisten_origin,"phoenix.Transform","unlisten_origin",0x0fd5ad64,"phoenix.Transform.unlisten_origin","phoenix/Transform.hx",515,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_525_listen_parent,"phoenix.Transform","listen_parent",0x3caea4e1,"phoenix.Transform.listen_parent","phoenix/Transform.hx",525,0x44da8ab2)
HX_LOCAL_STACK_FRAME(_hx_pos_8c1c71d6e42c3e51_535_unlisten_parent,"phoenix.Transform","unlisten_parent",0xb25298a8,"phoenix.Transform.unlisten_parent","phoenix/Transform.hx",535,0x44da8ab2)
namespace phoenix{

void Transform_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_11_new)
HXLINE(  69)		this->_destroying = false;
HXLINE(  35)		this->_cleaning = false;
HXLINE(  34)		this->_setup = true;
HXLINE(  24)		this->manual_update = false;
HXLINE(  20)		this->dirty = true;
HXLINE(  48)		super::__construct(HX_("transform",6c,2d,93,45),null());
HXLINE(  50)		{
HXLINE(  50)			 ::phoenix::Spatial l =  ::phoenix::Spatial_obj::__alloc( HX_CTX );
HXDLIN(  50)			if (hx::IsNotNull( l )) {
HXLINE(  50)				{
HXLINE(  50)					this->dirty = true;
HXDLIN(  50)					bool _hx_tmp;
HXDLIN(  50)					bool _hx_tmp1;
HXDLIN(  50)					bool _hx_tmp2;
HXDLIN(  50)					if (this->dirty) {
HXLINE(  50)						_hx_tmp2 = !(this->_setup);
            					}
            					else {
HXLINE(  50)						_hx_tmp2 = false;
            					}
HXDLIN(  50)					if (_hx_tmp2) {
HXLINE(  50)						_hx_tmp1 = hx::IsNotNull( this->_dirty_handlers );
            					}
            					else {
HXLINE(  50)						_hx_tmp1 = false;
            					}
HXDLIN(  50)					if (_hx_tmp1) {
HXLINE(  50)						_hx_tmp = (this->_dirty_handlers->length > (int)0);
            					}
            					else {
HXLINE(  50)						_hx_tmp = false;
            					}
HXDLIN(  50)					if (_hx_tmp) {
HXLINE(  50)						int _g = (int)0;
HXDLIN(  50)						::Array< ::Dynamic> _g1 = this->_dirty_handlers;
HXDLIN(  50)						while((_g < _g1->length)){
HXLINE(  50)							 ::Dynamic _handler = _g1->__get(_g);
HXDLIN(  50)							_g = (_g + (int)1);
HXDLIN(  50)							if (hx::IsNotNull( _handler )) {
HXLINE(  50)								_handler(hx::ObjectPtr<OBJ_>(this));
            							}
            						}
            					}
            				}
HXDLIN(  50)				l->pos_changed = this->on_local_pos_change_dyn();
HXDLIN(  50)				l->rotation_changed = this->on_local_rotation_change_dyn();
HXDLIN(  50)				l->scale_changed = this->on_local_scale_change_dyn();
            			}
HXDLIN(  50)			this->local = l;
            		}
HXLINE(  51)		{
HXLINE(  51)			 ::phoenix::Spatial w =  ::phoenix::Spatial_obj::__alloc( HX_CTX );
HXDLIN(  51)			if (hx::IsNull( w )) {
HXLINE(  51)				this->world = w;
            			}
            			else {
HXLINE(  51)				{
HXLINE(  51)					this->dirty = true;
HXDLIN(  51)					bool _hx_tmp3;
HXDLIN(  51)					bool _hx_tmp4;
HXDLIN(  51)					bool _hx_tmp5;
HXDLIN(  51)					if (this->dirty) {
HXLINE(  51)						_hx_tmp5 = !(this->_setup);
            					}
            					else {
HXLINE(  51)						_hx_tmp5 = false;
            					}
HXDLIN(  51)					if (_hx_tmp5) {
HXLINE(  51)						_hx_tmp4 = hx::IsNotNull( this->_dirty_handlers );
            					}
            					else {
HXLINE(  51)						_hx_tmp4 = false;
            					}
HXDLIN(  51)					if (_hx_tmp4) {
HXLINE(  51)						_hx_tmp3 = (this->_dirty_handlers->length > (int)0);
            					}
            					else {
HXLINE(  51)						_hx_tmp3 = false;
            					}
HXDLIN(  51)					if (_hx_tmp3) {
HXLINE(  51)						int _g2 = (int)0;
HXDLIN(  51)						::Array< ::Dynamic> _g11 = this->_dirty_handlers;
HXDLIN(  51)						while((_g2 < _g11->length)){
HXLINE(  51)							 ::Dynamic _handler1 = _g11->__get(_g2);
HXDLIN(  51)							_g2 = (_g2 + (int)1);
HXDLIN(  51)							if (hx::IsNotNull( _handler1 )) {
HXLINE(  51)								_handler1(hx::ObjectPtr<OBJ_>(this));
            							}
            						}
            					}
            				}
HXDLIN(  51)				this->world = w;
            			}
            		}
HXLINE(  53)		this->_origin_undo_matrix =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  54)		this->_pos_matrix =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  55)		this->_rotation_matrix =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  57)		{
HXLINE(  57)			 ::phoenix::Vector o =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN(  57)			{
HXLINE(  57)				this->dirty = true;
HXDLIN(  57)				bool _hx_tmp6;
HXDLIN(  57)				bool _hx_tmp7;
HXDLIN(  57)				bool _hx_tmp8;
HXDLIN(  57)				if (this->dirty) {
HXLINE(  57)					_hx_tmp8 = !(this->_setup);
            				}
            				else {
HXLINE(  57)					_hx_tmp8 = false;
            				}
HXDLIN(  57)				if (_hx_tmp8) {
HXLINE(  57)					_hx_tmp7 = hx::IsNotNull( this->_dirty_handlers );
            				}
            				else {
HXLINE(  57)					_hx_tmp7 = false;
            				}
HXDLIN(  57)				if (_hx_tmp7) {
HXLINE(  57)					_hx_tmp6 = (this->_dirty_handlers->length > (int)0);
            				}
            				else {
HXLINE(  57)					_hx_tmp6 = false;
            				}
HXDLIN(  57)				if (_hx_tmp6) {
HXLINE(  57)					int _g3 = (int)0;
HXDLIN(  57)					::Array< ::Dynamic> _g12 = this->_dirty_handlers;
HXDLIN(  57)					while((_g3 < _g12->length)){
HXLINE(  57)						 ::Dynamic _handler2 = _g12->__get(_g3);
HXDLIN(  57)						_g3 = (_g3 + (int)1);
HXDLIN(  57)						if (hx::IsNotNull( _handler2 )) {
HXLINE(  57)							_handler2(hx::ObjectPtr<OBJ_>(this));
            						}
            					}
            				}
            			}
HXDLIN(  57)			this->origin = o;
HXDLIN(  57)			bool _hx_tmp9;
HXDLIN(  57)			if (hx::IsNotNull( this->_origin_handlers )) {
HXLINE(  57)				_hx_tmp9 = (this->_origin_handlers->length > (int)0);
            			}
            			else {
HXLINE(  57)				_hx_tmp9 = false;
            			}
HXDLIN(  57)			if (_hx_tmp9) {
HXLINE(  57)				 ::phoenix::Vector _origin = this->origin;
HXDLIN(  57)				{
HXLINE(  57)					int _g4 = (int)0;
HXDLIN(  57)					::Array< ::Dynamic> _g13 = this->_origin_handlers;
HXDLIN(  57)					while((_g4 < _g13->length)){
HXLINE(  57)						 ::Dynamic _handler3 = _g13->__get(_g4);
HXDLIN(  57)						_g4 = (_g4 + (int)1);
HXDLIN(  57)						if (hx::IsNotNull( _handler3 )) {
HXLINE(  57)							_handler3(_origin);
            						}
            					}
            				}
            			}
            		}
HXLINE(  60)		this->local->pos_changed = this->on_local_pos_change_dyn();
HXLINE(  61)		this->local->rotation_changed = this->on_local_rotation_change_dyn();
HXLINE(  62)		this->local->scale_changed = this->on_local_scale_change_dyn();
HXLINE(  64)		this->_setup = false;
            	}

Dynamic Transform_obj::__CreateEmpty() { return new Transform_obj; }

void *Transform_obj::_hx_vtable = 0;

Dynamic Transform_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Transform_obj > _hx_result = new Transform_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Transform_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x22bfdf5d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x22bfdf5d;
	} else {
		return inClassId==(int)0x6b65f151;
	}
}

void Transform_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_71_destroy)
HXLINE(  73)		this->_destroying = true;
HXLINE(  76)		if (hx::IsNotNull( this->parent )) {
HXLINE(  77)			 ::phoenix::Transform _this = this->parent;
HXDLIN(  77)			if (hx::IsNotNull( _this->_clean_handlers )) {
HXLINE(  77)				_this->_clean_handlers->remove(this->on_parent_cleaned_dyn());
            			}
            		}
HXLINE(  81)		this->_clean_handlers = null();
HXLINE(  82)		this->_dirty_handlers = null();
HXLINE(  83)		this->_pos_handlers = null();
HXLINE(  84)		this->_rotation_handlers = null();
HXLINE(  85)		this->_scale_handlers = null();
HXLINE(  86)		this->_origin_handlers = null();
HXLINE(  87)		this->_parent_handlers = null();
HXLINE(  90)		{
HXLINE(  90)			 ::phoenix::Spatial _this1 = this->local;
HXDLIN(  90)			_this1->matrix = null();
HXDLIN(  90)			_this1->floats = null();
HXDLIN(  90)			_this1->pos = null();
HXDLIN(  90)			_this1->rotation = null();
HXDLIN(  90)			_this1->scale = null();
            		}
HXLINE(  91)		{
HXLINE(  91)			if (!(this->_destroying)) {
HXLINE(  91)				bool _hx_tmp;
HXDLIN(  91)				if (hx::IsNotNull( this->parent )) {
HXLINE(  91)					_hx_tmp = this->parent->dirty;
            				}
            				else {
HXLINE(  91)					_hx_tmp = false;
            				}
HXDLIN(  91)				if (_hx_tmp) {
HXLINE(  91)					this->parent->clean_check();
            				}
HXDLIN(  91)				bool _hx_tmp1;
HXDLIN(  91)				bool _hx_tmp2;
HXDLIN(  91)				if (this->dirty) {
HXLINE(  91)					_hx_tmp2 = !(this->_cleaning);
            				}
            				else {
HXLINE(  91)					_hx_tmp2 = false;
            				}
HXDLIN(  91)				if (_hx_tmp2) {
HXLINE(  91)					_hx_tmp1 = !(this->manual_update);
            				}
            				else {
HXLINE(  91)					_hx_tmp1 = false;
            				}
HXDLIN(  91)				if (_hx_tmp1) {
HXLINE(  91)					this->clean();
            				}
            			}
HXDLIN(  91)			 ::phoenix::Spatial _this2 = this->world;
HXDLIN(  91)			_this2->matrix = null();
HXDLIN(  91)			_this2->floats = null();
HXDLIN(  91)			_this2->pos = null();
HXDLIN(  91)			_this2->rotation = null();
HXDLIN(  91)			_this2->scale = null();
            		}
HXLINE(  93)		this->local = null();
HXLINE(  94)		this->world = null();
HXLINE(  95)		{
HXLINE(  95)			{
HXLINE(  95)				this->dirty = true;
HXDLIN(  95)				bool _hx_tmp3;
HXDLIN(  95)				bool _hx_tmp4;
HXDLIN(  95)				bool _hx_tmp5;
HXDLIN(  95)				if (this->dirty) {
HXLINE(  95)					_hx_tmp5 = !(this->_setup);
            				}
            				else {
HXLINE(  95)					_hx_tmp5 = false;
            				}
HXDLIN(  95)				if (_hx_tmp5) {
HXLINE(  95)					_hx_tmp4 = hx::IsNotNull( this->_dirty_handlers );
            				}
            				else {
HXLINE(  95)					_hx_tmp4 = false;
            				}
HXDLIN(  95)				if (_hx_tmp4) {
HXLINE(  95)					_hx_tmp3 = (this->_dirty_handlers->length > (int)0);
            				}
            				else {
HXLINE(  95)					_hx_tmp3 = false;
            				}
HXDLIN(  95)				if (_hx_tmp3) {
HXLINE(  95)					int _g = (int)0;
HXDLIN(  95)					::Array< ::Dynamic> _g1 = this->_dirty_handlers;
HXDLIN(  95)					while((_g < _g1->length)){
HXLINE(  95)						 ::Dynamic _handler = _g1->__get(_g);
HXDLIN(  95)						_g = (_g + (int)1);
HXDLIN(  95)						if (hx::IsNotNull( _handler )) {
HXLINE(  95)							_handler(hx::ObjectPtr<OBJ_>(this));
            						}
            					}
            				}
            			}
HXDLIN(  95)			this->origin = null();
HXDLIN(  95)			bool _hx_tmp6;
HXDLIN(  95)			if (hx::IsNotNull( this->_origin_handlers )) {
HXLINE(  95)				_hx_tmp6 = (this->_origin_handlers->length > (int)0);
            			}
            			else {
HXLINE(  95)				_hx_tmp6 = false;
            			}
HXDLIN(  95)			if (_hx_tmp6) {
HXLINE(  95)				 ::phoenix::Vector _origin = this->origin;
HXDLIN(  95)				{
HXLINE(  95)					int _g2 = (int)0;
HXDLIN(  95)					::Array< ::Dynamic> _g11 = this->_origin_handlers;
HXDLIN(  95)					while((_g2 < _g11->length)){
HXLINE(  95)						 ::Dynamic _handler1 = _g11->__get(_g2);
HXDLIN(  95)						_g2 = (_g2 + (int)1);
HXDLIN(  95)						if (hx::IsNotNull( _handler1 )) {
HXLINE(  95)							_handler1(_origin);
            						}
            					}
            				}
            			}
            		}
HXLINE(  96)		this->_origin_undo_matrix = null();
HXLINE(  97)		this->_pos_matrix = null();
HXLINE(  98)		this->_rotation_matrix = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,destroy,(void))

bool Transform_obj::set_dirty(bool _dirty){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_102_set_dirty)
HXLINE( 104)		this->dirty = _dirty;
HXLINE( 106)		bool _hx_tmp;
HXDLIN( 106)		bool _hx_tmp1;
HXDLIN( 106)		bool _hx_tmp2;
HXDLIN( 106)		if (this->dirty) {
HXLINE( 106)			_hx_tmp2 = !(this->_setup);
            		}
            		else {
HXLINE( 106)			_hx_tmp2 = false;
            		}
HXDLIN( 106)		if (_hx_tmp2) {
HXLINE( 106)			_hx_tmp1 = hx::IsNotNull( this->_dirty_handlers );
            		}
            		else {
HXLINE( 106)			_hx_tmp1 = false;
            		}
HXDLIN( 106)		if (_hx_tmp1) {
HXLINE( 106)			_hx_tmp = (this->_dirty_handlers->length > (int)0);
            		}
            		else {
HXLINE( 106)			_hx_tmp = false;
            		}
HXDLIN( 106)		if (_hx_tmp) {
HXLINE( 111)			int _g = (int)0;
HXDLIN( 111)			::Array< ::Dynamic> _g1 = this->_dirty_handlers;
HXDLIN( 111)			while((_g < _g1->length)){
HXLINE( 111)				 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 111)				_g = (_g + (int)1);
HXDLIN( 111)				if (hx::IsNotNull( _handler )) {
HXLINE( 111)					_handler(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
HXLINE( 114)		return this->dirty;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,set_dirty,return )

void Transform_obj::on_local_pos_change( ::phoenix::Vector v){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_119_on_local_pos_change)
HXLINE( 121)		{
HXLINE( 121)			this->dirty = true;
HXDLIN( 121)			bool _hx_tmp;
HXDLIN( 121)			bool _hx_tmp1;
HXDLIN( 121)			bool _hx_tmp2;
HXDLIN( 121)			if (this->dirty) {
HXLINE( 121)				_hx_tmp2 = !(this->_setup);
            			}
            			else {
HXLINE( 121)				_hx_tmp2 = false;
            			}
HXDLIN( 121)			if (_hx_tmp2) {
HXLINE( 121)				_hx_tmp1 = hx::IsNotNull( this->_dirty_handlers );
            			}
            			else {
HXLINE( 121)				_hx_tmp1 = false;
            			}
HXDLIN( 121)			if (_hx_tmp1) {
HXLINE( 121)				_hx_tmp = (this->_dirty_handlers->length > (int)0);
            			}
            			else {
HXLINE( 121)				_hx_tmp = false;
            			}
HXDLIN( 121)			if (_hx_tmp) {
HXLINE( 121)				int _g = (int)0;
HXDLIN( 121)				::Array< ::Dynamic> _g1 = this->_dirty_handlers;
HXDLIN( 121)				while((_g < _g1->length)){
HXLINE( 121)					 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 121)					_g = (_g + (int)1);
HXDLIN( 121)					if (hx::IsNotNull( _handler )) {
HXLINE( 121)						_handler(hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
HXLINE( 123)		bool _hx_tmp3;
HXDLIN( 123)		if (hx::IsNotNull( this->_pos_handlers )) {
HXLINE( 123)			_hx_tmp3 = (this->_pos_handlers->length > (int)0);
            		}
            		else {
HXLINE( 123)			_hx_tmp3 = false;
            		}
HXDLIN( 123)		if (_hx_tmp3) {
HXLINE( 125)			int _g2 = (int)0;
HXDLIN( 125)			::Array< ::Dynamic> _g11 = this->_pos_handlers;
HXDLIN( 125)			while((_g2 < _g11->length)){
HXLINE( 125)				 ::Dynamic _handler1 = _g11->__get(_g2);
HXDLIN( 125)				_g2 = (_g2 + (int)1);
HXDLIN( 125)				if (hx::IsNotNull( _handler1 )) {
HXLINE( 125)					_handler1(v);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,on_local_pos_change,(void))

void Transform_obj::on_local_rotation_change( ::phoenix::Quaternion r){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_130_on_local_rotation_change)
HXLINE( 132)		{
HXLINE( 132)			this->dirty = true;
HXDLIN( 132)			bool _hx_tmp;
HXDLIN( 132)			bool _hx_tmp1;
HXDLIN( 132)			bool _hx_tmp2;
HXDLIN( 132)			if (this->dirty) {
HXLINE( 132)				_hx_tmp2 = !(this->_setup);
            			}
            			else {
HXLINE( 132)				_hx_tmp2 = false;
            			}
HXDLIN( 132)			if (_hx_tmp2) {
HXLINE( 132)				_hx_tmp1 = hx::IsNotNull( this->_dirty_handlers );
            			}
            			else {
HXLINE( 132)				_hx_tmp1 = false;
            			}
HXDLIN( 132)			if (_hx_tmp1) {
HXLINE( 132)				_hx_tmp = (this->_dirty_handlers->length > (int)0);
            			}
            			else {
HXLINE( 132)				_hx_tmp = false;
            			}
HXDLIN( 132)			if (_hx_tmp) {
HXLINE( 132)				int _g = (int)0;
HXDLIN( 132)				::Array< ::Dynamic> _g1 = this->_dirty_handlers;
HXDLIN( 132)				while((_g < _g1->length)){
HXLINE( 132)					 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 132)					_g = (_g + (int)1);
HXDLIN( 132)					if (hx::IsNotNull( _handler )) {
HXLINE( 132)						_handler(hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
HXLINE( 134)		bool _hx_tmp3;
HXDLIN( 134)		if (hx::IsNotNull( this->_rotation_handlers )) {
HXLINE( 134)			_hx_tmp3 = (this->_rotation_handlers->length > (int)0);
            		}
            		else {
HXLINE( 134)			_hx_tmp3 = false;
            		}
HXDLIN( 134)		if (_hx_tmp3) {
HXLINE( 136)			int _g2 = (int)0;
HXDLIN( 136)			::Array< ::Dynamic> _g11 = this->_rotation_handlers;
HXDLIN( 136)			while((_g2 < _g11->length)){
HXLINE( 136)				 ::Dynamic _handler1 = _g11->__get(_g2);
HXDLIN( 136)				_g2 = (_g2 + (int)1);
HXDLIN( 136)				if (hx::IsNotNull( _handler1 )) {
HXLINE( 136)					_handler1(r);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,on_local_rotation_change,(void))

void Transform_obj::on_local_scale_change( ::phoenix::Vector s){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_141_on_local_scale_change)
HXLINE( 143)		{
HXLINE( 143)			this->dirty = true;
HXDLIN( 143)			bool _hx_tmp;
HXDLIN( 143)			bool _hx_tmp1;
HXDLIN( 143)			bool _hx_tmp2;
HXDLIN( 143)			if (this->dirty) {
HXLINE( 143)				_hx_tmp2 = !(this->_setup);
            			}
            			else {
HXLINE( 143)				_hx_tmp2 = false;
            			}
HXDLIN( 143)			if (_hx_tmp2) {
HXLINE( 143)				_hx_tmp1 = hx::IsNotNull( this->_dirty_handlers );
            			}
            			else {
HXLINE( 143)				_hx_tmp1 = false;
            			}
HXDLIN( 143)			if (_hx_tmp1) {
HXLINE( 143)				_hx_tmp = (this->_dirty_handlers->length > (int)0);
            			}
            			else {
HXLINE( 143)				_hx_tmp = false;
            			}
HXDLIN( 143)			if (_hx_tmp) {
HXLINE( 143)				int _g = (int)0;
HXDLIN( 143)				::Array< ::Dynamic> _g1 = this->_dirty_handlers;
HXDLIN( 143)				while((_g < _g1->length)){
HXLINE( 143)					 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 143)					_g = (_g + (int)1);
HXDLIN( 143)					if (hx::IsNotNull( _handler )) {
HXLINE( 143)						_handler(hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
HXLINE( 145)		bool _hx_tmp3;
HXDLIN( 145)		if (hx::IsNotNull( this->_scale_handlers )) {
HXLINE( 145)			_hx_tmp3 = (this->_scale_handlers->length > (int)0);
            		}
            		else {
HXLINE( 145)			_hx_tmp3 = false;
            		}
HXDLIN( 145)		if (_hx_tmp3) {
HXLINE( 147)			int _g2 = (int)0;
HXDLIN( 147)			::Array< ::Dynamic> _g11 = this->_scale_handlers;
HXDLIN( 147)			while((_g2 < _g11->length)){
HXLINE( 147)				 ::Dynamic _handler1 = _g11->__get(_g2);
HXDLIN( 147)				_g2 = (_g2 + (int)1);
HXDLIN( 147)				if (hx::IsNotNull( _handler1 )) {
HXLINE( 147)					_handler1(s);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,on_local_scale_change,(void))

void Transform_obj::on_parent_cleaned( ::phoenix::Transform p){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_154_on_parent_cleaned)
HXDLIN( 154)		this->dirty = true;
HXDLIN( 154)		bool _hx_tmp;
HXDLIN( 154)		bool _hx_tmp1;
HXDLIN( 154)		bool _hx_tmp2;
HXDLIN( 154)		if (this->dirty) {
HXDLIN( 154)			_hx_tmp2 = !(this->_setup);
            		}
            		else {
HXDLIN( 154)			_hx_tmp2 = false;
            		}
HXDLIN( 154)		if (_hx_tmp2) {
HXDLIN( 154)			_hx_tmp1 = hx::IsNotNull( this->_dirty_handlers );
            		}
            		else {
HXDLIN( 154)			_hx_tmp1 = false;
            		}
HXDLIN( 154)		if (_hx_tmp1) {
HXDLIN( 154)			_hx_tmp = (this->_dirty_handlers->length > (int)0);
            		}
            		else {
HXDLIN( 154)			_hx_tmp = false;
            		}
HXDLIN( 154)		if (_hx_tmp) {
HXDLIN( 154)			int _g = (int)0;
HXDLIN( 154)			::Array< ::Dynamic> _g1 = this->_dirty_handlers;
HXDLIN( 154)			while((_g < _g1->length)){
HXDLIN( 154)				 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 154)				_g = (_g + (int)1);
HXDLIN( 154)				if (hx::IsNotNull( _handler )) {
HXDLIN( 154)					_handler(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,on_parent_cleaned,(void))

 ::phoenix::Spatial Transform_obj::get_local(){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_160_get_local)
HXDLIN( 160)		return this->local;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,get_local,return )

 ::phoenix::Spatial Transform_obj::set_local( ::phoenix::Spatial l){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_164_set_local)
HXLINE( 166)		if (hx::IsNotNull( l )) {
HXLINE( 168)			{
HXLINE( 168)				this->dirty = true;
HXDLIN( 168)				bool _hx_tmp;
HXDLIN( 168)				bool _hx_tmp1;
HXDLIN( 168)				bool _hx_tmp2;
HXDLIN( 168)				if (this->dirty) {
HXLINE( 168)					_hx_tmp2 = !(this->_setup);
            				}
            				else {
HXLINE( 168)					_hx_tmp2 = false;
            				}
HXDLIN( 168)				if (_hx_tmp2) {
HXLINE( 168)					_hx_tmp1 = hx::IsNotNull( this->_dirty_handlers );
            				}
            				else {
HXLINE( 168)					_hx_tmp1 = false;
            				}
HXDLIN( 168)				if (_hx_tmp1) {
HXLINE( 168)					_hx_tmp = (this->_dirty_handlers->length > (int)0);
            				}
            				else {
HXLINE( 168)					_hx_tmp = false;
            				}
HXDLIN( 168)				if (_hx_tmp) {
HXLINE( 168)					int _g = (int)0;
HXDLIN( 168)					::Array< ::Dynamic> _g1 = this->_dirty_handlers;
HXDLIN( 168)					while((_g < _g1->length)){
HXLINE( 168)						 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 168)						_g = (_g + (int)1);
HXDLIN( 168)						if (hx::IsNotNull( _handler )) {
HXLINE( 168)							_handler(hx::ObjectPtr<OBJ_>(this));
            						}
            					}
            				}
            			}
HXLINE( 170)			l->pos_changed = this->on_local_pos_change_dyn();
HXLINE( 171)			l->rotation_changed = this->on_local_rotation_change_dyn();
HXLINE( 172)			l->scale_changed = this->on_local_scale_change_dyn();
            		}
HXLINE( 176)		return (this->local = l);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,set_local,return )

 ::phoenix::Spatial Transform_obj::get_world(){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_181_get_world)
HXLINE( 183)		if (!(this->_destroying)) {
HXLINE( 184)			bool _hx_tmp;
HXDLIN( 184)			if (hx::IsNotNull( this->parent )) {
HXLINE( 184)				_hx_tmp = this->parent->dirty;
            			}
            			else {
HXLINE( 184)				_hx_tmp = false;
            			}
HXDLIN( 184)			if (_hx_tmp) {
HXLINE( 184)				this->parent->clean_check();
            			}
HXDLIN( 184)			bool _hx_tmp1;
HXDLIN( 184)			bool _hx_tmp2;
HXDLIN( 184)			if (this->dirty) {
HXLINE( 184)				_hx_tmp2 = !(this->_cleaning);
            			}
            			else {
HXLINE( 184)				_hx_tmp2 = false;
            			}
HXDLIN( 184)			if (_hx_tmp2) {
HXLINE( 184)				_hx_tmp1 = !(this->manual_update);
            			}
            			else {
HXLINE( 184)				_hx_tmp1 = false;
            			}
HXDLIN( 184)			if (_hx_tmp1) {
HXLINE( 184)				this->clean();
            			}
            		}
HXLINE( 187)		return this->world;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,get_world,return )

void Transform_obj::clean_check(){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_191_clean_check)
HXLINE( 194)		bool _hx_tmp;
HXDLIN( 194)		if (hx::IsNotNull( this->parent )) {
HXLINE( 194)			_hx_tmp = this->parent->dirty;
            		}
            		else {
HXLINE( 194)			_hx_tmp = false;
            		}
HXDLIN( 194)		if (_hx_tmp) {
HXLINE( 195)			this->parent->clean_check();
            		}
HXLINE( 198)		bool _hx_tmp1;
HXDLIN( 198)		bool _hx_tmp2;
HXDLIN( 198)		if (this->dirty) {
HXLINE( 198)			_hx_tmp2 = !(this->_cleaning);
            		}
            		else {
HXLINE( 198)			_hx_tmp2 = false;
            		}
HXDLIN( 198)		if (_hx_tmp2) {
HXLINE( 198)			_hx_tmp1 = !(this->manual_update);
            		}
            		else {
HXLINE( 198)			_hx_tmp1 = false;
            		}
HXDLIN( 198)		if (_hx_tmp1) {
HXLINE( 199)			this->clean();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,clean_check,(void))

void Transform_obj::clean(){
            	HX_GC_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_204_clean)
HXLINE( 206)		if (!(this->dirty)) {
HXLINE( 207)			return;
            		}
HXLINE( 211)		this->_cleaning = true;
HXLINE( 214)		{
HXLINE( 214)			 ::phoenix::Matrix _this = this->_pos_matrix;
HXDLIN( 214)			{
HXLINE( 214)				::Array< Float > e = _this->elements;
HXDLIN( 214)				e[(int)0] = (int)1;
HXDLIN( 214)				e[(int)4] = (int)0;
HXDLIN( 214)				e[(int)8] = (int)0;
HXDLIN( 214)				e[(int)12] = this->local->pos->x;
HXDLIN( 214)				e[(int)1] = (int)0;
HXDLIN( 214)				e[(int)5] = (int)1;
HXDLIN( 214)				e[(int)9] = (int)0;
HXDLIN( 214)				e[(int)13] = this->local->pos->y;
HXDLIN( 214)				e[(int)2] = (int)0;
HXDLIN( 214)				e[(int)6] = (int)0;
HXDLIN( 214)				e[(int)10] = (int)1;
HXDLIN( 214)				e[(int)14] = this->local->pos->z;
HXDLIN( 214)				e[(int)3] = (int)0;
HXDLIN( 214)				e[(int)7] = (int)0;
HXDLIN( 214)				e[(int)11] = (int)0;
HXDLIN( 214)				e[(int)15] = (int)1;
            			}
            		}
HXLINE( 215)		{
HXLINE( 215)			 ::phoenix::Matrix _this1 = this->_rotation_matrix;
HXDLIN( 215)			 ::phoenix::Quaternion q = this->local->rotation;
HXDLIN( 215)			::Array< Float > te = _this1->elements;
HXDLIN( 215)			Float x2 = (q->x + q->x);
HXDLIN( 215)			Float y2 = (q->y + q->y);
HXDLIN( 215)			Float z2 = (q->z + q->z);
HXDLIN( 215)			Float xx = (q->x * x2);
HXDLIN( 215)			Float xy = (q->x * y2);
HXDLIN( 215)			Float xz = (q->x * z2);
HXDLIN( 215)			Float yy = (q->y * y2);
HXDLIN( 215)			Float yz = (q->y * z2);
HXDLIN( 215)			Float zz = (q->z * z2);
HXDLIN( 215)			Float wx = (q->w * x2);
HXDLIN( 215)			Float wy = (q->w * y2);
HXDLIN( 215)			Float wz = (q->w * z2);
HXDLIN( 215)			te[(int)0] = ((int)1 - (yy + zz));
HXDLIN( 215)			te[(int)4] = (xy - wz);
HXDLIN( 215)			te[(int)8] = (xz + wy);
HXDLIN( 215)			te[(int)1] = (xy + wz);
HXDLIN( 215)			te[(int)5] = ((int)1 - (xx + zz));
HXDLIN( 215)			te[(int)9] = (yz - wx);
HXDLIN( 215)			te[(int)2] = (xz - wy);
HXDLIN( 215)			te[(int)6] = (yz + wx);
HXDLIN( 215)			te[(int)10] = ((int)1 - (xx + yy));
HXDLIN( 215)			te[(int)3] = (int)0;
HXDLIN( 215)			te[(int)7] = (int)0;
HXDLIN( 215)			te[(int)11] = (int)0;
HXDLIN( 215)			te[(int)12] = (int)0;
HXDLIN( 215)			te[(int)13] = (int)0;
HXDLIN( 215)			te[(int)14] = (int)0;
HXDLIN( 215)			te[(int)15] = (int)1;
            		}
HXLINE( 216)		{
HXLINE( 216)			 ::phoenix::Matrix _this2 = this->_origin_undo_matrix;
HXDLIN( 216)			{
HXLINE( 216)				::Array< Float > e1 = _this2->elements;
HXDLIN( 216)				e1[(int)0] = (int)1;
HXDLIN( 216)				e1[(int)4] = (int)0;
HXDLIN( 216)				e1[(int)8] = (int)0;
HXDLIN( 216)				e1[(int)12] = -(this->origin->x);
HXDLIN( 216)				e1[(int)1] = (int)0;
HXDLIN( 216)				e1[(int)5] = (int)1;
HXDLIN( 216)				e1[(int)9] = (int)0;
HXDLIN( 216)				e1[(int)13] = -(this->origin->y);
HXDLIN( 216)				e1[(int)2] = (int)0;
HXDLIN( 216)				e1[(int)6] = (int)0;
HXDLIN( 216)				e1[(int)10] = (int)1;
HXDLIN( 216)				e1[(int)14] = -(this->origin->z);
HXDLIN( 216)				e1[(int)3] = (int)0;
HXDLIN( 216)				e1[(int)7] = (int)0;
HXDLIN( 216)				e1[(int)11] = (int)0;
HXDLIN( 216)				e1[(int)15] = (int)1;
            			}
            		}
HXLINE( 219)		{
HXLINE( 219)			 ::phoenix::Matrix _this3 = this->local->matrix;
HXDLIN( 219)			{
HXLINE( 219)				::Array< Float > e2 = _this3->elements;
HXDLIN( 219)				e2[(int)0] = (int)1;
HXDLIN( 219)				e2[(int)4] = (int)0;
HXDLIN( 219)				e2[(int)8] = (int)0;
HXDLIN( 219)				e2[(int)12] = this->origin->x;
HXDLIN( 219)				e2[(int)1] = (int)0;
HXDLIN( 219)				e2[(int)5] = (int)1;
HXDLIN( 219)				e2[(int)9] = (int)0;
HXDLIN( 219)				e2[(int)13] = this->origin->y;
HXDLIN( 219)				e2[(int)2] = (int)0;
HXDLIN( 219)				e2[(int)6] = (int)0;
HXDLIN( 219)				e2[(int)10] = (int)1;
HXDLIN( 219)				e2[(int)14] = this->origin->z;
HXDLIN( 219)				e2[(int)3] = (int)0;
HXDLIN( 219)				e2[(int)7] = (int)0;
HXDLIN( 219)				e2[(int)11] = (int)0;
HXDLIN( 219)				e2[(int)15] = (int)1;
            			}
            		}
HXLINE( 222)		{
HXLINE( 222)			 ::phoenix::Matrix _this4 = this->local->matrix;
HXDLIN( 222)			{
HXLINE( 222)				::Array< Float > ae = _this4->elements;
HXDLIN( 222)				::Array< Float > be = this->_rotation_matrix->elements;
HXDLIN( 222)				::Array< Float > te1 = _this4->elements;
HXDLIN( 222)				Float a11 = ae->__get((int)0);
HXDLIN( 222)				Float a12 = ae->__get((int)4);
HXDLIN( 222)				Float a13 = ae->__get((int)8);
HXDLIN( 222)				Float a14 = ae->__get((int)12);
HXDLIN( 222)				Float a21 = ae->__get((int)1);
HXDLIN( 222)				Float a22 = ae->__get((int)5);
HXDLIN( 222)				Float a23 = ae->__get((int)9);
HXDLIN( 222)				Float a24 = ae->__get((int)13);
HXDLIN( 222)				Float a31 = ae->__get((int)2);
HXDLIN( 222)				Float a32 = ae->__get((int)6);
HXDLIN( 222)				Float a33 = ae->__get((int)10);
HXDLIN( 222)				Float a34 = ae->__get((int)14);
HXDLIN( 222)				Float a41 = ae->__get((int)3);
HXDLIN( 222)				Float a42 = ae->__get((int)7);
HXDLIN( 222)				Float a43 = ae->__get((int)11);
HXDLIN( 222)				Float a44 = ae->__get((int)15);
HXDLIN( 222)				Float b11 = be->__get((int)0);
HXDLIN( 222)				Float b12 = be->__get((int)4);
HXDLIN( 222)				Float b13 = be->__get((int)8);
HXDLIN( 222)				Float b14 = be->__get((int)12);
HXDLIN( 222)				Float b21 = be->__get((int)1);
HXDLIN( 222)				Float b22 = be->__get((int)5);
HXDLIN( 222)				Float b23 = be->__get((int)9);
HXDLIN( 222)				Float b24 = be->__get((int)13);
HXDLIN( 222)				Float b31 = be->__get((int)2);
HXDLIN( 222)				Float b32 = be->__get((int)6);
HXDLIN( 222)				Float b33 = be->__get((int)10);
HXDLIN( 222)				Float b34 = be->__get((int)14);
HXDLIN( 222)				Float b41 = be->__get((int)3);
HXDLIN( 222)				Float b42 = be->__get((int)7);
HXDLIN( 222)				Float b43 = be->__get((int)11);
HXDLIN( 222)				Float b44 = be->__get((int)15);
HXDLIN( 222)				te1[(int)0] = ((((a11 * b11) + (a12 * b21)) + (a13 * b31)) + (a14 * b41));
HXDLIN( 222)				te1[(int)4] = ((((a11 * b12) + (a12 * b22)) + (a13 * b32)) + (a14 * b42));
HXDLIN( 222)				te1[(int)8] = ((((a11 * b13) + (a12 * b23)) + (a13 * b33)) + (a14 * b43));
HXDLIN( 222)				te1[(int)12] = ((((a11 * b14) + (a12 * b24)) + (a13 * b34)) + (a14 * b44));
HXDLIN( 222)				te1[(int)1] = ((((a21 * b11) + (a22 * b21)) + (a23 * b31)) + (a24 * b41));
HXDLIN( 222)				te1[(int)5] = ((((a21 * b12) + (a22 * b22)) + (a23 * b32)) + (a24 * b42));
HXDLIN( 222)				te1[(int)9] = ((((a21 * b13) + (a22 * b23)) + (a23 * b33)) + (a24 * b43));
HXDLIN( 222)				te1[(int)13] = ((((a21 * b14) + (a22 * b24)) + (a23 * b34)) + (a24 * b44));
HXDLIN( 222)				te1[(int)2] = ((((a31 * b11) + (a32 * b21)) + (a33 * b31)) + (a34 * b41));
HXDLIN( 222)				te1[(int)6] = ((((a31 * b12) + (a32 * b22)) + (a33 * b32)) + (a34 * b42));
HXDLIN( 222)				te1[(int)10] = ((((a31 * b13) + (a32 * b23)) + (a33 * b33)) + (a34 * b43));
HXDLIN( 222)				te1[(int)14] = ((((a31 * b14) + (a32 * b24)) + (a33 * b34)) + (a34 * b44));
HXDLIN( 222)				te1[(int)3] = ((((a41 * b11) + (a42 * b21)) + (a43 * b31)) + (a44 * b41));
HXDLIN( 222)				te1[(int)7] = ((((a41 * b12) + (a42 * b22)) + (a43 * b32)) + (a44 * b42));
HXDLIN( 222)				te1[(int)11] = ((((a41 * b13) + (a42 * b23)) + (a43 * b33)) + (a44 * b43));
HXDLIN( 222)				te1[(int)15] = ((((a41 * b14) + (a42 * b24)) + (a43 * b34)) + (a44 * b44));
            			}
            		}
HXLINE( 224)		{
HXLINE( 224)			 ::phoenix::Matrix _this5 = this->local->matrix;
HXDLIN( 224)			 ::phoenix::Vector _v = this->local->scale;
HXDLIN( 224)			::Array< Float > te2 = _this5->elements;
HXDLIN( 224)			Float _x = _v->x;
HXDLIN( 224)			Float _y = _v->y;
HXDLIN( 224)			Float _z = _v->z;
HXDLIN( 224)			::Array< Float > te3 = te2;
HXDLIN( 224)			int _hx_tmp = (int)0;
HXDLIN( 224)			te3[_hx_tmp] = (te3->__get(_hx_tmp) * _x);
HXDLIN( 224)			::Array< Float > te4 = te2;
HXDLIN( 224)			int _hx_tmp1 = (int)4;
HXDLIN( 224)			te4[_hx_tmp1] = (te4->__get(_hx_tmp1) * _y);
HXDLIN( 224)			::Array< Float > te5 = te2;
HXDLIN( 224)			int _hx_tmp2 = (int)8;
HXDLIN( 224)			te5[_hx_tmp2] = (te5->__get(_hx_tmp2) * _z);
HXDLIN( 224)			::Array< Float > te6 = te2;
HXDLIN( 224)			int _hx_tmp3 = (int)1;
HXDLIN( 224)			te6[_hx_tmp3] = (te6->__get(_hx_tmp3) * _x);
HXDLIN( 224)			::Array< Float > te7 = te2;
HXDLIN( 224)			int _hx_tmp4 = (int)5;
HXDLIN( 224)			te7[_hx_tmp4] = (te7->__get(_hx_tmp4) * _y);
HXDLIN( 224)			::Array< Float > te8 = te2;
HXDLIN( 224)			int _hx_tmp5 = (int)9;
HXDLIN( 224)			te8[_hx_tmp5] = (te8->__get(_hx_tmp5) * _z);
HXDLIN( 224)			::Array< Float > te9 = te2;
HXDLIN( 224)			int _hx_tmp6 = (int)2;
HXDLIN( 224)			te9[_hx_tmp6] = (te9->__get(_hx_tmp6) * _x);
HXDLIN( 224)			::Array< Float > te10 = te2;
HXDLIN( 224)			int _hx_tmp7 = (int)6;
HXDLIN( 224)			te10[_hx_tmp7] = (te10->__get(_hx_tmp7) * _y);
HXDLIN( 224)			::Array< Float > te11 = te2;
HXDLIN( 224)			int _hx_tmp8 = (int)10;
HXDLIN( 224)			te11[_hx_tmp8] = (te11->__get(_hx_tmp8) * _z);
HXDLIN( 224)			::Array< Float > te12 = te2;
HXDLIN( 224)			int _hx_tmp9 = (int)3;
HXDLIN( 224)			te12[_hx_tmp9] = (te12->__get(_hx_tmp9) * _x);
HXDLIN( 224)			::Array< Float > te13 = te2;
HXDLIN( 224)			int _hx_tmp10 = (int)7;
HXDLIN( 224)			te13[_hx_tmp10] = (te13->__get(_hx_tmp10) * _y);
HXDLIN( 224)			::Array< Float > te14 = te2;
HXDLIN( 224)			int _hx_tmp11 = (int)11;
HXDLIN( 224)			te14[_hx_tmp11] = (te14->__get(_hx_tmp11) * _z);
            		}
HXLINE( 226)		{
HXLINE( 226)			 ::phoenix::Matrix _this6 = this->local->matrix;
HXDLIN( 226)			 ::phoenix::Vector _v1 = this->local->pos;
HXDLIN( 226)			::Array< Float > te15 = _this6->elements;
HXDLIN( 226)			te15[(int)12] = _v1->x;
HXDLIN( 226)			te15[(int)13] = _v1->y;
HXDLIN( 226)			te15[(int)14] = _v1->z;
            		}
HXLINE( 229)		{
HXLINE( 229)			 ::phoenix::Matrix _this7 = this->local->matrix;
HXDLIN( 229)			{
HXLINE( 229)				::Array< Float > ae1 = _this7->elements;
HXDLIN( 229)				::Array< Float > be1 = this->_origin_undo_matrix->elements;
HXDLIN( 229)				::Array< Float > te16 = _this7->elements;
HXDLIN( 229)				Float a111 = ae1->__get((int)0);
HXDLIN( 229)				Float a121 = ae1->__get((int)4);
HXDLIN( 229)				Float a131 = ae1->__get((int)8);
HXDLIN( 229)				Float a141 = ae1->__get((int)12);
HXDLIN( 229)				Float a211 = ae1->__get((int)1);
HXDLIN( 229)				Float a221 = ae1->__get((int)5);
HXDLIN( 229)				Float a231 = ae1->__get((int)9);
HXDLIN( 229)				Float a241 = ae1->__get((int)13);
HXDLIN( 229)				Float a311 = ae1->__get((int)2);
HXDLIN( 229)				Float a321 = ae1->__get((int)6);
HXDLIN( 229)				Float a331 = ae1->__get((int)10);
HXDLIN( 229)				Float a341 = ae1->__get((int)14);
HXDLIN( 229)				Float a411 = ae1->__get((int)3);
HXDLIN( 229)				Float a421 = ae1->__get((int)7);
HXDLIN( 229)				Float a431 = ae1->__get((int)11);
HXDLIN( 229)				Float a441 = ae1->__get((int)15);
HXDLIN( 229)				Float b111 = be1->__get((int)0);
HXDLIN( 229)				Float b121 = be1->__get((int)4);
HXDLIN( 229)				Float b131 = be1->__get((int)8);
HXDLIN( 229)				Float b141 = be1->__get((int)12);
HXDLIN( 229)				Float b211 = be1->__get((int)1);
HXDLIN( 229)				Float b221 = be1->__get((int)5);
HXDLIN( 229)				Float b231 = be1->__get((int)9);
HXDLIN( 229)				Float b241 = be1->__get((int)13);
HXDLIN( 229)				Float b311 = be1->__get((int)2);
HXDLIN( 229)				Float b321 = be1->__get((int)6);
HXDLIN( 229)				Float b331 = be1->__get((int)10);
HXDLIN( 229)				Float b341 = be1->__get((int)14);
HXDLIN( 229)				Float b411 = be1->__get((int)3);
HXDLIN( 229)				Float b421 = be1->__get((int)7);
HXDLIN( 229)				Float b431 = be1->__get((int)11);
HXDLIN( 229)				Float b441 = be1->__get((int)15);
HXDLIN( 229)				te16[(int)0] = ((((a111 * b111) + (a121 * b211)) + (a131 * b311)) + (a141 * b411));
HXDLIN( 229)				te16[(int)4] = ((((a111 * b121) + (a121 * b221)) + (a131 * b321)) + (a141 * b421));
HXDLIN( 229)				te16[(int)8] = ((((a111 * b131) + (a121 * b231)) + (a131 * b331)) + (a141 * b431));
HXDLIN( 229)				te16[(int)12] = ((((a111 * b141) + (a121 * b241)) + (a131 * b341)) + (a141 * b441));
HXDLIN( 229)				te16[(int)1] = ((((a211 * b111) + (a221 * b211)) + (a231 * b311)) + (a241 * b411));
HXDLIN( 229)				te16[(int)5] = ((((a211 * b121) + (a221 * b221)) + (a231 * b321)) + (a241 * b421));
HXDLIN( 229)				te16[(int)9] = ((((a211 * b131) + (a221 * b231)) + (a231 * b331)) + (a241 * b431));
HXDLIN( 229)				te16[(int)13] = ((((a211 * b141) + (a221 * b241)) + (a231 * b341)) + (a241 * b441));
HXDLIN( 229)				te16[(int)2] = ((((a311 * b111) + (a321 * b211)) + (a331 * b311)) + (a341 * b411));
HXDLIN( 229)				te16[(int)6] = ((((a311 * b121) + (a321 * b221)) + (a331 * b321)) + (a341 * b421));
HXDLIN( 229)				te16[(int)10] = ((((a311 * b131) + (a321 * b231)) + (a331 * b331)) + (a341 * b431));
HXDLIN( 229)				te16[(int)14] = ((((a311 * b141) + (a321 * b241)) + (a331 * b341)) + (a341 * b441));
HXDLIN( 229)				te16[(int)3] = ((((a411 * b111) + (a421 * b211)) + (a431 * b311)) + (a441 * b411));
HXDLIN( 229)				te16[(int)7] = ((((a411 * b121) + (a421 * b221)) + (a431 * b321)) + (a441 * b421));
HXDLIN( 229)				te16[(int)11] = ((((a411 * b131) + (a421 * b231)) + (a431 * b331)) + (a441 * b431));
HXDLIN( 229)				te16[(int)15] = ((((a411 * b141) + (a421 * b241)) + (a431 * b341)) + (a441 * b441));
            			}
            		}
HXLINE( 232)		if (hx::IsNotNull( this->parent )) {
HXLINE( 233)			 ::phoenix::Spatial _this8 = this->get_world();
HXDLIN( 233)			 ::phoenix::Matrix _this9 = this->get_world()->matrix;
HXDLIN( 233)			::Array< Float > ae2 = this->parent->get_world()->matrix->elements;
HXDLIN( 233)			::Array< Float > be2 = this->local->matrix->elements;
HXDLIN( 233)			::Array< Float > te17 = _this9->elements;
HXDLIN( 233)			Float a112 = ae2->__get((int)0);
HXDLIN( 233)			Float a122 = ae2->__get((int)4);
HXDLIN( 233)			Float a132 = ae2->__get((int)8);
HXDLIN( 233)			Float a142 = ae2->__get((int)12);
HXDLIN( 233)			Float a212 = ae2->__get((int)1);
HXDLIN( 233)			Float a222 = ae2->__get((int)5);
HXDLIN( 233)			Float a232 = ae2->__get((int)9);
HXDLIN( 233)			Float a242 = ae2->__get((int)13);
HXDLIN( 233)			Float a312 = ae2->__get((int)2);
HXDLIN( 233)			Float a322 = ae2->__get((int)6);
HXDLIN( 233)			Float a332 = ae2->__get((int)10);
HXDLIN( 233)			Float a342 = ae2->__get((int)14);
HXDLIN( 233)			Float a412 = ae2->__get((int)3);
HXDLIN( 233)			Float a422 = ae2->__get((int)7);
HXDLIN( 233)			Float a432 = ae2->__get((int)11);
HXDLIN( 233)			Float a442 = ae2->__get((int)15);
HXDLIN( 233)			Float b112 = be2->__get((int)0);
HXDLIN( 233)			Float b122 = be2->__get((int)4);
HXDLIN( 233)			Float b132 = be2->__get((int)8);
HXDLIN( 233)			Float b142 = be2->__get((int)12);
HXDLIN( 233)			Float b212 = be2->__get((int)1);
HXDLIN( 233)			Float b222 = be2->__get((int)5);
HXDLIN( 233)			Float b232 = be2->__get((int)9);
HXDLIN( 233)			Float b242 = be2->__get((int)13);
HXDLIN( 233)			Float b312 = be2->__get((int)2);
HXDLIN( 233)			Float b322 = be2->__get((int)6);
HXDLIN( 233)			Float b332 = be2->__get((int)10);
HXDLIN( 233)			Float b342 = be2->__get((int)14);
HXDLIN( 233)			Float b412 = be2->__get((int)3);
HXDLIN( 233)			Float b422 = be2->__get((int)7);
HXDLIN( 233)			Float b432 = be2->__get((int)11);
HXDLIN( 233)			Float b442 = be2->__get((int)15);
HXDLIN( 233)			te17[(int)0] = ((((a112 * b112) + (a122 * b212)) + (a132 * b312)) + (a142 * b412));
HXDLIN( 233)			te17[(int)4] = ((((a112 * b122) + (a122 * b222)) + (a132 * b322)) + (a142 * b422));
HXDLIN( 233)			te17[(int)8] = ((((a112 * b132) + (a122 * b232)) + (a132 * b332)) + (a142 * b432));
HXDLIN( 233)			te17[(int)12] = ((((a112 * b142) + (a122 * b242)) + (a132 * b342)) + (a142 * b442));
HXDLIN( 233)			te17[(int)1] = ((((a212 * b112) + (a222 * b212)) + (a232 * b312)) + (a242 * b412));
HXDLIN( 233)			te17[(int)5] = ((((a212 * b122) + (a222 * b222)) + (a232 * b322)) + (a242 * b422));
HXDLIN( 233)			te17[(int)9] = ((((a212 * b132) + (a222 * b232)) + (a232 * b332)) + (a242 * b432));
HXDLIN( 233)			te17[(int)13] = ((((a212 * b142) + (a222 * b242)) + (a232 * b342)) + (a242 * b442));
HXDLIN( 233)			te17[(int)2] = ((((a312 * b112) + (a322 * b212)) + (a332 * b312)) + (a342 * b412));
HXDLIN( 233)			te17[(int)6] = ((((a312 * b122) + (a322 * b222)) + (a332 * b322)) + (a342 * b422));
HXDLIN( 233)			te17[(int)10] = ((((a312 * b132) + (a322 * b232)) + (a332 * b332)) + (a342 * b432));
HXDLIN( 233)			te17[(int)14] = ((((a312 * b142) + (a322 * b242)) + (a332 * b342)) + (a342 * b442));
HXDLIN( 233)			te17[(int)3] = ((((a412 * b112) + (a422 * b212)) + (a432 * b312)) + (a442 * b412));
HXDLIN( 233)			te17[(int)7] = ((((a412 * b122) + (a422 * b222)) + (a432 * b322)) + (a442 * b422));
HXDLIN( 233)			te17[(int)11] = ((((a412 * b132) + (a422 * b232)) + (a432 * b332)) + (a442 * b432));
HXDLIN( 233)			te17[(int)15] = ((((a412 * b142) + (a422 * b242)) + (a432 * b342)) + (a442 * b442));
HXDLIN( 233)			 ::phoenix::Matrix _m = _this9;
HXDLIN( 233)			_this8->matrix = _m;
HXDLIN( 233)			if (hx::IsNotNull( _m )) {
HXLINE( 233)				 ::phoenix::Matrix _this10 = _this8->matrix;
HXDLIN( 233)				int i = (int)0;
HXDLIN( 233)				while((i < (int)16)){
HXLINE( 233)					{
HXLINE( 233)						 ::snow::api::buffers::ArrayBufferView this1 = _this10->_float32array;
HXDLIN( 233)						{
HXLINE( 233)							int this2 = this1->byteOffset;
HXDLIN( 233)							::__hxcpp_memory_set_float(this1->buffer,(this2 + (i * (int)4)),_this10->elements->__get(i));
            						}
            					}
HXDLIN( 233)					i = (i + (int)1);
            				}
HXDLIN( 233)				_this8->floats = _this10->_float32array;
            			}
            		}
            		else {
HXLINE( 235)			 ::phoenix::Matrix _this11 = this->get_world()->matrix;
HXDLIN( 235)			::Array< Float > me = this->local->matrix->elements;
HXDLIN( 235)			{
HXLINE( 235)				::Array< Float > e3 = _this11->elements;
HXDLIN( 235)				e3[(int)0] = me->__get((int)0);
HXDLIN( 235)				e3[(int)4] = me->__get((int)4);
HXDLIN( 235)				e3[(int)8] = me->__get((int)8);
HXDLIN( 235)				e3[(int)12] = me->__get((int)12);
HXDLIN( 235)				e3[(int)1] = me->__get((int)1);
HXDLIN( 235)				e3[(int)5] = me->__get((int)5);
HXDLIN( 235)				e3[(int)9] = me->__get((int)9);
HXDLIN( 235)				e3[(int)13] = me->__get((int)13);
HXDLIN( 235)				e3[(int)2] = me->__get((int)2);
HXDLIN( 235)				e3[(int)6] = me->__get((int)6);
HXDLIN( 235)				e3[(int)10] = me->__get((int)10);
HXDLIN( 235)				e3[(int)14] = me->__get((int)14);
HXDLIN( 235)				e3[(int)3] = me->__get((int)3);
HXDLIN( 235)				e3[(int)7] = me->__get((int)7);
HXDLIN( 235)				e3[(int)11] = me->__get((int)11);
HXDLIN( 235)				e3[(int)15] = me->__get((int)15);
            			}
            		}
HXLINE( 241)		{
HXLINE( 241)			 ::phoenix::Spatial _this12 = this->get_world();
HXDLIN( 241)			if (_this12->auto_decompose) {
HXLINE( 241)				 ::phoenix::Matrix _this13 = _this12->matrix;
HXDLIN( 241)				 ::phoenix::Vector _position = null();
HXDLIN( 241)				 ::phoenix::Quaternion _quaternion = null();
HXDLIN( 241)				 ::phoenix::Vector _scale = null();
HXDLIN( 241)				::Array< Float > te18 = _this13->elements;
HXDLIN( 241)				 ::phoenix::Matrix matrix =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXDLIN( 241)				Float _ax_x = te18->__get((int)0);
HXDLIN( 241)				Float _ax_y = te18->__get((int)1);
HXDLIN( 241)				Float _ax_z = te18->__get((int)2);
HXDLIN( 241)				Float _ay_x = te18->__get((int)4);
HXDLIN( 241)				Float _ay_y = te18->__get((int)5);
HXDLIN( 241)				Float _ay_z = te18->__get((int)6);
HXDLIN( 241)				Float _az_x = te18->__get((int)8);
HXDLIN( 241)				Float _az_y = te18->__get((int)9);
HXDLIN( 241)				Float _az_z = te18->__get((int)10);
HXDLIN( 241)				Float _ax_length = ::Math_obj::sqrt((((_ax_x * _ax_x) + (_ax_y * _ax_y)) + (_ax_z * _ax_z)));
HXDLIN( 241)				Float _ay_length = ::Math_obj::sqrt((((_ay_x * _ay_x) + (_ay_y * _ay_y)) + (_ay_z * _ay_z)));
HXDLIN( 241)				Float _az_length = ::Math_obj::sqrt((((_az_x * _az_x) + (_az_y * _az_y)) + (_az_z * _az_z)));
HXDLIN( 241)				if (hx::IsNull( _quaternion )) {
HXLINE( 241)					_quaternion =  ::phoenix::Quaternion_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            				}
HXDLIN( 241)				if (hx::IsNull( _position )) {
HXLINE( 241)					_position =  ::phoenix::Vector_obj::__alloc( HX_CTX ,te18->__get((int)12),te18->__get((int)13),te18->__get((int)14),null());
            				}
            				else {
HXLINE( 241)					{
HXLINE( 241)						Float _x1 = te18->__get((int)12);
HXDLIN( 241)						_position->x = _x1;
HXDLIN( 241)						if (!(_position->_construct)) {
HXLINE( 241)							bool _hx_tmp12;
HXDLIN( 241)							if (hx::IsNotNull( _position->listen_x )) {
HXLINE( 241)								_hx_tmp12 = !(_position->ignore_listeners);
            							}
            							else {
HXLINE( 241)								_hx_tmp12 = false;
            							}
HXDLIN( 241)							if (_hx_tmp12) {
HXLINE( 241)								_position->listen_x(_x1);
            							}
            						}
            					}
HXDLIN( 241)					{
HXLINE( 241)						Float _y1 = te18->__get((int)13);
HXDLIN( 241)						_position->y = _y1;
HXDLIN( 241)						if (!(_position->_construct)) {
HXLINE( 241)							bool _hx_tmp13;
HXDLIN( 241)							if (hx::IsNotNull( _position->listen_y )) {
HXLINE( 241)								_hx_tmp13 = !(_position->ignore_listeners);
            							}
            							else {
HXLINE( 241)								_hx_tmp13 = false;
            							}
HXDLIN( 241)							if (_hx_tmp13) {
HXLINE( 241)								_position->listen_y(_y1);
            							}
            						}
            					}
HXDLIN( 241)					{
HXLINE( 241)						Float _z1 = te18->__get((int)14);
HXDLIN( 241)						_position->z = _z1;
HXDLIN( 241)						if (!(_position->_construct)) {
HXLINE( 241)							bool _hx_tmp14;
HXDLIN( 241)							if (hx::IsNotNull( _position->listen_z )) {
HXLINE( 241)								_hx_tmp14 = !(_position->ignore_listeners);
            							}
            							else {
HXLINE( 241)								_hx_tmp14 = false;
            							}
HXDLIN( 241)							if (_hx_tmp14) {
HXLINE( 241)								_position->listen_z(_z1);
            							}
            						}
            					}
            				}
HXDLIN( 241)				if (hx::IsNull( _scale )) {
HXLINE( 241)					_scale =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_ax_length,_ay_length,_az_length,null());
            				}
            				else {
HXLINE( 241)					{
HXLINE( 241)						_scale->x = _ax_length;
HXDLIN( 241)						if (!(_scale->_construct)) {
HXLINE( 241)							bool _hx_tmp15;
HXDLIN( 241)							if (hx::IsNotNull( _scale->listen_x )) {
HXLINE( 241)								_hx_tmp15 = !(_scale->ignore_listeners);
            							}
            							else {
HXLINE( 241)								_hx_tmp15 = false;
            							}
HXDLIN( 241)							if (_hx_tmp15) {
HXLINE( 241)								_scale->listen_x(_ax_length);
            							}
            						}
            					}
HXDLIN( 241)					{
HXLINE( 241)						_scale->y = _ay_length;
HXDLIN( 241)						if (!(_scale->_construct)) {
HXLINE( 241)							bool _hx_tmp16;
HXDLIN( 241)							if (hx::IsNotNull( _scale->listen_y )) {
HXLINE( 241)								_hx_tmp16 = !(_scale->ignore_listeners);
            							}
            							else {
HXLINE( 241)								_hx_tmp16 = false;
            							}
HXDLIN( 241)							if (_hx_tmp16) {
HXLINE( 241)								_scale->listen_y(_ay_length);
            							}
            						}
            					}
HXDLIN( 241)					{
HXLINE( 241)						_scale->z = _az_length;
HXDLIN( 241)						if (!(_scale->_construct)) {
HXLINE( 241)							bool _hx_tmp17;
HXDLIN( 241)							if (hx::IsNotNull( _scale->listen_z )) {
HXLINE( 241)								_hx_tmp17 = !(_scale->ignore_listeners);
            							}
            							else {
HXLINE( 241)								_hx_tmp17 = false;
            							}
HXDLIN( 241)							if (_hx_tmp17) {
HXLINE( 241)								_scale->listen_z(_az_length);
            							}
            						}
            					}
            				}
HXDLIN( 241)				matrix->elements = _this13->elements->concat(::Array_obj< Float >::__new(0));
HXDLIN( 241)				::Array< Float > me1 = matrix->elements;
HXDLIN( 241)				::Array< Float > me2 = me1;
HXDLIN( 241)				int _hx_tmp18 = (int)0;
HXDLIN( 241)				me2[_hx_tmp18] = ((Float)me2->__get(_hx_tmp18) / (Float)_ax_length);
HXDLIN( 241)				::Array< Float > me3 = me1;
HXDLIN( 241)				int _hx_tmp19 = (int)1;
HXDLIN( 241)				me3[_hx_tmp19] = ((Float)me3->__get(_hx_tmp19) / (Float)_ax_length);
HXDLIN( 241)				::Array< Float > me4 = me1;
HXDLIN( 241)				int _hx_tmp20 = (int)2;
HXDLIN( 241)				me4[_hx_tmp20] = ((Float)me4->__get(_hx_tmp20) / (Float)_ax_length);
HXDLIN( 241)				::Array< Float > me5 = me1;
HXDLIN( 241)				int _hx_tmp21 = (int)4;
HXDLIN( 241)				me5[_hx_tmp21] = ((Float)me5->__get(_hx_tmp21) / (Float)_ay_length);
HXDLIN( 241)				::Array< Float > me6 = me1;
HXDLIN( 241)				int _hx_tmp22 = (int)5;
HXDLIN( 241)				me6[_hx_tmp22] = ((Float)me6->__get(_hx_tmp22) / (Float)_ay_length);
HXDLIN( 241)				::Array< Float > me7 = me1;
HXDLIN( 241)				int _hx_tmp23 = (int)6;
HXDLIN( 241)				me7[_hx_tmp23] = ((Float)me7->__get(_hx_tmp23) / (Float)_ay_length);
HXDLIN( 241)				::Array< Float > me8 = me1;
HXDLIN( 241)				int _hx_tmp24 = (int)8;
HXDLIN( 241)				me8[_hx_tmp24] = ((Float)me8->__get(_hx_tmp24) / (Float)_az_length);
HXDLIN( 241)				::Array< Float > me9 = me1;
HXDLIN( 241)				int _hx_tmp25 = (int)9;
HXDLIN( 241)				me9[_hx_tmp25] = ((Float)me9->__get(_hx_tmp25) / (Float)_az_length);
HXDLIN( 241)				::Array< Float > me10 = me1;
HXDLIN( 241)				int _hx_tmp26 = (int)10;
HXDLIN( 241)				me10[_hx_tmp26] = ((Float)me10->__get(_hx_tmp26) / (Float)_az_length);
HXDLIN( 241)				_quaternion->setFromRotationMatrix(matrix);
HXDLIN( 241)				if (hx::IsNull( _this13->_transform )) {
HXLINE( 241)					_this13->_transform =  ::phoenix::MatrixTransform_obj::__alloc( HX_CTX ,_position,_quaternion,_scale);
            				}
            				else {
HXLINE( 241)					_this13->_transform->pos = _position;
HXDLIN( 241)					_this13->_transform->rotation = _quaternion;
HXDLIN( 241)					_this13->_transform->scale = _scale;
            				}
HXDLIN( 241)				 ::phoenix::MatrixTransform _transform = _this13->_transform;
HXDLIN( 241)				{
HXLINE( 241)					 ::phoenix::Vector _p = _transform->pos;
HXDLIN( 241)					_this12->pos = _p;
HXDLIN( 241)					if (hx::IsNotNull( _p )) {
HXLINE( 241)						{
HXLINE( 241)							 ::phoenix::Vector _v2 = _this12->pos;
HXDLIN( 241)							 ::Dynamic listener = _this12->_pos_change_dyn();
HXDLIN( 241)							_v2->listen_x = listener;
HXDLIN( 241)							_v2->listen_y = listener;
HXDLIN( 241)							_v2->listen_z = listener;
            						}
HXDLIN( 241)						{
HXLINE( 241)							bool _hx_tmp27;
HXDLIN( 241)							if (hx::IsNotNull( _this12->pos_changed )) {
HXLINE( 241)								_hx_tmp27 = !(_this12->ignore_listeners);
            							}
            							else {
HXLINE( 241)								_hx_tmp27 = false;
            							}
HXDLIN( 241)							if (_hx_tmp27) {
HXLINE( 241)								_this12->pos_changed(_this12->pos);
            							}
            						}
            					}
            				}
HXDLIN( 241)				{
HXLINE( 241)					 ::phoenix::Quaternion _r = _transform->rotation;
HXDLIN( 241)					_this12->rotation = _r;
HXDLIN( 241)					if (hx::IsNotNull( _r )) {
HXLINE( 241)						{
HXLINE( 241)							 ::phoenix::Quaternion _q = _this12->rotation;
HXDLIN( 241)							 ::Dynamic listener1 = _this12->_rotation_change_dyn();
HXDLIN( 241)							_q->listen_x = listener1;
HXDLIN( 241)							_q->listen_y = listener1;
HXDLIN( 241)							_q->listen_z = listener1;
HXDLIN( 241)							_q->listen_w = listener1;
            						}
HXDLIN( 241)						{
HXLINE( 241)							bool _hx_tmp28;
HXDLIN( 241)							if (hx::IsNotNull( _this12->rotation_changed )) {
HXLINE( 241)								_hx_tmp28 = !(_this12->ignore_listeners);
            							}
            							else {
HXLINE( 241)								_hx_tmp28 = false;
            							}
HXDLIN( 241)							if (_hx_tmp28) {
HXLINE( 241)								_this12->rotation_changed(_this12->rotation);
            							}
            						}
            					}
            				}
HXDLIN( 241)				{
HXLINE( 241)					 ::phoenix::Vector _s = _transform->scale;
HXDLIN( 241)					_this12->scale = _s;
HXDLIN( 241)					if (hx::IsNotNull( _s )) {
HXLINE( 241)						{
HXLINE( 241)							 ::phoenix::Vector _v3 = _this12->scale;
HXDLIN( 241)							 ::Dynamic listener2 = _this12->_scale_change_dyn();
HXDLIN( 241)							_v3->listen_x = listener2;
HXDLIN( 241)							_v3->listen_y = listener2;
HXDLIN( 241)							_v3->listen_z = listener2;
            						}
HXDLIN( 241)						{
HXLINE( 241)							bool _hx_tmp29;
HXDLIN( 241)							if (hx::IsNotNull( _this12->scale_changed )) {
HXLINE( 241)								_hx_tmp29 = !(_this12->ignore_listeners);
            							}
            							else {
HXLINE( 241)								_hx_tmp29 = false;
            							}
HXDLIN( 241)							if (_hx_tmp29) {
HXLINE( 241)								_this12->scale_changed(_this12->scale);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 244)		{
HXLINE( 244)			this->dirty = false;
HXDLIN( 244)			bool _hx_tmp30;
HXDLIN( 244)			bool _hx_tmp31;
HXDLIN( 244)			bool _hx_tmp32;
HXDLIN( 244)			if (this->dirty) {
HXLINE( 244)				_hx_tmp32 = !(this->_setup);
            			}
            			else {
HXLINE( 244)				_hx_tmp32 = false;
            			}
HXDLIN( 244)			if (_hx_tmp32) {
HXLINE( 244)				_hx_tmp31 = hx::IsNotNull( this->_dirty_handlers );
            			}
            			else {
HXLINE( 244)				_hx_tmp31 = false;
            			}
HXDLIN( 244)			if (_hx_tmp31) {
HXLINE( 244)				_hx_tmp30 = (this->_dirty_handlers->length > (int)0);
            			}
            			else {
HXLINE( 244)				_hx_tmp30 = false;
            			}
HXDLIN( 244)			if (_hx_tmp30) {
HXLINE( 244)				int _g = (int)0;
HXDLIN( 244)				::Array< ::Dynamic> _g1 = this->_dirty_handlers;
HXDLIN( 244)				while((_g < _g1->length)){
HXLINE( 244)					 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 244)					_g = (_g + (int)1);
HXDLIN( 244)					if (hx::IsNotNull( _handler )) {
HXLINE( 244)						_handler(hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
HXLINE( 245)		this->_cleaning = false;
HXLINE( 247)		bool _hx_tmp33;
HXDLIN( 247)		if (hx::IsNotNull( this->_clean_handlers )) {
HXLINE( 247)			_hx_tmp33 = (this->_clean_handlers->length > (int)0);
            		}
            		else {
HXLINE( 247)			_hx_tmp33 = false;
            		}
HXDLIN( 247)		if (_hx_tmp33) {
HXLINE( 249)			int _g2 = (int)0;
HXDLIN( 249)			::Array< ::Dynamic> _g11 = this->_clean_handlers;
HXDLIN( 249)			while((_g2 < _g11->length)){
HXLINE( 249)				 ::Dynamic _handler1 = _g11->__get(_g2);
HXDLIN( 249)				_g2 = (_g2 + (int)1);
HXDLIN( 249)				if (hx::IsNotNull( _handler1 )) {
HXLINE( 249)					_handler1(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,clean,(void))

::String Transform_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_255_toString)
HXDLIN( 255)		return ((HX_("Transform (",54,14,fd,16) + this->id) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,toString,return )

 ::phoenix::Vector Transform_obj::get_origin(){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_260_get_origin)
HXDLIN( 260)		return this->origin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,get_origin,return )

 ::phoenix::Vector Transform_obj::set_origin( ::phoenix::Vector o){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_264_set_origin)
HXLINE( 266)		{
HXLINE( 266)			this->dirty = true;
HXDLIN( 266)			bool _hx_tmp;
HXDLIN( 266)			bool _hx_tmp1;
HXDLIN( 266)			bool _hx_tmp2;
HXDLIN( 266)			if (this->dirty) {
HXLINE( 266)				_hx_tmp2 = !(this->_setup);
            			}
            			else {
HXLINE( 266)				_hx_tmp2 = false;
            			}
HXDLIN( 266)			if (_hx_tmp2) {
HXLINE( 266)				_hx_tmp1 = hx::IsNotNull( this->_dirty_handlers );
            			}
            			else {
HXLINE( 266)				_hx_tmp1 = false;
            			}
HXDLIN( 266)			if (_hx_tmp1) {
HXLINE( 266)				_hx_tmp = (this->_dirty_handlers->length > (int)0);
            			}
            			else {
HXLINE( 266)				_hx_tmp = false;
            			}
HXDLIN( 266)			if (_hx_tmp) {
HXLINE( 266)				int _g = (int)0;
HXDLIN( 266)				::Array< ::Dynamic> _g1 = this->_dirty_handlers;
HXDLIN( 266)				while((_g < _g1->length)){
HXLINE( 266)					 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 266)					_g = (_g + (int)1);
HXDLIN( 266)					if (hx::IsNotNull( _handler )) {
HXLINE( 266)						_handler(hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
HXLINE( 268)		this->origin = o;
HXLINE( 270)		bool _hx_tmp3;
HXDLIN( 270)		if (hx::IsNotNull( this->_origin_handlers )) {
HXLINE( 270)			_hx_tmp3 = (this->_origin_handlers->length > (int)0);
            		}
            		else {
HXLINE( 270)			_hx_tmp3 = false;
            		}
HXDLIN( 270)		if (_hx_tmp3) {
HXLINE( 272)			 ::phoenix::Vector _origin = this->origin;
HXDLIN( 272)			{
HXLINE( 272)				int _g2 = (int)0;
HXDLIN( 272)				::Array< ::Dynamic> _g11 = this->_origin_handlers;
HXDLIN( 272)				while((_g2 < _g11->length)){
HXLINE( 272)					 ::Dynamic _handler1 = _g11->__get(_g2);
HXDLIN( 272)					_g2 = (_g2 + (int)1);
HXDLIN( 272)					if (hx::IsNotNull( _handler1 )) {
HXLINE( 272)						_handler1(_origin);
            					}
            				}
            			}
            		}
HXLINE( 275)		return this->origin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,set_origin,return )

 ::phoenix::Spatial Transform_obj::set_world( ::phoenix::Spatial w){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_279_set_world)
HXLINE( 281)		if (hx::IsNull( w )) {
HXLINE( 282)			return (this->world = w);
            		}
HXLINE( 285)		{
HXLINE( 285)			this->dirty = true;
HXDLIN( 285)			bool _hx_tmp;
HXDLIN( 285)			bool _hx_tmp1;
HXDLIN( 285)			bool _hx_tmp2;
HXDLIN( 285)			if (this->dirty) {
HXLINE( 285)				_hx_tmp2 = !(this->_setup);
            			}
            			else {
HXLINE( 285)				_hx_tmp2 = false;
            			}
HXDLIN( 285)			if (_hx_tmp2) {
HXLINE( 285)				_hx_tmp1 = hx::IsNotNull( this->_dirty_handlers );
            			}
            			else {
HXLINE( 285)				_hx_tmp1 = false;
            			}
HXDLIN( 285)			if (_hx_tmp1) {
HXLINE( 285)				_hx_tmp = (this->_dirty_handlers->length > (int)0);
            			}
            			else {
HXLINE( 285)				_hx_tmp = false;
            			}
HXDLIN( 285)			if (_hx_tmp) {
HXLINE( 285)				int _g = (int)0;
HXDLIN( 285)				::Array< ::Dynamic> _g1 = this->_dirty_handlers;
HXDLIN( 285)				while((_g < _g1->length)){
HXLINE( 285)					 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 285)					_g = (_g + (int)1);
HXDLIN( 285)					if (hx::IsNotNull( _handler )) {
HXLINE( 285)						_handler(hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
HXLINE( 287)		return (this->world = w);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,set_world,return )

 ::phoenix::Transform Transform_obj::get_parent(){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_293_get_parent)
HXDLIN( 293)		return this->parent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,get_parent,return )

 ::phoenix::Transform Transform_obj::set_parent( ::phoenix::Transform _p){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_297_set_parent)
HXLINE( 299)		{
HXLINE( 299)			this->dirty = true;
HXDLIN( 299)			bool _hx_tmp;
HXDLIN( 299)			bool _hx_tmp1;
HXDLIN( 299)			bool _hx_tmp2;
HXDLIN( 299)			if (this->dirty) {
HXLINE( 299)				_hx_tmp2 = !(this->_setup);
            			}
            			else {
HXLINE( 299)				_hx_tmp2 = false;
            			}
HXDLIN( 299)			if (_hx_tmp2) {
HXLINE( 299)				_hx_tmp1 = hx::IsNotNull( this->_dirty_handlers );
            			}
            			else {
HXLINE( 299)				_hx_tmp1 = false;
            			}
HXDLIN( 299)			if (_hx_tmp1) {
HXLINE( 299)				_hx_tmp = (this->_dirty_handlers->length > (int)0);
            			}
            			else {
HXLINE( 299)				_hx_tmp = false;
            			}
HXDLIN( 299)			if (_hx_tmp) {
HXLINE( 299)				int _g = (int)0;
HXDLIN( 299)				::Array< ::Dynamic> _g1 = this->_dirty_handlers;
HXDLIN( 299)				while((_g < _g1->length)){
HXLINE( 299)					 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 299)					_g = (_g + (int)1);
HXDLIN( 299)					if (hx::IsNotNull( _handler )) {
HXLINE( 299)						_handler(hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
HXLINE( 302)		if (hx::IsNotNull( this->parent )) {
HXLINE( 303)			 ::phoenix::Transform _this = this->parent;
HXDLIN( 303)			if (hx::IsNotNull( _this->_clean_handlers )) {
HXLINE( 303)				_this->_clean_handlers->remove(this->on_parent_cleaned_dyn());
            			}
            		}
HXLINE( 306)		this->parent = _p;
HXLINE( 308)		bool _hx_tmp3;
HXDLIN( 308)		if (hx::IsNotNull( this->_parent_handlers )) {
HXLINE( 308)			_hx_tmp3 = (this->_parent_handlers->length > (int)0);
            		}
            		else {
HXLINE( 308)			_hx_tmp3 = false;
            		}
HXDLIN( 308)		if (_hx_tmp3) {
HXLINE( 310)			 ::phoenix::Transform _parent = this->parent;
HXDLIN( 310)			{
HXLINE( 310)				int _g2 = (int)0;
HXDLIN( 310)				::Array< ::Dynamic> _g11 = this->_parent_handlers;
HXDLIN( 310)				while((_g2 < _g11->length)){
HXLINE( 310)					 ::Dynamic _handler1 = _g11->__get(_g2);
HXDLIN( 310)					_g2 = (_g2 + (int)1);
HXDLIN( 310)					if (hx::IsNotNull( _handler1 )) {
HXLINE( 310)						_handler1(_parent);
            					}
            				}
            			}
            		}
HXLINE( 313)		if (hx::IsNotNull( this->parent )) {
HXLINE( 316)			 ::phoenix::Transform _this1 = this->parent;
HXDLIN( 316)			if (hx::IsNull( _this1->_clean_handlers )) {
HXLINE( 316)				_this1->_clean_handlers = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXDLIN( 316)			_this1->_clean_handlers->push(this->on_parent_cleaned_dyn());
            		}
HXLINE( 319)		return this->parent;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,set_parent,return )

 ::phoenix::Vector Transform_obj::get_pos(){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_324_get_pos)
HXDLIN( 324)		return this->local->pos;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,get_pos,return )

 ::phoenix::Quaternion Transform_obj::get_rotation(){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_328_get_rotation)
HXDLIN( 328)		return this->local->rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,get_rotation,return )

 ::phoenix::Vector Transform_obj::get_scale(){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_332_get_scale)
HXDLIN( 332)		return this->local->scale;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,get_scale,return )

 ::phoenix::Vector Transform_obj::set_pos( ::phoenix::Vector value){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_337_set_pos)
HXDLIN( 337)		 ::phoenix::Spatial _this = this->local;
HXDLIN( 337)		_this->pos = value;
HXDLIN( 337)		if (hx::IsNotNull( value )) {
HXDLIN( 337)			{
HXDLIN( 337)				 ::phoenix::Vector _v = _this->pos;
HXDLIN( 337)				 ::Dynamic listener = _this->_pos_change_dyn();
HXDLIN( 337)				_v->listen_x = listener;
HXDLIN( 337)				_v->listen_y = listener;
HXDLIN( 337)				_v->listen_z = listener;
            			}
HXDLIN( 337)			{
HXDLIN( 337)				bool _hx_tmp;
HXDLIN( 337)				if (hx::IsNotNull( _this->pos_changed )) {
HXDLIN( 337)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXDLIN( 337)					_hx_tmp = false;
            				}
HXDLIN( 337)				if (_hx_tmp) {
HXDLIN( 337)					_this->pos_changed(_this->pos);
            				}
            			}
            		}
HXDLIN( 337)		return _this->pos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,set_pos,return )

 ::phoenix::Quaternion Transform_obj::set_rotation( ::phoenix::Quaternion value){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_341_set_rotation)
HXDLIN( 341)		 ::phoenix::Spatial _this = this->local;
HXDLIN( 341)		_this->rotation = value;
HXDLIN( 341)		if (hx::IsNotNull( value )) {
HXDLIN( 341)			{
HXDLIN( 341)				 ::phoenix::Quaternion _q = _this->rotation;
HXDLIN( 341)				 ::Dynamic listener = _this->_rotation_change_dyn();
HXDLIN( 341)				_q->listen_x = listener;
HXDLIN( 341)				_q->listen_y = listener;
HXDLIN( 341)				_q->listen_z = listener;
HXDLIN( 341)				_q->listen_w = listener;
            			}
HXDLIN( 341)			{
HXDLIN( 341)				bool _hx_tmp;
HXDLIN( 341)				if (hx::IsNotNull( _this->rotation_changed )) {
HXDLIN( 341)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXDLIN( 341)					_hx_tmp = false;
            				}
HXDLIN( 341)				if (_hx_tmp) {
HXDLIN( 341)					_this->rotation_changed(_this->rotation);
            				}
            			}
            		}
HXDLIN( 341)		return _this->rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,set_rotation,return )

 ::phoenix::Vector Transform_obj::set_scale( ::phoenix::Vector value){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_345_set_scale)
HXDLIN( 345)		 ::phoenix::Spatial _this = this->local;
HXDLIN( 345)		_this->scale = value;
HXDLIN( 345)		if (hx::IsNotNull( value )) {
HXDLIN( 345)			{
HXDLIN( 345)				 ::phoenix::Vector _v = _this->scale;
HXDLIN( 345)				 ::Dynamic listener = _this->_scale_change_dyn();
HXDLIN( 345)				_v->listen_x = listener;
HXDLIN( 345)				_v->listen_y = listener;
HXDLIN( 345)				_v->listen_z = listener;
            			}
HXDLIN( 345)			{
HXDLIN( 345)				bool _hx_tmp;
HXDLIN( 345)				if (hx::IsNotNull( _this->scale_changed )) {
HXDLIN( 345)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXDLIN( 345)					_hx_tmp = false;
            				}
HXDLIN( 345)				if (_hx_tmp) {
HXDLIN( 345)					_this->scale_changed(_this->scale);
            				}
            			}
            		}
HXDLIN( 345)		return _this->scale;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,set_scale,return )

void Transform_obj::propagate_clean(){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_350_propagate_clean)
HXDLIN( 350)		int _g = (int)0;
HXDLIN( 350)		::Array< ::Dynamic> _g1 = this->_clean_handlers;
HXDLIN( 350)		while((_g < _g1->length)){
HXDLIN( 350)			 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 350)			_g = (_g + (int)1);
HXLINE( 351)			if (hx::IsNotNull( _handler )) {
HXLINE( 352)				_handler(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,propagate_clean,(void))

void Transform_obj::propagate_dirty(){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_358_propagate_dirty)
HXDLIN( 358)		int _g = (int)0;
HXDLIN( 358)		::Array< ::Dynamic> _g1 = this->_dirty_handlers;
HXDLIN( 358)		while((_g < _g1->length)){
HXDLIN( 358)			 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 358)			_g = (_g + (int)1);
HXLINE( 359)			if (hx::IsNotNull( _handler )) {
HXLINE( 360)				_handler(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,propagate_dirty,(void))

void Transform_obj::propagate_pos( ::phoenix::Vector _pos){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_366_propagate_pos)
HXDLIN( 366)		int _g = (int)0;
HXDLIN( 366)		::Array< ::Dynamic> _g1 = this->_pos_handlers;
HXDLIN( 366)		while((_g < _g1->length)){
HXDLIN( 366)			 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 366)			_g = (_g + (int)1);
HXLINE( 367)			if (hx::IsNotNull( _handler )) {
HXLINE( 368)				_handler(_pos);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,propagate_pos,(void))

void Transform_obj::propagate_rotation( ::phoenix::Quaternion _rotation){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_374_propagate_rotation)
HXDLIN( 374)		int _g = (int)0;
HXDLIN( 374)		::Array< ::Dynamic> _g1 = this->_rotation_handlers;
HXDLIN( 374)		while((_g < _g1->length)){
HXDLIN( 374)			 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 374)			_g = (_g + (int)1);
HXLINE( 375)			if (hx::IsNotNull( _handler )) {
HXLINE( 376)				_handler(_rotation);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,propagate_rotation,(void))

void Transform_obj::propagate_scale( ::phoenix::Vector _scale){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_382_propagate_scale)
HXDLIN( 382)		int _g = (int)0;
HXDLIN( 382)		::Array< ::Dynamic> _g1 = this->_scale_handlers;
HXDLIN( 382)		while((_g < _g1->length)){
HXDLIN( 382)			 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 382)			_g = (_g + (int)1);
HXLINE( 383)			if (hx::IsNotNull( _handler )) {
HXLINE( 384)				_handler(_scale);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,propagate_scale,(void))

void Transform_obj::propagate_origin( ::phoenix::Vector _origin){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_390_propagate_origin)
HXDLIN( 390)		int _g = (int)0;
HXDLIN( 390)		::Array< ::Dynamic> _g1 = this->_origin_handlers;
HXDLIN( 390)		while((_g < _g1->length)){
HXDLIN( 390)			 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 390)			_g = (_g + (int)1);
HXLINE( 391)			if (hx::IsNotNull( _handler )) {
HXLINE( 392)				_handler(_origin);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,propagate_origin,(void))

void Transform_obj::propagate_parent( ::phoenix::Transform _parent){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_398_propagate_parent)
HXDLIN( 398)		int _g = (int)0;
HXDLIN( 398)		::Array< ::Dynamic> _g1 = this->_parent_handlers;
HXDLIN( 398)		while((_g < _g1->length)){
HXDLIN( 398)			 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 398)			_g = (_g + (int)1);
HXLINE( 399)			if (hx::IsNotNull( _handler )) {
HXLINE( 400)				_handler(_parent);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,propagate_parent,(void))

void Transform_obj::listen( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_405_listen)
HXLINE( 407)		if (hx::IsNull( this->_clean_handlers )) {
HXLINE( 408)			this->_clean_handlers = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 411)		this->_clean_handlers->push(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,listen,(void))

bool Transform_obj::unlisten( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_415_unlisten)
HXLINE( 417)		if (hx::IsNull( this->_clean_handlers )) {
HXLINE( 418)			return false;
            		}
HXLINE( 421)		return this->_clean_handlers->remove(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,unlisten,return )

void Transform_obj::listen_dirty( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_425_listen_dirty)
HXLINE( 427)		if (hx::IsNull( this->_dirty_handlers )) {
HXLINE( 428)			this->_dirty_handlers = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 431)		this->_dirty_handlers->push(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,listen_dirty,(void))

bool Transform_obj::unlisten_dirty( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_435_unlisten_dirty)
HXLINE( 437)		if (hx::IsNull( this->_dirty_handlers )) {
HXLINE( 438)			return false;
            		}
HXLINE( 441)		return this->_dirty_handlers->remove(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,unlisten_dirty,return )

void Transform_obj::listen_pos( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_445_listen_pos)
HXLINE( 447)		if (hx::IsNull( this->_pos_handlers )) {
HXLINE( 448)			this->_pos_handlers = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 451)		this->_pos_handlers->push(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,listen_pos,(void))

bool Transform_obj::unlisten_pos( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_455_unlisten_pos)
HXLINE( 457)		if (hx::IsNull( this->_pos_handlers )) {
HXLINE( 458)			return false;
            		}
HXLINE( 461)		return this->_pos_handlers->remove(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,unlisten_pos,return )

void Transform_obj::listen_scale( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_465_listen_scale)
HXLINE( 467)		if (hx::IsNull( this->_scale_handlers )) {
HXLINE( 468)			this->_scale_handlers = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 471)		this->_scale_handlers->push(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,listen_scale,(void))

bool Transform_obj::unlisten_scale( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_475_unlisten_scale)
HXLINE( 477)		if (hx::IsNull( this->_scale_handlers )) {
HXLINE( 478)			return false;
            		}
HXLINE( 481)		return this->_scale_handlers->remove(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,unlisten_scale,return )

void Transform_obj::listen_rotation( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_485_listen_rotation)
HXLINE( 487)		if (hx::IsNull( this->_rotation_handlers )) {
HXLINE( 488)			this->_rotation_handlers = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 491)		this->_rotation_handlers->push(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,listen_rotation,(void))

bool Transform_obj::unlisten_rotation( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_495_unlisten_rotation)
HXLINE( 497)		if (hx::IsNull( this->_rotation_handlers )) {
HXLINE( 498)			return false;
            		}
HXLINE( 501)		return this->_rotation_handlers->remove(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,unlisten_rotation,return )

void Transform_obj::listen_origin( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_505_listen_origin)
HXLINE( 507)		if (hx::IsNull( this->_origin_handlers )) {
HXLINE( 508)			this->_origin_handlers = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 511)		this->_origin_handlers->push(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,listen_origin,(void))

bool Transform_obj::unlisten_origin( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_515_unlisten_origin)
HXLINE( 517)		if (hx::IsNull( this->_origin_handlers )) {
HXLINE( 518)			return false;
            		}
HXLINE( 521)		return this->_origin_handlers->remove(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,unlisten_origin,return )

void Transform_obj::listen_parent( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_525_listen_parent)
HXLINE( 527)		if (hx::IsNull( this->_parent_handlers )) {
HXLINE( 528)			this->_parent_handlers = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 531)		this->_parent_handlers->push(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,listen_parent,(void))

bool Transform_obj::unlisten_parent( ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_8c1c71d6e42c3e51_535_unlisten_parent)
HXLINE( 537)		if (hx::IsNull( this->_parent_handlers )) {
HXLINE( 538)			return false;
            		}
HXLINE( 541)		return this->_parent_handlers->remove(_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,unlisten_parent,return )


hx::ObjectPtr< Transform_obj > Transform_obj::__new() {
	hx::ObjectPtr< Transform_obj > __this = new Transform_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Transform_obj > Transform_obj::__alloc(hx::Ctx *_hx_ctx) {
	Transform_obj *__this = (Transform_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Transform_obj), true, "phoenix.Transform"));
	*(void **)__this = Transform_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Transform_obj::Transform_obj()
{
}

void Transform_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Transform);
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(local,"local");
	HX_MARK_MEMBER_NAME(world,"world");
	HX_MARK_MEMBER_NAME(origin,"origin");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	HX_MARK_MEMBER_NAME(manual_update,"manual_update");
	HX_MARK_MEMBER_NAME(_origin_undo_matrix,"_origin_undo_matrix");
	HX_MARK_MEMBER_NAME(_pos_matrix,"_pos_matrix");
	HX_MARK_MEMBER_NAME(_rotation_matrix,"_rotation_matrix");
	HX_MARK_MEMBER_NAME(_setup,"_setup");
	HX_MARK_MEMBER_NAME(_cleaning,"_cleaning");
	HX_MARK_MEMBER_NAME(_clean_handlers,"_clean_handlers");
	HX_MARK_MEMBER_NAME(_dirty_handlers,"_dirty_handlers");
	HX_MARK_MEMBER_NAME(_pos_handlers,"_pos_handlers");
	HX_MARK_MEMBER_NAME(_rotation_handlers,"_rotation_handlers");
	HX_MARK_MEMBER_NAME(_scale_handlers,"_scale_handlers");
	HX_MARK_MEMBER_NAME(_origin_handlers,"_origin_handlers");
	HX_MARK_MEMBER_NAME(_parent_handlers,"_parent_handlers");
	HX_MARK_MEMBER_NAME(_destroying,"_destroying");
	 ::luxe::ID_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Transform_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(local,"local");
	HX_VISIT_MEMBER_NAME(world,"world");
	HX_VISIT_MEMBER_NAME(origin,"origin");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	HX_VISIT_MEMBER_NAME(manual_update,"manual_update");
	HX_VISIT_MEMBER_NAME(_origin_undo_matrix,"_origin_undo_matrix");
	HX_VISIT_MEMBER_NAME(_pos_matrix,"_pos_matrix");
	HX_VISIT_MEMBER_NAME(_rotation_matrix,"_rotation_matrix");
	HX_VISIT_MEMBER_NAME(_setup,"_setup");
	HX_VISIT_MEMBER_NAME(_cleaning,"_cleaning");
	HX_VISIT_MEMBER_NAME(_clean_handlers,"_clean_handlers");
	HX_VISIT_MEMBER_NAME(_dirty_handlers,"_dirty_handlers");
	HX_VISIT_MEMBER_NAME(_pos_handlers,"_pos_handlers");
	HX_VISIT_MEMBER_NAME(_rotation_handlers,"_rotation_handlers");
	HX_VISIT_MEMBER_NAME(_scale_handlers,"_scale_handlers");
	HX_VISIT_MEMBER_NAME(_origin_handlers,"_origin_handlers");
	HX_VISIT_MEMBER_NAME(_parent_handlers,"_parent_handlers");
	HX_VISIT_MEMBER_NAME(_destroying,"_destroying");
	 ::luxe::ID_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Transform_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pos() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"local") ) { return hx::Val( inCallProp == hx::paccAlways ? get_local() : local ); }
		if (HX_FIELD_EQ(inName,"world") ) { return hx::Val( inCallProp == hx::paccAlways ? get_world() : world ); }
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( dirty ); }
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scale() ); }
		if (HX_FIELD_EQ(inName,"clean") ) { return hx::Val( clean_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( inCallProp == hx::paccAlways ? get_parent() : parent ); }
		if (HX_FIELD_EQ(inName,"origin") ) { return hx::Val( inCallProp == hx::paccAlways ? get_origin() : origin ); }
		if (HX_FIELD_EQ(inName,"_setup") ) { return hx::Val( _setup ); }
		if (HX_FIELD_EQ(inName,"listen") ) { return hx::Val( listen_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_pos") ) { return hx::Val( get_pos_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pos") ) { return hx::Val( set_pos_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotation() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlisten") ) { return hx::Val( unlisten_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_cleaning") ) { return hx::Val( _cleaning ); }
		if (HX_FIELD_EQ(inName,"set_dirty") ) { return hx::Val( set_dirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_local") ) { return hx::Val( get_local_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_local") ) { return hx::Val( set_local_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_world") ) { return hx::Val( get_world_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_world") ) { return hx::Val( set_world_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scale") ) { return hx::Val( get_scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scale") ) { return hx::Val( set_scale_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_origin") ) { return hx::Val( get_origin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_origin") ) { return hx::Val( set_origin_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_parent") ) { return hx::Val( get_parent_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_parent") ) { return hx::Val( set_parent_dyn() ); }
		if (HX_FIELD_EQ(inName,"listen_pos") ) { return hx::Val( listen_pos_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_pos_matrix") ) { return hx::Val( _pos_matrix ); }
		if (HX_FIELD_EQ(inName,"_destroying") ) { return hx::Val( _destroying ); }
		if (HX_FIELD_EQ(inName,"clean_check") ) { return hx::Val( clean_check_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return hx::Val( get_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"listen_dirty") ) { return hx::Val( listen_dirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlisten_pos") ) { return hx::Val( unlisten_pos_dyn() ); }
		if (HX_FIELD_EQ(inName,"listen_scale") ) { return hx::Val( listen_scale_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"manual_update") ) { return hx::Val( manual_update ); }
		if (HX_FIELD_EQ(inName,"_pos_handlers") ) { return hx::Val( _pos_handlers ); }
		if (HX_FIELD_EQ(inName,"propagate_pos") ) { return hx::Val( propagate_pos_dyn() ); }
		if (HX_FIELD_EQ(inName,"listen_origin") ) { return hx::Val( listen_origin_dyn() ); }
		if (HX_FIELD_EQ(inName,"listen_parent") ) { return hx::Val( listen_parent_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"unlisten_dirty") ) { return hx::Val( unlisten_dirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlisten_scale") ) { return hx::Val( unlisten_scale_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_clean_handlers") ) { return hx::Val( _clean_handlers ); }
		if (HX_FIELD_EQ(inName,"_dirty_handlers") ) { return hx::Val( _dirty_handlers ); }
		if (HX_FIELD_EQ(inName,"_scale_handlers") ) { return hx::Val( _scale_handlers ); }
		if (HX_FIELD_EQ(inName,"propagate_clean") ) { return hx::Val( propagate_clean_dyn() ); }
		if (HX_FIELD_EQ(inName,"propagate_dirty") ) { return hx::Val( propagate_dirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"propagate_scale") ) { return hx::Val( propagate_scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"listen_rotation") ) { return hx::Val( listen_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlisten_origin") ) { return hx::Val( unlisten_origin_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlisten_parent") ) { return hx::Val( unlisten_parent_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_rotation_matrix") ) { return hx::Val( _rotation_matrix ); }
		if (HX_FIELD_EQ(inName,"_origin_handlers") ) { return hx::Val( _origin_handlers ); }
		if (HX_FIELD_EQ(inName,"_parent_handlers") ) { return hx::Val( _parent_handlers ); }
		if (HX_FIELD_EQ(inName,"propagate_origin") ) { return hx::Val( propagate_origin_dyn() ); }
		if (HX_FIELD_EQ(inName,"propagate_parent") ) { return hx::Val( propagate_parent_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"on_parent_cleaned") ) { return hx::Val( on_parent_cleaned_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlisten_rotation") ) { return hx::Val( unlisten_rotation_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_rotation_handlers") ) { return hx::Val( _rotation_handlers ); }
		if (HX_FIELD_EQ(inName,"propagate_rotation") ) { return hx::Val( propagate_rotation_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_origin_undo_matrix") ) { return hx::Val( _origin_undo_matrix ); }
		if (HX_FIELD_EQ(inName,"on_local_pos_change") ) { return hx::Val( on_local_pos_change_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"on_local_scale_change") ) { return hx::Val( on_local_scale_change_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"on_local_rotation_change") ) { return hx::Val( on_local_rotation_change_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Transform_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pos(inValue.Cast<  ::phoenix::Vector >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"local") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_local(inValue.Cast<  ::phoenix::Spatial >()) );local=inValue.Cast<  ::phoenix::Spatial >(); return inValue; }
		if (HX_FIELD_EQ(inName,"world") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_world(inValue.Cast<  ::phoenix::Spatial >()) );world=inValue.Cast<  ::phoenix::Spatial >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_dirty(inValue.Cast< bool >()) );dirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scale(inValue.Cast<  ::phoenix::Vector >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_parent(inValue.Cast<  ::phoenix::Transform >()) );parent=inValue.Cast<  ::phoenix::Transform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"origin") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_origin(inValue.Cast<  ::phoenix::Vector >()) );origin=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_setup") ) { _setup=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation(inValue.Cast<  ::phoenix::Quaternion >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_cleaning") ) { _cleaning=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_pos_matrix") ) { _pos_matrix=inValue.Cast<  ::phoenix::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_destroying") ) { _destroying=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"manual_update") ) { manual_update=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pos_handlers") ) { _pos_handlers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_clean_handlers") ) { _clean_handlers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_dirty_handlers") ) { _dirty_handlers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scale_handlers") ) { _scale_handlers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_rotation_matrix") ) { _rotation_matrix=inValue.Cast<  ::phoenix::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_origin_handlers") ) { _origin_handlers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_parent_handlers") ) { _parent_handlers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_rotation_handlers") ) { _rotation_handlers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_origin_undo_matrix") ) { _origin_undo_matrix=inValue.Cast<  ::phoenix::Matrix >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Transform_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("local","\x6b","\xc9","\xf0","\x78"));
	outFields->push(HX_HCSTRING("world","\x52","\x96","\x64","\xce"));
	outFields->push(HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"));
	outFields->push(HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"));
	outFields->push(HX_HCSTRING("manual_update","\x22","\x5e","\x56","\xe2"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("_origin_undo_matrix","\x42","\xdb","\xa9","\xe8"));
	outFields->push(HX_HCSTRING("_pos_matrix","\xeb","\x51","\xb3","\x45"));
	outFields->push(HX_HCSTRING("_rotation_matrix","\xe3","\x90","\xc1","\xa8"));
	outFields->push(HX_HCSTRING("_setup","\xbe","\xf5","\x16","\x76"));
	outFields->push(HX_HCSTRING("_cleaning","\x58","\x6e","\x15","\x76"));
	outFields->push(HX_HCSTRING("_clean_handlers","\xbe","\xf6","\x22","\x81"));
	outFields->push(HX_HCSTRING("_dirty_handlers","\x15","\x7f","\xfc","\x9c"));
	outFields->push(HX_HCSTRING("_pos_handlers","\x93","\xfb","\xcc","\x04"));
	outFields->push(HX_HCSTRING("_rotation_handlers","\x8b","\xe8","\x22","\xf7"));
	outFields->push(HX_HCSTRING("_scale_handlers","\x9d","\x71","\x26","\xf8"));
	outFields->push(HX_HCSTRING("_origin_handlers","\xa3","\xd4","\x14","\xdd"));
	outFields->push(HX_HCSTRING("_parent_handlers","\xdf","\x60","\xea","\x7a"));
	outFields->push(HX_HCSTRING("_destroying","\x47","\x85","\xb6","\x80"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Transform_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::Transform*/ ,(int)offsetof(Transform_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsObject /*::phoenix::Spatial*/ ,(int)offsetof(Transform_obj,local),HX_HCSTRING("local","\x6b","\xc9","\xf0","\x78")},
	{hx::fsObject /*::phoenix::Spatial*/ ,(int)offsetof(Transform_obj,world),HX_HCSTRING("world","\x52","\x96","\x64","\xce")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Transform_obj,origin),HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b")},
	{hx::fsBool,(int)offsetof(Transform_obj,dirty),HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9")},
	{hx::fsBool,(int)offsetof(Transform_obj,manual_update),HX_HCSTRING("manual_update","\x22","\x5e","\x56","\xe2")},
	{hx::fsObject /*::phoenix::Matrix*/ ,(int)offsetof(Transform_obj,_origin_undo_matrix),HX_HCSTRING("_origin_undo_matrix","\x42","\xdb","\xa9","\xe8")},
	{hx::fsObject /*::phoenix::Matrix*/ ,(int)offsetof(Transform_obj,_pos_matrix),HX_HCSTRING("_pos_matrix","\xeb","\x51","\xb3","\x45")},
	{hx::fsObject /*::phoenix::Matrix*/ ,(int)offsetof(Transform_obj,_rotation_matrix),HX_HCSTRING("_rotation_matrix","\xe3","\x90","\xc1","\xa8")},
	{hx::fsBool,(int)offsetof(Transform_obj,_setup),HX_HCSTRING("_setup","\xbe","\xf5","\x16","\x76")},
	{hx::fsBool,(int)offsetof(Transform_obj,_cleaning),HX_HCSTRING("_cleaning","\x58","\x6e","\x15","\x76")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Transform_obj,_clean_handlers),HX_HCSTRING("_clean_handlers","\xbe","\xf6","\x22","\x81")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Transform_obj,_dirty_handlers),HX_HCSTRING("_dirty_handlers","\x15","\x7f","\xfc","\x9c")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Transform_obj,_pos_handlers),HX_HCSTRING("_pos_handlers","\x93","\xfb","\xcc","\x04")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Transform_obj,_rotation_handlers),HX_HCSTRING("_rotation_handlers","\x8b","\xe8","\x22","\xf7")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Transform_obj,_scale_handlers),HX_HCSTRING("_scale_handlers","\x9d","\x71","\x26","\xf8")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Transform_obj,_origin_handlers),HX_HCSTRING("_origin_handlers","\xa3","\xd4","\x14","\xdd")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Transform_obj,_parent_handlers),HX_HCSTRING("_parent_handlers","\xdf","\x60","\xea","\x7a")},
	{hx::fsBool,(int)offsetof(Transform_obj,_destroying),HX_HCSTRING("_destroying","\x47","\x85","\xb6","\x80")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Transform_obj_sStaticStorageInfo = 0;
#endif

static ::String Transform_obj_sMemberFields[] = {
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("local","\x6b","\xc9","\xf0","\x78"),
	HX_HCSTRING("world","\x52","\x96","\x64","\xce"),
	HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"),
	HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"),
	HX_HCSTRING("manual_update","\x22","\x5e","\x56","\xe2"),
	HX_HCSTRING("_origin_undo_matrix","\x42","\xdb","\xa9","\xe8"),
	HX_HCSTRING("_pos_matrix","\xeb","\x51","\xb3","\x45"),
	HX_HCSTRING("_rotation_matrix","\xe3","\x90","\xc1","\xa8"),
	HX_HCSTRING("_setup","\xbe","\xf5","\x16","\x76"),
	HX_HCSTRING("_cleaning","\x58","\x6e","\x15","\x76"),
	HX_HCSTRING("_clean_handlers","\xbe","\xf6","\x22","\x81"),
	HX_HCSTRING("_dirty_handlers","\x15","\x7f","\xfc","\x9c"),
	HX_HCSTRING("_pos_handlers","\x93","\xfb","\xcc","\x04"),
	HX_HCSTRING("_rotation_handlers","\x8b","\xe8","\x22","\xf7"),
	HX_HCSTRING("_scale_handlers","\x9d","\x71","\x26","\xf8"),
	HX_HCSTRING("_origin_handlers","\xa3","\xd4","\x14","\xdd"),
	HX_HCSTRING("_parent_handlers","\xdf","\x60","\xea","\x7a"),
	HX_HCSTRING("_destroying","\x47","\x85","\xb6","\x80"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("set_dirty","\x75","\x98","\xca","\x00"),
	HX_HCSTRING("on_local_pos_change","\xef","\xaf","\x99","\x06"),
	HX_HCSTRING("on_local_rotation_change","\x1d","\x85","\x6c","\x46"),
	HX_HCSTRING("on_local_scale_change","\xb9","\xce","\xb2","\x60"),
	HX_HCSTRING("on_parent_cleaned","\x33","\x99","\xea","\x7a"),
	HX_HCSTRING("get_local","\xc2","\x25","\x9a","\xbc"),
	HX_HCSTRING("set_local","\xce","\x11","\xeb","\x9f"),
	HX_HCSTRING("get_world","\xa9","\xf2","\x0d","\x12"),
	HX_HCSTRING("clean_check","\x52","\x9e","\xa0","\xfa"),
	HX_HCSTRING("clean","\x89","\x71","\x5b","\x48"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_origin","\xaf","\x89","\x88","\x3b"),
	HX_HCSTRING("set_origin","\x23","\x28","\x06","\x3f"),
	HX_HCSTRING("set_world","\xb5","\xde","\x5e","\xf5"),
	HX_HCSTRING("get_parent","\xf3","\x74","\x05","\xde"),
	HX_HCSTRING("set_parent","\x67","\x13","\x83","\xe1"),
	HX_HCSTRING("get_pos","\x2b","\x26","\xca","\x26"),
	HX_HCSTRING("get_rotation","\x47","\xf1","\x9f","\xbd"),
	HX_HCSTRING("get_scale","\xe1","\x2a","\x78","\xbc"),
	HX_HCSTRING("set_pos","\x37","\xb7","\xcb","\x19"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("set_scale","\xed","\x16","\xc9","\x9f"),
	HX_HCSTRING("propagate_clean","\xf3","\x55","\x47","\x98"),
	HX_HCSTRING("propagate_dirty","\x7c","\x34","\xbc","\x29"),
	HX_HCSTRING("propagate_pos","\x7e","\x73","\xe0","\x46"),
	HX_HCSTRING("propagate_rotation","\x14","\x77","\x31","\x38"),
	HX_HCSTRING("propagate_scale","\xf4","\xb2","\xba","\xc8"),
	HX_HCSTRING("propagate_origin","\x3c","\x12","\x7d","\xe9"),
	HX_HCSTRING("propagate_parent","\x80","\xfd","\xf9","\x8b"),
	HX_HCSTRING("listen","\x47","\xc8","\xf9","\xef"),
	HX_HCSTRING("unlisten","\x60","\xf7","\x40","\xf2"),
	HX_HCSTRING("listen_dirty","\xda","\x4e","\xab","\xd3"),
	HX_HCSTRING("unlisten_dirty","\xb3","\x56","\x98","\xc5"),
	HX_HCSTRING("listen_pos","\x5c","\x9a","\x11","\x25"),
	HX_HCSTRING("unlisten_pos","\xf5","\xc9","\x20","\x91"),
	HX_HCSTRING("listen_scale","\x52","\xcd","\xa9","\x72"),
	HX_HCSTRING("unlisten_scale","\x2b","\xd5","\x96","\x64"),
	HX_HCSTRING("listen_rotation","\x76","\xab","\x50","\x9b"),
	HX_HCSTRING("unlisten_rotation","\x3d","\x51","\x71","\x0b"),
	HX_HCSTRING("listen_origin","\x1e","\x0a","\xc5","\xf0"),
	HX_HCSTRING("unlisten_origin","\x25","\xe0","\x3e","\xae"),
	HX_HCSTRING("listen_parent","\x62","\xf5","\x41","\x93"),
	HX_HCSTRING("unlisten_parent","\x69","\xcb","\xbb","\x50"),
	::String(null()) };

static void Transform_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Transform_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Transform_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Transform_obj::__mClass,"__mClass");
};

#endif

hx::Class Transform_obj::__mClass;

void Transform_obj::__register()
{
	hx::Object *dummy = new Transform_obj;
	Transform_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.Transform","\xad","\x7f","\xfc","\x6a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Transform_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Transform_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Transform_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Transform_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Transform_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Transform_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
