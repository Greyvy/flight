// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_9484b18fc186cc5e
#define INCLUDED_9484b18fc186cc5e
#include "linc_opengl.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_luxe_utils_unifill_Unifill
#include <luxe/utils/unifill/Unifill.h>
#endif
#ifndef INCLUDED_luxe_utils_unifill__Utf8_Utf8_Impl_
#include <luxe/utils/unifill/_Utf8/Utf8_Impl_.h>
#endif
#ifndef INCLUDED_opengl_GLObject
#include <opengl/GLObject.h>
#endif
#ifndef INCLUDED_phoenix_BitmapFont
#include <phoenix/BitmapFont.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_Shader
#include <phoenix/Shader.h>
#endif
#ifndef INCLUDED_phoenix_Spatial
#include <phoenix/Spatial.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_Transform
#include <phoenix/Transform.h>
#endif
#ifndef INCLUDED_phoenix_Uniforms
#include <phoenix/Uniforms.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_Float
#include <phoenix/_Shader/Uniform_Float.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_phoenix_Color
#include <phoenix/_Shader/Uniform_phoenix_Color.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_GeometryState
#include <phoenix/geometry/GeometryState.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextGeometry
#include <phoenix/geometry/TextGeometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextureCoord
#include <phoenix/geometry/TextureCoord.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextureCoordSet
#include <phoenix/geometry/TextureCoordSet.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Vertex
#include <phoenix/geometry/Vertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_52_new,"phoenix.geometry.TextGeometry","new",0x85dc3eae,"phoenix.geometry.TextGeometry.new","phoenix/geometry/TextGeometry.hx",52,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_170_tidy,"phoenix.geometry.TextGeometry","tidy",0x9ed4da3c,"phoenix.geometry.TextGeometry.tidy","phoenix/geometry/TextGeometry.hx",170,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_194_drop,"phoenix.geometry.TextGeometry","drop",0x94484e21,"phoenix.geometry.TextGeometry.drop","phoenix/geometry/TextGeometry.hx",194,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_233_default_options,"phoenix.geometry.TextGeometry","default_options",0x112e39ee,"phoenix.geometry.TextGeometry.default_options","phoenix/geometry/TextGeometry.hx",233,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_281_set_text,"phoenix.geometry.TextGeometry","set_text",0x5a10d89c,"phoenix.geometry.TextGeometry.set_text","phoenix/geometry/TextGeometry.hx",281,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_311_stats,"phoenix.geometry.TextGeometry","stats",0xcf4693ed,"phoenix.geometry.TextGeometry.stats","phoenix/geometry/TextGeometry.hx",311,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_315_update_sizes,"phoenix.geometry.TextGeometry","update_sizes",0x6399da8e,"phoenix.geometry.TextGeometry.update_sizes","phoenix/geometry/TextGeometry.hx",315,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_344_update_text,"phoenix.geometry.TextGeometry","update_text",0xa0aa4e31,"phoenix.geometry.TextGeometry.update_text","phoenix/geometry/TextGeometry.hx",344,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_509_update_char,"phoenix.geometry.TextGeometry","update_char",0x956fe05a,"phoenix.geometry.TextGeometry.update_char","phoenix/geometry/TextGeometry.hx",509,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_572_set_dirty_sizing,"phoenix.geometry.TextGeometry","set_dirty_sizing",0xc3e956fa,"phoenix.geometry.TextGeometry.set_dirty_sizing","phoenix/geometry/TextGeometry.hx",572,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_581_set_bounds,"phoenix.geometry.TextGeometry","set_bounds",0x3002ac24,"phoenix.geometry.TextGeometry.set_bounds","phoenix/geometry/TextGeometry.hx",581,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_595_set_bounds_wrap,"phoenix.geometry.TextGeometry","set_bounds_wrap",0x51b72705,"phoenix.geometry.TextGeometry.set_bounds_wrap","phoenix/geometry/TextGeometry.hx",595,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_607_set_letter_snapping,"phoenix.geometry.TextGeometry","set_letter_snapping",0x766edfe6,"phoenix.geometry.TextGeometry.set_letter_snapping","phoenix/geometry/TextGeometry.hx",607,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_619_set_line_spacing,"phoenix.geometry.TextGeometry","set_line_spacing",0x07a8cbe7,"phoenix.geometry.TextGeometry.set_line_spacing","phoenix/geometry/TextGeometry.hx",619,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_631_set_letter_spacing,"phoenix.geometry.TextGeometry","set_letter_spacing",0x3c057c99,"phoenix.geometry.TextGeometry.set_letter_spacing","phoenix/geometry/TextGeometry.hx",631,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_643_set_align,"phoenix.geometry.TextGeometry","set_align",0x88a4bbf6,"phoenix.geometry.TextGeometry.set_align","phoenix/geometry/TextGeometry.hx",643,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_655_set_align_vertical,"phoenix.geometry.TextGeometry","set_align_vertical",0x21a6c91f,"phoenix.geometry.TextGeometry.set_align_vertical","phoenix/geometry/TextGeometry.hx",655,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_667_set_point_size,"phoenix.geometry.TextGeometry","set_point_size",0x02f08f7f,"phoenix.geometry.TextGeometry.set_point_size","phoenix/geometry/TextGeometry.hx",667,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_680_set_font,"phoenix.geometry.TextGeometry","set_font",0x50d769be,"phoenix.geometry.TextGeometry.set_font","phoenix/geometry/TextGeometry.hx",680,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_701_set_smoothness,"phoenix.geometry.TextGeometry","set_smoothness",0x49fb60f4,"phoenix.geometry.TextGeometry.set_smoothness","phoenix/geometry/TextGeometry.hx",701,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_714_set_thickness,"phoenix.geometry.TextGeometry","set_thickness",0xf6334325,"phoenix.geometry.TextGeometry.set_thickness","phoenix/geometry/TextGeometry.hx",714,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_727_set_outline,"phoenix.geometry.TextGeometry","set_outline",0xc059eaf3,"phoenix.geometry.TextGeometry.set_outline","phoenix/geometry/TextGeometry.hx",727,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_740_set_glow_threshold,"phoenix.geometry.TextGeometry","set_glow_threshold",0x88b50ce8,"phoenix.geometry.TextGeometry.set_glow_threshold","phoenix/geometry/TextGeometry.hx",740,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_753_set_glow_amount,"phoenix.geometry.TextGeometry","set_glow_amount",0xae4a507b,"phoenix.geometry.TextGeometry.set_glow_amount","phoenix/geometry/TextGeometry.hx",753,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_766_set_outline_color,"phoenix.geometry.TextGeometry","set_outline_color",0x66c8dbd7,"phoenix.geometry.TextGeometry.set_outline_color","phoenix/geometry/TextGeometry.hx",766,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_779_set_glow_color,"phoenix.geometry.TextGeometry","set_glow_color",0x7a671820,"phoenix.geometry.TextGeometry.set_glow_color","phoenix/geometry/TextGeometry.hx",779,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_796_flush_uniforms,"phoenix.geometry.TextGeometry","flush_uniforms",0x77bca14c,"phoenix.geometry.TextGeometry.flush_uniforms","phoenix/geometry/TextGeometry.hx",796,0x3cba14a2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4d4459dba2bf3c_112_boot,"phoenix.geometry.TextGeometry","boot",0x92f39a24,"phoenix.geometry.TextGeometry.boot","phoenix/geometry/TextGeometry.hx",112,0x3cba14a2)
namespace phoenix{
namespace geometry{

void TextGeometry_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_52_new)
HXLINE( 108)		this->setup_ = true;
HXLINE( 107)		this->dirty_align = true;
HXLINE( 106)		this->dirty_sizing = true;
HXLINE( 104)		this->point_ratio = ((Float)1);
HXLINE( 103)		this->text_h_h = ((Float)0);
HXLINE( 102)		this->text_h_w = ((Float)0);
HXLINE(  88)		this->text_height = ((Float)0);
HXLINE(  87)		this->text_width = ((Float)0);
HXLINE(  81)		this->glow_amount = ((Float)0);
HXLINE(  80)		this->glow_threshold = ((Float)0);
HXLINE(  77)		this->outline = ((Float)0);
HXLINE(  75)		this->thickness = ((Float)0.5);
HXLINE(  74)		this->smoothness = ((Float)0.75);
HXLINE(  72)		this->unique = false;
HXLINE(  71)		this->sdf = false;
HXLINE(  64)		this->bounds_wrap = false;
HXLINE(  61)		this->letter_snapping = false;
HXLINE(  60)		this->letter_spacing = ((Float)0.0);
HXLINE(  59)		this->line_spacing = ((Float)0.0);
HXLINE(  58)		this->point_size = ((Float)32.0);
HXLINE(  56)		this->text = HX_("",00,00,00,00);
HXLINE( 116)		this->options = _options;
HXLINE( 117)		this->emitter =  ::luxe::Emitter_obj::__alloc( HX_CTX );
HXLINE( 119)		if (hx::IsNull( this->options )) {
HXLINE( 119)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("options was null",e0,49,a9,08) + ((HX_(" ( ",18,6b,18,00) + HX_("TextGeometry requires non-null options",76,8d,24,bf)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 124)		if (hx::IsNotNull( this->options->__Field(HX_("sdf",b5,9a,57,00),hx::paccDynamic) )) {
HXLINE( 124)			this->sdf = ( (bool)(this->options->__Field(HX_("sdf",b5,9a,57,00),hx::paccDynamic)) );
            		}
HXLINE( 126)		if (hx::IsNull( ( ( ::phoenix::BitmapFont)(this->options->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) ) )) {
HXLINE( 126)			this->options->__SetField(HX_("font",cf,5d,c0,43),::Luxe_obj::renderer->font,hx::paccDynamic);
            		}
HXDLIN( 126)		this->set_font(( ( ::phoenix::BitmapFont)(this->options->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) ));
HXLINE( 128)		if (hx::IsEq( this->font,::Luxe_obj::renderer->font )) {
HXLINE( 128)			this->sdf = true;
            		}
HXLINE( 134)		if (hx::IsNull( ( ( ::phoenix::Shader)(this->options->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)) ) )) {
HXLINE( 135)			if (this->sdf) {
HXLINE( 136)				this->options->__SetField(HX_("shader",25,bf,20,1d),( ( ::phoenix::Shader)( ::Dynamic(::Luxe_obj::renderer->shaders->__Field(HX_("bitmapfont",3e,91,44,4a),hx::paccDynamic))->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)) ),hx::paccDynamic);
            			}
            			else {
HXLINE( 138)				this->options->__SetField(HX_("shader",25,bf,20,1d),( ( ::phoenix::Shader)( ::Dynamic(::Luxe_obj::renderer->shaders->__Field(HX_("textured",29,f7,ce,65),hx::paccDynamic))->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)) ),hx::paccDynamic);
            			}
            		}
            		else {
HXLINE( 142)			if (hx::IsNotEq( ( ( ::phoenix::Shader)(this->options->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)) ),( ( ::phoenix::Shader)( ::Dynamic(::Luxe_obj::renderer->shaders->__Field(HX_("bitmapfont",3e,91,44,4a),hx::paccDynamic))->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)) ) )) {
HXLINE( 143)				this->unique = true;
            			}
            		}
HXLINE( 147)		this->options->__SetField(HX_("primitive_type",92,c8,6d,88),(int)4,hx::paccDynamic);
HXLINE( 149)		super::__construct(this->options);
HXLINE( 153)		this->cache = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 154)		this->line_widths = ::Array_obj< Float >::__new(0);
HXLINE( 155)		this->line_offsets = ::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::__new(0))->init(1,::Array_obj< Float >::__new(0));
HXLINE( 156)		this->lines = ::Array_obj< ::String >::__new(0);
HXLINE( 157)		this->set_outline_color( ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null()));
HXLINE( 158)		this->set_glow_color( ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null()));
HXLINE( 160)		this->default_options();
HXLINE( 162)		this->setup_ = false;
            	}

Dynamic TextGeometry_obj::__CreateEmpty() { return new TextGeometry_obj; }

void *TextGeometry_obj::_hx_vtable = 0;

Dynamic TextGeometry_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextGeometry_obj > _hx_result = new TextGeometry_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextGeometry_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0ba32ce0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0ba32ce0;
	} else {
		return inClassId==(int)0x6c1faa93;
	}
}

void TextGeometry_obj::tidy(){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_170_tidy)
HXLINE( 172)		int _vertidx = ::Math_obj::floor(((Float)this->vertices->length / (Float)(int)6));
HXLINE( 173)		int _diff = (this->cache->length - _vertidx);
HXLINE( 175)		if ((_diff > (int)0)) {
HXLINE( 179)			::Array< ::Dynamic> extra = this->cache->splice(_vertidx,_diff);
HXLINE( 180)			int c = extra->length;
HXLINE( 181)			while((c > (int)0)){
HXLINE( 182)				c = (c - (int)1);
HXLINE( 183)				::Array< ::Dynamic> vert = ( (::Array< ::Dynamic>)(extra->pop()) );
HXLINE( 184)				vert = null();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextGeometry_obj,tidy,(void))

void TextGeometry_obj::drop( ::Dynamic __o_remove){
 ::Dynamic remove = __o_remove.Default(true);
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_194_drop)
HXLINE( 196)		this->set_text(null());
HXLINE( 197)		this->set_font(null());
HXLINE( 198)		this->set_bounds(null());
HXLINE( 199)		this->set_outline_color(null());
HXLINE( 200)		this->set_glow_color(null());
HXLINE( 201)		if (hx::IsNotNull( this->line_widths )) {
HXLINE( 202)			this->line_widths->removeRange((int)0,this->line_widths->length);
HXLINE( 203)			this->line_widths = null();
            		}
HXLINE( 205)		if (hx::IsNotNull( this->line_offsets )) {
HXLINE( 206)			this->line_offsets->removeRange((int)0,this->line_offsets->length);
HXLINE( 207)			this->line_offsets = null();
            		}
HXLINE( 209)		if (hx::IsNotNull( this->lines )) {
HXLINE( 210)			this->lines->removeRange((int)0,this->lines->length);
HXLINE( 211)			this->lines = null();
            		}
HXLINE( 213)		this->emitter = null();
HXLINE( 214)		this->options = null();
HXLINE( 215)		if (hx::IsNotNull( this->cache )) {
HXLINE( 216)			while((this->cache->length > (int)0)){
HXLINE( 217)				::Array< ::Dynamic> c = ( (::Array< ::Dynamic>)(this->cache->pop()) );
HXLINE( 218)				while((c->length > (int)0)){
HXLINE( 219)					 ::phoenix::geometry::Vertex v = c->pop().StaticCast<  ::phoenix::geometry::Vertex >();
HXLINE( 220)					{
HXLINE( 220)						v->pos = null();
HXDLIN( 220)						v->color = null();
HXDLIN( 220)						v->normal = null();
HXDLIN( 220)						{
HXLINE( 220)							 ::phoenix::geometry::TextureCoordSet _this = v->uv;
HXDLIN( 220)							_this->uv0 = null();
HXDLIN( 220)							_this->uv1 = null();
HXDLIN( 220)							_this->uv2 = null();
HXDLIN( 220)							_this->uv3 = null();
HXDLIN( 220)							_this->uv4 = null();
HXDLIN( 220)							_this->uv5 = null();
HXDLIN( 220)							_this->uv6 = null();
HXDLIN( 220)							_this->uv7 = null();
            						}
HXDLIN( 220)						v->uv = null();
            					}
HXLINE( 221)					v = null();
            				}
HXLINE( 223)				c = null();
            			}
HXLINE( 225)			this->cache = null();
            		}
HXLINE( 228)		this->super::drop(remove);
            	}


void TextGeometry_obj::default_options(){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_233_default_options)
HXLINE( 242)		this->set_texture(this->font->pages->get((int)0).StaticCast<  ::phoenix::Texture >());
HXLINE( 246)		if (hx::IsNotNull( this->options->__Field(HX_("letter_snapping",75,b3,b8,ee),hx::paccDynamic) )) {
HXLINE( 246)			this->set_letter_snapping(( (bool)(this->options->__Field(HX_("letter_snapping",75,b3,b8,ee),hx::paccDynamic)) ));
            		}
HXLINE( 247)		if (hx::IsNotNull( this->options->__Field(HX_("letter_spacing",ea,8f,ec,6d),hx::paccDynamic) )) {
HXLINE( 247)			this->set_letter_spacing(( (Float)(this->options->__Field(HX_("letter_spacing",ea,8f,ec,6d),hx::paccDynamic)) ));
            		}
HXLINE( 248)		if (hx::IsNotNull( this->options->__Field(HX_("line_spacing",f8,b8,ad,3c),hx::paccDynamic) )) {
HXLINE( 248)			this->set_line_spacing(( (Float)(this->options->__Field(HX_("line_spacing",f8,b8,ad,3c),hx::paccDynamic)) ));
            		}
HXLINE( 249)		if (hx::IsNotNull( this->options->__Field(HX_("point_size",50,66,f5,4b),hx::paccDynamic) )) {
HXLINE( 249)			this->set_point_size(( (Float)(this->options->__Field(HX_("point_size",50,66,f5,4b),hx::paccDynamic)) ));
            		}
HXLINE( 251)		if (hx::IsNotNull( ( ( ::phoenix::Rectangle)(this->options->__Field(HX_("bounds",75,86,1d,66),hx::paccDynamic)) ) )) {
HXLINE( 251)			this->set_bounds(( ( ::phoenix::Rectangle)(this->options->__Field(HX_("bounds",75,86,1d,66),hx::paccDynamic)) ));
            		}
HXLINE( 252)		if (hx::IsNotNull( this->options->__Field(HX_("bounds_wrap",14,47,ee,ec),hx::paccDynamic) )) {
HXLINE( 252)			this->set_bounds_wrap(( (bool)(this->options->__Field(HX_("bounds_wrap",14,47,ee,ec),hx::paccDynamic)) ));
            		}
HXLINE( 254)		if (hx::IsNull( this->options->__Field(HX_("align",c5,56,91,21),hx::paccDynamic) )) {
HXLINE( 254)			this->options->__SetField(HX_("align",c5,56,91,21),(int)0,hx::paccDynamic);
            		}
HXLINE( 255)		if (hx::IsNull( this->options->__Field(HX_("align_vertical",70,dc,8d,53),hx::paccDynamic) )) {
HXLINE( 255)			this->options->__SetField(HX_("align_vertical",70,dc,8d,53),(int)3,hx::paccDynamic);
            		}
HXLINE( 257)		this->set_align(( (int)(this->options->__Field(HX_("align",c5,56,91,21),hx::paccDynamic)) ));
HXLINE( 258)		this->set_align_vertical(( (int)(this->options->__Field(HX_("align_vertical",70,dc,8d,53),hx::paccDynamic)) ));
HXLINE( 263)		if (hx::IsNotNull( this->options->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) )) {
HXLINE( 263)			this->set_thickness(( (Float)(this->options->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic)) ));
            		}
HXLINE( 264)		if (hx::IsNotNull( this->options->__Field(HX_("smoothness",c5,37,00,93),hx::paccDynamic) )) {
HXLINE( 264)			this->set_smoothness(( (Float)(this->options->__Field(HX_("smoothness",c5,37,00,93),hx::paccDynamic)) ));
            		}
HXLINE( 266)		if (hx::IsNotNull( this->options->__Field(HX_("outline",82,17,be,e1),hx::paccDynamic) )) {
HXLINE( 266)			this->set_outline(( (Float)(this->options->__Field(HX_("outline",82,17,be,e1),hx::paccDynamic)) ));
            		}
HXLINE( 267)		if (hx::IsNotNull( ( ( ::phoenix::Color)(this->options->__Field(HX_("outline_color",a6,5d,13,96),hx::paccDynamic)) ) )) {
HXLINE( 267)			this->set_outline_color(( ( ::phoenix::Color)(this->options->__Field(HX_("outline_color",a6,5d,13,96),hx::paccDynamic)) ));
            		}
HXLINE( 269)		if (hx::IsNotNull( this->options->__Field(HX_("glow_threshold",39,20,9c,ba),hx::paccDynamic) )) {
HXLINE( 269)			this->set_glow_threshold(( (Float)(this->options->__Field(HX_("glow_threshold",39,20,9c,ba),hx::paccDynamic)) ));
            		}
HXLINE( 270)		if (hx::IsNotNull( this->options->__Field(HX_("glow_amount",8a,70,81,49),hx::paccDynamic) )) {
HXLINE( 270)			this->set_glow_amount(( (Float)(this->options->__Field(HX_("glow_amount",8a,70,81,49),hx::paccDynamic)) ));
            		}
HXLINE( 271)		if (hx::IsNotNull( ( ( ::phoenix::Color)(this->options->__Field(HX_("glow_color",f1,ee,6b,c3),hx::paccDynamic)) ) )) {
HXLINE( 271)			this->set_glow_color(( ( ::phoenix::Color)(this->options->__Field(HX_("glow_color",f1,ee,6b,c3),hx::paccDynamic)) ));
            		}
HXLINE( 273)		if (this->sdf) {
HXLINE( 273)			this->flush_uniforms();
            		}
HXLINE( 276)		if (hx::IsNotNull( ( (::String)(this->options->__Field(HX_("text",ad,cc,f9,4c),hx::paccDynamic)) ) )) {
HXLINE( 276)			this->set_text(( (::String)(this->options->__Field(HX_("text",ad,cc,f9,4c),hx::paccDynamic)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextGeometry_obj,default_options,(void))

::String TextGeometry_obj::set_text(::String _text){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_281_set_text)
HXLINE( 283)		if (hx::IsNull( _text )) {
HXLINE( 285)			_text = HX_("",00,00,00,00);
            		}
HXLINE( 289)		if ((this->text != _text)) {
HXLINE( 292)			this->text = _text;
HXLINE( 294)			if ((this->text != HX_("",00,00,00,00))) {
HXLINE( 296)				this->set_dirty_sizing(true);
HXLINE( 297)				this->update_text();
            			}
            			else {
HXLINE( 300)				this->vertices->removeRange((int)0,this->vertices->length);
            			}
            		}
HXLINE( 305)		return this->text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_text,return )

::String TextGeometry_obj::stats(){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_311_stats)
HXDLIN( 311)		return (((HX_("letters:",cd,96,3a,f8) + ((Float)this->vertices->length / (Float)(int)6)) + HX_(" / cache:",a9,4b,11,c2)) + this->cache->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextGeometry_obj,stats,return )

bool TextGeometry_obj::update_sizes(){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_315_update_sizes)
HXLINE( 317)		if (!(this->dirty_sizing)) {
HXLINE( 317)			return false;
            		}
HXLINE( 320)		::String drawn_text = ::phoenix::geometry::TextGeometry_obj::tab_regex->replace(this->text,HX_("    ",00,38,3f,15));
HXLINE( 321)		bool _hx_tmp;
HXDLIN( 321)		if (this->bounds_wrap) {
HXLINE( 321)			_hx_tmp = hx::IsNotNull( this->bounds );
            		}
            		else {
HXLINE( 321)			_hx_tmp = false;
            		}
HXDLIN( 321)		if (_hx_tmp) {
HXLINE( 322)			drawn_text = this->font->wrap_string_to_bounds(drawn_text,this->bounds,this->point_size,this->letter_spacing);
            		}
HXLINE( 325)		this->lines->removeRange((int)0,this->lines->length);
HXLINE( 326)		this->lines = drawn_text.split(HX_("\n",0a,00,00,00));
HXLINE( 328)		this->line_widths->removeRange((int)0,this->line_widths->length);
HXLINE( 330)		 ::phoenix::BitmapFont _this = this->font;
HXDLIN( 330)		Float _point_size = this->point_size;
HXDLIN( 330)		Float _letter_spc = this->letter_spacing;
HXDLIN( 330)		::Array< Float > _line_widths = this->line_widths;
HXDLIN( 330)		Float _max_w = ((Float)0.0);
HXDLIN( 330)		bool _push_widths = hx::IsNotNull( _line_widths );
HXDLIN( 330)		::Array< ::String > _lines = ::luxe::utils::unifill::Unifill_obj::uSplit(drawn_text,HX_("\n",0a,00,00,00));
HXDLIN( 330)		{
HXLINE( 330)			int _g = (int)0;
HXDLIN( 330)			while((_g < _lines->length)){
HXLINE( 330)				::String _line = _lines->__get(_g);
HXDLIN( 330)				_g = (_g + (int)1);
HXDLIN( 330)				Float _cur_w = _this->width_of_line(_line,_point_size,_letter_spc);
HXDLIN( 330)				_max_w = ::Math_obj::max(_max_w,_cur_w);
HXDLIN( 330)				if (_push_widths) {
HXLINE( 330)					_line_widths->push(_cur_w);
            				}
            			}
            		}
HXDLIN( 330)		this->text_width = _max_w;
HXLINE( 331)		 ::phoenix::BitmapFont _this1 = this->font;
HXDLIN( 331)		Float _ratio = ((Float)this->point_size / (Float)( (Float)(_this1->info->__Field(HX_("point_size",50,66,f5,4b),hx::paccDynamic)) ));
HXDLIN( 331)		int _lines1 = this->lines->length;
HXDLIN( 331)		this->text_height = (_lines1 * ((( (Float)(_this1->info->__Field(HX_("line_height",12,a8,c5,e1),hx::paccDynamic)) ) + this->line_spacing) * _ratio));
HXLINE( 332)		this->text_h_w = ((Float)this->text_width / (Float)(int)2);
HXLINE( 333)		this->text_h_h = ((Float)this->text_height / (Float)(int)2);
HXLINE( 334)		this->point_ratio = ((Float)this->point_size / (Float)( (Float)(this->font->info->__Field(HX_("point_size",50,66,f5,4b),hx::paccDynamic)) ));
HXLINE( 336)		this->set_dirty_sizing(false);
HXLINE( 338)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextGeometry_obj,update_sizes,return )

void TextGeometry_obj::update_text(){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_344_update_text)
HXDLIN( 344)		 ::phoenix::geometry::TextGeometry _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 346)		Float _pos_x = ((Float)0.0);
HXLINE( 347)		Float _pos_y = ((Float)0.0);
HXLINE( 348)		bool _bounds_based = hx::IsNotNull( this->bounds );
HXLINE( 350)		if (_bounds_based) {
HXLINE( 351)			{
HXLINE( 351)				 ::phoenix::Vector _this = this->transform->local->pos;
HXDLIN( 351)				_pos_x = this->bounds->x;
HXDLIN( 351)				Float _x = _pos_x;
HXDLIN( 351)				_this->x = _x;
HXDLIN( 351)				if (!(_this->_construct)) {
HXLINE( 351)					bool _hx_tmp;
HXDLIN( 351)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 351)						_hx_tmp = !(_this->ignore_listeners);
            					}
            					else {
HXLINE( 351)						_hx_tmp = false;
            					}
HXDLIN( 351)					if (_hx_tmp) {
HXLINE( 351)						_this->listen_x(_x);
            					}
            				}
            			}
HXLINE( 352)			{
HXLINE( 352)				 ::phoenix::Vector _this1 = this->transform->local->pos;
HXDLIN( 352)				_pos_y = this->bounds->y;
HXDLIN( 352)				Float _y = _pos_y;
HXDLIN( 352)				_this1->y = _y;
HXDLIN( 352)				if (!(_this1->_construct)) {
HXLINE( 352)					bool _hx_tmp1;
HXDLIN( 352)					if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 352)						_hx_tmp1 = !(_this1->ignore_listeners);
            					}
            					else {
HXLINE( 352)						_hx_tmp1 = false;
            					}
HXDLIN( 352)					if (_hx_tmp1) {
HXLINE( 352)						_this1->listen_y(_y);
            					}
            				}
            			}
            		}
HXLINE( 355)		Float _cur_x = ((Float)0.0);
HXLINE( 356)		Float _cur_y = ((Float)0.0);
HXLINE( 357)		int _line_idx = (int)0;
HXLINE( 358)		int _total_idx = (int)0;
HXLINE( 359)		bool _is_char = true;
HXLINE( 360)		bool _was_dirty = this->update_sizes();
HXLINE( 367)		{
HXLINE( 367)			int _g = (int)0;
HXDLIN( 367)			::Array< ::String > _g1 = this->lines;
HXDLIN( 367)			while((_g < _g1->length)){
HXLINE( 367)				::String _line = _g1->__get(_g);
HXDLIN( 367)				_g = (_g + (int)1);
HXLINE( 371)				Float _line_x_offset = ((Float)0.0);
HXLINE( 372)				Float _line_y_offset = ((Float)0.0);
HXLINE( 374)				if (this->dirty_align) {
HXLINE( 376)					if (!(_bounds_based)) {
HXLINE( 378)						int _g2 = this->align;
HXDLIN( 378)						switch((int)(_g2)){
            							case (int)1: {
HXLINE( 380)								_line_x_offset = -(this->line_widths->__get(_line_idx));
            							}
            							break;
            							case (int)2: {
HXLINE( 379)								_line_x_offset = -(((Float)this->line_widths->__get(_line_idx) / (Float)((Float)2.0)));
            							}
            							break;
            							default:{
HXLINE( 381)								_line_x_offset = ((Float)0.0);
            							}
            						}
HXLINE( 384)						int _g3 = this->align_vertical;
HXDLIN( 384)						switch((int)(_g3)){
            							case (int)2: {
HXLINE( 385)								_line_y_offset = -(this->text_h_h);
            							}
            							break;
            							case (int)4: {
HXLINE( 386)								_line_y_offset = -(this->text_height);
            							}
            							break;
            							default:{
HXLINE( 387)								_line_y_offset = ((Float)0.0);
            							}
            						}
            					}
            					else {
HXLINE( 392)						int _g21 = this->align;
HXDLIN( 392)						switch((int)(_g21)){
            							case (int)1: {
HXLINE( 394)								_line_x_offset = (-(this->line_widths->__get(_line_idx)) + this->bounds->w);
            							}
            							break;
            							case (int)2: {
HXLINE( 393)								Float _line_x_offset1 = -(((Float)this->line_widths->__get(_line_idx) / (Float)((Float)2.0)));
HXDLIN( 393)								_line_x_offset = (_line_x_offset1 + ((Float)this->bounds->w / (Float)(int)2));
            							}
            							break;
            							default:{
HXLINE( 395)								_line_x_offset = ((Float)0.0);
            							}
            						}
HXLINE( 398)						int _g31 = this->align_vertical;
HXDLIN( 398)						switch((int)(_g31)){
            							case (int)2: {
HXLINE( 399)								_line_y_offset = (((Float)this->bounds->h / (Float)(int)2) - this->text_h_h);
            							}
            							break;
            							case (int)4: {
HXLINE( 400)								_line_y_offset = (this->bounds->h - this->text_height);
            							}
            							break;
            							default:{
HXLINE( 401)								_line_y_offset = ((Float)0.0);
            							}
            						}
            					}
HXLINE( 407)					this->line_offsets->__get((int)0).StaticCast< ::Array< Float > >()[_line_idx] = _line_x_offset;
HXLINE( 408)					this->line_offsets->__get((int)1).StaticCast< ::Array< Float > >()[_line_idx] = _line_y_offset;
            				}
            				else {
HXLINE( 412)					_line_x_offset = this->line_offsets->__get((int)0).StaticCast< ::Array< Float > >()->__get(_line_idx);
HXLINE( 413)					_line_y_offset = this->line_offsets->__get((int)1).StaticCast< ::Array< Float > >()->__get(_line_idx);
            				}
HXLINE( 417)				if ((_line_idx != (int)0)) {
HXLINE( 418)					_cur_y = (_cur_y + ((( (Float)(_gthis->font->info->__Field(HX_("line_height",12,a8,c5,e1),hx::paccDynamic)) ) + _gthis->line_spacing) * _gthis->point_ratio));
HXDLIN( 418)					_cur_x = (int)0;
            				}
HXLINE( 423)				int _idx = (int)0;
HXLINE( 424)				{
HXLINE( 424)					::String _g2_string;
HXDLIN( 424)					int _g2_index;
HXDLIN( 424)					int _g2_i;
HXDLIN( 424)					int _g2_endIndex;
HXDLIN( 424)					_g2_i = (int)0;
HXDLIN( 424)					_g2_string = _line;
HXDLIN( 424)					_g2_index = (int)0;
HXDLIN( 424)					_g2_endIndex = _line.length;
HXDLIN( 424)					while((_g2_index < _g2_endIndex)){
HXLINE( 424)						_g2_i = _g2_index;
HXDLIN( 424)						::String this1 = _g2_string;
HXDLIN( 424)						::String this2 = this1;
HXDLIN( 424)						int c = this2.cca(_g2_index);
HXDLIN( 424)						int _g2_index1;
HXDLIN( 424)						if ((c < (int)192)) {
HXLINE( 424)							_g2_index1 = (int)1;
            						}
            						else {
HXLINE( 424)							if ((c < (int)224)) {
HXLINE( 424)								_g2_index1 = (int)2;
            							}
            							else {
HXLINE( 424)								if ((c < (int)240)) {
HXLINE( 424)									_g2_index1 = (int)3;
            								}
            								else {
HXLINE( 424)									if ((c < (int)248)) {
HXLINE( 424)										_g2_index1 = (int)4;
            									}
            									else {
HXLINE( 424)										_g2_index1 = (int)1;
            									}
            								}
            							}
            						}
HXDLIN( 424)						_g2_index = (_g2_index + _g2_index1);
HXDLIN( 424)						::String this3 = _g2_string;
HXDLIN( 424)						::String this4 = this3;
HXDLIN( 424)						int _uglyph = ::luxe::utils::unifill::_Utf8::Utf8_Impl__obj::codePointAt(this4,_g2_i);
HXLINE( 426)						int _index = _uglyph;
HXLINE( 427)						 ::Dynamic _char = ( ( ::haxe::ds::IntMap)( ::Dynamic(this->font->info->__Field(HX_("chars",dd,9c,b3,45),hx::paccDynamic))) )->get(_index);
HXLINE( 428)						if (hx::IsNotNull( _char )) {
HXLINE( 428)							_is_char = (_index > (int)32);
            						}
            						else {
HXLINE( 428)							_is_char = false;
            						}
HXLINE( 432)						if (!(_is_char)) {
HXLINE( 433)							_char = this->font->space_char;
            						}
HXLINE( 436)						if (_is_char) {
HXLINE( 439)							Float _quad_x = ((_line_x_offset + _cur_x) + (( (Float)(_char->__Field(HX_("xoffset",0b,42,4f,de),hx::paccDynamic)) ) * this->point_ratio));
HXLINE( 440)							Float _quad_y = ((_line_y_offset + _cur_y) + (( (Float)(_char->__Field(HX_("yoffset",cc,b8,e4,07),hx::paccDynamic)) ) * this->point_ratio));
HXLINE( 442)							if (this->letter_snapping) {
HXLINE( 444)								_quad_x = ::Math_obj::floor(_quad_x);
HXLINE( 445)								_quad_y = ::Math_obj::floor(_quad_y);
            							}
HXLINE( 448)							 ::phoenix::Texture _page = this->font->pages->get( ::Dynamic(_char->__Field(HX_("page",4f,da,51,4a),hx::paccDynamic))).StaticCast<  ::phoenix::Texture >();
HXLINE( 450)							Float _u1 = ((Float)( (Float)(_char->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) / (Float)_page->width_actual);
HXLINE( 451)							Float _v1 = ((Float)( (Float)(_char->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) / (Float)_page->height_actual);
HXLINE( 452)							Float _u2 = ((Float)(( (Float)(_char->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) + ( (Float)(_char->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) )) / (Float)_page->width_actual);
HXLINE( 453)							Float _v2 = ((Float)(( (Float)(_char->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) + ( (Float)(_char->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) )) / (Float)_page->height_actual);
HXLINE( 456)							Float _hx_tmp2 = (( (Float)(_char->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ) * this->point_ratio);
HXLINE( 455)							this->update_char(_total_idx,_quad_x,_quad_y,_hx_tmp2,(( (Float)(_char->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) ) * this->point_ratio),_u1,_v1,_u2,_v2,this->color);
HXLINE( 461)							_total_idx = (_total_idx + (int)1);
            						}
HXLINE( 467)						Float _x_inc = ( (Float)(_char->__Field(HX_("xadvance",0a,87,b1,be),hx::paccDynamic)) );
HXLINE( 470)						if ((_idx < (_line.length - (int)1))) {
HXLINE( 471)							 ::phoenix::BitmapFont _this2 = this->font;
HXDLIN( 471)							int _second = ::haxe::Utf8_obj::charCodeAt(_line,(_idx + (int)1));
HXDLIN( 471)							 ::haxe::ds::IntMap _map = ( ( ::haxe::ds::IntMap)(::haxe::IMap_obj::get( ::Dynamic(_this2->info->__Field(HX_("kernings",27,b8,8b,80),hx::paccDynamic)),_index)) );
HXDLIN( 471)							 ::Dynamic _x_inc1;
HXDLIN( 471)							bool _x_inc2;
HXDLIN( 471)							if (hx::IsNotNull( _map )) {
HXLINE( 471)								_x_inc2 = _map->exists(_second);
            							}
            							else {
HXLINE( 471)								_x_inc2 = false;
            							}
HXDLIN( 471)							if (_x_inc2) {
HXLINE( 471)								_x_inc1 = _map->get(_second);
            							}
            							else {
HXLINE( 471)								_x_inc1 = (int)0;
            							}
HXDLIN( 471)							_x_inc = (_x_inc + _x_inc1);
HXLINE( 472)							if ((_index >= (int)32)) {
HXLINE( 473)								_x_inc = (_x_inc + this->letter_spacing);
            							}
            						}
HXLINE( 477)						_x_inc = (_x_inc * this->point_ratio);
HXLINE( 480)						_cur_x = (_cur_x + _x_inc);
HXLINE( 483)						_idx = (_idx + (int)1);
            					}
            				}
HXLINE( 488)				_line_idx = (_line_idx + (int)1);
            			}
            		}
HXLINE( 495)		int _vertidx = ::Std_obj::_hx_int(((Float)this->vertices->length / (Float)(int)6));
HXLINE( 496)		int _diff = (_vertidx - _total_idx);
HXLINE( 498)		if ((_diff > (int)0)) {
HXLINE( 499)			::Array< ::Dynamic> _hx_tmp3 = this->vertices;
HXDLIN( 499)			_hx_tmp3->removeRange((_total_idx * (int)6),(_diff * (int)6));
            		}
HXLINE( 503)		this->dirty_align = false;
HXLINE( 504)		this->emitter->emit((int)1,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextGeometry_obj,update_text,(void))

void TextGeometry_obj::update_char(int _letteridx,Float _x,Float _y,Float _w,Float _h,Float _u,Float _v,Float _u2,Float _v2, ::phoenix::Color _color){
            	HX_GC_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_509_update_char)
HXLINE( 511)		 ::phoenix::geometry::Vertex vert0;
HXDLIN( 511)		 ::phoenix::geometry::Vertex vert1;
HXDLIN( 511)		 ::phoenix::geometry::Vertex vert2;
HXLINE( 512)		 ::phoenix::geometry::Vertex vert3;
HXDLIN( 512)		 ::phoenix::geometry::Vertex vert4;
HXDLIN( 512)		 ::phoenix::geometry::Vertex vert5;
HXLINE( 514)		::Array< ::Dynamic> quad = this->cache->__get(_letteridx).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 517)		if (hx::IsNull( quad )) {
HXLINE( 521)			vert0 =  ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,_x,_y,null(),null()),_color,null());
HXLINE( 522)			vert1 =  ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,(_x + _w),_y,null(),null()),_color,null());
HXLINE( 523)			vert2 =  ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,(_x + _w),(_y + _h),null(),null()),_color,null());
HXLINE( 525)			vert3 =  ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,_x,(_y + _h),null(),null()),_color,null());
HXLINE( 526)			vert4 =  ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,_x,_y,null(),null()),_color,null());
HXLINE( 527)			vert5 =  ::phoenix::geometry::Vertex_obj::__alloc( HX_CTX , ::phoenix::Vector_obj::__alloc( HX_CTX ,(_x + _w),(_y + _h),null(),null()),_color,null());
HXLINE( 529)			quad = ::Array_obj< ::Dynamic>::__new(6)->init(0,vert0)->init(1,vert1)->init(2,vert2)->init(3,vert3)->init(4,vert4)->init(5,vert5);
HXLINE( 530)			this->cache[_letteridx] = quad;
            		}
            		else {
HXLINE( 537)			vert0 = quad->__get((int)0).StaticCast<  ::phoenix::geometry::Vertex >();
HXDLIN( 537)			vert1 = quad->__get((int)1).StaticCast<  ::phoenix::geometry::Vertex >();
HXDLIN( 537)			vert2 = quad->__get((int)2).StaticCast<  ::phoenix::geometry::Vertex >();
HXLINE( 538)			vert3 = quad->__get((int)3).StaticCast<  ::phoenix::geometry::Vertex >();
HXDLIN( 538)			vert4 = quad->__get((int)4).StaticCast<  ::phoenix::geometry::Vertex >();
HXDLIN( 538)			vert5 = quad->__get((int)5).StaticCast<  ::phoenix::geometry::Vertex >();
HXLINE( 541)			{
HXLINE( 541)				 ::phoenix::Vector _this = vert0->pos;
HXDLIN( 541)				bool prev = _this->ignore_listeners;
HXDLIN( 541)				_this->ignore_listeners = true;
HXDLIN( 541)				{
HXLINE( 541)					_this->x = _x;
HXDLIN( 541)					if (!(_this->_construct)) {
HXLINE( 541)						bool _hx_tmp;
HXDLIN( 541)						if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 541)							_hx_tmp = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 541)							_hx_tmp = false;
            						}
HXDLIN( 541)						if (_hx_tmp) {
HXLINE( 541)							_this->listen_x(_x);
            						}
            					}
            				}
HXDLIN( 541)				{
HXLINE( 541)					_this->y = _y;
HXDLIN( 541)					if (!(_this->_construct)) {
HXLINE( 541)						bool _hx_tmp1;
HXDLIN( 541)						if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 541)							_hx_tmp1 = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 541)							_hx_tmp1 = false;
            						}
HXDLIN( 541)						if (_hx_tmp1) {
HXLINE( 541)							_this->listen_y(_y);
            						}
            					}
            				}
HXDLIN( 541)				_this->ignore_listeners = prev;
HXDLIN( 541)				bool _hx_tmp2;
HXDLIN( 541)				if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 541)					_hx_tmp2 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 541)					_hx_tmp2 = false;
            				}
HXDLIN( 541)				if (_hx_tmp2) {
HXLINE( 541)					_this->listen_x(_this->x);
            				}
HXDLIN( 541)				bool _hx_tmp3;
HXDLIN( 541)				if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 541)					_hx_tmp3 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 541)					_hx_tmp3 = false;
            				}
HXDLIN( 541)				if (_hx_tmp3) {
HXLINE( 541)					_this->listen_y(_this->y);
            				}
            			}
HXLINE( 542)			{
HXLINE( 542)				 ::phoenix::Vector _this1 = vert1->pos;
HXDLIN( 542)				Float _x1 = (_x + _w);
HXDLIN( 542)				bool prev1 = _this1->ignore_listeners;
HXDLIN( 542)				_this1->ignore_listeners = true;
HXDLIN( 542)				{
HXLINE( 542)					_this1->x = _x1;
HXDLIN( 542)					if (!(_this1->_construct)) {
HXLINE( 542)						bool _hx_tmp4;
HXDLIN( 542)						if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 542)							_hx_tmp4 = !(_this1->ignore_listeners);
            						}
            						else {
HXLINE( 542)							_hx_tmp4 = false;
            						}
HXDLIN( 542)						if (_hx_tmp4) {
HXLINE( 542)							_this1->listen_x(_x1);
            						}
            					}
            				}
HXDLIN( 542)				{
HXLINE( 542)					_this1->y = _y;
HXDLIN( 542)					if (!(_this1->_construct)) {
HXLINE( 542)						bool _hx_tmp5;
HXDLIN( 542)						if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 542)							_hx_tmp5 = !(_this1->ignore_listeners);
            						}
            						else {
HXLINE( 542)							_hx_tmp5 = false;
            						}
HXDLIN( 542)						if (_hx_tmp5) {
HXLINE( 542)							_this1->listen_y(_y);
            						}
            					}
            				}
HXDLIN( 542)				_this1->ignore_listeners = prev1;
HXDLIN( 542)				bool _hx_tmp6;
HXDLIN( 542)				if (hx::IsNotNull( _this1->listen_x )) {
HXLINE( 542)					_hx_tmp6 = !(_this1->ignore_listeners);
            				}
            				else {
HXLINE( 542)					_hx_tmp6 = false;
            				}
HXDLIN( 542)				if (_hx_tmp6) {
HXLINE( 542)					_this1->listen_x(_this1->x);
            				}
HXDLIN( 542)				bool _hx_tmp7;
HXDLIN( 542)				if (hx::IsNotNull( _this1->listen_y )) {
HXLINE( 542)					_hx_tmp7 = !(_this1->ignore_listeners);
            				}
            				else {
HXLINE( 542)					_hx_tmp7 = false;
            				}
HXDLIN( 542)				if (_hx_tmp7) {
HXLINE( 542)					_this1->listen_y(_this1->y);
            				}
            			}
HXLINE( 543)			{
HXLINE( 543)				 ::phoenix::Vector _this2 = vert2->pos;
HXDLIN( 543)				Float _x2 = (_x + _w);
HXDLIN( 543)				Float _y1 = (_y + _h);
HXDLIN( 543)				bool prev2 = _this2->ignore_listeners;
HXDLIN( 543)				_this2->ignore_listeners = true;
HXDLIN( 543)				{
HXLINE( 543)					_this2->x = _x2;
HXDLIN( 543)					if (!(_this2->_construct)) {
HXLINE( 543)						bool _hx_tmp8;
HXDLIN( 543)						if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 543)							_hx_tmp8 = !(_this2->ignore_listeners);
            						}
            						else {
HXLINE( 543)							_hx_tmp8 = false;
            						}
HXDLIN( 543)						if (_hx_tmp8) {
HXLINE( 543)							_this2->listen_x(_x2);
            						}
            					}
            				}
HXDLIN( 543)				{
HXLINE( 543)					_this2->y = _y1;
HXDLIN( 543)					if (!(_this2->_construct)) {
HXLINE( 543)						bool _hx_tmp9;
HXDLIN( 543)						if (hx::IsNotNull( _this2->listen_y )) {
HXLINE( 543)							_hx_tmp9 = !(_this2->ignore_listeners);
            						}
            						else {
HXLINE( 543)							_hx_tmp9 = false;
            						}
HXDLIN( 543)						if (_hx_tmp9) {
HXLINE( 543)							_this2->listen_y(_y1);
            						}
            					}
            				}
HXDLIN( 543)				_this2->ignore_listeners = prev2;
HXDLIN( 543)				bool _hx_tmp10;
HXDLIN( 543)				if (hx::IsNotNull( _this2->listen_x )) {
HXLINE( 543)					_hx_tmp10 = !(_this2->ignore_listeners);
            				}
            				else {
HXLINE( 543)					_hx_tmp10 = false;
            				}
HXDLIN( 543)				if (_hx_tmp10) {
HXLINE( 543)					_this2->listen_x(_this2->x);
            				}
HXDLIN( 543)				bool _hx_tmp11;
HXDLIN( 543)				if (hx::IsNotNull( _this2->listen_y )) {
HXLINE( 543)					_hx_tmp11 = !(_this2->ignore_listeners);
            				}
            				else {
HXLINE( 543)					_hx_tmp11 = false;
            				}
HXDLIN( 543)				if (_hx_tmp11) {
HXLINE( 543)					_this2->listen_y(_this2->y);
            				}
            			}
HXLINE( 544)			{
HXLINE( 544)				 ::phoenix::Vector _this3 = vert3->pos;
HXDLIN( 544)				Float _y2 = (_y + _h);
HXDLIN( 544)				bool prev3 = _this3->ignore_listeners;
HXDLIN( 544)				_this3->ignore_listeners = true;
HXDLIN( 544)				{
HXLINE( 544)					_this3->x = _x;
HXDLIN( 544)					if (!(_this3->_construct)) {
HXLINE( 544)						bool _hx_tmp12;
HXDLIN( 544)						if (hx::IsNotNull( _this3->listen_x )) {
HXLINE( 544)							_hx_tmp12 = !(_this3->ignore_listeners);
            						}
            						else {
HXLINE( 544)							_hx_tmp12 = false;
            						}
HXDLIN( 544)						if (_hx_tmp12) {
HXLINE( 544)							_this3->listen_x(_x);
            						}
            					}
            				}
HXDLIN( 544)				{
HXLINE( 544)					_this3->y = _y2;
HXDLIN( 544)					if (!(_this3->_construct)) {
HXLINE( 544)						bool _hx_tmp13;
HXDLIN( 544)						if (hx::IsNotNull( _this3->listen_y )) {
HXLINE( 544)							_hx_tmp13 = !(_this3->ignore_listeners);
            						}
            						else {
HXLINE( 544)							_hx_tmp13 = false;
            						}
HXDLIN( 544)						if (_hx_tmp13) {
HXLINE( 544)							_this3->listen_y(_y2);
            						}
            					}
            				}
HXDLIN( 544)				_this3->ignore_listeners = prev3;
HXDLIN( 544)				bool _hx_tmp14;
HXDLIN( 544)				if (hx::IsNotNull( _this3->listen_x )) {
HXLINE( 544)					_hx_tmp14 = !(_this3->ignore_listeners);
            				}
            				else {
HXLINE( 544)					_hx_tmp14 = false;
            				}
HXDLIN( 544)				if (_hx_tmp14) {
HXLINE( 544)					_this3->listen_x(_this3->x);
            				}
HXDLIN( 544)				bool _hx_tmp15;
HXDLIN( 544)				if (hx::IsNotNull( _this3->listen_y )) {
HXLINE( 544)					_hx_tmp15 = !(_this3->ignore_listeners);
            				}
            				else {
HXLINE( 544)					_hx_tmp15 = false;
            				}
HXDLIN( 544)				if (_hx_tmp15) {
HXLINE( 544)					_this3->listen_y(_this3->y);
            				}
            			}
HXLINE( 545)			{
HXLINE( 545)				 ::phoenix::Vector _this4 = vert4->pos;
HXDLIN( 545)				bool prev4 = _this4->ignore_listeners;
HXDLIN( 545)				_this4->ignore_listeners = true;
HXDLIN( 545)				{
HXLINE( 545)					_this4->x = _x;
HXDLIN( 545)					if (!(_this4->_construct)) {
HXLINE( 545)						bool _hx_tmp16;
HXDLIN( 545)						if (hx::IsNotNull( _this4->listen_x )) {
HXLINE( 545)							_hx_tmp16 = !(_this4->ignore_listeners);
            						}
            						else {
HXLINE( 545)							_hx_tmp16 = false;
            						}
HXDLIN( 545)						if (_hx_tmp16) {
HXLINE( 545)							_this4->listen_x(_x);
            						}
            					}
            				}
HXDLIN( 545)				{
HXLINE( 545)					_this4->y = _y;
HXDLIN( 545)					if (!(_this4->_construct)) {
HXLINE( 545)						bool _hx_tmp17;
HXDLIN( 545)						if (hx::IsNotNull( _this4->listen_y )) {
HXLINE( 545)							_hx_tmp17 = !(_this4->ignore_listeners);
            						}
            						else {
HXLINE( 545)							_hx_tmp17 = false;
            						}
HXDLIN( 545)						if (_hx_tmp17) {
HXLINE( 545)							_this4->listen_y(_y);
            						}
            					}
            				}
HXDLIN( 545)				_this4->ignore_listeners = prev4;
HXDLIN( 545)				bool _hx_tmp18;
HXDLIN( 545)				if (hx::IsNotNull( _this4->listen_x )) {
HXLINE( 545)					_hx_tmp18 = !(_this4->ignore_listeners);
            				}
            				else {
HXLINE( 545)					_hx_tmp18 = false;
            				}
HXDLIN( 545)				if (_hx_tmp18) {
HXLINE( 545)					_this4->listen_x(_this4->x);
            				}
HXDLIN( 545)				bool _hx_tmp19;
HXDLIN( 545)				if (hx::IsNotNull( _this4->listen_y )) {
HXLINE( 545)					_hx_tmp19 = !(_this4->ignore_listeners);
            				}
            				else {
HXLINE( 545)					_hx_tmp19 = false;
            				}
HXDLIN( 545)				if (_hx_tmp19) {
HXLINE( 545)					_this4->listen_y(_this4->y);
            				}
            			}
HXLINE( 546)			{
HXLINE( 546)				 ::phoenix::Vector _this5 = vert5->pos;
HXDLIN( 546)				Float _x3 = (_x + _w);
HXDLIN( 546)				Float _y3 = (_y + _h);
HXDLIN( 546)				bool prev5 = _this5->ignore_listeners;
HXDLIN( 546)				_this5->ignore_listeners = true;
HXDLIN( 546)				{
HXLINE( 546)					_this5->x = _x3;
HXDLIN( 546)					if (!(_this5->_construct)) {
HXLINE( 546)						bool _hx_tmp20;
HXDLIN( 546)						if (hx::IsNotNull( _this5->listen_x )) {
HXLINE( 546)							_hx_tmp20 = !(_this5->ignore_listeners);
            						}
            						else {
HXLINE( 546)							_hx_tmp20 = false;
            						}
HXDLIN( 546)						if (_hx_tmp20) {
HXLINE( 546)							_this5->listen_x(_x3);
            						}
            					}
            				}
HXDLIN( 546)				{
HXLINE( 546)					_this5->y = _y3;
HXDLIN( 546)					if (!(_this5->_construct)) {
HXLINE( 546)						bool _hx_tmp21;
HXDLIN( 546)						if (hx::IsNotNull( _this5->listen_y )) {
HXLINE( 546)							_hx_tmp21 = !(_this5->ignore_listeners);
            						}
            						else {
HXLINE( 546)							_hx_tmp21 = false;
            						}
HXDLIN( 546)						if (_hx_tmp21) {
HXLINE( 546)							_this5->listen_y(_y3);
            						}
            					}
            				}
HXDLIN( 546)				_this5->ignore_listeners = prev5;
HXDLIN( 546)				bool _hx_tmp22;
HXDLIN( 546)				if (hx::IsNotNull( _this5->listen_x )) {
HXLINE( 546)					_hx_tmp22 = !(_this5->ignore_listeners);
            				}
            				else {
HXLINE( 546)					_hx_tmp22 = false;
            				}
HXDLIN( 546)				if (_hx_tmp22) {
HXLINE( 546)					_this5->listen_x(_this5->x);
            				}
HXDLIN( 546)				bool _hx_tmp23;
HXDLIN( 546)				if (hx::IsNotNull( _this5->listen_y )) {
HXLINE( 546)					_hx_tmp23 = !(_this5->ignore_listeners);
            				}
            				else {
HXLINE( 546)					_hx_tmp23 = false;
            				}
HXDLIN( 546)				if (_hx_tmp23) {
HXLINE( 546)					_this5->listen_y(_this5->y);
            				}
            			}
            		}
HXLINE( 550)		{
HXLINE( 550)			 ::phoenix::geometry::TextureCoord _this6 = vert0->uv->uv0;
HXDLIN( 550)			_this6->u = _u;
HXDLIN( 550)			_this6->v = _v;
            		}
HXLINE( 551)		{
HXLINE( 551)			 ::phoenix::geometry::TextureCoord _this7 = vert1->uv->uv0;
HXDLIN( 551)			_this7->u = _u2;
HXDLIN( 551)			_this7->v = _v;
            		}
HXLINE( 552)		{
HXLINE( 552)			 ::phoenix::geometry::TextureCoord _this8 = vert2->uv->uv0;
HXDLIN( 552)			_this8->u = _u2;
HXDLIN( 552)			_this8->v = _v2;
            		}
HXLINE( 553)		{
HXLINE( 553)			 ::phoenix::geometry::TextureCoord _this9 = vert3->uv->uv0;
HXDLIN( 553)			_this9->u = _u;
HXDLIN( 553)			_this9->v = _v2;
            		}
HXLINE( 554)		{
HXLINE( 554)			 ::phoenix::geometry::TextureCoord _this10 = vert4->uv->uv0;
HXDLIN( 554)			_this10->u = _u;
HXDLIN( 554)			_this10->v = _v;
            		}
HXLINE( 555)		{
HXLINE( 555)			 ::phoenix::geometry::TextureCoord _this11 = vert5->uv->uv0;
HXDLIN( 555)			_this11->u = _u2;
HXDLIN( 555)			_this11->v = _v2;
            		}
HXLINE( 560)		int _vertidx = ::Math_obj::floor(((Float)this->vertices->length / (Float)(int)6));
HXLINE( 562)		if ((_vertidx <= _letteridx)) {
HXLINE( 563)			this->add(vert0);
HXDLIN( 563)			this->add(vert1);
HXDLIN( 563)			this->add(vert2);
HXLINE( 564)			this->add(vert3);
HXDLIN( 564)			this->add(vert4);
HXDLIN( 564)			this->add(vert5);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC10(TextGeometry_obj,update_char,(void))

bool TextGeometry_obj::set_dirty_sizing(bool _b){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_572_set_dirty_sizing)
HXLINE( 574)		this->dirty_align = true;
HXLINE( 576)		return (this->dirty_sizing = _b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_dirty_sizing,return )

 ::phoenix::Rectangle TextGeometry_obj::set_bounds( ::phoenix::Rectangle _bounds){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_581_set_bounds)
HXLINE( 583)		this->bounds = _bounds;
HXLINE( 585)		if (hx::IsNull( this->bounds )) {
HXLINE( 585)			return this->bounds;
            		}
HXLINE( 587)		this->set_dirty_sizing(true);
HXLINE( 588)		this->update_text();
HXLINE( 590)		return this->bounds;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_bounds,return )

bool TextGeometry_obj::set_bounds_wrap(bool _wrap){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_595_set_bounds_wrap)
HXLINE( 597)		this->bounds_wrap = _wrap;
HXLINE( 599)		this->set_dirty_sizing(true);
HXLINE( 600)		this->update_text();
HXLINE( 602)		return this->bounds_wrap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_bounds_wrap,return )

bool TextGeometry_obj::set_letter_snapping(bool _snap){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_607_set_letter_snapping)
HXLINE( 609)		this->letter_snapping = _snap;
HXLINE( 611)		this->set_dirty_sizing(true);
HXLINE( 612)		this->update_text();
HXLINE( 614)		return this->letter_snapping;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_letter_snapping,return )

Float TextGeometry_obj::set_line_spacing(Float _line_spacing){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_619_set_line_spacing)
HXLINE( 621)		this->line_spacing = _line_spacing;
HXLINE( 623)		this->set_dirty_sizing(true);
HXLINE( 624)		this->update_text();
HXLINE( 626)		return this->line_spacing;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_line_spacing,return )

Float TextGeometry_obj::set_letter_spacing(Float _letter_spacing){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_631_set_letter_spacing)
HXLINE( 633)		this->letter_spacing = _letter_spacing;
HXLINE( 635)		this->set_dirty_sizing(true);
HXLINE( 636)		this->update_text();
HXLINE( 638)		return this->letter_spacing;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_letter_spacing,return )

int TextGeometry_obj::set_align(int _align){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_643_set_align)
HXLINE( 645)		this->align = _align;
HXLINE( 647)		this->dirty_align = true;
HXLINE( 648)		this->update_text();
HXLINE( 650)		return this->align;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_align,return )

int TextGeometry_obj::set_align_vertical(int _align_vertical){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_655_set_align_vertical)
HXLINE( 657)		this->align_vertical = _align_vertical;
HXLINE( 659)		this->dirty_align = true;
HXLINE( 660)		this->update_text();
HXLINE( 662)		return this->align_vertical;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_align_vertical,return )

Float TextGeometry_obj::set_point_size(Float s){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_667_set_point_size)
HXLINE( 669)		if ((s < (int)0)) {
HXLINE( 669)			s = (int)0;
            		}
HXLINE( 670)		this->point_size = s;
HXLINE( 672)		this->set_dirty_sizing(true);
HXLINE( 673)		this->update_text();
HXLINE( 675)		return this->point_size;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_point_size,return )

 ::phoenix::BitmapFont TextGeometry_obj::set_font( ::phoenix::BitmapFont _font){
            	HX_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_680_set_font)
HXLINE( 682)		this->font = _font;
HXLINE( 684)		bool _hx_tmp;
HXDLIN( 684)		if (!(this->setup_)) {
HXLINE( 684)			_hx_tmp = hx::IsNotNull( _font );
            		}
            		else {
HXLINE( 684)			_hx_tmp = false;
            		}
HXDLIN( 684)		if (_hx_tmp) {
HXLINE( 686)			this->set_texture(this->font->pages->get((int)0).StaticCast<  ::phoenix::Texture >());
HXLINE( 687)			this->set_dirty_sizing(true);
HXLINE( 688)			this->dirty_align = true;
HXLINE( 689)			this->update_text();
            		}
HXLINE( 692)		return this->font;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_font,return )

Float TextGeometry_obj::set_smoothness(Float s){
            	HX_GC_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_701_set_smoothness)
HXLINE( 703)		if ((s < (int)0)) {
HXLINE( 703)			s = (int)0;
            		}
HXLINE( 705)		bool _hx_tmp;
HXDLIN( 705)		bool _hx_tmp1;
HXDLIN( 705)		if (hx::IsNotNull( this->state->shader )) {
HXLINE( 705)			_hx_tmp1 = this->sdf;
            		}
            		else {
HXLINE( 705)			_hx_tmp1 = false;
            		}
HXDLIN( 705)		if (_hx_tmp1) {
HXLINE( 705)			_hx_tmp = this->unique;
            		}
            		else {
HXLINE( 705)			_hx_tmp = false;
            		}
HXDLIN( 705)		if (_hx_tmp) {
HXLINE( 706)			 ::phoenix::Shader _this = this->state->shader;
HXDLIN( 706)			{
HXLINE( 706)				 ::phoenix::Uniforms _this1 = _this->uniforms;
HXDLIN( 706)				 ::opengl::GLObject program = _this->program;
HXDLIN( 706)				int _id;
HXDLIN( 706)				if (hx::IsNull( program )) {
HXLINE( 706)					_id = (int)0;
            				}
            				else {
HXLINE( 706)					_id = program->id;
            				}
HXDLIN( 706)				 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,HX_("smoothness",c5,37,00,93)));
HXDLIN( 706)				 ::phoenix::_Shader::Uniform_Float _float = ( ( ::phoenix::_Shader::Uniform_Float)(::haxe::IMap_obj::get(_this1->floats,HX_("smoothness",c5,37,00,93))) );
HXDLIN( 706)				if (hx::IsNotNull( _float )) {
HXLINE( 706)					_float->value = s;
            				}
            				else {
HXLINE( 706)					_float =  ::phoenix::_Shader::Uniform_Float_obj::__alloc( HX_CTX ,HX_("smoothness",c5,37,00,93),s,this1);
HXDLIN( 706)					::haxe::IMap_obj::set(_this1->floats,HX_("smoothness",c5,37,00,93),_float);
            				}
HXDLIN( 706)				_this1->dirty_floats->push(_float);
            			}
            		}
HXLINE( 709)		return (this->smoothness = s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_smoothness,return )

Float TextGeometry_obj::set_thickness(Float s){
            	HX_GC_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_714_set_thickness)
HXLINE( 716)		if ((s < (int)0)) {
HXLINE( 716)			s = (int)0;
            		}
HXLINE( 718)		bool _hx_tmp;
HXDLIN( 718)		bool _hx_tmp1;
HXDLIN( 718)		if (hx::IsNotNull( this->state->shader )) {
HXLINE( 718)			_hx_tmp1 = this->sdf;
            		}
            		else {
HXLINE( 718)			_hx_tmp1 = false;
            		}
HXDLIN( 718)		if (_hx_tmp1) {
HXLINE( 718)			_hx_tmp = this->unique;
            		}
            		else {
HXLINE( 718)			_hx_tmp = false;
            		}
HXDLIN( 718)		if (_hx_tmp) {
HXLINE( 719)			 ::phoenix::Shader _this = this->state->shader;
HXDLIN( 719)			{
HXLINE( 719)				 ::phoenix::Uniforms _this1 = _this->uniforms;
HXDLIN( 719)				 ::opengl::GLObject program = _this->program;
HXDLIN( 719)				int _id;
HXDLIN( 719)				if (hx::IsNull( program )) {
HXLINE( 719)					_id = (int)0;
            				}
            				else {
HXLINE( 719)					_id = program->id;
            				}
HXDLIN( 719)				 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,HX_("thickness",74,f1,66,5a)));
HXDLIN( 719)				 ::phoenix::_Shader::Uniform_Float _float = ( ( ::phoenix::_Shader::Uniform_Float)(::haxe::IMap_obj::get(_this1->floats,HX_("thickness",74,f1,66,5a))) );
HXDLIN( 719)				if (hx::IsNotNull( _float )) {
HXLINE( 719)					_float->value = s;
            				}
            				else {
HXLINE( 719)					_float =  ::phoenix::_Shader::Uniform_Float_obj::__alloc( HX_CTX ,HX_("thickness",74,f1,66,5a),s,this1);
HXDLIN( 719)					::haxe::IMap_obj::set(_this1->floats,HX_("thickness",74,f1,66,5a),_float);
            				}
HXDLIN( 719)				_this1->dirty_floats->push(_float);
            			}
            		}
HXLINE( 722)		return (this->thickness = s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_thickness,return )

Float TextGeometry_obj::set_outline(Float s){
            	HX_GC_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_727_set_outline)
HXLINE( 729)		if ((s < ((Float)0.0))) {
HXLINE( 729)			s = ((Float)0.0);
            		}
            		else {
HXLINE( 729)			if ((s > ((Float)1.0))) {
HXLINE( 729)				s = ((Float)1.0);
            			}
            			else {
HXLINE( 729)				s = s;
            			}
            		}
HXLINE( 731)		bool _hx_tmp;
HXDLIN( 731)		bool _hx_tmp1;
HXDLIN( 731)		if (hx::IsNotNull( this->state->shader )) {
HXLINE( 731)			_hx_tmp1 = this->sdf;
            		}
            		else {
HXLINE( 731)			_hx_tmp1 = false;
            		}
HXDLIN( 731)		if (_hx_tmp1) {
HXLINE( 731)			_hx_tmp = this->unique;
            		}
            		else {
HXLINE( 731)			_hx_tmp = false;
            		}
HXDLIN( 731)		if (_hx_tmp) {
HXLINE( 732)			 ::phoenix::Shader _this = this->state->shader;
HXDLIN( 732)			{
HXLINE( 732)				 ::phoenix::Uniforms _this1 = _this->uniforms;
HXDLIN( 732)				 ::opengl::GLObject program = _this->program;
HXDLIN( 732)				int _id;
HXDLIN( 732)				if (hx::IsNull( program )) {
HXLINE( 732)					_id = (int)0;
            				}
            				else {
HXLINE( 732)					_id = program->id;
            				}
HXDLIN( 732)				 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,HX_("outline",82,17,be,e1)));
HXDLIN( 732)				 ::phoenix::_Shader::Uniform_Float _float = ( ( ::phoenix::_Shader::Uniform_Float)(::haxe::IMap_obj::get(_this1->floats,HX_("outline",82,17,be,e1))) );
HXDLIN( 732)				if (hx::IsNotNull( _float )) {
HXLINE( 732)					_float->value = s;
            				}
            				else {
HXLINE( 732)					_float =  ::phoenix::_Shader::Uniform_Float_obj::__alloc( HX_CTX ,HX_("outline",82,17,be,e1),s,this1);
HXDLIN( 732)					::haxe::IMap_obj::set(_this1->floats,HX_("outline",82,17,be,e1),_float);
            				}
HXDLIN( 732)				_this1->dirty_floats->push(_float);
            			}
            		}
HXLINE( 735)		return (this->outline = s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_outline,return )

Float TextGeometry_obj::set_glow_threshold(Float s){
            	HX_GC_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_740_set_glow_threshold)
HXLINE( 742)		if ((s < (int)0)) {
HXLINE( 742)			s = (int)0;
            		}
HXLINE( 744)		bool _hx_tmp;
HXDLIN( 744)		bool _hx_tmp1;
HXDLIN( 744)		if (hx::IsNotNull( this->state->shader )) {
HXLINE( 744)			_hx_tmp1 = this->sdf;
            		}
            		else {
HXLINE( 744)			_hx_tmp1 = false;
            		}
HXDLIN( 744)		if (_hx_tmp1) {
HXLINE( 744)			_hx_tmp = this->unique;
            		}
            		else {
HXLINE( 744)			_hx_tmp = false;
            		}
HXDLIN( 744)		if (_hx_tmp) {
HXLINE( 745)			 ::phoenix::Shader _this = this->state->shader;
HXDLIN( 745)			{
HXLINE( 745)				 ::phoenix::Uniforms _this1 = _this->uniforms;
HXDLIN( 745)				 ::opengl::GLObject program = _this->program;
HXDLIN( 745)				int _id;
HXDLIN( 745)				if (hx::IsNull( program )) {
HXLINE( 745)					_id = (int)0;
            				}
            				else {
HXLINE( 745)					_id = program->id;
            				}
HXDLIN( 745)				 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,HX_("glow_threshold",39,20,9c,ba)));
HXDLIN( 745)				 ::phoenix::_Shader::Uniform_Float _float = ( ( ::phoenix::_Shader::Uniform_Float)(::haxe::IMap_obj::get(_this1->floats,HX_("glow_threshold",39,20,9c,ba))) );
HXDLIN( 745)				if (hx::IsNotNull( _float )) {
HXLINE( 745)					_float->value = s;
            				}
            				else {
HXLINE( 745)					_float =  ::phoenix::_Shader::Uniform_Float_obj::__alloc( HX_CTX ,HX_("glow_threshold",39,20,9c,ba),s,this1);
HXDLIN( 745)					::haxe::IMap_obj::set(_this1->floats,HX_("glow_threshold",39,20,9c,ba),_float);
            				}
HXDLIN( 745)				_this1->dirty_floats->push(_float);
            			}
            		}
HXLINE( 748)		return (this->glow_threshold = s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_glow_threshold,return )

Float TextGeometry_obj::set_glow_amount(Float s){
            	HX_GC_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_753_set_glow_amount)
HXLINE( 755)		if ((s < (int)0)) {
HXLINE( 755)			s = (int)0;
            		}
HXLINE( 757)		bool _hx_tmp;
HXDLIN( 757)		bool _hx_tmp1;
HXDLIN( 757)		if (hx::IsNotNull( this->state->shader )) {
HXLINE( 757)			_hx_tmp1 = this->sdf;
            		}
            		else {
HXLINE( 757)			_hx_tmp1 = false;
            		}
HXDLIN( 757)		if (_hx_tmp1) {
HXLINE( 757)			_hx_tmp = this->unique;
            		}
            		else {
HXLINE( 757)			_hx_tmp = false;
            		}
HXDLIN( 757)		if (_hx_tmp) {
HXLINE( 758)			 ::phoenix::Shader _this = this->state->shader;
HXDLIN( 758)			{
HXLINE( 758)				 ::phoenix::Uniforms _this1 = _this->uniforms;
HXDLIN( 758)				 ::opengl::GLObject program = _this->program;
HXDLIN( 758)				int _id;
HXDLIN( 758)				if (hx::IsNull( program )) {
HXLINE( 758)					_id = (int)0;
            				}
            				else {
HXLINE( 758)					_id = program->id;
            				}
HXDLIN( 758)				 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,HX_("glow_amount",8a,70,81,49)));
HXDLIN( 758)				 ::phoenix::_Shader::Uniform_Float _float = ( ( ::phoenix::_Shader::Uniform_Float)(::haxe::IMap_obj::get(_this1->floats,HX_("glow_amount",8a,70,81,49))) );
HXDLIN( 758)				if (hx::IsNotNull( _float )) {
HXLINE( 758)					_float->value = s;
            				}
            				else {
HXLINE( 758)					_float =  ::phoenix::_Shader::Uniform_Float_obj::__alloc( HX_CTX ,HX_("glow_amount",8a,70,81,49),s,this1);
HXDLIN( 758)					::haxe::IMap_obj::set(_this1->floats,HX_("glow_amount",8a,70,81,49),_float);
            				}
HXDLIN( 758)				_this1->dirty_floats->push(_float);
            			}
            		}
HXLINE( 761)		return (this->glow_amount = s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_glow_amount,return )

 ::phoenix::Color TextGeometry_obj::set_outline_color( ::phoenix::Color c){
            	HX_GC_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_766_set_outline_color)
HXLINE( 768)		if (hx::IsNull( c )) {
HXLINE( 768)			return (this->outline_color = c);
            		}
HXLINE( 770)		bool _hx_tmp;
HXDLIN( 770)		bool _hx_tmp1;
HXDLIN( 770)		if (hx::IsNotNull( this->state->shader )) {
HXLINE( 770)			_hx_tmp1 = this->sdf;
            		}
            		else {
HXLINE( 770)			_hx_tmp1 = false;
            		}
HXDLIN( 770)		if (_hx_tmp1) {
HXLINE( 770)			_hx_tmp = this->unique;
            		}
            		else {
HXLINE( 770)			_hx_tmp = false;
            		}
HXDLIN( 770)		if (_hx_tmp) {
HXLINE( 771)			 ::phoenix::Shader _this = this->state->shader;
HXDLIN( 771)			{
HXLINE( 771)				 ::phoenix::Uniforms _this1 = _this->uniforms;
HXDLIN( 771)				 ::opengl::GLObject program = _this->program;
HXDLIN( 771)				int _id;
HXDLIN( 771)				if (hx::IsNull( program )) {
HXLINE( 771)					_id = (int)0;
            				}
            				else {
HXLINE( 771)					_id = program->id;
            				}
HXDLIN( 771)				 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,HX_("outline_color",a6,5d,13,96)));
HXDLIN( 771)				 ::phoenix::_Shader::Uniform_phoenix_Color _color = ( ( ::phoenix::_Shader::Uniform_phoenix_Color)(::haxe::IMap_obj::get(_this1->colors,HX_("outline_color",a6,5d,13,96))) );
HXDLIN( 771)				if (hx::IsNotNull( _color )) {
HXLINE( 771)					_color->value = c;
            				}
            				else {
HXLINE( 771)					_color =  ::phoenix::_Shader::Uniform_phoenix_Color_obj::__alloc( HX_CTX ,HX_("outline_color",a6,5d,13,96),c,this1);
HXDLIN( 771)					::haxe::IMap_obj::set(_this1->colors,HX_("outline_color",a6,5d,13,96),_color);
            				}
HXDLIN( 771)				_this1->dirty_colors->push(_color);
            			}
            		}
HXLINE( 774)		return (this->outline_color = c);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_outline_color,return )

 ::phoenix::Color TextGeometry_obj::set_glow_color( ::phoenix::Color c){
            	HX_GC_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_779_set_glow_color)
HXLINE( 781)		if (hx::IsNull( c )) {
HXLINE( 781)			return (this->glow_color = c);
            		}
HXLINE( 783)		bool _hx_tmp;
HXDLIN( 783)		bool _hx_tmp1;
HXDLIN( 783)		if (hx::IsNotNull( this->state->shader )) {
HXLINE( 783)			_hx_tmp1 = this->sdf;
            		}
            		else {
HXLINE( 783)			_hx_tmp1 = false;
            		}
HXDLIN( 783)		if (_hx_tmp1) {
HXLINE( 783)			_hx_tmp = this->unique;
            		}
            		else {
HXLINE( 783)			_hx_tmp = false;
            		}
HXDLIN( 783)		if (_hx_tmp) {
HXLINE( 784)			 ::phoenix::Shader _this = this->state->shader;
HXDLIN( 784)			{
HXLINE( 784)				 ::phoenix::Uniforms _this1 = _this->uniforms;
HXDLIN( 784)				 ::opengl::GLObject program = _this->program;
HXDLIN( 784)				int _id;
HXDLIN( 784)				if (hx::IsNull( program )) {
HXLINE( 784)					_id = (int)0;
            				}
            				else {
HXLINE( 784)					_id = program->id;
            				}
HXDLIN( 784)				 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,HX_("glow_color",f1,ee,6b,c3)));
HXDLIN( 784)				 ::phoenix::_Shader::Uniform_phoenix_Color _color = ( ( ::phoenix::_Shader::Uniform_phoenix_Color)(::haxe::IMap_obj::get(_this1->colors,HX_("glow_color",f1,ee,6b,c3))) );
HXDLIN( 784)				if (hx::IsNotNull( _color )) {
HXLINE( 784)					_color->value = c;
            				}
            				else {
HXLINE( 784)					_color =  ::phoenix::_Shader::Uniform_phoenix_Color_obj::__alloc( HX_CTX ,HX_("glow_color",f1,ee,6b,c3),c,this1);
HXDLIN( 784)					::haxe::IMap_obj::set(_this1->colors,HX_("glow_color",f1,ee,6b,c3),_color);
            				}
HXDLIN( 784)				_this1->dirty_colors->push(_color);
            			}
            		}
HXLINE( 787)		return (this->glow_color = c);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextGeometry_obj,set_glow_color,return )

void TextGeometry_obj::flush_uniforms(){
            	HX_GC_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_796_flush_uniforms)
HXDLIN( 796)		bool _hx_tmp;
HXDLIN( 796)		if (hx::IsNotNull( this->state->shader )) {
HXDLIN( 796)			_hx_tmp = this->sdf;
            		}
            		else {
HXDLIN( 796)			_hx_tmp = false;
            		}
HXDLIN( 796)		if (_hx_tmp) {
HXLINE( 797)			{
HXLINE( 797)				 ::phoenix::Shader _this = this->state->shader;
HXDLIN( 797)				Float _value = this->smoothness;
HXDLIN( 797)				{
HXLINE( 797)					 ::phoenix::Uniforms _this1 = _this->uniforms;
HXDLIN( 797)					 ::opengl::GLObject program = _this->program;
HXDLIN( 797)					int _id;
HXDLIN( 797)					if (hx::IsNull( program )) {
HXLINE( 797)						_id = (int)0;
            					}
            					else {
HXLINE( 797)						_id = program->id;
            					}
HXDLIN( 797)					 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id,HX_("smoothness",c5,37,00,93)));
HXDLIN( 797)					 ::phoenix::_Shader::Uniform_Float _float = ( ( ::phoenix::_Shader::Uniform_Float)(::haxe::IMap_obj::get(_this1->floats,HX_("smoothness",c5,37,00,93))) );
HXDLIN( 797)					if (hx::IsNotNull( _float )) {
HXLINE( 797)						_float->value = _value;
            					}
            					else {
HXLINE( 797)						_float =  ::phoenix::_Shader::Uniform_Float_obj::__alloc( HX_CTX ,HX_("smoothness",c5,37,00,93),_value,this1);
HXDLIN( 797)						::haxe::IMap_obj::set(_this1->floats,HX_("smoothness",c5,37,00,93),_float);
            					}
HXDLIN( 797)					_this1->dirty_floats->push(_float);
            				}
            			}
HXLINE( 798)			{
HXLINE( 798)				 ::phoenix::Shader _this2 = this->state->shader;
HXDLIN( 798)				Float _value1 = this->thickness;
HXDLIN( 798)				{
HXLINE( 798)					 ::phoenix::Uniforms _this3 = _this2->uniforms;
HXDLIN( 798)					 ::opengl::GLObject program1 = _this2->program;
HXDLIN( 798)					int _id1;
HXDLIN( 798)					if (hx::IsNull( program1 )) {
HXLINE( 798)						_id1 = (int)0;
            					}
            					else {
HXLINE( 798)						_id1 = program1->id;
            					}
HXDLIN( 798)					 ::opengl::GLObject this2 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id1,HX_("thickness",74,f1,66,5a)));
HXDLIN( 798)					 ::phoenix::_Shader::Uniform_Float _float1 = ( ( ::phoenix::_Shader::Uniform_Float)(::haxe::IMap_obj::get(_this3->floats,HX_("thickness",74,f1,66,5a))) );
HXDLIN( 798)					if (hx::IsNotNull( _float1 )) {
HXLINE( 798)						_float1->value = _value1;
            					}
            					else {
HXLINE( 798)						_float1 =  ::phoenix::_Shader::Uniform_Float_obj::__alloc( HX_CTX ,HX_("thickness",74,f1,66,5a),_value1,this2);
HXDLIN( 798)						::haxe::IMap_obj::set(_this3->floats,HX_("thickness",74,f1,66,5a),_float1);
            					}
HXDLIN( 798)					_this3->dirty_floats->push(_float1);
            				}
            			}
HXLINE( 799)			{
HXLINE( 799)				 ::phoenix::Shader _this4 = this->state->shader;
HXDLIN( 799)				Float _value2 = this->outline;
HXDLIN( 799)				{
HXLINE( 799)					 ::phoenix::Uniforms _this5 = _this4->uniforms;
HXDLIN( 799)					 ::opengl::GLObject program2 = _this4->program;
HXDLIN( 799)					int _id2;
HXDLIN( 799)					if (hx::IsNull( program2 )) {
HXLINE( 799)						_id2 = (int)0;
            					}
            					else {
HXLINE( 799)						_id2 = program2->id;
            					}
HXDLIN( 799)					 ::opengl::GLObject this3 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id2,HX_("outline",82,17,be,e1)));
HXDLIN( 799)					 ::phoenix::_Shader::Uniform_Float _float2 = ( ( ::phoenix::_Shader::Uniform_Float)(::haxe::IMap_obj::get(_this5->floats,HX_("outline",82,17,be,e1))) );
HXDLIN( 799)					if (hx::IsNotNull( _float2 )) {
HXLINE( 799)						_float2->value = _value2;
            					}
            					else {
HXLINE( 799)						_float2 =  ::phoenix::_Shader::Uniform_Float_obj::__alloc( HX_CTX ,HX_("outline",82,17,be,e1),_value2,this3);
HXDLIN( 799)						::haxe::IMap_obj::set(_this5->floats,HX_("outline",82,17,be,e1),_float2);
            					}
HXDLIN( 799)					_this5->dirty_floats->push(_float2);
            				}
            			}
HXLINE( 800)			{
HXLINE( 800)				 ::phoenix::Shader _this6 = this->state->shader;
HXDLIN( 800)				Float _value3 = this->glow_threshold;
HXDLIN( 800)				{
HXLINE( 800)					 ::phoenix::Uniforms _this7 = _this6->uniforms;
HXDLIN( 800)					 ::opengl::GLObject program3 = _this6->program;
HXDLIN( 800)					int _id3;
HXDLIN( 800)					if (hx::IsNull( program3 )) {
HXLINE( 800)						_id3 = (int)0;
            					}
            					else {
HXLINE( 800)						_id3 = program3->id;
            					}
HXDLIN( 800)					 ::opengl::GLObject this4 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id3,HX_("glow_threshold",39,20,9c,ba)));
HXDLIN( 800)					 ::phoenix::_Shader::Uniform_Float _float3 = ( ( ::phoenix::_Shader::Uniform_Float)(::haxe::IMap_obj::get(_this7->floats,HX_("glow_threshold",39,20,9c,ba))) );
HXDLIN( 800)					if (hx::IsNotNull( _float3 )) {
HXLINE( 800)						_float3->value = _value3;
            					}
            					else {
HXLINE( 800)						_float3 =  ::phoenix::_Shader::Uniform_Float_obj::__alloc( HX_CTX ,HX_("glow_threshold",39,20,9c,ba),_value3,this4);
HXDLIN( 800)						::haxe::IMap_obj::set(_this7->floats,HX_("glow_threshold",39,20,9c,ba),_float3);
            					}
HXDLIN( 800)					_this7->dirty_floats->push(_float3);
            				}
            			}
HXLINE( 801)			{
HXLINE( 801)				 ::phoenix::Shader _this8 = this->state->shader;
HXDLIN( 801)				Float _value4 = this->glow_amount;
HXDLIN( 801)				{
HXLINE( 801)					 ::phoenix::Uniforms _this9 = _this8->uniforms;
HXDLIN( 801)					 ::opengl::GLObject program4 = _this8->program;
HXDLIN( 801)					int _id4;
HXDLIN( 801)					if (hx::IsNull( program4 )) {
HXLINE( 801)						_id4 = (int)0;
            					}
            					else {
HXLINE( 801)						_id4 = program4->id;
            					}
HXDLIN( 801)					 ::opengl::GLObject this5 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id4,HX_("glow_amount",8a,70,81,49)));
HXDLIN( 801)					 ::phoenix::_Shader::Uniform_Float _float4 = ( ( ::phoenix::_Shader::Uniform_Float)(::haxe::IMap_obj::get(_this9->floats,HX_("glow_amount",8a,70,81,49))) );
HXDLIN( 801)					if (hx::IsNotNull( _float4 )) {
HXLINE( 801)						_float4->value = _value4;
            					}
            					else {
HXLINE( 801)						_float4 =  ::phoenix::_Shader::Uniform_Float_obj::__alloc( HX_CTX ,HX_("glow_amount",8a,70,81,49),_value4,this5);
HXDLIN( 801)						::haxe::IMap_obj::set(_this9->floats,HX_("glow_amount",8a,70,81,49),_float4);
            					}
HXDLIN( 801)					_this9->dirty_floats->push(_float4);
            				}
            			}
HXLINE( 802)			{
HXLINE( 802)				 ::phoenix::Shader _this10 = this->state->shader;
HXDLIN( 802)				 ::phoenix::Color _value5 = this->outline_color;
HXDLIN( 802)				{
HXLINE( 802)					 ::phoenix::Uniforms _this11 = _this10->uniforms;
HXDLIN( 802)					 ::opengl::GLObject program5 = _this10->program;
HXDLIN( 802)					int _id5;
HXDLIN( 802)					if (hx::IsNull( program5 )) {
HXLINE( 802)						_id5 = (int)0;
            					}
            					else {
HXLINE( 802)						_id5 = program5->id;
            					}
HXDLIN( 802)					 ::opengl::GLObject this6 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id5,HX_("outline_color",a6,5d,13,96)));
HXDLIN( 802)					 ::phoenix::_Shader::Uniform_phoenix_Color _color = ( ( ::phoenix::_Shader::Uniform_phoenix_Color)(::haxe::IMap_obj::get(_this11->colors,HX_("outline_color",a6,5d,13,96))) );
HXDLIN( 802)					if (hx::IsNotNull( _color )) {
HXLINE( 802)						_color->value = _value5;
            					}
            					else {
HXLINE( 802)						_color =  ::phoenix::_Shader::Uniform_phoenix_Color_obj::__alloc( HX_CTX ,HX_("outline_color",a6,5d,13,96),_value5,this6);
HXDLIN( 802)						::haxe::IMap_obj::set(_this11->colors,HX_("outline_color",a6,5d,13,96),_color);
            					}
HXDLIN( 802)					_this11->dirty_colors->push(_color);
            				}
            			}
HXLINE( 803)			{
HXLINE( 803)				 ::phoenix::Shader _this12 = this->state->shader;
HXDLIN( 803)				 ::phoenix::Color _value6 = this->glow_color;
HXDLIN( 803)				{
HXLINE( 803)					 ::phoenix::Uniforms _this13 = _this12->uniforms;
HXDLIN( 803)					 ::opengl::GLObject program6 = _this12->program;
HXDLIN( 803)					int _id6;
HXDLIN( 803)					if (hx::IsNull( program6 )) {
HXLINE( 803)						_id6 = (int)0;
            					}
            					else {
HXLINE( 803)						_id6 = program6->id;
            					}
HXDLIN( 803)					 ::opengl::GLObject this7 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,glGetUniformLocation(_id6,HX_("glow_color",f1,ee,6b,c3)));
HXDLIN( 803)					 ::phoenix::_Shader::Uniform_phoenix_Color _color1 = ( ( ::phoenix::_Shader::Uniform_phoenix_Color)(::haxe::IMap_obj::get(_this13->colors,HX_("glow_color",f1,ee,6b,c3))) );
HXDLIN( 803)					if (hx::IsNotNull( _color1 )) {
HXLINE( 803)						_color1->value = _value6;
            					}
            					else {
HXLINE( 803)						_color1 =  ::phoenix::_Shader::Uniform_phoenix_Color_obj::__alloc( HX_CTX ,HX_("glow_color",f1,ee,6b,c3),_value6,this7);
HXDLIN( 803)						::haxe::IMap_obj::set(_this13->colors,HX_("glow_color",f1,ee,6b,c3),_color1);
            					}
HXDLIN( 803)					_this13->dirty_colors->push(_color1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextGeometry_obj,flush_uniforms,(void))

 ::EReg TextGeometry_obj::tab_regex;


hx::ObjectPtr< TextGeometry_obj > TextGeometry_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< TextGeometry_obj > __this = new TextGeometry_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< TextGeometry_obj > TextGeometry_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	TextGeometry_obj *__this = (TextGeometry_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextGeometry_obj), true, "phoenix.geometry.TextGeometry"));
	*(void **)__this = TextGeometry_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

TextGeometry_obj::TextGeometry_obj()
{
}

void TextGeometry_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextGeometry);
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(point_size,"point_size");
	HX_MARK_MEMBER_NAME(line_spacing,"line_spacing");
	HX_MARK_MEMBER_NAME(letter_spacing,"letter_spacing");
	HX_MARK_MEMBER_NAME(letter_snapping,"letter_snapping");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(bounds_wrap,"bounds_wrap");
	HX_MARK_MEMBER_NAME(align,"align");
	HX_MARK_MEMBER_NAME(align_vertical,"align_vertical");
	HX_MARK_MEMBER_NAME(sdf,"sdf");
	HX_MARK_MEMBER_NAME(unique,"unique");
	HX_MARK_MEMBER_NAME(smoothness,"smoothness");
	HX_MARK_MEMBER_NAME(thickness,"thickness");
	HX_MARK_MEMBER_NAME(outline,"outline");
	HX_MARK_MEMBER_NAME(outline_color,"outline_color");
	HX_MARK_MEMBER_NAME(glow_threshold,"glow_threshold");
	HX_MARK_MEMBER_NAME(glow_amount,"glow_amount");
	HX_MARK_MEMBER_NAME(glow_color,"glow_color");
	HX_MARK_MEMBER_NAME(line_widths,"line_widths");
	HX_MARK_MEMBER_NAME(text_width,"text_width");
	HX_MARK_MEMBER_NAME(text_height,"text_height");
	HX_MARK_MEMBER_NAME(line_offsets,"line_offsets");
	HX_MARK_MEMBER_NAME(lines,"lines");
	HX_MARK_MEMBER_NAME(emitter,"emitter");
	HX_MARK_MEMBER_NAME(cache,"cache");
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(text_h_w,"text_h_w");
	HX_MARK_MEMBER_NAME(text_h_h,"text_h_h");
	HX_MARK_MEMBER_NAME(point_ratio,"point_ratio");
	HX_MARK_MEMBER_NAME(dirty_sizing,"dirty_sizing");
	HX_MARK_MEMBER_NAME(dirty_align,"dirty_align");
	HX_MARK_MEMBER_NAME(setup_,"setup_");
	 ::phoenix::geometry::Geometry_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextGeometry_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(point_size,"point_size");
	HX_VISIT_MEMBER_NAME(line_spacing,"line_spacing");
	HX_VISIT_MEMBER_NAME(letter_spacing,"letter_spacing");
	HX_VISIT_MEMBER_NAME(letter_snapping,"letter_snapping");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(bounds_wrap,"bounds_wrap");
	HX_VISIT_MEMBER_NAME(align,"align");
	HX_VISIT_MEMBER_NAME(align_vertical,"align_vertical");
	HX_VISIT_MEMBER_NAME(sdf,"sdf");
	HX_VISIT_MEMBER_NAME(unique,"unique");
	HX_VISIT_MEMBER_NAME(smoothness,"smoothness");
	HX_VISIT_MEMBER_NAME(thickness,"thickness");
	HX_VISIT_MEMBER_NAME(outline,"outline");
	HX_VISIT_MEMBER_NAME(outline_color,"outline_color");
	HX_VISIT_MEMBER_NAME(glow_threshold,"glow_threshold");
	HX_VISIT_MEMBER_NAME(glow_amount,"glow_amount");
	HX_VISIT_MEMBER_NAME(glow_color,"glow_color");
	HX_VISIT_MEMBER_NAME(line_widths,"line_widths");
	HX_VISIT_MEMBER_NAME(text_width,"text_width");
	HX_VISIT_MEMBER_NAME(text_height,"text_height");
	HX_VISIT_MEMBER_NAME(line_offsets,"line_offsets");
	HX_VISIT_MEMBER_NAME(lines,"lines");
	HX_VISIT_MEMBER_NAME(emitter,"emitter");
	HX_VISIT_MEMBER_NAME(cache,"cache");
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(text_h_w,"text_h_w");
	HX_VISIT_MEMBER_NAME(text_h_h,"text_h_h");
	HX_VISIT_MEMBER_NAME(point_ratio,"point_ratio");
	HX_VISIT_MEMBER_NAME(dirty_sizing,"dirty_sizing");
	HX_VISIT_MEMBER_NAME(dirty_align,"dirty_align");
	HX_VISIT_MEMBER_NAME(setup_,"setup_");
	 ::phoenix::geometry::Geometry_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextGeometry_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sdf") ) { return hx::Val( sdf ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"font") ) { return hx::Val( font ); }
		if (HX_FIELD_EQ(inName,"tidy") ) { return hx::Val( tidy_dyn() ); }
		if (HX_FIELD_EQ(inName,"drop") ) { return hx::Val( drop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { return hx::Val( align ); }
		if (HX_FIELD_EQ(inName,"lines") ) { return hx::Val( lines ); }
		if (HX_FIELD_EQ(inName,"cache") ) { return hx::Val( cache ); }
		if (HX_FIELD_EQ(inName,"stats") ) { return hx::Val( stats_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"unique") ) { return hx::Val( unique ); }
		if (HX_FIELD_EQ(inName,"setup_") ) { return hx::Val( setup_ ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"outline") ) { return hx::Val( outline ); }
		if (HX_FIELD_EQ(inName,"emitter") ) { return hx::Val( emitter ); }
		if (HX_FIELD_EQ(inName,"options") ) { return hx::Val( options ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"text_h_w") ) { return hx::Val( text_h_w ); }
		if (HX_FIELD_EQ(inName,"text_h_h") ) { return hx::Val( text_h_h ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return hx::Val( set_font_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"thickness") ) { return hx::Val( thickness ); }
		if (HX_FIELD_EQ(inName,"set_align") ) { return hx::Val( set_align_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"point_size") ) { return hx::Val( point_size ); }
		if (HX_FIELD_EQ(inName,"smoothness") ) { return hx::Val( smoothness ); }
		if (HX_FIELD_EQ(inName,"glow_color") ) { return hx::Val( glow_color ); }
		if (HX_FIELD_EQ(inName,"text_width") ) { return hx::Val( text_width ); }
		if (HX_FIELD_EQ(inName,"set_bounds") ) { return hx::Val( set_bounds_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bounds_wrap") ) { return hx::Val( bounds_wrap ); }
		if (HX_FIELD_EQ(inName,"glow_amount") ) { return hx::Val( glow_amount ); }
		if (HX_FIELD_EQ(inName,"line_widths") ) { return hx::Val( line_widths ); }
		if (HX_FIELD_EQ(inName,"text_height") ) { return hx::Val( text_height ); }
		if (HX_FIELD_EQ(inName,"point_ratio") ) { return hx::Val( point_ratio ); }
		if (HX_FIELD_EQ(inName,"dirty_align") ) { return hx::Val( dirty_align ); }
		if (HX_FIELD_EQ(inName,"update_text") ) { return hx::Val( update_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"update_char") ) { return hx::Val( update_char_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_outline") ) { return hx::Val( set_outline_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"line_spacing") ) { return hx::Val( line_spacing ); }
		if (HX_FIELD_EQ(inName,"line_offsets") ) { return hx::Val( line_offsets ); }
		if (HX_FIELD_EQ(inName,"dirty_sizing") ) { return hx::Val( dirty_sizing ); }
		if (HX_FIELD_EQ(inName,"update_sizes") ) { return hx::Val( update_sizes_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"outline_color") ) { return hx::Val( outline_color ); }
		if (HX_FIELD_EQ(inName,"set_thickness") ) { return hx::Val( set_thickness_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"letter_spacing") ) { return hx::Val( letter_spacing ); }
		if (HX_FIELD_EQ(inName,"align_vertical") ) { return hx::Val( align_vertical ); }
		if (HX_FIELD_EQ(inName,"glow_threshold") ) { return hx::Val( glow_threshold ); }
		if (HX_FIELD_EQ(inName,"set_point_size") ) { return hx::Val( set_point_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_smoothness") ) { return hx::Val( set_smoothness_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_glow_color") ) { return hx::Val( set_glow_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"flush_uniforms") ) { return hx::Val( flush_uniforms_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"letter_snapping") ) { return hx::Val( letter_snapping ); }
		if (HX_FIELD_EQ(inName,"default_options") ) { return hx::Val( default_options_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bounds_wrap") ) { return hx::Val( set_bounds_wrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_glow_amount") ) { return hx::Val( set_glow_amount_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"set_dirty_sizing") ) { return hx::Val( set_dirty_sizing_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_line_spacing") ) { return hx::Val( set_line_spacing_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"set_outline_color") ) { return hx::Val( set_outline_color_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"set_letter_spacing") ) { return hx::Val( set_letter_spacing_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_align_vertical") ) { return hx::Val( set_align_vertical_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_glow_threshold") ) { return hx::Val( set_glow_threshold_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"set_letter_snapping") ) { return hx::Val( set_letter_snapping_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextGeometry_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"tab_regex") ) { outValue = ( tab_regex ); return true; }
	}
	return false;
}

hx::Val TextGeometry_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sdf") ) { sdf=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_font(inValue.Cast<  ::phoenix::BitmapFont >()) );font=inValue.Cast<  ::phoenix::BitmapFont >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_align(inValue.Cast< int >()) );align=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lines") ) { lines=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cache") ) { cache=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bounds(inValue.Cast<  ::phoenix::Rectangle >()) );bounds=inValue.Cast<  ::phoenix::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unique") ) { unique=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"setup_") ) { setup_=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"outline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_outline(inValue.Cast< Float >()) );outline=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"emitter") ) { emitter=inValue.Cast<  ::luxe::Emitter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"text_h_w") ) { text_h_w=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text_h_h") ) { text_h_h=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"thickness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_thickness(inValue.Cast< Float >()) );thickness=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"point_size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_point_size(inValue.Cast< Float >()) );point_size=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"smoothness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_smoothness(inValue.Cast< Float >()) );smoothness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"glow_color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_glow_color(inValue.Cast<  ::phoenix::Color >()) );glow_color=inValue.Cast<  ::phoenix::Color >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text_width") ) { text_width=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bounds_wrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bounds_wrap(inValue.Cast< bool >()) );bounds_wrap=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"glow_amount") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_glow_amount(inValue.Cast< Float >()) );glow_amount=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"line_widths") ) { line_widths=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text_height") ) { text_height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"point_ratio") ) { point_ratio=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_align") ) { dirty_align=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"line_spacing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_line_spacing(inValue.Cast< Float >()) );line_spacing=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"line_offsets") ) { line_offsets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_sizing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_dirty_sizing(inValue.Cast< bool >()) );dirty_sizing=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"outline_color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_outline_color(inValue.Cast<  ::phoenix::Color >()) );outline_color=inValue.Cast<  ::phoenix::Color >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"letter_spacing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_letter_spacing(inValue.Cast< Float >()) );letter_spacing=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"align_vertical") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_align_vertical(inValue.Cast< int >()) );align_vertical=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"glow_threshold") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_glow_threshold(inValue.Cast< Float >()) );glow_threshold=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"letter_snapping") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_letter_snapping(inValue.Cast< bool >()) );letter_snapping=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextGeometry_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"tab_regex") ) { tab_regex=ioValue.Cast<  ::EReg >(); return true; }
	}
	return false;
}

void TextGeometry_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"));
	outFields->push(HX_HCSTRING("point_size","\x50","\x66","\xf5","\x4b"));
	outFields->push(HX_HCSTRING("line_spacing","\xf8","\xb8","\xad","\x3c"));
	outFields->push(HX_HCSTRING("letter_spacing","\xea","\x8f","\xec","\x6d"));
	outFields->push(HX_HCSTRING("letter_snapping","\x75","\xb3","\xb8","\xee"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("bounds_wrap","\x14","\x47","\xee","\xec"));
	outFields->push(HX_HCSTRING("align","\xc5","\x56","\x91","\x21"));
	outFields->push(HX_HCSTRING("align_vertical","\x70","\xdc","\x8d","\x53"));
	outFields->push(HX_HCSTRING("sdf","\xb5","\x9a","\x57","\x00"));
	outFields->push(HX_HCSTRING("unique","\x11","\x93","\x92","\x63"));
	outFields->push(HX_HCSTRING("smoothness","\xc5","\x37","\x00","\x93"));
	outFields->push(HX_HCSTRING("thickness","\x74","\xf1","\x66","\x5a"));
	outFields->push(HX_HCSTRING("outline","\x82","\x17","\xbe","\xe1"));
	outFields->push(HX_HCSTRING("outline_color","\xa6","\x5d","\x13","\x96"));
	outFields->push(HX_HCSTRING("glow_threshold","\x39","\x20","\x9c","\xba"));
	outFields->push(HX_HCSTRING("glow_amount","\x8a","\x70","\x81","\x49"));
	outFields->push(HX_HCSTRING("glow_color","\xf1","\xee","\x6b","\xc3"));
	outFields->push(HX_HCSTRING("line_widths","\xd8","\x2f","\x76","\x2b"));
	outFields->push(HX_HCSTRING("text_width","\xb4","\x09","\xa6","\xc8"));
	outFields->push(HX_HCSTRING("text_height","\x79","\xec","\xf1","\x7e"));
	outFields->push(HX_HCSTRING("line_offsets","\xf5","\x8e","\x57","\x82"));
	outFields->push(HX_HCSTRING("lines","\xff","\xdd","\x01","\x75"));
	outFields->push(HX_HCSTRING("emitter","\x6e","\x35","\xf6","\xbe"));
	outFields->push(HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"));
	outFields->push(HX_HCSTRING("options","\x5e","\x33","\xfe","\xdf"));
	outFields->push(HX_HCSTRING("text_h_w","\xce","\xa9","\x3c","\x57"));
	outFields->push(HX_HCSTRING("text_h_h","\xbf","\xa9","\x3c","\x57"));
	outFields->push(HX_HCSTRING("point_ratio","\x9c","\x4c","\x0f","\x92"));
	outFields->push(HX_HCSTRING("dirty_sizing","\x0b","\x44","\xee","\xf8"));
	outFields->push(HX_HCSTRING("dirty_align","\x98","\x47","\xe7","\xd4"));
	outFields->push(HX_HCSTRING("setup_","\x42","\xff","\x88","\x6f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextGeometry_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TextGeometry_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsObject /*::phoenix::BitmapFont*/ ,(int)offsetof(TextGeometry_obj,font),HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43")},
	{hx::fsFloat,(int)offsetof(TextGeometry_obj,point_size),HX_HCSTRING("point_size","\x50","\x66","\xf5","\x4b")},
	{hx::fsFloat,(int)offsetof(TextGeometry_obj,line_spacing),HX_HCSTRING("line_spacing","\xf8","\xb8","\xad","\x3c")},
	{hx::fsFloat,(int)offsetof(TextGeometry_obj,letter_spacing),HX_HCSTRING("letter_spacing","\xea","\x8f","\xec","\x6d")},
	{hx::fsBool,(int)offsetof(TextGeometry_obj,letter_snapping),HX_HCSTRING("letter_snapping","\x75","\xb3","\xb8","\xee")},
	{hx::fsObject /*::phoenix::Rectangle*/ ,(int)offsetof(TextGeometry_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsBool,(int)offsetof(TextGeometry_obj,bounds_wrap),HX_HCSTRING("bounds_wrap","\x14","\x47","\xee","\xec")},
	{hx::fsInt,(int)offsetof(TextGeometry_obj,align),HX_HCSTRING("align","\xc5","\x56","\x91","\x21")},
	{hx::fsInt,(int)offsetof(TextGeometry_obj,align_vertical),HX_HCSTRING("align_vertical","\x70","\xdc","\x8d","\x53")},
	{hx::fsBool,(int)offsetof(TextGeometry_obj,sdf),HX_HCSTRING("sdf","\xb5","\x9a","\x57","\x00")},
	{hx::fsBool,(int)offsetof(TextGeometry_obj,unique),HX_HCSTRING("unique","\x11","\x93","\x92","\x63")},
	{hx::fsFloat,(int)offsetof(TextGeometry_obj,smoothness),HX_HCSTRING("smoothness","\xc5","\x37","\x00","\x93")},
	{hx::fsFloat,(int)offsetof(TextGeometry_obj,thickness),HX_HCSTRING("thickness","\x74","\xf1","\x66","\x5a")},
	{hx::fsFloat,(int)offsetof(TextGeometry_obj,outline),HX_HCSTRING("outline","\x82","\x17","\xbe","\xe1")},
	{hx::fsObject /*::phoenix::Color*/ ,(int)offsetof(TextGeometry_obj,outline_color),HX_HCSTRING("outline_color","\xa6","\x5d","\x13","\x96")},
	{hx::fsFloat,(int)offsetof(TextGeometry_obj,glow_threshold),HX_HCSTRING("glow_threshold","\x39","\x20","\x9c","\xba")},
	{hx::fsFloat,(int)offsetof(TextGeometry_obj,glow_amount),HX_HCSTRING("glow_amount","\x8a","\x70","\x81","\x49")},
	{hx::fsObject /*::phoenix::Color*/ ,(int)offsetof(TextGeometry_obj,glow_color),HX_HCSTRING("glow_color","\xf1","\xee","\x6b","\xc3")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(TextGeometry_obj,line_widths),HX_HCSTRING("line_widths","\xd8","\x2f","\x76","\x2b")},
	{hx::fsFloat,(int)offsetof(TextGeometry_obj,text_width),HX_HCSTRING("text_width","\xb4","\x09","\xa6","\xc8")},
	{hx::fsFloat,(int)offsetof(TextGeometry_obj,text_height),HX_HCSTRING("text_height","\x79","\xec","\xf1","\x7e")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TextGeometry_obj,line_offsets),HX_HCSTRING("line_offsets","\xf5","\x8e","\x57","\x82")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(TextGeometry_obj,lines),HX_HCSTRING("lines","\xff","\xdd","\x01","\x75")},
	{hx::fsObject /*::luxe::Emitter*/ ,(int)offsetof(TextGeometry_obj,emitter),HX_HCSTRING("emitter","\x6e","\x35","\xf6","\xbe")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TextGeometry_obj,cache),HX_HCSTRING("cache","\x42","\x9a","\x14","\x41")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextGeometry_obj,options),HX_HCSTRING("options","\x5e","\x33","\xfe","\xdf")},
	{hx::fsFloat,(int)offsetof(TextGeometry_obj,text_h_w),HX_HCSTRING("text_h_w","\xce","\xa9","\x3c","\x57")},
	{hx::fsFloat,(int)offsetof(TextGeometry_obj,text_h_h),HX_HCSTRING("text_h_h","\xbf","\xa9","\x3c","\x57")},
	{hx::fsFloat,(int)offsetof(TextGeometry_obj,point_ratio),HX_HCSTRING("point_ratio","\x9c","\x4c","\x0f","\x92")},
	{hx::fsBool,(int)offsetof(TextGeometry_obj,dirty_sizing),HX_HCSTRING("dirty_sizing","\x0b","\x44","\xee","\xf8")},
	{hx::fsBool,(int)offsetof(TextGeometry_obj,dirty_align),HX_HCSTRING("dirty_align","\x98","\x47","\xe7","\xd4")},
	{hx::fsBool,(int)offsetof(TextGeometry_obj,setup_),HX_HCSTRING("setup_","\x42","\xff","\x88","\x6f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextGeometry_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::EReg*/ ,(void *) &TextGeometry_obj::tab_regex,HX_HCSTRING("tab_regex","\x1d","\xbe","\x5e","\x0f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextGeometry_obj_sMemberFields[] = {
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"),
	HX_HCSTRING("point_size","\x50","\x66","\xf5","\x4b"),
	HX_HCSTRING("line_spacing","\xf8","\xb8","\xad","\x3c"),
	HX_HCSTRING("letter_spacing","\xea","\x8f","\xec","\x6d"),
	HX_HCSTRING("letter_snapping","\x75","\xb3","\xb8","\xee"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("bounds_wrap","\x14","\x47","\xee","\xec"),
	HX_HCSTRING("align","\xc5","\x56","\x91","\x21"),
	HX_HCSTRING("align_vertical","\x70","\xdc","\x8d","\x53"),
	HX_HCSTRING("sdf","\xb5","\x9a","\x57","\x00"),
	HX_HCSTRING("unique","\x11","\x93","\x92","\x63"),
	HX_HCSTRING("smoothness","\xc5","\x37","\x00","\x93"),
	HX_HCSTRING("thickness","\x74","\xf1","\x66","\x5a"),
	HX_HCSTRING("outline","\x82","\x17","\xbe","\xe1"),
	HX_HCSTRING("outline_color","\xa6","\x5d","\x13","\x96"),
	HX_HCSTRING("glow_threshold","\x39","\x20","\x9c","\xba"),
	HX_HCSTRING("glow_amount","\x8a","\x70","\x81","\x49"),
	HX_HCSTRING("glow_color","\xf1","\xee","\x6b","\xc3"),
	HX_HCSTRING("line_widths","\xd8","\x2f","\x76","\x2b"),
	HX_HCSTRING("text_width","\xb4","\x09","\xa6","\xc8"),
	HX_HCSTRING("text_height","\x79","\xec","\xf1","\x7e"),
	HX_HCSTRING("line_offsets","\xf5","\x8e","\x57","\x82"),
	HX_HCSTRING("lines","\xff","\xdd","\x01","\x75"),
	HX_HCSTRING("emitter","\x6e","\x35","\xf6","\xbe"),
	HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"),
	HX_HCSTRING("options","\x5e","\x33","\xfe","\xdf"),
	HX_HCSTRING("text_h_w","\xce","\xa9","\x3c","\x57"),
	HX_HCSTRING("text_h_h","\xbf","\xa9","\x3c","\x57"),
	HX_HCSTRING("point_ratio","\x9c","\x4c","\x0f","\x92"),
	HX_HCSTRING("dirty_sizing","\x0b","\x44","\xee","\xf8"),
	HX_HCSTRING("dirty_align","\x98","\x47","\xe7","\xd4"),
	HX_HCSTRING("setup_","\x42","\xff","\x88","\x6f"),
	HX_HCSTRING("tidy","\x4a","\xc4","\xfc","\x4c"),
	HX_HCSTRING("drop","\x2f","\x38","\x70","\x42"),
	HX_HCSTRING("default_options","\xa0","\x8e","\x12","\x69"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84"),
	HX_HCSTRING("update_sizes","\x9c","\x82","\xef","\x43"),
	HX_HCSTRING("update_text","\xe3","\xe1","\x75","\x52"),
	HX_HCSTRING("update_char","\x0c","\x74","\x3b","\x47"),
	HX_HCSTRING("set_dirty_sizing","\x08","\x1e","\xcf","\x53"),
	HX_HCSTRING("set_bounds","\xb2","\x94","\x22","\x5a"),
	HX_HCSTRING("set_bounds_wrap","\xb7","\x7b","\x9b","\xa9"),
	HX_HCSTRING("set_letter_snapping","\x98","\x75","\x60","\xb6"),
	HX_HCSTRING("set_line_spacing","\xf5","\x92","\x8e","\x97"),
	HX_HCSTRING("set_letter_spacing","\x27","\xa3","\x35","\xe6"),
	HX_HCSTRING("set_align","\x28","\x9f","\x8b","\x48"),
	HX_HCSTRING("set_align_vertical","\xad","\xef","\xd6","\xcb"),
	HX_HCSTRING("set_point_size","\x0d","\xd7","\x0a","\xe2"),
	HX_HCSTRING("set_font","\xcc","\x72","\xd8","\x71"),
	HX_HCSTRING("set_smoothness","\x82","\xa8","\x15","\x29"),
	HX_HCSTRING("set_thickness","\x57","\xa7","\xd0","\x60"),
	HX_HCSTRING("set_outline","\xa5","\x7e","\x25","\x72"),
	HX_HCSTRING("set_glow_threshold","\x76","\x33","\xe5","\x32"),
	HX_HCSTRING("set_glow_amount","\x2d","\xa5","\x2e","\x06"),
	HX_HCSTRING("set_outline_color","\x09","\x41","\xf1","\xbf"),
	HX_HCSTRING("set_glow_color","\xae","\x5f","\x81","\x59"),
	HX_HCSTRING("flush_uniforms","\xda","\xe8","\xd6","\x56"),
	::String(null()) };

static void TextGeometry_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextGeometry_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextGeometry_obj::tab_regex,"tab_regex");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextGeometry_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextGeometry_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextGeometry_obj::tab_regex,"tab_regex");
};

#endif

hx::Class TextGeometry_obj::__mClass;

static ::String TextGeometry_obj_sStaticFields[] = {
	HX_HCSTRING("tab_regex","\x1d","\xbe","\x5e","\x0f"),
	::String(null())
};

void TextGeometry_obj::__register()
{
	hx::Object *dummy = new TextGeometry_obj;
	TextGeometry_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.geometry.TextGeometry","\xbc","\x0f","\x18","\xb9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextGeometry_obj::__GetStatic;
	__mClass->mSetStaticField = &TextGeometry_obj::__SetStatic;
	__mClass->mMarkFunc = TextGeometry_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextGeometry_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextGeometry_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextGeometry_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextGeometry_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextGeometry_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextGeometry_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextGeometry_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_7a4d4459dba2bf3c_112_boot)
HXDLIN( 112)		tab_regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("\t",09,00,00,00),HX_("gim",0b,84,4e,00));
            	}
}

} // end namespace phoenix
} // end namespace geometry
