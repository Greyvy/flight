// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_phoenix_Shader
#include <phoenix/Shader.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_geometry_GeometryKey
#include <phoenix/geometry/GeometryKey.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ff0a57908aaeb32e_904_new,"phoenix.geometry.GeometryKey","new",0xbf3d7a62,"phoenix.geometry.GeometryKey.new","phoenix/geometry/Geometry.hx",904,0xdab136cf)
namespace phoenix{
namespace geometry{

void GeometryKey_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ff0a57908aaeb32e_904_new)
HXLINE( 920)		this->blend_dest_rgb = (int)0;
HXLINE( 919)		this->blend_dest_alpha = (int)0;
HXLINE( 918)		this->blend_src_rgb = (int)0;
HXLINE( 917)		this->blend_src_alpha = (int)0;
HXLINE( 916)		this->blend_disabled = false;
HXLINE( 915)		this->clip = false;
HXLINE( 914)		this->depth = ((Float)0);
HXLINE( 910)		this->uuid = HX_("",00,00,00,00);
HXLINE( 909)		this->sequence = (int)0;
HXLINE( 908)		this->timestamp = ((Float)0);
            	}

Dynamic GeometryKey_obj::__CreateEmpty() { return new GeometryKey_obj; }

void *GeometryKey_obj::_hx_vtable = 0;

Dynamic GeometryKey_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GeometryKey_obj > _hx_result = new GeometryKey_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GeometryKey_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x70ea34cc;
}


GeometryKey_obj::GeometryKey_obj()
{
}

void GeometryKey_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GeometryKey);
	HX_MARK_MEMBER_NAME(timestamp,"timestamp");
	HX_MARK_MEMBER_NAME(sequence,"sequence");
	HX_MARK_MEMBER_NAME(uuid,"uuid");
	HX_MARK_MEMBER_NAME(primitive_type,"primitive_type");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(depth,"depth");
	HX_MARK_MEMBER_NAME(clip,"clip");
	HX_MARK_MEMBER_NAME(blend_disabled,"blend_disabled");
	HX_MARK_MEMBER_NAME(blend_src_alpha,"blend_src_alpha");
	HX_MARK_MEMBER_NAME(blend_src_rgb,"blend_src_rgb");
	HX_MARK_MEMBER_NAME(blend_dest_alpha,"blend_dest_alpha");
	HX_MARK_MEMBER_NAME(blend_dest_rgb,"blend_dest_rgb");
	HX_MARK_END_CLASS();
}

void GeometryKey_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(timestamp,"timestamp");
	HX_VISIT_MEMBER_NAME(sequence,"sequence");
	HX_VISIT_MEMBER_NAME(uuid,"uuid");
	HX_VISIT_MEMBER_NAME(primitive_type,"primitive_type");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(depth,"depth");
	HX_VISIT_MEMBER_NAME(clip,"clip");
	HX_VISIT_MEMBER_NAME(blend_disabled,"blend_disabled");
	HX_VISIT_MEMBER_NAME(blend_src_alpha,"blend_src_alpha");
	HX_VISIT_MEMBER_NAME(blend_src_rgb,"blend_src_rgb");
	HX_VISIT_MEMBER_NAME(blend_dest_alpha,"blend_dest_alpha");
	HX_VISIT_MEMBER_NAME(blend_dest_rgb,"blend_dest_rgb");
}

hx::Val GeometryKey_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"uuid") ) { return hx::Val( uuid ); }
		if (HX_FIELD_EQ(inName,"clip") ) { return hx::Val( clip ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { return hx::Val( depth ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sequence") ) { return hx::Val( sequence ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timestamp") ) { return hx::Val( timestamp ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"blend_src_rgb") ) { return hx::Val( blend_src_rgb ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"primitive_type") ) { return hx::Val( primitive_type ); }
		if (HX_FIELD_EQ(inName,"blend_disabled") ) { return hx::Val( blend_disabled ); }
		if (HX_FIELD_EQ(inName,"blend_dest_rgb") ) { return hx::Val( blend_dest_rgb ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blend_src_alpha") ) { return hx::Val( blend_src_alpha ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"blend_dest_alpha") ) { return hx::Val( blend_dest_alpha ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GeometryKey_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"uuid") ) { uuid=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clip") ) { clip=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { depth=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::phoenix::Shader >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::phoenix::Texture >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sequence") ) { sequence=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timestamp") ) { timestamp=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"blend_src_rgb") ) { blend_src_rgb=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"primitive_type") ) { primitive_type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blend_disabled") ) { blend_disabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blend_dest_rgb") ) { blend_dest_rgb=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blend_src_alpha") ) { blend_src_alpha=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"blend_dest_alpha") ) { blend_dest_alpha=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GeometryKey_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("timestamp","\xd6","\xd4","\xce","\xa5"));
	outFields->push(HX_HCSTRING("sequence","\x41","\x1e","\xed","\xe8"));
	outFields->push(HX_HCSTRING("uuid","\x3b","\x1a","\xaf","\x4d"));
	outFields->push(HX_HCSTRING("primitive_type","\x92","\xc8","\x6d","\x88"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"));
	outFields->push(HX_HCSTRING("clip","\xd0","\x6e","\xc2","\x41"));
	outFields->push(HX_HCSTRING("blend_disabled","\x6a","\x3e","\x58","\x24"));
	outFields->push(HX_HCSTRING("blend_src_alpha","\xd5","\x2b","\x5d","\x0e"));
	outFields->push(HX_HCSTRING("blend_src_rgb","\xc4","\x83","\xd8","\x0a"));
	outFields->push(HX_HCSTRING("blend_dest_alpha","\xef","\xd6","\x35","\x60"));
	outFields->push(HX_HCSTRING("blend_dest_rgb","\x5e","\x54","\xa8","\x6c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GeometryKey_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(GeometryKey_obj,timestamp),HX_HCSTRING("timestamp","\xd6","\xd4","\xce","\xa5")},
	{hx::fsInt,(int)offsetof(GeometryKey_obj,sequence),HX_HCSTRING("sequence","\x41","\x1e","\xed","\xe8")},
	{hx::fsString,(int)offsetof(GeometryKey_obj,uuid),HX_HCSTRING("uuid","\x3b","\x1a","\xaf","\x4d")},
	{hx::fsInt,(int)offsetof(GeometryKey_obj,primitive_type),HX_HCSTRING("primitive_type","\x92","\xc8","\x6d","\x88")},
	{hx::fsObject /*::phoenix::Texture*/ ,(int)offsetof(GeometryKey_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsObject /*::phoenix::Shader*/ ,(int)offsetof(GeometryKey_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{hx::fsFloat,(int)offsetof(GeometryKey_obj,depth),HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7")},
	{hx::fsBool,(int)offsetof(GeometryKey_obj,clip),HX_HCSTRING("clip","\xd0","\x6e","\xc2","\x41")},
	{hx::fsBool,(int)offsetof(GeometryKey_obj,blend_disabled),HX_HCSTRING("blend_disabled","\x6a","\x3e","\x58","\x24")},
	{hx::fsInt,(int)offsetof(GeometryKey_obj,blend_src_alpha),HX_HCSTRING("blend_src_alpha","\xd5","\x2b","\x5d","\x0e")},
	{hx::fsInt,(int)offsetof(GeometryKey_obj,blend_src_rgb),HX_HCSTRING("blend_src_rgb","\xc4","\x83","\xd8","\x0a")},
	{hx::fsInt,(int)offsetof(GeometryKey_obj,blend_dest_alpha),HX_HCSTRING("blend_dest_alpha","\xef","\xd6","\x35","\x60")},
	{hx::fsInt,(int)offsetof(GeometryKey_obj,blend_dest_rgb),HX_HCSTRING("blend_dest_rgb","\x5e","\x54","\xa8","\x6c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GeometryKey_obj_sStaticStorageInfo = 0;
#endif

static ::String GeometryKey_obj_sMemberFields[] = {
	HX_HCSTRING("timestamp","\xd6","\xd4","\xce","\xa5"),
	HX_HCSTRING("sequence","\x41","\x1e","\xed","\xe8"),
	HX_HCSTRING("uuid","\x3b","\x1a","\xaf","\x4d"),
	HX_HCSTRING("primitive_type","\x92","\xc8","\x6d","\x88"),
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"),
	HX_HCSTRING("clip","\xd0","\x6e","\xc2","\x41"),
	HX_HCSTRING("blend_disabled","\x6a","\x3e","\x58","\x24"),
	HX_HCSTRING("blend_src_alpha","\xd5","\x2b","\x5d","\x0e"),
	HX_HCSTRING("blend_src_rgb","\xc4","\x83","\xd8","\x0a"),
	HX_HCSTRING("blend_dest_alpha","\xef","\xd6","\x35","\x60"),
	HX_HCSTRING("blend_dest_rgb","\x5e","\x54","\xa8","\x6c"),
	::String(null()) };

static void GeometryKey_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GeometryKey_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GeometryKey_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GeometryKey_obj::__mClass,"__mClass");
};

#endif

hx::Class GeometryKey_obj::__mClass;

void GeometryKey_obj::__register()
{
	hx::Object *dummy = new GeometryKey_obj;
	GeometryKey_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.geometry.GeometryKey","\x70","\x61","\x5c","\x67");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GeometryKey_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GeometryKey_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GeometryKey_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GeometryKey_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GeometryKey_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GeometryKey_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
} // end namespace geometry
