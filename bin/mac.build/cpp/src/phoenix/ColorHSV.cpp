// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_luxe_tween_Actuate
#include <luxe/tween/Actuate.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_IGenericActuator
#include <luxe/tween/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_ColorHSL
#include <phoenix/ColorHSL.h>
#endif
#ifndef INCLUDED_phoenix_ColorHSV
#include <phoenix/ColorHSV.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ad30830e97bbd41d_456_new,"phoenix.ColorHSV","new",0xa18c7ab9,"phoenix.ColorHSV.new","phoenix/Color.hx",456,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_ad30830e97bbd41d_462_set_h,"phoenix.ColorHSV","set_h",0x5aaa4de4,"phoenix.ColorHSV.set_h","phoenix/Color.hx",462,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_ad30830e97bbd41d_467_set_s,"phoenix.ColorHSV","set_s",0x5aaa4def,"phoenix.ColorHSV.set_s","phoenix/Color.hx",467,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_ad30830e97bbd41d_472_set_v,"phoenix.ColorHSV","set_v",0x5aaa4df2,"phoenix.ColorHSV.set_v","phoenix/Color.hx",472,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_ad30830e97bbd41d_493_set,"phoenix.ColorHSV","set",0xa19045fb,"phoenix.ColorHSV.set","phoenix/Color.hx",493,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_ad30830e97bbd41d_518_tween,"phoenix.ColorHSV","tween",0xf9eb5d04,"phoenix.ColorHSV.tween","phoenix/Color.hx",518,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_ad30830e97bbd41d_570__refresh,"phoenix.ColorHSV","_refresh",0x5bbb6663,"phoenix.ColorHSV._refresh","phoenix/Color.hx",570,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_ad30830e97bbd41d_580_clone,"phoenix.ColorHSV","clone",0x28ddc5f6,"phoenix.ColorHSV.clone","phoenix/Color.hx",580,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_ad30830e97bbd41d_585_toColor,"phoenix.ColorHSV","toColor",0x116008c1,"phoenix.ColorHSV.toColor","phoenix/Color.hx",585,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_ad30830e97bbd41d_588_toColorHSL,"phoenix.ColorHSV","toColorHSL",0xd41e10c0,"phoenix.ColorHSV.toColorHSL","phoenix/Color.hx",588,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_ad30830e97bbd41d_593_fromColorHSL,"phoenix.ColorHSV","fromColorHSL",0xef43d76f,"phoenix.ColorHSV.fromColorHSL","phoenix/Color.hx",593,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_ad30830e97bbd41d_599_fromColor,"phoenix.ColorHSV","fromColor",0x0fefceb2,"phoenix.ColorHSV.fromColor","phoenix/Color.hx",599,0xf59e6b1b)
HX_LOCAL_STACK_FRAME(_hx_pos_ad30830e97bbd41d_634_toString,"phoenix.ColorHSV","toString",0x6d5103b3,"phoenix.ColorHSV.toString","phoenix/Color.hx",634,0xf59e6b1b)
namespace phoenix{

void ColorHSV_obj::__construct(hx::Null< Float >  __o__h,hx::Null< Float >  __o__s,hx::Null< Float >  __o__v,hx::Null< Float >  __o__a){
Float _h = __o__h.Default(((Float)0.0));
Float _s = __o__s.Default(((Float)0.0));
Float _v = __o__v.Default(((Float)1.0));
Float _a = __o__a.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_ad30830e97bbd41d_456_new)
HXLINE( 460)		this->v = ((Float)1.0);
HXLINE( 459)		this->s = ((Float)0.0);
HXLINE( 458)		this->h = ((Float)0.0);
HXLINE( 480)		super::__construct(null(),null(),null(),null());
HXLINE( 482)		this->is_hsv = true;
HXLINE( 484)		this->set_h(_h);
HXLINE( 485)		this->set_s(_s);
HXLINE( 486)		this->set_v(_v);
HXLINE( 487)		this->a = _a;
HXLINE( 489)		this->_refresh();
            	}

Dynamic ColorHSV_obj::__CreateEmpty() { return new ColorHSV_obj; }

void *ColorHSV_obj::_hx_vtable = 0;

Dynamic ColorHSV_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ColorHSV_obj > _hx_result = new ColorHSV_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool ColorHSV_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x13716ecf) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x13716ecf;
	} else {
		return inClassId==(int)0x4a8b16d4;
	}
}

Float ColorHSV_obj::set_h(Float _h){
            	HX_STACKFRAME(&_hx_pos_ad30830e97bbd41d_462_set_h)
HXLINE( 463)		this->h = _h;
HXLINE( 464)		this->_refresh();
HXLINE( 465)		return _h;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorHSV_obj,set_h,return )

Float ColorHSV_obj::set_s(Float _s){
            	HX_STACKFRAME(&_hx_pos_ad30830e97bbd41d_467_set_s)
HXLINE( 468)		this->s = _s;
HXLINE( 469)		this->_refresh();
HXLINE( 470)		return this->s;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorHSV_obj,set_s,return )

Float ColorHSV_obj::set_v(Float _v){
            	HX_STACKFRAME(&_hx_pos_ad30830e97bbd41d_472_set_v)
HXLINE( 473)		this->v = _v;
HXLINE( 474)		this->_refresh();
HXLINE( 475)		return this->v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorHSV_obj,set_v,return )

 ::phoenix::Color ColorHSV_obj::set( ::Dynamic _h, ::Dynamic _s, ::Dynamic _v, ::Dynamic _a){
            	HX_STACKFRAME(&_hx_pos_ad30830e97bbd41d_493_set)
HXLINE( 495)		Float _seth = this->h;
HXLINE( 496)		Float _sets = this->s;
HXLINE( 497)		Float _setv = this->v;
HXLINE( 498)		Float _seta = this->a;
HXLINE( 501)		if (hx::IsNotNull( _h )) {
HXLINE( 501)			_seth = _h;
            		}
HXLINE( 502)		if (hx::IsNotNull( _s )) {
HXLINE( 502)			_sets = _s;
            		}
HXLINE( 503)		if (hx::IsNotNull( _v )) {
HXLINE( 503)			_setv = _v;
            		}
HXLINE( 504)		if (hx::IsNotNull( _a )) {
HXLINE( 504)			_seta = _a;
            		}
HXLINE( 506)		this->set_h(_seth);
HXLINE( 507)		this->set_s(_sets);
HXLINE( 508)		this->set_v(_setv);
HXLINE( 509)		this->a = _seta;
HXLINE( 512)		this->_refresh();
HXLINE( 514)		return hx::ObjectPtr<OBJ_>(this);
            	}


::Dynamic ColorHSV_obj::tween( ::Dynamic __o__time_in_seconds, ::Dynamic _dest,hx::Null< bool >  __o__override){
 ::Dynamic _time_in_seconds = __o__time_in_seconds.Default(((Float)0.5));
bool _override = __o__override.Default(true);
            	HX_STACKFRAME(&_hx_pos_ad30830e97bbd41d_518_tween)
HXLINE( 520)		this->super::tween(_time_in_seconds,_dest,_override);
HXLINE( 522)		if (hx::IsNotNull( _dest )) {
HXLINE( 524)			Float _dest_h = this->h;
HXLINE( 525)			Float _dest_s = this->s;
HXLINE( 526)			Float _dest_v = this->v;
HXLINE( 527)			Float _dest_a = this->a;
HXLINE( 529)			bool _change_h = false;
HXLINE( 530)			bool _change_s = false;
HXLINE( 531)			bool _change_v = false;
HXLINE( 532)			bool _change_a = false;
HXLINE( 534)			if (::Std_obj::is(_dest,hx::ClassOf< ::phoenix::ColorHSV >())) {
HXLINE( 536)				_dest_h = ( (Float)(_dest->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) );
HXLINE( 537)				_dest_s = ( (Float)(_dest->__Field(HX_("s",73,00,00,00),hx::paccDynamic)) );
HXLINE( 538)				_dest_v = ( (Float)(_dest->__Field(HX_("v",76,00,00,00),hx::paccDynamic)) );
HXLINE( 539)				_dest_a = ( (Float)(_dest->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) );
HXLINE( 541)				_change_h = true;
HXLINE( 542)				_change_s = true;
HXLINE( 543)				_change_v = true;
HXLINE( 544)				_change_a = true;
            			}
            			else {
HXLINE( 548)				if (hx::IsNotNull( _dest->__Field(HX_("h",68,00,00,00),hx::paccDynamic) )) {
HXLINE( 548)					_dest_h = ( (Float)(_dest->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) );
HXDLIN( 548)					_change_h = true;
            				}
HXLINE( 549)				if (hx::IsNotNull( _dest->__Field(HX_("s",73,00,00,00),hx::paccDynamic) )) {
HXLINE( 549)					_dest_s = ( (Float)(_dest->__Field(HX_("s",73,00,00,00),hx::paccDynamic)) );
HXDLIN( 549)					_change_s = true;
            				}
HXLINE( 550)				if (hx::IsNotNull( _dest->__Field(HX_("v",76,00,00,00),hx::paccDynamic) )) {
HXLINE( 550)					_dest_v = ( (Float)(_dest->__Field(HX_("v",76,00,00,00),hx::paccDynamic)) );
HXDLIN( 550)					_change_v = true;
            				}
HXLINE( 551)				if (hx::IsNotNull( _dest->__Field(HX_("a",61,00,00,00),hx::paccDynamic) )) {
HXLINE( 551)					_dest_a = ( (Float)(_dest->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) );
HXDLIN( 551)					_change_a = true;
            				}
            			}
HXLINE( 555)			 ::Dynamic _properties =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 557)			if (_change_h) {
HXLINE( 557)				_properties->__SetField(HX_("h",68,00,00,00),_dest_h,hx::paccDynamic);
            			}
HXLINE( 558)			if (_change_s) {
HXLINE( 558)				_properties->__SetField(HX_("s",73,00,00,00),_dest_s,hx::paccDynamic);
            			}
HXLINE( 559)			if (_change_v) {
HXLINE( 559)				_properties->__SetField(HX_("v",76,00,00,00),_dest_v,hx::paccDynamic);
            			}
HXLINE( 560)			if (_change_a) {
HXLINE( 560)				_properties->__SetField(HX_("a",61,00,00,00),_dest_a,hx::paccDynamic);
            			}
HXLINE( 562)			return ::luxe::tween::Actuate_obj::tween(hx::ObjectPtr<OBJ_>(this),_time_in_seconds,_properties,_override,null());
            		}
            		else {
HXLINE( 565)			HX_STACK_DO_THROW(HX_(" Warning: Color.tween passed a null destination ",3e,4f,7a,3d));
            		}
HXLINE( 522)		return null();
            	}


 ::phoenix::ColorHSV ColorHSV_obj::_refresh(){
            	HX_STACKFRAME(&_hx_pos_ad30830e97bbd41d_570__refresh)
HXLINE( 572)		this->refreshing = true;
HXLINE( 573)		this->super::fromColorHSV(hx::ObjectPtr<OBJ_>(this));
HXLINE( 574)		this->refreshing = false;
HXLINE( 576)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorHSV_obj,_refresh,return )

 ::phoenix::Color ColorHSV_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_ad30830e97bbd41d_580_clone)
HXDLIN( 580)		return  ::phoenix::ColorHSV_obj::__alloc( HX_CTX ,this->h,this->s,this->v,this->a);
            	}


 ::phoenix::Color ColorHSV_obj::toColor(){
            	HX_STACKFRAME(&_hx_pos_ad30830e97bbd41d_585_toColor)
HXDLIN( 585)		return ( ( ::phoenix::Color)(this->_refresh()) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorHSV_obj,toColor,return )

 ::phoenix::ColorHSL ColorHSV_obj::toColorHSL(){
            	HX_STACKFRAME(&_hx_pos_ad30830e97bbd41d_588_toColorHSL)
HXLINE( 589)		this->_refresh();
HXLINE( 590)		return this->super::toColorHSL();
            	}


 ::phoenix::Color ColorHSV_obj::fromColorHSL( ::phoenix::ColorHSL _color_hsl){
            	HX_STACKFRAME(&_hx_pos_ad30830e97bbd41d_593_fromColorHSL)
HXLINE( 595)		_color_hsl->_refresh();
HXLINE( 596)		return this->fromColor(( ( ::phoenix::Color)(_color_hsl) ));
            	}


 ::phoenix::ColorHSV ColorHSV_obj::fromColor( ::phoenix::Color _color){
            	HX_STACKFRAME(&_hx_pos_ad30830e97bbd41d_599_fromColor)
HXLINE( 601)		Float max = _color->maxRGB();
HXLINE( 602)		Float min = _color->minRGB();
HXLINE( 603)		Float add = (max + min);
HXLINE( 604)		Float sub = (max - min);
HXLINE( 606)		Float _h = (int)0;
HXLINE( 608)		if ((max == min)) {
HXLINE( 609)			_h = (int)0;
            		}
            		else {
HXLINE( 610)			if ((max == _color->r)) {
HXLINE( 611)				_h = hx::Mod((((Float)((int)60 * (_color->g - _color->b)) / (Float)sub) + (int)360),(int)360);
            			}
            			else {
HXLINE( 612)				if ((max == _color->g)) {
HXLINE( 613)					_h = (((Float)((int)60 * (_color->b - _color->r)) / (Float)sub) + (int)120);
            				}
            				else {
HXLINE( 614)					if ((max == _color->b)) {
HXLINE( 615)						_h = (((Float)((int)60 * (_color->r - _color->g)) / (Float)sub) + (int)240);
            					}
            				}
            			}
            		}
HXLINE( 618)		Float _s;
HXDLIN( 618)		if ((max == (int)0)) {
HXLINE( 618)			_s = (int)0;
            		}
            		else {
HXLINE( 618)			_s = ((int)1 - ((Float)min / (Float)max));
            		}
HXLINE( 624)		this->set_h(_h);
HXLINE( 625)		this->set_s(_s);
HXLINE( 626)		this->set_v(max);
HXLINE( 627)		this->a = _color->a;
HXLINE( 629)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorHSV_obj,fromColor,return )

::String ColorHSV_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_ad30830e97bbd41d_634_toString)
HXDLIN( 634)		return ((((((((HX_("{ h:",57,e1,65,51) + this->h) + HX_(" , s:",fb,9f,00,8a)) + this->s) + HX_(" , v:",98,a2,00,8a)) + this->v) + HX_(" , a:",4d,90,00,8a)) + this->a) + HX_(" }",5d,1c,00,00));
            	}



hx::ObjectPtr< ColorHSV_obj > ColorHSV_obj::__new(hx::Null< Float >  __o__h,hx::Null< Float >  __o__s,hx::Null< Float >  __o__v,hx::Null< Float >  __o__a) {
	hx::ObjectPtr< ColorHSV_obj > __this = new ColorHSV_obj();
	__this->__construct(__o__h,__o__s,__o__v,__o__a);
	return __this;
}

hx::ObjectPtr< ColorHSV_obj > ColorHSV_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o__h,hx::Null< Float >  __o__s,hx::Null< Float >  __o__v,hx::Null< Float >  __o__a) {
	ColorHSV_obj *__this = (ColorHSV_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ColorHSV_obj), false, "phoenix.ColorHSV"));
	*(void **)__this = ColorHSV_obj::_hx_vtable;
	__this->__construct(__o__h,__o__s,__o__v,__o__a);
	return __this;
}

ColorHSV_obj::ColorHSV_obj()
{
}

hx::Val ColorHSV_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"h") ) { return hx::Val( h ); }
		if (HX_FIELD_EQ(inName,"s") ) { return hx::Val( s ); }
		if (HX_FIELD_EQ(inName,"v") ) { return hx::Val( v ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"set_h") ) { return hx::Val( set_h_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_s") ) { return hx::Val( set_s_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_v") ) { return hx::Val( set_v_dyn() ); }
		if (HX_FIELD_EQ(inName,"tween") ) { return hx::Val( tween_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toColor") ) { return hx::Val( toColor_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_refresh") ) { return hx::Val( _refresh_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromColor") ) { return hx::Val( fromColor_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"toColorHSL") ) { return hx::Val( toColorHSL_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromColorHSL") ) { return hx::Val( fromColorHSL_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ColorHSV_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"h") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_h(inValue.Cast< Float >()) );h=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"s") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_s(inValue.Cast< Float >()) );s=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"v") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_v(inValue.Cast< Float >()) );v=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ColorHSV_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("h","\x68","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("s","\x73","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("v","\x76","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ColorHSV_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(ColorHSV_obj,h),HX_HCSTRING("h","\x68","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ColorHSV_obj,s),HX_HCSTRING("s","\x73","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ColorHSV_obj,v),HX_HCSTRING("v","\x76","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ColorHSV_obj_sStaticStorageInfo = 0;
#endif

static ::String ColorHSV_obj_sMemberFields[] = {
	HX_HCSTRING("h","\x68","\x00","\x00","\x00"),
	HX_HCSTRING("s","\x73","\x00","\x00","\x00"),
	HX_HCSTRING("v","\x76","\x00","\x00","\x00"),
	HX_HCSTRING("set_h","\x4b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_s","\x56","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_v","\x59","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("tween","\x6b","\xaa","\x70","\x19"),
	HX_HCSTRING("_refresh","\x5c","\x33","\xd9","\x26"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("toColor","\xe8","\xbd","\xe0","\x16"),
	HX_HCSTRING("toColorHSL","\xf9","\xcd","\x03","\xfc"),
	HX_HCSTRING("fromColorHSL","\xe8","\x14","\xfe","\x29"),
	HX_HCSTRING("fromColor","\x99","\x5b","\xe5","\xfe"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void ColorHSV_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColorHSV_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColorHSV_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColorHSV_obj::__mClass,"__mClass");
};

#endif

hx::Class ColorHSV_obj::__mClass;

void ColorHSV_obj::__register()
{
	hx::Object *dummy = new ColorHSV_obj;
	ColorHSV_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.ColorHSV","\x47","\xaa","\xc0","\x22");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ColorHSV_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ColorHSV_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ColorHSV_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColorHSV_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorHSV_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorHSV_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
