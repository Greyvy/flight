// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_phoenix_Matrix
#include <phoenix/Matrix.h>
#endif
#ifndef INCLUDED_phoenix_MatrixTransform
#include <phoenix/MatrixTransform.h>
#endif
#ifndef INCLUDED_phoenix_Quaternion
#include <phoenix/Quaternion.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_90f5eb100c831620_58_new,"phoenix.Matrix","new",0x05a13252,"phoenix.Matrix.new","phoenix/Matrix.hx",58,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_83_set,"phoenix.Matrix","set",0x05a4fd94,"phoenix.Matrix.set","phoenix/Matrix.hx",83,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_95_toString,"phoenix.Matrix","toString",0x3c5f217a,"phoenix.Matrix.toString","phoenix/Matrix.hx",95,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_104_get_M11,"phoenix.Matrix","get_M11",0x8bb9a3f6,"phoenix.Matrix.get_M11","phoenix/Matrix.hx",104,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_105_get_M21,"phoenix.Matrix","get_M21",0x8bb9a4d5,"phoenix.Matrix.get_M21","phoenix/Matrix.hx",105,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_106_get_M31,"phoenix.Matrix","get_M31",0x8bb9a5b4,"phoenix.Matrix.get_M31","phoenix/Matrix.hx",106,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_107_get_M41,"phoenix.Matrix","get_M41",0x8bb9a693,"phoenix.Matrix.get_M41","phoenix/Matrix.hx",107,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_109_get_M12,"phoenix.Matrix","get_M12",0x8bb9a3f7,"phoenix.Matrix.get_M12","phoenix/Matrix.hx",109,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_110_get_M22,"phoenix.Matrix","get_M22",0x8bb9a4d6,"phoenix.Matrix.get_M22","phoenix/Matrix.hx",110,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_111_get_M32,"phoenix.Matrix","get_M32",0x8bb9a5b5,"phoenix.Matrix.get_M32","phoenix/Matrix.hx",111,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_112_get_M42,"phoenix.Matrix","get_M42",0x8bb9a694,"phoenix.Matrix.get_M42","phoenix/Matrix.hx",112,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_114_get_M13,"phoenix.Matrix","get_M13",0x8bb9a3f8,"phoenix.Matrix.get_M13","phoenix/Matrix.hx",114,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_115_get_M23,"phoenix.Matrix","get_M23",0x8bb9a4d7,"phoenix.Matrix.get_M23","phoenix/Matrix.hx",115,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_116_get_M33,"phoenix.Matrix","get_M33",0x8bb9a5b6,"phoenix.Matrix.get_M33","phoenix/Matrix.hx",116,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_117_get_M43,"phoenix.Matrix","get_M43",0x8bb9a695,"phoenix.Matrix.get_M43","phoenix/Matrix.hx",117,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_119_get_M14,"phoenix.Matrix","get_M14",0x8bb9a3f9,"phoenix.Matrix.get_M14","phoenix/Matrix.hx",119,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_120_get_M24,"phoenix.Matrix","get_M24",0x8bb9a4d8,"phoenix.Matrix.get_M24","phoenix/Matrix.hx",120,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_121_get_M34,"phoenix.Matrix","get_M34",0x8bb9a5b7,"phoenix.Matrix.get_M34","phoenix/Matrix.hx",121,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_122_get_M44,"phoenix.Matrix","get_M44",0x8bb9a696,"phoenix.Matrix.get_M44","phoenix/Matrix.hx",122,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_124_set_M11,"phoenix.Matrix","set_M11",0x7ebb3502,"phoenix.Matrix.set_M11","phoenix/Matrix.hx",124,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_125_set_M21,"phoenix.Matrix","set_M21",0x7ebb35e1,"phoenix.Matrix.set_M21","phoenix/Matrix.hx",125,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_126_set_M31,"phoenix.Matrix","set_M31",0x7ebb36c0,"phoenix.Matrix.set_M31","phoenix/Matrix.hx",126,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_127_set_M41,"phoenix.Matrix","set_M41",0x7ebb379f,"phoenix.Matrix.set_M41","phoenix/Matrix.hx",127,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_129_set_M12,"phoenix.Matrix","set_M12",0x7ebb3503,"phoenix.Matrix.set_M12","phoenix/Matrix.hx",129,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_130_set_M22,"phoenix.Matrix","set_M22",0x7ebb35e2,"phoenix.Matrix.set_M22","phoenix/Matrix.hx",130,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_131_set_M32,"phoenix.Matrix","set_M32",0x7ebb36c1,"phoenix.Matrix.set_M32","phoenix/Matrix.hx",131,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_132_set_M42,"phoenix.Matrix","set_M42",0x7ebb37a0,"phoenix.Matrix.set_M42","phoenix/Matrix.hx",132,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_134_set_M13,"phoenix.Matrix","set_M13",0x7ebb3504,"phoenix.Matrix.set_M13","phoenix/Matrix.hx",134,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_135_set_M23,"phoenix.Matrix","set_M23",0x7ebb35e3,"phoenix.Matrix.set_M23","phoenix/Matrix.hx",135,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_136_set_M33,"phoenix.Matrix","set_M33",0x7ebb36c2,"phoenix.Matrix.set_M33","phoenix/Matrix.hx",136,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_137_set_M43,"phoenix.Matrix","set_M43",0x7ebb37a1,"phoenix.Matrix.set_M43","phoenix/Matrix.hx",137,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_139_set_M14,"phoenix.Matrix","set_M14",0x7ebb3505,"phoenix.Matrix.set_M14","phoenix/Matrix.hx",139,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_140_set_M24,"phoenix.Matrix","set_M24",0x7ebb35e4,"phoenix.Matrix.set_M24","phoenix/Matrix.hx",140,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_141_set_M34,"phoenix.Matrix","set_M34",0x7ebb36c3,"phoenix.Matrix.set_M34","phoenix/Matrix.hx",141,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_142_set_M44,"phoenix.Matrix","set_M44",0x7ebb37a2,"phoenix.Matrix.set_M44","phoenix/Matrix.hx",142,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_144_float32array,"phoenix.Matrix","float32array",0x9bcb564c,"phoenix.Matrix.float32array","phoenix/Matrix.hx",144,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_157_identity,"phoenix.Matrix","identity",0xbd1f960c,"phoenix.Matrix.identity","phoenix/Matrix.hx",157,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_171_copy,"phoenix.Matrix","copy",0xe02d0d83,"phoenix.Matrix.copy","phoenix/Matrix.hx",171,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_185_make2D,"phoenix.Matrix","make2D",0xfc461e8e,"phoenix.Matrix.make2D","phoenix/Matrix.hx",185,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_202_copyPosition,"phoenix.Matrix","copyPosition",0x2db7254c,"phoenix.Matrix.copyPosition","phoenix/Matrix.hx",202,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_213_getPosition,"phoenix.Matrix","getPosition",0x6c3a0751,"phoenix.Matrix.getPosition","phoenix/Matrix.hx",213,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_216_extractRotation,"phoenix.Matrix","extractRotation",0xb7fcdc91,"phoenix.Matrix.extractRotation","phoenix/Matrix.hx",216,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_240_makeRotationFromEuler,"phoenix.Matrix","makeRotationFromEuler",0xdbee0f25,"phoenix.Matrix.makeRotationFromEuler","phoenix/Matrix.hx",240,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_365_makeRotationFromQuaternion,"phoenix.Matrix","makeRotationFromQuaternion",0x03148de2,"phoenix.Matrix.makeRotationFromQuaternion","phoenix/Matrix.hx",365,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_402_lookAt,"phoenix.Matrix","lookAt",0xa8305680,"phoenix.Matrix.lookAt","phoenix/Matrix.hx",402,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_436_multiply,"phoenix.Matrix","multiply",0x9e7d32f2,"phoenix.Matrix.multiply","phoenix/Matrix.hx",436,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_441_multiplyMatrices,"phoenix.Matrix","multiplyMatrices",0xb2c9a2ac,"phoenix.Matrix.multiplyMatrices","phoenix/Matrix.hx",441,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_482_multiplyToArray,"phoenix.Matrix","multiplyToArray",0x8681d14c,"phoenix.Matrix.multiplyToArray","phoenix/Matrix.hx",482,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_498_multiplyScalar,"phoenix.Matrix","multiplyScalar",0x0b734fbe,"phoenix.Matrix.multiplyScalar","phoenix/Matrix.hx",498,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_512_multiplyVector3Array,"phoenix.Matrix","multiplyVector3Array",0xbd148b7b,"phoenix.Matrix.multiplyVector3Array","phoenix/Matrix.hx",512,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_538_determinant,"phoenix.Matrix","determinant",0xad610187,"phoenix.Matrix.determinant","phoenix/Matrix.hx",538,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_583_transpose,"phoenix.Matrix","transpose",0xba85b3eb,"phoenix.Matrix.transpose","phoenix/Matrix.hx",583,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_600_flattenToArray,"phoenix.Matrix","flattenToArray",0xbdf5d608,"phoenix.Matrix.flattenToArray","phoenix/Matrix.hx",600,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_619_flattenToArrayOffset,"phoenix.Matrix","flattenToArrayOffset",0xf67a17bb,"phoenix.Matrix.flattenToArrayOffset","phoenix/Matrix.hx",619,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_648_setPosition,"phoenix.Matrix","setPosition",0x76a70e5d,"phoenix.Matrix.setPosition","phoenix/Matrix.hx",648,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_661_inverse,"phoenix.Matrix","inverse",0xa2fb8ea2,"phoenix.Matrix.inverse","phoenix/Matrix.hx",661,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_664_getInverse,"phoenix.Matrix","getInverse",0xaa937208,"phoenix.Matrix.getInverse","phoenix/Matrix.hx",664,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_712_scale,"phoenix.Matrix","scale",0x75ae10fc,"phoenix.Matrix.scale","phoenix/Matrix.hx",712,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_730_getMaxScaleOnAxis,"phoenix.Matrix","getMaxScaleOnAxis",0x4896c7ee,"phoenix.Matrix.getMaxScaleOnAxis","phoenix/Matrix.hx",730,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_743_makeTranslation,"phoenix.Matrix","makeTranslation",0xddf09e95,"phoenix.Matrix.makeTranslation","phoenix/Matrix.hx",743,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_757_makeRotationX,"phoenix.Matrix","makeRotationX",0x060a55fe,"phoenix.Matrix.makeRotationX","phoenix/Matrix.hx",757,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_774_makeRotationY,"phoenix.Matrix","makeRotationY",0x060a55ff,"phoenix.Matrix.makeRotationY","phoenix/Matrix.hx",774,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_791_makeRotationZ,"phoenix.Matrix","makeRotationZ",0x060a5600,"phoenix.Matrix.makeRotationZ","phoenix/Matrix.hx",791,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_808_makeRotationAxis,"phoenix.Matrix","makeRotationAxis",0xa4647edb,"phoenix.Matrix.makeRotationAxis","phoenix/Matrix.hx",808,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_833_makeScale,"phoenix.Matrix","makeScale",0xbabda92e,"phoenix.Matrix.makeScale","phoenix/Matrix.hx",833,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_847_compose_with_origin,"phoenix.Matrix","compose_with_origin",0x79dcc244,"phoenix.Matrix.compose_with_origin","phoenix/Matrix.hx",847,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_867_compose,"phoenix.Matrix","compose",0xe87dfc04,"phoenix.Matrix.compose","phoenix/Matrix.hx",867,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_879_decompose,"phoenix.Matrix","decompose",0xe8fe2723,"phoenix.Matrix.decompose","phoenix/Matrix.hx",879,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_946_makeFrustum,"phoenix.Matrix","makeFrustum",0x8fd01306,"phoenix.Matrix.makeFrustum","phoenix/Matrix.hx",946,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_968_makePerspective,"phoenix.Matrix","makePerspective",0x14405320,"phoenix.Matrix.makePerspective","phoenix/Matrix.hx",968,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_980_makeOrthographic,"phoenix.Matrix","makeOrthographic",0x8b159c4c,"phoenix.Matrix.makeOrthographic","phoenix/Matrix.hx",980,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_1003_fromArray,"phoenix.Matrix","fromArray",0x486ebb41,"phoenix.Matrix.fromArray","phoenix/Matrix.hx",1003,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_1007_toArray,"phoenix.Matrix","toArray",0x571dfd10,"phoenix.Matrix.toArray","phoenix/Matrix.hx",1007,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_1020_clone,"phoenix.Matrix","clone",0x454255cf,"phoenix.Matrix.clone","phoenix/Matrix.hx",1020,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_1034_up,"phoenix.Matrix","up",0xd34108a9,"phoenix.Matrix.up","phoenix/Matrix.hx",1034,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_1038_down,"phoenix.Matrix","down",0xe0d64a30,"phoenix.Matrix.down","phoenix/Matrix.hx",1038,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_1042_left,"phoenix.Matrix","left",0xe61859d5,"phoenix.Matrix.left","phoenix/Matrix.hx",1042,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_1046_right,"phoenix.Matrix","right",0xe6434e4e,"phoenix.Matrix.right","phoenix/Matrix.hx",1046,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_1050_backward,"phoenix.Matrix","backward",0x2b092cb1,"phoenix.Matrix.backward","phoenix/Matrix.hx",1050,0x938b753d)
HX_LOCAL_STACK_FRAME(_hx_pos_90f5eb100c831620_1054_forward,"phoenix.Matrix","forward",0x4ad524b7,"phoenix.Matrix.forward","phoenix/Matrix.hx",1054,0x938b753d)
namespace phoenix{

void Matrix_obj::__construct(hx::Null< Float >  __o_n11,hx::Null< Float >  __o_n12,hx::Null< Float >  __o_n13,hx::Null< Float >  __o_n14,hx::Null< Float >  __o_n21,hx::Null< Float >  __o_n22,hx::Null< Float >  __o_n23,hx::Null< Float >  __o_n24,hx::Null< Float >  __o_n31,hx::Null< Float >  __o_n32,hx::Null< Float >  __o_n33,hx::Null< Float >  __o_n34,hx::Null< Float >  __o_n41,hx::Null< Float >  __o_n42,hx::Null< Float >  __o_n43,hx::Null< Float >  __o_n44){
Float n11 = __o_n11.Default(1);
Float n12 = __o_n12.Default(0);
Float n13 = __o_n13.Default(0);
Float n14 = __o_n14.Default(0);
Float n21 = __o_n21.Default(0);
Float n22 = __o_n22.Default(1);
Float n23 = __o_n23.Default(0);
Float n24 = __o_n24.Default(0);
Float n31 = __o_n31.Default(0);
Float n32 = __o_n32.Default(0);
Float n33 = __o_n33.Default(1);
Float n34 = __o_n34.Default(0);
Float n41 = __o_n41.Default(0);
Float n42 = __o_n42.Default(0);
Float n43 = __o_n43.Default(0);
Float n44 = __o_n44.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_58_new)
HXLINE(  59)		this->elements = ::Array_obj< Float >::__new(0);
HXLINE(  61)		int i = (int)0;
HXLINE(  62)		while(true){
HXLINE(  62)			i = (i + (int)1);
HXDLIN(  62)			if (!(((i - (int)1) < (int)16))) {
HXLINE(  62)				goto _hx_goto_0;
            			}
HXLINE(  63)			this->elements->push(((Float)0.0));
            		}
            		_hx_goto_0:;
HXLINE(  66)		{
HXLINE(  66)			::Array< Float > e = this->elements;
HXDLIN(  66)			e[(int)0] = n11;
HXDLIN(  66)			e[(int)4] = n12;
HXDLIN(  66)			e[(int)8] = n13;
HXDLIN(  66)			e[(int)12] = n14;
HXDLIN(  66)			e[(int)1] = n21;
HXDLIN(  66)			e[(int)5] = n22;
HXDLIN(  66)			e[(int)9] = n23;
HXDLIN(  66)			e[(int)13] = n24;
HXDLIN(  66)			e[(int)2] = n31;
HXDLIN(  66)			e[(int)6] = n32;
HXDLIN(  66)			e[(int)10] = n33;
HXDLIN(  66)			e[(int)14] = n34;
HXDLIN(  66)			e[(int)3] = n41;
HXDLIN(  66)			e[(int)7] = n42;
HXDLIN(  66)			e[(int)11] = n43;
HXDLIN(  66)			e[(int)15] = n44;
            		}
HXLINE(  73)		::Array< Float > _array = this->elements;
HXDLIN(  73)		 ::snow::api::buffers::ArrayBufferView _view =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,(int)8);
HXDLIN(  73)		int _length = _array->length;
HXDLIN(  73)		int _bytelen = (_length * _view->bytesPerElement);
HXDLIN(  73)		_view->byteOffset = (int)0;
HXDLIN(  73)		_view->length = _length;
HXDLIN(  73)		_view->byteLength = _bytelen;
HXDLIN(  73)		::Array< unsigned char > this1 = ::Array_obj< unsigned char >::__new();
HXDLIN(  73)		if ((_bytelen > (int)0)) {
HXLINE(  73)			this1[(_bytelen - (int)1)] = (int)0;
            		}
HXDLIN(  73)		_view->buffer = this1;
HXDLIN(  73)		_view->copyFromArray(_array,null());
HXDLIN(  73)		this->_float32array = _view;
            	}

Dynamic Matrix_obj::__CreateEmpty() { return new Matrix_obj; }

void *Matrix_obj::_hx_vtable = 0;

Dynamic Matrix_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix_obj > _hx_result = new Matrix_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15]);
	return _hx_result;
}

bool Matrix_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x50da8404;
}

 ::phoenix::Matrix Matrix_obj::set(Float n11,Float n12,Float n13,Float n14,Float n21,Float n22,Float n23,Float n24,Float n31,Float n32,Float n33,Float n34,Float n41,Float n42,Float n43,Float n44){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_83_set)
HXLINE(  85)		::Array< Float > e = this->elements;
HXLINE(  87)		e[(int)0] = n11;
HXDLIN(  87)		e[(int)4] = n12;
HXDLIN(  87)		e[(int)8] = n13;
HXDLIN(  87)		e[(int)12] = n14;
HXLINE(  88)		e[(int)1] = n21;
HXDLIN(  88)		e[(int)5] = n22;
HXDLIN(  88)		e[(int)9] = n23;
HXDLIN(  88)		e[(int)13] = n24;
HXLINE(  89)		e[(int)2] = n31;
HXDLIN(  89)		e[(int)6] = n32;
HXDLIN(  89)		e[(int)10] = n33;
HXDLIN(  89)		e[(int)14] = n34;
HXLINE(  90)		e[(int)3] = n41;
HXDLIN(  90)		e[(int)7] = n42;
HXDLIN(  90)		e[(int)11] = n43;
HXDLIN(  90)		e[(int)15] = n44;
HXLINE(  92)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC16(Matrix_obj,set,return )

::String Matrix_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_95_toString)
HXLINE(  96)		::Array< Float > e = this->elements;
HXLINE(  97)		Float n = ::Math_obj::pow((int)10,(int)3);
HXDLIN(  97)		::String str = ((HX_("{ 11:",35,87,95,e7) + ((Float)::Std_obj::_hx_int((e->__get((int)0) * n)) / (Float)n)) + HX_(", 12:",45,b4,ed,6a));
HXDLIN(  97)		Float n1 = ::Math_obj::pow((int)10,(int)3);
HXDLIN(  97)		::String str1 = ((str + ((Float)::Std_obj::_hx_int((e->__get((int)4) * n1)) / (Float)n1)) + HX_(", 13:",24,b5,ed,6a));
HXDLIN(  97)		Float n2 = ::Math_obj::pow((int)10,(int)3);
HXDLIN(  97)		::String str2 = ((str1 + ((Float)::Std_obj::_hx_int((e->__get((int)8) * n2)) / (Float)n2)) + HX_(", 14:",03,b6,ed,6a));
HXDLIN(  97)		Float n3 = ::Math_obj::pow((int)10,(int)3);
HXDLIN(  97)		::String str3 = (((str2 + ((Float)::Std_obj::_hx_int((e->__get((int)12) * n3)) / (Float)n3)) + HX_(" }, ",11,d4,85,15)) + HX_("{ 21:",76,49,96,e7));
HXLINE(  98)		Float n4 = ::Math_obj::pow((int)10,(int)3);
HXLINE(  97)		::String str4 = ((str3 + ((Float)::Std_obj::_hx_int((e->__get((int)1) * n4)) / (Float)n4)) + HX_(", 22:",86,76,ee,6a));
HXLINE(  98)		Float n5 = ::Math_obj::pow((int)10,(int)3);
HXLINE(  97)		::String str5 = ((str4 + ((Float)::Std_obj::_hx_int((e->__get((int)5) * n5)) / (Float)n5)) + HX_(", 23:",65,77,ee,6a));
HXLINE(  98)		Float n6 = ::Math_obj::pow((int)10,(int)3);
HXLINE(  97)		::String str6 = ((str5 + ((Float)::Std_obj::_hx_int((e->__get((int)9) * n6)) / (Float)n6)) + HX_(", 24:",44,78,ee,6a));
HXLINE(  98)		Float n7 = ::Math_obj::pow((int)10,(int)3);
HXLINE(  97)		::String str7 = (((str6 + ((Float)::Std_obj::_hx_int((e->__get((int)13) * n7)) / (Float)n7)) + HX_(" }, ",11,d4,85,15)) + HX_("{ 31:",b7,0b,97,e7));
HXLINE(  99)		Float n8 = ::Math_obj::pow((int)10,(int)3);
HXLINE(  97)		::String str8 = ((str7 + ((Float)::Std_obj::_hx_int((e->__get((int)2) * n8)) / (Float)n8)) + HX_(", 32:",c7,38,ef,6a));
HXLINE(  99)		Float n9 = ::Math_obj::pow((int)10,(int)3);
HXLINE(  97)		::String str9 = ((str8 + ((Float)::Std_obj::_hx_int((e->__get((int)6) * n9)) / (Float)n9)) + HX_(", 33:",a6,39,ef,6a));
HXLINE(  99)		Float n10 = ::Math_obj::pow((int)10,(int)3);
HXLINE(  97)		::String str10 = ((str9 + ((Float)::Std_obj::_hx_int((e->__get((int)10) * n10)) / (Float)n10)) + HX_(", 34:",85,3a,ef,6a));
HXLINE(  99)		Float n11 = ::Math_obj::pow((int)10,(int)3);
HXLINE(  97)		::String str11 = (((str10 + ((Float)::Std_obj::_hx_int((e->__get((int)14) * n11)) / (Float)n11)) + HX_(" }, ",11,d4,85,15)) + HX_("{ 41:",f8,cd,97,e7));
HXLINE( 100)		Float n12 = ::Math_obj::pow((int)10,(int)3);
HXLINE(  97)		::String str12 = ((str11 + ((Float)::Std_obj::_hx_int((e->__get((int)3) * n12)) / (Float)n12)) + HX_(", 42:",08,fb,ef,6a));
HXLINE( 100)		Float n13 = ::Math_obj::pow((int)10,(int)3);
HXLINE(  97)		::String str13 = ((str12 + ((Float)::Std_obj::_hx_int((e->__get((int)7) * n13)) / (Float)n13)) + HX_(", 43:",e7,fb,ef,6a));
HXLINE( 100)		Float n14 = ::Math_obj::pow((int)10,(int)3);
HXLINE(  97)		::String str14 = ((str13 + ((Float)::Std_obj::_hx_int((e->__get((int)11) * n14)) / (Float)n14)) + HX_(", 44:",c6,fc,ef,6a));
HXLINE( 100)		Float n15 = ::Math_obj::pow((int)10,(int)3);
HXLINE(  97)		::String str15 = ((str14 + ((Float)::Std_obj::_hx_int((e->__get((int)15) * n15)) / (Float)n15)) + HX_(" }",5d,1c,00,00));
HXLINE( 101)		return str15;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,toString,return )

Float Matrix_obj::get_M11(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_104_get_M11)
HXDLIN( 104)		return this->elements->__get((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M11,return )

Float Matrix_obj::get_M21(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_105_get_M21)
HXDLIN( 105)		return this->elements->__get((int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M21,return )

Float Matrix_obj::get_M31(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_106_get_M31)
HXDLIN( 106)		return this->elements->__get((int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M31,return )

Float Matrix_obj::get_M41(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_107_get_M41)
HXDLIN( 107)		return this->elements->__get((int)3);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M41,return )

Float Matrix_obj::get_M12(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_109_get_M12)
HXDLIN( 109)		return this->elements->__get((int)4);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M12,return )

Float Matrix_obj::get_M22(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_110_get_M22)
HXDLIN( 110)		return this->elements->__get((int)5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M22,return )

Float Matrix_obj::get_M32(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_111_get_M32)
HXDLIN( 111)		return this->elements->__get((int)6);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M32,return )

Float Matrix_obj::get_M42(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_112_get_M42)
HXDLIN( 112)		return this->elements->__get((int)7);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M42,return )

Float Matrix_obj::get_M13(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_114_get_M13)
HXDLIN( 114)		return this->elements->__get((int)8);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M13,return )

Float Matrix_obj::get_M23(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_115_get_M23)
HXDLIN( 115)		return this->elements->__get((int)9);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M23,return )

Float Matrix_obj::get_M33(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_116_get_M33)
HXDLIN( 116)		return this->elements->__get((int)10);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M33,return )

Float Matrix_obj::get_M43(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_117_get_M43)
HXDLIN( 117)		return this->elements->__get((int)11);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M43,return )

Float Matrix_obj::get_M14(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_119_get_M14)
HXDLIN( 119)		return this->elements->__get((int)12);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M14,return )

Float Matrix_obj::get_M24(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_120_get_M24)
HXDLIN( 120)		return this->elements->__get((int)13);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M24,return )

Float Matrix_obj::get_M34(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_121_get_M34)
HXDLIN( 121)		return this->elements->__get((int)14);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M34,return )

Float Matrix_obj::get_M44(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_122_get_M44)
HXDLIN( 122)		return this->elements->__get((int)15);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,get_M44,return )

Float Matrix_obj::set_M11(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_124_set_M11)
HXDLIN( 124)		this->elements[(int)0] = _v;
HXDLIN( 124)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M11,return )

Float Matrix_obj::set_M21(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_125_set_M21)
HXDLIN( 125)		this->elements[(int)1] = _v;
HXDLIN( 125)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M21,return )

Float Matrix_obj::set_M31(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_126_set_M31)
HXDLIN( 126)		this->elements[(int)2] = _v;
HXDLIN( 126)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M31,return )

Float Matrix_obj::set_M41(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_127_set_M41)
HXDLIN( 127)		this->elements[(int)3] = _v;
HXDLIN( 127)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M41,return )

Float Matrix_obj::set_M12(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_129_set_M12)
HXDLIN( 129)		this->elements[(int)4] = _v;
HXDLIN( 129)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M12,return )

Float Matrix_obj::set_M22(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_130_set_M22)
HXDLIN( 130)		this->elements[(int)5] = _v;
HXDLIN( 130)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M22,return )

Float Matrix_obj::set_M32(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_131_set_M32)
HXDLIN( 131)		this->elements[(int)6] = _v;
HXDLIN( 131)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M32,return )

Float Matrix_obj::set_M42(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_132_set_M42)
HXDLIN( 132)		this->elements[(int)7] = _v;
HXDLIN( 132)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M42,return )

Float Matrix_obj::set_M13(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_134_set_M13)
HXDLIN( 134)		this->elements[(int)8] = _v;
HXDLIN( 134)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M13,return )

Float Matrix_obj::set_M23(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_135_set_M23)
HXDLIN( 135)		this->elements[(int)9] = _v;
HXDLIN( 135)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M23,return )

Float Matrix_obj::set_M33(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_136_set_M33)
HXDLIN( 136)		this->elements[(int)10] = _v;
HXDLIN( 136)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M33,return )

Float Matrix_obj::set_M43(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_137_set_M43)
HXDLIN( 137)		this->elements[(int)11] = _v;
HXDLIN( 137)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M43,return )

Float Matrix_obj::set_M14(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_139_set_M14)
HXDLIN( 139)		this->elements[(int)12] = _v;
HXDLIN( 139)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M14,return )

Float Matrix_obj::set_M24(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_140_set_M24)
HXDLIN( 140)		this->elements[(int)13] = _v;
HXDLIN( 140)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M24,return )

Float Matrix_obj::set_M34(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_141_set_M34)
HXDLIN( 141)		this->elements[(int)14] = _v;
HXDLIN( 141)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M34,return )

Float Matrix_obj::set_M44(Float _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_142_set_M44)
HXDLIN( 142)		this->elements[(int)15] = _v;
HXDLIN( 142)		return _v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,set_M44,return )

 ::snow::api::buffers::ArrayBufferView Matrix_obj::float32array(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_144_float32array)
HXLINE( 146)		int i = (int)0;
HXLINE( 148)		while((i < (int)16)){
HXLINE( 149)			{
HXLINE( 149)				 ::snow::api::buffers::ArrayBufferView this1 = this->_float32array;
HXDLIN( 149)				{
HXLINE( 149)					int this2 = this1->byteOffset;
HXDLIN( 149)					::__hxcpp_memory_set_float(this1->buffer,(this2 + (i * (int)4)),this->elements->__get(i));
            				}
            			}
HXLINE( 150)			i = (i + (int)1);
            		}
HXLINE( 153)		return this->_float32array;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,float32array,return )

 ::phoenix::Matrix Matrix_obj::identity(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_157_identity)
HXLINE( 159)		{
HXLINE( 159)			::Array< Float > e = this->elements;
HXDLIN( 159)			e[(int)0] = (int)1;
HXDLIN( 159)			e[(int)4] = (int)0;
HXDLIN( 159)			e[(int)8] = (int)0;
HXDLIN( 159)			e[(int)12] = (int)0;
HXDLIN( 159)			e[(int)1] = (int)0;
HXDLIN( 159)			e[(int)5] = (int)1;
HXDLIN( 159)			e[(int)9] = (int)0;
HXDLIN( 159)			e[(int)13] = (int)0;
HXDLIN( 159)			e[(int)2] = (int)0;
HXDLIN( 159)			e[(int)6] = (int)0;
HXDLIN( 159)			e[(int)10] = (int)1;
HXDLIN( 159)			e[(int)14] = (int)0;
HXDLIN( 159)			e[(int)3] = (int)0;
HXDLIN( 159)			e[(int)7] = (int)0;
HXDLIN( 159)			e[(int)11] = (int)0;
HXDLIN( 159)			e[(int)15] = (int)1;
            		}
HXLINE( 166)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,identity,return )

 ::phoenix::Matrix Matrix_obj::copy( ::phoenix::Matrix m){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_171_copy)
HXLINE( 173)		::Array< Float > me = m->elements;
HXLINE( 175)		{
HXLINE( 175)			::Array< Float > e = this->elements;
HXDLIN( 175)			e[(int)0] = me->__get((int)0);
HXDLIN( 175)			e[(int)4] = me->__get((int)4);
HXDLIN( 175)			e[(int)8] = me->__get((int)8);
HXDLIN( 175)			e[(int)12] = me->__get((int)12);
HXDLIN( 175)			e[(int)1] = me->__get((int)1);
HXDLIN( 175)			e[(int)5] = me->__get((int)5);
HXDLIN( 175)			e[(int)9] = me->__get((int)9);
HXDLIN( 175)			e[(int)13] = me->__get((int)13);
HXDLIN( 175)			e[(int)2] = me->__get((int)2);
HXDLIN( 175)			e[(int)6] = me->__get((int)6);
HXDLIN( 175)			e[(int)10] = me->__get((int)10);
HXDLIN( 175)			e[(int)14] = me->__get((int)14);
HXDLIN( 175)			e[(int)3] = me->__get((int)3);
HXDLIN( 175)			e[(int)7] = me->__get((int)7);
HXDLIN( 175)			e[(int)11] = me->__get((int)11);
HXDLIN( 175)			e[(int)15] = me->__get((int)15);
            		}
HXLINE( 182)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,copy,return )

 ::phoenix::Matrix Matrix_obj::make2D(Float _x,Float _y,hx::Null< Float >  __o__scale,hx::Null< Float >  __o__rotation){
Float _scale = __o__scale.Default(1);
Float _rotation = __o__rotation.Default(0);
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_185_make2D)
HXLINE( 187)		Float theta = (_rotation * ((Float)0.0174532925199432781));
HXLINE( 188)		Float c = ::Math_obj::cos(theta);
HXLINE( 189)		Float s = ::Math_obj::sin(theta);
HXLINE( 191)		{
HXLINE( 191)			::Array< Float > e = this->elements;
HXDLIN( 191)			e[(int)0] = (c * _scale);
HXDLIN( 191)			e[(int)4] = (s * _scale);
HXDLIN( 191)			e[(int)8] = (int)0;
HXDLIN( 191)			e[(int)12] = _x;
HXDLIN( 191)			e[(int)1] = (-(s) * _scale);
HXDLIN( 191)			e[(int)5] = (c * _scale);
HXDLIN( 191)			e[(int)9] = (int)0;
HXDLIN( 191)			e[(int)13] = _y;
HXDLIN( 191)			e[(int)2] = (int)0;
HXDLIN( 191)			e[(int)6] = (int)0;
HXDLIN( 191)			e[(int)10] = (int)1;
HXDLIN( 191)			e[(int)14] = (int)0;
HXDLIN( 191)			e[(int)3] = (int)0;
HXDLIN( 191)			e[(int)7] = (int)0;
HXDLIN( 191)			e[(int)11] = (int)0;
HXDLIN( 191)			e[(int)15] = (int)1;
            		}
HXLINE( 198)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Matrix_obj,make2D,return )

 ::phoenix::Matrix Matrix_obj::copyPosition( ::phoenix::Matrix m){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_202_copyPosition)
HXLINE( 204)		::Array< Float > _hx_tmp = this->elements;
HXDLIN( 204)		_hx_tmp[(int)12] = m->elements->__get((int)12);
HXLINE( 205)		::Array< Float > _hx_tmp1 = this->elements;
HXDLIN( 205)		_hx_tmp1[(int)13] = m->elements->__get((int)13);
HXLINE( 206)		::Array< Float > _hx_tmp2 = this->elements;
HXDLIN( 206)		_hx_tmp2[(int)14] = m->elements->__get((int)14);
HXLINE( 208)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,copyPosition,return )

 ::phoenix::Vector Matrix_obj::getPosition(){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_213_getPosition)
HXDLIN( 213)		Float _hx_tmp = this->elements->__get((int)12);
HXDLIN( 213)		Float _hx_tmp1 = this->elements->__get((int)13);
HXDLIN( 213)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,this->elements->__get((int)14),(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,getPosition,return )

 ::phoenix::Matrix Matrix_obj::extractRotation( ::phoenix::Matrix m){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_216_extractRotation)
HXLINE( 218)		 ::phoenix::Vector _temp =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 219)		::Array< Float > me = m->elements;
HXLINE( 221)		Float _x = me->__get((int)0);
HXDLIN( 221)		Float _y = me->__get((int)1);
HXDLIN( 221)		Float _z = me->__get((int)2);
HXDLIN( 221)		bool prev = _temp->ignore_listeners;
HXDLIN( 221)		_temp->ignore_listeners = true;
HXDLIN( 221)		{
HXLINE( 221)			_temp->x = _x;
HXDLIN( 221)			if (!(_temp->_construct)) {
HXLINE( 221)				bool _scale_x;
HXDLIN( 221)				if (hx::IsNotNull( _temp->listen_x )) {
HXLINE( 221)					_scale_x = !(_temp->ignore_listeners);
            				}
            				else {
HXLINE( 221)					_scale_x = false;
            				}
HXDLIN( 221)				if (_scale_x) {
HXLINE( 221)					_temp->listen_x(_x);
            				}
            			}
            		}
HXDLIN( 221)		{
HXLINE( 221)			_temp->y = _y;
HXDLIN( 221)			if (!(_temp->_construct)) {
HXLINE( 221)				bool _scale_x1;
HXDLIN( 221)				if (hx::IsNotNull( _temp->listen_y )) {
HXLINE( 221)					_scale_x1 = !(_temp->ignore_listeners);
            				}
            				else {
HXLINE( 221)					_scale_x1 = false;
            				}
HXDLIN( 221)				if (_scale_x1) {
HXLINE( 221)					_temp->listen_y(_y);
            				}
            			}
            		}
HXDLIN( 221)		{
HXLINE( 221)			_temp->z = _z;
HXDLIN( 221)			if (!(_temp->_construct)) {
HXLINE( 221)				bool _scale_x2;
HXDLIN( 221)				if (hx::IsNotNull( _temp->listen_z )) {
HXLINE( 221)					_scale_x2 = !(_temp->ignore_listeners);
            				}
            				else {
HXLINE( 221)					_scale_x2 = false;
            				}
HXDLIN( 221)				if (_scale_x2) {
HXLINE( 221)					_temp->listen_z(_z);
            				}
            			}
            		}
HXDLIN( 221)		_temp->ignore_listeners = prev;
HXDLIN( 221)		bool _scale_x3;
HXDLIN( 221)		if (hx::IsNotNull( _temp->listen_x )) {
HXLINE( 221)			_scale_x3 = !(_temp->ignore_listeners);
            		}
            		else {
HXLINE( 221)			_scale_x3 = false;
            		}
HXDLIN( 221)		if (_scale_x3) {
HXLINE( 221)			_temp->listen_x(_temp->x);
            		}
HXDLIN( 221)		bool _scale_x4;
HXDLIN( 221)		if (hx::IsNotNull( _temp->listen_y )) {
HXLINE( 221)			_scale_x4 = !(_temp->ignore_listeners);
            		}
            		else {
HXLINE( 221)			_scale_x4 = false;
            		}
HXDLIN( 221)		if (_scale_x4) {
HXLINE( 221)			_temp->listen_y(_temp->y);
            		}
HXDLIN( 221)		bool _scale_x5;
HXDLIN( 221)		if (hx::IsNotNull( _temp->listen_z )) {
HXLINE( 221)			_scale_x5 = !(_temp->ignore_listeners);
            		}
            		else {
HXLINE( 221)			_scale_x5 = false;
            		}
HXDLIN( 221)		if (_scale_x5) {
HXLINE( 221)			_temp->listen_z(_temp->z);
            		}
HXDLIN( 221)		 ::phoenix::Vector _this = _temp;
HXDLIN( 221)		Float _scale_x6 = (_this->x * _this->x);
HXDLIN( 221)		Float _scale_x7 = (_scale_x6 + (_this->y * _this->y));
HXDLIN( 221)		Float _scale_x8 = ((Float)(int)1 / (Float)::Math_obj::sqrt((_scale_x7 + (_this->z * _this->z))));
HXLINE( 222)		Float _x1 = me->__get((int)4);
HXDLIN( 222)		Float _y1 = me->__get((int)5);
HXDLIN( 222)		Float _z1 = me->__get((int)6);
HXDLIN( 222)		bool prev1 = _temp->ignore_listeners;
HXDLIN( 222)		_temp->ignore_listeners = true;
HXDLIN( 222)		{
HXLINE( 222)			_temp->x = _x1;
HXDLIN( 222)			if (!(_temp->_construct)) {
HXLINE( 222)				bool _scale_y;
HXDLIN( 222)				if (hx::IsNotNull( _temp->listen_x )) {
HXLINE( 222)					_scale_y = !(_temp->ignore_listeners);
            				}
            				else {
HXLINE( 222)					_scale_y = false;
            				}
HXDLIN( 222)				if (_scale_y) {
HXLINE( 222)					_temp->listen_x(_x1);
            				}
            			}
            		}
HXDLIN( 222)		{
HXLINE( 222)			_temp->y = _y1;
HXDLIN( 222)			if (!(_temp->_construct)) {
HXLINE( 222)				bool _scale_y1;
HXDLIN( 222)				if (hx::IsNotNull( _temp->listen_y )) {
HXLINE( 222)					_scale_y1 = !(_temp->ignore_listeners);
            				}
            				else {
HXLINE( 222)					_scale_y1 = false;
            				}
HXDLIN( 222)				if (_scale_y1) {
HXLINE( 222)					_temp->listen_y(_y1);
            				}
            			}
            		}
HXDLIN( 222)		{
HXLINE( 222)			_temp->z = _z1;
HXDLIN( 222)			if (!(_temp->_construct)) {
HXLINE( 222)				bool _scale_y2;
HXDLIN( 222)				if (hx::IsNotNull( _temp->listen_z )) {
HXLINE( 222)					_scale_y2 = !(_temp->ignore_listeners);
            				}
            				else {
HXLINE( 222)					_scale_y2 = false;
            				}
HXDLIN( 222)				if (_scale_y2) {
HXLINE( 222)					_temp->listen_z(_z1);
            				}
            			}
            		}
HXDLIN( 222)		_temp->ignore_listeners = prev1;
HXDLIN( 222)		bool _scale_y3;
HXDLIN( 222)		if (hx::IsNotNull( _temp->listen_x )) {
HXLINE( 222)			_scale_y3 = !(_temp->ignore_listeners);
            		}
            		else {
HXLINE( 222)			_scale_y3 = false;
            		}
HXDLIN( 222)		if (_scale_y3) {
HXLINE( 222)			_temp->listen_x(_temp->x);
            		}
HXDLIN( 222)		bool _scale_y4;
HXDLIN( 222)		if (hx::IsNotNull( _temp->listen_y )) {
HXLINE( 222)			_scale_y4 = !(_temp->ignore_listeners);
            		}
            		else {
HXLINE( 222)			_scale_y4 = false;
            		}
HXDLIN( 222)		if (_scale_y4) {
HXLINE( 222)			_temp->listen_y(_temp->y);
            		}
HXDLIN( 222)		bool _scale_y5;
HXDLIN( 222)		if (hx::IsNotNull( _temp->listen_z )) {
HXLINE( 222)			_scale_y5 = !(_temp->ignore_listeners);
            		}
            		else {
HXLINE( 222)			_scale_y5 = false;
            		}
HXDLIN( 222)		if (_scale_y5) {
HXLINE( 222)			_temp->listen_z(_temp->z);
            		}
HXDLIN( 222)		 ::phoenix::Vector _this1 = _temp;
HXDLIN( 222)		Float _scale_y6 = (_this1->x * _this1->x);
HXDLIN( 222)		Float _scale_y7 = (_scale_y6 + (_this1->y * _this1->y));
HXDLIN( 222)		Float _scale_y8 = ((Float)(int)1 / (Float)::Math_obj::sqrt((_scale_y7 + (_this1->z * _this1->z))));
HXLINE( 223)		Float _x2 = me->__get((int)8);
HXDLIN( 223)		Float _y2 = me->__get((int)9);
HXDLIN( 223)		Float _z2 = me->__get((int)10);
HXDLIN( 223)		bool prev2 = _temp->ignore_listeners;
HXDLIN( 223)		_temp->ignore_listeners = true;
HXDLIN( 223)		{
HXLINE( 223)			_temp->x = _x2;
HXDLIN( 223)			if (!(_temp->_construct)) {
HXLINE( 223)				bool _scale_z;
HXDLIN( 223)				if (hx::IsNotNull( _temp->listen_x )) {
HXLINE( 223)					_scale_z = !(_temp->ignore_listeners);
            				}
            				else {
HXLINE( 223)					_scale_z = false;
            				}
HXDLIN( 223)				if (_scale_z) {
HXLINE( 223)					_temp->listen_x(_x2);
            				}
            			}
            		}
HXDLIN( 223)		{
HXLINE( 223)			_temp->y = _y2;
HXDLIN( 223)			if (!(_temp->_construct)) {
HXLINE( 223)				bool _scale_z1;
HXDLIN( 223)				if (hx::IsNotNull( _temp->listen_y )) {
HXLINE( 223)					_scale_z1 = !(_temp->ignore_listeners);
            				}
            				else {
HXLINE( 223)					_scale_z1 = false;
            				}
HXDLIN( 223)				if (_scale_z1) {
HXLINE( 223)					_temp->listen_y(_y2);
            				}
            			}
            		}
HXDLIN( 223)		{
HXLINE( 223)			_temp->z = _z2;
HXDLIN( 223)			if (!(_temp->_construct)) {
HXLINE( 223)				bool _scale_z2;
HXDLIN( 223)				if (hx::IsNotNull( _temp->listen_z )) {
HXLINE( 223)					_scale_z2 = !(_temp->ignore_listeners);
            				}
            				else {
HXLINE( 223)					_scale_z2 = false;
            				}
HXDLIN( 223)				if (_scale_z2) {
HXLINE( 223)					_temp->listen_z(_z2);
            				}
            			}
            		}
HXDLIN( 223)		_temp->ignore_listeners = prev2;
HXDLIN( 223)		bool _scale_z3;
HXDLIN( 223)		if (hx::IsNotNull( _temp->listen_x )) {
HXLINE( 223)			_scale_z3 = !(_temp->ignore_listeners);
            		}
            		else {
HXLINE( 223)			_scale_z3 = false;
            		}
HXDLIN( 223)		if (_scale_z3) {
HXLINE( 223)			_temp->listen_x(_temp->x);
            		}
HXDLIN( 223)		bool _scale_z4;
HXDLIN( 223)		if (hx::IsNotNull( _temp->listen_y )) {
HXLINE( 223)			_scale_z4 = !(_temp->ignore_listeners);
            		}
            		else {
HXLINE( 223)			_scale_z4 = false;
            		}
HXDLIN( 223)		if (_scale_z4) {
HXLINE( 223)			_temp->listen_y(_temp->y);
            		}
HXDLIN( 223)		bool _scale_z5;
HXDLIN( 223)		if (hx::IsNotNull( _temp->listen_z )) {
HXLINE( 223)			_scale_z5 = !(_temp->ignore_listeners);
            		}
            		else {
HXLINE( 223)			_scale_z5 = false;
            		}
HXDLIN( 223)		if (_scale_z5) {
HXLINE( 223)			_temp->listen_z(_temp->z);
            		}
HXDLIN( 223)		 ::phoenix::Vector _this2 = _temp;
HXDLIN( 223)		Float _scale_z6 = (_this2->x * _this2->x);
HXDLIN( 223)		Float _scale_z7 = (_scale_z6 + (_this2->y * _this2->y));
HXDLIN( 223)		Float _scale_z8 = ((Float)(int)1 / (Float)::Math_obj::sqrt((_scale_z7 + (_this2->z * _this2->z))));
HXLINE( 225)		::Array< Float > _hx_tmp = this->elements;
HXDLIN( 225)		_hx_tmp[(int)0] = (me->__get((int)0) * _scale_x8);
HXLINE( 226)		::Array< Float > _hx_tmp1 = this->elements;
HXDLIN( 226)		_hx_tmp1[(int)1] = (me->__get((int)1) * _scale_x8);
HXLINE( 227)		::Array< Float > _hx_tmp2 = this->elements;
HXDLIN( 227)		_hx_tmp2[(int)2] = (me->__get((int)2) * _scale_x8);
HXLINE( 229)		::Array< Float > _hx_tmp3 = this->elements;
HXDLIN( 229)		_hx_tmp3[(int)4] = (me->__get((int)4) * _scale_y8);
HXLINE( 230)		::Array< Float > _hx_tmp4 = this->elements;
HXDLIN( 230)		_hx_tmp4[(int)5] = (me->__get((int)5) * _scale_y8);
HXLINE( 231)		::Array< Float > _hx_tmp5 = this->elements;
HXDLIN( 231)		_hx_tmp5[(int)6] = (me->__get((int)6) * _scale_y8);
HXLINE( 233)		::Array< Float > _hx_tmp6 = this->elements;
HXDLIN( 233)		_hx_tmp6[(int)8] = (me->__get((int)8) * _scale_z8);
HXLINE( 234)		::Array< Float > _hx_tmp7 = this->elements;
HXDLIN( 234)		_hx_tmp7[(int)9] = (me->__get((int)9) * _scale_z8);
HXLINE( 235)		::Array< Float > _hx_tmp8 = this->elements;
HXDLIN( 235)		_hx_tmp8[(int)10] = (me->__get((int)10) * _scale_z8);
HXLINE( 237)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,extractRotation,return )

 ::phoenix::Matrix Matrix_obj::makeRotationFromEuler( ::phoenix::Vector _v,hx::Null< int >  __o__order){
int _order = __o__order.Default(0);
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_240_makeRotationFromEuler)
HXLINE( 242)		::Array< Float > te = this->elements;
HXLINE( 244)		Float x = _v->x;
HXLINE( 245)		Float y = _v->y;
HXLINE( 246)		Float z = _v->z;
HXLINE( 248)		Float a = ::Math_obj::cos(x);
HXDLIN( 248)		Float b = ::Math_obj::sin(x);
HXLINE( 249)		Float c = ::Math_obj::cos(y);
HXDLIN( 249)		Float d = ::Math_obj::sin(y);
HXLINE( 250)		Float e = ::Math_obj::cos(z);
HXDLIN( 250)		Float f = ::Math_obj::sin(z);
HXLINE( 252)		if ((_order == (int)0)) {
HXLINE( 254)			Float ae = (a * e);
HXDLIN( 254)			Float af = (a * f);
HXDLIN( 254)			Float be = (b * e);
HXDLIN( 254)			Float bf = (b * f);
HXLINE( 256)			te[(int)0] = (c * e);
HXLINE( 257)			te[(int)4] = (-(c) * f);
HXLINE( 258)			te[(int)8] = d;
HXLINE( 260)			te[(int)1] = (af + (be * d));
HXLINE( 261)			te[(int)5] = (ae - (bf * d));
HXLINE( 262)			te[(int)9] = (-(b) * c);
HXLINE( 264)			te[(int)2] = (bf - (ae * d));
HXLINE( 265)			te[(int)6] = (be + (af * d));
HXLINE( 266)			te[(int)10] = (a * c);
            		}
            		else {
HXLINE( 268)			if ((_order == (int)1)) {
HXLINE( 270)				Float ce = (c * e);
HXDLIN( 270)				Float cf = (c * f);
HXDLIN( 270)				Float de = (d * e);
HXDLIN( 270)				Float df = (d * f);
HXLINE( 272)				te[(int)0] = (ce + (df * b));
HXLINE( 273)				te[(int)4] = ((de * b) - cf);
HXLINE( 274)				te[(int)8] = (a * d);
HXLINE( 276)				te[(int)1] = (a * f);
HXLINE( 277)				te[(int)5] = (a * e);
HXLINE( 278)				te[(int)9] = -(b);
HXLINE( 280)				te[(int)2] = ((cf * b) - de);
HXLINE( 281)				te[(int)6] = (df + (ce * b));
HXLINE( 282)				te[(int)10] = (a * c);
            			}
            			else {
HXLINE( 284)				if ((_order == (int)2)) {
HXLINE( 286)					Float ce1 = (c * e);
HXDLIN( 286)					Float cf1 = (c * f);
HXDLIN( 286)					Float de1 = (d * e);
HXDLIN( 286)					Float df1 = (d * f);
HXLINE( 288)					te[(int)0] = (ce1 - (df1 * b));
HXLINE( 289)					te[(int)4] = (-(a) * f);
HXLINE( 290)					te[(int)8] = (de1 + (cf1 * b));
HXLINE( 292)					te[(int)1] = (cf1 + (de1 * b));
HXLINE( 293)					te[(int)5] = (a * e);
HXLINE( 294)					te[(int)9] = (df1 - (ce1 * b));
HXLINE( 296)					te[(int)2] = (-(a) * d);
HXLINE( 297)					te[(int)6] = b;
HXLINE( 298)					te[(int)10] = (a * c);
            				}
            				else {
HXLINE( 300)					if ((_order == (int)3)) {
HXLINE( 302)						Float ae1 = (a * e);
HXDLIN( 302)						Float af1 = (a * f);
HXDLIN( 302)						Float be1 = (b * e);
HXDLIN( 302)						Float bf1 = (b * f);
HXLINE( 304)						te[(int)0] = (c * e);
HXLINE( 305)						te[(int)4] = ((be1 * d) - af1);
HXLINE( 306)						te[(int)8] = ((ae1 * d) + bf1);
HXLINE( 308)						te[(int)1] = (c * f);
HXLINE( 309)						te[(int)5] = ((bf1 * d) + ae1);
HXLINE( 310)						te[(int)9] = ((af1 * d) - be1);
HXLINE( 312)						te[(int)2] = -(d);
HXLINE( 313)						te[(int)6] = (b * c);
HXLINE( 314)						te[(int)10] = (a * c);
            					}
            					else {
HXLINE( 316)						if ((_order == (int)4)) {
HXLINE( 318)							Float ac = (a * c);
HXDLIN( 318)							Float ad = (a * d);
HXDLIN( 318)							Float bc = (b * c);
HXDLIN( 318)							Float bd = (b * d);
HXLINE( 320)							te[(int)0] = (c * e);
HXLINE( 321)							te[(int)4] = (bd - (ac * f));
HXLINE( 322)							te[(int)8] = ((bc * f) + ad);
HXLINE( 324)							te[(int)1] = f;
HXLINE( 325)							te[(int)5] = (a * e);
HXLINE( 326)							te[(int)9] = (-(b) * e);
HXLINE( 328)							te[(int)2] = (-(d) * e);
HXLINE( 329)							te[(int)6] = ((ad * f) + bc);
HXLINE( 330)							te[(int)10] = (ac - (bd * f));
            						}
            						else {
HXLINE( 332)							if ((_order == (int)5)) {
HXLINE( 334)								Float ac1 = (a * c);
HXDLIN( 334)								Float ad1 = (a * d);
HXDLIN( 334)								Float bc1 = (b * c);
HXDLIN( 334)								Float bd1 = (b * d);
HXLINE( 336)								te[(int)0] = (c * e);
HXLINE( 337)								te[(int)4] = -(f);
HXLINE( 338)								te[(int)8] = (d * e);
HXLINE( 340)								te[(int)1] = ((ac1 * f) + bd1);
HXLINE( 341)								te[(int)5] = (a * e);
HXLINE( 342)								te[(int)9] = ((ad1 * f) - bc1);
HXLINE( 344)								te[(int)2] = ((bc1 * f) - ad1);
HXLINE( 345)								te[(int)6] = (b * e);
HXLINE( 346)								te[(int)10] = ((bd1 * f) + ac1);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 351)		te[(int)3] = (int)0;
HXLINE( 352)		te[(int)7] = (int)0;
HXLINE( 353)		te[(int)11] = (int)0;
HXLINE( 356)		te[(int)12] = (int)0;
HXLINE( 357)		te[(int)13] = (int)0;
HXLINE( 358)		te[(int)14] = (int)0;
HXLINE( 359)		te[(int)15] = (int)1;
HXLINE( 361)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,makeRotationFromEuler,return )

 ::phoenix::Matrix Matrix_obj::makeRotationFromQuaternion( ::phoenix::Quaternion q){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_365_makeRotationFromQuaternion)
HXLINE( 367)		::Array< Float > te = this->elements;
HXLINE( 369)		Float x2 = (q->x + q->x);
HXDLIN( 369)		Float y2 = (q->y + q->y);
HXDLIN( 369)		Float z2 = (q->z + q->z);
HXLINE( 370)		Float xx = (q->x * x2);
HXDLIN( 370)		Float xy = (q->x * y2);
HXDLIN( 370)		Float xz = (q->x * z2);
HXLINE( 371)		Float yy = (q->y * y2);
HXDLIN( 371)		Float yz = (q->y * z2);
HXDLIN( 371)		Float zz = (q->z * z2);
HXLINE( 372)		Float wx = (q->w * x2);
HXDLIN( 372)		Float wy = (q->w * y2);
HXDLIN( 372)		Float wz = (q->w * z2);
HXLINE( 374)		te[(int)0] = ((int)1 - (yy + zz));
HXLINE( 375)		te[(int)4] = (xy - wz);
HXLINE( 376)		te[(int)8] = (xz + wy);
HXLINE( 378)		te[(int)1] = (xy + wz);
HXLINE( 379)		te[(int)5] = ((int)1 - (xx + zz));
HXLINE( 380)		te[(int)9] = (yz - wx);
HXLINE( 382)		te[(int)2] = (xz - wy);
HXLINE( 383)		te[(int)6] = (yz + wx);
HXLINE( 384)		te[(int)10] = ((int)1 - (xx + yy));
HXLINE( 387)		te[(int)3] = (int)0;
HXLINE( 388)		te[(int)7] = (int)0;
HXLINE( 389)		te[(int)11] = (int)0;
HXLINE( 392)		te[(int)12] = (int)0;
HXLINE( 393)		te[(int)13] = (int)0;
HXLINE( 394)		te[(int)14] = (int)0;
HXLINE( 395)		te[(int)15] = (int)1;
HXLINE( 397)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,makeRotationFromQuaternion,return )

 ::phoenix::Matrix Matrix_obj::lookAt( ::phoenix::Vector _eye, ::phoenix::Vector _target, ::phoenix::Vector _up){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_402_lookAt)
HXLINE( 404)		 ::phoenix::Vector _x =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 405)		 ::phoenix::Vector _y =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 406)		 ::phoenix::Vector _z =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 408)		::Array< Float > te = this->elements;
HXLINE( 410)		Float _this_z;
HXDLIN( 410)		Float _this_y;
HXDLIN( 410)		Float _this_x;
HXDLIN( 410)		Float _this_w;
HXDLIN( 410)		 ::Dynamic _this_listen_z;
HXDLIN( 410)		 ::Dynamic _this_listen_y;
HXDLIN( 410)		 ::Dynamic _this_listen_x;
HXDLIN( 410)		bool _this_ignore_listeners;
HXDLIN( 410)		bool _this__construct;
HXDLIN( 410)		Float _x1 = (_target->x - _eye->x);
HXDLIN( 410)		Float _y1 = (_target->y - _eye->y);
HXDLIN( 410)		Float _z1 = (_target->z - _eye->z);
HXDLIN( 410)		_this_x = ((Float)0);
HXDLIN( 410)		_this_y = ((Float)0);
HXDLIN( 410)		_this_z = ((Float)0);
HXDLIN( 410)		_this_w = ((Float)0);
HXDLIN( 410)		_this_ignore_listeners = false;
HXDLIN( 410)		_this__construct = false;
HXDLIN( 410)		_this__construct = true;
HXDLIN( 410)		_this_x = _x1;
HXDLIN( 410)		if (!(_this__construct)) {
HXLINE( 410)			bool _z2;
HXDLIN( 410)			if (hx::IsNotNull( _this_listen_x )) {
HXLINE( 410)				_z2 = !(_this_ignore_listeners);
            			}
            			else {
HXLINE( 410)				_z2 = false;
            			}
HXDLIN( 410)			if (_z2) {
HXLINE( 410)				_this_listen_x(_x1);
            			}
            		}
HXDLIN( 410)		_this_y = _y1;
HXDLIN( 410)		if (!(_this__construct)) {
HXLINE( 410)			bool _z3;
HXDLIN( 410)			if (hx::IsNotNull( _this_listen_y )) {
HXLINE( 410)				_z3 = !(_this_ignore_listeners);
            			}
            			else {
HXLINE( 410)				_z3 = false;
            			}
HXDLIN( 410)			if (_z3) {
HXLINE( 410)				_this_listen_y(_y1);
            			}
            		}
HXDLIN( 410)		_this_z = _z1;
HXDLIN( 410)		if (!(_this__construct)) {
HXLINE( 410)			bool _z4;
HXDLIN( 410)			if (hx::IsNotNull( _this_listen_z )) {
HXLINE( 410)				_z4 = !(_this_ignore_listeners);
            			}
            			else {
HXLINE( 410)				_z4 = false;
            			}
HXDLIN( 410)			if (_z4) {
HXLINE( 410)				_this_listen_z(_z1);
            			}
            		}
HXDLIN( 410)		_this_w = (int)0;
HXDLIN( 410)		_this__construct = false;
HXDLIN( 410)		Float b = ::Math_obj::sqrt((((_this_x * _this_x) + (_this_y * _this_y)) + (_this_z * _this_z)));
HXDLIN( 410)		_z =  ::phoenix::Vector_obj::__alloc( HX_CTX ,((Float)_this_x / (Float)b),((Float)_this_y / (Float)b),((Float)_this_z / (Float)b),null());
HXLINE( 412)		Float _hx_tmp = (_z->x * _z->x);
HXDLIN( 412)		Float _hx_tmp1 = (_hx_tmp + (_z->y * _z->y));
HXDLIN( 412)		if ((::Math_obj::sqrt((_hx_tmp1 + (_z->z * _z->z))) == (int)0)) {
HXLINE( 413)			_z->z = (int)1;
HXDLIN( 413)			if (!(_z->_construct)) {
HXLINE( 413)				bool _hx_tmp2;
HXDLIN( 413)				if (hx::IsNotNull( _z->listen_z )) {
HXLINE( 413)					_hx_tmp2 = !(_z->ignore_listeners);
            				}
            				else {
HXLINE( 413)					_hx_tmp2 = false;
            				}
HXDLIN( 413)				if (_hx_tmp2) {
HXLINE( 413)					_z->listen_z((int)1);
            				}
            			}
            		}
HXLINE( 416)		Float _this_z1;
HXDLIN( 416)		Float _this_y1;
HXDLIN( 416)		Float _this_x1;
HXDLIN( 416)		Float _this_w1;
HXDLIN( 416)		 ::Dynamic _this_listen_z1;
HXDLIN( 416)		 ::Dynamic _this_listen_y1;
HXDLIN( 416)		 ::Dynamic _this_listen_x1;
HXDLIN( 416)		bool _this_ignore_listeners1;
HXDLIN( 416)		bool _this__construct1;
HXDLIN( 416)		Float _x2 = (_up->y * _z->z);
HXDLIN( 416)		Float _x3 = (_x2 - (_up->z * _z->y));
HXDLIN( 416)		Float _y2 = (_up->z * _z->x);
HXDLIN( 416)		Float _y3 = (_y2 - (_up->x * _z->z));
HXDLIN( 416)		Float _z5 = (_up->x * _z->y);
HXDLIN( 416)		Float _z6 = (_z5 - (_up->y * _z->x));
HXDLIN( 416)		_this_x1 = ((Float)0);
HXDLIN( 416)		_this_y1 = ((Float)0);
HXDLIN( 416)		_this_z1 = ((Float)0);
HXDLIN( 416)		_this_w1 = ((Float)0);
HXDLIN( 416)		_this_ignore_listeners1 = false;
HXDLIN( 416)		_this__construct1 = false;
HXDLIN( 416)		_this__construct1 = true;
HXDLIN( 416)		_this_x1 = _x3;
HXDLIN( 416)		if (!(_this__construct1)) {
HXLINE( 416)			bool _x4;
HXDLIN( 416)			if (hx::IsNotNull( _this_listen_x1 )) {
HXLINE( 416)				_x4 = !(_this_ignore_listeners1);
            			}
            			else {
HXLINE( 416)				_x4 = false;
            			}
HXDLIN( 416)			if (_x4) {
HXLINE( 416)				_this_listen_x1(_x3);
            			}
            		}
HXDLIN( 416)		_this_y1 = _y3;
HXDLIN( 416)		if (!(_this__construct1)) {
HXLINE( 416)			bool _x5;
HXDLIN( 416)			if (hx::IsNotNull( _this_listen_y1 )) {
HXLINE( 416)				_x5 = !(_this_ignore_listeners1);
            			}
            			else {
HXLINE( 416)				_x5 = false;
            			}
HXDLIN( 416)			if (_x5) {
HXLINE( 416)				_this_listen_y1(_y3);
            			}
            		}
HXDLIN( 416)		_this_z1 = _z6;
HXDLIN( 416)		if (!(_this__construct1)) {
HXLINE( 416)			bool _x6;
HXDLIN( 416)			if (hx::IsNotNull( _this_listen_z1 )) {
HXLINE( 416)				_x6 = !(_this_ignore_listeners1);
            			}
            			else {
HXLINE( 416)				_x6 = false;
            			}
HXDLIN( 416)			if (_x6) {
HXLINE( 416)				_this_listen_z1(_z6);
            			}
            		}
HXDLIN( 416)		_this_w1 = (int)0;
HXDLIN( 416)		_this__construct1 = false;
HXDLIN( 416)		Float b1 = ::Math_obj::sqrt((((_this_x1 * _this_x1) + (_this_y1 * _this_y1)) + (_this_z1 * _this_z1)));
HXDLIN( 416)		_x =  ::phoenix::Vector_obj::__alloc( HX_CTX ,((Float)_this_x1 / (Float)b1),((Float)_this_y1 / (Float)b1),((Float)_this_z1 / (Float)b1),null());
HXLINE( 418)		Float _hx_tmp3 = (_x->x * _x->x);
HXDLIN( 418)		Float _hx_tmp4 = (_hx_tmp3 + (_x->y * _x->y));
HXDLIN( 418)		if ((::Math_obj::sqrt((_hx_tmp4 + (_x->z * _x->z))) == (int)0)) {
HXLINE( 419)			{
HXLINE( 419)				 ::phoenix::Vector _g = _z;
HXDLIN( 419)				{
HXLINE( 419)					Float _x7 = (_g->x + ((Float)0.0001));
HXDLIN( 419)					_g->x = _x7;
HXDLIN( 419)					if (!(_g->_construct)) {
HXLINE( 419)						bool _hx_tmp5;
HXDLIN( 419)						if (hx::IsNotNull( _g->listen_x )) {
HXLINE( 419)							_hx_tmp5 = !(_g->ignore_listeners);
            						}
            						else {
HXLINE( 419)							_hx_tmp5 = false;
            						}
HXDLIN( 419)						if (_hx_tmp5) {
HXLINE( 419)							_g->listen_x(_x7);
            						}
            					}
            				}
            			}
HXLINE( 420)			Float _this_z2;
HXDLIN( 420)			Float _this_y2;
HXDLIN( 420)			Float _this_x2;
HXDLIN( 420)			Float _this_w2;
HXDLIN( 420)			 ::Dynamic _this_listen_z2;
HXDLIN( 420)			 ::Dynamic _this_listen_y2;
HXDLIN( 420)			 ::Dynamic _this_listen_x2;
HXDLIN( 420)			bool _this_ignore_listeners2;
HXDLIN( 420)			bool _this__construct2;
HXDLIN( 420)			Float _x8 = (_up->y * _z->z);
HXDLIN( 420)			Float _x9 = (_x8 - (_up->z * _z->y));
HXDLIN( 420)			Float _y4 = (_up->z * _z->x);
HXDLIN( 420)			Float _y5 = (_y4 - (_up->x * _z->z));
HXDLIN( 420)			Float _z7 = (_up->x * _z->y);
HXDLIN( 420)			Float _z8 = (_z7 - (_up->y * _z->x));
HXDLIN( 420)			_this_x2 = ((Float)0);
HXDLIN( 420)			_this_y2 = ((Float)0);
HXDLIN( 420)			_this_z2 = ((Float)0);
HXDLIN( 420)			_this_w2 = ((Float)0);
HXDLIN( 420)			_this_ignore_listeners2 = false;
HXDLIN( 420)			_this__construct2 = false;
HXDLIN( 420)			_this__construct2 = true;
HXDLIN( 420)			_this_x2 = _x9;
HXDLIN( 420)			if (!(_this__construct2)) {
HXLINE( 420)				bool _x10;
HXDLIN( 420)				if (hx::IsNotNull( _this_listen_x2 )) {
HXLINE( 420)					_x10 = !(_this_ignore_listeners2);
            				}
            				else {
HXLINE( 420)					_x10 = false;
            				}
HXDLIN( 420)				if (_x10) {
HXLINE( 420)					_this_listen_x2(_x9);
            				}
            			}
HXDLIN( 420)			_this_y2 = _y5;
HXDLIN( 420)			if (!(_this__construct2)) {
HXLINE( 420)				bool _x11;
HXDLIN( 420)				if (hx::IsNotNull( _this_listen_y2 )) {
HXLINE( 420)					_x11 = !(_this_ignore_listeners2);
            				}
            				else {
HXLINE( 420)					_x11 = false;
            				}
HXDLIN( 420)				if (_x11) {
HXLINE( 420)					_this_listen_y2(_y5);
            				}
            			}
HXDLIN( 420)			_this_z2 = _z8;
HXDLIN( 420)			if (!(_this__construct2)) {
HXLINE( 420)				bool _x12;
HXDLIN( 420)				if (hx::IsNotNull( _this_listen_z2 )) {
HXLINE( 420)					_x12 = !(_this_ignore_listeners2);
            				}
            				else {
HXLINE( 420)					_x12 = false;
            				}
HXDLIN( 420)				if (_x12) {
HXLINE( 420)					_this_listen_z2(_z8);
            				}
            			}
HXDLIN( 420)			_this_w2 = (int)0;
HXDLIN( 420)			_this__construct2 = false;
HXDLIN( 420)			Float b2 = ::Math_obj::sqrt((((_this_x2 * _this_x2) + (_this_y2 * _this_y2)) + (_this_z2 * _this_z2)));
HXDLIN( 420)			_x =  ::phoenix::Vector_obj::__alloc( HX_CTX ,((Float)_this_x2 / (Float)b2),((Float)_this_y2 / (Float)b2),((Float)_this_z2 / (Float)b2),null());
            		}
HXLINE( 423)		Float _y6 = (_z->y * _x->z);
HXDLIN( 423)		Float _y7 = (_y6 - (_z->z * _x->y));
HXDLIN( 423)		Float _y8 = (_z->z * _x->x);
HXDLIN( 423)		Float _y9 = (_y8 - (_z->x * _x->z));
HXDLIN( 423)		Float _y10 = (_z->x * _x->y);
HXDLIN( 423)		_y =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_y7,_y9,(_y10 - (_z->y * _x->x)),null());
HXLINE( 425)		te[(int)0] = _x->x;
HXDLIN( 425)		te[(int)4] = _y->x;
HXDLIN( 425)		te[(int)8] = _z->x;
HXLINE( 426)		te[(int)1] = _x->y;
HXDLIN( 426)		te[(int)5] = _y->y;
HXDLIN( 426)		te[(int)9] = _z->y;
HXLINE( 427)		te[(int)2] = _x->z;
HXDLIN( 427)		te[(int)6] = _y->z;
HXDLIN( 427)		te[(int)10] = _z->z;
HXLINE( 429)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix_obj,lookAt,return )

 ::phoenix::Matrix Matrix_obj::multiply( ::phoenix::Matrix _m){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_436_multiply)
HXDLIN( 436)		::Array< Float > ae = this->elements;
HXDLIN( 436)		::Array< Float > be = _m->elements;
HXDLIN( 436)		::Array< Float > te = this->elements;
HXDLIN( 436)		Float a11 = ae->__get((int)0);
HXDLIN( 436)		Float a12 = ae->__get((int)4);
HXDLIN( 436)		Float a13 = ae->__get((int)8);
HXDLIN( 436)		Float a14 = ae->__get((int)12);
HXDLIN( 436)		Float a21 = ae->__get((int)1);
HXDLIN( 436)		Float a22 = ae->__get((int)5);
HXDLIN( 436)		Float a23 = ae->__get((int)9);
HXDLIN( 436)		Float a24 = ae->__get((int)13);
HXDLIN( 436)		Float a31 = ae->__get((int)2);
HXDLIN( 436)		Float a32 = ae->__get((int)6);
HXDLIN( 436)		Float a33 = ae->__get((int)10);
HXDLIN( 436)		Float a34 = ae->__get((int)14);
HXDLIN( 436)		Float a41 = ae->__get((int)3);
HXDLIN( 436)		Float a42 = ae->__get((int)7);
HXDLIN( 436)		Float a43 = ae->__get((int)11);
HXDLIN( 436)		Float a44 = ae->__get((int)15);
HXDLIN( 436)		Float b11 = be->__get((int)0);
HXDLIN( 436)		Float b12 = be->__get((int)4);
HXDLIN( 436)		Float b13 = be->__get((int)8);
HXDLIN( 436)		Float b14 = be->__get((int)12);
HXDLIN( 436)		Float b21 = be->__get((int)1);
HXDLIN( 436)		Float b22 = be->__get((int)5);
HXDLIN( 436)		Float b23 = be->__get((int)9);
HXDLIN( 436)		Float b24 = be->__get((int)13);
HXDLIN( 436)		Float b31 = be->__get((int)2);
HXDLIN( 436)		Float b32 = be->__get((int)6);
HXDLIN( 436)		Float b33 = be->__get((int)10);
HXDLIN( 436)		Float b34 = be->__get((int)14);
HXDLIN( 436)		Float b41 = be->__get((int)3);
HXDLIN( 436)		Float b42 = be->__get((int)7);
HXDLIN( 436)		Float b43 = be->__get((int)11);
HXDLIN( 436)		Float b44 = be->__get((int)15);
HXDLIN( 436)		te[(int)0] = ((((a11 * b11) + (a12 * b21)) + (a13 * b31)) + (a14 * b41));
HXDLIN( 436)		te[(int)4] = ((((a11 * b12) + (a12 * b22)) + (a13 * b32)) + (a14 * b42));
HXDLIN( 436)		te[(int)8] = ((((a11 * b13) + (a12 * b23)) + (a13 * b33)) + (a14 * b43));
HXDLIN( 436)		te[(int)12] = ((((a11 * b14) + (a12 * b24)) + (a13 * b34)) + (a14 * b44));
HXDLIN( 436)		te[(int)1] = ((((a21 * b11) + (a22 * b21)) + (a23 * b31)) + (a24 * b41));
HXDLIN( 436)		te[(int)5] = ((((a21 * b12) + (a22 * b22)) + (a23 * b32)) + (a24 * b42));
HXDLIN( 436)		te[(int)9] = ((((a21 * b13) + (a22 * b23)) + (a23 * b33)) + (a24 * b43));
HXDLIN( 436)		te[(int)13] = ((((a21 * b14) + (a22 * b24)) + (a23 * b34)) + (a24 * b44));
HXDLIN( 436)		te[(int)2] = ((((a31 * b11) + (a32 * b21)) + (a33 * b31)) + (a34 * b41));
HXDLIN( 436)		te[(int)6] = ((((a31 * b12) + (a32 * b22)) + (a33 * b32)) + (a34 * b42));
HXDLIN( 436)		te[(int)10] = ((((a31 * b13) + (a32 * b23)) + (a33 * b33)) + (a34 * b43));
HXDLIN( 436)		te[(int)14] = ((((a31 * b14) + (a32 * b24)) + (a33 * b34)) + (a34 * b44));
HXDLIN( 436)		te[(int)3] = ((((a41 * b11) + (a42 * b21)) + (a43 * b31)) + (a44 * b41));
HXDLIN( 436)		te[(int)7] = ((((a41 * b12) + (a42 * b22)) + (a43 * b32)) + (a44 * b42));
HXDLIN( 436)		te[(int)11] = ((((a41 * b13) + (a42 * b23)) + (a43 * b33)) + (a44 * b43));
HXDLIN( 436)		te[(int)15] = ((((a41 * b14) + (a42 * b24)) + (a43 * b34)) + (a44 * b44));
HXDLIN( 436)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,multiply,return )

 ::phoenix::Matrix Matrix_obj::multiplyMatrices( ::phoenix::Matrix _a, ::phoenix::Matrix _b){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_441_multiplyMatrices)
HXLINE( 443)		::Array< Float > ae = _a->elements;
HXLINE( 444)		::Array< Float > be = _b->elements;
HXLINE( 445)		::Array< Float > te = this->elements;
HXLINE( 447)		Float a11 = ae->__get((int)0);
HXDLIN( 447)		Float a12 = ae->__get((int)4);
HXDLIN( 447)		Float a13 = ae->__get((int)8);
HXDLIN( 447)		Float a14 = ae->__get((int)12);
HXLINE( 448)		Float a21 = ae->__get((int)1);
HXDLIN( 448)		Float a22 = ae->__get((int)5);
HXDLIN( 448)		Float a23 = ae->__get((int)9);
HXDLIN( 448)		Float a24 = ae->__get((int)13);
HXLINE( 449)		Float a31 = ae->__get((int)2);
HXDLIN( 449)		Float a32 = ae->__get((int)6);
HXDLIN( 449)		Float a33 = ae->__get((int)10);
HXDLIN( 449)		Float a34 = ae->__get((int)14);
HXLINE( 450)		Float a41 = ae->__get((int)3);
HXDLIN( 450)		Float a42 = ae->__get((int)7);
HXDLIN( 450)		Float a43 = ae->__get((int)11);
HXDLIN( 450)		Float a44 = ae->__get((int)15);
HXLINE( 452)		Float b11 = be->__get((int)0);
HXDLIN( 452)		Float b12 = be->__get((int)4);
HXDLIN( 452)		Float b13 = be->__get((int)8);
HXDLIN( 452)		Float b14 = be->__get((int)12);
HXLINE( 453)		Float b21 = be->__get((int)1);
HXDLIN( 453)		Float b22 = be->__get((int)5);
HXDLIN( 453)		Float b23 = be->__get((int)9);
HXDLIN( 453)		Float b24 = be->__get((int)13);
HXLINE( 454)		Float b31 = be->__get((int)2);
HXDLIN( 454)		Float b32 = be->__get((int)6);
HXDLIN( 454)		Float b33 = be->__get((int)10);
HXDLIN( 454)		Float b34 = be->__get((int)14);
HXLINE( 455)		Float b41 = be->__get((int)3);
HXDLIN( 455)		Float b42 = be->__get((int)7);
HXDLIN( 455)		Float b43 = be->__get((int)11);
HXDLIN( 455)		Float b44 = be->__get((int)15);
HXLINE( 457)		te[(int)0] = ((((a11 * b11) + (a12 * b21)) + (a13 * b31)) + (a14 * b41));
HXLINE( 458)		te[(int)4] = ((((a11 * b12) + (a12 * b22)) + (a13 * b32)) + (a14 * b42));
HXLINE( 459)		te[(int)8] = ((((a11 * b13) + (a12 * b23)) + (a13 * b33)) + (a14 * b43));
HXLINE( 460)		te[(int)12] = ((((a11 * b14) + (a12 * b24)) + (a13 * b34)) + (a14 * b44));
HXLINE( 462)		te[(int)1] = ((((a21 * b11) + (a22 * b21)) + (a23 * b31)) + (a24 * b41));
HXLINE( 463)		te[(int)5] = ((((a21 * b12) + (a22 * b22)) + (a23 * b32)) + (a24 * b42));
HXLINE( 464)		te[(int)9] = ((((a21 * b13) + (a22 * b23)) + (a23 * b33)) + (a24 * b43));
HXLINE( 465)		te[(int)13] = ((((a21 * b14) + (a22 * b24)) + (a23 * b34)) + (a24 * b44));
HXLINE( 467)		te[(int)2] = ((((a31 * b11) + (a32 * b21)) + (a33 * b31)) + (a34 * b41));
HXLINE( 468)		te[(int)6] = ((((a31 * b12) + (a32 * b22)) + (a33 * b32)) + (a34 * b42));
HXLINE( 469)		te[(int)10] = ((((a31 * b13) + (a32 * b23)) + (a33 * b33)) + (a34 * b43));
HXLINE( 470)		te[(int)14] = ((((a31 * b14) + (a32 * b24)) + (a33 * b34)) + (a34 * b44));
HXLINE( 472)		te[(int)3] = ((((a41 * b11) + (a42 * b21)) + (a43 * b31)) + (a44 * b41));
HXLINE( 473)		te[(int)7] = ((((a41 * b12) + (a42 * b22)) + (a43 * b32)) + (a44 * b42));
HXLINE( 474)		te[(int)11] = ((((a41 * b13) + (a42 * b23)) + (a43 * b33)) + (a44 * b43));
HXLINE( 475)		te[(int)15] = ((((a41 * b14) + (a42 * b24)) + (a43 * b34)) + (a44 * b44));
HXLINE( 477)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,multiplyMatrices,return )

 ::phoenix::Matrix Matrix_obj::multiplyToArray( ::phoenix::Matrix _a, ::phoenix::Matrix _b,::Array< Float > _r){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_482_multiplyToArray)
HXLINE( 484)		::Array< Float > te = this->elements;
HXLINE( 486)		{
HXLINE( 486)			::Array< Float > ae = _a->elements;
HXDLIN( 486)			::Array< Float > be = _b->elements;
HXDLIN( 486)			::Array< Float > te1 = this->elements;
HXDLIN( 486)			Float a11 = ae->__get((int)0);
HXDLIN( 486)			Float a12 = ae->__get((int)4);
HXDLIN( 486)			Float a13 = ae->__get((int)8);
HXDLIN( 486)			Float a14 = ae->__get((int)12);
HXDLIN( 486)			Float a21 = ae->__get((int)1);
HXDLIN( 486)			Float a22 = ae->__get((int)5);
HXDLIN( 486)			Float a23 = ae->__get((int)9);
HXDLIN( 486)			Float a24 = ae->__get((int)13);
HXDLIN( 486)			Float a31 = ae->__get((int)2);
HXDLIN( 486)			Float a32 = ae->__get((int)6);
HXDLIN( 486)			Float a33 = ae->__get((int)10);
HXDLIN( 486)			Float a34 = ae->__get((int)14);
HXDLIN( 486)			Float a41 = ae->__get((int)3);
HXDLIN( 486)			Float a42 = ae->__get((int)7);
HXDLIN( 486)			Float a43 = ae->__get((int)11);
HXDLIN( 486)			Float a44 = ae->__get((int)15);
HXDLIN( 486)			Float b11 = be->__get((int)0);
HXDLIN( 486)			Float b12 = be->__get((int)4);
HXDLIN( 486)			Float b13 = be->__get((int)8);
HXDLIN( 486)			Float b14 = be->__get((int)12);
HXDLIN( 486)			Float b21 = be->__get((int)1);
HXDLIN( 486)			Float b22 = be->__get((int)5);
HXDLIN( 486)			Float b23 = be->__get((int)9);
HXDLIN( 486)			Float b24 = be->__get((int)13);
HXDLIN( 486)			Float b31 = be->__get((int)2);
HXDLIN( 486)			Float b32 = be->__get((int)6);
HXDLIN( 486)			Float b33 = be->__get((int)10);
HXDLIN( 486)			Float b34 = be->__get((int)14);
HXDLIN( 486)			Float b41 = be->__get((int)3);
HXDLIN( 486)			Float b42 = be->__get((int)7);
HXDLIN( 486)			Float b43 = be->__get((int)11);
HXDLIN( 486)			Float b44 = be->__get((int)15);
HXDLIN( 486)			te1[(int)0] = ((((a11 * b11) + (a12 * b21)) + (a13 * b31)) + (a14 * b41));
HXDLIN( 486)			te1[(int)4] = ((((a11 * b12) + (a12 * b22)) + (a13 * b32)) + (a14 * b42));
HXDLIN( 486)			te1[(int)8] = ((((a11 * b13) + (a12 * b23)) + (a13 * b33)) + (a14 * b43));
HXDLIN( 486)			te1[(int)12] = ((((a11 * b14) + (a12 * b24)) + (a13 * b34)) + (a14 * b44));
HXDLIN( 486)			te1[(int)1] = ((((a21 * b11) + (a22 * b21)) + (a23 * b31)) + (a24 * b41));
HXDLIN( 486)			te1[(int)5] = ((((a21 * b12) + (a22 * b22)) + (a23 * b32)) + (a24 * b42));
HXDLIN( 486)			te1[(int)9] = ((((a21 * b13) + (a22 * b23)) + (a23 * b33)) + (a24 * b43));
HXDLIN( 486)			te1[(int)13] = ((((a21 * b14) + (a22 * b24)) + (a23 * b34)) + (a24 * b44));
HXDLIN( 486)			te1[(int)2] = ((((a31 * b11) + (a32 * b21)) + (a33 * b31)) + (a34 * b41));
HXDLIN( 486)			te1[(int)6] = ((((a31 * b12) + (a32 * b22)) + (a33 * b32)) + (a34 * b42));
HXDLIN( 486)			te1[(int)10] = ((((a31 * b13) + (a32 * b23)) + (a33 * b33)) + (a34 * b43));
HXDLIN( 486)			te1[(int)14] = ((((a31 * b14) + (a32 * b24)) + (a33 * b34)) + (a34 * b44));
HXDLIN( 486)			te1[(int)3] = ((((a41 * b11) + (a42 * b21)) + (a43 * b31)) + (a44 * b41));
HXDLIN( 486)			te1[(int)7] = ((((a41 * b12) + (a42 * b22)) + (a43 * b32)) + (a44 * b42));
HXDLIN( 486)			te1[(int)11] = ((((a41 * b13) + (a42 * b23)) + (a43 * b33)) + (a44 * b43));
HXDLIN( 486)			te1[(int)15] = ((((a41 * b14) + (a42 * b24)) + (a43 * b34)) + (a44 * b44));
            		}
HXLINE( 488)		_r[(int)0] = te->__get((int)0);
HXDLIN( 488)		_r[(int)1] = te->__get((int)1);
HXDLIN( 488)		_r[(int)2] = te->__get((int)2);
HXDLIN( 488)		_r[(int)3] = te->__get((int)3);
HXLINE( 489)		_r[(int)4] = te->__get((int)4);
HXDLIN( 489)		_r[(int)5] = te->__get((int)5);
HXDLIN( 489)		_r[(int)6] = te->__get((int)6);
HXDLIN( 489)		_r[(int)7] = te->__get((int)7);
HXLINE( 490)		_r[(int)8] = te->__get((int)8);
HXDLIN( 490)		_r[(int)9] = te->__get((int)9);
HXDLIN( 490)		_r[(int)10] = te->__get((int)10);
HXDLIN( 490)		_r[(int)11] = te->__get((int)11);
HXLINE( 491)		_r[(int)12] = te->__get((int)12);
HXDLIN( 491)		_r[(int)13] = te->__get((int)13);
HXDLIN( 491)		_r[(int)14] = te->__get((int)14);
HXDLIN( 491)		_r[(int)15] = te->__get((int)15);
HXLINE( 493)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix_obj,multiplyToArray,return )

 ::phoenix::Matrix Matrix_obj::multiplyScalar(Float _s){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_498_multiplyScalar)
HXLINE( 500)		::Array< Float > te = this->elements;
HXLINE( 502)		::Array< Float > te1 = te;
HXDLIN( 502)		int _hx_tmp = (int)0;
HXDLIN( 502)		te1[_hx_tmp] = (te1->__get(_hx_tmp) * _s);
HXDLIN( 502)		::Array< Float > te2 = te;
HXDLIN( 502)		int _hx_tmp1 = (int)4;
HXDLIN( 502)		te2[_hx_tmp1] = (te2->__get(_hx_tmp1) * _s);
HXDLIN( 502)		::Array< Float > te3 = te;
HXDLIN( 502)		int _hx_tmp2 = (int)8;
HXDLIN( 502)		te3[_hx_tmp2] = (te3->__get(_hx_tmp2) * _s);
HXDLIN( 502)		::Array< Float > te4 = te;
HXDLIN( 502)		int _hx_tmp3 = (int)12;
HXDLIN( 502)		te4[_hx_tmp3] = (te4->__get(_hx_tmp3) * _s);
HXLINE( 503)		::Array< Float > te5 = te;
HXDLIN( 503)		int _hx_tmp4 = (int)1;
HXDLIN( 503)		te5[_hx_tmp4] = (te5->__get(_hx_tmp4) * _s);
HXDLIN( 503)		::Array< Float > te6 = te;
HXDLIN( 503)		int _hx_tmp5 = (int)5;
HXDLIN( 503)		te6[_hx_tmp5] = (te6->__get(_hx_tmp5) * _s);
HXDLIN( 503)		::Array< Float > te7 = te;
HXDLIN( 503)		int _hx_tmp6 = (int)9;
HXDLIN( 503)		te7[_hx_tmp6] = (te7->__get(_hx_tmp6) * _s);
HXDLIN( 503)		::Array< Float > te8 = te;
HXDLIN( 503)		int _hx_tmp7 = (int)13;
HXDLIN( 503)		te8[_hx_tmp7] = (te8->__get(_hx_tmp7) * _s);
HXLINE( 504)		::Array< Float > te9 = te;
HXDLIN( 504)		int _hx_tmp8 = (int)2;
HXDLIN( 504)		te9[_hx_tmp8] = (te9->__get(_hx_tmp8) * _s);
HXDLIN( 504)		::Array< Float > te10 = te;
HXDLIN( 504)		int _hx_tmp9 = (int)6;
HXDLIN( 504)		te10[_hx_tmp9] = (te10->__get(_hx_tmp9) * _s);
HXDLIN( 504)		::Array< Float > te11 = te;
HXDLIN( 504)		int _hx_tmp10 = (int)10;
HXDLIN( 504)		te11[_hx_tmp10] = (te11->__get(_hx_tmp10) * _s);
HXDLIN( 504)		::Array< Float > te12 = te;
HXDLIN( 504)		int _hx_tmp11 = (int)14;
HXDLIN( 504)		te12[_hx_tmp11] = (te12->__get(_hx_tmp11) * _s);
HXLINE( 505)		::Array< Float > te13 = te;
HXDLIN( 505)		int _hx_tmp12 = (int)3;
HXDLIN( 505)		te13[_hx_tmp12] = (te13->__get(_hx_tmp12) * _s);
HXDLIN( 505)		::Array< Float > te14 = te;
HXDLIN( 505)		int _hx_tmp13 = (int)7;
HXDLIN( 505)		te14[_hx_tmp13] = (te14->__get(_hx_tmp13) * _s);
HXDLIN( 505)		::Array< Float > te15 = te;
HXDLIN( 505)		int _hx_tmp14 = (int)11;
HXDLIN( 505)		te15[_hx_tmp14] = (te15->__get(_hx_tmp14) * _s);
HXDLIN( 505)		::Array< Float > te16 = te;
HXDLIN( 505)		int _hx_tmp15 = (int)15;
HXDLIN( 505)		te16[_hx_tmp15] = (te16->__get(_hx_tmp15) * _s);
HXLINE( 507)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,multiplyScalar,return )

::Array< Float > Matrix_obj::multiplyVector3Array(::Array< Float > _a){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_512_multiplyVector3Array)
HXLINE( 514)		 ::phoenix::Vector v1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 515)		int i = (int)0;
HXLINE( 516)		int il = _a->length;
HXLINE( 518)		while((i < il)){
HXLINE( 520)			{
HXLINE( 520)				Float _x = _a->__get(i);
HXDLIN( 520)				v1->x = _x;
HXDLIN( 520)				if (!(v1->_construct)) {
HXLINE( 520)					bool _hx_tmp;
HXDLIN( 520)					if (hx::IsNotNull( v1->listen_x )) {
HXLINE( 520)						_hx_tmp = !(v1->ignore_listeners);
            					}
            					else {
HXLINE( 520)						_hx_tmp = false;
            					}
HXDLIN( 520)					if (_hx_tmp) {
HXLINE( 520)						v1->listen_x(_x);
            					}
            				}
            			}
HXLINE( 521)			{
HXLINE( 521)				Float _y = _a->__get((i + (int)1));
HXDLIN( 521)				v1->y = _y;
HXDLIN( 521)				if (!(v1->_construct)) {
HXLINE( 521)					bool _hx_tmp1;
HXDLIN( 521)					if (hx::IsNotNull( v1->listen_y )) {
HXLINE( 521)						_hx_tmp1 = !(v1->ignore_listeners);
            					}
            					else {
HXLINE( 521)						_hx_tmp1 = false;
            					}
HXDLIN( 521)					if (_hx_tmp1) {
HXLINE( 521)						v1->listen_y(_y);
            					}
            				}
            			}
HXLINE( 522)			{
HXLINE( 522)				Float _z = _a->__get((i + (int)2));
HXDLIN( 522)				v1->z = _z;
HXDLIN( 522)				if (!(v1->_construct)) {
HXLINE( 522)					bool _hx_tmp2;
HXDLIN( 522)					if (hx::IsNotNull( v1->listen_z )) {
HXLINE( 522)						_hx_tmp2 = !(v1->ignore_listeners);
            					}
            					else {
HXLINE( 522)						_hx_tmp2 = false;
            					}
HXDLIN( 522)					if (_hx_tmp2) {
HXLINE( 522)						v1->listen_z(_z);
            					}
            				}
            			}
HXLINE( 524)			{
HXLINE( 524)				::Array< Float > e = this->elements;
HXDLIN( 524)				Float x = v1->x;
HXDLIN( 524)				Float y = v1->y;
HXDLIN( 524)				Float z = v1->z;
HXDLIN( 524)				Float d = ((Float)(int)1 / (Float)((((e->__get((int)3) * x) + (e->__get((int)7) * y)) + (e->__get((int)11) * z)) + e->__get((int)15)));
HXDLIN( 524)				{
HXLINE( 524)					Float _x1 = (((((e->__get((int)0) * x) + (e->__get((int)4) * y)) + (e->__get((int)8) * z)) + e->__get((int)12)) * d);
HXDLIN( 524)					Float _y1 = (((((e->__get((int)1) * x) + (e->__get((int)5) * y)) + (e->__get((int)9) * z)) + e->__get((int)13)) * d);
HXDLIN( 524)					Float _z1 = (((((e->__get((int)2) * x) + (e->__get((int)6) * y)) + (e->__get((int)10) * z)) + e->__get((int)14)) * d);
HXDLIN( 524)					bool prev = v1->ignore_listeners;
HXDLIN( 524)					v1->ignore_listeners = true;
HXDLIN( 524)					{
HXLINE( 524)						v1->x = _x1;
HXDLIN( 524)						if (!(v1->_construct)) {
HXLINE( 524)							bool _hx_tmp3;
HXDLIN( 524)							if (hx::IsNotNull( v1->listen_x )) {
HXLINE( 524)								_hx_tmp3 = !(v1->ignore_listeners);
            							}
            							else {
HXLINE( 524)								_hx_tmp3 = false;
            							}
HXDLIN( 524)							if (_hx_tmp3) {
HXLINE( 524)								v1->listen_x(_x1);
            							}
            						}
            					}
HXDLIN( 524)					{
HXLINE( 524)						v1->y = _y1;
HXDLIN( 524)						if (!(v1->_construct)) {
HXLINE( 524)							bool _hx_tmp4;
HXDLIN( 524)							if (hx::IsNotNull( v1->listen_y )) {
HXLINE( 524)								_hx_tmp4 = !(v1->ignore_listeners);
            							}
            							else {
HXLINE( 524)								_hx_tmp4 = false;
            							}
HXDLIN( 524)							if (_hx_tmp4) {
HXLINE( 524)								v1->listen_y(_y1);
            							}
            						}
            					}
HXDLIN( 524)					{
HXLINE( 524)						v1->z = _z1;
HXDLIN( 524)						if (!(v1->_construct)) {
HXLINE( 524)							bool _hx_tmp5;
HXDLIN( 524)							if (hx::IsNotNull( v1->listen_z )) {
HXLINE( 524)								_hx_tmp5 = !(v1->ignore_listeners);
            							}
            							else {
HXLINE( 524)								_hx_tmp5 = false;
            							}
HXDLIN( 524)							if (_hx_tmp5) {
HXLINE( 524)								v1->listen_z(_z1);
            							}
            						}
            					}
HXDLIN( 524)					v1->ignore_listeners = prev;
HXDLIN( 524)					bool _hx_tmp6;
HXDLIN( 524)					if (hx::IsNotNull( v1->listen_x )) {
HXLINE( 524)						_hx_tmp6 = !(v1->ignore_listeners);
            					}
            					else {
HXLINE( 524)						_hx_tmp6 = false;
            					}
HXDLIN( 524)					if (_hx_tmp6) {
HXLINE( 524)						v1->listen_x(v1->x);
            					}
HXDLIN( 524)					bool _hx_tmp7;
HXDLIN( 524)					if (hx::IsNotNull( v1->listen_y )) {
HXLINE( 524)						_hx_tmp7 = !(v1->ignore_listeners);
            					}
            					else {
HXLINE( 524)						_hx_tmp7 = false;
            					}
HXDLIN( 524)					if (_hx_tmp7) {
HXLINE( 524)						v1->listen_y(v1->y);
            					}
HXDLIN( 524)					bool _hx_tmp8;
HXDLIN( 524)					if (hx::IsNotNull( v1->listen_z )) {
HXLINE( 524)						_hx_tmp8 = !(v1->ignore_listeners);
            					}
            					else {
HXLINE( 524)						_hx_tmp8 = false;
            					}
HXDLIN( 524)					if (_hx_tmp8) {
HXLINE( 524)						v1->listen_z(v1->z);
            					}
            				}
            			}
HXLINE( 526)			_a[i] = v1->x;
HXLINE( 527)			_a[(i + (int)1)] = v1->y;
HXLINE( 528)			_a[(i + (int)2)] = v1->z;
HXLINE( 530)			i = (i + (int)3);
            		}
HXLINE( 534)		return _a;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,multiplyVector3Array,return )

Float Matrix_obj::determinant(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_538_determinant)
HXLINE( 540)		::Array< Float > te = this->elements;
HXLINE( 542)		Float n11 = te->__get((int)0);
HXDLIN( 542)		Float n12 = te->__get((int)4);
HXDLIN( 542)		Float n13 = te->__get((int)8);
HXDLIN( 542)		Float n14 = te->__get((int)12);
HXLINE( 543)		Float n21 = te->__get((int)1);
HXDLIN( 543)		Float n22 = te->__get((int)5);
HXDLIN( 543)		Float n23 = te->__get((int)9);
HXDLIN( 543)		Float n24 = te->__get((int)13);
HXLINE( 544)		Float n31 = te->__get((int)2);
HXDLIN( 544)		Float n32 = te->__get((int)6);
HXDLIN( 544)		Float n33 = te->__get((int)10);
HXDLIN( 544)		Float n34 = te->__get((int)14);
HXLINE( 545)		Float n41 = te->__get((int)3);
HXDLIN( 545)		Float n42 = te->__get((int)7);
HXDLIN( 545)		Float n43 = te->__get((int)11);
HXDLIN( 545)		Float n44 = te->__get((int)15);
HXLINE( 547)		return ((((n41 * (((((((n14 * n23) * n32) - ((n13 * n24) * n32)) - ((n14 * n22) * n33)) + ((n12 * n24) * n33)) + ((n13 * n22) * n34)) - ((n12 * n23) * n34))) + (n42 * (((((((n11 * n23) * n34) - ((n11 * n24) * n33)) + ((n14 * n21) * n33)) - ((n13 * n21) * n34)) + ((n13 * n24) * n31)) - ((n14 * n23) * n31)))) + (n43 * (((((((n11 * n24) * n32) - ((n11 * n22) * n34)) - ((n14 * n21) * n32)) + ((n12 * n21) * n34)) + ((n14 * n22) * n31)) - ((n12 * n24) * n31)))) + (n44 * (((((((-(n13) * n22) * n31) - ((n11 * n23) * n32)) + ((n11 * n22) * n33)) + ((n13 * n21) * n32)) - ((n12 * n21) * n33)) + ((n12 * n23) * n31))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,determinant,return )

 ::phoenix::Matrix Matrix_obj::transpose(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_583_transpose)
HXLINE( 585)		::Array< Float > te = this->elements;
HXLINE( 586)		Float tmp = te->__get((int)1);
HXLINE( 588)		te[(int)1] = te->__get((int)4);
HXDLIN( 588)		te[(int)4] = tmp;
HXLINE( 589)		tmp = te->__get((int)2);
HXDLIN( 589)		te[(int)2] = te->__get((int)8);
HXDLIN( 589)		te[(int)8] = tmp;
HXLINE( 590)		tmp = te->__get((int)6);
HXDLIN( 590)		te[(int)6] = te->__get((int)9);
HXDLIN( 590)		te[(int)9] = tmp;
HXLINE( 592)		tmp = te->__get((int)3);
HXDLIN( 592)		te[(int)3] = te->__get((int)12);
HXDLIN( 592)		te[(int)12] = tmp;
HXLINE( 593)		tmp = te->__get((int)7);
HXDLIN( 593)		te[(int)7] = te->__get((int)13);
HXDLIN( 593)		te[(int)13] = tmp;
HXLINE( 594)		tmp = te->__get((int)11);
HXDLIN( 594)		te[(int)11] = te->__get((int)14);
HXDLIN( 594)		te[(int)14] = tmp;
HXLINE( 596)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,transpose,return )

::Array< Float > Matrix_obj::flattenToArray(::Array< Float > _flat){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_600_flattenToArray)
HXLINE( 602)		if (hx::IsNull( _flat )) {
HXLINE( 603)			_flat = ::Array_obj< Float >::__new(0);
HXLINE( 604)			{
HXLINE( 604)				int _g = (int)0;
HXDLIN( 604)				while((_g < (int)16)){
HXLINE( 604)					_g = (_g + (int)1);
HXDLIN( 604)					int i = (_g - (int)1);
HXDLIN( 604)					_flat->push(((Float)0.0));
            				}
            			}
            		}
HXLINE( 607)		::Array< Float > te = this->elements;
HXLINE( 609)		_flat[(int)0] = te->__get((int)0);
HXDLIN( 609)		_flat[(int)1] = te->__get((int)1);
HXDLIN( 609)		_flat[(int)2] = te->__get((int)2);
HXDLIN( 609)		_flat[(int)3] = te->__get((int)3);
HXLINE( 610)		_flat[(int)4] = te->__get((int)4);
HXDLIN( 610)		_flat[(int)5] = te->__get((int)5);
HXDLIN( 610)		_flat[(int)6] = te->__get((int)6);
HXDLIN( 610)		_flat[(int)7] = te->__get((int)7);
HXLINE( 611)		_flat[(int)8] = te->__get((int)8);
HXDLIN( 611)		_flat[(int)9] = te->__get((int)9);
HXDLIN( 611)		_flat[(int)10] = te->__get((int)10);
HXDLIN( 611)		_flat[(int)11] = te->__get((int)11);
HXLINE( 612)		_flat[(int)12] = te->__get((int)12);
HXDLIN( 612)		_flat[(int)13] = te->__get((int)13);
HXDLIN( 612)		_flat[(int)14] = te->__get((int)14);
HXDLIN( 612)		_flat[(int)15] = te->__get((int)15);
HXLINE( 614)		return _flat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,flattenToArray,return )

::Array< Float > Matrix_obj::flattenToArrayOffset(::Array< Float > _flat,int _offset){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_619_flattenToArrayOffset)
HXLINE( 621)		::Array< Float > te = this->elements;
HXLINE( 623)		_flat[_offset] = te->__get((int)0);
HXLINE( 624)		_flat[(_offset + (int)1)] = te->__get((int)1);
HXLINE( 625)		_flat[(_offset + (int)2)] = te->__get((int)2);
HXLINE( 626)		_flat[(_offset + (int)3)] = te->__get((int)3);
HXLINE( 628)		_flat[(_offset + (int)4)] = te->__get((int)4);
HXLINE( 629)		_flat[(_offset + (int)5)] = te->__get((int)5);
HXLINE( 630)		_flat[(_offset + (int)6)] = te->__get((int)6);
HXLINE( 631)		_flat[(_offset + (int)7)] = te->__get((int)7);
HXLINE( 633)		_flat[(_offset + (int)8)] = te->__get((int)8);
HXLINE( 634)		_flat[(_offset + (int)9)] = te->__get((int)9);
HXLINE( 635)		_flat[(_offset + (int)10)] = te->__get((int)10);
HXLINE( 636)		_flat[(_offset + (int)11)] = te->__get((int)11);
HXLINE( 638)		_flat[(_offset + (int)12)] = te->__get((int)12);
HXLINE( 639)		_flat[(_offset + (int)13)] = te->__get((int)13);
HXLINE( 640)		_flat[(_offset + (int)14)] = te->__get((int)14);
HXLINE( 641)		_flat[(_offset + (int)15)] = te->__get((int)15);
HXLINE( 643)		return _flat;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,flattenToArrayOffset,return )

 ::phoenix::Matrix Matrix_obj::setPosition( ::phoenix::Vector _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_648_setPosition)
HXLINE( 650)		::Array< Float > te = this->elements;
HXLINE( 652)		te[(int)12] = _v->x;
HXLINE( 653)		te[(int)13] = _v->y;
HXLINE( 654)		te[(int)14] = _v->z;
HXLINE( 656)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,setPosition,return )

 ::phoenix::Matrix Matrix_obj::inverse(){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_661_inverse)
HXDLIN( 661)		::Array< Float > te = this->elements;
HXDLIN( 661)		 ::phoenix::Matrix _this =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,te->__get((int)0),te->__get((int)4),te->__get((int)8),te->__get((int)12),te->__get((int)1),te->__get((int)5),te->__get((int)9),te->__get((int)13),te->__get((int)2),te->__get((int)6),te->__get((int)10),te->__get((int)14),te->__get((int)3),te->__get((int)7),te->__get((int)11),te->__get((int)15));
HXDLIN( 661)		::Array< Float > te1 = _this->elements;
HXDLIN( 661)		::Array< Float > me = this->elements;
HXDLIN( 661)		Float n11 = me->__get((int)0);
HXDLIN( 661)		Float n12 = me->__get((int)4);
HXDLIN( 661)		Float n13 = me->__get((int)8);
HXDLIN( 661)		Float n14 = me->__get((int)12);
HXDLIN( 661)		Float n21 = me->__get((int)1);
HXDLIN( 661)		Float n22 = me->__get((int)5);
HXDLIN( 661)		Float n23 = me->__get((int)9);
HXDLIN( 661)		Float n24 = me->__get((int)13);
HXDLIN( 661)		Float n31 = me->__get((int)2);
HXDLIN( 661)		Float n32 = me->__get((int)6);
HXDLIN( 661)		Float n33 = me->__get((int)10);
HXDLIN( 661)		Float n34 = me->__get((int)14);
HXDLIN( 661)		Float n41 = me->__get((int)3);
HXDLIN( 661)		Float n42 = me->__get((int)7);
HXDLIN( 661)		Float n43 = me->__get((int)11);
HXDLIN( 661)		Float n44 = me->__get((int)15);
HXDLIN( 661)		te1[(int)0] = (((((((n23 * n34) * n42) - ((n24 * n33) * n42)) + ((n24 * n32) * n43)) - ((n22 * n34) * n43)) - ((n23 * n32) * n44)) + ((n22 * n33) * n44));
HXDLIN( 661)		te1[(int)4] = (((((((n14 * n33) * n42) - ((n13 * n34) * n42)) - ((n14 * n32) * n43)) + ((n12 * n34) * n43)) + ((n13 * n32) * n44)) - ((n12 * n33) * n44));
HXDLIN( 661)		te1[(int)8] = (((((((n13 * n24) * n42) - ((n14 * n23) * n42)) + ((n14 * n22) * n43)) - ((n12 * n24) * n43)) - ((n13 * n22) * n44)) + ((n12 * n23) * n44));
HXDLIN( 661)		te1[(int)12] = (((((((n14 * n23) * n32) - ((n13 * n24) * n32)) - ((n14 * n22) * n33)) + ((n12 * n24) * n33)) + ((n13 * n22) * n34)) - ((n12 * n23) * n34));
HXDLIN( 661)		te1[(int)1] = (((((((n24 * n33) * n41) - ((n23 * n34) * n41)) - ((n24 * n31) * n43)) + ((n21 * n34) * n43)) + ((n23 * n31) * n44)) - ((n21 * n33) * n44));
HXDLIN( 661)		te1[(int)5] = (((((((n13 * n34) * n41) - ((n14 * n33) * n41)) + ((n14 * n31) * n43)) - ((n11 * n34) * n43)) - ((n13 * n31) * n44)) + ((n11 * n33) * n44));
HXDLIN( 661)		te1[(int)9] = (((((((n14 * n23) * n41) - ((n13 * n24) * n41)) - ((n14 * n21) * n43)) + ((n11 * n24) * n43)) + ((n13 * n21) * n44)) - ((n11 * n23) * n44));
HXDLIN( 661)		te1[(int)13] = (((((((n13 * n24) * n31) - ((n14 * n23) * n31)) + ((n14 * n21) * n33)) - ((n11 * n24) * n33)) - ((n13 * n21) * n34)) + ((n11 * n23) * n34));
HXDLIN( 661)		te1[(int)2] = (((((((n22 * n34) * n41) - ((n24 * n32) * n41)) + ((n24 * n31) * n42)) - ((n21 * n34) * n42)) - ((n22 * n31) * n44)) + ((n21 * n32) * n44));
HXDLIN( 661)		te1[(int)6] = (((((((n14 * n32) * n41) - ((n12 * n34) * n41)) - ((n14 * n31) * n42)) + ((n11 * n34) * n42)) + ((n12 * n31) * n44)) - ((n11 * n32) * n44));
HXDLIN( 661)		te1[(int)10] = (((((((n12 * n24) * n41) - ((n14 * n22) * n41)) + ((n14 * n21) * n42)) - ((n11 * n24) * n42)) - ((n12 * n21) * n44)) + ((n11 * n22) * n44));
HXDLIN( 661)		te1[(int)14] = (((((((n14 * n22) * n31) - ((n12 * n24) * n31)) - ((n14 * n21) * n32)) + ((n11 * n24) * n32)) + ((n12 * n21) * n34)) - ((n11 * n22) * n34));
HXDLIN( 661)		te1[(int)3] = (((((((n23 * n32) * n41) - ((n22 * n33) * n41)) - ((n23 * n31) * n42)) + ((n21 * n33) * n42)) + ((n22 * n31) * n43)) - ((n21 * n32) * n43));
HXDLIN( 661)		te1[(int)7] = (((((((n12 * n33) * n41) - ((n13 * n32) * n41)) + ((n13 * n31) * n42)) - ((n11 * n33) * n42)) - ((n12 * n31) * n43)) + ((n11 * n32) * n43));
HXDLIN( 661)		te1[(int)11] = (((((((n13 * n22) * n41) - ((n12 * n23) * n41)) - ((n13 * n21) * n42)) + ((n11 * n23) * n42)) + ((n12 * n21) * n43)) - ((n11 * n22) * n43));
HXDLIN( 661)		te1[(int)15] = (((((((n12 * n23) * n31) - ((n13 * n22) * n31)) + ((n13 * n21) * n32)) - ((n11 * n23) * n32)) - ((n12 * n21) * n33)) + ((n11 * n22) * n33));
HXDLIN( 661)		Float det = ((((me->__get((int)0) * te1->__get((int)0)) + (me->__get((int)1) * te1->__get((int)4))) + (me->__get((int)2) * te1->__get((int)8))) + (me->__get((int)3) * te1->__get((int)12)));
HXDLIN( 661)		if ((det == (int)0)) {
HXDLIN( 661)			::haxe::Log_obj::trace(HX_("Matrix.getInverse: cant invert matrix, determinant is 0",f5,2d,16,59),hx::SourceInfo(HX_("Matrix.hx",fd,8a,aa,4f),697,HX_("phoenix.Matrix",60,61,a9,39),HX_("getInverse",ba,d1,52,8d)));
HXDLIN( 661)			{
HXDLIN( 661)				::Array< Float > e = _this->elements;
HXDLIN( 661)				e[(int)0] = (int)1;
HXDLIN( 661)				e[(int)4] = (int)0;
HXDLIN( 661)				e[(int)8] = (int)0;
HXDLIN( 661)				e[(int)12] = (int)0;
HXDLIN( 661)				e[(int)1] = (int)0;
HXDLIN( 661)				e[(int)5] = (int)1;
HXDLIN( 661)				e[(int)9] = (int)0;
HXDLIN( 661)				e[(int)13] = (int)0;
HXDLIN( 661)				e[(int)2] = (int)0;
HXDLIN( 661)				e[(int)6] = (int)0;
HXDLIN( 661)				e[(int)10] = (int)1;
HXDLIN( 661)				e[(int)14] = (int)0;
HXDLIN( 661)				e[(int)3] = (int)0;
HXDLIN( 661)				e[(int)7] = (int)0;
HXDLIN( 661)				e[(int)11] = (int)0;
HXDLIN( 661)				e[(int)15] = (int)1;
            			}
HXDLIN( 661)			return _this;
            		}
            		else {
HXDLIN( 661)			{
HXDLIN( 661)				Float _s = ((Float)(int)1 / (Float)det);
HXDLIN( 661)				::Array< Float > te2 = _this->elements;
HXDLIN( 661)				::Array< Float > te3 = te2;
HXDLIN( 661)				int _hx_tmp = (int)0;
HXDLIN( 661)				te3[_hx_tmp] = (te3->__get(_hx_tmp) * _s);
HXDLIN( 661)				::Array< Float > te4 = te2;
HXDLIN( 661)				int _hx_tmp1 = (int)4;
HXDLIN( 661)				te4[_hx_tmp1] = (te4->__get(_hx_tmp1) * _s);
HXDLIN( 661)				::Array< Float > te5 = te2;
HXDLIN( 661)				int _hx_tmp2 = (int)8;
HXDLIN( 661)				te5[_hx_tmp2] = (te5->__get(_hx_tmp2) * _s);
HXDLIN( 661)				::Array< Float > te6 = te2;
HXDLIN( 661)				int _hx_tmp3 = (int)12;
HXDLIN( 661)				te6[_hx_tmp3] = (te6->__get(_hx_tmp3) * _s);
HXDLIN( 661)				::Array< Float > te7 = te2;
HXDLIN( 661)				int _hx_tmp4 = (int)1;
HXDLIN( 661)				te7[_hx_tmp4] = (te7->__get(_hx_tmp4) * _s);
HXDLIN( 661)				::Array< Float > te8 = te2;
HXDLIN( 661)				int _hx_tmp5 = (int)5;
HXDLIN( 661)				te8[_hx_tmp5] = (te8->__get(_hx_tmp5) * _s);
HXDLIN( 661)				::Array< Float > te9 = te2;
HXDLIN( 661)				int _hx_tmp6 = (int)9;
HXDLIN( 661)				te9[_hx_tmp6] = (te9->__get(_hx_tmp6) * _s);
HXDLIN( 661)				::Array< Float > te10 = te2;
HXDLIN( 661)				int _hx_tmp7 = (int)13;
HXDLIN( 661)				te10[_hx_tmp7] = (te10->__get(_hx_tmp7) * _s);
HXDLIN( 661)				::Array< Float > te11 = te2;
HXDLIN( 661)				int _hx_tmp8 = (int)2;
HXDLIN( 661)				te11[_hx_tmp8] = (te11->__get(_hx_tmp8) * _s);
HXDLIN( 661)				::Array< Float > te12 = te2;
HXDLIN( 661)				int _hx_tmp9 = (int)6;
HXDLIN( 661)				te12[_hx_tmp9] = (te12->__get(_hx_tmp9) * _s);
HXDLIN( 661)				::Array< Float > te13 = te2;
HXDLIN( 661)				int _hx_tmp10 = (int)10;
HXDLIN( 661)				te13[_hx_tmp10] = (te13->__get(_hx_tmp10) * _s);
HXDLIN( 661)				::Array< Float > te14 = te2;
HXDLIN( 661)				int _hx_tmp11 = (int)14;
HXDLIN( 661)				te14[_hx_tmp11] = (te14->__get(_hx_tmp11) * _s);
HXDLIN( 661)				::Array< Float > te15 = te2;
HXDLIN( 661)				int _hx_tmp12 = (int)3;
HXDLIN( 661)				te15[_hx_tmp12] = (te15->__get(_hx_tmp12) * _s);
HXDLIN( 661)				::Array< Float > te16 = te2;
HXDLIN( 661)				int _hx_tmp13 = (int)7;
HXDLIN( 661)				te16[_hx_tmp13] = (te16->__get(_hx_tmp13) * _s);
HXDLIN( 661)				::Array< Float > te17 = te2;
HXDLIN( 661)				int _hx_tmp14 = (int)11;
HXDLIN( 661)				te17[_hx_tmp14] = (te17->__get(_hx_tmp14) * _s);
HXDLIN( 661)				::Array< Float > te18 = te2;
HXDLIN( 661)				int _hx_tmp15 = (int)15;
HXDLIN( 661)				te18[_hx_tmp15] = (te18->__get(_hx_tmp15) * _s);
            			}
HXDLIN( 661)			return _this;
            		}
HXDLIN( 661)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,inverse,return )

 ::phoenix::Matrix Matrix_obj::getInverse( ::phoenix::Matrix _m){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_664_getInverse)
HXLINE( 668)		::Array< Float > te = this->elements;
HXLINE( 669)		::Array< Float > me = _m->elements;
HXLINE( 671)		Float n11 = me->__get((int)0);
HXDLIN( 671)		Float n12 = me->__get((int)4);
HXDLIN( 671)		Float n13 = me->__get((int)8);
HXDLIN( 671)		Float n14 = me->__get((int)12);
HXLINE( 672)		Float n21 = me->__get((int)1);
HXDLIN( 672)		Float n22 = me->__get((int)5);
HXDLIN( 672)		Float n23 = me->__get((int)9);
HXDLIN( 672)		Float n24 = me->__get((int)13);
HXLINE( 673)		Float n31 = me->__get((int)2);
HXDLIN( 673)		Float n32 = me->__get((int)6);
HXDLIN( 673)		Float n33 = me->__get((int)10);
HXDLIN( 673)		Float n34 = me->__get((int)14);
HXLINE( 674)		Float n41 = me->__get((int)3);
HXDLIN( 674)		Float n42 = me->__get((int)7);
HXDLIN( 674)		Float n43 = me->__get((int)11);
HXDLIN( 674)		Float n44 = me->__get((int)15);
HXLINE( 676)		te[(int)0] = (((((((n23 * n34) * n42) - ((n24 * n33) * n42)) + ((n24 * n32) * n43)) - ((n22 * n34) * n43)) - ((n23 * n32) * n44)) + ((n22 * n33) * n44));
HXLINE( 677)		te[(int)4] = (((((((n14 * n33) * n42) - ((n13 * n34) * n42)) - ((n14 * n32) * n43)) + ((n12 * n34) * n43)) + ((n13 * n32) * n44)) - ((n12 * n33) * n44));
HXLINE( 678)		te[(int)8] = (((((((n13 * n24) * n42) - ((n14 * n23) * n42)) + ((n14 * n22) * n43)) - ((n12 * n24) * n43)) - ((n13 * n22) * n44)) + ((n12 * n23) * n44));
HXLINE( 679)		te[(int)12] = (((((((n14 * n23) * n32) - ((n13 * n24) * n32)) - ((n14 * n22) * n33)) + ((n12 * n24) * n33)) + ((n13 * n22) * n34)) - ((n12 * n23) * n34));
HXLINE( 680)		te[(int)1] = (((((((n24 * n33) * n41) - ((n23 * n34) * n41)) - ((n24 * n31) * n43)) + ((n21 * n34) * n43)) + ((n23 * n31) * n44)) - ((n21 * n33) * n44));
HXLINE( 681)		te[(int)5] = (((((((n13 * n34) * n41) - ((n14 * n33) * n41)) + ((n14 * n31) * n43)) - ((n11 * n34) * n43)) - ((n13 * n31) * n44)) + ((n11 * n33) * n44));
HXLINE( 682)		te[(int)9] = (((((((n14 * n23) * n41) - ((n13 * n24) * n41)) - ((n14 * n21) * n43)) + ((n11 * n24) * n43)) + ((n13 * n21) * n44)) - ((n11 * n23) * n44));
HXLINE( 683)		te[(int)13] = (((((((n13 * n24) * n31) - ((n14 * n23) * n31)) + ((n14 * n21) * n33)) - ((n11 * n24) * n33)) - ((n13 * n21) * n34)) + ((n11 * n23) * n34));
HXLINE( 684)		te[(int)2] = (((((((n22 * n34) * n41) - ((n24 * n32) * n41)) + ((n24 * n31) * n42)) - ((n21 * n34) * n42)) - ((n22 * n31) * n44)) + ((n21 * n32) * n44));
HXLINE( 685)		te[(int)6] = (((((((n14 * n32) * n41) - ((n12 * n34) * n41)) - ((n14 * n31) * n42)) + ((n11 * n34) * n42)) + ((n12 * n31) * n44)) - ((n11 * n32) * n44));
HXLINE( 686)		te[(int)10] = (((((((n12 * n24) * n41) - ((n14 * n22) * n41)) + ((n14 * n21) * n42)) - ((n11 * n24) * n42)) - ((n12 * n21) * n44)) + ((n11 * n22) * n44));
HXLINE( 687)		te[(int)14] = (((((((n14 * n22) * n31) - ((n12 * n24) * n31)) - ((n14 * n21) * n32)) + ((n11 * n24) * n32)) + ((n12 * n21) * n34)) - ((n11 * n22) * n34));
HXLINE( 688)		te[(int)3] = (((((((n23 * n32) * n41) - ((n22 * n33) * n41)) - ((n23 * n31) * n42)) + ((n21 * n33) * n42)) + ((n22 * n31) * n43)) - ((n21 * n32) * n43));
HXLINE( 689)		te[(int)7] = (((((((n12 * n33) * n41) - ((n13 * n32) * n41)) + ((n13 * n31) * n42)) - ((n11 * n33) * n42)) - ((n12 * n31) * n43)) + ((n11 * n32) * n43));
HXLINE( 690)		te[(int)11] = (((((((n13 * n22) * n41) - ((n12 * n23) * n41)) - ((n13 * n21) * n42)) + ((n11 * n23) * n42)) + ((n12 * n21) * n43)) - ((n11 * n22) * n43));
HXLINE( 691)		te[(int)15] = (((((((n12 * n23) * n31) - ((n13 * n22) * n31)) + ((n13 * n21) * n32)) - ((n11 * n23) * n32)) - ((n12 * n21) * n33)) + ((n11 * n22) * n33));
HXLINE( 693)		Float det = ((((me->__get((int)0) * te->__get((int)0)) + (me->__get((int)1) * te->__get((int)4))) + (me->__get((int)2) * te->__get((int)8))) + (me->__get((int)3) * te->__get((int)12)));
HXLINE( 695)		if ((det == (int)0)) {
HXLINE( 697)			::haxe::Log_obj::trace(HX_("Matrix.getInverse: cant invert matrix, determinant is 0",f5,2d,16,59),hx::SourceInfo(HX_("Matrix.hx",fd,8a,aa,4f),697,HX_("phoenix.Matrix",60,61,a9,39),HX_("getInverse",ba,d1,52,8d)));
HXLINE( 699)			{
HXLINE( 699)				::Array< Float > e = this->elements;
HXDLIN( 699)				e[(int)0] = (int)1;
HXDLIN( 699)				e[(int)4] = (int)0;
HXDLIN( 699)				e[(int)8] = (int)0;
HXDLIN( 699)				e[(int)12] = (int)0;
HXDLIN( 699)				e[(int)1] = (int)0;
HXDLIN( 699)				e[(int)5] = (int)1;
HXDLIN( 699)				e[(int)9] = (int)0;
HXDLIN( 699)				e[(int)13] = (int)0;
HXDLIN( 699)				e[(int)2] = (int)0;
HXDLIN( 699)				e[(int)6] = (int)0;
HXDLIN( 699)				e[(int)10] = (int)1;
HXDLIN( 699)				e[(int)14] = (int)0;
HXDLIN( 699)				e[(int)3] = (int)0;
HXDLIN( 699)				e[(int)7] = (int)0;
HXDLIN( 699)				e[(int)11] = (int)0;
HXDLIN( 699)				e[(int)15] = (int)1;
            			}
HXLINE( 701)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 705)		{
HXLINE( 705)			Float _s = ((Float)(int)1 / (Float)det);
HXDLIN( 705)			::Array< Float > te1 = this->elements;
HXDLIN( 705)			::Array< Float > te2 = te1;
HXDLIN( 705)			int _hx_tmp = (int)0;
HXDLIN( 705)			te2[_hx_tmp] = (te2->__get(_hx_tmp) * _s);
HXDLIN( 705)			::Array< Float > te3 = te1;
HXDLIN( 705)			int _hx_tmp1 = (int)4;
HXDLIN( 705)			te3[_hx_tmp1] = (te3->__get(_hx_tmp1) * _s);
HXDLIN( 705)			::Array< Float > te4 = te1;
HXDLIN( 705)			int _hx_tmp2 = (int)8;
HXDLIN( 705)			te4[_hx_tmp2] = (te4->__get(_hx_tmp2) * _s);
HXDLIN( 705)			::Array< Float > te5 = te1;
HXDLIN( 705)			int _hx_tmp3 = (int)12;
HXDLIN( 705)			te5[_hx_tmp3] = (te5->__get(_hx_tmp3) * _s);
HXDLIN( 705)			::Array< Float > te6 = te1;
HXDLIN( 705)			int _hx_tmp4 = (int)1;
HXDLIN( 705)			te6[_hx_tmp4] = (te6->__get(_hx_tmp4) * _s);
HXDLIN( 705)			::Array< Float > te7 = te1;
HXDLIN( 705)			int _hx_tmp5 = (int)5;
HXDLIN( 705)			te7[_hx_tmp5] = (te7->__get(_hx_tmp5) * _s);
HXDLIN( 705)			::Array< Float > te8 = te1;
HXDLIN( 705)			int _hx_tmp6 = (int)9;
HXDLIN( 705)			te8[_hx_tmp6] = (te8->__get(_hx_tmp6) * _s);
HXDLIN( 705)			::Array< Float > te9 = te1;
HXDLIN( 705)			int _hx_tmp7 = (int)13;
HXDLIN( 705)			te9[_hx_tmp7] = (te9->__get(_hx_tmp7) * _s);
HXDLIN( 705)			::Array< Float > te10 = te1;
HXDLIN( 705)			int _hx_tmp8 = (int)2;
HXDLIN( 705)			te10[_hx_tmp8] = (te10->__get(_hx_tmp8) * _s);
HXDLIN( 705)			::Array< Float > te11 = te1;
HXDLIN( 705)			int _hx_tmp9 = (int)6;
HXDLIN( 705)			te11[_hx_tmp9] = (te11->__get(_hx_tmp9) * _s);
HXDLIN( 705)			::Array< Float > te12 = te1;
HXDLIN( 705)			int _hx_tmp10 = (int)10;
HXDLIN( 705)			te12[_hx_tmp10] = (te12->__get(_hx_tmp10) * _s);
HXDLIN( 705)			::Array< Float > te13 = te1;
HXDLIN( 705)			int _hx_tmp11 = (int)14;
HXDLIN( 705)			te13[_hx_tmp11] = (te13->__get(_hx_tmp11) * _s);
HXDLIN( 705)			::Array< Float > te14 = te1;
HXDLIN( 705)			int _hx_tmp12 = (int)3;
HXDLIN( 705)			te14[_hx_tmp12] = (te14->__get(_hx_tmp12) * _s);
HXDLIN( 705)			::Array< Float > te15 = te1;
HXDLIN( 705)			int _hx_tmp13 = (int)7;
HXDLIN( 705)			te15[_hx_tmp13] = (te15->__get(_hx_tmp13) * _s);
HXDLIN( 705)			::Array< Float > te16 = te1;
HXDLIN( 705)			int _hx_tmp14 = (int)11;
HXDLIN( 705)			te16[_hx_tmp14] = (te16->__get(_hx_tmp14) * _s);
HXDLIN( 705)			::Array< Float > te17 = te1;
HXDLIN( 705)			int _hx_tmp15 = (int)15;
HXDLIN( 705)			te17[_hx_tmp15] = (te17->__get(_hx_tmp15) * _s);
            		}
HXLINE( 707)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,getInverse,return )

 ::phoenix::Matrix Matrix_obj::scale( ::phoenix::Vector _v){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_712_scale)
HXLINE( 714)		::Array< Float > te = this->elements;
HXLINE( 716)		Float _x = _v->x;
HXLINE( 717)		Float _y = _v->y;
HXLINE( 718)		Float _z = _v->z;
HXLINE( 720)		::Array< Float > te1 = te;
HXDLIN( 720)		int _hx_tmp = (int)0;
HXDLIN( 720)		te1[_hx_tmp] = (te1->__get(_hx_tmp) * _x);
HXDLIN( 720)		::Array< Float > te2 = te;
HXDLIN( 720)		int _hx_tmp1 = (int)4;
HXDLIN( 720)		te2[_hx_tmp1] = (te2->__get(_hx_tmp1) * _y);
HXDLIN( 720)		::Array< Float > te3 = te;
HXDLIN( 720)		int _hx_tmp2 = (int)8;
HXDLIN( 720)		te3[_hx_tmp2] = (te3->__get(_hx_tmp2) * _z);
HXLINE( 721)		::Array< Float > te4 = te;
HXDLIN( 721)		int _hx_tmp3 = (int)1;
HXDLIN( 721)		te4[_hx_tmp3] = (te4->__get(_hx_tmp3) * _x);
HXDLIN( 721)		::Array< Float > te5 = te;
HXDLIN( 721)		int _hx_tmp4 = (int)5;
HXDLIN( 721)		te5[_hx_tmp4] = (te5->__get(_hx_tmp4) * _y);
HXDLIN( 721)		::Array< Float > te6 = te;
HXDLIN( 721)		int _hx_tmp5 = (int)9;
HXDLIN( 721)		te6[_hx_tmp5] = (te6->__get(_hx_tmp5) * _z);
HXLINE( 722)		::Array< Float > te7 = te;
HXDLIN( 722)		int _hx_tmp6 = (int)2;
HXDLIN( 722)		te7[_hx_tmp6] = (te7->__get(_hx_tmp6) * _x);
HXDLIN( 722)		::Array< Float > te8 = te;
HXDLIN( 722)		int _hx_tmp7 = (int)6;
HXDLIN( 722)		te8[_hx_tmp7] = (te8->__get(_hx_tmp7) * _y);
HXDLIN( 722)		::Array< Float > te9 = te;
HXDLIN( 722)		int _hx_tmp8 = (int)10;
HXDLIN( 722)		te9[_hx_tmp8] = (te9->__get(_hx_tmp8) * _z);
HXLINE( 723)		::Array< Float > te10 = te;
HXDLIN( 723)		int _hx_tmp9 = (int)3;
HXDLIN( 723)		te10[_hx_tmp9] = (te10->__get(_hx_tmp9) * _x);
HXDLIN( 723)		::Array< Float > te11 = te;
HXDLIN( 723)		int _hx_tmp10 = (int)7;
HXDLIN( 723)		te11[_hx_tmp10] = (te11->__get(_hx_tmp10) * _y);
HXDLIN( 723)		::Array< Float > te12 = te;
HXDLIN( 723)		int _hx_tmp11 = (int)11;
HXDLIN( 723)		te12[_hx_tmp11] = (te12->__get(_hx_tmp11) * _z);
HXLINE( 725)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,scale,return )

Float Matrix_obj::getMaxScaleOnAxis(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_730_getMaxScaleOnAxis)
HXLINE( 732)		::Array< Float > te = this->elements;
HXLINE( 734)		Float _scaleXSq = (((te->__get((int)0) * te->__get((int)0)) + (te->__get((int)1) * te->__get((int)1))) + (te->__get((int)2) * te->__get((int)2)));
HXLINE( 735)		Float _scaleYSq = (((te->__get((int)4) * te->__get((int)4)) + (te->__get((int)5) * te->__get((int)5))) + (te->__get((int)6) * te->__get((int)6)));
HXLINE( 736)		Float _scaleZSq = (((te->__get((int)8) * te->__get((int)8)) + (te->__get((int)9) * te->__get((int)9))) + (te->__get((int)10) * te->__get((int)10)));
HXLINE( 738)		return ::Math_obj::sqrt(::Math_obj::max(_scaleXSq,::Math_obj::max(_scaleYSq,_scaleZSq)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,getMaxScaleOnAxis,return )

 ::phoenix::Matrix Matrix_obj::makeTranslation(Float _x,Float _y,Float _z){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_743_makeTranslation)
HXLINE( 745)		{
HXLINE( 745)			::Array< Float > e = this->elements;
HXDLIN( 745)			e[(int)0] = (int)1;
HXDLIN( 745)			e[(int)4] = (int)0;
HXDLIN( 745)			e[(int)8] = (int)0;
HXDLIN( 745)			e[(int)12] = _x;
HXDLIN( 745)			e[(int)1] = (int)0;
HXDLIN( 745)			e[(int)5] = (int)1;
HXDLIN( 745)			e[(int)9] = (int)0;
HXDLIN( 745)			e[(int)13] = _y;
HXDLIN( 745)			e[(int)2] = (int)0;
HXDLIN( 745)			e[(int)6] = (int)0;
HXDLIN( 745)			e[(int)10] = (int)1;
HXDLIN( 745)			e[(int)14] = _z;
HXDLIN( 745)			e[(int)3] = (int)0;
HXDLIN( 745)			e[(int)7] = (int)0;
HXDLIN( 745)			e[(int)11] = (int)0;
HXDLIN( 745)			e[(int)15] = (int)1;
            		}
HXLINE( 752)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix_obj,makeTranslation,return )

 ::phoenix::Matrix Matrix_obj::makeRotationX(Float _theta){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_757_makeRotationX)
HXLINE( 759)		Float _c = ::Math_obj::cos(_theta);
HXLINE( 760)		Float _s = ::Math_obj::sin(_theta);
HXLINE( 762)		{
HXLINE( 762)			::Array< Float > e = this->elements;
HXDLIN( 762)			e[(int)0] = (int)1;
HXDLIN( 762)			e[(int)4] = (int)0;
HXDLIN( 762)			e[(int)8] = (int)0;
HXDLIN( 762)			e[(int)12] = (int)0;
HXDLIN( 762)			e[(int)1] = (int)0;
HXDLIN( 762)			e[(int)5] = _c;
HXDLIN( 762)			e[(int)9] = -(_s);
HXDLIN( 762)			e[(int)13] = (int)0;
HXDLIN( 762)			e[(int)2] = (int)0;
HXDLIN( 762)			e[(int)6] = _s;
HXDLIN( 762)			e[(int)10] = _c;
HXDLIN( 762)			e[(int)14] = (int)0;
HXDLIN( 762)			e[(int)3] = (int)0;
HXDLIN( 762)			e[(int)7] = (int)0;
HXDLIN( 762)			e[(int)11] = (int)0;
HXDLIN( 762)			e[(int)15] = (int)1;
            		}
HXLINE( 769)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,makeRotationX,return )

 ::phoenix::Matrix Matrix_obj::makeRotationY(Float _theta){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_774_makeRotationY)
HXLINE( 776)		Float _c = ::Math_obj::cos(_theta);
HXLINE( 777)		Float _s = ::Math_obj::sin(_theta);
HXLINE( 779)		{
HXLINE( 779)			::Array< Float > e = this->elements;
HXDLIN( 779)			e[(int)0] = _c;
HXDLIN( 779)			e[(int)4] = (int)0;
HXDLIN( 779)			e[(int)8] = _s;
HXDLIN( 779)			e[(int)12] = (int)0;
HXDLIN( 779)			e[(int)1] = (int)0;
HXDLIN( 779)			e[(int)5] = (int)1;
HXDLIN( 779)			e[(int)9] = (int)0;
HXDLIN( 779)			e[(int)13] = (int)0;
HXDLIN( 779)			e[(int)2] = -(_s);
HXDLIN( 779)			e[(int)6] = (int)0;
HXDLIN( 779)			e[(int)10] = _c;
HXDLIN( 779)			e[(int)14] = (int)0;
HXDLIN( 779)			e[(int)3] = (int)0;
HXDLIN( 779)			e[(int)7] = (int)0;
HXDLIN( 779)			e[(int)11] = (int)0;
HXDLIN( 779)			e[(int)15] = (int)1;
            		}
HXLINE( 786)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,makeRotationY,return )

 ::phoenix::Matrix Matrix_obj::makeRotationZ(Float _theta){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_791_makeRotationZ)
HXLINE( 793)		Float _c = ::Math_obj::cos(_theta);
HXLINE( 794)		Float _s = ::Math_obj::sin(_theta);
HXLINE( 796)		{
HXLINE( 796)			::Array< Float > e = this->elements;
HXDLIN( 796)			e[(int)0] = _c;
HXDLIN( 796)			e[(int)4] = -(_s);
HXDLIN( 796)			e[(int)8] = (int)0;
HXDLIN( 796)			e[(int)12] = (int)0;
HXDLIN( 796)			e[(int)1] = _s;
HXDLIN( 796)			e[(int)5] = _c;
HXDLIN( 796)			e[(int)9] = (int)0;
HXDLIN( 796)			e[(int)13] = (int)0;
HXDLIN( 796)			e[(int)2] = (int)0;
HXDLIN( 796)			e[(int)6] = (int)0;
HXDLIN( 796)			e[(int)10] = (int)1;
HXDLIN( 796)			e[(int)14] = (int)0;
HXDLIN( 796)			e[(int)3] = (int)0;
HXDLIN( 796)			e[(int)7] = (int)0;
HXDLIN( 796)			e[(int)11] = (int)0;
HXDLIN( 796)			e[(int)15] = (int)1;
            		}
HXLINE( 803)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,makeRotationZ,return )

 ::phoenix::Matrix Matrix_obj::makeRotationAxis( ::phoenix::Vector _axis,Float _angle){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_808_makeRotationAxis)
HXLINE( 810)		Float _c = ::Math_obj::cos(_angle);
HXLINE( 811)		Float _s = ::Math_obj::sin(_angle);
HXLINE( 812)		Float _t = ((int)1 - _c);
HXLINE( 814)		Float _ax = _axis->x;
HXLINE( 815)		Float _ay = _axis->y;
HXLINE( 816)		Float _az = _axis->z;
HXLINE( 818)		Float _tx = (_t * _ax);
HXLINE( 819)		Float _ty = (_t * _ay);
HXLINE( 821)		{
HXLINE( 821)			::Array< Float > e = this->elements;
HXDLIN( 821)			e[(int)0] = ((_tx * _ax) + _c);
HXDLIN( 821)			e[(int)4] = ((_tx * _ay) - (_s * _az));
HXDLIN( 821)			e[(int)8] = ((_tx * _az) + (_s * _ay));
HXDLIN( 821)			e[(int)12] = (int)0;
HXDLIN( 821)			e[(int)1] = ((_tx * _ay) + (_s * _az));
HXDLIN( 821)			e[(int)5] = ((_ty * _ay) + _c);
HXDLIN( 821)			e[(int)9] = ((_ty * _az) - (_s * _ax));
HXDLIN( 821)			e[(int)13] = (int)0;
HXDLIN( 821)			e[(int)2] = ((_tx * _az) - (_s * _ay));
HXDLIN( 821)			e[(int)6] = ((_ty * _az) + (_s * _ax));
HXDLIN( 821)			e[(int)10] = (((_t * _az) * _az) + _c);
HXDLIN( 821)			e[(int)14] = (int)0;
HXDLIN( 821)			e[(int)3] = (int)0;
HXDLIN( 821)			e[(int)7] = (int)0;
HXDLIN( 821)			e[(int)11] = (int)0;
HXDLIN( 821)			e[(int)15] = (int)1;
            		}
HXLINE( 828)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,makeRotationAxis,return )

 ::phoenix::Matrix Matrix_obj::makeScale(Float _x,Float _y,Float _z){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_833_makeScale)
HXLINE( 835)		{
HXLINE( 835)			::Array< Float > e = this->elements;
HXDLIN( 835)			e[(int)0] = _x;
HXDLIN( 835)			e[(int)4] = (int)0;
HXDLIN( 835)			e[(int)8] = (int)0;
HXDLIN( 835)			e[(int)12] = (int)0;
HXDLIN( 835)			e[(int)1] = (int)0;
HXDLIN( 835)			e[(int)5] = _y;
HXDLIN( 835)			e[(int)9] = (int)0;
HXDLIN( 835)			e[(int)13] = (int)0;
HXDLIN( 835)			e[(int)2] = (int)0;
HXDLIN( 835)			e[(int)6] = (int)0;
HXDLIN( 835)			e[(int)10] = _z;
HXDLIN( 835)			e[(int)14] = (int)0;
HXDLIN( 835)			e[(int)3] = (int)0;
HXDLIN( 835)			e[(int)7] = (int)0;
HXDLIN( 835)			e[(int)11] = (int)0;
HXDLIN( 835)			e[(int)15] = (int)1;
            		}
HXLINE( 842)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix_obj,makeScale,return )

 ::phoenix::Matrix Matrix_obj::compose_with_origin( ::phoenix::Vector _position, ::phoenix::Vector _origin, ::phoenix::Quaternion _quaternion, ::phoenix::Vector _scale){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_847_compose_with_origin)
HXLINE( 853)		{
HXLINE( 853)			::Array< Float > e = this->elements;
HXDLIN( 853)			e[(int)0] = (int)1;
HXDLIN( 853)			e[(int)4] = (int)0;
HXDLIN( 853)			e[(int)8] = (int)0;
HXDLIN( 853)			e[(int)12] = _origin->x;
HXDLIN( 853)			e[(int)1] = (int)0;
HXDLIN( 853)			e[(int)5] = (int)1;
HXDLIN( 853)			e[(int)9] = (int)0;
HXDLIN( 853)			e[(int)13] = _origin->y;
HXDLIN( 853)			e[(int)2] = (int)0;
HXDLIN( 853)			e[(int)6] = (int)0;
HXDLIN( 853)			e[(int)10] = (int)1;
HXDLIN( 853)			e[(int)14] = _origin->z;
HXDLIN( 853)			e[(int)3] = (int)0;
HXDLIN( 853)			e[(int)7] = (int)0;
HXDLIN( 853)			e[(int)11] = (int)0;
HXDLIN( 853)			e[(int)15] = (int)1;
            		}
HXLINE( 855)		{
HXLINE( 855)			::Array< Float > te = this->elements;
HXDLIN( 855)			Float _x = _scale->x;
HXDLIN( 855)			Float _y = _scale->y;
HXDLIN( 855)			Float _z = _scale->z;
HXDLIN( 855)			::Array< Float > te1 = te;
HXDLIN( 855)			int _hx_tmp = (int)0;
HXDLIN( 855)			te1[_hx_tmp] = (te1->__get(_hx_tmp) * _x);
HXDLIN( 855)			::Array< Float > te2 = te;
HXDLIN( 855)			int _hx_tmp1 = (int)4;
HXDLIN( 855)			te2[_hx_tmp1] = (te2->__get(_hx_tmp1) * _y);
HXDLIN( 855)			::Array< Float > te3 = te;
HXDLIN( 855)			int _hx_tmp2 = (int)8;
HXDLIN( 855)			te3[_hx_tmp2] = (te3->__get(_hx_tmp2) * _z);
HXDLIN( 855)			::Array< Float > te4 = te;
HXDLIN( 855)			int _hx_tmp3 = (int)1;
HXDLIN( 855)			te4[_hx_tmp3] = (te4->__get(_hx_tmp3) * _x);
HXDLIN( 855)			::Array< Float > te5 = te;
HXDLIN( 855)			int _hx_tmp4 = (int)5;
HXDLIN( 855)			te5[_hx_tmp4] = (te5->__get(_hx_tmp4) * _y);
HXDLIN( 855)			::Array< Float > te6 = te;
HXDLIN( 855)			int _hx_tmp5 = (int)9;
HXDLIN( 855)			te6[_hx_tmp5] = (te6->__get(_hx_tmp5) * _z);
HXDLIN( 855)			::Array< Float > te7 = te;
HXDLIN( 855)			int _hx_tmp6 = (int)2;
HXDLIN( 855)			te7[_hx_tmp6] = (te7->__get(_hx_tmp6) * _x);
HXDLIN( 855)			::Array< Float > te8 = te;
HXDLIN( 855)			int _hx_tmp7 = (int)6;
HXDLIN( 855)			te8[_hx_tmp7] = (te8->__get(_hx_tmp7) * _y);
HXDLIN( 855)			::Array< Float > te9 = te;
HXDLIN( 855)			int _hx_tmp8 = (int)10;
HXDLIN( 855)			te9[_hx_tmp8] = (te9->__get(_hx_tmp8) * _z);
HXDLIN( 855)			::Array< Float > te10 = te;
HXDLIN( 855)			int _hx_tmp9 = (int)3;
HXDLIN( 855)			te10[_hx_tmp9] = (te10->__get(_hx_tmp9) * _x);
HXDLIN( 855)			::Array< Float > te11 = te;
HXDLIN( 855)			int _hx_tmp10 = (int)7;
HXDLIN( 855)			te11[_hx_tmp10] = (te11->__get(_hx_tmp10) * _y);
HXDLIN( 855)			::Array< Float > te12 = te;
HXDLIN( 855)			int _hx_tmp11 = (int)11;
HXDLIN( 855)			te12[_hx_tmp11] = (te12->__get(_hx_tmp11) * _z);
            		}
HXLINE( 857)		{
HXLINE( 857)			 ::phoenix::Matrix _this =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXDLIN( 857)			::Array< Float > te13 = _this->elements;
HXDLIN( 857)			Float x2 = (_quaternion->x + _quaternion->x);
HXDLIN( 857)			Float y2 = (_quaternion->y + _quaternion->y);
HXDLIN( 857)			Float z2 = (_quaternion->z + _quaternion->z);
HXDLIN( 857)			Float xx = (_quaternion->x * x2);
HXDLIN( 857)			Float xy = (_quaternion->x * y2);
HXDLIN( 857)			Float xz = (_quaternion->x * z2);
HXDLIN( 857)			Float yy = (_quaternion->y * y2);
HXDLIN( 857)			Float yz = (_quaternion->y * z2);
HXDLIN( 857)			Float zz = (_quaternion->z * z2);
HXDLIN( 857)			Float wx = (_quaternion->w * x2);
HXDLIN( 857)			Float wy = (_quaternion->w * y2);
HXDLIN( 857)			Float wz = (_quaternion->w * z2);
HXDLIN( 857)			te13[(int)0] = ((int)1 - (yy + zz));
HXDLIN( 857)			te13[(int)4] = (xy - wz);
HXDLIN( 857)			te13[(int)8] = (xz + wy);
HXDLIN( 857)			te13[(int)1] = (xy + wz);
HXDLIN( 857)			te13[(int)5] = ((int)1 - (xx + zz));
HXDLIN( 857)			te13[(int)9] = (yz - wx);
HXDLIN( 857)			te13[(int)2] = (xz - wy);
HXDLIN( 857)			te13[(int)6] = (yz + wx);
HXDLIN( 857)			te13[(int)10] = ((int)1 - (xx + yy));
HXDLIN( 857)			te13[(int)3] = (int)0;
HXDLIN( 857)			te13[(int)7] = (int)0;
HXDLIN( 857)			te13[(int)11] = (int)0;
HXDLIN( 857)			te13[(int)12] = (int)0;
HXDLIN( 857)			te13[(int)13] = (int)0;
HXDLIN( 857)			te13[(int)14] = (int)0;
HXDLIN( 857)			te13[(int)15] = (int)1;
HXDLIN( 857)			{
HXLINE( 857)				::Array< Float > ae = this->elements;
HXDLIN( 857)				::Array< Float > be = _this->elements;
HXDLIN( 857)				::Array< Float > te14 = this->elements;
HXDLIN( 857)				Float a11 = ae->__get((int)0);
HXDLIN( 857)				Float a12 = ae->__get((int)4);
HXDLIN( 857)				Float a13 = ae->__get((int)8);
HXDLIN( 857)				Float a14 = ae->__get((int)12);
HXDLIN( 857)				Float a21 = ae->__get((int)1);
HXDLIN( 857)				Float a22 = ae->__get((int)5);
HXDLIN( 857)				Float a23 = ae->__get((int)9);
HXDLIN( 857)				Float a24 = ae->__get((int)13);
HXDLIN( 857)				Float a31 = ae->__get((int)2);
HXDLIN( 857)				Float a32 = ae->__get((int)6);
HXDLIN( 857)				Float a33 = ae->__get((int)10);
HXDLIN( 857)				Float a34 = ae->__get((int)14);
HXDLIN( 857)				Float a41 = ae->__get((int)3);
HXDLIN( 857)				Float a42 = ae->__get((int)7);
HXDLIN( 857)				Float a43 = ae->__get((int)11);
HXDLIN( 857)				Float a44 = ae->__get((int)15);
HXDLIN( 857)				Float b11 = be->__get((int)0);
HXDLIN( 857)				Float b12 = be->__get((int)4);
HXDLIN( 857)				Float b13 = be->__get((int)8);
HXDLIN( 857)				Float b14 = be->__get((int)12);
HXDLIN( 857)				Float b21 = be->__get((int)1);
HXDLIN( 857)				Float b22 = be->__get((int)5);
HXDLIN( 857)				Float b23 = be->__get((int)9);
HXDLIN( 857)				Float b24 = be->__get((int)13);
HXDLIN( 857)				Float b31 = be->__get((int)2);
HXDLIN( 857)				Float b32 = be->__get((int)6);
HXDLIN( 857)				Float b33 = be->__get((int)10);
HXDLIN( 857)				Float b34 = be->__get((int)14);
HXDLIN( 857)				Float b41 = be->__get((int)3);
HXDLIN( 857)				Float b42 = be->__get((int)7);
HXDLIN( 857)				Float b43 = be->__get((int)11);
HXDLIN( 857)				Float b44 = be->__get((int)15);
HXDLIN( 857)				te14[(int)0] = ((((a11 * b11) + (a12 * b21)) + (a13 * b31)) + (a14 * b41));
HXDLIN( 857)				te14[(int)4] = ((((a11 * b12) + (a12 * b22)) + (a13 * b32)) + (a14 * b42));
HXDLIN( 857)				te14[(int)8] = ((((a11 * b13) + (a12 * b23)) + (a13 * b33)) + (a14 * b43));
HXDLIN( 857)				te14[(int)12] = ((((a11 * b14) + (a12 * b24)) + (a13 * b34)) + (a14 * b44));
HXDLIN( 857)				te14[(int)1] = ((((a21 * b11) + (a22 * b21)) + (a23 * b31)) + (a24 * b41));
HXDLIN( 857)				te14[(int)5] = ((((a21 * b12) + (a22 * b22)) + (a23 * b32)) + (a24 * b42));
HXDLIN( 857)				te14[(int)9] = ((((a21 * b13) + (a22 * b23)) + (a23 * b33)) + (a24 * b43));
HXDLIN( 857)				te14[(int)13] = ((((a21 * b14) + (a22 * b24)) + (a23 * b34)) + (a24 * b44));
HXDLIN( 857)				te14[(int)2] = ((((a31 * b11) + (a32 * b21)) + (a33 * b31)) + (a34 * b41));
HXDLIN( 857)				te14[(int)6] = ((((a31 * b12) + (a32 * b22)) + (a33 * b32)) + (a34 * b42));
HXDLIN( 857)				te14[(int)10] = ((((a31 * b13) + (a32 * b23)) + (a33 * b33)) + (a34 * b43));
HXDLIN( 857)				te14[(int)14] = ((((a31 * b14) + (a32 * b24)) + (a33 * b34)) + (a34 * b44));
HXDLIN( 857)				te14[(int)3] = ((((a41 * b11) + (a42 * b21)) + (a43 * b31)) + (a44 * b41));
HXDLIN( 857)				te14[(int)7] = ((((a41 * b12) + (a42 * b22)) + (a43 * b32)) + (a44 * b42));
HXDLIN( 857)				te14[(int)11] = ((((a41 * b13) + (a42 * b23)) + (a43 * b33)) + (a44 * b43));
HXDLIN( 857)				te14[(int)15] = ((((a41 * b14) + (a42 * b24)) + (a43 * b34)) + (a44 * b44));
            			}
            		}
HXLINE( 859)		{
HXLINE( 859)			 ::phoenix::Matrix _this1 =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXDLIN( 859)			{
HXLINE( 859)				::Array< Float > e1 = _this1->elements;
HXDLIN( 859)				e1[(int)0] = (int)1;
HXDLIN( 859)				e1[(int)4] = (int)0;
HXDLIN( 859)				e1[(int)8] = (int)0;
HXDLIN( 859)				e1[(int)12] = -(_origin->x);
HXDLIN( 859)				e1[(int)1] = (int)0;
HXDLIN( 859)				e1[(int)5] = (int)1;
HXDLIN( 859)				e1[(int)9] = (int)0;
HXDLIN( 859)				e1[(int)13] = -(_origin->y);
HXDLIN( 859)				e1[(int)2] = (int)0;
HXDLIN( 859)				e1[(int)6] = (int)0;
HXDLIN( 859)				e1[(int)10] = (int)1;
HXDLIN( 859)				e1[(int)14] = -(_origin->z);
HXDLIN( 859)				e1[(int)3] = (int)0;
HXDLIN( 859)				e1[(int)7] = (int)0;
HXDLIN( 859)				e1[(int)11] = (int)0;
HXDLIN( 859)				e1[(int)15] = (int)1;
            			}
HXDLIN( 859)			{
HXLINE( 859)				::Array< Float > ae1 = this->elements;
HXDLIN( 859)				::Array< Float > be1 = _this1->elements;
HXDLIN( 859)				::Array< Float > te15 = this->elements;
HXDLIN( 859)				Float a111 = ae1->__get((int)0);
HXDLIN( 859)				Float a121 = ae1->__get((int)4);
HXDLIN( 859)				Float a131 = ae1->__get((int)8);
HXDLIN( 859)				Float a141 = ae1->__get((int)12);
HXDLIN( 859)				Float a211 = ae1->__get((int)1);
HXDLIN( 859)				Float a221 = ae1->__get((int)5);
HXDLIN( 859)				Float a231 = ae1->__get((int)9);
HXDLIN( 859)				Float a241 = ae1->__get((int)13);
HXDLIN( 859)				Float a311 = ae1->__get((int)2);
HXDLIN( 859)				Float a321 = ae1->__get((int)6);
HXDLIN( 859)				Float a331 = ae1->__get((int)10);
HXDLIN( 859)				Float a341 = ae1->__get((int)14);
HXDLIN( 859)				Float a411 = ae1->__get((int)3);
HXDLIN( 859)				Float a421 = ae1->__get((int)7);
HXDLIN( 859)				Float a431 = ae1->__get((int)11);
HXDLIN( 859)				Float a441 = ae1->__get((int)15);
HXDLIN( 859)				Float b111 = be1->__get((int)0);
HXDLIN( 859)				Float b121 = be1->__get((int)4);
HXDLIN( 859)				Float b131 = be1->__get((int)8);
HXDLIN( 859)				Float b141 = be1->__get((int)12);
HXDLIN( 859)				Float b211 = be1->__get((int)1);
HXDLIN( 859)				Float b221 = be1->__get((int)5);
HXDLIN( 859)				Float b231 = be1->__get((int)9);
HXDLIN( 859)				Float b241 = be1->__get((int)13);
HXDLIN( 859)				Float b311 = be1->__get((int)2);
HXDLIN( 859)				Float b321 = be1->__get((int)6);
HXDLIN( 859)				Float b331 = be1->__get((int)10);
HXDLIN( 859)				Float b341 = be1->__get((int)14);
HXDLIN( 859)				Float b411 = be1->__get((int)3);
HXDLIN( 859)				Float b421 = be1->__get((int)7);
HXDLIN( 859)				Float b431 = be1->__get((int)11);
HXDLIN( 859)				Float b441 = be1->__get((int)15);
HXDLIN( 859)				te15[(int)0] = ((((a111 * b111) + (a121 * b211)) + (a131 * b311)) + (a141 * b411));
HXDLIN( 859)				te15[(int)4] = ((((a111 * b121) + (a121 * b221)) + (a131 * b321)) + (a141 * b421));
HXDLIN( 859)				te15[(int)8] = ((((a111 * b131) + (a121 * b231)) + (a131 * b331)) + (a141 * b431));
HXDLIN( 859)				te15[(int)12] = ((((a111 * b141) + (a121 * b241)) + (a131 * b341)) + (a141 * b441));
HXDLIN( 859)				te15[(int)1] = ((((a211 * b111) + (a221 * b211)) + (a231 * b311)) + (a241 * b411));
HXDLIN( 859)				te15[(int)5] = ((((a211 * b121) + (a221 * b221)) + (a231 * b321)) + (a241 * b421));
HXDLIN( 859)				te15[(int)9] = ((((a211 * b131) + (a221 * b231)) + (a231 * b331)) + (a241 * b431));
HXDLIN( 859)				te15[(int)13] = ((((a211 * b141) + (a221 * b241)) + (a231 * b341)) + (a241 * b441));
HXDLIN( 859)				te15[(int)2] = ((((a311 * b111) + (a321 * b211)) + (a331 * b311)) + (a341 * b411));
HXDLIN( 859)				te15[(int)6] = ((((a311 * b121) + (a321 * b221)) + (a331 * b321)) + (a341 * b421));
HXDLIN( 859)				te15[(int)10] = ((((a311 * b131) + (a321 * b231)) + (a331 * b331)) + (a341 * b431));
HXDLIN( 859)				te15[(int)14] = ((((a311 * b141) + (a321 * b241)) + (a331 * b341)) + (a341 * b441));
HXDLIN( 859)				te15[(int)3] = ((((a411 * b111) + (a421 * b211)) + (a431 * b311)) + (a441 * b411));
HXDLIN( 859)				te15[(int)7] = ((((a411 * b121) + (a421 * b221)) + (a431 * b321)) + (a441 * b421));
HXDLIN( 859)				te15[(int)11] = ((((a411 * b131) + (a421 * b231)) + (a431 * b331)) + (a441 * b431));
HXDLIN( 859)				te15[(int)15] = ((((a411 * b141) + (a421 * b241)) + (a431 * b341)) + (a441 * b441));
            			}
            		}
HXLINE( 861)		{
HXLINE( 861)			 ::phoenix::Matrix _this2 =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXDLIN( 861)			{
HXLINE( 861)				::Array< Float > e2 = _this2->elements;
HXDLIN( 861)				e2[(int)0] = (int)1;
HXDLIN( 861)				e2[(int)4] = (int)0;
HXDLIN( 861)				e2[(int)8] = (int)0;
HXDLIN( 861)				e2[(int)12] = _position->x;
HXDLIN( 861)				e2[(int)1] = (int)0;
HXDLIN( 861)				e2[(int)5] = (int)1;
HXDLIN( 861)				e2[(int)9] = (int)0;
HXDLIN( 861)				e2[(int)13] = _position->y;
HXDLIN( 861)				e2[(int)2] = (int)0;
HXDLIN( 861)				e2[(int)6] = (int)0;
HXDLIN( 861)				e2[(int)10] = (int)1;
HXDLIN( 861)				e2[(int)14] = _position->z;
HXDLIN( 861)				e2[(int)3] = (int)0;
HXDLIN( 861)				e2[(int)7] = (int)0;
HXDLIN( 861)				e2[(int)11] = (int)0;
HXDLIN( 861)				e2[(int)15] = (int)1;
            			}
HXDLIN( 861)			{
HXLINE( 861)				::Array< Float > ae2 = this->elements;
HXDLIN( 861)				::Array< Float > be2 = _this2->elements;
HXDLIN( 861)				::Array< Float > te16 = this->elements;
HXDLIN( 861)				Float a112 = ae2->__get((int)0);
HXDLIN( 861)				Float a122 = ae2->__get((int)4);
HXDLIN( 861)				Float a132 = ae2->__get((int)8);
HXDLIN( 861)				Float a142 = ae2->__get((int)12);
HXDLIN( 861)				Float a212 = ae2->__get((int)1);
HXDLIN( 861)				Float a222 = ae2->__get((int)5);
HXDLIN( 861)				Float a232 = ae2->__get((int)9);
HXDLIN( 861)				Float a242 = ae2->__get((int)13);
HXDLIN( 861)				Float a312 = ae2->__get((int)2);
HXDLIN( 861)				Float a322 = ae2->__get((int)6);
HXDLIN( 861)				Float a332 = ae2->__get((int)10);
HXDLIN( 861)				Float a342 = ae2->__get((int)14);
HXDLIN( 861)				Float a412 = ae2->__get((int)3);
HXDLIN( 861)				Float a422 = ae2->__get((int)7);
HXDLIN( 861)				Float a432 = ae2->__get((int)11);
HXDLIN( 861)				Float a442 = ae2->__get((int)15);
HXDLIN( 861)				Float b112 = be2->__get((int)0);
HXDLIN( 861)				Float b122 = be2->__get((int)4);
HXDLIN( 861)				Float b132 = be2->__get((int)8);
HXDLIN( 861)				Float b142 = be2->__get((int)12);
HXDLIN( 861)				Float b212 = be2->__get((int)1);
HXDLIN( 861)				Float b222 = be2->__get((int)5);
HXDLIN( 861)				Float b232 = be2->__get((int)9);
HXDLIN( 861)				Float b242 = be2->__get((int)13);
HXDLIN( 861)				Float b312 = be2->__get((int)2);
HXDLIN( 861)				Float b322 = be2->__get((int)6);
HXDLIN( 861)				Float b332 = be2->__get((int)10);
HXDLIN( 861)				Float b342 = be2->__get((int)14);
HXDLIN( 861)				Float b412 = be2->__get((int)3);
HXDLIN( 861)				Float b422 = be2->__get((int)7);
HXDLIN( 861)				Float b432 = be2->__get((int)11);
HXDLIN( 861)				Float b442 = be2->__get((int)15);
HXDLIN( 861)				te16[(int)0] = ((((a112 * b112) + (a122 * b212)) + (a132 * b312)) + (a142 * b412));
HXDLIN( 861)				te16[(int)4] = ((((a112 * b122) + (a122 * b222)) + (a132 * b322)) + (a142 * b422));
HXDLIN( 861)				te16[(int)8] = ((((a112 * b132) + (a122 * b232)) + (a132 * b332)) + (a142 * b432));
HXDLIN( 861)				te16[(int)12] = ((((a112 * b142) + (a122 * b242)) + (a132 * b342)) + (a142 * b442));
HXDLIN( 861)				te16[(int)1] = ((((a212 * b112) + (a222 * b212)) + (a232 * b312)) + (a242 * b412));
HXDLIN( 861)				te16[(int)5] = ((((a212 * b122) + (a222 * b222)) + (a232 * b322)) + (a242 * b422));
HXDLIN( 861)				te16[(int)9] = ((((a212 * b132) + (a222 * b232)) + (a232 * b332)) + (a242 * b432));
HXDLIN( 861)				te16[(int)13] = ((((a212 * b142) + (a222 * b242)) + (a232 * b342)) + (a242 * b442));
HXDLIN( 861)				te16[(int)2] = ((((a312 * b112) + (a322 * b212)) + (a332 * b312)) + (a342 * b412));
HXDLIN( 861)				te16[(int)6] = ((((a312 * b122) + (a322 * b222)) + (a332 * b322)) + (a342 * b422));
HXDLIN( 861)				te16[(int)10] = ((((a312 * b132) + (a322 * b232)) + (a332 * b332)) + (a342 * b432));
HXDLIN( 861)				te16[(int)14] = ((((a312 * b142) + (a322 * b242)) + (a332 * b342)) + (a342 * b442));
HXDLIN( 861)				te16[(int)3] = ((((a412 * b112) + (a422 * b212)) + (a432 * b312)) + (a442 * b412));
HXDLIN( 861)				te16[(int)7] = ((((a412 * b122) + (a422 * b222)) + (a432 * b322)) + (a442 * b422));
HXDLIN( 861)				te16[(int)11] = ((((a412 * b132) + (a422 * b232)) + (a432 * b332)) + (a442 * b432));
HXDLIN( 861)				te16[(int)15] = ((((a412 * b142) + (a422 * b242)) + (a432 * b342)) + (a442 * b442));
            			}
            		}
HXLINE( 863)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Matrix_obj,compose_with_origin,return )

 ::phoenix::Matrix Matrix_obj::compose( ::phoenix::Vector _position, ::phoenix::Quaternion _quaternion, ::phoenix::Vector _scale){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_867_compose)
HXLINE( 869)		{
HXLINE( 869)			::Array< Float > te = this->elements;
HXDLIN( 869)			Float x2 = (_quaternion->x + _quaternion->x);
HXDLIN( 869)			Float y2 = (_quaternion->y + _quaternion->y);
HXDLIN( 869)			Float z2 = (_quaternion->z + _quaternion->z);
HXDLIN( 869)			Float xx = (_quaternion->x * x2);
HXDLIN( 869)			Float xy = (_quaternion->x * y2);
HXDLIN( 869)			Float xz = (_quaternion->x * z2);
HXDLIN( 869)			Float yy = (_quaternion->y * y2);
HXDLIN( 869)			Float yz = (_quaternion->y * z2);
HXDLIN( 869)			Float zz = (_quaternion->z * z2);
HXDLIN( 869)			Float wx = (_quaternion->w * x2);
HXDLIN( 869)			Float wy = (_quaternion->w * y2);
HXDLIN( 869)			Float wz = (_quaternion->w * z2);
HXDLIN( 869)			te[(int)0] = ((int)1 - (yy + zz));
HXDLIN( 869)			te[(int)4] = (xy - wz);
HXDLIN( 869)			te[(int)8] = (xz + wy);
HXDLIN( 869)			te[(int)1] = (xy + wz);
HXDLIN( 869)			te[(int)5] = ((int)1 - (xx + zz));
HXDLIN( 869)			te[(int)9] = (yz - wx);
HXDLIN( 869)			te[(int)2] = (xz - wy);
HXDLIN( 869)			te[(int)6] = (yz + wx);
HXDLIN( 869)			te[(int)10] = ((int)1 - (xx + yy));
HXDLIN( 869)			te[(int)3] = (int)0;
HXDLIN( 869)			te[(int)7] = (int)0;
HXDLIN( 869)			te[(int)11] = (int)0;
HXDLIN( 869)			te[(int)12] = (int)0;
HXDLIN( 869)			te[(int)13] = (int)0;
HXDLIN( 869)			te[(int)14] = (int)0;
HXDLIN( 869)			te[(int)15] = (int)1;
            		}
HXLINE( 870)		{
HXLINE( 870)			::Array< Float > te1 = this->elements;
HXDLIN( 870)			Float _x = _scale->x;
HXDLIN( 870)			Float _y = _scale->y;
HXDLIN( 870)			Float _z = _scale->z;
HXDLIN( 870)			::Array< Float > te2 = te1;
HXDLIN( 870)			int _hx_tmp = (int)0;
HXDLIN( 870)			te2[_hx_tmp] = (te2->__get(_hx_tmp) * _x);
HXDLIN( 870)			::Array< Float > te3 = te1;
HXDLIN( 870)			int _hx_tmp1 = (int)4;
HXDLIN( 870)			te3[_hx_tmp1] = (te3->__get(_hx_tmp1) * _y);
HXDLIN( 870)			::Array< Float > te4 = te1;
HXDLIN( 870)			int _hx_tmp2 = (int)8;
HXDLIN( 870)			te4[_hx_tmp2] = (te4->__get(_hx_tmp2) * _z);
HXDLIN( 870)			::Array< Float > te5 = te1;
HXDLIN( 870)			int _hx_tmp3 = (int)1;
HXDLIN( 870)			te5[_hx_tmp3] = (te5->__get(_hx_tmp3) * _x);
HXDLIN( 870)			::Array< Float > te6 = te1;
HXDLIN( 870)			int _hx_tmp4 = (int)5;
HXDLIN( 870)			te6[_hx_tmp4] = (te6->__get(_hx_tmp4) * _y);
HXDLIN( 870)			::Array< Float > te7 = te1;
HXDLIN( 870)			int _hx_tmp5 = (int)9;
HXDLIN( 870)			te7[_hx_tmp5] = (te7->__get(_hx_tmp5) * _z);
HXDLIN( 870)			::Array< Float > te8 = te1;
HXDLIN( 870)			int _hx_tmp6 = (int)2;
HXDLIN( 870)			te8[_hx_tmp6] = (te8->__get(_hx_tmp6) * _x);
HXDLIN( 870)			::Array< Float > te9 = te1;
HXDLIN( 870)			int _hx_tmp7 = (int)6;
HXDLIN( 870)			te9[_hx_tmp7] = (te9->__get(_hx_tmp7) * _y);
HXDLIN( 870)			::Array< Float > te10 = te1;
HXDLIN( 870)			int _hx_tmp8 = (int)10;
HXDLIN( 870)			te10[_hx_tmp8] = (te10->__get(_hx_tmp8) * _z);
HXDLIN( 870)			::Array< Float > te11 = te1;
HXDLIN( 870)			int _hx_tmp9 = (int)3;
HXDLIN( 870)			te11[_hx_tmp9] = (te11->__get(_hx_tmp9) * _x);
HXDLIN( 870)			::Array< Float > te12 = te1;
HXDLIN( 870)			int _hx_tmp10 = (int)7;
HXDLIN( 870)			te12[_hx_tmp10] = (te12->__get(_hx_tmp10) * _y);
HXDLIN( 870)			::Array< Float > te13 = te1;
HXDLIN( 870)			int _hx_tmp11 = (int)11;
HXDLIN( 870)			te13[_hx_tmp11] = (te13->__get(_hx_tmp11) * _z);
            		}
HXLINE( 871)		{
HXLINE( 871)			::Array< Float > te14 = this->elements;
HXDLIN( 871)			te14[(int)12] = _position->x;
HXDLIN( 871)			te14[(int)13] = _position->y;
HXDLIN( 871)			te14[(int)14] = _position->z;
            		}
HXLINE( 873)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix_obj,compose,return )

 ::phoenix::MatrixTransform Matrix_obj::decompose( ::phoenix::Vector _position, ::phoenix::Quaternion _quaternion, ::phoenix::Vector _scale){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_879_decompose)
HXLINE( 881)		::Array< Float > te = this->elements;
HXLINE( 882)		 ::phoenix::Matrix matrix =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 884)		Float _ax_x = te->__get((int)0);
HXDLIN( 884)		Float _ax_y = te->__get((int)1);
HXDLIN( 884)		Float _ax_z = te->__get((int)2);
HXLINE( 885)		Float _ay_x = te->__get((int)4);
HXDLIN( 885)		Float _ay_y = te->__get((int)5);
HXDLIN( 885)		Float _ay_z = te->__get((int)6);
HXLINE( 886)		Float _az_x = te->__get((int)8);
HXDLIN( 886)		Float _az_y = te->__get((int)9);
HXDLIN( 886)		Float _az_z = te->__get((int)10);
HXLINE( 888)		Float _ax_length = ::Math_obj::sqrt((((_ax_x * _ax_x) + (_ax_y * _ax_y)) + (_ax_z * _ax_z)));
HXLINE( 889)		Float _ay_length = ::Math_obj::sqrt((((_ay_x * _ay_x) + (_ay_y * _ay_y)) + (_ay_z * _ay_z)));
HXLINE( 890)		Float _az_length = ::Math_obj::sqrt((((_az_x * _az_x) + (_az_y * _az_y)) + (_az_z * _az_z)));
HXLINE( 893)		if (hx::IsNull( _quaternion )) {
HXLINE( 894)			_quaternion =  ::phoenix::Quaternion_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 897)		if (hx::IsNull( _position )) {
HXLINE( 898)			_position =  ::phoenix::Vector_obj::__alloc( HX_CTX ,te->__get((int)12),te->__get((int)13),te->__get((int)14),null());
            		}
            		else {
HXLINE( 900)			{
HXLINE( 900)				Float _x = te->__get((int)12);
HXDLIN( 900)				_position->x = _x;
HXDLIN( 900)				if (!(_position->_construct)) {
HXLINE( 900)					bool _hx_tmp;
HXDLIN( 900)					if (hx::IsNotNull( _position->listen_x )) {
HXLINE( 900)						_hx_tmp = !(_position->ignore_listeners);
            					}
            					else {
HXLINE( 900)						_hx_tmp = false;
            					}
HXDLIN( 900)					if (_hx_tmp) {
HXLINE( 900)						_position->listen_x(_x);
            					}
            				}
            			}
HXLINE( 901)			{
HXLINE( 901)				Float _y = te->__get((int)13);
HXDLIN( 901)				_position->y = _y;
HXDLIN( 901)				if (!(_position->_construct)) {
HXLINE( 901)					bool _hx_tmp1;
HXDLIN( 901)					if (hx::IsNotNull( _position->listen_y )) {
HXLINE( 901)						_hx_tmp1 = !(_position->ignore_listeners);
            					}
            					else {
HXLINE( 901)						_hx_tmp1 = false;
            					}
HXDLIN( 901)					if (_hx_tmp1) {
HXLINE( 901)						_position->listen_y(_y);
            					}
            				}
            			}
HXLINE( 902)			{
HXLINE( 902)				Float _z = te->__get((int)14);
HXDLIN( 902)				_position->z = _z;
HXDLIN( 902)				if (!(_position->_construct)) {
HXLINE( 902)					bool _hx_tmp2;
HXDLIN( 902)					if (hx::IsNotNull( _position->listen_z )) {
HXLINE( 902)						_hx_tmp2 = !(_position->ignore_listeners);
            					}
            					else {
HXLINE( 902)						_hx_tmp2 = false;
            					}
HXDLIN( 902)					if (_hx_tmp2) {
HXLINE( 902)						_position->listen_z(_z);
            					}
            				}
            			}
            		}
HXLINE( 905)		if (hx::IsNull( _scale )) {
HXLINE( 906)			_scale =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_ax_length,_ay_length,_az_length,null());
            		}
            		else {
HXLINE( 908)			{
HXLINE( 908)				_scale->x = _ax_length;
HXDLIN( 908)				if (!(_scale->_construct)) {
HXLINE( 908)					bool _hx_tmp3;
HXDLIN( 908)					if (hx::IsNotNull( _scale->listen_x )) {
HXLINE( 908)						_hx_tmp3 = !(_scale->ignore_listeners);
            					}
            					else {
HXLINE( 908)						_hx_tmp3 = false;
            					}
HXDLIN( 908)					if (_hx_tmp3) {
HXLINE( 908)						_scale->listen_x(_ax_length);
            					}
            				}
            			}
HXLINE( 909)			{
HXLINE( 909)				_scale->y = _ay_length;
HXDLIN( 909)				if (!(_scale->_construct)) {
HXLINE( 909)					bool _hx_tmp4;
HXDLIN( 909)					if (hx::IsNotNull( _scale->listen_y )) {
HXLINE( 909)						_hx_tmp4 = !(_scale->ignore_listeners);
            					}
            					else {
HXLINE( 909)						_hx_tmp4 = false;
            					}
HXDLIN( 909)					if (_hx_tmp4) {
HXLINE( 909)						_scale->listen_y(_ay_length);
            					}
            				}
            			}
HXLINE( 910)			{
HXLINE( 910)				_scale->z = _az_length;
HXDLIN( 910)				if (!(_scale->_construct)) {
HXLINE( 910)					bool _hx_tmp5;
HXDLIN( 910)					if (hx::IsNotNull( _scale->listen_z )) {
HXLINE( 910)						_hx_tmp5 = !(_scale->ignore_listeners);
            					}
            					else {
HXLINE( 910)						_hx_tmp5 = false;
            					}
HXDLIN( 910)					if (_hx_tmp5) {
HXLINE( 910)						_scale->listen_z(_az_length);
            					}
            				}
            			}
            		}
HXLINE( 914)		matrix->elements = this->elements->concat(::Array_obj< Float >::__new(0));
HXLINE( 916)		::Array< Float > me = matrix->elements;
HXLINE( 918)		::Array< Float > me1 = me;
HXDLIN( 918)		int _hx_tmp6 = (int)0;
HXDLIN( 918)		me1[_hx_tmp6] = ((Float)me1->__get(_hx_tmp6) / (Float)_ax_length);
HXLINE( 919)		::Array< Float > me2 = me;
HXDLIN( 919)		int _hx_tmp7 = (int)1;
HXDLIN( 919)		me2[_hx_tmp7] = ((Float)me2->__get(_hx_tmp7) / (Float)_ax_length);
HXLINE( 920)		::Array< Float > me3 = me;
HXDLIN( 920)		int _hx_tmp8 = (int)2;
HXDLIN( 920)		me3[_hx_tmp8] = ((Float)me3->__get(_hx_tmp8) / (Float)_ax_length);
HXLINE( 922)		::Array< Float > me4 = me;
HXDLIN( 922)		int _hx_tmp9 = (int)4;
HXDLIN( 922)		me4[_hx_tmp9] = ((Float)me4->__get(_hx_tmp9) / (Float)_ay_length);
HXLINE( 923)		::Array< Float > me5 = me;
HXDLIN( 923)		int _hx_tmp10 = (int)5;
HXDLIN( 923)		me5[_hx_tmp10] = ((Float)me5->__get(_hx_tmp10) / (Float)_ay_length);
HXLINE( 924)		::Array< Float > me6 = me;
HXDLIN( 924)		int _hx_tmp11 = (int)6;
HXDLIN( 924)		me6[_hx_tmp11] = ((Float)me6->__get(_hx_tmp11) / (Float)_ay_length);
HXLINE( 926)		::Array< Float > me7 = me;
HXDLIN( 926)		int _hx_tmp12 = (int)8;
HXDLIN( 926)		me7[_hx_tmp12] = ((Float)me7->__get(_hx_tmp12) / (Float)_az_length);
HXLINE( 927)		::Array< Float > me8 = me;
HXDLIN( 927)		int _hx_tmp13 = (int)9;
HXDLIN( 927)		me8[_hx_tmp13] = ((Float)me8->__get(_hx_tmp13) / (Float)_az_length);
HXLINE( 928)		::Array< Float > me9 = me;
HXDLIN( 928)		int _hx_tmp14 = (int)10;
HXDLIN( 928)		me9[_hx_tmp14] = ((Float)me9->__get(_hx_tmp14) / (Float)_az_length);
HXLINE( 930)		_quaternion->setFromRotationMatrix(matrix);
HXLINE( 933)		if (hx::IsNull( this->_transform )) {
HXLINE( 934)			this->_transform =  ::phoenix::MatrixTransform_obj::__alloc( HX_CTX ,_position,_quaternion,_scale);
            		}
            		else {
HXLINE( 936)			this->_transform->pos = _position;
HXLINE( 937)			this->_transform->rotation = _quaternion;
HXLINE( 938)			this->_transform->scale = _scale;
            		}
HXLINE( 941)		return this->_transform;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix_obj,decompose,return )

 ::phoenix::Matrix Matrix_obj::makeFrustum(Float _left,Float _right,Float _bottom,Float _top,Float _near,Float _far){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_946_makeFrustum)
HXLINE( 948)		::Array< Float > te = this->elements;
HXLINE( 950)		Float tx = ((Float)((int)2 * _near) / (Float)(_right - _left));
HXLINE( 951)		Float ty = ((Float)((int)2 * _near) / (Float)(_top - _bottom));
HXLINE( 953)		Float a = ((Float)(_right + _left) / (Float)(_right - _left));
HXLINE( 954)		Float b = ((Float)(_top + _bottom) / (Float)(_top - _bottom));
HXLINE( 955)		Float c = ((Float)-((_far + _near)) / (Float)(_far - _near));
HXLINE( 956)		Float d = ((Float)(((int)-2 * _far) * _near) / (Float)(_far - _near));
HXLINE( 958)		te[(int)0] = tx;
HXDLIN( 958)		te[(int)4] = (int)0;
HXDLIN( 958)		te[(int)8] = a;
HXDLIN( 958)		te[(int)12] = (int)0;
HXLINE( 959)		te[(int)1] = (int)0;
HXDLIN( 959)		te[(int)5] = ty;
HXDLIN( 959)		te[(int)9] = b;
HXDLIN( 959)		te[(int)13] = (int)0;
HXLINE( 960)		te[(int)2] = (int)0;
HXDLIN( 960)		te[(int)6] = (int)0;
HXDLIN( 960)		te[(int)10] = c;
HXDLIN( 960)		te[(int)14] = d;
HXLINE( 961)		te[(int)3] = (int)0;
HXDLIN( 961)		te[(int)7] = (int)0;
HXDLIN( 961)		te[(int)11] = (int)-1;
HXDLIN( 961)		te[(int)15] = (int)0;
HXLINE( 963)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Matrix_obj,makeFrustum,return )

 ::phoenix::Matrix Matrix_obj::makePerspective(Float _fov,Float _aspect,Float _near,Float _far){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_968_makePerspective)
HXLINE( 970)		Float ymax = (_near * ::Math_obj::tan(((_fov * ((Float)0.5)) * ((Float)0.0174532925199432781))));
HXLINE( 971)		Float ymin = -(ymax);
HXLINE( 972)		Float xmin = (ymin * _aspect);
HXLINE( 973)		Float xmax = (ymax * _aspect);
HXLINE( 975)		::Array< Float > te = this->elements;
HXDLIN( 975)		Float tx = ((Float)((int)2 * _near) / (Float)(xmax - xmin));
HXDLIN( 975)		Float ty = ((Float)((int)2 * _near) / (Float)(ymax - ymin));
HXDLIN( 975)		Float a = ((Float)(xmax + xmin) / (Float)(xmax - xmin));
HXDLIN( 975)		Float b = ((Float)(ymax + ymin) / (Float)(ymax - ymin));
HXDLIN( 975)		Float c = ((Float)-((_far + _near)) / (Float)(_far - _near));
HXDLIN( 975)		Float d = ((Float)(((int)-2 * _far) * _near) / (Float)(_far - _near));
HXDLIN( 975)		te[(int)0] = tx;
HXDLIN( 975)		te[(int)4] = (int)0;
HXDLIN( 975)		te[(int)8] = a;
HXDLIN( 975)		te[(int)12] = (int)0;
HXDLIN( 975)		te[(int)1] = (int)0;
HXDLIN( 975)		te[(int)5] = ty;
HXDLIN( 975)		te[(int)9] = b;
HXDLIN( 975)		te[(int)13] = (int)0;
HXDLIN( 975)		te[(int)2] = (int)0;
HXDLIN( 975)		te[(int)6] = (int)0;
HXDLIN( 975)		te[(int)10] = c;
HXDLIN( 975)		te[(int)14] = d;
HXDLIN( 975)		te[(int)3] = (int)0;
HXDLIN( 975)		te[(int)7] = (int)0;
HXDLIN( 975)		te[(int)11] = (int)-1;
HXDLIN( 975)		te[(int)15] = (int)0;
HXDLIN( 975)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Matrix_obj,makePerspective,return )

 ::phoenix::Matrix Matrix_obj::makeOrthographic(Float _left,Float _right,Float _top,Float _bottom,Float _near,Float _far){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_980_makeOrthographic)
HXLINE( 982)		::Array< Float > te = this->elements;
HXLINE( 984)		Float w = (_right - _left);
HXLINE( 985)		Float h = (_top - _bottom);
HXLINE( 986)		Float p = (_far - _near);
HXLINE( 988)		Float tx = ((Float)(_right + _left) / (Float)w);
HXLINE( 989)		Float ty = ((Float)(_top + _bottom) / (Float)h);
HXLINE( 990)		Float tz = ((Float)(_far + _near) / (Float)p);
HXLINE( 992)		te[(int)0] = ((Float)(int)2 / (Float)w);
HXDLIN( 992)		te[(int)4] = (int)0;
HXDLIN( 992)		te[(int)8] = (int)0;
HXDLIN( 992)		te[(int)12] = -(tx);
HXLINE( 993)		te[(int)1] = (int)0;
HXDLIN( 993)		te[(int)5] = ((Float)(int)2 / (Float)h);
HXDLIN( 993)		te[(int)9] = (int)0;
HXDLIN( 993)		te[(int)13] = -(ty);
HXLINE( 994)		te[(int)2] = (int)0;
HXDLIN( 994)		te[(int)6] = (int)0;
HXDLIN( 994)		te[(int)10] = ((Float)(int)-2 / (Float)p);
HXDLIN( 994)		te[(int)14] = -(tz);
HXLINE( 995)		te[(int)3] = (int)0;
HXDLIN( 995)		te[(int)7] = (int)0;
HXDLIN( 995)		te[(int)11] = (int)0;
HXDLIN( 995)		te[(int)15] = (int)1;
HXLINE( 997)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Matrix_obj,makeOrthographic,return )

void Matrix_obj::fromArray(::Array< Float > _from){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_1003_fromArray)
HXDLIN(1003)		this->elements = _from->concat(::Array_obj< Float >::__new(0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,fromArray,(void))

::Array< Float > Matrix_obj::toArray(){
            	HX_STACKFRAME(&_hx_pos_90f5eb100c831620_1007_toArray)
HXLINE(1009)		::Array< Float > te = this->elements;
HXLINE(1011)		return ::Array_obj< Float >::__new(16)->init(0,te->__get((int)0))->init(1,te->__get((int)1))->init(2,te->__get((int)2))->init(3,te->__get((int)3))->init(4,te->__get((int)4))->init(5,te->__get((int)5))->init(6,te->__get((int)6))->init(7,te->__get((int)7))->init(8,te->__get((int)8))->init(9,te->__get((int)9))->init(10,te->__get((int)10))->init(11,te->__get((int)11))->init(12,te->__get((int)12))->init(13,te->__get((int)13))->init(14,te->__get((int)14))->init(15,te->__get((int)15));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,toArray,return )

 ::phoenix::Matrix Matrix_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_1020_clone)
HXLINE(1022)		::Array< Float > te = this->elements;
HXLINE(1024)		return  ::phoenix::Matrix_obj::__alloc( HX_CTX ,te->__get((int)0),te->__get((int)4),te->__get((int)8),te->__get((int)12),te->__get((int)1),te->__get((int)5),te->__get((int)9),te->__get((int)13),te->__get((int)2),te->__get((int)6),te->__get((int)10),te->__get((int)14),te->__get((int)3),te->__get((int)7),te->__get((int)11),te->__get((int)15));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,clone,return )

 ::phoenix::Vector Matrix_obj::up(){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_1034_up)
HXDLIN(1034)		Float _hx_tmp = this->elements->__get((int)4);
HXDLIN(1034)		Float _hx_tmp1 = this->elements->__get((int)5);
HXDLIN(1034)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,this->elements->__get((int)6),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,up,return )

 ::phoenix::Vector Matrix_obj::down(){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_1038_down)
HXDLIN(1038)		Float _this_z;
HXDLIN(1038)		Float _this_y;
HXDLIN(1038)		Float _this_x;
HXDLIN(1038)		Float _this_w;
HXDLIN(1038)		 ::Dynamic _this_listen_z;
HXDLIN(1038)		 ::Dynamic _this_listen_y;
HXDLIN(1038)		 ::Dynamic _this_listen_x;
HXDLIN(1038)		bool _this_ignore_listeners;
HXDLIN(1038)		bool _this__construct;
HXDLIN(1038)		Float _x = this->elements->__get((int)4);
HXDLIN(1038)		Float _y = this->elements->__get((int)5);
HXDLIN(1038)		Float _z = this->elements->__get((int)6);
HXDLIN(1038)		_this_x = ((Float)0);
HXDLIN(1038)		_this_y = ((Float)0);
HXDLIN(1038)		_this_z = ((Float)0);
HXDLIN(1038)		_this_w = ((Float)0);
HXDLIN(1038)		_this_ignore_listeners = false;
HXDLIN(1038)		_this__construct = false;
HXDLIN(1038)		_this__construct = true;
HXDLIN(1038)		_this_x = _x;
HXDLIN(1038)		if (!(_this__construct)) {
HXDLIN(1038)			bool _hx_tmp;
HXDLIN(1038)			if (hx::IsNotNull( _this_listen_x )) {
HXDLIN(1038)				_hx_tmp = !(_this_ignore_listeners);
            			}
            			else {
HXDLIN(1038)				_hx_tmp = false;
            			}
HXDLIN(1038)			if (_hx_tmp) {
HXDLIN(1038)				_this_listen_x(_x);
            			}
            		}
HXDLIN(1038)		_this_y = _y;
HXDLIN(1038)		if (!(_this__construct)) {
HXDLIN(1038)			bool _hx_tmp1;
HXDLIN(1038)			if (hx::IsNotNull( _this_listen_y )) {
HXDLIN(1038)				_hx_tmp1 = !(_this_ignore_listeners);
            			}
            			else {
HXDLIN(1038)				_hx_tmp1 = false;
            			}
HXDLIN(1038)			if (_hx_tmp1) {
HXDLIN(1038)				_this_listen_y(_y);
            			}
            		}
HXDLIN(1038)		_this_z = _z;
HXDLIN(1038)		if (!(_this__construct)) {
HXDLIN(1038)			bool _hx_tmp2;
HXDLIN(1038)			if (hx::IsNotNull( _this_listen_z )) {
HXDLIN(1038)				_hx_tmp2 = !(_this_ignore_listeners);
            			}
            			else {
HXDLIN(1038)				_hx_tmp2 = false;
            			}
HXDLIN(1038)			if (_hx_tmp2) {
HXDLIN(1038)				_this_listen_z(_z);
            			}
            		}
HXDLIN(1038)		_this_w = (int)0;
HXDLIN(1038)		_this__construct = false;
HXDLIN(1038)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,-(_this_x),-(_this_y),-(_this_z),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,down,return )

 ::phoenix::Vector Matrix_obj::left(){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_1042_left)
HXDLIN(1042)		Float _this_z;
HXDLIN(1042)		Float _this_y;
HXDLIN(1042)		Float _this_x;
HXDLIN(1042)		Float _this_w;
HXDLIN(1042)		 ::Dynamic _this_listen_z;
HXDLIN(1042)		 ::Dynamic _this_listen_y;
HXDLIN(1042)		 ::Dynamic _this_listen_x;
HXDLIN(1042)		bool _this_ignore_listeners;
HXDLIN(1042)		bool _this__construct;
HXDLIN(1042)		Float _x = this->elements->__get((int)0);
HXDLIN(1042)		Float _y = this->elements->__get((int)1);
HXDLIN(1042)		Float _z = this->elements->__get((int)2);
HXDLIN(1042)		_this_x = ((Float)0);
HXDLIN(1042)		_this_y = ((Float)0);
HXDLIN(1042)		_this_z = ((Float)0);
HXDLIN(1042)		_this_w = ((Float)0);
HXDLIN(1042)		_this_ignore_listeners = false;
HXDLIN(1042)		_this__construct = false;
HXDLIN(1042)		_this__construct = true;
HXDLIN(1042)		_this_x = _x;
HXDLIN(1042)		if (!(_this__construct)) {
HXDLIN(1042)			bool _hx_tmp;
HXDLIN(1042)			if (hx::IsNotNull( _this_listen_x )) {
HXDLIN(1042)				_hx_tmp = !(_this_ignore_listeners);
            			}
            			else {
HXDLIN(1042)				_hx_tmp = false;
            			}
HXDLIN(1042)			if (_hx_tmp) {
HXDLIN(1042)				_this_listen_x(_x);
            			}
            		}
HXDLIN(1042)		_this_y = _y;
HXDLIN(1042)		if (!(_this__construct)) {
HXDLIN(1042)			bool _hx_tmp1;
HXDLIN(1042)			if (hx::IsNotNull( _this_listen_y )) {
HXDLIN(1042)				_hx_tmp1 = !(_this_ignore_listeners);
            			}
            			else {
HXDLIN(1042)				_hx_tmp1 = false;
            			}
HXDLIN(1042)			if (_hx_tmp1) {
HXDLIN(1042)				_this_listen_y(_y);
            			}
            		}
HXDLIN(1042)		_this_z = _z;
HXDLIN(1042)		if (!(_this__construct)) {
HXDLIN(1042)			bool _hx_tmp2;
HXDLIN(1042)			if (hx::IsNotNull( _this_listen_z )) {
HXDLIN(1042)				_hx_tmp2 = !(_this_ignore_listeners);
            			}
            			else {
HXDLIN(1042)				_hx_tmp2 = false;
            			}
HXDLIN(1042)			if (_hx_tmp2) {
HXDLIN(1042)				_this_listen_z(_z);
            			}
            		}
HXDLIN(1042)		_this_w = (int)0;
HXDLIN(1042)		_this__construct = false;
HXDLIN(1042)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,-(_this_x),-(_this_y),-(_this_z),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,left,return )

 ::phoenix::Vector Matrix_obj::right(){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_1046_right)
HXDLIN(1046)		Float _hx_tmp = this->elements->__get((int)0);
HXDLIN(1046)		Float _hx_tmp1 = this->elements->__get((int)1);
HXDLIN(1046)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,this->elements->__get((int)2),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,right,return )

 ::phoenix::Vector Matrix_obj::backward(){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_1050_backward)
HXDLIN(1050)		Float _hx_tmp = this->elements->__get((int)8);
HXDLIN(1050)		Float _hx_tmp1 = this->elements->__get((int)9);
HXDLIN(1050)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,this->elements->__get((int)10),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,backward,return )

 ::phoenix::Vector Matrix_obj::forward(){
            	HX_GC_STACKFRAME(&_hx_pos_90f5eb100c831620_1054_forward)
HXDLIN(1054)		Float _this_z;
HXDLIN(1054)		Float _this_y;
HXDLIN(1054)		Float _this_x;
HXDLIN(1054)		Float _this_w;
HXDLIN(1054)		 ::Dynamic _this_listen_z;
HXDLIN(1054)		 ::Dynamic _this_listen_y;
HXDLIN(1054)		 ::Dynamic _this_listen_x;
HXDLIN(1054)		bool _this_ignore_listeners;
HXDLIN(1054)		bool _this__construct;
HXDLIN(1054)		Float _x = this->elements->__get((int)8);
HXDLIN(1054)		Float _y = this->elements->__get((int)9);
HXDLIN(1054)		Float _z = this->elements->__get((int)10);
HXDLIN(1054)		_this_x = ((Float)0);
HXDLIN(1054)		_this_y = ((Float)0);
HXDLIN(1054)		_this_z = ((Float)0);
HXDLIN(1054)		_this_w = ((Float)0);
HXDLIN(1054)		_this_ignore_listeners = false;
HXDLIN(1054)		_this__construct = false;
HXDLIN(1054)		_this__construct = true;
HXDLIN(1054)		_this_x = _x;
HXDLIN(1054)		if (!(_this__construct)) {
HXDLIN(1054)			bool _hx_tmp;
HXDLIN(1054)			if (hx::IsNotNull( _this_listen_x )) {
HXDLIN(1054)				_hx_tmp = !(_this_ignore_listeners);
            			}
            			else {
HXDLIN(1054)				_hx_tmp = false;
            			}
HXDLIN(1054)			if (_hx_tmp) {
HXDLIN(1054)				_this_listen_x(_x);
            			}
            		}
HXDLIN(1054)		_this_y = _y;
HXDLIN(1054)		if (!(_this__construct)) {
HXDLIN(1054)			bool _hx_tmp1;
HXDLIN(1054)			if (hx::IsNotNull( _this_listen_y )) {
HXDLIN(1054)				_hx_tmp1 = !(_this_ignore_listeners);
            			}
            			else {
HXDLIN(1054)				_hx_tmp1 = false;
            			}
HXDLIN(1054)			if (_hx_tmp1) {
HXDLIN(1054)				_this_listen_y(_y);
            			}
            		}
HXDLIN(1054)		_this_z = _z;
HXDLIN(1054)		if (!(_this__construct)) {
HXDLIN(1054)			bool _hx_tmp2;
HXDLIN(1054)			if (hx::IsNotNull( _this_listen_z )) {
HXDLIN(1054)				_hx_tmp2 = !(_this_ignore_listeners);
            			}
            			else {
HXDLIN(1054)				_hx_tmp2 = false;
            			}
HXDLIN(1054)			if (_hx_tmp2) {
HXDLIN(1054)				_this_listen_z(_z);
            			}
            		}
HXDLIN(1054)		_this_w = (int)0;
HXDLIN(1054)		_this__construct = false;
HXDLIN(1054)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,-(_this_x),-(_this_y),-(_this_z),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,forward,return )


hx::ObjectPtr< Matrix_obj > Matrix_obj::__new(hx::Null< Float >  __o_n11,hx::Null< Float >  __o_n12,hx::Null< Float >  __o_n13,hx::Null< Float >  __o_n14,hx::Null< Float >  __o_n21,hx::Null< Float >  __o_n22,hx::Null< Float >  __o_n23,hx::Null< Float >  __o_n24,hx::Null< Float >  __o_n31,hx::Null< Float >  __o_n32,hx::Null< Float >  __o_n33,hx::Null< Float >  __o_n34,hx::Null< Float >  __o_n41,hx::Null< Float >  __o_n42,hx::Null< Float >  __o_n43,hx::Null< Float >  __o_n44) {
	hx::ObjectPtr< Matrix_obj > __this = new Matrix_obj();
	__this->__construct(__o_n11,__o_n12,__o_n13,__o_n14,__o_n21,__o_n22,__o_n23,__o_n24,__o_n31,__o_n32,__o_n33,__o_n34,__o_n41,__o_n42,__o_n43,__o_n44);
	return __this;
}

hx::ObjectPtr< Matrix_obj > Matrix_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_n11,hx::Null< Float >  __o_n12,hx::Null< Float >  __o_n13,hx::Null< Float >  __o_n14,hx::Null< Float >  __o_n21,hx::Null< Float >  __o_n22,hx::Null< Float >  __o_n23,hx::Null< Float >  __o_n24,hx::Null< Float >  __o_n31,hx::Null< Float >  __o_n32,hx::Null< Float >  __o_n33,hx::Null< Float >  __o_n34,hx::Null< Float >  __o_n41,hx::Null< Float >  __o_n42,hx::Null< Float >  __o_n43,hx::Null< Float >  __o_n44) {
	Matrix_obj *__this = (Matrix_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Matrix_obj), true, "phoenix.Matrix"));
	*(void **)__this = Matrix_obj::_hx_vtable;
	__this->__construct(__o_n11,__o_n12,__o_n13,__o_n14,__o_n21,__o_n22,__o_n23,__o_n24,__o_n31,__o_n32,__o_n33,__o_n34,__o_n41,__o_n42,__o_n43,__o_n44);
	return __this;
}

Matrix_obj::Matrix_obj()
{
}

void Matrix_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Matrix);
	HX_MARK_MEMBER_NAME(elements,"elements");
	HX_MARK_MEMBER_NAME(_float32array,"_float32array");
	HX_MARK_MEMBER_NAME(_transform,"_transform");
	HX_MARK_END_CLASS();
}

void Matrix_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(elements,"elements");
	HX_VISIT_MEMBER_NAME(_float32array,"_float32array");
	HX_VISIT_MEMBER_NAME(_transform,"_transform");
}

hx::Val Matrix_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { return hx::Val( up_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"M11") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M11() ); }
		if (HX_FIELD_EQ(inName,"M21") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M21() ); }
		if (HX_FIELD_EQ(inName,"M31") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M31() ); }
		if (HX_FIELD_EQ(inName,"M41") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M41() ); }
		if (HX_FIELD_EQ(inName,"M12") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M12() ); }
		if (HX_FIELD_EQ(inName,"M22") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M22() ); }
		if (HX_FIELD_EQ(inName,"M32") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M32() ); }
		if (HX_FIELD_EQ(inName,"M42") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M42() ); }
		if (HX_FIELD_EQ(inName,"M13") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M13() ); }
		if (HX_FIELD_EQ(inName,"M23") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M23() ); }
		if (HX_FIELD_EQ(inName,"M33") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M33() ); }
		if (HX_FIELD_EQ(inName,"M43") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M43() ); }
		if (HX_FIELD_EQ(inName,"M14") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M14() ); }
		if (HX_FIELD_EQ(inName,"M24") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M24() ); }
		if (HX_FIELD_EQ(inName,"M34") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M34() ); }
		if (HX_FIELD_EQ(inName,"M44") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_M44() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"down") ) { return hx::Val( down_dyn() ); }
		if (HX_FIELD_EQ(inName,"left") ) { return hx::Val( left_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"make2D") ) { return hx::Val( make2D_dyn() ); }
		if (HX_FIELD_EQ(inName,"lookAt") ) { return hx::Val( lookAt_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_M11") ) { return hx::Val( get_M11_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M21") ) { return hx::Val( get_M21_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M31") ) { return hx::Val( get_M31_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M41") ) { return hx::Val( get_M41_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M12") ) { return hx::Val( get_M12_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M22") ) { return hx::Val( get_M22_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M32") ) { return hx::Val( get_M32_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M42") ) { return hx::Val( get_M42_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M13") ) { return hx::Val( get_M13_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M23") ) { return hx::Val( get_M23_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M33") ) { return hx::Val( get_M33_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M43") ) { return hx::Val( get_M43_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M14") ) { return hx::Val( get_M14_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M24") ) { return hx::Val( get_M24_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M34") ) { return hx::Val( get_M34_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_M44") ) { return hx::Val( get_M44_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M11") ) { return hx::Val( set_M11_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M21") ) { return hx::Val( set_M21_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M31") ) { return hx::Val( set_M31_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M41") ) { return hx::Val( set_M41_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M12") ) { return hx::Val( set_M12_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M22") ) { return hx::Val( set_M22_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M32") ) { return hx::Val( set_M32_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M42") ) { return hx::Val( set_M42_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M13") ) { return hx::Val( set_M13_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M23") ) { return hx::Val( set_M23_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M33") ) { return hx::Val( set_M33_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M43") ) { return hx::Val( set_M43_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M14") ) { return hx::Val( set_M14_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M24") ) { return hx::Val( set_M24_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M34") ) { return hx::Val( set_M34_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_M44") ) { return hx::Val( set_M44_dyn() ); }
		if (HX_FIELD_EQ(inName,"inverse") ) { return hx::Val( inverse_dyn() ); }
		if (HX_FIELD_EQ(inName,"compose") ) { return hx::Val( compose_dyn() ); }
		if (HX_FIELD_EQ(inName,"toArray") ) { return hx::Val( toArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"forward") ) { return hx::Val( forward_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"elements") ) { return hx::Val( elements ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"identity") ) { return hx::Val( identity_dyn() ); }
		if (HX_FIELD_EQ(inName,"multiply") ) { return hx::Val( multiply_dyn() ); }
		if (HX_FIELD_EQ(inName,"backward") ) { return hx::Val( backward_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transpose") ) { return hx::Val( transpose_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeScale") ) { return hx::Val( makeScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn() ); }
		if (HX_FIELD_EQ(inName,"fromArray") ) { return hx::Val( fromArray_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getInverse") ) { return hx::Val( getInverse_dyn() ); }
		if (HX_FIELD_EQ(inName,"_transform") ) { return hx::Val( _transform ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getPosition") ) { return hx::Val( getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"determinant") ) { return hx::Val( determinant_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeFrustum") ) { return hx::Val( makeFrustum_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"float32array") ) { return hx::Val( float32array_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyPosition") ) { return hx::Val( copyPosition_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_float32array") ) { return hx::Val( _float32array ); }
		if (HX_FIELD_EQ(inName,"makeRotationX") ) { return hx::Val( makeRotationX_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeRotationY") ) { return hx::Val( makeRotationY_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeRotationZ") ) { return hx::Val( makeRotationZ_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"multiplyScalar") ) { return hx::Val( multiplyScalar_dyn() ); }
		if (HX_FIELD_EQ(inName,"flattenToArray") ) { return hx::Val( flattenToArray_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"extractRotation") ) { return hx::Val( extractRotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"multiplyToArray") ) { return hx::Val( multiplyToArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeTranslation") ) { return hx::Val( makeTranslation_dyn() ); }
		if (HX_FIELD_EQ(inName,"makePerspective") ) { return hx::Val( makePerspective_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"multiplyMatrices") ) { return hx::Val( multiplyMatrices_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeRotationAxis") ) { return hx::Val( makeRotationAxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeOrthographic") ) { return hx::Val( makeOrthographic_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getMaxScaleOnAxis") ) { return hx::Val( getMaxScaleOnAxis_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"compose_with_origin") ) { return hx::Val( compose_with_origin_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"multiplyVector3Array") ) { return hx::Val( multiplyVector3Array_dyn() ); }
		if (HX_FIELD_EQ(inName,"flattenToArrayOffset") ) { return hx::Val( flattenToArrayOffset_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"makeRotationFromEuler") ) { return hx::Val( makeRotationFromEuler_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"makeRotationFromQuaternion") ) { return hx::Val( makeRotationFromQuaternion_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Matrix_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"M11") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M11(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M21") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M21(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M31") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M31(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M41") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M41(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M12") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M12(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M22") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M22(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M32") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M32(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M42") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M42(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M13") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M13(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M23") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M23(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M33") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M33(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M43") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M43(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M14") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M14(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M24") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M24(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M34") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M34(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"M44") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_M44(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"elements") ) { elements=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_transform") ) { _transform=inValue.Cast<  ::phoenix::MatrixTransform >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_float32array") ) { _float32array=inValue.Cast<  ::snow::api::buffers::ArrayBufferView >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Matrix_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("elements","\x37","\x36","\xc4","\x83"));
	outFields->push(HX_HCSTRING("_float32array","\x5d","\x19","\x56","\x17"));
	outFields->push(HX_HCSTRING("M11","\x6d","\x98","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M21","\x4c","\x99","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M31","\x2b","\x9a","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M41","\x0a","\x9b","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M12","\x6e","\x98","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M22","\x4d","\x99","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M32","\x2c","\x9a","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M42","\x0b","\x9b","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M13","\x6f","\x98","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M23","\x4e","\x99","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M33","\x2d","\x9a","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M43","\x0c","\x9b","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M14","\x70","\x98","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M24","\x4f","\x99","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M34","\x2e","\x9a","\x3a","\x00"));
	outFields->push(HX_HCSTRING("M44","\x0d","\x9b","\x3a","\x00"));
	outFields->push(HX_HCSTRING("_transform","\x2d","\xa9","\x35","\xa1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Matrix_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(Matrix_obj,elements),HX_HCSTRING("elements","\x37","\x36","\xc4","\x83")},
	{hx::fsObject /*::snow::api::buffers::ArrayBufferView*/ ,(int)offsetof(Matrix_obj,_float32array),HX_HCSTRING("_float32array","\x5d","\x19","\x56","\x17")},
	{hx::fsObject /*::phoenix::MatrixTransform*/ ,(int)offsetof(Matrix_obj,_transform),HX_HCSTRING("_transform","\x2d","\xa9","\x35","\xa1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Matrix_obj_sStaticStorageInfo = 0;
#endif

static ::String Matrix_obj_sMemberFields[] = {
	HX_HCSTRING("elements","\x37","\x36","\xc4","\x83"),
	HX_HCSTRING("_float32array","\x5d","\x19","\x56","\x17"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_M11","\x04","\x61","\xaf","\x26"),
	HX_HCSTRING("get_M21","\xe3","\x61","\xaf","\x26"),
	HX_HCSTRING("get_M31","\xc2","\x62","\xaf","\x26"),
	HX_HCSTRING("get_M41","\xa1","\x63","\xaf","\x26"),
	HX_HCSTRING("get_M12","\x05","\x61","\xaf","\x26"),
	HX_HCSTRING("get_M22","\xe4","\x61","\xaf","\x26"),
	HX_HCSTRING("get_M32","\xc3","\x62","\xaf","\x26"),
	HX_HCSTRING("get_M42","\xa2","\x63","\xaf","\x26"),
	HX_HCSTRING("get_M13","\x06","\x61","\xaf","\x26"),
	HX_HCSTRING("get_M23","\xe5","\x61","\xaf","\x26"),
	HX_HCSTRING("get_M33","\xc4","\x62","\xaf","\x26"),
	HX_HCSTRING("get_M43","\xa3","\x63","\xaf","\x26"),
	HX_HCSTRING("get_M14","\x07","\x61","\xaf","\x26"),
	HX_HCSTRING("get_M24","\xe6","\x61","\xaf","\x26"),
	HX_HCSTRING("get_M34","\xc5","\x62","\xaf","\x26"),
	HX_HCSTRING("get_M44","\xa4","\x63","\xaf","\x26"),
	HX_HCSTRING("set_M11","\x10","\xf2","\xb0","\x19"),
	HX_HCSTRING("set_M21","\xef","\xf2","\xb0","\x19"),
	HX_HCSTRING("set_M31","\xce","\xf3","\xb0","\x19"),
	HX_HCSTRING("set_M41","\xad","\xf4","\xb0","\x19"),
	HX_HCSTRING("set_M12","\x11","\xf2","\xb0","\x19"),
	HX_HCSTRING("set_M22","\xf0","\xf2","\xb0","\x19"),
	HX_HCSTRING("set_M32","\xcf","\xf3","\xb0","\x19"),
	HX_HCSTRING("set_M42","\xae","\xf4","\xb0","\x19"),
	HX_HCSTRING("set_M13","\x12","\xf2","\xb0","\x19"),
	HX_HCSTRING("set_M23","\xf1","\xf2","\xb0","\x19"),
	HX_HCSTRING("set_M33","\xd0","\xf3","\xb0","\x19"),
	HX_HCSTRING("set_M43","\xaf","\xf4","\xb0","\x19"),
	HX_HCSTRING("set_M14","\x13","\xf2","\xb0","\x19"),
	HX_HCSTRING("set_M24","\xf2","\xf2","\xb0","\x19"),
	HX_HCSTRING("set_M34","\xd1","\xf3","\xb0","\x19"),
	HX_HCSTRING("set_M44","\xb0","\xf4","\xb0","\x19"),
	HX_HCSTRING("float32array","\x7e","\x86","\xe7","\x34"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("make2D","\x40","\x3d","\xcb","\xb5"),
	HX_HCSTRING("copyPosition","\x7e","\x55","\xd3","\xc6"),
	HX_HCSTRING("getPosition","\x5f","\x63","\xee","\xf0"),
	HX_HCSTRING("extractRotation","\x9f","\x57","\xab","\x93"),
	HX_HCSTRING("makeRotationFromEuler","\xb3","\x48","\x57","\xc4"),
	HX_HCSTRING("makeRotationFromQuaternion","\x94","\xf1","\x49","\x1c"),
	HX_HCSTRING("lookAt","\x32","\x75","\xb5","\x61"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("multiplyMatrices","\xde","\xd3","\xc6","\x0f"),
	HX_HCSTRING("multiplyToArray","\x5a","\x4c","\x30","\x62"),
	HX_HCSTRING("multiplyScalar","\x70","\x70","\x21","\x48"),
	HX_HCSTRING("multiplyVector3Array","\xad","\x3d","\x07","\x49"),
	HX_HCSTRING("determinant","\x95","\x5d","\x15","\x32"),
	HX_HCSTRING("transpose","\x79","\x50","\x2f","\x4c"),
	HX_HCSTRING("flattenToArray","\xba","\xf6","\xa3","\xfa"),
	HX_HCSTRING("flattenToArrayOffset","\xed","\xc9","\x6c","\x82"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	HX_HCSTRING("inverse","\xb0","\x4b","\xf1","\x3d"),
	HX_HCSTRING("getInverse","\xba","\xd1","\x52","\x8d"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("getMaxScaleOnAxis","\x7c","\xa2","\x24","\x49"),
	HX_HCSTRING("makeTranslation","\xa3","\x19","\x9f","\xb9"),
	HX_HCSTRING("makeRotationX","\x8c","\x51","\x98","\x65"),
	HX_HCSTRING("makeRotationY","\x8d","\x51","\x98","\x65"),
	HX_HCSTRING("makeRotationZ","\x8e","\x51","\x98","\x65"),
	HX_HCSTRING("makeRotationAxis","\x0d","\xb0","\x61","\x01"),
	HX_HCSTRING("makeScale","\xbc","\x45","\x67","\x4c"),
	HX_HCSTRING("compose_with_origin","\x52","\xdc","\x80","\x1d"),
	HX_HCSTRING("compose","\x12","\xb9","\x73","\x83"),
	HX_HCSTRING("_transform","\x2d","\xa9","\x35","\xa1"),
	HX_HCSTRING("decompose","\xb1","\xc3","\xa7","\x7a"),
	HX_HCSTRING("makeFrustum","\x14","\x6f","\x84","\x14"),
	HX_HCSTRING("makePerspective","\x2e","\xce","\xee","\xef"),
	HX_HCSTRING("makeOrthographic","\x7e","\xcd","\x12","\xe8"),
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("up","\x5b","\x66","\x00","\x00"),
	HX_HCSTRING("down","\x62","\xf8","\x6d","\x42"),
	HX_HCSTRING("left","\x07","\x08","\xb0","\x47"),
	HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"),
	HX_HCSTRING("backward","\xe3","\xdb","\x18","\x27"),
	HX_HCSTRING("forward","\xc5","\xe1","\xca","\xe5"),
	::String(null()) };

static void Matrix_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix_obj::__mClass,"__mClass");
};

#endif

hx::Class Matrix_obj::__mClass;

void Matrix_obj::__register()
{
	hx::Object *dummy = new Matrix_obj;
	Matrix_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.Matrix","\x60","\x61","\xa9","\x39");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Matrix_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Matrix_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
