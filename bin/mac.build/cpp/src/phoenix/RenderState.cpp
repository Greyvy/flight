// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_9484b18fc186cc5e
#define INCLUDED_9484b18fc186cc5e
#include "linc_opengl.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_opengl_GLObject
#include <opengl/GLObject.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_RenderState
#include <phoenix/RenderState.h>
#endif
#ifndef INCLUDED_phoenix_RenderTarget
#include <phoenix/RenderTarget.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_26290f53443c5aa4_7_new,"phoenix.RenderState","new",0x0858464e,"phoenix.RenderState.new","phoenix/RenderState.hx",7,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_24_enable,"phoenix.RenderState","enable",0xbe4b2155,"phoenix.RenderState.enable","phoenix/RenderState.hx",24,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_46_disable,"phoenix.RenderState","disable",0xf6996ed6,"phoenix.RenderState.disable","phoenix/RenderState.hx",46,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_69_depth_function,"phoenix.RenderState","depth_function",0x7ee58de6,"phoenix.RenderState.depth_function","phoenix/RenderState.hx",69,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_75_scissor,"phoenix.RenderState","scissor",0x4a282d0a,"phoenix.RenderState.scissor","phoenix/RenderState.hx",75,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_95_viewport,"phoenix.RenderState","viewport",0xf04897b8,"phoenix.RenderState.viewport","phoenix/RenderState.hx",95,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_123_bindFramebuffer,"phoenix.RenderState","bindFramebuffer",0xb7b6691e,"phoenix.RenderState.bindFramebuffer","phoenix/RenderState.hx",123,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_136_bindRenderbuffer,"phoenix.RenderState","bindRenderbuffer",0x8e71a385,"phoenix.RenderState.bindRenderbuffer","phoenix/RenderState.hx",136,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_148_useProgram,"phoenix.RenderState","useProgram",0xf236b0cf,"phoenix.RenderState.useProgram","phoenix/RenderState.hx",148,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_156_activeTexture,"phoenix.RenderState","activeTexture",0x817a7f23,"phoenix.RenderState.activeTexture","phoenix/RenderState.hx",156,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_163_bindTexture,"phoenix.RenderState","bindTexture",0xb8c2f08c,"phoenix.RenderState.bindTexture","phoenix/RenderState.hx",163,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_173_bindTexture2D,"phoenix.RenderState","bindTexture2D",0xa3c9575e,"phoenix.RenderState.bindTexture2D","phoenix/RenderState.hx",173,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_181_bindTextureCube,"phoenix.RenderState","bindTextureCube",0x35b68fa1,"phoenix.RenderState.bindTextureCube","phoenix/RenderState.hx",181,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_189_lineWidth,"phoenix.RenderState","lineWidth",0xec9c55e0,"phoenix.RenderState.lineWidth","phoenix/RenderState.hx",189,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_197_depthMask,"phoenix.RenderState","depthMask",0x7a1837fd,"phoenix.RenderState.depthMask","phoenix/RenderState.hx",197,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_171_boot,"phoenix.RenderState","boot",0x3cfe3e84,"phoenix.RenderState.boot","phoenix/RenderState.hx",171,0x46f51ca3)
HX_LOCAL_STACK_FRAME(_hx_pos_26290f53443c5aa4_179_boot,"phoenix.RenderState","boot",0x3cfe3e84,"phoenix.RenderState.boot","phoenix/RenderState.hx",179,0x46f51ca3)
namespace phoenix{

void RenderState_obj::__construct( ::phoenix::Renderer _renderer){
            	HX_GC_STACKFRAME(&_hx_pos_26290f53443c5aa4_7_new)
HXLINE( 195)		this->_last_depth_mask = true;
HXLINE( 187)		this->_last_line_width = ((Float)1);
HXLINE( 154)		this->_active_texture = (int)-1;
HXLINE( 146)		this->_used_program = null();
HXLINE( 133)		this->current_renderbuffer = null();
HXLINE( 120)		this->current_framebuffer = null();
HXLINE(  67)		this->depth_func = (int)-1;
HXLINE(  15)		this->_view_target_h = ((Float)0.0);
HXLINE(  12)		this->depth_mask = true;
HXLINE(  11)		this->depth_test = false;
HXLINE(  10)		this->cull_face = false;
HXLINE(   9)		this->blending = true;
HXLINE(  19)		this->renderer = _renderer;
HXLINE(  20)		this->_viewport =  ::phoenix::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)0);
            	}

Dynamic RenderState_obj::__CreateEmpty() { return new RenderState_obj; }

void *RenderState_obj::_hx_vtable = 0;

Dynamic RenderState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RenderState_obj > _hx_result = new RenderState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool RenderState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x56ee730c;
}

void RenderState_obj::enable(int what){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_24_enable)
HXDLIN(  24)		switch((int)(what)){
            			case (int)2884: {
HXLINE(  31)				if (!(this->cull_face)) {
HXLINE(  32)					this->cull_face = true;
HXLINE(  33)					glEnable((int)2884);
            				}
            			}
            			break;
            			case (int)2929: {
HXLINE(  36)				if (hx::IsGreater(  ::Dynamic(::Luxe_obj::core->app->config->__Field(HX_("render",56,6b,29,05),hx::paccDynamic))->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic),(int)0 )) {
HXLINE(  37)					if (!(this->depth_test)) {
HXLINE(  38)						this->depth_test = true;
HXLINE(  39)						glEnable((int)2929);
            					}
            				}
            			}
            			break;
            			case (int)3042: {
HXLINE(  26)				if (!(this->blending)) {
HXLINE(  27)					this->blending = true;
HXLINE(  28)					glEnable((int)3042);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,enable,(void))

void RenderState_obj::disable(int what){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_46_disable)
HXDLIN(  46)		switch((int)(what)){
            			case (int)2884: {
HXLINE(  53)				if (this->cull_face) {
HXLINE(  54)					this->cull_face = false;
HXLINE(  55)					glDisable((int)2884);
            				}
            			}
            			break;
            			case (int)2929: {
HXLINE(  58)				if (hx::IsGreater(  ::Dynamic(::Luxe_obj::core->app->config->__Field(HX_("render",56,6b,29,05),hx::paccDynamic))->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic),(int)0 )) {
HXLINE(  59)					if (this->depth_test) {
HXLINE(  60)						this->depth_test = false;
HXLINE(  61)						glDisable((int)2929);
            					}
            				}
            			}
            			break;
            			case (int)3042: {
HXLINE(  48)				if (this->blending) {
HXLINE(  49)					this->blending = false;
HXLINE(  50)					glDisable((int)3042);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,disable,(void))

void RenderState_obj::depth_function(int what){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_69_depth_function)
HXDLIN(  69)		if ((this->depth_func != what)) {
HXLINE(  70)			glDepthFunc(what);
HXLINE(  71)			this->depth_func = what;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,depth_function,(void))

void RenderState_obj::scissor(Float x,Float y,Float w,Float h){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_75_scissor)
HXLINE(  79)		Float _target_scale = ( (Float)(this->renderer->get_target()->__Field(HX_("viewport_scale",b1,b2,e9,8b),hx::paccDynamic)) );
HXLINE(  81)		x = (x * _target_scale);
HXLINE(  82)		y = (y * _target_scale);
HXLINE(  83)		w = (w * _target_scale);
HXLINE(  84)		h = (h * _target_scale);
HXLINE(  87)		int _target_h = ( (int)(this->renderer->get_target()->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) );
HXLINE(  89)		Float _y = (_target_h - (y + h));
HXLINE(  91)		{
HXLINE(  91)			int x1 = ::Std_obj::_hx_int(x);
HXDLIN(  91)			int y1 = ::Std_obj::_hx_int(_y);
HXDLIN(  91)			int width = ::Std_obj::_hx_int(w);
HXDLIN(  91)			glScissor(x1,y1,width,::Std_obj::_hx_int(h));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(RenderState_obj,scissor,(void))

void RenderState_obj::viewport(Float x,Float y,Float w,Float h){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_95_viewport)
HXLINE(  99)		Float _target_scale = ( (Float)(this->renderer->get_target()->__Field(HX_("viewport_scale",b1,b2,e9,8b),hx::paccDynamic)) );
HXLINE( 101)		x = (x * _target_scale);
HXLINE( 102)		y = (y * _target_scale);
HXLINE( 103)		w = (w * _target_scale);
HXLINE( 104)		h = (h * _target_scale);
HXLINE( 107)		int _target_h = ( (int)(this->renderer->get_target()->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) );
HXLINE( 114)		Float _y = (_target_h - (y + h));
HXLINE( 116)		{
HXLINE( 116)			int x1 = ::Std_obj::_hx_int(x);
HXDLIN( 116)			int y1 = ::Std_obj::_hx_int(_y);
HXDLIN( 116)			int width = ::Std_obj::_hx_int(w);
HXDLIN( 116)			glViewport(x1,y1,width,::Std_obj::_hx_int(h));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(RenderState_obj,viewport,(void))

void RenderState_obj::bindFramebuffer( ::opengl::GLObject buffer){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_123_bindFramebuffer)
HXDLIN( 123)		if (hx::IsNotEq( this->current_framebuffer,buffer )) {
HXLINE( 125)			if (hx::IsNull( buffer )) {
HXLINE( 125)				buffer = this->renderer->default_framebuffer;
            			}
HXLINE( 127)			int _hx_tmp;
HXDLIN( 127)			if (hx::IsNull( buffer )) {
HXLINE( 127)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 127)				_hx_tmp = buffer->id;
            			}
HXDLIN( 127)			glBindFramebuffer((int)36160,_hx_tmp);
HXLINE( 128)			this->current_framebuffer = buffer;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,bindFramebuffer,(void))

void RenderState_obj::bindRenderbuffer( ::opengl::GLObject buffer){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_136_bindRenderbuffer)
HXDLIN( 136)		if (hx::IsNotEq( this->current_renderbuffer,buffer )) {
HXLINE( 138)			if (hx::IsNull( buffer )) {
HXLINE( 138)				buffer = this->renderer->default_renderbuffer;
            			}
HXLINE( 140)			int _hx_tmp;
HXDLIN( 140)			if (hx::IsNull( buffer )) {
HXLINE( 140)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 140)				_hx_tmp = buffer->id;
            			}
HXDLIN( 140)			glBindRenderbuffer((int)36161,_hx_tmp);
HXLINE( 141)			this->current_renderbuffer = buffer;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,bindRenderbuffer,(void))

void RenderState_obj::useProgram( ::opengl::GLObject program){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_148_useProgram)
HXDLIN( 148)		if (hx::IsNotEq( this->_used_program,program )) {
HXLINE( 149)			this->_used_program = program;
HXLINE( 150)			int _hx_tmp;
HXDLIN( 150)			if (hx::IsNull( program )) {
HXLINE( 150)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 150)				_hx_tmp = program->id;
            			}
HXDLIN( 150)			glUseProgram(_hx_tmp);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,useProgram,(void))

void RenderState_obj::activeTexture(int val){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_156_activeTexture)
HXDLIN( 156)		if ((this->_active_texture != val)) {
HXLINE( 157)			glActiveTexture(val);
HXLINE( 158)			this->_active_texture = val;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,activeTexture,(void))

void RenderState_obj::bindTexture(int type, ::opengl::GLObject tex){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_163_bindTexture)
HXDLIN( 163)		switch((int)(type)){
            			case (int)3553: {
HXLINE( 165)				this->bindTexture2D(tex);
            			}
            			break;
            			case (int)34067: {
HXLINE( 167)				this->bindTextureCube(tex);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderState_obj,bindTexture,(void))

void RenderState_obj::bindTexture2D( ::opengl::GLObject tex){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_173_bindTexture2D)
HXDLIN( 173)		if (hx::IsNotEq( ::phoenix::RenderState_obj::bound_texture_2D,tex )) {
HXLINE( 174)			::phoenix::RenderState_obj::bound_texture_2D = tex;
HXLINE( 175)			int _hx_tmp;
HXDLIN( 175)			if (hx::IsNull( tex )) {
HXLINE( 175)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 175)				_hx_tmp = tex->id;
            			}
HXDLIN( 175)			glBindTexture((int)3553,_hx_tmp);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,bindTexture2D,(void))

void RenderState_obj::bindTextureCube( ::opengl::GLObject tex){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_181_bindTextureCube)
HXDLIN( 181)		if (hx::IsNotEq( ::phoenix::RenderState_obj::bound_texture_cube,tex )) {
HXLINE( 182)			::phoenix::RenderState_obj::bound_texture_cube = tex;
HXLINE( 183)			int _hx_tmp;
HXDLIN( 183)			if (hx::IsNull( tex )) {
HXLINE( 183)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 183)				_hx_tmp = tex->id;
            			}
HXDLIN( 183)			glBindTexture((int)34067,_hx_tmp);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,bindTextureCube,(void))

void RenderState_obj::lineWidth(Float _width){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_189_lineWidth)
HXDLIN( 189)		if ((this->_last_line_width != _width)) {
HXLINE( 190)			this->_last_line_width = _width;
HXLINE( 191)			glLineWidth(_width);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,lineWidth,(void))

void RenderState_obj::depthMask(bool _enable){
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_197_depthMask)
HXDLIN( 197)		if ((this->_last_depth_mask != _enable)) {
HXLINE( 198)			this->_last_depth_mask = _enable;
HXLINE( 199)			glDepthMask(_enable);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,depthMask,(void))

 ::opengl::GLObject RenderState_obj::bound_texture_2D;

 ::opengl::GLObject RenderState_obj::bound_texture_cube;


hx::ObjectPtr< RenderState_obj > RenderState_obj::__new( ::phoenix::Renderer _renderer) {
	hx::ObjectPtr< RenderState_obj > __this = new RenderState_obj();
	__this->__construct(_renderer);
	return __this;
}

hx::ObjectPtr< RenderState_obj > RenderState_obj::__alloc(hx::Ctx *_hx_ctx, ::phoenix::Renderer _renderer) {
	RenderState_obj *__this = (RenderState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RenderState_obj), true, "phoenix.RenderState"));
	*(void **)__this = RenderState_obj::_hx_vtable;
	__this->__construct(_renderer);
	return __this;
}

RenderState_obj::RenderState_obj()
{
}

void RenderState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RenderState);
	HX_MARK_MEMBER_NAME(blending,"blending");
	HX_MARK_MEMBER_NAME(cull_face,"cull_face");
	HX_MARK_MEMBER_NAME(depth_test,"depth_test");
	HX_MARK_MEMBER_NAME(depth_mask,"depth_mask");
	HX_MARK_MEMBER_NAME(renderer,"renderer");
	HX_MARK_MEMBER_NAME(_viewport,"_viewport");
	HX_MARK_MEMBER_NAME(_view_target_h,"_view_target_h");
	HX_MARK_MEMBER_NAME(depth_func,"depth_func");
	HX_MARK_MEMBER_NAME(current_framebuffer,"current_framebuffer");
	HX_MARK_MEMBER_NAME(current_renderbuffer,"current_renderbuffer");
	HX_MARK_MEMBER_NAME(_used_program,"_used_program");
	HX_MARK_MEMBER_NAME(_active_texture,"_active_texture");
	HX_MARK_MEMBER_NAME(_last_line_width,"_last_line_width");
	HX_MARK_MEMBER_NAME(_last_depth_mask,"_last_depth_mask");
	HX_MARK_END_CLASS();
}

void RenderState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(blending,"blending");
	HX_VISIT_MEMBER_NAME(cull_face,"cull_face");
	HX_VISIT_MEMBER_NAME(depth_test,"depth_test");
	HX_VISIT_MEMBER_NAME(depth_mask,"depth_mask");
	HX_VISIT_MEMBER_NAME(renderer,"renderer");
	HX_VISIT_MEMBER_NAME(_viewport,"_viewport");
	HX_VISIT_MEMBER_NAME(_view_target_h,"_view_target_h");
	HX_VISIT_MEMBER_NAME(depth_func,"depth_func");
	HX_VISIT_MEMBER_NAME(current_framebuffer,"current_framebuffer");
	HX_VISIT_MEMBER_NAME(current_renderbuffer,"current_renderbuffer");
	HX_VISIT_MEMBER_NAME(_used_program,"_used_program");
	HX_VISIT_MEMBER_NAME(_active_texture,"_active_texture");
	HX_VISIT_MEMBER_NAME(_last_line_width,"_last_line_width");
	HX_VISIT_MEMBER_NAME(_last_depth_mask,"_last_depth_mask");
}

hx::Val RenderState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"enable") ) { return hx::Val( enable_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"disable") ) { return hx::Val( disable_dyn() ); }
		if (HX_FIELD_EQ(inName,"scissor") ) { return hx::Val( scissor_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"blending") ) { return hx::Val( blending ); }
		if (HX_FIELD_EQ(inName,"renderer") ) { return hx::Val( renderer ); }
		if (HX_FIELD_EQ(inName,"viewport") ) { return hx::Val( viewport_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"cull_face") ) { return hx::Val( cull_face ); }
		if (HX_FIELD_EQ(inName,"_viewport") ) { return hx::Val( _viewport ); }
		if (HX_FIELD_EQ(inName,"lineWidth") ) { return hx::Val( lineWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"depthMask") ) { return hx::Val( depthMask_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"depth_test") ) { return hx::Val( depth_test ); }
		if (HX_FIELD_EQ(inName,"depth_mask") ) { return hx::Val( depth_mask ); }
		if (HX_FIELD_EQ(inName,"depth_func") ) { return hx::Val( depth_func ); }
		if (HX_FIELD_EQ(inName,"useProgram") ) { return hx::Val( useProgram_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bindTexture") ) { return hx::Val( bindTexture_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_used_program") ) { return hx::Val( _used_program ); }
		if (HX_FIELD_EQ(inName,"activeTexture") ) { return hx::Val( activeTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"bindTexture2D") ) { return hx::Val( bindTexture2D_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_view_target_h") ) { return hx::Val( _view_target_h ); }
		if (HX_FIELD_EQ(inName,"depth_function") ) { return hx::Val( depth_function_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bindFramebuffer") ) { return hx::Val( bindFramebuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"_active_texture") ) { return hx::Val( _active_texture ); }
		if (HX_FIELD_EQ(inName,"bindTextureCube") ) { return hx::Val( bindTextureCube_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bindRenderbuffer") ) { return hx::Val( bindRenderbuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"_last_line_width") ) { return hx::Val( _last_line_width ); }
		if (HX_FIELD_EQ(inName,"_last_depth_mask") ) { return hx::Val( _last_depth_mask ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"current_framebuffer") ) { return hx::Val( current_framebuffer ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"current_renderbuffer") ) { return hx::Val( current_renderbuffer ); }
	}
	return super::__Field(inName,inCallProp);
}

bool RenderState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"bound_texture_2D") ) { outValue = ( bound_texture_2D ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"bound_texture_cube") ) { outValue = ( bound_texture_cube ); return true; }
	}
	return false;
}

hx::Val RenderState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"blending") ) { blending=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"renderer") ) { renderer=inValue.Cast<  ::phoenix::Renderer >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"cull_face") ) { cull_face=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_viewport") ) { _viewport=inValue.Cast<  ::phoenix::Rectangle >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"depth_test") ) { depth_test=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"depth_mask") ) { depth_mask=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"depth_func") ) { depth_func=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_used_program") ) { _used_program=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_view_target_h") ) { _view_target_h=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_active_texture") ) { _active_texture=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_last_line_width") ) { _last_line_width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_last_depth_mask") ) { _last_depth_mask=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"current_framebuffer") ) { current_framebuffer=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"current_renderbuffer") ) { current_renderbuffer=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool RenderState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"bound_texture_2D") ) { bound_texture_2D=ioValue.Cast<  ::opengl::GLObject >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"bound_texture_cube") ) { bound_texture_cube=ioValue.Cast<  ::opengl::GLObject >(); return true; }
	}
	return false;
}

void RenderState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("blending","\x31","\x6d","\xe6","\x6a"));
	outFields->push(HX_HCSTRING("cull_face","\x8a","\xa5","\xc9","\x67"));
	outFields->push(HX_HCSTRING("depth_test","\x4e","\x68","\x49","\xc9"));
	outFields->push(HX_HCSTRING("depth_mask","\xe8","\xe0","\xa5","\xc4"));
	outFields->push(HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2"));
	outFields->push(HX_HCSTRING("_viewport","\xc5","\x43","\x3b","\xe4"));
	outFields->push(HX_HCSTRING("_view_target_h","\x55","\x3d","\x11","\xb1"));
	outFields->push(HX_HCSTRING("depth_func","\x40","\x8b","\x14","\xc0"));
	outFields->push(HX_HCSTRING("current_framebuffer","\xa7","\x50","\x0b","\x49"));
	outFields->push(HX_HCSTRING("current_renderbuffer","\xdc","\x53","\x67","\x27"));
	outFields->push(HX_HCSTRING("_used_program","\x21","\xce","\x35","\x44"));
	outFields->push(HX_HCSTRING("_active_texture","\xc1","\xe2","\x9f","\x60"));
	outFields->push(HX_HCSTRING("_last_line_width","\x45","\x9d","\xd0","\xe1"));
	outFields->push(HX_HCSTRING("_last_depth_mask","\xf2","\xf9","\x18","\x40"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RenderState_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(RenderState_obj,blending),HX_HCSTRING("blending","\x31","\x6d","\xe6","\x6a")},
	{hx::fsBool,(int)offsetof(RenderState_obj,cull_face),HX_HCSTRING("cull_face","\x8a","\xa5","\xc9","\x67")},
	{hx::fsBool,(int)offsetof(RenderState_obj,depth_test),HX_HCSTRING("depth_test","\x4e","\x68","\x49","\xc9")},
	{hx::fsBool,(int)offsetof(RenderState_obj,depth_mask),HX_HCSTRING("depth_mask","\xe8","\xe0","\xa5","\xc4")},
	{hx::fsObject /*::phoenix::Renderer*/ ,(int)offsetof(RenderState_obj,renderer),HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2")},
	{hx::fsObject /*::phoenix::Rectangle*/ ,(int)offsetof(RenderState_obj,_viewport),HX_HCSTRING("_viewport","\xc5","\x43","\x3b","\xe4")},
	{hx::fsFloat,(int)offsetof(RenderState_obj,_view_target_h),HX_HCSTRING("_view_target_h","\x55","\x3d","\x11","\xb1")},
	{hx::fsInt,(int)offsetof(RenderState_obj,depth_func),HX_HCSTRING("depth_func","\x40","\x8b","\x14","\xc0")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(RenderState_obj,current_framebuffer),HX_HCSTRING("current_framebuffer","\xa7","\x50","\x0b","\x49")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(RenderState_obj,current_renderbuffer),HX_HCSTRING("current_renderbuffer","\xdc","\x53","\x67","\x27")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(RenderState_obj,_used_program),HX_HCSTRING("_used_program","\x21","\xce","\x35","\x44")},
	{hx::fsInt,(int)offsetof(RenderState_obj,_active_texture),HX_HCSTRING("_active_texture","\xc1","\xe2","\x9f","\x60")},
	{hx::fsFloat,(int)offsetof(RenderState_obj,_last_line_width),HX_HCSTRING("_last_line_width","\x45","\x9d","\xd0","\xe1")},
	{hx::fsBool,(int)offsetof(RenderState_obj,_last_depth_mask),HX_HCSTRING("_last_depth_mask","\xf2","\xf9","\x18","\x40")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo RenderState_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::opengl::GLObject*/ ,(void *) &RenderState_obj::bound_texture_2D,HX_HCSTRING("bound_texture_2D","\x97","\xdd","\x9d","\xfd")},
	{hx::fsObject /*::opengl::GLObject*/ ,(void *) &RenderState_obj::bound_texture_cube,HX_HCSTRING("bound_texture_cube","\xfa","\xa9","\x8a","\x27")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String RenderState_obj_sMemberFields[] = {
	HX_HCSTRING("blending","\x31","\x6d","\xe6","\x6a"),
	HX_HCSTRING("cull_face","\x8a","\xa5","\xc9","\x67"),
	HX_HCSTRING("depth_test","\x4e","\x68","\x49","\xc9"),
	HX_HCSTRING("depth_mask","\xe8","\xe0","\xa5","\xc4"),
	HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2"),
	HX_HCSTRING("_viewport","\xc5","\x43","\x3b","\xe4"),
	HX_HCSTRING("_view_target_h","\x55","\x3d","\x11","\xb1"),
	HX_HCSTRING("enable","\x83","\xae","\x87","\xf8"),
	HX_HCSTRING("disable","\xe8","\x69","\x58","\xb1"),
	HX_HCSTRING("depth_func","\x40","\x8b","\x14","\xc0"),
	HX_HCSTRING("depth_function","\x14","\xf9","\x57","\x33"),
	HX_HCSTRING("scissor","\x1c","\x28","\xe7","\x04"),
	HX_HCSTRING("viewport","\x66","\x4c","\xa5","\x9c"),
	HX_HCSTRING("current_framebuffer","\xa7","\x50","\x0b","\x49"),
	HX_HCSTRING("bindFramebuffer","\x30","\xc6","\x61","\xe7"),
	HX_HCSTRING("current_renderbuffer","\xdc","\x53","\x67","\x27"),
	HX_HCSTRING("bindRenderbuffer","\x33","\xb6","\xb7","\x14"),
	HX_HCSTRING("_used_program","\x21","\xce","\x35","\x44"),
	HX_HCSTRING("useProgram","\xfd","\x6c","\xac","\xf6"),
	HX_HCSTRING("_active_texture","\xc1","\xe2","\x9f","\x60"),
	HX_HCSTRING("activeTexture","\xb5","\x13","\xaa","\x56"),
	HX_HCSTRING("bindTexture","\x9e","\xdc","\x51","\x9b"),
	HX_HCSTRING("bindTexture2D","\xf0","\xeb","\xf8","\x78"),
	HX_HCSTRING("bindTextureCube","\xb3","\xec","\x61","\x65"),
	HX_HCSTRING("_last_line_width","\x45","\x9d","\xd0","\xe1"),
	HX_HCSTRING("lineWidth","\x72","\xb9","\x5d","\x11"),
	HX_HCSTRING("_last_depth_mask","\xf2","\xf9","\x18","\x40"),
	HX_HCSTRING("depthMask","\x8f","\x9b","\xd9","\x9e"),
	::String(null()) };

static void RenderState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RenderState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(RenderState_obj::bound_texture_2D,"bound_texture_2D");
	HX_MARK_MEMBER_NAME(RenderState_obj::bound_texture_cube,"bound_texture_cube");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RenderState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RenderState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(RenderState_obj::bound_texture_2D,"bound_texture_2D");
	HX_VISIT_MEMBER_NAME(RenderState_obj::bound_texture_cube,"bound_texture_cube");
};

#endif

hx::Class RenderState_obj::__mClass;

static ::String RenderState_obj_sStaticFields[] = {
	HX_HCSTRING("bound_texture_2D","\x97","\xdd","\x9d","\xfd"),
	HX_HCSTRING("bound_texture_cube","\xfa","\xa9","\x8a","\x27"),
	::String(null())
};

void RenderState_obj::__register()
{
	hx::Object *dummy = new RenderState_obj;
	RenderState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.RenderState","\x5c","\xc7","\xcf","\x9f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RenderState_obj::__GetStatic;
	__mClass->mSetStaticField = &RenderState_obj::__SetStatic;
	__mClass->mMarkFunc = RenderState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(RenderState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RenderState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RenderState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RenderState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RenderState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RenderState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RenderState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_171_boot)
HXDLIN( 171)		bound_texture_2D = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_26290f53443c5aa4_179_boot)
HXDLIN( 179)		bound_texture_cube = null();
            	}
}

} // end namespace phoenix
