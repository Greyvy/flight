// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_luxe_Debug
#include <luxe/Debug.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_structural_BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry
#include <luxe/structural/BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.h>
#endif
#ifndef INCLUDED_luxe_structural_BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry
#include <luxe/structural/BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.h>
#endif
#ifndef INCLUDED_phoenix_Batcher
#include <phoenix/Batcher.h>
#endif
#ifndef INCLUDED_phoenix_Camera
#include <phoenix/Camera.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_RenderPath
#include <phoenix/RenderPath.h>
#endif
#ifndef INCLUDED_phoenix_RenderState
#include <phoenix/RenderState.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_RendererStats
#include <phoenix/RendererStats.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2dfb361a86ca4067_13_new,"phoenix.RenderPath","new",0x7c190cac,"phoenix.RenderPath.new","phoenix/RenderPath.hx",13,0x9e7f7fa3)
HX_LOCAL_STACK_FRAME(_hx_pos_2dfb361a86ca4067_16_render,"phoenix.RenderPath","render",0x4d8de68a,"phoenix.RenderPath.render","phoenix/RenderPath.hx",16,0x9e7f7fa3)
namespace phoenix{

void RenderPath_obj::__construct( ::phoenix::Renderer _renderer){
            	HX_STACKFRAME(&_hx_pos_2dfb361a86ca4067_13_new)
HXDLIN(  13)		this->renderer = _renderer;
            	}

Dynamic RenderPath_obj::__CreateEmpty() { return new RenderPath_obj; }

void *RenderPath_obj::_hx_vtable = 0;

Dynamic RenderPath_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RenderPath_obj > _hx_result = new RenderPath_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool RenderPath_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7f72cfe2;
}

void RenderPath_obj::render(::Array< ::Dynamic> _batchers, ::phoenix::RendererStats _stats){
            	HX_STACKFRAME(&_hx_pos_2dfb361a86ca4067_16_render)
HXLINE(  18)		int c = _batchers->length;
HXLINE(  19)		int i = (int)0;
HXLINE(  20)		while((i < c)){
HXLINE(  21)			 ::phoenix::Batcher batch = _batchers->__get(i).StaticCast<  ::phoenix::Batcher >();
HXLINE(  22)			if (batch->enabled) {
HXLINE(  25)				if ((batch->name != HX_("",00,00,00,00))) {
HXLINE(  25)					::Luxe_obj::debug->start(batch->name,null());
            				}
HXDLIN(  25)				batch->draw_calls = (int)0;
HXDLIN(  25)				batch->vert_count = (int)0;
HXDLIN(  25)				batch->emitter->emit((int)1,batch);
HXDLIN(  25)				{
HXLINE(  25)					batch->view->process();
HXDLIN(  25)					batch->renderer->state->viewport(batch->view->viewport->x,batch->view->viewport->y,batch->view->viewport->w,batch->view->viewport->h);
            				}
HXDLIN(  25)				batch->batch(false);
HXDLIN(  25)				batch->emitter->emit((int)2,batch);
HXDLIN(  25)				 ::phoenix::RendererStats _stats1 = batch->renderer->stats;
HXDLIN(  25)				 ::phoenix::RendererStats _stats2 = _stats1;
HXDLIN(  25)				 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node = batch->geometry->root;
HXDLIN(  25)				int _hx_tmp;
HXDLIN(  25)				if (hx::IsNull( _node )) {
HXLINE(  25)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE(  25)					_hx_tmp = _node->nodecount;
            				}
HXDLIN(  25)				_stats2->geometry_count = (_stats2->geometry_count + (_hx_tmp * batch->show_stats));
HXDLIN(  25)				 ::phoenix::RendererStats _stats3 = _stats1;
HXDLIN(  25)				_stats3->dynamic_batched_count = (_stats3->dynamic_batched_count + (batch->dynamic_batched_count * batch->show_stats));
HXDLIN(  25)				 ::phoenix::RendererStats _stats4 = _stats1;
HXDLIN(  25)				_stats4->static_batched_count = (_stats4->static_batched_count + (batch->static_batched_count * batch->show_stats));
HXDLIN(  25)				 ::phoenix::RendererStats _stats5 = _stats1;
HXDLIN(  25)				_stats5->visible_count = (_stats5->visible_count + (batch->visible_count * batch->show_stats));
HXDLIN(  25)				 ::phoenix::RendererStats _stats6 = _stats1;
HXDLIN(  25)				_stats6->draw_calls = (_stats6->draw_calls + (batch->draw_calls * batch->show_stats));
HXDLIN(  25)				 ::phoenix::RendererStats _stats7 = _stats1;
HXDLIN(  25)				_stats7->vert_count = (_stats7->vert_count + (batch->vert_count * batch->show_stats));
HXDLIN(  25)				if ((batch->name != HX_("",00,00,00,00))) {
HXLINE(  25)					::Luxe_obj::debug->end(batch->name);
            				}
            			}
HXLINE(  28)			batch = null();
HXLINE(  29)			i = (i + (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,render,(void))


hx::ObjectPtr< RenderPath_obj > RenderPath_obj::__new( ::phoenix::Renderer _renderer) {
	hx::ObjectPtr< RenderPath_obj > __this = new RenderPath_obj();
	__this->__construct(_renderer);
	return __this;
}

hx::ObjectPtr< RenderPath_obj > RenderPath_obj::__alloc(hx::Ctx *_hx_ctx, ::phoenix::Renderer _renderer) {
	RenderPath_obj *__this = (RenderPath_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RenderPath_obj), true, "phoenix.RenderPath"));
	*(void **)__this = RenderPath_obj::_hx_vtable;
	__this->__construct(_renderer);
	return __this;
}

RenderPath_obj::RenderPath_obj()
{
}

void RenderPath_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RenderPath);
	HX_MARK_MEMBER_NAME(renderer,"renderer");
	HX_MARK_END_CLASS();
}

void RenderPath_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(renderer,"renderer");
}

hx::Val RenderPath_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderer") ) { return hx::Val( renderer ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RenderPath_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"renderer") ) { renderer=inValue.Cast<  ::phoenix::Renderer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RenderPath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RenderPath_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::Renderer*/ ,(int)offsetof(RenderPath_obj,renderer),HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RenderPath_obj_sStaticStorageInfo = 0;
#endif

static ::String RenderPath_obj_sMemberFields[] = {
	HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	::String(null()) };

static void RenderPath_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RenderPath_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RenderPath_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RenderPath_obj::__mClass,"__mClass");
};

#endif

hx::Class RenderPath_obj::__mClass;

void RenderPath_obj::__register()
{
	hx::Object *dummy = new RenderPath_obj;
	RenderPath_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.RenderPath","\xba","\x86","\x1a","\x7e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RenderPath_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RenderPath_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RenderPath_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RenderPath_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RenderPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RenderPath_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
