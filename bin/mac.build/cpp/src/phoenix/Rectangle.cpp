// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d09402ed0fde553_4_new,"phoenix.Rectangle","new",0x7f8dbf62,"phoenix.Rectangle.new","phoenix/Rectangle.hx",4,0x42e13fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_9d09402ed0fde553_29_toString,"phoenix.Rectangle","toString",0x02893a6a,"phoenix.Rectangle.toString","phoenix/Rectangle.hx",29,0x42e13fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_9d09402ed0fde553_40_point_inside,"phoenix.Rectangle","point_inside",0x75cee809,"phoenix.Rectangle.point_inside","phoenix/Rectangle.hx",40,0x42e13fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_9d09402ed0fde553_51_overlaps,"phoenix.Rectangle","overlaps",0x0f453cca,"phoenix.Rectangle.overlaps","phoenix/Rectangle.hx",51,0x42e13fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_9d09402ed0fde553_71_clone,"phoenix.Rectangle","clone",0x7d3846df,"phoenix.Rectangle.clone","phoenix/Rectangle.hx",71,0x42e13fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_9d09402ed0fde553_76_equal,"phoenix.Rectangle","equal",0xa7580336,"phoenix.Rectangle.equal","phoenix/Rectangle.hx",76,0x42e13fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_9d09402ed0fde553_86_copy_from,"phoenix.Rectangle","copy_from",0xf6a391f6,"phoenix.Rectangle.copy_from","phoenix/Rectangle.hx",86,0x42e13fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_9d09402ed0fde553_95_set,"phoenix.Rectangle","set",0x7f918aa4,"phoenix.Rectangle.set","phoenix/Rectangle.hx",95,0x42e13fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_9d09402ed0fde553_117_set_x,"phoenix.Rectangle","set_x",0xaf04cedd,"phoenix.Rectangle.set_x","phoenix/Rectangle.hx",117,0x42e13fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_9d09402ed0fde553_129_set_y,"phoenix.Rectangle","set_y",0xaf04cede,"phoenix.Rectangle.set_y","phoenix/Rectangle.hx",129,0x42e13fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_9d09402ed0fde553_141_set_w,"phoenix.Rectangle","set_w",0xaf04cedc,"phoenix.Rectangle.set_w","phoenix/Rectangle.hx",141,0x42e13fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_9d09402ed0fde553_153_set_h,"phoenix.Rectangle","set_h",0xaf04cecd,"phoenix.Rectangle.set_h","phoenix/Rectangle.hx",153,0x42e13fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_9d09402ed0fde553_33_listen,"phoenix.Rectangle","listen",0xf5b1a685,"phoenix.Rectangle.listen","phoenix/Rectangle.hx",33,0x42e13fcf)
namespace phoenix{

void Rectangle_obj::__construct( ::Dynamic __o__x, ::Dynamic __o__y, ::Dynamic __o__w, ::Dynamic __o__h){
 ::Dynamic _x = __o__x.Default(0);
 ::Dynamic _y = __o__y.Default(0);
 ::Dynamic _w = __o__w.Default(0);
 ::Dynamic _h = __o__h.Default(0);
            	HX_STACKFRAME(&_hx_pos_9d09402ed0fde553_4_new)
HXLINE(  11)		this->ignore_listeners = false;
HXLINE(   9)		this->h = ((Float)0);
HXLINE(   8)		this->w = ((Float)0);
HXLINE(   7)		this->y = ((Float)0);
HXLINE(   6)		this->x = ((Float)0);
HXLINE(  20)		this->set_x(_x);
HXLINE(  21)		this->set_y(_y);
HXLINE(  22)		this->set_w(_w);
HXLINE(  23)		this->set_h(_h);
            	}

Dynamic Rectangle_obj::__CreateEmpty() { return new Rectangle_obj; }

void *Rectangle_obj::_hx_vtable = 0;

Dynamic Rectangle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rectangle_obj > _hx_result = new Rectangle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Rectangle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7a9fef28;
}

::String Rectangle_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_9d09402ed0fde553_29_toString)
HXDLIN(  29)		return ((((((((HX_("{ x:",47,ef,65,51) + this->x) + HX_(", y:",15,15,2e,1d)) + this->y) + HX_(", w:",57,13,2e,1d)) + this->w) + HX_(", h:",46,06,2e,1d)) + this->h) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,toString,return )

bool Rectangle_obj::point_inside( ::phoenix::Vector _p){
            	HX_STACKFRAME(&_hx_pos_9d09402ed0fde553_40_point_inside)
HXLINE(  42)		if ((_p->x < this->x)) {
HXLINE(  42)			return false;
            		}
HXLINE(  43)		if ((_p->y < this->y)) {
HXLINE(  43)			return false;
            		}
HXLINE(  44)		Float _p1 = _p->x;
HXDLIN(  44)		if ((_p1 > (this->x + this->w))) {
HXLINE(  44)			return false;
            		}
HXLINE(  45)		Float _p2 = _p->y;
HXDLIN(  45)		if ((_p2 > (this->y + this->h))) {
HXLINE(  45)			return false;
            		}
HXLINE(  47)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,point_inside,return )

bool Rectangle_obj::overlaps( ::phoenix::Rectangle _other){
            	HX_STACKFRAME(&_hx_pos_9d09402ed0fde553_51_overlaps)
HXLINE(  53)		if (hx::IsNull( _other )) {
HXLINE(  54)			return false;
            		}
HXLINE(  58)		bool _hx_tmp;
HXDLIN(  58)		bool _hx_tmp1;
HXDLIN(  58)		bool _hx_tmp2;
HXDLIN(  58)		Float _hx_tmp3 = this->x;
HXDLIN(  58)		if ((_hx_tmp3 < (_other->x + _other->w))) {
HXLINE(  59)			Float _hx_tmp4 = this->y;
HXLINE(  58)			_hx_tmp2 = (_hx_tmp4 < (_other->y + _other->h));
            		}
            		else {
HXLINE(  58)			_hx_tmp2 = false;
            		}
HXDLIN(  58)		if (_hx_tmp2) {
HXLINE(  58)			_hx_tmp1 = ((this->x + this->w) > _other->x);
            		}
            		else {
HXLINE(  58)			_hx_tmp1 = false;
            		}
HXDLIN(  58)		if (_hx_tmp1) {
HXLINE(  58)			_hx_tmp = ((this->y + this->h) > _other->y);
            		}
            		else {
HXLINE(  58)			_hx_tmp = false;
            		}
HXDLIN(  58)		if (_hx_tmp) {
HXLINE(  63)			return true;
            		}
HXLINE(  66)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,overlaps,return )

 ::phoenix::Rectangle Rectangle_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_9d09402ed0fde553_71_clone)
HXDLIN(  71)		return  ::phoenix::Rectangle_obj::__alloc( HX_CTX ,this->x,this->y,this->w,this->h);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,clone,return )

bool Rectangle_obj::equal( ::phoenix::Rectangle _other){
            	HX_STACKFRAME(&_hx_pos_9d09402ed0fde553_76_equal)
HXLINE(  78)		if (hx::IsNull( _other )) {
HXLINE(  79)			return false;
            		}
HXLINE(  82)		bool _hx_tmp;
HXDLIN(  82)		bool _hx_tmp1;
HXDLIN(  82)		if ((this->x == _other->x)) {
HXLINE(  82)			_hx_tmp1 = (this->y == _other->y);
            		}
            		else {
HXLINE(  82)			_hx_tmp1 = false;
            		}
HXDLIN(  82)		if (_hx_tmp1) {
HXLINE(  82)			_hx_tmp = (this->w == _other->w);
            		}
            		else {
HXLINE(  82)			_hx_tmp = false;
            		}
HXDLIN(  82)		if (_hx_tmp) {
HXLINE(  82)			return (this->h == _other->h);
            		}
            		else {
HXLINE(  82)			return false;
            		}
HXDLIN(  82)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,equal,return )

void Rectangle_obj::copy_from( ::phoenix::Rectangle _rect){
            	HX_STACKFRAME(&_hx_pos_9d09402ed0fde553_86_copy_from)
HXLINE(  88)		this->set_x(_rect->x);
HXLINE(  89)		this->set_y(_rect->y);
HXLINE(  90)		this->set_w(_rect->w);
HXLINE(  91)		this->set_h(_rect->h);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,copy_from,(void))

 ::phoenix::Rectangle Rectangle_obj::set( ::Dynamic _x, ::Dynamic _y, ::Dynamic _w, ::Dynamic _h){
            	HX_STACKFRAME(&_hx_pos_9d09402ed0fde553_95_set)
HXLINE(  97)		Float _setx = this->x;
HXLINE(  98)		Float _sety = this->y;
HXLINE(  99)		Float _setw = this->w;
HXLINE( 100)		Float _seth = this->h;
HXLINE( 103)		if (hx::IsNotNull( _x )) {
HXLINE( 103)			_setx = _x;
            		}
HXLINE( 104)		if (hx::IsNotNull( _y )) {
HXLINE( 104)			_sety = _y;
            		}
HXLINE( 105)		if (hx::IsNotNull( _w )) {
HXLINE( 105)			_setw = _w;
            		}
HXLINE( 106)		if (hx::IsNotNull( _h )) {
HXLINE( 106)			_seth = _h;
            		}
HXLINE( 108)		this->set_x(_setx);
HXLINE( 109)		this->set_y(_sety);
HXLINE( 110)		this->set_w(_setw);
HXLINE( 111)		this->set_h(_seth);
HXLINE( 113)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,set,return )

Float Rectangle_obj::set_x(Float _x){
            	HX_STACKFRAME(&_hx_pos_9d09402ed0fde553_117_set_x)
HXLINE( 119)		this->x = _x;
HXLINE( 121)		bool _hx_tmp;
HXDLIN( 121)		if (hx::IsNotNull( this->listen_x )) {
HXLINE( 121)			_hx_tmp = !(this->ignore_listeners);
            		}
            		else {
HXLINE( 121)			_hx_tmp = false;
            		}
HXDLIN( 121)		if (_hx_tmp) {
HXLINE( 122)			this->listen_x(_x);
            		}
HXLINE( 125)		return this->x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_x,return )

Float Rectangle_obj::set_y(Float _y){
            	HX_STACKFRAME(&_hx_pos_9d09402ed0fde553_129_set_y)
HXLINE( 131)		this->y = _y;
HXLINE( 133)		bool _hx_tmp;
HXDLIN( 133)		if (hx::IsNotNull( this->listen_y )) {
HXLINE( 133)			_hx_tmp = !(this->ignore_listeners);
            		}
            		else {
HXLINE( 133)			_hx_tmp = false;
            		}
HXDLIN( 133)		if (_hx_tmp) {
HXLINE( 134)			this->listen_y(_y);
            		}
HXLINE( 137)		return this->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_y,return )

Float Rectangle_obj::set_w(Float _w){
            	HX_STACKFRAME(&_hx_pos_9d09402ed0fde553_141_set_w)
HXLINE( 143)		this->w = _w;
HXLINE( 145)		bool _hx_tmp;
HXDLIN( 145)		if (hx::IsNotNull( this->listen_w )) {
HXLINE( 145)			_hx_tmp = !(this->ignore_listeners);
            		}
            		else {
HXLINE( 145)			_hx_tmp = false;
            		}
HXDLIN( 145)		if (_hx_tmp) {
HXLINE( 146)			this->listen_w(_w);
            		}
HXLINE( 149)		return this->w;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_w,return )

Float Rectangle_obj::set_h(Float _h){
            	HX_STACKFRAME(&_hx_pos_9d09402ed0fde553_153_set_h)
HXLINE( 155)		this->h = _h;
HXLINE( 157)		bool _hx_tmp;
HXDLIN( 157)		if (hx::IsNotNull( this->listen_h )) {
HXLINE( 157)			_hx_tmp = !(this->ignore_listeners);
            		}
            		else {
HXLINE( 157)			_hx_tmp = false;
            		}
HXDLIN( 157)		if (_hx_tmp) {
HXLINE( 158)			this->listen_h(_h);
            		}
HXLINE( 161)		return this->h;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_h,return )

void Rectangle_obj::listen( ::phoenix::Rectangle _r, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_9d09402ed0fde553_33_listen)
HXLINE(  34)		_r->listen_x = listener;
HXLINE(  35)		_r->listen_y = listener;
HXLINE(  36)		_r->listen_w = listener;
HXLINE(  37)		_r->listen_h = listener;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,listen,(void))


hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__new( ::Dynamic __o__x, ::Dynamic __o__y, ::Dynamic __o__w, ::Dynamic __o__h) {
	hx::ObjectPtr< Rectangle_obj > __this = new Rectangle_obj();
	__this->__construct(__o__x,__o__y,__o__w,__o__h);
	return __this;
}

hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o__x, ::Dynamic __o__y, ::Dynamic __o__w, ::Dynamic __o__h) {
	Rectangle_obj *__this = (Rectangle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Rectangle_obj), true, "phoenix.Rectangle"));
	*(void **)__this = Rectangle_obj::_hx_vtable;
	__this->__construct(__o__x,__o__y,__o__w,__o__h);
	return __this;
}

Rectangle_obj::Rectangle_obj()
{
}

void Rectangle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Rectangle);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(w,"w");
	HX_MARK_MEMBER_NAME(h,"h");
	HX_MARK_MEMBER_NAME(ignore_listeners,"ignore_listeners");
	HX_MARK_MEMBER_NAME(listen_x,"listen_x");
	HX_MARK_MEMBER_NAME(listen_y,"listen_y");
	HX_MARK_MEMBER_NAME(listen_w,"listen_w");
	HX_MARK_MEMBER_NAME(listen_h,"listen_h");
	HX_MARK_END_CLASS();
}

void Rectangle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(w,"w");
	HX_VISIT_MEMBER_NAME(h,"h");
	HX_VISIT_MEMBER_NAME(ignore_listeners,"ignore_listeners");
	HX_VISIT_MEMBER_NAME(listen_x,"listen_x");
	HX_VISIT_MEMBER_NAME(listen_y,"listen_y");
	HX_VISIT_MEMBER_NAME(listen_w,"listen_w");
	HX_VISIT_MEMBER_NAME(listen_h,"listen_h");
}

hx::Val Rectangle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"w") ) { return hx::Val( w ); }
		if (HX_FIELD_EQ(inName,"h") ) { return hx::Val( h ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"equal") ) { return hx::Val( equal_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_w") ) { return hx::Val( set_w_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_h") ) { return hx::Val( set_h_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listen_x") ) { return hx::Val( listen_x ); }
		if (HX_FIELD_EQ(inName,"listen_y") ) { return hx::Val( listen_y ); }
		if (HX_FIELD_EQ(inName,"listen_w") ) { return hx::Val( listen_w ); }
		if (HX_FIELD_EQ(inName,"listen_h") ) { return hx::Val( listen_h ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"overlaps") ) { return hx::Val( overlaps_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copy_from") ) { return hx::Val( copy_from_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"point_inside") ) { return hx::Val( point_inside_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"ignore_listeners") ) { return hx::Val( ignore_listeners ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Rectangle_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"listen") ) { outValue = listen_dyn(); return true; }
	}
	return false;
}

hx::Val Rectangle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< Float >()) );x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< Float >()) );y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"w") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_w(inValue.Cast< Float >()) );w=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"h") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_h(inValue.Cast< Float >()) );h=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listen_x") ) { listen_x=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listen_y") ) { listen_y=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listen_w") ) { listen_w=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listen_h") ) { listen_h=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"ignore_listeners") ) { ignore_listeners=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Rectangle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("w","\x77","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("h","\x68","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("ignore_listeners","\xd2","\x64","\x1e","\xf7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Rectangle_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Rectangle_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,w),HX_HCSTRING("w","\x77","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,h),HX_HCSTRING("h","\x68","\x00","\x00","\x00")},
	{hx::fsBool,(int)offsetof(Rectangle_obj,ignore_listeners),HX_HCSTRING("ignore_listeners","\xd2","\x64","\x1e","\xf7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Rectangle_obj,listen_x),HX_HCSTRING("listen_x","\x40","\xfb","\x31","\x38")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Rectangle_obj,listen_y),HX_HCSTRING("listen_y","\x41","\xfb","\x31","\x38")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Rectangle_obj,listen_w),HX_HCSTRING("listen_w","\x3f","\xfb","\x31","\x38")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Rectangle_obj,listen_h),HX_HCSTRING("listen_h","\x30","\xfb","\x31","\x38")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Rectangle_obj_sStaticStorageInfo = 0;
#endif

static ::String Rectangle_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("w","\x77","\x00","\x00","\x00"),
	HX_HCSTRING("h","\x68","\x00","\x00","\x00"),
	HX_HCSTRING("ignore_listeners","\xd2","\x64","\x1e","\xf7"),
	HX_HCSTRING("listen_x","\x40","\xfb","\x31","\x38"),
	HX_HCSTRING("listen_y","\x41","\xfb","\x31","\x38"),
	HX_HCSTRING("listen_w","\x3f","\xfb","\x31","\x38"),
	HX_HCSTRING("listen_h","\x30","\xfb","\x31","\x38"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("point_inside","\x4b","\xc7","\xa9","\x1d"),
	HX_HCSTRING("overlaps","\x0c","\xd3","\x2a","\x45"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("equal","\xb4","\xcf","\x82","\x72"),
	HX_HCSTRING("copy_from","\x74","\x75","\xa1","\xe9"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_w","\x5a","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_h","\x4b","\x9b","\x2f","\x7a"),
	::String(null()) };

static void Rectangle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rectangle_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rectangle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rectangle_obj::__mClass,"__mClass");
};

#endif

hx::Class Rectangle_obj::__mClass;

static ::String Rectangle_obj_sStaticFields[] = {
	HX_HCSTRING("listen","\x47","\xc8","\xf9","\xef"),
	::String(null())
};

void Rectangle_obj::__register()
{
	hx::Object *dummy = new Rectangle_obj;
	Rectangle_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.Rectangle","\x70","\x26","\xe6","\x3e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Rectangle_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Rectangle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Rectangle_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Rectangle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Rectangle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rectangle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rectangle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rectangle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
