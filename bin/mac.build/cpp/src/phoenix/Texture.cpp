// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_9484b18fc186cc5e
#define INCLUDED_9484b18fc186cc5e
#include "linc_opengl.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_luxe_utils_Utils
#include <luxe/utils/Utils.h>
#endif
#ifndef INCLUDED_opengl_GLObject
#include <opengl/GLObject.h>
#endif
#ifndef INCLUDED_phoenix_RenderState
#include <phoenix/RenderState.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Asset
#include <snow/systems/assets/Asset.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetImage
#include <snow/systems/assets/AssetImage.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Assets
#include <snow/systems/assets/Assets.h>
#endif
#ifndef INCLUDED_snow_types_ImageData
#include <snow/types/ImageData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0ce57af3e84b809c_21_new,"phoenix.Texture","new",0x3a7497ce,"phoenix.Texture.new","phoenix/Texture.hx",21,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_114_memory_use,"phoenix.Texture","memory_use",0x0ecf731b,"phoenix.Texture.memory_use","phoenix/Texture.hx",114,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_124_fetch,"phoenix.Texture","fetch",0x976e1328,"phoenix.Texture.fetch","phoenix/Texture.hx",124,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_159_submit,"phoenix.Texture","submit",0x4611696a,"phoenix.Texture.submit","phoenix/Texture.hx",159,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_190_generate_mipmaps,"phoenix.Texture","generate_mipmaps",0x90c8cb73,"phoenix.Texture.generate_mipmaps","phoenix/Texture.hx",190,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_201_bind,"phoenix.Texture","bind",0xe3a4ae8f,"phoenix.Texture.bind","phoenix/Texture.hx",201,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_223_reload,"phoenix.Texture","reload",0xafea64ab,"phoenix.Texture.reload","phoenix/Texture.hx",223,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_234_reload,"phoenix.Texture","reload",0xafea64ab,"phoenix.Texture.reload","phoenix/Texture.hx",234,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_217_reload,"phoenix.Texture","reload",0xafea64ab,"phoenix.Texture.reload","phoenix/Texture.hx",217,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_211_reload,"phoenix.Texture","reload",0xafea64ab,"phoenix.Texture.reload","phoenix/Texture.hx",211,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_245_from_asset,"phoenix.Texture","from_asset",0x4513646d,"phoenix.Texture.from_asset","phoenix/Texture.hx",245,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_271_clear,"phoenix.Texture","clear",0xe1cf707b,"phoenix.Texture.clear","phoenix/Texture.hx",271,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_282_create_texture_id,"phoenix.Texture","create_texture_id",0x413c1f90,"phoenix.Texture.create_texture_id","phoenix/Texture.hx",282,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_286_apply_props,"phoenix.Texture","apply_props",0x7258600d,"phoenix.Texture.apply_props","phoenix/Texture.hx",286,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_295_apply_default_options,"phoenix.Texture","apply_default_options",0x6788cd7d,"phoenix.Texture.apply_default_options","phoenix/Texture.hx",295,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_337_set_clamp_s,"phoenix.Texture","set_clamp_s",0x9c7a0780,"phoenix.Texture.set_clamp_s","phoenix/Texture.hx",337,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_347_set_clamp_t,"phoenix.Texture","set_clamp_t",0x9c7a0781,"phoenix.Texture.set_clamp_t","phoenix/Texture.hx",347,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_357_set_filter_min,"phoenix.Texture","set_filter_min",0xbef6d65a,"phoenix.Texture.set_filter_min","phoenix/Texture.hx",357,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_367_set_filter_mag,"phoenix.Texture","set_filter_mag",0xbef6cf5b,"phoenix.Texture.set_filter_mag","phoenix/Texture.hx",367,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_381_apply_clamp,"phoenix.Texture","apply_clamp",0xf220eb98,"phoenix.Texture.apply_clamp","phoenix/Texture.hx",381,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_387_apply_filter,"phoenix.Texture","apply_filter",0x6ad6307b,"phoenix.Texture.apply_filter","phoenix/Texture.hx",387,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_391_toString,"phoenix.Texture","toString",0x4a5e5a7e,"phoenix.Texture.toString","phoenix/Texture.hx",391,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_319_max_size,"phoenix.Texture","max_size",0x2844294e,"phoenix.Texture.max_size","phoenix/Texture.hx",319,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_7cb5fedbedb4bd73_138_dump_asset_info,"phoenix.Texture","dump_asset_info",0x0ba2cd36,"phoenix.Texture.dump_asset_info","luxe/Log.hx",138,0xe5312153)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_408_type_name,"phoenix.Texture","type_name",0xcd64871e,"phoenix.Texture.type_name","phoenix/Texture.hx",408,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_415_filter_name,"phoenix.Texture","filter_name",0xbf1058e0,"phoenix.Texture.filter_name","phoenix/Texture.hx",415,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_426_clamp_name,"phoenix.Texture","clamp_name",0x93b18fa1,"phoenix.Texture.clamp_name","phoenix/Texture.hx",426,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_25_boot,"phoenix.Texture","boot",0xe3a93d04,"phoenix.Texture.boot","phoenix/Texture.hx",25,0xc84e46a3)
HX_LOCAL_STACK_FRAME(_hx_pos_0ce57af3e84b809c_26_boot,"phoenix.Texture","boot",0xe3a93d04,"phoenix.Texture.boot","phoenix/Texture.hx",26,0xc84e46a3)
namespace phoenix{

void Texture_obj::__construct( ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_21_new)
HXLINE(  66)		this->load_premultiply_alpha = false;
HXLINE(  52)		this->height = (int)-1;
HXLINE(  50)		this->width = (int)-1;
HXLINE(  48)		this->height_actual = (int)-1;
HXLINE(  46)		this->width_actual = (int)-1;
HXLINE(  43)		this->compressed = false;
HXLINE(  33)		this->border = (int)0;
HXLINE(  31)		this->slot = (int)0;
HXLINE(  70)		if (hx::IsNull( _options )) {
HXLINE(  70)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("_options was null",3f,38,24,a1) + ((HX_(" ( ",18,6b,18,00) + HX_("Texture create requires non-null options",18,4f,fd,21)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE(  72)		if (hx::IsNull( _options->__Field(HX_("resource_type",0b,87,30,9c),hx::paccDynamic) )) {
HXLINE(  72)			_options->__SetField(HX_("resource_type",0b,87,30,9c),(int)4,hx::paccDynamic);
            		}
HXLINE(  74)		super::__construct(_options);
HXLINE(  78)		if (hx::IsNull( ( ( ::opengl::GLObject)(_options->__Field(HX_("texture",db,c8,e0,9e),hx::paccDynamic)) ) )) {
HXLINE(  78)			_options->__SetField(HX_("texture",db,c8,e0,9e),this->create_texture_id(),hx::paccDynamic);
            		}
HXLINE(  80)		this->texture = ( ( ::opengl::GLObject)(_options->__Field(HX_("texture",db,c8,e0,9e),hx::paccDynamic)) );
HXLINE(  82)		this->bind();
HXLINE(  84)		this->apply_default_options(_options);
HXLINE(  87)		if (hx::IsNotNull( ( ( ::snow::api::buffers::ArrayBufferView)(_options->__Field(HX_("pixels",2d,ef,a9,8c),hx::paccDynamic)) ) )) {
HXLINE(  88)			if (hx::IsNull( _options->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic) )) {
HXLINE(  88)				HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("_options.width was null",e7,ac,34,95) + ((HX_(" ( ",18,6b,18,00) + HX_("Texture create with pixels requires both width and height",2f,f2,e8,8d)) + HX_(" )",09,1c,00,00)))));
            			}
HXLINE(  89)			if (hx::IsNull( _options->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic) )) {
HXLINE(  89)				HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("_options.height was null",a8,fa,74,e1) + ((HX_(" ( ",18,6b,18,00) + HX_("Texture create with pixels requires both width and height",2f,f2,e8,8d)) + HX_(" )",09,1c,00,00)))));
            			}
            		}
HXLINE(  92)		bool _hx_tmp;
HXDLIN(  92)		if (hx::IsNull( _options->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic) )) {
HXLINE(  92)			_hx_tmp = hx::IsNotNull( _options->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic) );
            		}
            		else {
HXLINE(  92)			_hx_tmp = true;
            		}
HXDLIN(  92)		if (_hx_tmp) {
HXLINE(  95)			if (hx::IsNull( _options->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic) )) {
HXLINE(  95)				HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("_options.height was null",a8,fa,74,e1) + ((HX_(" ( ",18,6b,18,00) + HX_("Texture requires both width and height, only width was given in construct options",12,6f,62,11)) + HX_(" )",09,1c,00,00)))));
            			}
HXLINE(  96)			if (hx::IsNull( _options->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic) )) {
HXLINE(  96)				HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("_options.width was null",e7,ac,34,95) + ((HX_(" ( ",18,6b,18,00) + HX_("Texture requires both width and height, only height was given in construct options",49,54,5c,e7)) + HX_(" )",09,1c,00,00)))));
            			}
HXLINE(  98)			this->width = (this->width_actual = ( (int)(_options->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ));
HXLINE(  99)			this->height = (this->height_actual = ( (int)(_options->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) ));
HXLINE( 101)			if (hx::IsNotNull( ( ( ::snow::api::buffers::ArrayBufferView)(_options->__Field(HX_("pixels",2d,ef,a9,8c),hx::paccDynamic)) ) )) {
HXLINE( 102)				this->submit(( ( ::snow::api::buffers::ArrayBufferView)(_options->__Field(HX_("pixels",2d,ef,a9,8c),hx::paccDynamic)) ),null(),null());
            			}
            		}
            	}

Dynamic Texture_obj::__CreateEmpty() { return new Texture_obj; }

void *Texture_obj::_hx_vtable = 0;

Dynamic Texture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Texture_obj > _hx_result = new Texture_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Texture_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x04186c8c) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x04186c8c;
	} else {
		return inClassId==(int)0x40d63fd6;
	}
}

Float Texture_obj::memory_use(){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_114_memory_use)
HXDLIN( 114)		return ((this->width_actual * this->height_actual) * (int)4);
            	}


 ::snow::api::buffers::ArrayBufferView Texture_obj::fetch( ::snow::api::buffers::ArrayBufferView _into, ::Dynamic __o__x, ::Dynamic __o__y, ::Dynamic _w, ::Dynamic _h){
 ::Dynamic _x = __o__x.Default(0);
 ::Dynamic _y = __o__y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_0ce57af3e84b809c_124_fetch)
HXLINE( 126)		if (hx::IsNull( _into )) {
HXLINE( 126)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("_into was null",9f,f0,c6,46) + ((HX_(" ( ",18,6b,18,00) + HX_("Texture fetch requires a valid buffer to store the pixels.",c4,af,3a,51)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 128)		if (hx::IsNull( _x )) {
HXLINE( 128)			_x = (int)0;
            		}
HXLINE( 129)		if (hx::IsNull( _y )) {
HXLINE( 129)			_y = (int)0;
            		}
HXLINE( 130)		if (hx::IsNull( _w )) {
HXLINE( 130)			_w = this->width;
            		}
HXLINE( 131)		if (hx::IsNull( _h )) {
HXLINE( 131)			_h = this->height;
            		}
HXLINE( 133)		int _required = ((_w * _h) * (int)4);
HXLINE( 135)		if ((_into->length < _required)) {
HXLINE( 135)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion((HX_("_into.length >= _required",a8,f1,91,b8) + ((HX_(" ( ",18,6b,18,00) + ((((HX_("Texture fetch requires at least ",1d,3e,77,d8) + _required) + HX_(" (w * h * 4) bytes for the pixels, you have ",45,93,41,15)) + _into->length) + HX_("!",21,00,00,00))) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 141)		int _id = linc::opengl::webgl::createFramebuffer();
HXDLIN( 141)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id);
HXDLIN( 141)		 ::opengl::GLObject fb = this1;
HXLINE( 143)		int _hx_tmp;
HXDLIN( 143)		if (hx::IsNull( fb )) {
HXLINE( 143)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 143)			_hx_tmp = fb->id;
            		}
HXDLIN( 143)		glBindFramebuffer((int)36160,_hx_tmp);
HXLINE( 144)		{
HXLINE( 144)			 ::opengl::GLObject texture = this->texture;
HXDLIN( 144)			int _hx_tmp1;
HXDLIN( 144)			if (hx::IsNull( texture )) {
HXLINE( 144)				_hx_tmp1 = (int)0;
            			}
            			else {
HXLINE( 144)				_hx_tmp1 = texture->id;
            			}
HXDLIN( 144)			glFramebufferTexture2D((int)36160,(int)36064,(int)3553,_hx_tmp1,(int)0);
            		}
HXLINE( 146)		if ((glCheckFramebufferStatus((int)36160) != (int)36053)) {
HXLINE( 146)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion(HX_("GL.checkFramebufferStatus(GL.FRAMEBUFFER) == GL.FRAMEBUFFER_COMPLETE",57,be,3b,4b)));
            		}
HXLINE( 148)		{
HXLINE( 148)			int x = _x;
HXDLIN( 148)			int y = _y;
HXDLIN( 148)			int width = _w;
HXDLIN( 148)			int height = _h;
HXDLIN( 148)			glReadPixels(x, y, width, height, (int)6408, (int)5121, (GLvoid*)(&_into->buffer[0] + _into->byteOffset));
            		}
HXLINE( 150)		int _hx_tmp2;
HXDLIN( 150)		if (hx::IsNull( ( ( ::opengl::GLObject)(null()) ) )) {
HXLINE( 150)			_hx_tmp2 = (int)0;
            		}
            		else {
HXLINE( 150)			_hx_tmp2 = ( ( ::opengl::GLObject)(null()) )->id;
            		}
HXDLIN( 150)		glBindFramebuffer((int)36160,_hx_tmp2);
HXLINE( 151)		int _hx_tmp3;
HXDLIN( 151)		if (hx::IsNull( fb )) {
HXLINE( 151)			_hx_tmp3 = (int)0;
            		}
            		else {
HXLINE( 151)			_hx_tmp3 = fb->id;
            		}
HXDLIN( 151)		linc::opengl::webgl::deleteFramebuffer(_hx_tmp3);
HXLINE( 152)		fb = null();
HXLINE( 154)		return _into;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Texture_obj,fetch,return )

void Texture_obj::submit( ::snow::api::buffers::ArrayBufferView _pixels, ::Dynamic _target, ::Dynamic __o__level){
 ::Dynamic _level = __o__level.Default(0);
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_159_submit)
HXLINE( 161)		if (hx::IsLess( _level,(int)0 )) {
HXLINE( 161)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion((HX_("_level >= 0",4a,69,f2,b4) + ((HX_(" ( ",18,6b,18,00) + HX_("Texture submit level cannot be negative",94,46,d6,b5)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 163)		int _max = ::phoenix::Texture_obj::max_size();
HXLINE( 165)		if ((this->width_actual > _max)) {
HXLINE( 165)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion((HX_("width_actual <= _max",6b,cd,38,a2) + ((HX_(" ( ",18,6b,18,00) + ((((HX_("Texture actual width bigger than maximum hardware size (width:",db,af,16,ab) + this->width_actual) + HX_(", max:",8a,b5,dc,4c)) + _max) + HX_(")",29,00,00,00))) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 166)		if ((this->height_actual > _max)) {
HXLINE( 166)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion((HX_("height_actual <= _max",aa,c0,c6,06) + ((HX_(" ( ",18,6b,18,00) + ((((HX_("Texture actual height bigger than maximum hardware size (height:",71,70,48,d6) + this->height_actual) + HX_(", max:",8a,b5,dc,4c)) + _max) + HX_(")",29,00,00,00))) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 168)		this->bind();
HXLINE( 170)		if (hx::IsNull( _target )) {
HXLINE( 170)			_target = (int)3553;
            		}
HXLINE( 172)		{
HXLINE( 172)			int _g = this->type;
HXDLIN( 172)			if ((_g == (int)3553)) {
HXLINE( 175)				if (this->compressed) {
HXLINE( 176)					int target = _target;
HXDLIN( 176)					int level = _level;
HXDLIN( 176)					int internalformat = this->format;
HXDLIN( 176)					int width = this->width_actual;
HXDLIN( 176)					int height = this->height_actual;
HXDLIN( 176)					int border = this->border;
HXDLIN( 176)					glCompressedTexImage2D(target, level, internalformat, width, height, border, _pixels->byteLength, (GLvoid*)(&_pixels->buffer[0] + _pixels->byteOffset));
            				}
            				else {
HXLINE( 178)					int target1 = _target;
HXDLIN( 178)					int level1 = _level;
HXDLIN( 178)					int internalformat1 = this->format;
HXDLIN( 178)					int width1 = this->width_actual;
HXDLIN( 178)					int height1 = this->height_actual;
HXDLIN( 178)					int border1 = this->border;
HXDLIN( 178)					int format = this->format;
HXDLIN( 178)					int type = this->data_type;
HXDLIN( 178)					GLvoid* _data = ((_pixels != null()) ? (GLvoid*)(&_pixels->buffer[0] + _pixels->byteOffset) : NULL);
HXDLIN( 178)					glTexImage2D(target1, level1, internalformat1, width1, height1, border1, format, type, _data);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Texture_obj,submit,(void))

void Texture_obj::generate_mipmaps(){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_190_generate_mipmaps)
HXLINE( 192)		this->bind();
HXLINE( 193)		glGenerateMipmap(this->type);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,generate_mipmaps,(void))

void Texture_obj::bind(){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_201_bind)
HXLINE( 203)		 ::phoenix::RenderState _hx_tmp = ::Luxe_obj::renderer->state;
HXDLIN( 203)		_hx_tmp->activeTexture(((int)33984 + this->slot));
HXLINE( 204)		{
HXLINE( 204)			 ::phoenix::RenderState _this = ::Luxe_obj::renderer->state;
HXDLIN( 204)			 ::opengl::GLObject tex = this->texture;
HXDLIN( 204)			switch((int)(this->type)){
            				case (int)3553: {
HXLINE( 204)					_this->bindTexture2D(tex);
            				}
            				break;
            				case (int)34067: {
HXLINE( 204)					_this->bindTextureCube(tex);
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,bind,(void))

 ::snow::api::Promise Texture_obj::reload(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::phoenix::Texture,_gthis) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::phoenix::Texture,_gthis, ::Dynamic,resolve) HXARGC(1)
            			void _hx_run( ::snow::systems::assets::AssetImage _asset){
            				HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_223_reload)
HXLINE( 225)				_gthis->texture = _gthis->create_texture_id();
HXLINE( 227)				_gthis->from_asset(_asset,null());
HXLINE( 229)				_gthis->set_state((int)3);
HXLINE( 230)				resolve(_gthis);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::phoenix::Texture,_gthis, ::Dynamic,reject) HXARGC(1)
            			void _hx_run( ::Dynamic _error){
            				HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_234_reload)
HXLINE( 236)				_gthis->set_state((int)4);
HXLINE( 237)				reject(_error);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_217_reload)
HXLINE( 219)			_gthis->set_state((int)2);
HXLINE( 221)			 ::snow::api::Promise get = ::snow::systems::assets::AssetImage_obj::load(::Luxe_obj::core->app->assets,_gthis->id);
HXLINE( 223)			get->then( ::Dynamic(new _hx_Closure_0(_gthis,resolve)),null());
HXLINE( 234)			get->error( ::Dynamic(new _hx_Closure_1(_gthis,reject)));
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_0ce57af3e84b809c_211_reload)
HXDLIN( 211)		 ::phoenix::Texture _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 213)		if ((this->state == (int)6)) {
HXLINE( 213)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion((HX_("state != ResourceState.destroyed",79,be,a0,bf) + ((HX_(" ( ",18,6b,18,00) + HX_("Resource cannot reload when already destroyed",e7,f2,6d,e3)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 215)		this->clear();
HXLINE( 217)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_2(_gthis)));
            	}


void Texture_obj::from_asset( ::snow::systems::assets::AssetImage _asset,hx::Null< bool >  __o__clear_asset){
bool _clear_asset = __o__clear_asset.Default(true);
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_245_from_asset)
HXLINE( 249)		this->width = _asset->image->width;
HXLINE( 250)		this->height = _asset->image->height;
HXLINE( 251)		this->width_actual = _asset->image->width_actual;
HXLINE( 252)		this->height_actual = _asset->image->height_actual;
HXLINE( 254)		if (this->load_premultiply_alpha) {
HXLINE( 255)			::Luxe_obj::utils->premultiply_alpha(_asset->image->pixels);
            		}
HXLINE( 258)		this->submit(_asset->image->pixels,null(),null());
HXLINE( 260)		if (_clear_asset) {
HXLINE( 261)			_asset->image->pixels = null();
HXLINE( 262)			_asset = null();
            		}
HXLINE( 265)		{
HXLINE( 265)			glTexParameteri(this->type,(int)10241,this->filter_min);
HXDLIN( 265)			glTexParameteri(this->type,(int)10240,this->filter_mag);
HXDLIN( 265)			glTexParameteri(this->type,(int)10242,this->clamp_s);
HXDLIN( 265)			glTexParameteri(this->type,(int)10243,this->clamp_t);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Texture_obj,from_asset,(void))

void Texture_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_271_clear)
HXDLIN( 271)		if (hx::IsNotNull( this->texture )) {
HXLINE( 272)			 ::opengl::GLObject texture = this->texture;
HXDLIN( 272)			int _hx_tmp;
HXDLIN( 272)			if (hx::IsNull( texture )) {
HXLINE( 272)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 272)				_hx_tmp = texture->id;
            			}
HXDLIN( 272)			linc::opengl::webgl::deleteTexture(_hx_tmp);
            		}
            	}


 ::opengl::GLObject Texture_obj::create_texture_id(){
            	HX_GC_STACKFRAME(&_hx_pos_0ce57af3e84b809c_282_create_texture_id)
HXDLIN( 282)		int _id = linc::opengl::webgl::createTexture();
HXDLIN( 282)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id);
HXDLIN( 282)		return this1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,create_texture_id,return )

void Texture_obj::apply_props(){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_286_apply_props)
HXLINE( 288)		glTexParameteri(this->type,(int)10241,this->filter_min);
HXLINE( 289)		glTexParameteri(this->type,(int)10240,this->filter_mag);
HXLINE( 290)		glTexParameteri(this->type,(int)10242,this->clamp_s);
HXLINE( 291)		glTexParameteri(this->type,(int)10243,this->clamp_t);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,apply_props,(void))

void Texture_obj::apply_default_options( ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_295_apply_default_options)
HXLINE( 299)		if (hx::IsNull( _options->__Field(HX_("load_premultiply_alpha",8d,fb,f5,ac),hx::paccDynamic) )) {
HXLINE( 299)			_options->__SetField(HX_("load_premultiply_alpha",8d,fb,f5,ac),false,hx::paccDynamic);
            		}
HXDLIN( 299)		this->load_premultiply_alpha = ( (bool)(_options->__Field(HX_("load_premultiply_alpha",8d,fb,f5,ac),hx::paccDynamic)) );
HXLINE( 300)		if (hx::IsNull( _options->__Field(HX_("compressed",81,4c,da,67),hx::paccDynamic) )) {
HXLINE( 300)			_options->__SetField(HX_("compressed",81,4c,da,67),false,hx::paccDynamic);
            		}
HXDLIN( 300)		this->compressed = ( (bool)(_options->__Field(HX_("compressed",81,4c,da,67),hx::paccDynamic)) );
HXLINE( 301)		if (hx::IsNull( _options->__Field(HX_("format",37,8f,8e,fd),hx::paccDynamic) )) {
HXLINE( 301)			_options->__SetField(HX_("format",37,8f,8e,fd),(int)6408,hx::paccDynamic);
            		}
HXDLIN( 301)		this->format = ( (int)(_options->__Field(HX_("format",37,8f,8e,fd),hx::paccDynamic)) );
HXLINE( 302)		if (hx::IsNull( _options->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic) )) {
HXLINE( 302)			_options->__SetField(HX_("type",ba,f2,08,4d),(int)3553,hx::paccDynamic);
            		}
HXDLIN( 302)		this->type = ( (int)(_options->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) );
HXLINE( 303)		if (hx::IsNull( _options->__Field(HX_("data_type",2f,20,dc,b2),hx::paccDynamic) )) {
HXLINE( 303)			_options->__SetField(HX_("data_type",2f,20,dc,b2),(int)5121,hx::paccDynamic);
            		}
HXDLIN( 303)		this->data_type = ( (int)(_options->__Field(HX_("data_type",2f,20,dc,b2),hx::paccDynamic)) );
HXLINE( 308)		if (hx::IsNull( _options->__Field(HX_("filter_min",4b,b2,89,60),hx::paccDynamic) )) {
HXLINE( 308)			_options->__SetField(HX_("filter_min",4b,b2,89,60),::phoenix::Texture_obj::default_filter,hx::paccDynamic);
            		}
HXDLIN( 308)		this->set_filter_min(( (int)(_options->__Field(HX_("filter_min",4b,b2,89,60),hx::paccDynamic)) ));
HXLINE( 309)		if (hx::IsNull( _options->__Field(HX_("filter_mag",4c,ab,89,60),hx::paccDynamic) )) {
HXLINE( 309)			_options->__SetField(HX_("filter_mag",4c,ab,89,60),::phoenix::Texture_obj::default_filter,hx::paccDynamic);
            		}
HXDLIN( 309)		this->set_filter_mag(( (int)(_options->__Field(HX_("filter_mag",4c,ab,89,60),hx::paccDynamic)) ));
HXLINE( 312)		if (hx::IsNull( _options->__Field(HX_("clamp_s",ef,ba,97,65),hx::paccDynamic) )) {
HXLINE( 312)			_options->__SetField(HX_("clamp_s",ef,ba,97,65),::phoenix::Texture_obj::default_clamp,hx::paccDynamic);
            		}
HXDLIN( 312)		this->set_clamp_s(( (int)(_options->__Field(HX_("clamp_s",ef,ba,97,65),hx::paccDynamic)) ));
HXLINE( 313)		if (hx::IsNull( _options->__Field(HX_("clamp_t",f0,ba,97,65),hx::paccDynamic) )) {
HXLINE( 313)			_options->__SetField(HX_("clamp_t",f0,ba,97,65),::phoenix::Texture_obj::default_clamp,hx::paccDynamic);
            		}
HXDLIN( 313)		this->set_clamp_t(( (int)(_options->__Field(HX_("clamp_t",f0,ba,97,65),hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Texture_obj,apply_default_options,(void))

int Texture_obj::set_clamp_s(int _clamp){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_337_set_clamp_s)
HXLINE( 339)		this->bind();
HXLINE( 341)		glTexParameteri(this->type,(int)10242,_clamp);
HXLINE( 343)		return (this->clamp_s = _clamp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Texture_obj,set_clamp_s,return )

int Texture_obj::set_clamp_t(int _clamp){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_347_set_clamp_t)
HXLINE( 349)		this->bind();
HXLINE( 351)		glTexParameteri(this->type,(int)10243,_clamp);
HXLINE( 353)		return (this->clamp_t = _clamp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Texture_obj,set_clamp_t,return )

int Texture_obj::set_filter_min(int _filter){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_357_set_filter_min)
HXLINE( 359)		this->bind();
HXLINE( 361)		glTexParameteri(this->type,(int)10241,_filter);
HXLINE( 363)		return (this->filter_min = _filter);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Texture_obj,set_filter_min,return )

int Texture_obj::set_filter_mag(int _filter){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_367_set_filter_mag)
HXLINE( 369)		this->bind();
HXLINE( 371)		glTexParameteri(this->type,(int)10240,_filter);
HXLINE( 373)		return (this->filter_mag = _filter);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Texture_obj,set_filter_mag,return )

void Texture_obj::apply_clamp(int _clamp,int _type){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_381_apply_clamp)
HXDLIN( 381)		glTexParameteri(this->type,_type,_clamp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Texture_obj,apply_clamp,(void))

void Texture_obj::apply_filter(int _filter,int _type){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_387_apply_filter)
HXDLIN( 387)		glTexParameteri(this->type,_type,_filter);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Texture_obj,apply_filter,(void))

::String Texture_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_391_toString)
HXLINE( 393)		::String _type = ::phoenix::Texture_obj::type_name(this->type);
HXLINE( 394)		::String _filter_min = ::phoenix::Texture_obj::filter_name(this->filter_min);
HXLINE( 395)		::String _filter_mag = ::phoenix::Texture_obj::filter_name(this->filter_mag);
HXLINE( 396)		::String _clamp_s = ::phoenix::Texture_obj::clamp_name(this->clamp_s);
HXLINE( 397)		::String _clamp_t = ::phoenix::Texture_obj::clamp_name(this->clamp_t);
HXLINE( 399)		::String _filter = ((((HX_("filter(min: ",48,75,72,de) + _filter_min) + HX_(", mag:",bb,a6,dc,4c)) + _filter_mag) + HX_(")",29,00,00,00));
HXLINE( 400)		::String _clamp = ((((HX_("clamp(s: ",2c,0b,d5,a2) + _clamp_t) + HX_(", t: ",26,92,20,6b)) + _clamp_t) + HX_(")",29,00,00,00));
HXLINE( 401)		::String _width = ((((((((HX_("size(size: ",2e,3d,d1,1a) + this->width) + HX_("x",78,00,00,00)) + this->height) + HX_(", actual: ",28,77,9b,2b)) + this->width_actual) + HX_("x",78,00,00,00)) + this->height_actual) + HX_(")",29,00,00,00));
HXLINE( 403)		 ::opengl::GLObject this1 = this->texture;
HXDLIN( 403)		int _hx_tmp;
HXDLIN( 403)		if (hx::IsNull( this1 )) {
HXLINE( 403)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 403)			_hx_tmp = this1->id;
            		}
HXDLIN( 403)		return ((((((((((((HX_("Texture(id: ",ce,38,3f,7b) + this->id) + HX_(", tex: ",59,0d,b5,fe)) + ((HX_("GLTexture(",32,1e,d3,33) + _hx_tmp) + HX_(")",29,00,00,00))) + HX_(", type:",4c,65,e7,0b)) + _type) + HX_(", ",74,26,00,00)) + _width) + HX_(" ",20,00,00,00)) + _filter) + HX_(" ",20,00,00,00)) + _clamp) + HX_(" )",09,1c,00,00));
            	}


int Texture_obj::default_filter;

int Texture_obj::default_clamp;

int Texture_obj::max_size(){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_319_max_size)
HXDLIN( 319)		return ( (int)(linc::opengl::webgl::getParameter((int)3379)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,max_size,return )

void Texture_obj::dump_asset_info( ::snow::systems::assets::AssetImage _asset){
            	HX_STACKFRAME(&_hx_pos_7cb5fedbedb4bd73_138_dump_asset_info)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Texture_obj,dump_asset_info,(void))

::String Texture_obj::type_name(int _type){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_408_type_name)
HXDLIN( 408)		switch((int)(_type)){
            			case (int)3553: {
HXLINE( 409)				return HX_("tex_2D",6a,4e,78,d8);
            			}
            			break;
            			case (int)34067: {
HXLINE( 410)				return HX_("tex_cube",8d,35,81,42);
            			}
            			break;
            		}
HXLINE( 408)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Texture_obj,type_name,return )

::String Texture_obj::filter_name(int _filter){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_415_filter_name)
HXDLIN( 415)		switch((int)(_filter)){
            			case (int)9728: {
HXLINE( 417)				return HX_("nearest",5e,18,ca,65);
            			}
            			break;
            			case (int)9729: {
HXLINE( 416)				return HX_("linear",e5,51,a0,ec);
            			}
            			break;
            			case (int)9984: {
HXLINE( 421)				return HX_("mip_nearest_nearest",52,d4,e2,dc);
            			}
            			break;
            			case (int)9985: {
HXLINE( 419)				return HX_("mip_linear_nearest",4f,ce,4e,39);
            			}
            			break;
            			case (int)9986: {
HXLINE( 420)				return HX_("mip_nearest_linear",71,50,c6,56);
            			}
            			break;
            			case (int)9987: {
HXLINE( 418)				return HX_("mip_linear_linear",14,65,ac,43);
            			}
            			break;
            		}
HXLINE( 415)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Texture_obj,filter_name,return )

::String Texture_obj::clamp_name(int _clamp){
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_426_clamp_name)
HXDLIN( 426)		switch((int)(_clamp)){
            			case (int)10497: {
HXLINE( 428)				return HX_("repeat",5b,97,7c,06);
            			}
            			break;
            			case (int)33071: {
HXLINE( 427)				return HX_("edge",3d,c8,0e,43);
            			}
            			break;
            			case (int)33648: {
HXLINE( 429)				return HX_("mirror",3f,72,aa,55);
            			}
            			break;
            		}
HXLINE( 426)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Texture_obj,clamp_name,return )


hx::ObjectPtr< Texture_obj > Texture_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< Texture_obj > __this = new Texture_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< Texture_obj > Texture_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	Texture_obj *__this = (Texture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Texture_obj), true, "phoenix.Texture"));
	*(void **)__this = Texture_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

Texture_obj::Texture_obj()
{
}

void Texture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Texture);
	HX_MARK_MEMBER_NAME(slot,"slot");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(format,"format");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(data_type,"data_type");
	HX_MARK_MEMBER_NAME(compressed,"compressed");
	HX_MARK_MEMBER_NAME(width_actual,"width_actual");
	HX_MARK_MEMBER_NAME(height_actual,"height_actual");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(filter_min,"filter_min");
	HX_MARK_MEMBER_NAME(filter_mag,"filter_mag");
	HX_MARK_MEMBER_NAME(clamp_s,"clamp_s");
	HX_MARK_MEMBER_NAME(clamp_t,"clamp_t");
	HX_MARK_MEMBER_NAME(load_premultiply_alpha,"load_premultiply_alpha");
	 ::luxe::resource::Resource_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Texture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(slot,"slot");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(format,"format");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(data_type,"data_type");
	HX_VISIT_MEMBER_NAME(compressed,"compressed");
	HX_VISIT_MEMBER_NAME(width_actual,"width_actual");
	HX_VISIT_MEMBER_NAME(height_actual,"height_actual");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(filter_min,"filter_min");
	HX_VISIT_MEMBER_NAME(filter_mag,"filter_mag");
	HX_VISIT_MEMBER_NAME(clamp_s,"clamp_s");
	HX_VISIT_MEMBER_NAME(clamp_t,"clamp_t");
	HX_VISIT_MEMBER_NAME(load_premultiply_alpha,"load_premultiply_alpha");
	 ::luxe::resource::Resource_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Texture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"slot") ) { return hx::Val( slot ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"bind") ) { return hx::Val( bind_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"fetch") ) { return hx::Val( fetch_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return hx::Val( border ); }
		if (HX_FIELD_EQ(inName,"format") ) { return hx::Val( format ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"submit") ) { return hx::Val( submit_dyn() ); }
		if (HX_FIELD_EQ(inName,"reload") ) { return hx::Val( reload_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture ); }
		if (HX_FIELD_EQ(inName,"clamp_s") ) { return hx::Val( clamp_s ); }
		if (HX_FIELD_EQ(inName,"clamp_t") ) { return hx::Val( clamp_t ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"data_type") ) { return hx::Val( data_type ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"compressed") ) { return hx::Val( compressed ); }
		if (HX_FIELD_EQ(inName,"filter_min") ) { return hx::Val( filter_min ); }
		if (HX_FIELD_EQ(inName,"filter_mag") ) { return hx::Val( filter_mag ); }
		if (HX_FIELD_EQ(inName,"memory_use") ) { return hx::Val( memory_use_dyn() ); }
		if (HX_FIELD_EQ(inName,"from_asset") ) { return hx::Val( from_asset_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"apply_props") ) { return hx::Val( apply_props_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_clamp_s") ) { return hx::Val( set_clamp_s_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_clamp_t") ) { return hx::Val( set_clamp_t_dyn() ); }
		if (HX_FIELD_EQ(inName,"apply_clamp") ) { return hx::Val( apply_clamp_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"width_actual") ) { return hx::Val( width_actual ); }
		if (HX_FIELD_EQ(inName,"apply_filter") ) { return hx::Val( apply_filter_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"height_actual") ) { return hx::Val( height_actual ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"set_filter_min") ) { return hx::Val( set_filter_min_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_filter_mag") ) { return hx::Val( set_filter_mag_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"generate_mipmaps") ) { return hx::Val( generate_mipmaps_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"create_texture_id") ) { return hx::Val( create_texture_id_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"apply_default_options") ) { return hx::Val( apply_default_options_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"load_premultiply_alpha") ) { return hx::Val( load_premultiply_alpha ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Texture_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"max_size") ) { outValue = max_size_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"type_name") ) { outValue = type_name_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clamp_name") ) { outValue = clamp_name_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"filter_name") ) { outValue = filter_name_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"default_clamp") ) { outValue = ( default_clamp ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"default_filter") ) { outValue = ( default_filter ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dump_asset_info") ) { outValue = dump_asset_info_dyn(); return true; }
	}
	return false;
}

hx::Val Texture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"slot") ) { slot=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"format") ) { format=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clamp_s") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_clamp_s(inValue.Cast< int >()) );clamp_s=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clamp_t") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_clamp_t(inValue.Cast< int >()) );clamp_t=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"data_type") ) { data_type=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"compressed") ) { compressed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filter_min") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_filter_min(inValue.Cast< int >()) );filter_min=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filter_mag") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_filter_mag(inValue.Cast< int >()) );filter_mag=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"width_actual") ) { width_actual=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"height_actual") ) { height_actual=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"load_premultiply_alpha") ) { load_premultiply_alpha=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Texture_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"default_clamp") ) { default_clamp=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"default_filter") ) { default_filter=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Texture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("slot","\xfe","\xdd","\x55","\x4c"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("data_type","\x2f","\x20","\xdc","\xb2"));
	outFields->push(HX_HCSTRING("compressed","\x81","\x4c","\xda","\x67"));
	outFields->push(HX_HCSTRING("width_actual","\xe7","\x12","\xf5","\xde"));
	outFields->push(HX_HCSTRING("height_actual","\x26","\x2f","\x9e","\xa1"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("filter_min","\x4b","\xb2","\x89","\x60"));
	outFields->push(HX_HCSTRING("filter_mag","\x4c","\xab","\x89","\x60"));
	outFields->push(HX_HCSTRING("clamp_s","\xef","\xba","\x97","\x65"));
	outFields->push(HX_HCSTRING("clamp_t","\xf0","\xba","\x97","\x65"));
	outFields->push(HX_HCSTRING("load_premultiply_alpha","\x8d","\xfb","\xf5","\xac"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Texture_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Texture_obj,slot),HX_HCSTRING("slot","\xfe","\xdd","\x55","\x4c")},
	{hx::fsInt,(int)offsetof(Texture_obj,border),HX_HCSTRING("border","\xec","\x4c","\x1a","\x64")},
	{hx::fsObject /*::opengl::GLObject*/ ,(int)offsetof(Texture_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsInt,(int)offsetof(Texture_obj,format),HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd")},
	{hx::fsInt,(int)offsetof(Texture_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsInt,(int)offsetof(Texture_obj,data_type),HX_HCSTRING("data_type","\x2f","\x20","\xdc","\xb2")},
	{hx::fsBool,(int)offsetof(Texture_obj,compressed),HX_HCSTRING("compressed","\x81","\x4c","\xda","\x67")},
	{hx::fsInt,(int)offsetof(Texture_obj,width_actual),HX_HCSTRING("width_actual","\xe7","\x12","\xf5","\xde")},
	{hx::fsInt,(int)offsetof(Texture_obj,height_actual),HX_HCSTRING("height_actual","\x26","\x2f","\x9e","\xa1")},
	{hx::fsInt,(int)offsetof(Texture_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(Texture_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsInt,(int)offsetof(Texture_obj,filter_min),HX_HCSTRING("filter_min","\x4b","\xb2","\x89","\x60")},
	{hx::fsInt,(int)offsetof(Texture_obj,filter_mag),HX_HCSTRING("filter_mag","\x4c","\xab","\x89","\x60")},
	{hx::fsInt,(int)offsetof(Texture_obj,clamp_s),HX_HCSTRING("clamp_s","\xef","\xba","\x97","\x65")},
	{hx::fsInt,(int)offsetof(Texture_obj,clamp_t),HX_HCSTRING("clamp_t","\xf0","\xba","\x97","\x65")},
	{hx::fsBool,(int)offsetof(Texture_obj,load_premultiply_alpha),HX_HCSTRING("load_premultiply_alpha","\x8d","\xfb","\xf5","\xac")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Texture_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Texture_obj::default_filter,HX_HCSTRING("default_filter","\xb6","\x62","\x9b","\x55")},
	{hx::fsInt,(void *) &Texture_obj::default_clamp,HX_HCSTRING("default_clamp","\xbd","\x19","\x24","\x0a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Texture_obj_sMemberFields[] = {
	HX_HCSTRING("slot","\xfe","\xdd","\x55","\x4c"),
	HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"),
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("data_type","\x2f","\x20","\xdc","\xb2"),
	HX_HCSTRING("compressed","\x81","\x4c","\xda","\x67"),
	HX_HCSTRING("width_actual","\xe7","\x12","\xf5","\xde"),
	HX_HCSTRING("height_actual","\x26","\x2f","\x9e","\xa1"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("filter_min","\x4b","\xb2","\x89","\x60"),
	HX_HCSTRING("filter_mag","\x4c","\xab","\x89","\x60"),
	HX_HCSTRING("clamp_s","\xef","\xba","\x97","\x65"),
	HX_HCSTRING("clamp_t","\xf0","\xba","\x97","\x65"),
	HX_HCSTRING("load_premultiply_alpha","\x8d","\xfb","\xf5","\xac"),
	HX_HCSTRING("memory_use","\xc9","\x50","\x8c","\xfa"),
	HX_HCSTRING("fetch","\x3a","\x14","\xfa","\xfd"),
	HX_HCSTRING("submit","\x18","\x58","\x06","\x9a"),
	HX_HCSTRING("generate_mipmaps","\xa1","\x1f","\xa0","\x3c"),
	HX_HCSTRING("bind","\xbd","\xf5","\x16","\x41"),
	HX_HCSTRING("reload","\x59","\x53","\xdf","\x03"),
	HX_HCSTRING("from_asset","\x1b","\x42","\xd0","\x30"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("create_texture_id","\xa2","\x73","\xce","\xf1"),
	HX_HCSTRING("apply_props","\x9f","\x7a","\xdd","\xcb"),
	HX_HCSTRING("apply_default_options","\x8f","\x92","\x0b","\xcf"),
	HX_HCSTRING("set_clamp_s","\x12","\x22","\xff","\xf5"),
	HX_HCSTRING("set_clamp_t","\x13","\x22","\xff","\xf5"),
	HX_HCSTRING("set_filter_min","\x08","\x23","\x9f","\xf6"),
	HX_HCSTRING("set_filter_mag","\x09","\x1c","\x9f","\xf6"),
	HX_HCSTRING("apply_clamp","\x2a","\x06","\xa6","\x4b"),
	HX_HCSTRING("apply_filter","\xa9","\x55","\xc8","\x65"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Texture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Texture_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Texture_obj::default_filter,"default_filter");
	HX_MARK_MEMBER_NAME(Texture_obj::default_clamp,"default_clamp");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Texture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Texture_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Texture_obj::default_filter,"default_filter");
	HX_VISIT_MEMBER_NAME(Texture_obj::default_clamp,"default_clamp");
};

#endif

hx::Class Texture_obj::__mClass;

static ::String Texture_obj_sStaticFields[] = {
	HX_HCSTRING("default_filter","\xb6","\x62","\x9b","\x55"),
	HX_HCSTRING("default_clamp","\xbd","\x19","\x24","\x0a"),
	HX_HCSTRING("max_size","\x7c","\x9f","\x54","\x16"),
	HX_HCSTRING("dump_asset_info","\xc8","\x98","\x3d","\x87"),
	HX_HCSTRING("type_name","\x30","\x79","\xbb","\x2d"),
	HX_HCSTRING("filter_name","\x72","\x73","\x95","\x18"),
	HX_HCSTRING("clamp_name","\x4f","\x6d","\x6e","\x7f"),
	::String(null())
};

void Texture_obj::__register()
{
	hx::Object *dummy = new Texture_obj;
	Texture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.Texture","\xdc","\x58","\x05","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Texture_obj::__GetStatic;
	__mClass->mSetStaticField = &Texture_obj::__SetStatic;
	__mClass->mMarkFunc = Texture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Texture_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Texture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Texture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Texture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Texture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Texture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Texture_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_25_boot)
HXDLIN(  25)		default_filter = (int)9729;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0ce57af3e84b809c_26_boot)
HXDLIN(  26)		default_clamp = (int)33071;
            	}
}

} // end namespace phoenix
