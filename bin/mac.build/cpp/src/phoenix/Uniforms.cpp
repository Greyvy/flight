// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_9484b18fc186cc5e
#define INCLUDED_9484b18fc186cc5e
#include "linc_opengl.h"
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_opengl_GLObject
#include <opengl/GLObject.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Matrix
#include <phoenix/Matrix.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_Uniforms
#include <phoenix/Uniforms.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_Float
#include <phoenix/_Shader/Uniform_Float.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_Int
#include <phoenix/_Shader/Uniform_Int.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_phoenix_Color
#include <phoenix/_Shader/Uniform_phoenix_Color.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_phoenix_Matrix
#include <phoenix/_Shader/Uniform_phoenix_Matrix.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_phoenix_Texture
#include <phoenix/_Shader/Uniform_phoenix_Texture.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_phoenix_Vector
#include <phoenix/_Shader/Uniform_phoenix_Vector.h>
#endif
#ifndef INCLUDED_phoenix__Shader_Uniform_snow_api_buffers_Float32Array
#include <phoenix/_Shader/Uniform_snow_api_buffers_Float32Array.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_52_new,"phoenix.Uniforms","new",0x539c0590,"phoenix.Uniforms.new","phoenix/Shader.hx",52,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_55_destroy,"phoenix.Uniforms","destroy",0x9bc8ba2a,"phoenix.Uniforms.destroy","phoenix/Shader.hx",55,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_82_clear,"phoenix.Uniforms","clear",0x25ff52bd,"phoenix.Uniforms.clear","phoenix/Shader.hx",82,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_114_set_int,"phoenix.Uniforms","set_int",0x9108f3c2,"phoenix.Uniforms.set_int","phoenix/Shader.hx",114,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_129_set_float,"phoenix.Uniforms","set_float",0xe075472f,"phoenix.Uniforms.set_float","phoenix/Shader.hx",129,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_144_set_vector2,"phoenix.Uniforms","set_vector2",0xce4d4662,"phoenix.Uniforms.set_vector2","phoenix/Shader.hx",144,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_159_set_vector2_arr,"phoenix.Uniforms","set_vector2_arr",0x31c262c4,"phoenix.Uniforms.set_vector2_arr","phoenix/Shader.hx",159,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_174_set_vector3,"phoenix.Uniforms","set_vector3",0xce4d4663,"phoenix.Uniforms.set_vector3","phoenix/Shader.hx",174,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_189_set_vector3_arr,"phoenix.Uniforms","set_vector3_arr",0xc528f745,"phoenix.Uniforms.set_vector3_arr","phoenix/Shader.hx",189,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_204_set_vector4,"phoenix.Uniforms","set_vector4",0xce4d4664,"phoenix.Uniforms.set_vector4","phoenix/Shader.hx",204,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_219_set_vector4_arr,"phoenix.Uniforms","set_vector4_arr",0x588f8bc6,"phoenix.Uniforms.set_vector4_arr","phoenix/Shader.hx",219,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_234_set_matrix4,"phoenix.Uniforms","set_matrix4",0x87178f26,"phoenix.Uniforms.set_matrix4","phoenix/Shader.hx",234,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_249_set_matrix4_arr,"phoenix.Uniforms","set_matrix4_arr",0xcbda5d88,"phoenix.Uniforms.set_matrix4_arr","phoenix/Shader.hx",249,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_264_set_color,"phoenix.Uniforms","set_color",0x283af2f6,"phoenix.Uniforms.set_color","phoenix/Shader.hx",264,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_279_set_texture,"phoenix.Uniforms","set_texture",0x9291152e,"phoenix.Uniforms.set_texture","phoenix/Shader.hx",279,0x14ec92d9)
HX_LOCAL_STACK_FRAME(_hx_pos_3aad63a854e5a0b4_295_apply,"phoenix.Uniforms","apply",0x01df669e,"phoenix.Uniforms.apply","phoenix/Shader.hx",295,0x14ec92d9)
namespace phoenix{

void Uniforms_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_52_new)
HXDLIN(  52)		this->clear();
            	}

Dynamic Uniforms_obj::__CreateEmpty() { return new Uniforms_obj; }

void *Uniforms_obj::_hx_vtable = 0;

Dynamic Uniforms_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Uniforms_obj > _hx_result = new Uniforms_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Uniforms_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2dcc63ee;
}

void Uniforms_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_55_destroy)
HXLINE(  56)		this->ints = null();
HXLINE(  57)		this->floats = null();
HXLINE(  58)		this->vector2s = null();
HXLINE(  59)		this->vector2arrs = null();
HXLINE(  60)		this->vector3s = null();
HXLINE(  61)		this->vector3arrs = null();
HXLINE(  62)		this->vector4s = null();
HXLINE(  63)		this->vector4arrs = null();
HXLINE(  64)		this->matrix4s = null();
HXLINE(  65)		this->matrix4arrs = null();
HXLINE(  66)		this->colors = null();
HXLINE(  67)		this->textures = null();
HXLINE(  68)		this->dirty_ints = null();
HXLINE(  69)		this->dirty_floats = null();
HXLINE(  70)		this->dirty_vector2s = null();
HXLINE(  71)		this->dirty_vector2arrs = null();
HXLINE(  72)		this->dirty_vector3s = null();
HXLINE(  73)		this->dirty_vector3arrs = null();
HXLINE(  74)		this->dirty_vector4s = null();
HXLINE(  75)		this->dirty_vector4arrs = null();
HXLINE(  76)		this->dirty_matrix4s = null();
HXLINE(  77)		this->dirty_matrix4arrs = null();
HXLINE(  78)		this->dirty_colors = null();
HXLINE(  79)		this->dirty_textures = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Uniforms_obj,destroy,(void))

void Uniforms_obj::clear(){
            	HX_GC_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_82_clear)
HXLINE(  84)		this->destroy();
HXLINE(  86)		this->ints =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  87)		this->floats =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  88)		this->vector2s =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  89)		this->vector2arrs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  90)		this->vector3s =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  91)		this->vector3arrs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  92)		this->vector4s =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  93)		this->vector4arrs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  94)		this->matrix4s =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  95)		this->matrix4arrs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  96)		this->colors =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  97)		this->textures =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  99)		this->dirty_ints = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 100)		this->dirty_floats = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 101)		this->dirty_vector2s = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 102)		this->dirty_vector2arrs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 103)		this->dirty_vector3s = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 104)		this->dirty_vector3arrs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 105)		this->dirty_vector4s = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 106)		this->dirty_vector4arrs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 107)		this->dirty_matrix4s = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 108)		this->dirty_matrix4arrs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 109)		this->dirty_colors = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 110)		this->dirty_textures = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Uniforms_obj,clear,(void))

void Uniforms_obj::set_int(::String _name,int _value, ::opengl::GLObject _location){
            	HX_GC_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_114_set_int)
HXLINE( 116)		 ::phoenix::_Shader::Uniform_Int _int = this->ints->get(_name).StaticCast<  ::phoenix::_Shader::Uniform_Int >();
HXLINE( 118)		if (hx::IsNotNull( _int )) {
HXLINE( 119)			_int->value = _value;
            		}
            		else {
HXLINE( 121)			_int =  ::phoenix::_Shader::Uniform_Int_obj::__alloc( HX_CTX ,_name,_value,_location);
HXLINE( 122)			this->ints->set(_name,_int);
            		}
HXLINE( 125)		this->dirty_ints->push(_int);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,set_int,(void))

void Uniforms_obj::set_float(::String _name,Float _value, ::opengl::GLObject _location){
            	HX_GC_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_129_set_float)
HXLINE( 131)		 ::phoenix::_Shader::Uniform_Float _float = this->floats->get(_name).StaticCast<  ::phoenix::_Shader::Uniform_Float >();
HXLINE( 133)		if (hx::IsNotNull( _float )) {
HXLINE( 134)			_float->value = _value;
            		}
            		else {
HXLINE( 136)			_float =  ::phoenix::_Shader::Uniform_Float_obj::__alloc( HX_CTX ,_name,_value,_location);
HXLINE( 137)			this->floats->set(_name,_float);
            		}
HXLINE( 140)		this->dirty_floats->push(_float);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,set_float,(void))

void Uniforms_obj::set_vector2(::String _name, ::phoenix::Vector _value, ::opengl::GLObject _location){
            	HX_GC_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_144_set_vector2)
HXLINE( 146)		 ::phoenix::_Shader::Uniform_phoenix_Vector _vector2 = this->vector2s->get(_name).StaticCast<  ::phoenix::_Shader::Uniform_phoenix_Vector >();
HXLINE( 148)		if (hx::IsNotNull( _vector2 )) {
HXLINE( 149)			_vector2->value = _value;
            		}
            		else {
HXLINE( 151)			_vector2 =  ::phoenix::_Shader::Uniform_phoenix_Vector_obj::__alloc( HX_CTX ,_name,_value,_location);
HXLINE( 152)			this->vector2s->set(_name,_vector2);
            		}
HXLINE( 155)		this->dirty_vector2s->push(_vector2);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,set_vector2,(void))

void Uniforms_obj::set_vector2_arr(::String _name, ::snow::api::buffers::ArrayBufferView _value, ::opengl::GLObject _location){
            	HX_GC_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_159_set_vector2_arr)
HXLINE( 161)		 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array _vector2 = this->vector2arrs->get(_name).StaticCast<  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array >();
HXLINE( 163)		if (hx::IsNotNull( _vector2 )) {
HXLINE( 164)			_vector2->value = _value;
            		}
            		else {
HXLINE( 166)			_vector2 =  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array_obj::__alloc( HX_CTX ,_name,_value,_location);
HXLINE( 167)			this->vector2arrs->set(_name,_vector2);
            		}
HXLINE( 170)		this->dirty_vector2arrs->push(_vector2);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,set_vector2_arr,(void))

void Uniforms_obj::set_vector3(::String _name, ::phoenix::Vector _value, ::opengl::GLObject _location){
            	HX_GC_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_174_set_vector3)
HXLINE( 176)		 ::phoenix::_Shader::Uniform_phoenix_Vector _vector3 = this->vector3s->get(_name).StaticCast<  ::phoenix::_Shader::Uniform_phoenix_Vector >();
HXLINE( 178)		if (hx::IsNotNull( _vector3 )) {
HXLINE( 179)			_vector3->value = _value;
            		}
            		else {
HXLINE( 181)			_vector3 =  ::phoenix::_Shader::Uniform_phoenix_Vector_obj::__alloc( HX_CTX ,_name,_value,_location);
HXLINE( 182)			this->vector3s->set(_name,_vector3);
            		}
HXLINE( 185)		this->dirty_vector3s->push(_vector3);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,set_vector3,(void))

void Uniforms_obj::set_vector3_arr(::String _name, ::snow::api::buffers::ArrayBufferView _value, ::opengl::GLObject _location){
            	HX_GC_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_189_set_vector3_arr)
HXLINE( 191)		 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array _vector3 = this->vector3arrs->get(_name).StaticCast<  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array >();
HXLINE( 193)		if (hx::IsNotNull( _vector3 )) {
HXLINE( 194)			_vector3->value = _value;
            		}
            		else {
HXLINE( 196)			_vector3 =  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array_obj::__alloc( HX_CTX ,_name,_value,_location);
HXLINE( 197)			this->vector3arrs->set(_name,_vector3);
            		}
HXLINE( 200)		this->dirty_vector3arrs->push(_vector3);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,set_vector3_arr,(void))

void Uniforms_obj::set_vector4(::String _name, ::phoenix::Vector _value, ::opengl::GLObject _location){
            	HX_GC_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_204_set_vector4)
HXLINE( 206)		 ::phoenix::_Shader::Uniform_phoenix_Vector _vector4 = this->vector4s->get(_name).StaticCast<  ::phoenix::_Shader::Uniform_phoenix_Vector >();
HXLINE( 208)		if (hx::IsNotNull( _vector4 )) {
HXLINE( 209)			_vector4->value = _value;
            		}
            		else {
HXLINE( 211)			_vector4 =  ::phoenix::_Shader::Uniform_phoenix_Vector_obj::__alloc( HX_CTX ,_name,_value,_location);
HXLINE( 212)			this->vector4s->set(_name,_vector4);
            		}
HXLINE( 215)		this->dirty_vector4s->push(_vector4);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,set_vector4,(void))

void Uniforms_obj::set_vector4_arr(::String _name, ::snow::api::buffers::ArrayBufferView _value, ::opengl::GLObject _location){
            	HX_GC_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_219_set_vector4_arr)
HXLINE( 221)		 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array _vector4 = this->vector4arrs->get(_name).StaticCast<  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array >();
HXLINE( 223)		if (hx::IsNotNull( _vector4 )) {
HXLINE( 224)			_vector4->value = _value;
            		}
            		else {
HXLINE( 226)			_vector4 =  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array_obj::__alloc( HX_CTX ,_name,_value,_location);
HXLINE( 227)			this->vector4arrs->set(_name,_vector4);
            		}
HXLINE( 230)		this->dirty_vector4arrs->push(_vector4);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,set_vector4_arr,(void))

void Uniforms_obj::set_matrix4(::String _name, ::phoenix::Matrix _value, ::opengl::GLObject _location){
            	HX_GC_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_234_set_matrix4)
HXLINE( 236)		 ::phoenix::_Shader::Uniform_phoenix_Matrix _matrix4 = this->matrix4s->get(_name).StaticCast<  ::phoenix::_Shader::Uniform_phoenix_Matrix >();
HXLINE( 238)		if (hx::IsNotNull( _matrix4 )) {
HXLINE( 239)			_matrix4->value = _value;
            		}
            		else {
HXLINE( 241)			_matrix4 =  ::phoenix::_Shader::Uniform_phoenix_Matrix_obj::__alloc( HX_CTX ,_name,_value,_location);
HXLINE( 242)			this->matrix4s->set(_name,_matrix4);
            		}
HXLINE( 245)		this->dirty_matrix4s->push(_matrix4);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,set_matrix4,(void))

void Uniforms_obj::set_matrix4_arr(::String _name, ::snow::api::buffers::ArrayBufferView _value, ::opengl::GLObject _location){
            	HX_GC_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_249_set_matrix4_arr)
HXLINE( 251)		 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array _matrix4 = this->matrix4arrs->get(_name).StaticCast<  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array >();
HXLINE( 253)		if (hx::IsNotNull( _matrix4 )) {
HXLINE( 254)			_matrix4->value = _value;
            		}
            		else {
HXLINE( 256)			_matrix4 =  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array_obj::__alloc( HX_CTX ,_name,_value,_location);
HXLINE( 257)			this->matrix4arrs->set(_name,_matrix4);
            		}
HXLINE( 260)		this->dirty_matrix4arrs->push(_matrix4);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,set_matrix4_arr,(void))

void Uniforms_obj::set_color(::String _name, ::phoenix::Color _value, ::opengl::GLObject _location){
            	HX_GC_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_264_set_color)
HXLINE( 266)		 ::phoenix::_Shader::Uniform_phoenix_Color _color = this->colors->get(_name).StaticCast<  ::phoenix::_Shader::Uniform_phoenix_Color >();
HXLINE( 268)		if (hx::IsNotNull( _color )) {
HXLINE( 269)			_color->value = _value;
            		}
            		else {
HXLINE( 271)			_color =  ::phoenix::_Shader::Uniform_phoenix_Color_obj::__alloc( HX_CTX ,_name,_value,_location);
HXLINE( 272)			this->colors->set(_name,_color);
            		}
HXLINE( 275)		this->dirty_colors->push(_color);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,set_color,(void))

void Uniforms_obj::set_texture(::String _name, ::phoenix::Texture _value, ::opengl::GLObject _location){
            	HX_GC_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_279_set_texture)
HXLINE( 281)		 ::phoenix::_Shader::Uniform_phoenix_Texture _texture = this->textures->get(_name).StaticCast<  ::phoenix::_Shader::Uniform_phoenix_Texture >();
HXLINE( 283)		if (hx::IsNotNull( _texture )) {
HXLINE( 284)			_texture->value = _value;
            		}
            		else {
HXLINE( 286)			_texture =  ::phoenix::_Shader::Uniform_phoenix_Texture_obj::__alloc( HX_CTX ,_name,_value,_location);
HXLINE( 287)			this->textures->set(_name,_texture);
            		}
HXLINE( 290)		this->dirty_textures->push(_texture);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,set_texture,(void))

void Uniforms_obj::apply(){
            	HX_STACKFRAME(&_hx_pos_3aad63a854e5a0b4_295_apply)
HXLINE( 297)		while((this->dirty_ints->length > (int)0)){
HXLINE( 298)			 ::phoenix::_Shader::Uniform_Int uf = this->dirty_ints->pop().StaticCast<  ::phoenix::_Shader::Uniform_Int >();
HXLINE( 299)			{
HXLINE( 299)				 ::opengl::GLObject location = uf->location;
HXDLIN( 299)				int _hx_tmp;
HXDLIN( 299)				if (hx::IsNull( location )) {
HXLINE( 299)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE( 299)					_hx_tmp = location->id;
            				}
HXDLIN( 299)				glUniform1i(_hx_tmp,uf->value);
            			}
            		}
HXLINE( 302)		while((this->dirty_floats->length > (int)0)){
HXLINE( 303)			 ::phoenix::_Shader::Uniform_Float uf1 = this->dirty_floats->pop().StaticCast<  ::phoenix::_Shader::Uniform_Float >();
HXLINE( 304)			{
HXLINE( 304)				 ::opengl::GLObject location1 = uf1->location;
HXDLIN( 304)				int _hx_tmp1;
HXDLIN( 304)				if (hx::IsNull( location1 )) {
HXLINE( 304)					_hx_tmp1 = (int)0;
            				}
            				else {
HXLINE( 304)					_hx_tmp1 = location1->id;
            				}
HXDLIN( 304)				glUniform1f(_hx_tmp1,uf1->value);
            			}
            		}
HXLINE( 307)		while((this->dirty_vector2s->length > (int)0)){
HXLINE( 308)			 ::phoenix::_Shader::Uniform_phoenix_Vector uf2 = this->dirty_vector2s->pop().StaticCast<  ::phoenix::_Shader::Uniform_phoenix_Vector >();
HXLINE( 309)			{
HXLINE( 309)				 ::opengl::GLObject location2 = uf2->location;
HXDLIN( 309)				int _hx_tmp2;
HXDLIN( 309)				if (hx::IsNull( location2 )) {
HXLINE( 309)					_hx_tmp2 = (int)0;
            				}
            				else {
HXLINE( 309)					_hx_tmp2 = location2->id;
            				}
HXDLIN( 309)				glUniform2f(_hx_tmp2,uf2->value->x,uf2->value->y);
            			}
            		}
HXLINE( 312)		while((this->dirty_vector2arrs->length > (int)0)){
HXLINE( 313)			 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array uf3 = this->dirty_vector2arrs->pop().StaticCast<  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array >();
HXLINE( 314)			{
HXLINE( 314)				 ::opengl::GLObject location3 = uf3->location;
HXDLIN( 314)				 ::snow::api::buffers::ArrayBufferView data = uf3->value;
HXDLIN( 314)				glUniform2fv(location3->id, data->byteLength/8, (GLfloat*)(&data->buffer[0] + data->byteOffset));
            			}
            		}
HXLINE( 317)		while((this->dirty_vector3s->length > (int)0)){
HXLINE( 318)			 ::phoenix::_Shader::Uniform_phoenix_Vector uf4 = this->dirty_vector3s->pop().StaticCast<  ::phoenix::_Shader::Uniform_phoenix_Vector >();
HXLINE( 319)			{
HXLINE( 319)				 ::opengl::GLObject location4 = uf4->location;
HXDLIN( 319)				int _hx_tmp3;
HXDLIN( 319)				if (hx::IsNull( location4 )) {
HXLINE( 319)					_hx_tmp3 = (int)0;
            				}
            				else {
HXLINE( 319)					_hx_tmp3 = location4->id;
            				}
HXDLIN( 319)				glUniform3f(_hx_tmp3,uf4->value->x,uf4->value->y,uf4->value->z);
            			}
            		}
HXLINE( 322)		while((this->dirty_vector3arrs->length > (int)0)){
HXLINE( 323)			 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array uf5 = this->dirty_vector3arrs->pop().StaticCast<  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array >();
HXLINE( 324)			{
HXLINE( 324)				 ::opengl::GLObject location5 = uf5->location;
HXDLIN( 324)				 ::snow::api::buffers::ArrayBufferView data1 = uf5->value;
HXDLIN( 324)				glUniform3fv(location5->id, data1->byteLength/12, (GLfloat*)(&data1->buffer[0] + data1->byteOffset));
            			}
            		}
HXLINE( 327)		while((this->dirty_vector4s->length > (int)0)){
HXLINE( 328)			 ::phoenix::_Shader::Uniform_phoenix_Vector uf6 = this->dirty_vector4s->pop().StaticCast<  ::phoenix::_Shader::Uniform_phoenix_Vector >();
HXLINE( 329)			{
HXLINE( 329)				 ::opengl::GLObject location6 = uf6->location;
HXDLIN( 329)				int _hx_tmp4;
HXDLIN( 329)				if (hx::IsNull( location6 )) {
HXLINE( 329)					_hx_tmp4 = (int)0;
            				}
            				else {
HXLINE( 329)					_hx_tmp4 = location6->id;
            				}
HXDLIN( 329)				glUniform4f(_hx_tmp4,uf6->value->x,uf6->value->y,uf6->value->z,uf6->value->w);
            			}
            		}
HXLINE( 332)		while((this->dirty_vector4arrs->length > (int)0)){
HXLINE( 333)			 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array uf7 = this->dirty_vector4arrs->pop().StaticCast<  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array >();
HXLINE( 334)			{
HXLINE( 334)				 ::opengl::GLObject location7 = uf7->location;
HXDLIN( 334)				 ::snow::api::buffers::ArrayBufferView data2 = uf7->value;
HXDLIN( 334)				glUniform4fv(location7->id, data2->byteLength/16, (GLfloat*)(&data2->buffer[0] + data2->byteOffset));
            			}
            		}
HXLINE( 337)		while((this->dirty_colors->length > (int)0)){
HXLINE( 338)			 ::phoenix::_Shader::Uniform_phoenix_Color uf8 = this->dirty_colors->pop().StaticCast<  ::phoenix::_Shader::Uniform_phoenix_Color >();
HXLINE( 339)			{
HXLINE( 339)				 ::opengl::GLObject location8 = uf8->location;
HXDLIN( 339)				int _hx_tmp5;
HXDLIN( 339)				if (hx::IsNull( location8 )) {
HXLINE( 339)					_hx_tmp5 = (int)0;
            				}
            				else {
HXLINE( 339)					_hx_tmp5 = location8->id;
            				}
HXDLIN( 339)				glUniform4f(_hx_tmp5,uf8->value->r,uf8->value->g,uf8->value->b,uf8->value->a);
            			}
            		}
HXLINE( 342)		while((this->dirty_textures->length > (int)0)){
HXLINE( 343)			 ::phoenix::_Shader::Uniform_phoenix_Texture uf9 = this->dirty_textures->pop().StaticCast<  ::phoenix::_Shader::Uniform_phoenix_Texture >();
HXLINE( 344)			{
HXLINE( 344)				 ::opengl::GLObject location9 = uf9->location;
HXDLIN( 344)				int _hx_tmp6;
HXDLIN( 344)				if (hx::IsNull( location9 )) {
HXLINE( 344)					_hx_tmp6 = (int)0;
            				}
            				else {
HXLINE( 344)					_hx_tmp6 = location9->id;
            				}
HXDLIN( 344)				glUniform1i(_hx_tmp6,uf9->value->slot);
            			}
HXDLIN( 344)			uf9->value->bind();
            		}
HXLINE( 347)		while((this->dirty_matrix4s->length > (int)0)){
HXLINE( 348)			 ::phoenix::_Shader::Uniform_phoenix_Matrix uf10 = this->dirty_matrix4s->pop().StaticCast<  ::phoenix::_Shader::Uniform_phoenix_Matrix >();
HXLINE( 349)			{
HXLINE( 349)				 ::opengl::GLObject location10 = uf10->location;
HXDLIN( 349)				 ::phoenix::Matrix _this = uf10->value;
HXDLIN( 349)				int i = (int)0;
HXDLIN( 349)				while((i < (int)16)){
HXLINE( 349)					{
HXLINE( 349)						 ::snow::api::buffers::ArrayBufferView this1 = _this->_float32array;
HXDLIN( 349)						{
HXLINE( 349)							int this2 = this1->byteOffset;
HXDLIN( 349)							::__hxcpp_memory_set_float(this1->buffer,(this2 + (i * (int)4)),_this->elements->__get(i));
            						}
            					}
HXDLIN( 349)					i = (i + (int)1);
            				}
HXDLIN( 349)				 ::snow::api::buffers::ArrayBufferView data3 = _this->_float32array;
HXDLIN( 349)				glUniformMatrix4fv(location10->id, data3->length>>4, false, (GLfloat*)(&data3->buffer[0] + data3->byteOffset));
            			}
            		}
HXLINE( 352)		while((this->dirty_matrix4arrs->length > (int)0)){
HXLINE( 353)			 ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array uf11 = this->dirty_matrix4arrs->pop().StaticCast<  ::phoenix::_Shader::Uniform_snow_api_buffers_Float32Array >();
HXLINE( 354)			{
HXLINE( 354)				 ::opengl::GLObject location11 = uf11->location;
HXDLIN( 354)				 ::snow::api::buffers::ArrayBufferView data4 = uf11->value;
HXDLIN( 354)				glUniformMatrix4fv(location11->id, data4->length>>4, false, (GLfloat*)(&data4->buffer[0] + data4->byteOffset));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Uniforms_obj,apply,(void))


hx::ObjectPtr< Uniforms_obj > Uniforms_obj::__new() {
	hx::ObjectPtr< Uniforms_obj > __this = new Uniforms_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Uniforms_obj > Uniforms_obj::__alloc(hx::Ctx *_hx_ctx) {
	Uniforms_obj *__this = (Uniforms_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Uniforms_obj), true, "phoenix.Uniforms"));
	*(void **)__this = Uniforms_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Uniforms_obj::Uniforms_obj()
{
}

void Uniforms_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Uniforms);
	HX_MARK_MEMBER_NAME(ints,"ints");
	HX_MARK_MEMBER_NAME(floats,"floats");
	HX_MARK_MEMBER_NAME(vector2s,"vector2s");
	HX_MARK_MEMBER_NAME(vector2arrs,"vector2arrs");
	HX_MARK_MEMBER_NAME(vector3s,"vector3s");
	HX_MARK_MEMBER_NAME(vector3arrs,"vector3arrs");
	HX_MARK_MEMBER_NAME(vector4s,"vector4s");
	HX_MARK_MEMBER_NAME(vector4arrs,"vector4arrs");
	HX_MARK_MEMBER_NAME(matrix4s,"matrix4s");
	HX_MARK_MEMBER_NAME(matrix4arrs,"matrix4arrs");
	HX_MARK_MEMBER_NAME(colors,"colors");
	HX_MARK_MEMBER_NAME(textures,"textures");
	HX_MARK_MEMBER_NAME(dirty_ints,"dirty_ints");
	HX_MARK_MEMBER_NAME(dirty_floats,"dirty_floats");
	HX_MARK_MEMBER_NAME(dirty_vector2s,"dirty_vector2s");
	HX_MARK_MEMBER_NAME(dirty_vector2arrs,"dirty_vector2arrs");
	HX_MARK_MEMBER_NAME(dirty_vector3s,"dirty_vector3s");
	HX_MARK_MEMBER_NAME(dirty_vector3arrs,"dirty_vector3arrs");
	HX_MARK_MEMBER_NAME(dirty_vector4s,"dirty_vector4s");
	HX_MARK_MEMBER_NAME(dirty_vector4arrs,"dirty_vector4arrs");
	HX_MARK_MEMBER_NAME(dirty_matrix4s,"dirty_matrix4s");
	HX_MARK_MEMBER_NAME(dirty_matrix4arrs,"dirty_matrix4arrs");
	HX_MARK_MEMBER_NAME(dirty_colors,"dirty_colors");
	HX_MARK_MEMBER_NAME(dirty_textures,"dirty_textures");
	HX_MARK_END_CLASS();
}

void Uniforms_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ints,"ints");
	HX_VISIT_MEMBER_NAME(floats,"floats");
	HX_VISIT_MEMBER_NAME(vector2s,"vector2s");
	HX_VISIT_MEMBER_NAME(vector2arrs,"vector2arrs");
	HX_VISIT_MEMBER_NAME(vector3s,"vector3s");
	HX_VISIT_MEMBER_NAME(vector3arrs,"vector3arrs");
	HX_VISIT_MEMBER_NAME(vector4s,"vector4s");
	HX_VISIT_MEMBER_NAME(vector4arrs,"vector4arrs");
	HX_VISIT_MEMBER_NAME(matrix4s,"matrix4s");
	HX_VISIT_MEMBER_NAME(matrix4arrs,"matrix4arrs");
	HX_VISIT_MEMBER_NAME(colors,"colors");
	HX_VISIT_MEMBER_NAME(textures,"textures");
	HX_VISIT_MEMBER_NAME(dirty_ints,"dirty_ints");
	HX_VISIT_MEMBER_NAME(dirty_floats,"dirty_floats");
	HX_VISIT_MEMBER_NAME(dirty_vector2s,"dirty_vector2s");
	HX_VISIT_MEMBER_NAME(dirty_vector2arrs,"dirty_vector2arrs");
	HX_VISIT_MEMBER_NAME(dirty_vector3s,"dirty_vector3s");
	HX_VISIT_MEMBER_NAME(dirty_vector3arrs,"dirty_vector3arrs");
	HX_VISIT_MEMBER_NAME(dirty_vector4s,"dirty_vector4s");
	HX_VISIT_MEMBER_NAME(dirty_vector4arrs,"dirty_vector4arrs");
	HX_VISIT_MEMBER_NAME(dirty_matrix4s,"dirty_matrix4s");
	HX_VISIT_MEMBER_NAME(dirty_matrix4arrs,"dirty_matrix4arrs");
	HX_VISIT_MEMBER_NAME(dirty_colors,"dirty_colors");
	HX_VISIT_MEMBER_NAME(dirty_textures,"dirty_textures");
}

hx::Val Uniforms_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ints") ) { return hx::Val( ints ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"apply") ) { return hx::Val( apply_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"floats") ) { return hx::Val( floats ); }
		if (HX_FIELD_EQ(inName,"colors") ) { return hx::Val( colors ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_int") ) { return hx::Val( set_int_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vector2s") ) { return hx::Val( vector2s ); }
		if (HX_FIELD_EQ(inName,"vector3s") ) { return hx::Val( vector3s ); }
		if (HX_FIELD_EQ(inName,"vector4s") ) { return hx::Val( vector4s ); }
		if (HX_FIELD_EQ(inName,"matrix4s") ) { return hx::Val( matrix4s ); }
		if (HX_FIELD_EQ(inName,"textures") ) { return hx::Val( textures ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_float") ) { return hx::Val( set_float_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dirty_ints") ) { return hx::Val( dirty_ints ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vector2arrs") ) { return hx::Val( vector2arrs ); }
		if (HX_FIELD_EQ(inName,"vector3arrs") ) { return hx::Val( vector3arrs ); }
		if (HX_FIELD_EQ(inName,"vector4arrs") ) { return hx::Val( vector4arrs ); }
		if (HX_FIELD_EQ(inName,"matrix4arrs") ) { return hx::Val( matrix4arrs ); }
		if (HX_FIELD_EQ(inName,"set_vector2") ) { return hx::Val( set_vector2_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_vector3") ) { return hx::Val( set_vector3_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_vector4") ) { return hx::Val( set_vector4_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_matrix4") ) { return hx::Val( set_matrix4_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_texture") ) { return hx::Val( set_texture_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"dirty_floats") ) { return hx::Val( dirty_floats ); }
		if (HX_FIELD_EQ(inName,"dirty_colors") ) { return hx::Val( dirty_colors ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dirty_vector2s") ) { return hx::Val( dirty_vector2s ); }
		if (HX_FIELD_EQ(inName,"dirty_vector3s") ) { return hx::Val( dirty_vector3s ); }
		if (HX_FIELD_EQ(inName,"dirty_vector4s") ) { return hx::Val( dirty_vector4s ); }
		if (HX_FIELD_EQ(inName,"dirty_matrix4s") ) { return hx::Val( dirty_matrix4s ); }
		if (HX_FIELD_EQ(inName,"dirty_textures") ) { return hx::Val( dirty_textures ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"set_vector2_arr") ) { return hx::Val( set_vector2_arr_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_vector3_arr") ) { return hx::Val( set_vector3_arr_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_vector4_arr") ) { return hx::Val( set_vector4_arr_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_matrix4_arr") ) { return hx::Val( set_matrix4_arr_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"dirty_vector2arrs") ) { return hx::Val( dirty_vector2arrs ); }
		if (HX_FIELD_EQ(inName,"dirty_vector3arrs") ) { return hx::Val( dirty_vector3arrs ); }
		if (HX_FIELD_EQ(inName,"dirty_vector4arrs") ) { return hx::Val( dirty_vector4arrs ); }
		if (HX_FIELD_EQ(inName,"dirty_matrix4arrs") ) { return hx::Val( dirty_matrix4arrs ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Uniforms_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ints") ) { ints=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"floats") ) { floats=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colors") ) { colors=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vector2s") ) { vector2s=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vector3s") ) { vector3s=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vector4s") ) { vector4s=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"matrix4s") ) { matrix4s=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textures") ) { textures=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dirty_ints") ) { dirty_ints=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vector2arrs") ) { vector2arrs=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vector3arrs") ) { vector3arrs=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vector4arrs") ) { vector4arrs=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"matrix4arrs") ) { matrix4arrs=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"dirty_floats") ) { dirty_floats=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_colors") ) { dirty_colors=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dirty_vector2s") ) { dirty_vector2s=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_vector3s") ) { dirty_vector3s=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_vector4s") ) { dirty_vector4s=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_matrix4s") ) { dirty_matrix4s=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_textures") ) { dirty_textures=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"dirty_vector2arrs") ) { dirty_vector2arrs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_vector3arrs") ) { dirty_vector3arrs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_vector4arrs") ) { dirty_vector4arrs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty_matrix4arrs") ) { dirty_matrix4arrs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Uniforms_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("ints","\xa4","\x44","\xbb","\x45"));
	outFields->push(HX_HCSTRING("floats","\x57","\x23","\x56","\x41"));
	outFields->push(HX_HCSTRING("vector2s","\x84","\xd3","\xbd","\x6e"));
	outFields->push(HX_HCSTRING("vector2arrs","\x81","\x44","\x19","\x69"));
	outFields->push(HX_HCSTRING("vector3s","\x63","\xd4","\xbd","\x6e"));
	outFields->push(HX_HCSTRING("vector3arrs","\x02","\xd9","\x7f","\xfc"));
	outFields->push(HX_HCSTRING("vector4s","\x42","\xd5","\xbd","\x6e"));
	outFields->push(HX_HCSTRING("vector4arrs","\x83","\x6d","\xe6","\x8f"));
	outFields->push(HX_HCSTRING("matrix4s","\x40","\x36","\xf3","\x66"));
	outFields->push(HX_HCSTRING("matrix4arrs","\x45","\x3f","\x31","\x03"));
	outFields->push(HX_HCSTRING("colors","\xb0","\xc5","\x86","\xc6"));
	outFields->push(HX_HCSTRING("textures","\x38","\xf7","\xce","\x65"));
	outFields->push(HX_HCSTRING("dirty_ints","\x31","\x8f","\x46","\x4c"));
	outFields->push(HX_HCSTRING("dirty_floats","\x24","\xeb","\x32","\x79"));
	outFields->push(HX_HCSTRING("dirty_vector2s","\x91","\xe8","\x35","\xed"));
	outFields->push(HX_HCSTRING("dirty_vector2arrs","\x94","\x15","\xb4","\x2f"));
	outFields->push(HX_HCSTRING("dirty_vector3s","\x70","\xe9","\x35","\xed"));
	outFields->push(HX_HCSTRING("dirty_vector3arrs","\x15","\xaa","\x1a","\xc3"));
	outFields->push(HX_HCSTRING("dirty_vector4s","\x4f","\xea","\x35","\xed"));
	outFields->push(HX_HCSTRING("dirty_vector4arrs","\x96","\x3e","\x81","\x56"));
	outFields->push(HX_HCSTRING("dirty_matrix4s","\x4d","\x4b","\x6b","\xe5"));
	outFields->push(HX_HCSTRING("dirty_matrix4arrs","\x58","\x10","\xcc","\xc9"));
	outFields->push(HX_HCSTRING("dirty_colors","\x7d","\x8d","\x63","\xfe"));
	outFields->push(HX_HCSTRING("dirty_textures","\x45","\x0c","\x47","\xe4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Uniforms_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Uniforms_obj,ints),HX_HCSTRING("ints","\xa4","\x44","\xbb","\x45")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Uniforms_obj,floats),HX_HCSTRING("floats","\x57","\x23","\x56","\x41")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Uniforms_obj,vector2s),HX_HCSTRING("vector2s","\x84","\xd3","\xbd","\x6e")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Uniforms_obj,vector2arrs),HX_HCSTRING("vector2arrs","\x81","\x44","\x19","\x69")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Uniforms_obj,vector3s),HX_HCSTRING("vector3s","\x63","\xd4","\xbd","\x6e")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Uniforms_obj,vector3arrs),HX_HCSTRING("vector3arrs","\x02","\xd9","\x7f","\xfc")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Uniforms_obj,vector4s),HX_HCSTRING("vector4s","\x42","\xd5","\xbd","\x6e")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Uniforms_obj,vector4arrs),HX_HCSTRING("vector4arrs","\x83","\x6d","\xe6","\x8f")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Uniforms_obj,matrix4s),HX_HCSTRING("matrix4s","\x40","\x36","\xf3","\x66")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Uniforms_obj,matrix4arrs),HX_HCSTRING("matrix4arrs","\x45","\x3f","\x31","\x03")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Uniforms_obj,colors),HX_HCSTRING("colors","\xb0","\xc5","\x86","\xc6")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Uniforms_obj,textures),HX_HCSTRING("textures","\x38","\xf7","\xce","\x65")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Uniforms_obj,dirty_ints),HX_HCSTRING("dirty_ints","\x31","\x8f","\x46","\x4c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Uniforms_obj,dirty_floats),HX_HCSTRING("dirty_floats","\x24","\xeb","\x32","\x79")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Uniforms_obj,dirty_vector2s),HX_HCSTRING("dirty_vector2s","\x91","\xe8","\x35","\xed")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Uniforms_obj,dirty_vector2arrs),HX_HCSTRING("dirty_vector2arrs","\x94","\x15","\xb4","\x2f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Uniforms_obj,dirty_vector3s),HX_HCSTRING("dirty_vector3s","\x70","\xe9","\x35","\xed")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Uniforms_obj,dirty_vector3arrs),HX_HCSTRING("dirty_vector3arrs","\x15","\xaa","\x1a","\xc3")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Uniforms_obj,dirty_vector4s),HX_HCSTRING("dirty_vector4s","\x4f","\xea","\x35","\xed")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Uniforms_obj,dirty_vector4arrs),HX_HCSTRING("dirty_vector4arrs","\x96","\x3e","\x81","\x56")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Uniforms_obj,dirty_matrix4s),HX_HCSTRING("dirty_matrix4s","\x4d","\x4b","\x6b","\xe5")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Uniforms_obj,dirty_matrix4arrs),HX_HCSTRING("dirty_matrix4arrs","\x58","\x10","\xcc","\xc9")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Uniforms_obj,dirty_colors),HX_HCSTRING("dirty_colors","\x7d","\x8d","\x63","\xfe")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Uniforms_obj,dirty_textures),HX_HCSTRING("dirty_textures","\x45","\x0c","\x47","\xe4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Uniforms_obj_sStaticStorageInfo = 0;
#endif

static ::String Uniforms_obj_sMemberFields[] = {
	HX_HCSTRING("ints","\xa4","\x44","\xbb","\x45"),
	HX_HCSTRING("floats","\x57","\x23","\x56","\x41"),
	HX_HCSTRING("vector2s","\x84","\xd3","\xbd","\x6e"),
	HX_HCSTRING("vector2arrs","\x81","\x44","\x19","\x69"),
	HX_HCSTRING("vector3s","\x63","\xd4","\xbd","\x6e"),
	HX_HCSTRING("vector3arrs","\x02","\xd9","\x7f","\xfc"),
	HX_HCSTRING("vector4s","\x42","\xd5","\xbd","\x6e"),
	HX_HCSTRING("vector4arrs","\x83","\x6d","\xe6","\x8f"),
	HX_HCSTRING("matrix4s","\x40","\x36","\xf3","\x66"),
	HX_HCSTRING("matrix4arrs","\x45","\x3f","\x31","\x03"),
	HX_HCSTRING("colors","\xb0","\xc5","\x86","\xc6"),
	HX_HCSTRING("textures","\x38","\xf7","\xce","\x65"),
	HX_HCSTRING("dirty_ints","\x31","\x8f","\x46","\x4c"),
	HX_HCSTRING("dirty_floats","\x24","\xeb","\x32","\x79"),
	HX_HCSTRING("dirty_vector2s","\x91","\xe8","\x35","\xed"),
	HX_HCSTRING("dirty_vector2arrs","\x94","\x15","\xb4","\x2f"),
	HX_HCSTRING("dirty_vector3s","\x70","\xe9","\x35","\xed"),
	HX_HCSTRING("dirty_vector3arrs","\x15","\xaa","\x1a","\xc3"),
	HX_HCSTRING("dirty_vector4s","\x4f","\xea","\x35","\xed"),
	HX_HCSTRING("dirty_vector4arrs","\x96","\x3e","\x81","\x56"),
	HX_HCSTRING("dirty_matrix4s","\x4d","\x4b","\x6b","\xe5"),
	HX_HCSTRING("dirty_matrix4arrs","\x58","\x10","\xcc","\xc9"),
	HX_HCSTRING("dirty_colors","\x7d","\x8d","\x63","\xfe"),
	HX_HCSTRING("dirty_textures","\x45","\x0c","\x47","\xe4"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("set_int","\x92","\x66","\xc6","\x19"),
	HX_HCSTRING("set_float","\xff","\x0d","\x91","\x29"),
	HX_HCSTRING("set_vector2","\x32","\x61","\x04","\x6b"),
	HX_HCSTRING("set_vector2_arr","\x94","\x25","\x67","\x24"),
	HX_HCSTRING("set_vector3","\x33","\x61","\x04","\x6b"),
	HX_HCSTRING("set_vector3_arr","\x15","\xba","\xcd","\xb7"),
	HX_HCSTRING("set_vector4","\x34","\x61","\x04","\x6b"),
	HX_HCSTRING("set_vector4_arr","\x96","\x4e","\x34","\x4b"),
	HX_HCSTRING("set_matrix4","\xf6","\xa9","\xce","\x23"),
	HX_HCSTRING("set_matrix4_arr","\x58","\x20","\x7f","\xbe"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("set_texture","\xfe","\x2f","\x48","\x2f"),
	HX_HCSTRING("apply","\x6e","\x85","\x3b","\x24"),
	::String(null()) };

static void Uniforms_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Uniforms_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Uniforms_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Uniforms_obj::__mClass,"__mClass");
};

#endif

hx::Class Uniforms_obj::__mClass;

void Uniforms_obj::__register()
{
	hx::Object *dummy = new Uniforms_obj;
	Uniforms_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.Uniforms","\x9e","\x3d","\x2e","\x9b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Uniforms_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Uniforms_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Uniforms_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Uniforms_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Uniforms_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Uniforms_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
