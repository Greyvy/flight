// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_components_PlayerController
#include <components/PlayerController.h>
#endif
#ifndef INCLUDED_entities_Player
#include <entities/Player.h>
#endif
#ifndef INCLUDED_luxe_Camera
#include <luxe/Camera.h>
#endif
#ifndef INCLUDED_luxe_Component
#include <luxe/Component.h>
#endif
#ifndef INCLUDED_luxe_Cursor
#include <luxe/Cursor.h>
#endif
#ifndef INCLUDED_luxe_Draw
#include <luxe/Draw.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_Input
#include <luxe/Input.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Screen
#include <luxe/Screen.h>
#endif
#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
#ifndef INCLUDED_luxe_tween_Actuate
#include <luxe/tween/Actuate.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_IGenericActuator
#include <luxe/tween/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_luxe_tween_easing_IEasing
#include <luxe/tween/easing/IEasing.h>
#endif
#ifndef INCLUDED_luxe_tween_easing_Sine
#include <luxe/tween/easing/Sine.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_LineGeometry
#include <phoenix/geometry/LineGeometry.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_79573e21d55de314_11_new,"components.PlayerController","new",0xeedd6547,"components.PlayerController.new","components/PlayerController.hx",11,0x5e47c4a8)
HX_LOCAL_STACK_FRAME(_hx_pos_79573e21d55de314_23_init,"components.PlayerController","init",0x0f93f049,"components.PlayerController.init","components/PlayerController.hx",23,0x5e47c4a8)
HX_LOCAL_STACK_FRAME(_hx_pos_79573e21d55de314_38_jump,"components.PlayerController","jump",0x10427a27,"components.PlayerController.jump","components/PlayerController.hx",38,0x5e47c4a8)
HX_LOCAL_STACK_FRAME(_hx_pos_79573e21d55de314_28_jump,"components.PlayerController","jump",0x10427a27,"components.PlayerController.jump","components/PlayerController.hx",28,0x5e47c4a8)
HX_LOCAL_STACK_FRAME(_hx_pos_79573e21d55de314_42_update,"components.PlayerController","update",0x0060bb82,"components.PlayerController.update","components/PlayerController.hx",42,0x5e47c4a8)
HX_LOCAL_STACK_FRAME(_hx_pos_0795afc6cab3c655_50_ondestroy,"components.PlayerController","ondestroy",0x18ae79e2,"components.PlayerController.ondestroy","luxe/macros/ComponentRules.hx",50,0x7da94735)
HX_LOCAL_STACK_FRAME(_hx_pos_0795afc6cab3c655_62_onremoved,"components.PlayerController","onremoved",0xe7286c88,"components.PlayerController.onremoved","luxe/macros/ComponentRules.hx",62,0x7da94735)
namespace components{

void PlayerController_obj::__construct( ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_79573e21d55de314_11_new)
HXLINE(  19)		this->jump_cooldown = ((Float)0.25);
HXLINE(  18)		this->jump_distance = ((Float)128);
HXLINE(  17)		this->canJump = true;
HXLINE(  13)		this->speed = ((Float)440);
HXLINE(  11)		super::__construct(_options);
            	}

Dynamic PlayerController_obj::__CreateEmpty() { return new PlayerController_obj; }

void *PlayerController_obj::_hx_vtable = 0;

Dynamic PlayerController_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayerController_obj > _hx_result = new PlayerController_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayerController_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x56fa0a3b) {
		if (inClassId<=(int)0x312a3b37) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x312a3b37;
		} else {
			return inClassId==(int)0x56fa0a3b;
		}
	} else {
		return inClassId==(int)0x6b65f151;
	}
}

void PlayerController_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_79573e21d55de314_23_init)
HXLINE(  24)		this->ref = ( ( ::entities::Player)(this->get_entity()) );
HXLINE(  25)		 ::phoenix::Vector this1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,this->jump_distance,null(),null());
HXDLIN(  25)		this->jump_target = this1;
            	}


void PlayerController_obj::jump(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::components::PlayerController,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_79573e21d55de314_38_jump)
HXLINE(  38)			_gthis->canJump = true;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_79573e21d55de314_28_jump)
HXDLIN(  28)		 ::components::PlayerController _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  29)		this->canJump = false;
HXLINE(  30)		 ::phoenix::Vector lhs = this->get_pos();
HXDLIN(  30)		 ::phoenix::Vector rhs = this->jump_target;
HXDLIN(  30)		Float result = (lhs->x + rhs->x);
HXDLIN(  30)		Float result1 = (lhs->y + rhs->y);
HXDLIN(  30)		 ::phoenix::Vector result2 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,result,result1,(lhs->z + rhs->z),null());
HXLINE(  31)		::luxe::tween::Actuate_obj::defaultEase = ::luxe::tween::easing::Sine_obj::get_easeInOut();
HXLINE(  33)		 ::phoenix::Vector _hx_tmp = this->get_pos();
HXDLIN(  33)		::luxe::tween::Actuate_obj::tween(_hx_tmp,this->jump_cooldown, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),result2->x)
            			->setFixed(1,HX_("y",79,00,00,00),result2->y)),null(),null());
HXLINE(  34)		 ::phoenix::Vector _hx_tmp1 = this->get_scale();
HXDLIN(  34)		::luxe::tween::actuators::IGenericActuator_obj::onComplete(::luxe::tween::actuators::IGenericActuator_obj::reflect(::luxe::tween::actuators::IGenericActuator_obj::repeat(::luxe::tween::Actuate_obj::tween(_hx_tmp1,((Float)this->jump_cooldown / (Float)(int)2), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),((Float)0.15))
            			->setFixed(1,HX_("y",79,00,00,00),((Float)0.15))),null(),null()),(int)1),null()), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayerController_obj,jump,(void))

void PlayerController_obj::update(Float dt){
            	HX_GC_STACKFRAME(&_hx_pos_79573e21d55de314_42_update)
HXLINE(  44)		if (::Luxe_obj::input->inputdown(HX_("left",07,08,b0,47))) {
HXLINE(  45)			 ::phoenix::Vector _g = this->get_pos();
HXDLIN(  45)			{
HXLINE(  45)				Float _g1 = _g->x;
HXDLIN(  45)				Float _x = (_g1 + (-(this->speed) * dt));
HXDLIN(  45)				_g->x = _x;
HXDLIN(  45)				if (!(_g->_construct)) {
HXLINE(  45)					bool _hx_tmp;
HXDLIN(  45)					if (hx::IsNotNull( _g->listen_x )) {
HXLINE(  45)						_hx_tmp = !(_g->ignore_listeners);
            					}
            					else {
HXLINE(  45)						_hx_tmp = false;
            					}
HXDLIN(  45)					if (_hx_tmp) {
HXLINE(  45)						_g->listen_x(_x);
            					}
            				}
            			}
            		}
HXLINE(  48)		if (::Luxe_obj::input->inputdown(HX_("up",5b,66,00,00))) {
HXLINE(  49)			 ::phoenix::Vector _g2 = this->get_pos();
HXDLIN(  49)			{
HXLINE(  49)				Float _g3 = _g2->y;
HXDLIN(  49)				Float _y = (_g3 + (-(this->speed) * dt));
HXDLIN(  49)				_g2->y = _y;
HXDLIN(  49)				if (!(_g2->_construct)) {
HXLINE(  49)					bool _hx_tmp1;
HXDLIN(  49)					if (hx::IsNotNull( _g2->listen_y )) {
HXLINE(  49)						_hx_tmp1 = !(_g2->ignore_listeners);
            					}
            					else {
HXLINE(  49)						_hx_tmp1 = false;
            					}
HXDLIN(  49)					if (_hx_tmp1) {
HXLINE(  49)						_g2->listen_y(_y);
            					}
            				}
            			}
            		}
HXLINE(  52)		if (::Luxe_obj::input->inputdown(HX_("right",dc,0b,64,e9))) {
HXLINE(  53)			 ::phoenix::Vector _g4 = this->get_pos();
HXDLIN(  53)			{
HXLINE(  53)				Float _g5 = _g4->x;
HXDLIN(  53)				Float _x1 = (_g5 + (this->speed * dt));
HXDLIN(  53)				_g4->x = _x1;
HXDLIN(  53)				if (!(_g4->_construct)) {
HXLINE(  53)					bool _hx_tmp2;
HXDLIN(  53)					if (hx::IsNotNull( _g4->listen_x )) {
HXLINE(  53)						_hx_tmp2 = !(_g4->ignore_listeners);
            					}
            					else {
HXLINE(  53)						_hx_tmp2 = false;
            					}
HXDLIN(  53)					if (_hx_tmp2) {
HXLINE(  53)						_g4->listen_x(_x1);
            					}
            				}
            			}
            		}
HXLINE(  56)		if (::Luxe_obj::input->inputdown(HX_("down",62,f8,6d,42))) {
HXLINE(  57)			 ::phoenix::Vector _g6 = this->get_pos();
HXDLIN(  57)			{
HXLINE(  57)				Float _g7 = _g6->y;
HXDLIN(  57)				Float _y1 = (_g7 + (this->speed * dt));
HXDLIN(  57)				_g6->y = _y1;
HXDLIN(  57)				if (!(_g6->_construct)) {
HXLINE(  57)					bool _hx_tmp3;
HXDLIN(  57)					if (hx::IsNotNull( _g6->listen_y )) {
HXLINE(  57)						_hx_tmp3 = !(_g6->ignore_listeners);
            					}
            					else {
HXLINE(  57)						_hx_tmp3 = false;
            					}
HXDLIN(  57)					if (_hx_tmp3) {
HXLINE(  57)						_g6->listen_y(_y1);
            					}
            				}
            			}
            		}
HXLINE(  60)		this->mouse = ::Luxe_obj::core->screen->cursor->get_pos();
HXLINE(  61)		 ::phoenix::Vector lhs = this->mouse;
HXDLIN(  61)		 ::luxe::Camera rhs = ::Luxe_obj::camera;
HXDLIN(  61)		 ::phoenix::Vector rhs1 = rhs->world_point_to_screen(this->get_pos(),null());
HXDLIN(  61)		Float rot = (lhs->x - rhs1->x);
HXDLIN(  61)		Float rot1 = (lhs->y - rhs1->y);
HXDLIN(  61)		 ::phoenix::Vector rot2 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,rot,rot1,(lhs->z - rhs1->z),null());
HXLINE(  63)		{
HXLINE(  63)			 ::phoenix::Vector _this = this->ref->dir_vis->get_pos();
HXDLIN(  63)			 ::phoenix::Vector _other = this->get_pos();
HXDLIN(  63)			{
HXLINE(  63)				Float _x2 = _other->x;
HXDLIN(  63)				Float _y2 = _other->y;
HXDLIN(  63)				Float _z = _other->z;
HXDLIN(  63)				Float _w = _other->w;
HXDLIN(  63)				bool prev = _this->ignore_listeners;
HXDLIN(  63)				_this->ignore_listeners = true;
HXDLIN(  63)				{
HXLINE(  63)					_this->x = _x2;
HXDLIN(  63)					if (!(_this->_construct)) {
HXLINE(  63)						bool _hx_tmp4;
HXDLIN(  63)						if (hx::IsNotNull( _this->listen_x )) {
HXLINE(  63)							_hx_tmp4 = !(_this->ignore_listeners);
            						}
            						else {
HXLINE(  63)							_hx_tmp4 = false;
            						}
HXDLIN(  63)						if (_hx_tmp4) {
HXLINE(  63)							_this->listen_x(_x2);
            						}
            					}
            				}
HXDLIN(  63)				{
HXLINE(  63)					_this->y = _y2;
HXDLIN(  63)					if (!(_this->_construct)) {
HXLINE(  63)						bool _hx_tmp5;
HXDLIN(  63)						if (hx::IsNotNull( _this->listen_y )) {
HXLINE(  63)							_hx_tmp5 = !(_this->ignore_listeners);
            						}
            						else {
HXLINE(  63)							_hx_tmp5 = false;
            						}
HXDLIN(  63)						if (_hx_tmp5) {
HXLINE(  63)							_this->listen_y(_y2);
            						}
            					}
            				}
HXDLIN(  63)				{
HXLINE(  63)					_this->z = _z;
HXDLIN(  63)					if (!(_this->_construct)) {
HXLINE(  63)						bool _hx_tmp6;
HXDLIN(  63)						if (hx::IsNotNull( _this->listen_z )) {
HXLINE(  63)							_hx_tmp6 = !(_this->ignore_listeners);
            						}
            						else {
HXLINE(  63)							_hx_tmp6 = false;
            						}
HXDLIN(  63)						if (_hx_tmp6) {
HXLINE(  63)							_this->listen_z(_z);
            						}
            					}
            				}
HXDLIN(  63)				_this->w = _w;
HXDLIN(  63)				_this->ignore_listeners = prev;
HXDLIN(  63)				bool _hx_tmp7;
HXDLIN(  63)				if (hx::IsNotNull( _this->listen_x )) {
HXLINE(  63)					_hx_tmp7 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE(  63)					_hx_tmp7 = false;
            				}
HXDLIN(  63)				if (_hx_tmp7) {
HXLINE(  63)					_this->listen_x(_this->x);
            				}
HXDLIN(  63)				bool _hx_tmp8;
HXDLIN(  63)				if (hx::IsNotNull( _this->listen_y )) {
HXLINE(  63)					_hx_tmp8 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE(  63)					_hx_tmp8 = false;
            				}
HXDLIN(  63)				if (_hx_tmp8) {
HXLINE(  63)					_this->listen_y(_this->y);
            				}
HXDLIN(  63)				bool _hx_tmp9;
HXDLIN(  63)				if (hx::IsNotNull( _this->listen_z )) {
HXLINE(  63)					_hx_tmp9 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE(  63)					_hx_tmp9 = false;
            				}
HXDLIN(  63)				if (_hx_tmp9) {
HXLINE(  63)					_this->listen_z(_this->z);
            				}
            			}
            		}
HXLINE(  64)		{
HXLINE(  64)			 ::phoenix::Vector _this1 = this->ref->jump_vis->get_pos();
HXDLIN(  64)			 ::phoenix::Vector _other1 = this->get_pos();
HXDLIN(  64)			{
HXLINE(  64)				Float _x3 = _other1->x;
HXDLIN(  64)				Float _y3 = _other1->y;
HXDLIN(  64)				Float _z1 = _other1->z;
HXDLIN(  64)				Float _w1 = _other1->w;
HXDLIN(  64)				bool prev1 = _this1->ignore_listeners;
HXDLIN(  64)				_this1->ignore_listeners = true;
HXDLIN(  64)				{
HXLINE(  64)					_this1->x = _x3;
HXDLIN(  64)					if (!(_this1->_construct)) {
HXLINE(  64)						bool _hx_tmp10;
HXDLIN(  64)						if (hx::IsNotNull( _this1->listen_x )) {
HXLINE(  64)							_hx_tmp10 = !(_this1->ignore_listeners);
            						}
            						else {
HXLINE(  64)							_hx_tmp10 = false;
            						}
HXDLIN(  64)						if (_hx_tmp10) {
HXLINE(  64)							_this1->listen_x(_x3);
            						}
            					}
            				}
HXDLIN(  64)				{
HXLINE(  64)					_this1->y = _y3;
HXDLIN(  64)					if (!(_this1->_construct)) {
HXLINE(  64)						bool _hx_tmp11;
HXDLIN(  64)						if (hx::IsNotNull( _this1->listen_y )) {
HXLINE(  64)							_hx_tmp11 = !(_this1->ignore_listeners);
            						}
            						else {
HXLINE(  64)							_hx_tmp11 = false;
            						}
HXDLIN(  64)						if (_hx_tmp11) {
HXLINE(  64)							_this1->listen_y(_y3);
            						}
            					}
            				}
HXDLIN(  64)				{
HXLINE(  64)					_this1->z = _z1;
HXDLIN(  64)					if (!(_this1->_construct)) {
HXLINE(  64)						bool _hx_tmp12;
HXDLIN(  64)						if (hx::IsNotNull( _this1->listen_z )) {
HXLINE(  64)							_hx_tmp12 = !(_this1->ignore_listeners);
            						}
            						else {
HXLINE(  64)							_hx_tmp12 = false;
            						}
HXDLIN(  64)						if (_hx_tmp12) {
HXLINE(  64)							_this1->listen_z(_z1);
            						}
            					}
            				}
HXDLIN(  64)				_this1->w = _w1;
HXDLIN(  64)				_this1->ignore_listeners = prev1;
HXDLIN(  64)				bool _hx_tmp13;
HXDLIN(  64)				if (hx::IsNotNull( _this1->listen_x )) {
HXLINE(  64)					_hx_tmp13 = !(_this1->ignore_listeners);
            				}
            				else {
HXLINE(  64)					_hx_tmp13 = false;
            				}
HXDLIN(  64)				if (_hx_tmp13) {
HXLINE(  64)					_this1->listen_x(_this1->x);
            				}
HXDLIN(  64)				bool _hx_tmp14;
HXDLIN(  64)				if (hx::IsNotNull( _this1->listen_y )) {
HXLINE(  64)					_hx_tmp14 = !(_this1->ignore_listeners);
            				}
            				else {
HXLINE(  64)					_hx_tmp14 = false;
            				}
HXDLIN(  64)				if (_hx_tmp14) {
HXLINE(  64)					_this1->listen_y(_this1->y);
            				}
HXDLIN(  64)				bool _hx_tmp15;
HXDLIN(  64)				if (hx::IsNotNull( _this1->listen_z )) {
HXLINE(  64)					_hx_tmp15 = !(_this1->ignore_listeners);
            				}
            				else {
HXLINE(  64)					_hx_tmp15 = false;
            				}
HXDLIN(  64)				if (_hx_tmp15) {
HXLINE(  64)					_this1->listen_z(_this1->z);
            				}
            			}
            		}
HXLINE(  67)		 ::entities::Player _hx_tmp16 = this->ref;
HXDLIN(  67)		Float _hx_tmp17 = ::Math_obj::atan2(rot2->y,rot2->x);
HXDLIN(  67)		_hx_tmp16->set_radians((_hx_tmp17 + ((Float)::Math_obj::PI / (Float)(int)2)));
HXLINE(  68)		 ::luxe::Visual _hx_tmp18 = this->ref->dir_vis;
HXDLIN(  68)		_hx_tmp18->set_radians(this->ref->get_radians());
HXLINE(  70)		if (::Luxe_obj::input->inputdown(HX_("teleport",ab,a2,33,f3))) {
HXLINE(  71)			 ::phoenix::Vector this1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,this->jump_distance,null(),null());
HXDLIN(  71)			this->jump_target = this1;
HXLINE(  72)			{
HXLINE(  72)				 ::phoenix::Vector _this2 = this->jump_target;
HXDLIN(  72)				Float value = ::Math_obj::atan2(rot2->y,rot2->x);
HXDLIN(  72)				Float len = (_this2->x * _this2->x);
HXDLIN(  72)				Float len1 = (len + (_this2->y * _this2->y));
HXDLIN(  72)				Float len2 = ::Math_obj::sqrt((len1 + (_this2->z * _this2->z)));
HXDLIN(  72)				{
HXLINE(  72)					Float _x4 = (::Math_obj::cos(value) * len2);
HXDLIN(  72)					Float _y4 = (::Math_obj::sin(value) * len2);
HXDLIN(  72)					bool prev2 = _this2->ignore_listeners;
HXDLIN(  72)					_this2->ignore_listeners = true;
HXDLIN(  72)					{
HXLINE(  72)						_this2->x = _x4;
HXDLIN(  72)						if (!(_this2->_construct)) {
HXLINE(  72)							bool _hx_tmp19;
HXDLIN(  72)							if (hx::IsNotNull( _this2->listen_x )) {
HXLINE(  72)								_hx_tmp19 = !(_this2->ignore_listeners);
            							}
            							else {
HXLINE(  72)								_hx_tmp19 = false;
            							}
HXDLIN(  72)							if (_hx_tmp19) {
HXLINE(  72)								_this2->listen_x(_x4);
            							}
            						}
            					}
HXDLIN(  72)					{
HXLINE(  72)						_this2->y = _y4;
HXDLIN(  72)						if (!(_this2->_construct)) {
HXLINE(  72)							bool _hx_tmp20;
HXDLIN(  72)							if (hx::IsNotNull( _this2->listen_y )) {
HXLINE(  72)								_hx_tmp20 = !(_this2->ignore_listeners);
            							}
            							else {
HXLINE(  72)								_hx_tmp20 = false;
            							}
HXDLIN(  72)							if (_hx_tmp20) {
HXLINE(  72)								_this2->listen_y(_y4);
            							}
            						}
            					}
HXDLIN(  72)					_this2->ignore_listeners = prev2;
HXDLIN(  72)					bool _hx_tmp21;
HXDLIN(  72)					if (hx::IsNotNull( _this2->listen_x )) {
HXLINE(  72)						_hx_tmp21 = !(_this2->ignore_listeners);
            					}
            					else {
HXLINE(  72)						_hx_tmp21 = false;
            					}
HXDLIN(  72)					if (_hx_tmp21) {
HXLINE(  72)						_this2->listen_x(_this2->x);
            					}
HXDLIN(  72)					bool _hx_tmp22;
HXDLIN(  72)					if (hx::IsNotNull( _this2->listen_y )) {
HXLINE(  72)						_hx_tmp22 = !(_this2->ignore_listeners);
            					}
            					else {
HXLINE(  72)						_hx_tmp22 = false;
            					}
HXDLIN(  72)					if (_hx_tmp22) {
HXLINE(  72)						_this2->listen_y(_this2->y);
            					}
            				}
            			}
HXLINE(  73)			 ::luxe::Visual _hx_tmp23 = this->ref->jump_vis;
HXDLIN(  73)			 ::luxe::Draw _hx_tmp24 = ::Luxe_obj::draw;
HXLINE(  74)			 ::phoenix::Vector _hx_tmp25 = this->jump_target;
HXDLIN(  74)			 ::phoenix::Vector this2 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null());
HXLINE(  73)			_hx_tmp23->set_geometry(_hx_tmp24->line( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("p0",c0,61,00,00),_hx_tmp25)
            				->setFixed(1,HX_("p1",c1,61,00,00),this2))));
            		}
HXLINE(  77)		if (this->canJump) {
HXLINE(  78)			if (::Luxe_obj::input->inputreleased(HX_("teleport",ab,a2,33,f3))) {
HXLINE(  79)				this->jump();
            			}
            		}
            	}


void PlayerController_obj::ondestroy(){
            	HX_STACKFRAME(&_hx_pos_0795afc6cab3c655_50_ondestroy)
HXDLIN(  50)		this->super::ondestroy();
            	}


void PlayerController_obj::onremoved(){
            	HX_STACKFRAME(&_hx_pos_0795afc6cab3c655_62_onremoved)
HXDLIN(  62)		this->super::onremoved();
            	}



hx::ObjectPtr< PlayerController_obj > PlayerController_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< PlayerController_obj > __this = new PlayerController_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< PlayerController_obj > PlayerController_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	PlayerController_obj *__this = (PlayerController_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayerController_obj), true, "components.PlayerController"));
	*(void **)__this = PlayerController_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

PlayerController_obj::PlayerController_obj()
{
}

void PlayerController_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayerController);
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(mouse,"mouse");
	HX_MARK_MEMBER_NAME(ref,"ref");
	HX_MARK_MEMBER_NAME(canJump,"canJump");
	HX_MARK_MEMBER_NAME(jump_distance,"jump_distance");
	HX_MARK_MEMBER_NAME(jump_cooldown,"jump_cooldown");
	HX_MARK_MEMBER_NAME(jump_target,"jump_target");
	 ::luxe::Component_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayerController_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(mouse,"mouse");
	HX_VISIT_MEMBER_NAME(ref,"ref");
	HX_VISIT_MEMBER_NAME(canJump,"canJump");
	HX_VISIT_MEMBER_NAME(jump_distance,"jump_distance");
	HX_VISIT_MEMBER_NAME(jump_cooldown,"jump_cooldown");
	HX_VISIT_MEMBER_NAME(jump_target,"jump_target");
	 ::luxe::Component_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayerController_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ref") ) { return hx::Val( ref ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"jump") ) { return hx::Val( jump_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"mouse") ) { return hx::Val( mouse ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"canJump") ) { return hx::Val( canJump ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ondestroy") ) { return hx::Val( ondestroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"onremoved") ) { return hx::Val( onremoved_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"jump_target") ) { return hx::Val( jump_target ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"jump_distance") ) { return hx::Val( jump_distance ); }
		if (HX_FIELD_EQ(inName,"jump_cooldown") ) { return hx::Val( jump_cooldown ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayerController_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ref") ) { ref=inValue.Cast<  ::entities::Player >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouse") ) { mouse=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"canJump") ) { canJump=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"jump_target") ) { jump_target=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"jump_distance") ) { jump_distance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jump_cooldown") ) { jump_cooldown=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayerController_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c"));
	outFields->push(HX_HCSTRING("ref","\x53","\xd9","\x56","\x00"));
	outFields->push(HX_HCSTRING("canJump","\x1e","\xad","\xc1","\x64"));
	outFields->push(HX_HCSTRING("jump_distance","\xe6","\xb7","\x08","\xa1"));
	outFields->push(HX_HCSTRING("jump_cooldown","\x5c","\x70","\xb1","\x2e"));
	outFields->push(HX_HCSTRING("jump_target","\xc2","\xd9","\x60","\x0a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayerController_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(PlayerController_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(PlayerController_obj,mouse),HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c")},
	{hx::fsObject /*::entities::Player*/ ,(int)offsetof(PlayerController_obj,ref),HX_HCSTRING("ref","\x53","\xd9","\x56","\x00")},
	{hx::fsBool,(int)offsetof(PlayerController_obj,canJump),HX_HCSTRING("canJump","\x1e","\xad","\xc1","\x64")},
	{hx::fsFloat,(int)offsetof(PlayerController_obj,jump_distance),HX_HCSTRING("jump_distance","\xe6","\xb7","\x08","\xa1")},
	{hx::fsFloat,(int)offsetof(PlayerController_obj,jump_cooldown),HX_HCSTRING("jump_cooldown","\x5c","\x70","\xb1","\x2e")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(PlayerController_obj,jump_target),HX_HCSTRING("jump_target","\xc2","\xd9","\x60","\x0a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayerController_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayerController_obj_sMemberFields[] = {
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c"),
	HX_HCSTRING("ref","\x53","\xd9","\x56","\x00"),
	HX_HCSTRING("canJump","\x1e","\xad","\xc1","\x64"),
	HX_HCSTRING("jump_distance","\xe6","\xb7","\x08","\xa1"),
	HX_HCSTRING("jump_cooldown","\x5c","\x70","\xb1","\x2e"),
	HX_HCSTRING("jump_target","\xc2","\xd9","\x60","\x0a"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("jump","\xee","\xc4","\x69","\x46"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("ondestroy","\xbb","\xbd","\xdf","\x2e"),
	HX_HCSTRING("onremoved","\x61","\xb0","\x59","\xfd"),
	::String(null()) };

static void PlayerController_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayerController_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayerController_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayerController_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayerController_obj::__mClass;

void PlayerController_obj::__register()
{
	hx::Object *dummy = new PlayerController_obj;
	PlayerController_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("components.PlayerController","\xd5","\xb5","\x49","\x4c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayerController_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayerController_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayerController_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayerController_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayerController_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayerController_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace components
