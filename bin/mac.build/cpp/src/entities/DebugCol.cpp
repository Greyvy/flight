// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_entities_DebugCol
#include <entities/DebugCol.h>
#endif
#ifndef INCLUDED_luxe_Draw
#include <luxe/Draw.h>
#endif
#ifndef INCLUDED_luxe_collision_ShapeDrawer
#include <luxe/collision/ShapeDrawer.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_LineGeometry
#include <phoenix/geometry/LineGeometry.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0bd4710041daadb9_13_new,"entities.DebugCol","new",0x2237058c,"entities.DebugCol.new","entities/Player.hx",13,0x7a521d4f)
HX_LOCAL_STACK_FRAME(_hx_pos_0bd4710041daadb9_15_drawLine,"entities.DebugCol","drawLine",0x052d4d6c,"entities.DebugCol.drawLine","entities/Player.hx",15,0x7a521d4f)
namespace entities{

void DebugCol_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0bd4710041daadb9_13_new)
HXDLIN(  13)		super::__construct();
            	}

Dynamic DebugCol_obj::__CreateEmpty() { return new DebugCol_obj; }

void *DebugCol_obj::_hx_vtable = 0;

Dynamic DebugCol_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DebugCol_obj > _hx_result = new DebugCol_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DebugCol_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5038dc0e) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x5038dc0e;
	} else {
		return inClassId==(int)0x64773956;
	}
}

void DebugCol_obj::drawLine(Float p0x,Float p0y,Float p1x,Float p1y, ::Dynamic __o_startPoint){
 ::Dynamic startPoint = __o_startPoint.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_0bd4710041daadb9_15_drawLine)
HXDLIN(  15)		 ::luxe::Draw _hx_tmp = ::Luxe_obj::draw;
HXLINE(  16)		 ::phoenix::Vector this1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,p0x,p0y,null(),null());
HXDLIN(  16)		 ::phoenix::Vector _hx_tmp1 = this1;
HXLINE(  17)		 ::phoenix::Vector this2 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,p1x,p1y,null(),null());
HXDLIN(  17)		 ::phoenix::Vector _hx_tmp2 = this2;
HXLINE(  15)		_hx_tmp->line( ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("p0",c0,61,00,00),_hx_tmp1)
            			->setFixed(1,HX_("p1",c1,61,00,00),_hx_tmp2)
            			->setFixed(2,HX_("color",63,71,5c,4a), ::phoenix::Color_obj::__alloc( HX_CTX ,(int)0,(int)1,(int)0,((Float)0.5)))));
            	}



hx::ObjectPtr< DebugCol_obj > DebugCol_obj::__new() {
	hx::ObjectPtr< DebugCol_obj > __this = new DebugCol_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DebugCol_obj > DebugCol_obj::__alloc(hx::Ctx *_hx_ctx) {
	DebugCol_obj *__this = (DebugCol_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DebugCol_obj), false, "entities.DebugCol"));
	*(void **)__this = DebugCol_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DebugCol_obj::DebugCol_obj()
{
}

hx::Val DebugCol_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"drawLine") ) { return hx::Val( drawLine_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *DebugCol_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *DebugCol_obj_sStaticStorageInfo = 0;
#endif

static ::String DebugCol_obj_sMemberFields[] = {
	HX_HCSTRING("drawLine","\x18","\xc2","\x1c","\x5c"),
	::String(null()) };

static void DebugCol_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DebugCol_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DebugCol_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DebugCol_obj::__mClass,"__mClass");
};

#endif

hx::Class DebugCol_obj::__mClass;

void DebugCol_obj::__register()
{
	hx::Object *dummy = new DebugCol_obj;
	DebugCol_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("entities.DebugCol","\x9a","\x8f","\xd2","\xb9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DebugCol_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DebugCol_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DebugCol_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DebugCol_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DebugCol_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DebugCol_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace entities
