// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_components_PlayerController
#include <components/PlayerController.h>
#endif
#ifndef INCLUDED_entities_Player
#include <entities/Player.h>
#endif
#ifndef INCLUDED_luxe_Component
#include <luxe/Component.h>
#endif
#ifndef INCLUDED_luxe_Draw
#include <luxe/Draw.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_Input
#include <luxe/Input.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
#ifndef INCLUDED_luxe_collision_shapes_Polygon
#include <luxe/collision/shapes/Polygon.h>
#endif
#ifndef INCLUDED_luxe_collision_shapes_Shape
#include <luxe/collision/shapes/Shape.h>
#endif
#ifndef INCLUDED_luxe_components_Components
#include <luxe/components/Components.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_CircleGeometry
#include <phoenix/geometry/CircleGeometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_LineGeometry
#include <phoenix/geometry/LineGeometry.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_57f67ed96780d88a_24_new,"entities.Player","new",0x0cad9a00,"entities.Player.new","entities/Player.hx",24,0x7a521d4f)
HX_LOCAL_STACK_FRAME(_hx_pos_57f67ed96780d88a_31_init,"entities.Player","init",0x07f1dd70,"entities.Player.init","entities/Player.hx",31,0x7a521d4f)
HX_LOCAL_STACK_FRAME(_hx_pos_57f67ed96780d88a_59_update,"entities.Player","update",0x3df18069,"entities.Player.update","entities/Player.hx",59,0x7a521d4f)
HX_LOCAL_STACK_FRAME(_hx_pos_a17368351c684beb_47_ondestroy,"entities.Player","ondestroy",0xdba07f5b,"entities.Player.ondestroy","luxe/macros/EntityRules.hx",47,0xed942299)
namespace entities{

void Player_obj::__construct( ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_57f67ed96780d88a_24_new)
HXDLIN(  24)		super::__construct(_options);
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0bbca018) {
		if (inClassId<=(int)0x099ca90a) {
			if (inClassId<=(int)0x025d481e) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x025d481e;
			} else {
				return inClassId==(int)0x099ca90a;
			}
		} else {
			return inClassId==(int)0x0bbca018;
		}
	} else {
		return inClassId==(int)0x17ed3881 || inClassId==(int)0x7fff6182;
	}
}

void Player_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_57f67ed96780d88a_31_init)
HXLINE(  33)		this->set_geometry(::Luxe_obj::draw->ngon( ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("solid",2b,b4,c5,80),true)
            			->setFixed(1,HX_("r",72,00,00,00),(int)16)
            			->setFixed(2,HX_("x",78,00,00,00),(int)0)
            			->setFixed(3,HX_("y",79,00,00,00),(int)0)
            			->setFixed(4,HX_("sides",fc,56,c8,7c),(int)3))));
HXLINE(  34)		this->set_color( ::phoenix::Color_obj::__alloc( HX_CTX ,(int)1,(int)1,(int)1,(int)1));
HXLINE(  38)		 ::phoenix::Vector _hx_tmp = this->get_pos();
HXLINE(  39)		 ::phoenix::geometry::Geometry _hx_tmp1 = ( ( ::phoenix::geometry::Geometry)(::Luxe_obj::draw->circle( ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("r",72,00,00,00),(int)2)
            			->setFixed(1,HX_("x",78,00,00,00),(int)0)
            			->setFixed(2,HX_("y",79,00,00,00),(int)-10)))) );
HXLINE(  36)		this->dir_vis =  ::luxe::Visual_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("geometry",b2,02,a9,d2),_hx_tmp1)
            			->setFixed(1,HX_("depth",03,f1,29,d7),(int)1)
            			->setFixed(2,HX_("pos",94,5d,55,00),_hx_tmp)
            			->setFixed(3,HX_("name",4b,72,ff,48),HX_("player_direction",a1,2c,56,7a))
            			->setFixed(4,HX_("color",63,71,5c,4a), ::phoenix::Color_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)1))));
HXLINE(  46)		 ::phoenix::Vector _hx_tmp2 = this->get_pos();
HXLINE(  48)		 ::luxe::Draw _hx_tmp3 = ::Luxe_obj::draw;
HXDLIN(  48)		 ::phoenix::Vector this1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null());
HXDLIN(  48)		 ::phoenix::Vector _hx_tmp4 = this1;
HXDLIN(  48)		 ::phoenix::Vector this2 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(int)128,null(),null());
HXDLIN(  48)		 ::phoenix::geometry::Geometry _hx_tmp5 = ( ( ::phoenix::geometry::Geometry)(_hx_tmp3->line( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("p0",c0,61,00,00),_hx_tmp4)
            			->setFixed(1,HX_("p1",c1,61,00,00),this2)))) );
HXLINE(  43)		this->jump_vis =  ::luxe::Visual_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("visible",72,78,24,a3),false)
            			->setFixed(1,HX_("geometry",b2,02,a9,d2),_hx_tmp5)
            			->setFixed(2,HX_("depth",03,f1,29,d7),(int)3)
            			->setFixed(3,HX_("pos",94,5d,55,00),_hx_tmp2)
            			->setFixed(4,HX_("name",4b,72,ff,48),HX_("player_jump_visualization",71,95,c0,2c))
            			->setFixed(5,HX_("color",63,71,5c,4a), ::phoenix::Color_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)1,(int)1))));
HXLINE(  52)		Float _hx_tmp6 = this->get_pos()->x;
HXDLIN(  52)		this->collider = ::luxe::collision::shapes::Polygon_obj::create(_hx_tmp6,this->get_pos()->y,(int)3,(int)16);
HXLINE(  53)		this->collider->name = HX_("player_collision",d4,72,50,45);
HXLINE(  55)		{
HXLINE(  55)			 ::components::PlayerController _component =  ::components::PlayerController_obj::__alloc( HX_CTX ,null());
HXDLIN(  55)			this->component_count++;
HXDLIN(  55)			this->_components->add(_component).StaticCast<  ::components::PlayerController >();
            		}
            	}


void Player_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_57f67ed96780d88a_59_update)
HXLINE(  66)		if (::Luxe_obj::input->inputdown(HX_("teleport",ab,a2,33,f3))) {
HXLINE(  67)			this->jump_vis->set_visible(true);
            		}
HXLINE(  70)		if (::Luxe_obj::input->inputreleased(HX_("teleport",ab,a2,33,f3))) {
HXLINE(  71)			this->jump_vis->set_visible(false);
            		}
HXLINE(  74)		{
HXLINE(  74)			 ::luxe::collision::shapes::Polygon _this = this->collider;
HXDLIN(  74)			_this->_position = this->get_pos();
HXDLIN(  74)			_this->refresh_transform();
HXDLIN(  74)			if (hx::IsNotNull( _this->_position )) {
HXLINE(  74)				 ::phoenix::Vector _v = _this->_position;
HXDLIN(  74)				 ::Dynamic listener = _this->_pos_changed_dyn();
HXDLIN(  74)				_v->listen_x = listener;
HXDLIN(  74)				_v->listen_y = listener;
HXDLIN(  74)				_v->listen_z = listener;
            			}
            		}
HXLINE(  75)		{
HXLINE(  75)			 ::luxe::collision::shapes::Polygon _this1 = this->collider;
HXDLIN(  75)			Float v = (this->get_radians() * (int)180);
HXDLIN(  75)			Float v1 = ((Float)v / (Float)::Math_obj::PI);
HXDLIN(  75)			_this1->_rotation_radians = (v1 * ((Float)::Math_obj::PI / (Float)(int)180));
HXDLIN(  75)			_this1->refresh_transform();
HXDLIN(  75)			_this1->_rotation = v1;
            		}
            	}


void Player_obj::ondestroy(){
            	HX_STACKFRAME(&_hx_pos_a17368351c684beb_47_ondestroy)
HXDLIN(  47)		this->super::ondestroy();
            	}



hx::ObjectPtr< Player_obj > Player_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "entities.Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(dir_vis,"dir_vis");
	HX_MARK_MEMBER_NAME(jump_vis,"jump_vis");
	HX_MARK_MEMBER_NAME(collider,"collider");
	 ::luxe::Visual_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(dir_vis,"dir_vis");
	HX_VISIT_MEMBER_NAME(jump_vis,"jump_vis");
	HX_VISIT_MEMBER_NAME(collider,"collider");
	 ::luxe::Visual_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dir_vis") ) { return hx::Val( dir_vis ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"jump_vis") ) { return hx::Val( jump_vis ); }
		if (HX_FIELD_EQ(inName,"collider") ) { return hx::Val( collider ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ondestroy") ) { return hx::Val( ondestroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"dir_vis") ) { dir_vis=inValue.Cast<  ::luxe::Visual >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"jump_vis") ) { jump_vis=inValue.Cast<  ::luxe::Visual >(); return inValue; }
		if (HX_FIELD_EQ(inName,"collider") ) { collider=inValue.Cast<  ::luxe::collision::shapes::Polygon >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("dir_vis","\xae","\x92","\xae","\x1c"));
	outFields->push(HX_HCSTRING("jump_vis","\xcf","\xfe","\x1e","\x01"));
	outFields->push(HX_HCSTRING("collider","\x34","\xdf","\xd5","\xc9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::Visual*/ ,(int)offsetof(Player_obj,dir_vis),HX_HCSTRING("dir_vis","\xae","\x92","\xae","\x1c")},
	{hx::fsObject /*::luxe::Visual*/ ,(int)offsetof(Player_obj,jump_vis),HX_HCSTRING("jump_vis","\xcf","\xfe","\x1e","\x01")},
	{hx::fsObject /*::luxe::collision::shapes::Polygon*/ ,(int)offsetof(Player_obj,collider),HX_HCSTRING("collider","\x34","\xdf","\xd5","\xc9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("dir_vis","\xae","\x92","\xae","\x1c"),
	HX_HCSTRING("jump_vis","\xcf","\xfe","\x1e","\x01"),
	HX_HCSTRING("collider","\x34","\xdf","\xd5","\xc9"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("ondestroy","\xbb","\xbd","\xdf","\x2e"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("entities.Player","\x0e","\xda","\xe0","\x13");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace entities
