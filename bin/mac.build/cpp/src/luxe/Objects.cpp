// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_utils_Utils
#include <luxe/utils/Utils.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e3cc1a725521c8c6_21_new,"luxe.Objects","new",0xcbec42ee,"luxe.Objects.new","luxe/Objects.hx",21,0xf92c5f83)
HX_LOCAL_STACK_FRAME(_hx_pos_e3cc1a725521c8c6_38_set_name,"luxe.Objects","set_name",0x1a4f11fa,"luxe.Objects.set_name","luxe/Objects.hx",38,0xf92c5f83)
HX_LOCAL_STACK_FRAME(_hx_pos_e3cc1a725521c8c6_39_set_id,"luxe.Objects","set_id",0xab0f61ca,"luxe.Objects.set_id","luxe/Objects.hx",39,0xf92c5f83)
HX_LOCAL_STACK_FRAME(_hx_pos_e3cc1a725521c8c6_40_get_name,"luxe.Objects","get_name",0x6bf1b886,"luxe.Objects.get_name","luxe/Objects.hx",40,0xf92c5f83)
HX_LOCAL_STACK_FRAME(_hx_pos_e3cc1a725521c8c6_41_get_id,"luxe.Objects","get_id",0xdec70d56,"luxe.Objects.get_id","luxe/Objects.hx",41,0xf92c5f83)
namespace luxe{

void Objects_obj::__construct(::String __o__name,::String __o__id){
::String _name = __o__name.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String _id = __o__id.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_e3cc1a725521c8c6_21_new)
HXLINE(  26)		this->name = HX_("",00,00,00,00);
HXLINE(  24)		this->id = HX_("",00,00,00,00);
HXLINE(  30)		super::__construct();
HXLINE(  31)		this->set_name(_name);
HXLINE(  32)		::String _hx_tmp;
HXDLIN(  32)		if ((_id == HX_("",00,00,00,00))) {
HXLINE(  32)			_hx_tmp = ::Luxe_obj::utils->uniqueid(null());
            		}
            		else {
HXLINE(  32)			_hx_tmp = _id;
            		}
HXDLIN(  32)		this->set_id(_hx_tmp);
            	}

Dynamic Objects_obj::__CreateEmpty() { return new Objects_obj; }

void *Objects_obj::_hx_vtable = 0;

Dynamic Objects_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Objects_obj > _hx_result = new Objects_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Objects_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x099ca90a) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x099ca90a;
	} else {
		return inClassId==(int)0x0bbca018;
	}
}

::String Objects_obj::set_name(::String _name){
            	HX_STACKFRAME(&_hx_pos_e3cc1a725521c8c6_38_set_name)
HXDLIN(  38)		return (this->name = _name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Objects_obj,set_name,return )

::String Objects_obj::set_id(::String _id){
            	HX_STACKFRAME(&_hx_pos_e3cc1a725521c8c6_39_set_id)
HXDLIN(  39)		return (this->id = _id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Objects_obj,set_id,return )

::String Objects_obj::get_name(){
            	HX_STACKFRAME(&_hx_pos_e3cc1a725521c8c6_40_get_name)
HXDLIN(  40)		return this->name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Objects_obj,get_name,return )

::String Objects_obj::get_id(){
            	HX_STACKFRAME(&_hx_pos_e3cc1a725521c8c6_41_get_id)
HXDLIN(  41)		return this->id;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Objects_obj,get_id,return )


hx::ObjectPtr< Objects_obj > Objects_obj::__new(::String __o__name,::String __o__id) {
	hx::ObjectPtr< Objects_obj > __this = new Objects_obj();
	__this->__construct(__o__name,__o__id);
	return __this;
}

hx::ObjectPtr< Objects_obj > Objects_obj::__alloc(hx::Ctx *_hx_ctx,::String __o__name,::String __o__id) {
	Objects_obj *__this = (Objects_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Objects_obj), true, "luxe.Objects"));
	*(void **)__this = Objects_obj::_hx_vtable;
	__this->__construct(__o__name,__o__id);
	return __this;
}

Objects_obj::Objects_obj()
{
}

void Objects_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Objects);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(name,"name");
	 ::luxe::Emitter_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Objects_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(name,"name");
	 ::luxe::Emitter_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Objects_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( inCallProp == hx::paccAlways ? get_id() : id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( inCallProp == hx::paccAlways ? get_name() : name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"set_id") ) { return hx::Val( set_id_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_id") ) { return hx::Val( get_id_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"set_name") ) { return hx::Val( set_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_name") ) { return hx::Val( get_name_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Objects_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_id(inValue.Cast< ::String >()) );id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_name(inValue.Cast< ::String >()) );name=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Objects_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Objects_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Objects_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsString,(int)offsetof(Objects_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Objects_obj_sStaticStorageInfo = 0;
#endif

static ::String Objects_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("set_name","\x48","\x87","\x17","\x77"),
	HX_HCSTRING("set_id","\x98","\x47","\x78","\x6f"),
	HX_HCSTRING("get_name","\xd4","\x2d","\xba","\xc8"),
	HX_HCSTRING("get_id","\x24","\xf3","\x2f","\xa3"),
	::String(null()) };

static void Objects_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Objects_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Objects_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Objects_obj::__mClass,"__mClass");
};

#endif

hx::Class Objects_obj::__mClass;

void Objects_obj::__register()
{
	hx::Object *dummy = new Objects_obj;
	Objects_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Objects","\xfc","\xf3","\x40","\x95");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Objects_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Objects_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Objects_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Objects_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Objects_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Objects_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
