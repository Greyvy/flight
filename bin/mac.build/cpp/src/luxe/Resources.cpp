// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Parcel
#include <luxe/Parcel.h>
#endif
#ifndef INCLUDED_luxe_ResourceStats
#include <luxe/ResourceStats.h>
#endif
#ifndef INCLUDED_luxe_Resources
#include <luxe/Resources.h>
#endif
#ifndef INCLUDED_luxe_resource_AudioResource
#include <luxe/resource/AudioResource.h>
#endif
#ifndef INCLUDED_luxe_resource_BytesResource
#include <luxe/resource/BytesResource.h>
#endif
#ifndef INCLUDED_luxe_resource_JSONResource
#include <luxe/resource/JSONResource.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_luxe_resource_TextResource
#include <luxe/resource/TextResource.h>
#endif
#ifndef INCLUDED_phoenix_BitmapFont
#include <phoenix/BitmapFont.h>
#endif
#ifndef INCLUDED_phoenix_Shader
#include <phoenix/Shader.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Asset
#include <snow/systems/assets/Asset.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetAudio
#include <snow/systems/assets/AssetAudio.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetBytes
#include <snow/systems/assets/AssetBytes.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetJSON
#include <snow/systems/assets/AssetJSON.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetText
#include <snow/systems/assets/AssetText.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_30_new,"luxe.Resources","new",0xf66d287f,"luxe.Resources.new","luxe/Resources.hx",30,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_39_track,"luxe.Resources","track",0xc7566c6a,"luxe.Resources.track","luxe/Resources.hx",39,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_49_untrack,"luxe.Resources","untrack",0xa5c1d931,"luxe.Resources.untrack","luxe/Resources.hx",49,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_64_add,"luxe.Resources","add",0xf6634a40,"luxe.Resources.add","luxe/Resources.hx",64,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_77_remove,"luxe.Resources","remove",0x6353e185,"luxe.Resources.remove","luxe/Resources.hx",77,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_90_destroy,"luxe.Resources","destroy",0xb7978099,"luxe.Resources.destroy","luxe/Resources.hx",90,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_103_invalidate,"luxe.Resources","invalidate",0xba87933c,"luxe.Resources.invalidate","luxe/Resources.hx",103,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_119_on,"luxe.Resources","on",0xe58db1e0,"luxe.Resources.on","luxe/Resources.hx",119,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_125_off,"luxe.Resources","off",0xf66deb8e,"luxe.Resources.off","luxe/Resources.hx",125,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_129_emit,"luxe.Resources","emit",0xa3296154,"luxe.Resources.emit","luxe/Resources.hx",129,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_139_load_bytes,"luxe.Resources","load_bytes",0x6d738413,"luxe.Resources.load_bytes","luxe/Resources.hx",139,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_165_load_text,"luxe.Resources","load_text",0x00d97e05,"luxe.Resources.load_text","luxe/Resources.hx",165,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_191_load_json,"luxe.Resources","load_json",0xfa47f380,"luxe.Resources.load_json","luxe/Resources.hx",191,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_217_load_texture,"luxe.Resources","load_texture",0x99507e83,"luxe.Resources.load_texture","luxe/Resources.hx",217,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_263_load_font,"luxe.Resources","load_font",0xf7a00f27,"luxe.Resources.load_font","luxe/Resources.hx",263,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_294_load_shader,"luxe.Resources","load_shader",0x4d51767d,"luxe.Resources.load_shader","luxe/Resources.hx",294,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_322_load_audio,"luxe.Resources","load_audio",0xd75bf47e,"luxe.Resources.load_audio","luxe/Resources.hx",322,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_356_has,"luxe.Resources","has",0xf6689779,"luxe.Resources.has","luxe/Resources.hx",356,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_357_get,"luxe.Resources","get",0xf667d8b5,"luxe.Resources.get","luxe/Resources.hx",357,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_358_bytes,"luxe.Resources","bytes",0x6ecee64a,"luxe.Resources.bytes","luxe/Resources.hx",358,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_359_text,"luxe.Resources","text",0xad0d8fae,"luxe.Resources.text","luxe/Resources.hx",359,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_360_json,"luxe.Resources","json",0xa67c0529,"luxe.Resources.json","luxe/Resources.hx",360,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_361_texture,"luxe.Resources","texture",0x31f21c7a,"luxe.Resources.texture","luxe/Resources.hx",361,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_362_font,"luxe.Resources","font",0xa3d420d0,"luxe.Resources.font","luxe/Resources.hx",362,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_363_shader,"luxe.Resources","shader",0x7bec0466,"luxe.Resources.shader","luxe/Resources.hx",363,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_364_audio,"luxe.Resources","audio",0xd8b756b5,"luxe.Resources.audio","luxe/Resources.hx",364,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_369_fetch,"luxe.Resources","fetch",0xaf30f219,"luxe.Resources.fetch","luxe/Resources.hx",369,0x2b4e2952)
HX_LOCAL_STACK_FRAME(_hx_pos_a1ac9944ee6d8608_372_update_stats,"luxe.Resources","update_stats",0x2c221c2a,"luxe.Resources.update_stats","luxe/Resources.hx",372,0x2b4e2952)
namespace luxe{

void Resources_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_30_new)
HXLINE(  31)		this->parcels = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  32)		this->emitter =  ::luxe::Emitter_obj::__alloc( HX_CTX );
HXLINE(  33)		this->cache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  34)		this->stats =  ::luxe::ResourceStats_obj::__alloc( HX_CTX );
            	}

Dynamic Resources_obj::__CreateEmpty() { return new Resources_obj; }

void *Resources_obj::_hx_vtable = 0;

Dynamic Resources_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Resources_obj > _hx_result = new Resources_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Resources_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x14e6c10f;
}

void Resources_obj::track( ::luxe::Parcel _cache){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_39_track)
HXLINE(  41)		if (hx::IsNull( _cache )) {
HXLINE(  41)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("_cache was null",1b,2f,49,0c)));
            		}
HXLINE(  42)		if ((this->parcels->indexOf(_cache,null()) != (int)-1)) {
HXLINE(  42)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion(HX_("parcels.indexOf(_cache) == -1",47,d5,0c,9e)));
            		}
HXLINE(  44)		this->parcels->push(_cache);
HXLINE(  45)		this->emit((int)11,_cache);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,track,(void))

void Resources_obj::untrack( ::luxe::Parcel _cache){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_49_untrack)
HXLINE(  51)		if (hx::IsNull( _cache )) {
HXLINE(  51)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("_cache was null",1b,2f,49,0c)));
            		}
HXLINE(  53)		bool _removed = this->parcels->remove(_cache);
HXLINE(  55)		if (_removed) {
HXLINE(  56)			this->emit((int)12,_cache);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,untrack,(void))

void Resources_obj::add( ::luxe::resource::Resource resource){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_64_add)
HXLINE(  66)		if (!(!(this->cache->exists(resource->id)))) {
HXLINE(  66)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion(HX_("!cache.exists(resource.id)",ad,72,b7,be)));
            		}
HXLINE(  68)		this->cache->set(resource->id,resource);
HXLINE(  70)		this->emit((int)2,resource);
HXLINE(  72)		{
HXLINE(  72)			{
HXLINE(  72)				int _g = resource->resource_type;
HXDLIN(  72)				switch((int)(_g)){
            					case (int)0: {
HXLINE(  72)						 ::luxe::ResourceStats _hx_tmp = this->stats;
HXDLIN(  72)						_hx_tmp->unknown = (_hx_tmp->unknown + (int)1);
            					}
            					break;
            					case (int)1: {
HXLINE(  72)						 ::luxe::ResourceStats _hx_tmp1 = this->stats;
HXDLIN(  72)						_hx_tmp1->texts = (_hx_tmp1->texts + (int)1);
            					}
            					break;
            					case (int)2: {
HXLINE(  72)						 ::luxe::ResourceStats _hx_tmp2 = this->stats;
HXDLIN(  72)						_hx_tmp2->jsons = (_hx_tmp2->jsons + (int)1);
            					}
            					break;
            					case (int)3: {
HXLINE(  72)						 ::luxe::ResourceStats _hx_tmp3 = this->stats;
HXDLIN(  72)						_hx_tmp3->bytes = (_hx_tmp3->bytes + (int)1);
            					}
            					break;
            					case (int)4: {
HXLINE(  72)						 ::luxe::ResourceStats _hx_tmp4 = this->stats;
HXDLIN(  72)						_hx_tmp4->textures = (_hx_tmp4->textures + (int)1);
            					}
            					break;
            					case (int)5: {
HXLINE(  72)						 ::luxe::ResourceStats _hx_tmp5 = this->stats;
HXDLIN(  72)						_hx_tmp5->rtt = (_hx_tmp5->rtt + (int)1);
            					}
            					break;
            					case (int)6: {
HXLINE(  72)						 ::luxe::ResourceStats _hx_tmp6 = this->stats;
HXDLIN(  72)						_hx_tmp6->fonts = (_hx_tmp6->fonts + (int)1);
            					}
            					break;
            					case (int)7: {
HXLINE(  72)						 ::luxe::ResourceStats _hx_tmp7 = this->stats;
HXDLIN(  72)						_hx_tmp7->shaders = (_hx_tmp7->shaders + (int)1);
            					}
            					break;
            					case (int)8: {
HXLINE(  72)						 ::luxe::ResourceStats _hx_tmp8 = this->stats;
HXDLIN(  72)						_hx_tmp8->audios = (_hx_tmp8->audios + (int)1);
            					}
            					break;
            				}
            			}
HXDLIN(  72)			 ::luxe::ResourceStats _hx_tmp9 = this->stats;
HXDLIN(  72)			_hx_tmp9->total = (_hx_tmp9->total + (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,add,(void))

bool Resources_obj::remove( ::luxe::resource::Resource resource){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_77_remove)
HXLINE(  79)		if (!(this->cache->exists(resource->id))) {
HXLINE(  79)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion(HX_("cache.exists(resource.id)",ee,50,de,37)));
            		}
HXLINE(  81)		this->emit((int)7,resource);
HXLINE(  83)		{
HXLINE(  83)			{
HXLINE(  83)				int _g = resource->resource_type;
HXDLIN(  83)				switch((int)(_g)){
            					case (int)0: {
HXLINE(  83)						 ::luxe::ResourceStats _hx_tmp = this->stats;
HXDLIN(  83)						_hx_tmp->unknown = (_hx_tmp->unknown + (int)-1);
            					}
            					break;
            					case (int)1: {
HXLINE(  83)						 ::luxe::ResourceStats _hx_tmp1 = this->stats;
HXDLIN(  83)						_hx_tmp1->texts = (_hx_tmp1->texts + (int)-1);
            					}
            					break;
            					case (int)2: {
HXLINE(  83)						 ::luxe::ResourceStats _hx_tmp2 = this->stats;
HXDLIN(  83)						_hx_tmp2->jsons = (_hx_tmp2->jsons + (int)-1);
            					}
            					break;
            					case (int)3: {
HXLINE(  83)						 ::luxe::ResourceStats _hx_tmp3 = this->stats;
HXDLIN(  83)						_hx_tmp3->bytes = (_hx_tmp3->bytes + (int)-1);
            					}
            					break;
            					case (int)4: {
HXLINE(  83)						 ::luxe::ResourceStats _hx_tmp4 = this->stats;
HXDLIN(  83)						_hx_tmp4->textures = (_hx_tmp4->textures + (int)-1);
            					}
            					break;
            					case (int)5: {
HXLINE(  83)						 ::luxe::ResourceStats _hx_tmp5 = this->stats;
HXDLIN(  83)						_hx_tmp5->rtt = (_hx_tmp5->rtt + (int)-1);
            					}
            					break;
            					case (int)6: {
HXLINE(  83)						 ::luxe::ResourceStats _hx_tmp6 = this->stats;
HXDLIN(  83)						_hx_tmp6->fonts = (_hx_tmp6->fonts + (int)-1);
            					}
            					break;
            					case (int)7: {
HXLINE(  83)						 ::luxe::ResourceStats _hx_tmp7 = this->stats;
HXDLIN(  83)						_hx_tmp7->shaders = (_hx_tmp7->shaders + (int)-1);
            					}
            					break;
            					case (int)8: {
HXLINE(  83)						 ::luxe::ResourceStats _hx_tmp8 = this->stats;
HXDLIN(  83)						_hx_tmp8->audios = (_hx_tmp8->audios + (int)-1);
            					}
            					break;
            				}
            			}
HXDLIN(  83)			 ::luxe::ResourceStats _hx_tmp9 = this->stats;
HXDLIN(  83)			_hx_tmp9->total = (_hx_tmp9->total + (int)-1);
            		}
HXLINE(  85)		return this->cache->remove(resource->id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,remove,return )

bool Resources_obj::destroy(::String _id, ::Dynamic __o__force){
 ::Dynamic _force = __o__force.Default(false);
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_90_destroy)
HXLINE(  92)		 ::luxe::resource::Resource _resource = ( ( ::luxe::resource::Resource)(::haxe::IMap_obj::get(this->cache,_id)) );
HXLINE(  94)		if (hx::IsNull( _resource )) {
HXLINE(  94)			return false;
            		}
HXLINE(  96)		_resource->destroy(_force);
HXLINE(  98)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Resources_obj,destroy,return )

bool Resources_obj::invalidate(::String _id){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_103_invalidate)
HXLINE( 105)		 ::luxe::resource::Resource _resource = ( ( ::luxe::resource::Resource)(::haxe::IMap_obj::get(this->cache,_id)) );
HXLINE( 107)		if (hx::IsNull( _resource )) {
HXLINE( 107)			return false;
            		}
HXLINE( 109)		_resource->invalidate();
HXLINE( 111)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,invalidate,return )

void Resources_obj::on(int ev, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_119_on)
HXDLIN( 119)		this->emitter->on(ev,handler);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Resources_obj,on,(void))

void Resources_obj::off(int ev, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_125_off)
HXDLIN( 125)		this->emitter->off(ev,handler);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Resources_obj,off,(void))

void Resources_obj::emit(int ev, ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_129_emit)
HXLINE( 131)		this->emitter->emit((int)1,data);
HXLINE( 132)		this->emitter->emit(ev,data);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Resources_obj,emit,(void))

 ::snow::api::Promise Resources_obj::load_bytes(::String _id){
            	HX_GC_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_139_load_bytes)
HXLINE( 141)		if (hx::IsNull( _id )) {
HXLINE( 141)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE( 143)		 ::luxe::resource::BytesResource _resource = ( ( ::luxe::resource::BytesResource)(::haxe::IMap_obj::get(this->cache,_id)) );
HXLINE( 145)		if (hx::IsNotNull( _resource )) {
HXLINE( 147)			{
HXLINE( 147)				 ::luxe::resource::BytesResource _g = _resource;
HXDLIN( 147)				int _g1 = _g->ref;
HXDLIN( 147)				_g->set_ref((_g1 + (int)1));
            			}
HXLINE( 148)			return ::snow::api::Promise_obj::resolve(_resource);
            		}
HXLINE( 153)		_resource =  ::luxe::resource::BytesResource_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("system",ef,96,e2,f2),hx::ObjectPtr<OBJ_>(this))
            			->setFixed(1,HX_("id",db,5b,00,00),_id)
            			->setFixed(2,HX_("asset",f0,69,39,26),null())));
HXLINE( 159)		this->add(_resource);
HXLINE( 161)		return _resource->reload();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,load_bytes,return )

 ::snow::api::Promise Resources_obj::load_text(::String _id){
            	HX_GC_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_165_load_text)
HXLINE( 167)		if (hx::IsNull( _id )) {
HXLINE( 167)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE( 169)		 ::luxe::resource::TextResource _resource = ( ( ::luxe::resource::TextResource)(::haxe::IMap_obj::get(this->cache,_id)) );
HXLINE( 171)		if (hx::IsNotNull( _resource )) {
HXLINE( 173)			{
HXLINE( 173)				 ::luxe::resource::TextResource _g = _resource;
HXDLIN( 173)				int _g1 = _g->ref;
HXDLIN( 173)				_g->set_ref((_g1 + (int)1));
            			}
HXLINE( 174)			return ::snow::api::Promise_obj::resolve(_resource);
            		}
HXLINE( 179)		_resource =  ::luxe::resource::TextResource_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("system",ef,96,e2,f2),hx::ObjectPtr<OBJ_>(this))
            			->setFixed(1,HX_("id",db,5b,00,00),_id)
            			->setFixed(2,HX_("asset",f0,69,39,26),null())));
HXLINE( 185)		this->add(_resource);
HXLINE( 187)		return _resource->reload();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,load_text,return )

 ::snow::api::Promise Resources_obj::load_json(::String _id){
            	HX_GC_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_191_load_json)
HXLINE( 193)		if (hx::IsNull( _id )) {
HXLINE( 193)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE( 195)		 ::luxe::resource::JSONResource _resource = ( ( ::luxe::resource::JSONResource)(::haxe::IMap_obj::get(this->cache,_id)) );
HXLINE( 197)		if (hx::IsNotNull( _resource )) {
HXLINE( 199)			{
HXLINE( 199)				 ::luxe::resource::JSONResource _g = _resource;
HXDLIN( 199)				int _g1 = _g->ref;
HXDLIN( 199)				_g->set_ref((_g1 + (int)1));
            			}
HXLINE( 200)			return ::snow::api::Promise_obj::resolve(_resource);
            		}
HXLINE( 205)		_resource =  ::luxe::resource::JSONResource_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("system",ef,96,e2,f2),hx::ObjectPtr<OBJ_>(this))
            			->setFixed(1,HX_("id",db,5b,00,00),_id)
            			->setFixed(2,HX_("asset",f0,69,39,26),null())));
HXLINE( 211)		this->add(_resource);
HXLINE( 213)		return _resource->reload();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,load_json,return )

 ::snow::api::Promise Resources_obj::load_texture(::String _id, ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_217_load_texture)
HXLINE( 219)		if (hx::IsNull( _id )) {
HXLINE( 219)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE( 221)		 ::phoenix::Texture _resource = ( ( ::phoenix::Texture)(::haxe::IMap_obj::get(this->cache,_id)) );
HXLINE( 223)		if (hx::IsNotNull( _resource )) {
HXLINE( 225)			{
HXLINE( 225)				 ::phoenix::Texture _g = _resource;
HXDLIN( 225)				int _g1 = _g->ref;
HXDLIN( 225)				_g->set_ref((_g1 + (int)1));
            			}
HXLINE( 226)			return ::snow::api::Promise_obj::resolve(_resource);
            		}
HXLINE( 233)		 ::Dynamic _filter_min = null();
HXLINE( 234)		 ::Dynamic _filter_mag = null();
HXLINE( 235)		 ::Dynamic _clamp_s = null();
HXLINE( 236)		 ::Dynamic _clamp_t = null();
HXLINE( 237)		 ::Dynamic _premultiply = null();
HXLINE( 239)		if (hx::IsNotNull( _options )) {
HXLINE( 240)			_filter_min = _options->__Field(HX_("filter_min",4b,b2,89,60),hx::paccDynamic);
HXLINE( 241)			_filter_mag = _options->__Field(HX_("filter_mag",4c,ab,89,60),hx::paccDynamic);
HXLINE( 242)			_clamp_s = _options->__Field(HX_("clamp_s",ef,ba,97,65),hx::paccDynamic);
HXLINE( 243)			_clamp_t = _options->__Field(HX_("clamp_t",f0,ba,97,65),hx::paccDynamic);
HXLINE( 244)			_premultiply = _options->__Field(HX_("load_premultiply_alpha",8d,fb,f5,ac),hx::paccDynamic);
            		}
HXLINE( 247)		_resource =  ::phoenix::Texture_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("load_premultiply_alpha",8d,fb,f5,ac),_premultiply)
            			->setFixed(1,HX_("system",ef,96,e2,f2),hx::ObjectPtr<OBJ_>(this))
            			->setFixed(2,HX_("id",db,5b,00,00),_id)
            			->setFixed(3,HX_("filter_mag",4c,ab,89,60),_filter_mag)
            			->setFixed(4,HX_("filter_min",4b,b2,89,60),_filter_min)
            			->setFixed(5,HX_("clamp_s",ef,ba,97,65),_clamp_s)
            			->setFixed(6,HX_("clamp_t",f0,ba,97,65),_clamp_t)));
HXLINE( 257)		this->add(_resource);
HXLINE( 259)		return _resource->reload();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Resources_obj,load_texture,return )

 ::snow::api::Promise Resources_obj::load_font(::String _id, ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_263_load_font)
HXLINE( 265)		if (hx::IsNull( _id )) {
HXLINE( 265)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE( 267)		 ::phoenix::BitmapFont _resource = ( ( ::phoenix::BitmapFont)(::haxe::IMap_obj::get(this->cache,_id)) );
HXLINE( 269)		if (hx::IsNotNull( _resource )) {
HXLINE( 271)			{
HXLINE( 271)				 ::phoenix::BitmapFont _g = _resource;
HXDLIN( 271)				int _g1 = _g->ref;
HXDLIN( 271)				_g->set_ref((_g1 + (int)1));
            			}
HXLINE( 272)			return ::snow::api::Promise_obj::resolve(_resource);
            		}
HXLINE( 277)		::String _texture_path = null();
HXLINE( 278)		if (hx::IsNotNull( _options )) {
HXLINE( 279)			_texture_path = ( (::String)(_options->__Field(HX_("texture_path",c9,3e,d5,62),hx::paccDynamic)) );
            		}
HXLINE( 282)		_resource =  ::phoenix::BitmapFont_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("system",ef,96,e2,f2),hx::ObjectPtr<OBJ_>(this))
            			->setFixed(1,HX_("id",db,5b,00,00),_id)
            			->setFixed(2,HX_("texture_path",c9,3e,d5,62),_texture_path)));
HXLINE( 288)		this->add(_resource);
HXLINE( 290)		return _resource->reload();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Resources_obj,load_font,return )

 ::snow::api::Promise Resources_obj::load_shader(::String _id, ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_294_load_shader)
HXLINE( 296)		if (hx::IsNull( _id )) {
HXLINE( 296)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE( 298)		 ::phoenix::Shader _resource = ( ( ::phoenix::Shader)(::haxe::IMap_obj::get(this->cache,_id)) );
HXLINE( 300)		if (hx::IsNotNull( _resource )) {
HXLINE( 302)			{
HXLINE( 302)				 ::phoenix::Shader _g = _resource;
HXDLIN( 302)				int _g1 = _g->ref;
HXDLIN( 302)				_g->set_ref((_g1 + (int)1));
            			}
HXLINE( 303)			return ::snow::api::Promise_obj::resolve(_resource);
            		}
HXLINE( 308)		_resource =  ::phoenix::Shader_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("system",ef,96,e2,f2),hx::ObjectPtr<OBJ_>(this))
            			->setFixed(1,HX_("id",db,5b,00,00),_id)
            			->setFixed(2,HX_("frag_id",08,24,78,44), ::Dynamic(_options->__Field(HX_("frag_id",08,24,78,44),hx::paccDynamic)))
            			->setFixed(3,HX_("vert_id",e9,81,93,7d), ::Dynamic(_options->__Field(HX_("vert_id",e9,81,93,7d),hx::paccDynamic)))));
HXLINE( 315)		this->add(_resource);
HXLINE( 317)		return _resource->reload();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Resources_obj,load_shader,return )

 ::snow::api::Promise Resources_obj::load_audio(::String _id, ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_322_load_audio)
HXLINE( 324)		if (hx::IsNull( _id )) {
HXLINE( 324)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE( 326)		 ::luxe::resource::AudioResource _resource = ( ( ::luxe::resource::AudioResource)(::haxe::IMap_obj::get(this->cache,_id)) );
HXLINE( 328)		if (hx::IsNotNull( _resource )) {
HXLINE( 330)			{
HXLINE( 330)				 ::luxe::resource::AudioResource _g = _resource;
HXDLIN( 330)				int _g1 = _g->ref;
HXDLIN( 330)				_g->set_ref((_g1 + (int)1));
            			}
HXLINE( 331)			return ::snow::api::Promise_obj::resolve(_resource);
            		}
HXLINE( 336)		bool _is_stream = false;
HXLINE( 337)		if (hx::IsNotNull( _options )) {
HXLINE( 338)			_is_stream = ( (bool)(_options->__Field(HX_("is_stream",75,7b,51,b6),hx::paccDynamic)) );
            		}
HXLINE( 341)		_resource =  ::luxe::resource::AudioResource_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("is_stream",75,7b,51,b6),_is_stream)
            			->setFixed(1,HX_("system",ef,96,e2,f2),hx::ObjectPtr<OBJ_>(this))
            			->setFixed(2,HX_("id",db,5b,00,00),_id)
            			->setFixed(3,HX_("asset",f0,69,39,26),null())));
HXLINE( 348)		this->add(_resource);
HXLINE( 350)		return _resource->reload();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Resources_obj,load_audio,return )

bool Resources_obj::has(::String _id){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_356_has)
HXDLIN( 356)		return this->cache->exists(_id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,has,return )

 ::luxe::resource::Resource Resources_obj::get(::String _id){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_357_get)
HXDLIN( 357)		return ( ( ::luxe::resource::Resource)(::haxe::IMap_obj::get(this->cache,_id)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,get,return )

 ::luxe::resource::BytesResource Resources_obj::bytes(::String _id){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_358_bytes)
HXDLIN( 358)		return ( ( ::luxe::resource::BytesResource)(::haxe::IMap_obj::get(this->cache,_id)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,bytes,return )

 ::luxe::resource::TextResource Resources_obj::text(::String _id){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_359_text)
HXDLIN( 359)		return ( ( ::luxe::resource::TextResource)(::haxe::IMap_obj::get(this->cache,_id)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,text,return )

 ::luxe::resource::JSONResource Resources_obj::json(::String _id){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_360_json)
HXDLIN( 360)		return ( ( ::luxe::resource::JSONResource)(::haxe::IMap_obj::get(this->cache,_id)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,json,return )

 ::phoenix::Texture Resources_obj::texture(::String _id){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_361_texture)
HXDLIN( 361)		return ( ( ::phoenix::Texture)(::haxe::IMap_obj::get(this->cache,_id)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,texture,return )

 ::phoenix::BitmapFont Resources_obj::font(::String _id){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_362_font)
HXDLIN( 362)		return ( ( ::phoenix::BitmapFont)(::haxe::IMap_obj::get(this->cache,_id)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,font,return )

 ::phoenix::Shader Resources_obj::shader(::String _id){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_363_shader)
HXDLIN( 363)		return ( ( ::phoenix::Shader)(::haxe::IMap_obj::get(this->cache,_id)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,shader,return )

 ::luxe::resource::AudioResource Resources_obj::audio(::String _id){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_364_audio)
HXDLIN( 364)		return ( ( ::luxe::resource::AudioResource)(::haxe::IMap_obj::get(this->cache,_id)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,audio,return )

 ::Dynamic Resources_obj::fetch(::String _id){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_369_fetch)
HXDLIN( 369)		return this->cache->get(_id).StaticCast<  ::luxe::resource::Resource >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resources_obj,fetch,return )

void Resources_obj::update_stats( ::luxe::resource::Resource _res,int _offset){
            	HX_STACKFRAME(&_hx_pos_a1ac9944ee6d8608_372_update_stats)
HXLINE( 374)		{
HXLINE( 374)			int _g = _res->resource_type;
HXDLIN( 374)			switch((int)(_g)){
            				case (int)0: {
HXLINE( 375)					 ::luxe::ResourceStats _hx_tmp = this->stats;
HXDLIN( 375)					_hx_tmp->unknown = (_hx_tmp->unknown + _offset);
            				}
            				break;
            				case (int)1: {
HXLINE( 377)					 ::luxe::ResourceStats _hx_tmp1 = this->stats;
HXDLIN( 377)					_hx_tmp1->texts = (_hx_tmp1->texts + _offset);
            				}
            				break;
            				case (int)2: {
HXLINE( 378)					 ::luxe::ResourceStats _hx_tmp2 = this->stats;
HXDLIN( 378)					_hx_tmp2->jsons = (_hx_tmp2->jsons + _offset);
            				}
            				break;
            				case (int)3: {
HXLINE( 376)					 ::luxe::ResourceStats _hx_tmp3 = this->stats;
HXDLIN( 376)					_hx_tmp3->bytes = (_hx_tmp3->bytes + _offset);
            				}
            				break;
            				case (int)4: {
HXLINE( 379)					 ::luxe::ResourceStats _hx_tmp4 = this->stats;
HXDLIN( 379)					_hx_tmp4->textures = (_hx_tmp4->textures + _offset);
            				}
            				break;
            				case (int)5: {
HXLINE( 380)					 ::luxe::ResourceStats _hx_tmp5 = this->stats;
HXDLIN( 380)					_hx_tmp5->rtt = (_hx_tmp5->rtt + _offset);
            				}
            				break;
            				case (int)6: {
HXLINE( 381)					 ::luxe::ResourceStats _hx_tmp6 = this->stats;
HXDLIN( 381)					_hx_tmp6->fonts = (_hx_tmp6->fonts + _offset);
            				}
            				break;
            				case (int)7: {
HXLINE( 382)					 ::luxe::ResourceStats _hx_tmp7 = this->stats;
HXDLIN( 382)					_hx_tmp7->shaders = (_hx_tmp7->shaders + _offset);
            				}
            				break;
            				case (int)8: {
HXLINE( 383)					 ::luxe::ResourceStats _hx_tmp8 = this->stats;
HXDLIN( 383)					_hx_tmp8->audios = (_hx_tmp8->audios + _offset);
            				}
            				break;
            			}
            		}
HXLINE( 386)		 ::luxe::ResourceStats _hx_tmp9 = this->stats;
HXDLIN( 386)		_hx_tmp9->total = (_hx_tmp9->total + _offset);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Resources_obj,update_stats,(void))


hx::ObjectPtr< Resources_obj > Resources_obj::__new() {
	hx::ObjectPtr< Resources_obj > __this = new Resources_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Resources_obj > Resources_obj::__alloc(hx::Ctx *_hx_ctx) {
	Resources_obj *__this = (Resources_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Resources_obj), true, "luxe.Resources"));
	*(void **)__this = Resources_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Resources_obj::Resources_obj()
{
}

void Resources_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Resources);
	HX_MARK_MEMBER_NAME(parcels,"parcels");
	HX_MARK_MEMBER_NAME(cache,"cache");
	HX_MARK_MEMBER_NAME(stats,"stats");
	HX_MARK_MEMBER_NAME(emitter,"emitter");
	HX_MARK_END_CLASS();
}

void Resources_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parcels,"parcels");
	HX_VISIT_MEMBER_NAME(cache,"cache");
	HX_VISIT_MEMBER_NAME(stats,"stats");
	HX_VISIT_MEMBER_NAME(emitter,"emitter");
}

hx::Val Resources_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"on") ) { return hx::Val( on_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"off") ) { return hx::Val( off_dyn() ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"emit") ) { return hx::Val( emit_dyn() ); }
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text_dyn() ); }
		if (HX_FIELD_EQ(inName,"json") ) { return hx::Val( json_dyn() ); }
		if (HX_FIELD_EQ(inName,"font") ) { return hx::Val( font_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { return hx::Val( cache ); }
		if (HX_FIELD_EQ(inName,"stats") ) { return hx::Val( stats ); }
		if (HX_FIELD_EQ(inName,"track") ) { return hx::Val( track_dyn() ); }
		if (HX_FIELD_EQ(inName,"bytes") ) { return hx::Val( bytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"audio") ) { return hx::Val( audio_dyn() ); }
		if (HX_FIELD_EQ(inName,"fetch") ) { return hx::Val( fetch_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"parcels") ) { return hx::Val( parcels ); }
		if (HX_FIELD_EQ(inName,"emitter") ) { return hx::Val( emitter ); }
		if (HX_FIELD_EQ(inName,"untrack") ) { return hx::Val( untrack_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"load_text") ) { return hx::Val( load_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"load_json") ) { return hx::Val( load_json_dyn() ); }
		if (HX_FIELD_EQ(inName,"load_font") ) { return hx::Val( load_font_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"invalidate") ) { return hx::Val( invalidate_dyn() ); }
		if (HX_FIELD_EQ(inName,"load_bytes") ) { return hx::Val( load_bytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"load_audio") ) { return hx::Val( load_audio_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"load_shader") ) { return hx::Val( load_shader_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"load_texture") ) { return hx::Val( load_texture_dyn() ); }
		if (HX_FIELD_EQ(inName,"update_stats") ) { return hx::Val( update_stats_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Resources_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stats") ) { stats=inValue.Cast<  ::luxe::ResourceStats >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"parcels") ) { parcels=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"emitter") ) { emitter=inValue.Cast<  ::luxe::Emitter >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Resources_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("parcels","\x8a","\x37","\x6d","\xdf"));
	outFields->push(HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"));
	outFields->push(HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84"));
	outFields->push(HX_HCSTRING("emitter","\x6e","\x35","\xf6","\xbe"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Resources_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Resources_obj,parcels),HX_HCSTRING("parcels","\x8a","\x37","\x6d","\xdf")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Resources_obj,cache),HX_HCSTRING("cache","\x42","\x9a","\x14","\x41")},
	{hx::fsObject /*::luxe::ResourceStats*/ ,(int)offsetof(Resources_obj,stats),HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84")},
	{hx::fsObject /*::luxe::Emitter*/ ,(int)offsetof(Resources_obj,emitter),HX_HCSTRING("emitter","\x6e","\x35","\xf6","\xbe")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Resources_obj_sStaticStorageInfo = 0;
#endif

static ::String Resources_obj_sMemberFields[] = {
	HX_HCSTRING("parcels","\x8a","\x37","\x6d","\xdf"),
	HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"),
	HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84"),
	HX_HCSTRING("emitter","\x6e","\x35","\xf6","\xbe"),
	HX_HCSTRING("track","\x8b","\x8e","\x1f","\x16"),
	HX_HCSTRING("untrack","\x92","\x85","\xb0","\x12"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("invalidate","\x7b","\x19","\x2a","\x87"),
	HX_HCSTRING("on","\x1f","\x61","\x00","\x00"),
	HX_HCSTRING("off","\x6f","\x93","\x54","\x00"),
	HX_HCSTRING("emit","\x53","\x9e","\x15","\x43"),
	HX_HCSTRING("load_bytes","\x52","\x0a","\x16","\x3a"),
	HX_HCSTRING("load_text","\xa6","\xc4","\x14","\x88"),
	HX_HCSTRING("load_json","\x21","\x3a","\x83","\x81"),
	HX_HCSTRING("load_texture","\x82","\x52","\x50","\xb8"),
	HX_HCSTRING("load_font","\xc8","\x55","\xdb","\x7e"),
	HX_HCSTRING("load_shader","\x5e","\x67","\xe4","\x8e"),
	HX_HCSTRING("load_audio","\xbd","\x7a","\xfe","\xa3"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("json","\x28","\x42","\x68","\x46"),
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"),
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("audio","\xd6","\x78","\x80","\x27"),
	HX_HCSTRING("fetch","\x3a","\x14","\xfa","\xfd"),
	HX_HCSTRING("update_stats","\x29","\xf0","\x21","\x4b"),
	::String(null()) };

static void Resources_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Resources_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Resources_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Resources_obj::__mClass,"__mClass");
};

#endif

hx::Class Resources_obj::__mClass;

void Resources_obj::__register()
{
	hx::Object *dummy = new Resources_obj;
	Resources_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Resources","\x0d","\x7d","\x79","\x14");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Resources_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Resources_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Resources_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Resources_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Resources_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Resources_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
