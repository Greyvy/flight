// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_0a05af74edef3e68
#define INCLUDED_0a05af74edef3e68
#include "linc_timestamp.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_GenericActuator
#include <luxe/tween/actuators/GenericActuator.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_IGenericActuator
#include <luxe/tween/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_PropertyDetails
#include <luxe/tween/actuators/PropertyDetails.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_SimpleActuator
#include <luxe/tween/actuators/SimpleActuator.h>
#endif
#ifndef INCLUDED_luxe_tween_easing_IEasing
#include <luxe/tween/easing/IEasing.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_Runtime
#include <snow/modules/sdl/Runtime.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6dbe427ac08eca98_18_new,"luxe.tween.actuators.SimpleActuator","new",0x5028008c,"luxe.tween.actuators.SimpleActuator.new","luxe/tween/actuators/SimpleActuator.hx",18,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_71_autoVisible,"luxe.tween.actuators.SimpleActuator","autoVisible",0x520a58ef,"luxe.tween.actuators.SimpleActuator.autoVisible","luxe/tween/actuators/SimpleActuator.hx",71,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_101_delay,"luxe.tween.actuators.SimpleActuator","delay",0xe8886aaf,"luxe.tween.actuators.SimpleActuator.delay","luxe/tween/actuators/SimpleActuator.hx",101,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_111_getField,"luxe.tween.actuators.SimpleActuator","getField",0xe91c5498,"luxe.tween.actuators.SimpleActuator.getField","luxe/tween/actuators/SimpleActuator.hx",111,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_131_initialize,"luxe.tween.actuators.SimpleActuator","initialize",0x49789ea4,"luxe.tween.actuators.SimpleActuator.initialize","luxe/tween/actuators/SimpleActuator.hx",131,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_169_move,"luxe.tween.actuators.SimpleActuator","move",0xd236d965,"luxe.tween.actuators.SimpleActuator.move","luxe/tween/actuators/SimpleActuator.hx",169,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_191_onUpdate,"luxe.tween.actuators.SimpleActuator","onUpdate",0xef642cdc,"luxe.tween.actuators.SimpleActuator.onUpdate","luxe/tween/actuators/SimpleActuator.hx",191,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_212_pause,"luxe.tween.actuators.SimpleActuator","pause",0xceb96a22,"luxe.tween.actuators.SimpleActuator.pause","luxe/tween/actuators/SimpleActuator.hx",212,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_223_resume,"luxe.tween.actuators.SimpleActuator","resume",0x2c839d01,"luxe.tween.actuators.SimpleActuator.resume","luxe/tween/actuators/SimpleActuator.hx",223,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_237_setField,"luxe.tween.actuators.SimpleActuator","setField",0x9779ae0c,"luxe.tween.actuators.SimpleActuator.setField","luxe/tween/actuators/SimpleActuator.hx",237,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_252_setProperty,"luxe.tween.actuators.SimpleActuator","setProperty",0xa59b4e43,"luxe.tween.actuators.SimpleActuator.setProperty","luxe/tween/actuators/SimpleActuator.hx",252,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_267_stop,"luxe.tween.actuators.SimpleActuator","stop",0xd631e656,"luxe.tween.actuators.SimpleActuator.stop","luxe/tween/actuators/SimpleActuator.hx",267,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_310_update,"luxe.tween.actuators.SimpleActuator","update",0xab04b95d,"luxe.tween.actuators.SimpleActuator.update","luxe/tween/actuators/SimpleActuator.hx",310,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_454_on_internal_update,"luxe.tween.actuators.SimpleActuator","on_internal_update",0x605734ff,"luxe.tween.actuators.SimpleActuator.on_internal_update","luxe/tween/actuators/SimpleActuator.hx",454,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_23_boot,"luxe.tween.actuators.SimpleActuator","boot",0xcaf17a86,"luxe.tween.actuators.SimpleActuator.boot","luxe/tween/actuators/SimpleActuator.hx",23,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_24_boot,"luxe.tween.actuators.SimpleActuator","boot",0xcaf17a86,"luxe.tween.actuators.SimpleActuator.boot","luxe/tween/actuators/SimpleActuator.hx",24,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_25_boot,"luxe.tween.actuators.SimpleActuator","boot",0xcaf17a86,"luxe.tween.actuators.SimpleActuator.boot","luxe/tween/actuators/SimpleActuator.hx",25,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_452_boot,"luxe.tween.actuators.SimpleActuator","boot",0xcaf17a86,"luxe.tween.actuators.SimpleActuator.boot","luxe/tween/actuators/SimpleActuator.hx",452,0x1966fbc1)
HX_LOCAL_STACK_FRAME(_hx_pos_6dbe427ac08eca98_453_boot,"luxe.tween.actuators.SimpleActuator","boot",0xcaf17a86,"luxe.tween.actuators.SimpleActuator.boot","luxe/tween/actuators/SimpleActuator.hx",453,0x1966fbc1)
namespace luxe{
namespace tween{
namespace actuators{

void SimpleActuator_obj::__construct( ::Dynamic target,Float duration, ::Dynamic properties){
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_18_new)
HXLINE(  41)		this->has_timescaled_starttime = false;
HXLINE(  45)		this->active = true;
HXLINE(  46)		this->propertyDetails = ::Array_obj< ::Dynamic>::__new();
HXLINE(  47)		this->sendChange = false;
HXLINE(  48)		this->paused = false;
HXLINE(  49)		this->cacheVisible = false;
HXLINE(  50)		this->initialized = false;
HXLINE(  51)		this->setVisible = false;
HXLINE(  52)		this->toggleVisible = false;
HXLINE(  54)		 ::snow::Snow _this = ::Luxe_obj::core->app;
HXDLIN(  54)		Float _hx_tmp = linc::timestamp::now();
HXDLIN(  54)		this->startTime = (_hx_tmp - ::snow::modules::sdl::Runtime_obj::timestamp_start);
HXLINE(  56)		super::__construct(target,duration,properties);
HXLINE(  58)		if (!(::luxe::tween::actuators::SimpleActuator_obj::addedEvent)) {
HXLINE(  60)			::luxe::tween::actuators::SimpleActuator_obj::addedEvent = true;
HXLINE(  61)			::Luxe_obj::on((int)4,::luxe::tween::actuators::SimpleActuator_obj::on_internal_update_dyn());
            		}
            	}

Dynamic SimpleActuator_obj::__CreateEmpty() { return new SimpleActuator_obj; }

void *SimpleActuator_obj::_hx_vtable = 0;

Dynamic SimpleActuator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SimpleActuator_obj > _hx_result = new SimpleActuator_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool SimpleActuator_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x23aec07f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x23aec07f;
	} else {
		return inClassId==(int)0x3c2b7630;
	}
}

::Dynamic SimpleActuator_obj::autoVisible( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_71_autoVisible)
HXLINE(  73)		if (hx::IsNull( value )) {
HXLINE(  75)			value = true;
            		}
HXLINE(  79)		this->_autoVisible = value;
HXLINE(  81)		if (!(value)) {
HXLINE(  83)			this->toggleVisible = false;
HXLINE(  85)			if (this->setVisible) {
HXLINE(  87)				 ::Dynamic target = this->target;
HXDLIN(  87)				 ::Dynamic value1 = this->cacheVisible;
HXDLIN(  87)				if (::Reflect_obj::hasField(target,HX_("visible",72,78,24,a3))) {
HXLINE(  87)					::Reflect_obj::setField(target,HX_("visible",72,78,24,a3),value1);
            				}
            				else {
HXLINE(  87)					::Reflect_obj::setProperty(target,HX_("visible",72,78,24,a3),value1);
            				}
            			}
            		}
HXLINE(  93)		return hx::ObjectPtr<OBJ_>(this);
            	}


::Dynamic SimpleActuator_obj::delay(Float duration){
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_101_delay)
HXLINE( 103)		this->_delay = duration;
HXLINE( 104)		this->timeOffset = (this->startTime + duration);
HXLINE( 106)		return hx::ObjectPtr<OBJ_>(this);
            	}


 ::Dynamic SimpleActuator_obj::getField( ::Dynamic target,::String propertyName){
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_111_getField)
HXLINE( 114)		 ::Dynamic value = null();
HXLINE( 116)		if (::Reflect_obj::hasField(target,propertyName)) {
HXLINE( 118)			value = ::Reflect_obj::field(target,propertyName);
            		}
            		else {
HXLINE( 122)			value = ::Reflect_obj::getProperty(target,propertyName);
            		}
HXLINE( 126)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SimpleActuator_obj,getField,return )

void SimpleActuator_obj::initialize(){
            	HX_GC_STACKFRAME(&_hx_pos_6dbe427ac08eca98_131_initialize)
HXLINE( 133)		 ::luxe::tween::actuators::PropertyDetails details;
HXLINE( 134)		Float start;
HXLINE( 136)		{
HXLINE( 136)			int _g = (int)0;
HXDLIN( 136)			::Array< ::String > _g1 = ::Reflect_obj::fields(this->properties);
HXDLIN( 136)			while((_g < _g1->length)){
HXLINE( 136)				::String i = _g1->__get(_g);
HXDLIN( 136)				_g = (_g + (int)1);
HXLINE( 138)				bool isField = true;
HXLINE( 140)				if (::Reflect_obj::hasField(this->target,i)) {
HXLINE( 144)					start = ( (Float)(::Reflect_obj::field(this->target,i)) );
            				}
            				else {
HXLINE( 148)					isField = false;
HXLINE( 149)					start = ( (Float)(::Reflect_obj::getProperty(this->target,i)) );
            				}
HXLINE( 154)				if (::Std_obj::is(start,hx::ClassOf< ::Float >())) {
HXLINE( 156)					 ::Dynamic details1 = this->target;
HXDLIN( 156)					 ::Dynamic target = this->properties;
HXDLIN( 156)					 ::Dynamic value = null();
HXDLIN( 156)					if (::Reflect_obj::hasField(target,i)) {
HXLINE( 156)						value = ::Reflect_obj::field(target,i);
            					}
            					else {
HXLINE( 156)						value = ::Reflect_obj::getProperty(target,i);
            					}
HXDLIN( 156)					details =  ::luxe::tween::actuators::PropertyDetails_obj::__alloc( HX_CTX ,details1,i,start,(value - start),isField);
HXLINE( 157)					this->propertyDetails->push(details);
            				}
            			}
            		}
HXLINE( 163)		this->detailsLength = this->propertyDetails->length;
HXLINE( 164)		this->initialized = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SimpleActuator_obj,initialize,(void))

void SimpleActuator_obj::move(){
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_169_move)
HXLINE( 171)		bool _hx_tmp;
HXDLIN( 171)		if (::Reflect_obj::hasField(this->properties,HX_("alpha",5e,a7,96,21))) {
HXLINE( 171)			_hx_tmp = ::Reflect_obj::hasField(this->properties,HX_("visible",72,78,24,a3));
            		}
            		else {
HXLINE( 171)			_hx_tmp = false;
            		}
HXDLIN( 171)		this->toggleVisible = _hx_tmp;
HXLINE( 173)		bool _hx_tmp1;
HXDLIN( 173)		bool _hx_tmp2;
HXDLIN( 173)		if (this->toggleVisible) {
HXLINE( 173)			_hx_tmp2 = hx::IsNotEq(  ::Dynamic(this->properties->__Field(HX_("alpha",5e,a7,96,21),hx::paccDynamic)),(int)0 );
            		}
            		else {
HXLINE( 173)			_hx_tmp2 = false;
            		}
HXDLIN( 173)		if (_hx_tmp2) {
HXLINE( 173)			 ::Dynamic target = this->target;
HXDLIN( 173)			 ::Dynamic value = null();
HXDLIN( 173)			if (::Reflect_obj::hasField(target,HX_("visible",72,78,24,a3))) {
HXLINE( 173)				value = ::Reflect_obj::field(target,HX_("visible",72,78,24,a3));
            			}
            			else {
HXLINE( 173)				value = ::Reflect_obj::getProperty(target,HX_("visible",72,78,24,a3));
            			}
HXDLIN( 173)			_hx_tmp1 = !(( (bool)(value) ));
            		}
            		else {
HXLINE( 173)			_hx_tmp1 = false;
            		}
HXDLIN( 173)		if (_hx_tmp1) {
HXLINE( 175)			this->setVisible = true;
HXLINE( 176)			 ::Dynamic target1 = this->target;
HXDLIN( 176)			 ::Dynamic value1 = null();
HXDLIN( 176)			if (::Reflect_obj::hasField(target1,HX_("visible",72,78,24,a3))) {
HXLINE( 176)				value1 = ::Reflect_obj::field(target1,HX_("visible",72,78,24,a3));
            			}
            			else {
HXLINE( 176)				value1 = ::Reflect_obj::getProperty(target1,HX_("visible",72,78,24,a3));
            			}
HXDLIN( 176)			this->cacheVisible = ( (bool)(value1) );
HXLINE( 177)			{
HXLINE( 177)				 ::Dynamic target2 = this->target;
HXDLIN( 177)				if (::Reflect_obj::hasField(target2,HX_("visible",72,78,24,a3))) {
HXLINE( 177)					::Reflect_obj::setField(target2,HX_("visible",72,78,24,a3),true);
            				}
            				else {
HXLINE( 177)					::Reflect_obj::setProperty(target2,HX_("visible",72,78,24,a3),true);
            				}
            			}
            		}
HXLINE( 181)		this->timeOffset = this->startTime;
HXLINE( 182)		::luxe::tween::actuators::SimpleActuator_obj::actuators->push(hx::ObjectPtr<OBJ_>(this));
HXLINE( 183)		++::luxe::tween::actuators::SimpleActuator_obj::actuatorsLength;
            	}


::Dynamic SimpleActuator_obj::onUpdate( ::Dynamic handler,::cpp::VirtualArray parameters){
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_191_onUpdate)
HXLINE( 193)		this->_onUpdate = handler;
HXLINE( 195)		if (hx::IsNull( parameters )) {
HXLINE( 197)			this->_onUpdateParams = ::cpp::VirtualArray_obj::__new(0);
            		}
            		else {
HXLINE( 201)			this->_onUpdateParams = parameters;
            		}
HXLINE( 205)		this->sendChange = true;
HXLINE( 207)		return hx::ObjectPtr<OBJ_>(this);
            	}


void SimpleActuator_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_212_pause)
HXLINE( 214)		this->paused = true;
HXLINE( 216)		Float _hx_tmp;
HXDLIN( 216)		if (this->timescaled) {
HXLINE( 216)			_hx_tmp = ::luxe::tween::actuators::SimpleActuator_obj::update_timer;
            		}
            		else {
HXLINE( 216)			_hx_tmp = ::luxe::tween::actuators::SimpleActuator_obj::current_time;
            		}
HXDLIN( 216)		this->pauseTime = _hx_tmp;
            	}


void SimpleActuator_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_223_resume)
HXDLIN( 223)		if (this->paused) {
HXLINE( 225)			this->paused = false;
HXLINE( 227)			 ::luxe::tween::actuators::SimpleActuator _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 227)			Float _hx_tmp1;
HXDLIN( 227)			if (this->timescaled) {
HXLINE( 227)				_hx_tmp1 = ::luxe::tween::actuators::SimpleActuator_obj::update_timer;
            			}
            			else {
HXLINE( 227)				_hx_tmp1 = ::luxe::tween::actuators::SimpleActuator_obj::current_time;
            			}
HXDLIN( 227)			_hx_tmp->timeOffset = (_hx_tmp->timeOffset + (_hx_tmp1 - this->pauseTime));
            		}
            	}


void SimpleActuator_obj::setField( ::Dynamic target,::String propertyName, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_237_setField)
HXDLIN( 237)		if (::Reflect_obj::hasField(target,propertyName)) {
HXLINE( 239)			::Reflect_obj::setField(target,propertyName,value);
            		}
            		else {
HXLINE( 243)			::Reflect_obj::setProperty(target,propertyName,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(SimpleActuator_obj,setField,(void))

void SimpleActuator_obj::setProperty( ::luxe::tween::actuators::PropertyDetails details, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_252_setProperty)
HXDLIN( 252)		if (details->isField) {
HXLINE( 254)			::Reflect_obj::setProperty(details->target,details->propertyName,value);
            		}
            		else {
HXLINE( 258)			::Reflect_obj::setProperty(details->target,details->propertyName,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(SimpleActuator_obj,setProperty,(void))

void SimpleActuator_obj::stop( ::Dynamic properties,bool complete,bool sendEvent){
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_267_stop)
HXDLIN( 267)		if (this->active) {
HXLINE( 269)			if (hx::IsNull( properties )) {
HXLINE( 271)				this->active = false;
HXLINE( 273)				if (complete) {
HXLINE( 275)					this->apply();
            				}
HXLINE( 279)				this->complete(sendEvent);
HXLINE( 280)				return;
            			}
HXLINE( 284)			{
HXLINE( 284)				int _g = (int)0;
HXDLIN( 284)				::Array< ::String > _g1 = ::Reflect_obj::fields(properties);
HXDLIN( 284)				while((_g < _g1->length)){
HXLINE( 284)					::String i = _g1->__get(_g);
HXDLIN( 284)					_g = (_g + (int)1);
HXLINE( 286)					if (::Reflect_obj::hasField(this->properties,i)) {
HXLINE( 288)						this->active = false;
HXLINE( 290)						if (complete) {
HXLINE( 292)							this->apply();
            						}
HXLINE( 296)						this->complete(sendEvent);
HXLINE( 297)						return;
            					}
            				}
            			}
            		}
            	}


void SimpleActuator_obj::update(Float currentTime){
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_310_update)
HXDLIN( 310)		if (!(this->paused)) {
HXLINE( 312)			 ::luxe::tween::actuators::PropertyDetails details;
HXLINE( 313)			Float easing;
HXLINE( 314)			int i;
HXLINE( 316)			Float tweenPosition = ((Float)(currentTime - this->timeOffset) / (Float)this->duration);
HXLINE( 318)			if ((tweenPosition > (int)1)) {
HXLINE( 320)				tweenPosition = (int)1;
            			}
HXLINE( 324)			if (!(this->initialized)) {
HXLINE( 326)				this->initialize();
            			}
HXLINE( 330)			if (!(this->special)) {
HXLINE( 332)				easing = ::luxe::tween::easing::IEasing_obj::calculate(this->_ease,tweenPosition);
HXLINE( 334)				{
HXLINE( 334)					int _g1 = (int)0;
HXDLIN( 334)					int _g = this->detailsLength;
HXDLIN( 334)					while((_g1 < _g)){
HXLINE( 334)						_g1 = (_g1 + (int)1);
HXDLIN( 334)						int i1 = (_g1 - (int)1);
HXLINE( 336)						details = this->propertyDetails->__get(i1).StaticCast<  ::luxe::tween::actuators::PropertyDetails >();
HXLINE( 337)						{
HXLINE( 337)							Float details1 = details->start;
HXDLIN( 337)							 ::Dynamic value = (details1 + (details->change * easing));
HXDLIN( 337)							if (details->isField) {
HXLINE( 337)								::Reflect_obj::setProperty(details->target,details->propertyName,value);
            							}
            							else {
HXLINE( 337)								::Reflect_obj::setProperty(details->target,details->propertyName,value);
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE( 343)				if (!(this->_reverse)) {
HXLINE( 345)					easing = ::luxe::tween::easing::IEasing_obj::calculate(this->_ease,tweenPosition);
            				}
            				else {
HXLINE( 349)					::Dynamic easing1 = this->_ease;
HXDLIN( 349)					easing = ::luxe::tween::easing::IEasing_obj::calculate(easing1,((int)1 - tweenPosition));
            				}
HXLINE( 353)				Float endValue;
HXLINE( 355)				{
HXLINE( 355)					int _g11 = (int)0;
HXDLIN( 355)					int _g2 = this->detailsLength;
HXDLIN( 355)					while((_g11 < _g2)){
HXLINE( 355)						_g11 = (_g11 + (int)1);
HXDLIN( 355)						int i2 = (_g11 - (int)1);
HXLINE( 357)						details = this->propertyDetails->__get(i2).StaticCast<  ::luxe::tween::actuators::PropertyDetails >();
HXLINE( 359)						bool _hx_tmp;
HXDLIN( 359)						if (this->_smartRotation) {
HXLINE( 359)							bool _hx_tmp1;
HXDLIN( 359)							bool _hx_tmp2;
HXDLIN( 359)							if ((details->propertyName != HX_("rotation",3e,3d,86,08))) {
HXLINE( 359)								_hx_tmp2 = (details->propertyName == HX_("rotationX",5a,59,ef,6c));
            							}
            							else {
HXLINE( 359)								_hx_tmp2 = true;
            							}
HXDLIN( 359)							if (!(_hx_tmp2)) {
HXLINE( 359)								_hx_tmp1 = (details->propertyName == HX_("rotationY",5b,59,ef,6c));
            							}
            							else {
HXLINE( 359)								_hx_tmp1 = true;
            							}
HXDLIN( 359)							if (!(_hx_tmp1)) {
HXLINE( 359)								_hx_tmp = (details->propertyName == HX_("rotationZ",5c,59,ef,6c));
            							}
            							else {
HXLINE( 359)								_hx_tmp = true;
            							}
            						}
            						else {
HXLINE( 359)							_hx_tmp = false;
            						}
HXDLIN( 359)						if (_hx_tmp) {
HXLINE( 361)							Float rotation = hx::Mod(details->change,(int)360);
HXLINE( 363)							if ((rotation > (int)180)) {
HXLINE( 365)								rotation = (rotation - (int)360);
            							}
            							else {
HXLINE( 367)								if ((rotation < (int)-180)) {
HXLINE( 369)									rotation = (rotation + (int)360);
            								}
            							}
HXLINE( 373)							Float details2 = details->start;
HXDLIN( 373)							endValue = (details2 + (rotation * easing));
            						}
            						else {
HXLINE( 377)							Float details3 = details->start;
HXDLIN( 377)							endValue = (details3 + (details->change * easing));
            						}
HXLINE( 381)						if (!(this->_snapping)) {
HXLINE( 383)							if (details->isField) {
HXLINE( 383)								::Reflect_obj::setProperty(details->target,details->propertyName,endValue);
            							}
            							else {
HXLINE( 383)								::Reflect_obj::setProperty(details->target,details->propertyName,endValue);
            							}
            						}
            						else {
HXLINE( 387)							 ::Dynamic value1 = ::Math_obj::round(endValue);
HXDLIN( 387)							if (details->isField) {
HXLINE( 387)								::Reflect_obj::setProperty(details->target,details->propertyName,value1);
            							}
            							else {
HXLINE( 387)								::Reflect_obj::setProperty(details->target,details->propertyName,value1);
            							}
            						}
            					}
            				}
            			}
HXLINE( 395)			if ((tweenPosition == (int)1)) {
HXLINE( 397)				if ((this->_repeat == (int)0)) {
HXLINE( 399)					this->active = false;
HXLINE( 401)					bool _hx_tmp3;
HXDLIN( 401)					if (this->toggleVisible) {
HXLINE( 401)						 ::Dynamic target = this->target;
HXDLIN( 401)						 ::Dynamic value2 = null();
HXDLIN( 401)						if (::Reflect_obj::hasField(target,HX_("alpha",5e,a7,96,21))) {
HXLINE( 401)							value2 = ::Reflect_obj::field(target,HX_("alpha",5e,a7,96,21));
            						}
            						else {
HXLINE( 401)							value2 = ::Reflect_obj::getProperty(target,HX_("alpha",5e,a7,96,21));
            						}
HXDLIN( 401)						_hx_tmp3 = hx::IsEq( value2,(int)0 );
            					}
            					else {
HXLINE( 401)						_hx_tmp3 = false;
            					}
HXDLIN( 401)					if (_hx_tmp3) {
HXLINE( 403)						 ::Dynamic target1 = this->target;
HXDLIN( 403)						if (::Reflect_obj::hasField(target1,HX_("visible",72,78,24,a3))) {
HXLINE( 403)							::Reflect_obj::setField(target1,HX_("visible",72,78,24,a3),false);
            						}
            						else {
HXLINE( 403)							::Reflect_obj::setProperty(target1,HX_("visible",72,78,24,a3),false);
            						}
            					}
HXLINE( 407)					this->complete(true);
HXLINE( 408)					return;
            				}
            				else {
HXLINE( 412)					if (hx::IsNotNull( this->_onRepeat )) {
HXLINE( 414)						 ::Dynamic method = this->_onRepeat;
HXDLIN( 414)						::cpp::VirtualArray params = this->_onRepeatParams;
HXDLIN( 414)						if (hx::IsNull( params )) {
HXLINE( 414)							params = ::cpp::VirtualArray_obj::__new(0);
            						}
HXDLIN( 414)						::Reflect_obj::callMethod(method,method,params);
            					}
HXLINE( 418)					if (this->_reflect) {
HXLINE( 420)						this->_reverse = !(this->_reverse);
            					}
HXLINE( 424)					this->startTime = currentTime;
HXLINE( 425)					this->timeOffset = (this->startTime + this->_delay);
HXLINE( 427)					if ((this->_repeat > (int)0)) {
HXLINE( 429)						this->_repeat--;
            					}
            				}
            			}
HXLINE( 437)			if (this->sendChange) {
HXLINE( 439)				this->change();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleActuator_obj,update,(void))

::Array< ::Dynamic> SimpleActuator_obj::actuators;

int SimpleActuator_obj::actuatorsLength;

bool SimpleActuator_obj::addedEvent;

 ::haxe::Timer SimpleActuator_obj::timer;

Float SimpleActuator_obj::update_timer;

Float SimpleActuator_obj::current_time;

void SimpleActuator_obj::on_internal_update( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_454_on_internal_update)
HXLINE( 456)		 ::Dynamic _hx_tmp = hx::ClassOf< ::luxe::tween::actuators::SimpleActuator >();
HXDLIN( 456)		::luxe::tween::actuators::SimpleActuator_obj::update_timer = (::luxe::tween::actuators::SimpleActuator_obj::update_timer + ::Luxe_obj::core->frame_delta);
HXLINE( 457)		 ::snow::Snow _this = ::Luxe_obj::core->app;
HXDLIN( 457)		Float _hx_tmp1 = linc::timestamp::now();
HXDLIN( 457)		::luxe::tween::actuators::SimpleActuator_obj::current_time = (_hx_tmp1 - ::snow::modules::sdl::Runtime_obj::timestamp_start);
HXLINE( 459)		Float currentTime = ::luxe::tween::actuators::SimpleActuator_obj::current_time;
HXLINE( 461)		 ::luxe::tween::actuators::SimpleActuator actuator;
HXLINE( 463)		int j = (int)0;
HXLINE( 464)		bool cleanup = false;
HXLINE( 466)		{
HXLINE( 466)			int _g1 = (int)0;
HXDLIN( 466)			int _g = ::luxe::tween::actuators::SimpleActuator_obj::actuatorsLength;
HXDLIN( 466)			while((_g1 < _g)){
HXLINE( 466)				_g1 = (_g1 + (int)1);
HXDLIN( 466)				int i = (_g1 - (int)1);
HXLINE( 468)				actuator = ::luxe::tween::actuators::SimpleActuator_obj::actuators->__get(j).StaticCast<  ::luxe::tween::actuators::SimpleActuator >();
HXLINE( 470)				bool _hx_tmp2;
HXDLIN( 470)				if (hx::IsNotNull( actuator )) {
HXLINE( 470)					_hx_tmp2 = actuator->active;
            				}
            				else {
HXLINE( 470)					_hx_tmp2 = false;
            				}
HXDLIN( 470)				if (_hx_tmp2) {
HXLINE( 472)					if (actuator->timescaled) {
HXLINE( 472)						currentTime = ::luxe::tween::actuators::SimpleActuator_obj::update_timer;
            					}
            					else {
HXLINE( 472)						currentTime = ::luxe::tween::actuators::SimpleActuator_obj::current_time;
            					}
HXLINE( 474)					bool _hx_tmp3;
HXDLIN( 474)					if (actuator->timescaled) {
HXLINE( 474)						_hx_tmp3 = !(actuator->has_timescaled_starttime);
            					}
            					else {
HXLINE( 474)						_hx_tmp3 = false;
            					}
HXDLIN( 474)					if (_hx_tmp3) {
HXLINE( 475)						actuator->has_timescaled_starttime = true;
HXLINE( 476)						actuator->startTime = ::luxe::tween::actuators::SimpleActuator_obj::update_timer;
HXLINE( 477)						actuator->timeOffset = actuator->startTime;
            					}
HXLINE( 480)					if ((currentTime > actuator->timeOffset)) {
HXLINE( 481)						actuator->update(currentTime);
            					}
HXLINE( 484)					j = (j + (int)1);
            				}
            				else {
HXLINE( 488)					::luxe::tween::actuators::SimpleActuator_obj::actuators->removeRange(j,(int)1);
HXLINE( 489)					--::luxe::tween::actuators::SimpleActuator_obj::actuatorsLength;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SimpleActuator_obj,on_internal_update,(void))


hx::ObjectPtr< SimpleActuator_obj > SimpleActuator_obj::__new( ::Dynamic target,Float duration, ::Dynamic properties) {
	hx::ObjectPtr< SimpleActuator_obj > __this = new SimpleActuator_obj();
	__this->__construct(target,duration,properties);
	return __this;
}

hx::ObjectPtr< SimpleActuator_obj > SimpleActuator_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic target,Float duration, ::Dynamic properties) {
	SimpleActuator_obj *__this = (SimpleActuator_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SimpleActuator_obj), true, "luxe.tween.actuators.SimpleActuator"));
	*(void **)__this = SimpleActuator_obj::_hx_vtable;
	__this->__construct(target,duration,properties);
	return __this;
}

SimpleActuator_obj::SimpleActuator_obj()
{
}

void SimpleActuator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SimpleActuator);
	HX_MARK_MEMBER_NAME(timeOffset,"timeOffset");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(cacheVisible,"cacheVisible");
	HX_MARK_MEMBER_NAME(detailsLength,"detailsLength");
	HX_MARK_MEMBER_NAME(initialized,"initialized");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(pauseTime,"pauseTime");
	HX_MARK_MEMBER_NAME(propertyDetails,"propertyDetails");
	HX_MARK_MEMBER_NAME(sendChange,"sendChange");
	HX_MARK_MEMBER_NAME(setVisible,"setVisible");
	HX_MARK_MEMBER_NAME(startTime,"startTime");
	HX_MARK_MEMBER_NAME(toggleVisible,"toggleVisible");
	HX_MARK_MEMBER_NAME(has_timescaled_starttime,"has_timescaled_starttime");
	 ::luxe::tween::actuators::GenericActuator_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SimpleActuator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(timeOffset,"timeOffset");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(cacheVisible,"cacheVisible");
	HX_VISIT_MEMBER_NAME(detailsLength,"detailsLength");
	HX_VISIT_MEMBER_NAME(initialized,"initialized");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(pauseTime,"pauseTime");
	HX_VISIT_MEMBER_NAME(propertyDetails,"propertyDetails");
	HX_VISIT_MEMBER_NAME(sendChange,"sendChange");
	HX_VISIT_MEMBER_NAME(setVisible,"setVisible");
	HX_VISIT_MEMBER_NAME(startTime,"startTime");
	HX_VISIT_MEMBER_NAME(toggleVisible,"toggleVisible");
	HX_VISIT_MEMBER_NAME(has_timescaled_starttime,"has_timescaled_starttime");
	 ::luxe::tween::actuators::GenericActuator_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SimpleActuator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { return hx::Val( delay_dyn() ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return hx::Val( resume_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getField") ) { return hx::Val( getField_dyn() ); }
		if (HX_FIELD_EQ(inName,"onUpdate") ) { return hx::Val( onUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"setField") ) { return hx::Val( setField_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pauseTime") ) { return hx::Val( pauseTime ); }
		if (HX_FIELD_EQ(inName,"startTime") ) { return hx::Val( startTime ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"timeOffset") ) { return hx::Val( timeOffset ); }
		if (HX_FIELD_EQ(inName,"sendChange") ) { return hx::Val( sendChange ); }
		if (HX_FIELD_EQ(inName,"setVisible") ) { return hx::Val( setVisible ); }
		if (HX_FIELD_EQ(inName,"initialize") ) { return hx::Val( initialize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { return hx::Val( initialized ); }
		if (HX_FIELD_EQ(inName,"autoVisible") ) { return hx::Val( autoVisible_dyn() ); }
		if (HX_FIELD_EQ(inName,"setProperty") ) { return hx::Val( setProperty_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cacheVisible") ) { return hx::Val( cacheVisible ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"detailsLength") ) { return hx::Val( detailsLength ); }
		if (HX_FIELD_EQ(inName,"toggleVisible") ) { return hx::Val( toggleVisible ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"propertyDetails") ) { return hx::Val( propertyDetails ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"has_timescaled_starttime") ) { return hx::Val( has_timescaled_starttime ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SimpleActuator_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { outValue = ( timer ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"actuators") ) { outValue = ( actuators ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addedEvent") ) { outValue = ( addedEvent ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"update_timer") ) { outValue = ( update_timer ); return true; }
		if (HX_FIELD_EQ(inName,"current_time") ) { outValue = ( current_time ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"actuatorsLength") ) { outValue = ( actuatorsLength ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"on_internal_update") ) { outValue = on_internal_update_dyn(); return true; }
	}
	return false;
}

hx::Val SimpleActuator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pauseTime") ) { pauseTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"timeOffset") ) { timeOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sendChange") ) { sendChange=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"setVisible") ) { setVisible=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cacheVisible") ) { cacheVisible=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"detailsLength") ) { detailsLength=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"toggleVisible") ) { toggleVisible=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"propertyDetails") ) { propertyDetails=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"has_timescaled_starttime") ) { has_timescaled_starttime=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SimpleActuator_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=ioValue.Cast<  ::haxe::Timer >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"actuators") ) { actuators=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addedEvent") ) { addedEvent=ioValue.Cast< bool >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"update_timer") ) { update_timer=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"current_time") ) { current_time=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"actuatorsLength") ) { actuatorsLength=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void SimpleActuator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("timeOffset","\x80","\xdf","\x08","\xfe"));
	outFields->push(HX_HCSTRING("active","\xc6","\x41","\x46","\x16"));
	outFields->push(HX_HCSTRING("cacheVisible","\x50","\xb2","\x89","\x51"));
	outFields->push(HX_HCSTRING("detailsLength","\x48","\xe3","\xc3","\x98"));
	outFields->push(HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"));
	outFields->push(HX_HCSTRING("paused","\xae","\x40","\x84","\xef"));
	outFields->push(HX_HCSTRING("pauseTime","\x23","\x82","\x63","\x51"));
	outFields->push(HX_HCSTRING("propertyDetails","\xed","\xa0","\x48","\x71"));
	outFields->push(HX_HCSTRING("sendChange","\xd8","\xb8","\xc8","\x58"));
	outFields->push(HX_HCSTRING("setVisible","\xf0","\x9c","\x03","\xf6"));
	outFields->push(HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05"));
	outFields->push(HX_HCSTRING("toggleVisible","\x3e","\xbb","\xe1","\x53"));
	outFields->push(HX_HCSTRING("has_timescaled_starttime","\x9c","\x8a","\x6a","\xa7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SimpleActuator_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(SimpleActuator_obj,timeOffset),HX_HCSTRING("timeOffset","\x80","\xdf","\x08","\xfe")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,active),HX_HCSTRING("active","\xc6","\x41","\x46","\x16")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,cacheVisible),HX_HCSTRING("cacheVisible","\x50","\xb2","\x89","\x51")},
	{hx::fsInt,(int)offsetof(SimpleActuator_obj,detailsLength),HX_HCSTRING("detailsLength","\x48","\xe3","\xc3","\x98")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,initialized),HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,paused),HX_HCSTRING("paused","\xae","\x40","\x84","\xef")},
	{hx::fsFloat,(int)offsetof(SimpleActuator_obj,pauseTime),HX_HCSTRING("pauseTime","\x23","\x82","\x63","\x51")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(SimpleActuator_obj,propertyDetails),HX_HCSTRING("propertyDetails","\xed","\xa0","\x48","\x71")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,sendChange),HX_HCSTRING("sendChange","\xd8","\xb8","\xc8","\x58")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,setVisible),HX_HCSTRING("setVisible","\xf0","\x9c","\x03","\xf6")},
	{hx::fsFloat,(int)offsetof(SimpleActuator_obj,startTime),HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,toggleVisible),HX_HCSTRING("toggleVisible","\x3e","\xbb","\xe1","\x53")},
	{hx::fsBool,(int)offsetof(SimpleActuator_obj,has_timescaled_starttime),HX_HCSTRING("has_timescaled_starttime","\x9c","\x8a","\x6a","\xa7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SimpleActuator_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &SimpleActuator_obj::actuators,HX_HCSTRING("actuators","\x1a","\x95","\x55","\xd2")},
	{hx::fsInt,(void *) &SimpleActuator_obj::actuatorsLength,HX_HCSTRING("actuatorsLength","\xa0","\x6d","\xfd","\xca")},
	{hx::fsBool,(void *) &SimpleActuator_obj::addedEvent,HX_HCSTRING("addedEvent","\x3a","\x2b","\xd3","\x06")},
	{hx::fsObject /*::haxe::Timer*/ ,(void *) &SimpleActuator_obj::timer,HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{hx::fsFloat,(void *) &SimpleActuator_obj::update_timer,HX_HCSTRING("update_timer","\xcf","\x39","\x4c","\xd7")},
	{hx::fsFloat,(void *) &SimpleActuator_obj::current_time,HX_HCSTRING("current_time","\x13","\x5d","\xec","\xb3")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SimpleActuator_obj_sMemberFields[] = {
	HX_HCSTRING("timeOffset","\x80","\xdf","\x08","\xfe"),
	HX_HCSTRING("active","\xc6","\x41","\x46","\x16"),
	HX_HCSTRING("cacheVisible","\x50","\xb2","\x89","\x51"),
	HX_HCSTRING("detailsLength","\x48","\xe3","\xc3","\x98"),
	HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"),
	HX_HCSTRING("paused","\xae","\x40","\x84","\xef"),
	HX_HCSTRING("pauseTime","\x23","\x82","\x63","\x51"),
	HX_HCSTRING("propertyDetails","\xed","\xa0","\x48","\x71"),
	HX_HCSTRING("sendChange","\xd8","\xb8","\xc8","\x58"),
	HX_HCSTRING("setVisible","\xf0","\x9c","\x03","\xf6"),
	HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05"),
	HX_HCSTRING("toggleVisible","\x3e","\xbb","\xe1","\x53"),
	HX_HCSTRING("has_timescaled_starttime","\x9c","\x8a","\x6a","\xa7"),
	HX_HCSTRING("autoVisible","\xc3","\x1c","\x08","\x89"),
	HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"),
	HX_HCSTRING("getField","\x44","\xa4","\x6a","\x60"),
	HX_HCSTRING("initialize","\x50","\x31","\xbb","\xec"),
	HX_HCSTRING("move","\x11","\xe3","\x60","\x48"),
	HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("setField","\xb8","\xfd","\xc7","\x0e"),
	HX_HCSTRING("setProperty","\x17","\x12","\x99","\xdc"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void SimpleActuator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SimpleActuator_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SimpleActuator_obj::actuators,"actuators");
	HX_MARK_MEMBER_NAME(SimpleActuator_obj::actuatorsLength,"actuatorsLength");
	HX_MARK_MEMBER_NAME(SimpleActuator_obj::addedEvent,"addedEvent");
	HX_MARK_MEMBER_NAME(SimpleActuator_obj::timer,"timer");
	HX_MARK_MEMBER_NAME(SimpleActuator_obj::update_timer,"update_timer");
	HX_MARK_MEMBER_NAME(SimpleActuator_obj::current_time,"current_time");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SimpleActuator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SimpleActuator_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SimpleActuator_obj::actuators,"actuators");
	HX_VISIT_MEMBER_NAME(SimpleActuator_obj::actuatorsLength,"actuatorsLength");
	HX_VISIT_MEMBER_NAME(SimpleActuator_obj::addedEvent,"addedEvent");
	HX_VISIT_MEMBER_NAME(SimpleActuator_obj::timer,"timer");
	HX_VISIT_MEMBER_NAME(SimpleActuator_obj::update_timer,"update_timer");
	HX_VISIT_MEMBER_NAME(SimpleActuator_obj::current_time,"current_time");
};

#endif

hx::Class SimpleActuator_obj::__mClass;

static ::String SimpleActuator_obj_sStaticFields[] = {
	HX_HCSTRING("actuators","\x1a","\x95","\x55","\xd2"),
	HX_HCSTRING("actuatorsLength","\xa0","\x6d","\xfd","\xca"),
	HX_HCSTRING("addedEvent","\x3a","\x2b","\xd3","\x06"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("update_timer","\xcf","\x39","\x4c","\xd7"),
	HX_HCSTRING("current_time","\x13","\x5d","\xec","\xb3"),
	HX_HCSTRING("on_internal_update","\xab","\x53","\xae","\x7d"),
	::String(null())
};

void SimpleActuator_obj::__register()
{
	hx::Object *dummy = new SimpleActuator_obj;
	SimpleActuator_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.tween.actuators.SimpleActuator","\x9a","\x0a","\xea","\xc6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SimpleActuator_obj::__GetStatic;
	__mClass->mSetStaticField = &SimpleActuator_obj::__SetStatic;
	__mClass->mMarkFunc = SimpleActuator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SimpleActuator_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SimpleActuator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SimpleActuator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SimpleActuator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SimpleActuator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SimpleActuator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SimpleActuator_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_23_boot)
HXDLIN(  23)		actuators = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_24_boot)
HXDLIN(  24)		actuatorsLength = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_25_boot)
HXDLIN(  25)		addedEvent = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_452_boot)
HXDLIN( 452)		update_timer = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dbe427ac08eca98_453_boot)
HXDLIN( 453)		current_time = ((Float)0);
            	}
}

} // end namespace luxe
} // end namespace tween
} // end namespace actuators
