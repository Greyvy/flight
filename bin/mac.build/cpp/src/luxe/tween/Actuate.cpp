// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_luxe_tween_Actuate
#include <luxe/tween/Actuate.h>
#endif
#ifndef INCLUDED_luxe_tween__Actuate_TweenTimer
#include <luxe/tween/_Actuate/TweenTimer.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_GenericActuator
#include <luxe/tween/actuators/GenericActuator.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_IGenericActuator
#include <luxe/tween/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_MethodActuator
#include <luxe/tween/actuators/MethodActuator.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_MotionPathActuator
#include <luxe/tween/actuators/MotionPathActuator.h>
#endif
#ifndef INCLUDED_luxe_tween_actuators_SimpleActuator
#include <luxe/tween/actuators/SimpleActuator.h>
#endif
#ifndef INCLUDED_luxe_tween_easing_IEasing
#include <luxe/tween/easing/IEasing.h>
#endif
#ifndef INCLUDED_luxe_tween_easing_Quad
#include <luxe/tween/easing/Quad.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_30_apply,"luxe.tween.Actuate","apply",0x8cce36b4,"luxe.tween.Actuate.apply","luxe/tween/Actuate.hx",30,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_48_getLibrary,"luxe.tween.Actuate","getLibrary",0xfcd89dff,"luxe.tween.Actuate.getLibrary","luxe/tween/Actuate.hx",48,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_71_motionPath,"luxe.tween.Actuate","motionPath",0xaa6ddbf5,"luxe.tween.Actuate.motionPath","luxe/tween/Actuate.hx",71,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_83_pause,"luxe.tween.Actuate","pause",0x25ea883c,"luxe.tween.Actuate.pause","luxe/tween/Actuate.hx",83,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_108_pauseAll,"luxe.tween.Actuate","pauseAll",0xf534f645,"luxe.tween.Actuate.pauseAll","luxe/tween/Actuate.hx",108,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_124_reset,"luxe.tween.Actuate","reset",0x4f5afb15,"luxe.tween.Actuate.reset","luxe/tween/Actuate.hx",124,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_147_resume,"luxe.tween.Actuate","resume",0x204cd5a7,"luxe.tween.Actuate.resume","luxe/tween/Actuate.hx",147,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_172_resumeAll,"luxe.tween.Actuate","resumeAll",0x503a9dba,"luxe.tween.Actuate.resumeAll","luxe/tween/Actuate.hx",172,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_194_stop,"luxe.tween.Actuate","stop",0x64ef897c,"luxe.tween.Actuate.stop","luxe/tween/Actuate.hx",194,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_250_timer,"luxe.tween.Actuate","timer",0x78c8710b,"luxe.tween.Actuate.timer","luxe/tween/Actuate.hx",250,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_266_tween,"luxe.tween.Actuate","tween",0x82035bb1,"luxe.tween.Actuate.tween","luxe/tween/Actuate.hx",266,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_325_unload,"luxe.tween.Actuate","unload",0x7d550cf9,"luxe.tween.Actuate.unload","luxe/tween/Actuate.hx",325,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_354_update,"luxe.tween.Actuate","update",0x9ecdf203,"luxe.tween.Actuate.update","luxe/tween/Actuate.hx",354,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_17_boot,"luxe.tween.Actuate","boot",0x59af1dac,"luxe.tween.Actuate.boot","luxe/tween/Actuate.hx",17,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_18_boot,"luxe.tween.Actuate","boot",0x59af1dac,"luxe.tween.Actuate.boot","luxe/tween/Actuate.hx",18,0x5242ff4c)
HX_LOCAL_STACK_FRAME(_hx_pos_d252c7502c09b7b9_19_boot,"luxe.tween.Actuate","boot",0x59af1dac,"luxe.tween.Actuate.boot","luxe/tween/Actuate.hx",19,0x5242ff4c)
namespace luxe{
namespace tween{

void Actuate_obj::__construct() { }

Dynamic Actuate_obj::__CreateEmpty() { return new Actuate_obj; }

void *Actuate_obj::_hx_vtable = 0;

Dynamic Actuate_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Actuate_obj > _hx_result = new Actuate_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Actuate_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1b260b3e;
}

hx::Class Actuate_obj::defaultActuator;

::Dynamic Actuate_obj::defaultEase;

 ::haxe::ds::ObjectMap Actuate_obj::targetLibraries;

::Dynamic Actuate_obj::apply( ::Dynamic target, ::Dynamic properties,hx::Class customActuator){
            	HX_STACKFRAME(&_hx_pos_d252c7502c09b7b9_30_apply)
HXLINE(  32)		::luxe::tween::Actuate_obj::stop(target,properties,null(),null());
HXLINE(  34)		if (hx::IsNull( customActuator )) {
HXLINE(  36)			customActuator = ::luxe::tween::Actuate_obj::defaultActuator;
            		}
HXLINE(  40)		 ::luxe::tween::actuators::GenericActuator actuator = ( ( ::luxe::tween::actuators::GenericActuator)(::Type_obj::createInstance(customActuator,::cpp::VirtualArray_obj::__new(3)->init(0,target)->init(1,(int)0)->init(2,properties))) );
HXLINE(  41)		actuator->apply();
HXLINE(  43)		return actuator;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Actuate_obj,apply,return )

::Array< ::Dynamic> Actuate_obj::getLibrary( ::Dynamic target,hx::Null< bool >  __o_allowCreation){
bool allowCreation = __o_allowCreation.Default(true);
            	HX_STACKFRAME(&_hx_pos_d252c7502c09b7b9_48_getLibrary)
HXLINE(  50)		bool _hx_tmp;
HXDLIN(  50)		if (!(::luxe::tween::Actuate_obj::targetLibraries->exists(target))) {
HXLINE(  50)			_hx_tmp = allowCreation;
            		}
            		else {
HXLINE(  50)			_hx_tmp = false;
            		}
HXDLIN(  50)		if (_hx_tmp) {
HXLINE(  52)			 ::haxe::ds::ObjectMap _hx_tmp1 = ::luxe::tween::Actuate_obj::targetLibraries;
HXDLIN(  52)			_hx_tmp1->set(target,::Array_obj< ::Dynamic>::__new());
            		}
HXLINE(  56)		return ( (::Array< ::Dynamic>)(::luxe::tween::Actuate_obj::targetLibraries->get(target)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Actuate_obj,getLibrary,return )

::Dynamic Actuate_obj::motionPath( ::Dynamic target,Float duration, ::Dynamic properties,hx::Null< bool >  __o_overwrite){
bool overwrite = __o_overwrite.Default(true);
            	HX_STACKFRAME(&_hx_pos_d252c7502c09b7b9_71_motionPath)
HXDLIN(  71)		return ::luxe::tween::Actuate_obj::tween(target,duration,properties,overwrite,hx::ClassOf< ::luxe::tween::actuators::MotionPathActuator >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Actuate_obj,motionPath,return )

void Actuate_obj::pause( ::Dynamic target){
            	HX_STACKFRAME(&_hx_pos_d252c7502c09b7b9_83_pause)
HXDLIN(  83)		if (::Std_obj::is(target,hx::ClassOf< ::luxe::tween::actuators::GenericActuator >())) {
HXLINE(  85)			hx::TCast<  ::luxe::tween::actuators::GenericActuator >::cast(target)->pause();
            		}
            		else {
HXLINE(  89)			::Array< ::Dynamic> library = ::luxe::tween::Actuate_obj::getLibrary(target,false);
HXLINE(  91)			if (hx::IsNotNull( library )) {
HXLINE(  93)				int _g = (int)0;
HXDLIN(  93)				while((_g < library->length)){
HXLINE(  93)					 ::luxe::tween::actuators::GenericActuator actuator = library->__get(_g).StaticCast<  ::luxe::tween::actuators::GenericActuator >();
HXDLIN(  93)					_g = (_g + (int)1);
HXLINE(  95)					actuator->pause();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Actuate_obj,pause,(void))

void Actuate_obj::pauseAll(){
            	HX_STACKFRAME(&_hx_pos_d252c7502c09b7b9_108_pauseAll)
HXDLIN( 108)		 ::Dynamic library = ::luxe::tween::Actuate_obj::targetLibraries->iterator();
HXDLIN( 108)		while(( (bool)(library->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 108)			::Array< ::Dynamic> library1 = ( (::Array< ::Dynamic>)(library->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 110)			int _g = (int)0;
HXDLIN( 110)			while((_g < library1->length)){
HXLINE( 110)				 ::luxe::tween::actuators::GenericActuator actuator = library1->__get(_g).StaticCast<  ::luxe::tween::actuators::GenericActuator >();
HXDLIN( 110)				_g = (_g + (int)1);
HXLINE( 112)				actuator->pause();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Actuate_obj,pauseAll,(void))

void Actuate_obj::reset(){
            	HX_GC_STACKFRAME(&_hx_pos_d252c7502c09b7b9_124_reset)
HXLINE( 126)		{
HXLINE( 126)			 ::Dynamic library = ::luxe::tween::Actuate_obj::targetLibraries->iterator();
HXDLIN( 126)			while(( (bool)(library->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 126)				::Array< ::Dynamic> library1 = ( (::Array< ::Dynamic>)(library->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 128)				int i = (library1->length - (int)1);
HXLINE( 129)				while((i >= (int)0)){
HXLINE( 130)					library1->__get(i).StaticCast<  ::luxe::tween::actuators::GenericActuator >()->stop(null(),false,false);
HXLINE( 131)					i = (i - (int)1);
            				}
            			}
            		}
HXLINE( 136)		::luxe::tween::Actuate_obj::targetLibraries =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Actuate_obj,reset,(void))

void Actuate_obj::resume( ::Dynamic target){
            	HX_STACKFRAME(&_hx_pos_d252c7502c09b7b9_147_resume)
HXDLIN( 147)		if (::Std_obj::is(target,hx::ClassOf< ::luxe::tween::actuators::GenericActuator >())) {
HXLINE( 149)			hx::TCast<  ::luxe::tween::actuators::GenericActuator >::cast(target)->resume();
            		}
            		else {
HXLINE( 153)			::Array< ::Dynamic> library = ::luxe::tween::Actuate_obj::getLibrary(target,false);
HXLINE( 155)			if (hx::IsNotNull( library )) {
HXLINE( 157)				int _g = (int)0;
HXDLIN( 157)				while((_g < library->length)){
HXLINE( 157)					 ::luxe::tween::actuators::GenericActuator actuator = library->__get(_g).StaticCast<  ::luxe::tween::actuators::GenericActuator >();
HXDLIN( 157)					_g = (_g + (int)1);
HXLINE( 159)					actuator->resume();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Actuate_obj,resume,(void))

void Actuate_obj::resumeAll(){
            	HX_STACKFRAME(&_hx_pos_d252c7502c09b7b9_172_resumeAll)
HXDLIN( 172)		 ::Dynamic library = ::luxe::tween::Actuate_obj::targetLibraries->iterator();
HXDLIN( 172)		while(( (bool)(library->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 172)			::Array< ::Dynamic> library1 = ( (::Array< ::Dynamic>)(library->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 174)			int _g = (int)0;
HXDLIN( 174)			while((_g < library1->length)){
HXLINE( 174)				 ::luxe::tween::actuators::GenericActuator actuator = library1->__get(_g).StaticCast<  ::luxe::tween::actuators::GenericActuator >();
HXDLIN( 174)				_g = (_g + (int)1);
HXLINE( 176)				actuator->resume();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Actuate_obj,resumeAll,(void))

void Actuate_obj::stop( ::Dynamic target, ::Dynamic properties,hx::Null< bool >  __o_complete,hx::Null< bool >  __o_sendEvent){
bool complete = __o_complete.Default(false);
bool sendEvent = __o_sendEvent.Default(true);
            	HX_STACKFRAME(&_hx_pos_d252c7502c09b7b9_194_stop)
HXDLIN( 194)		if (hx::IsNotNull( target )) {
HXLINE( 196)			if (::Std_obj::is(target,hx::ClassOf< ::luxe::tween::actuators::GenericActuator >())) {
HXLINE( 198)				hx::TCast<  ::luxe::tween::actuators::GenericActuator >::cast(target)->stop(null(),complete,sendEvent);
            			}
            			else {
HXLINE( 202)				::Array< ::Dynamic> library = ::luxe::tween::Actuate_obj::getLibrary(target,false);
HXLINE( 204)				if (hx::IsNotNull( library )) {
HXLINE( 206)					if (::Std_obj::is(properties,hx::ClassOf< ::String >())) {
HXLINE( 208)						 ::Dynamic temp =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 209)						::Reflect_obj::setField(temp,( (::String)(properties) ),null());
HXLINE( 210)						properties = temp;
            					}
            					else {
HXLINE( 212)						if (::Std_obj::is(properties,hx::ArrayBase::__mClass)) {
HXLINE( 214)							 ::Dynamic temp1 =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 216)							{
HXLINE( 216)								int _g = (int)0;
HXDLIN( 216)								::cpp::VirtualArray _g1 = hx::TCast< ::cpp::VirtualArray >::cast(properties);
HXDLIN( 216)								while((_g < _g1->get_length())){
HXLINE( 216)									 ::Dynamic property = _g1->__get(_g);
HXDLIN( 216)									_g = (_g + (int)1);
HXLINE( 218)									::Reflect_obj::setField(temp1,( (::String)(property) ),null());
            								}
            							}
HXLINE( 222)							properties = temp1;
            						}
            					}
HXLINE( 226)					int i = (library->length - (int)1);
HXLINE( 227)					while((i >= (int)0)){
HXLINE( 228)						library->__get(i).StaticCast<  ::luxe::tween::actuators::GenericActuator >()->stop(properties,complete,sendEvent);
HXLINE( 229)						i = (i - (int)1);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Actuate_obj,stop,(void))

::Dynamic Actuate_obj::timer(Float duration,hx::Class customActuator){
            	HX_GC_STACKFRAME(&_hx_pos_d252c7502c09b7b9_250_timer)
HXDLIN( 250)		 ::luxe::tween::_Actuate::TweenTimer _hx_tmp =  ::luxe::tween::_Actuate::TweenTimer_obj::__alloc( HX_CTX ,(int)0);
HXDLIN( 250)		return ::luxe::tween::Actuate_obj::tween(_hx_tmp,duration, ::luxe::tween::_Actuate::TweenTimer_obj::__alloc( HX_CTX ,(int)1),false,customActuator);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Actuate_obj,timer,return )

::Dynamic Actuate_obj::tween( ::Dynamic target,Float duration, ::Dynamic properties,hx::Null< bool >  __o_overwrite,hx::Class customActuator){
bool overwrite = __o_overwrite.Default(true);
            	HX_STACKFRAME(&_hx_pos_d252c7502c09b7b9_266_tween)
HXLINE( 268)		if (hx::IsNotNull( target )) {
HXLINE( 270)			if ((duration > (int)0)) {
HXLINE( 272)				if (hx::IsNull( customActuator )) {
HXLINE( 274)					customActuator = ::luxe::tween::Actuate_obj::defaultActuator;
            				}
HXLINE( 278)				 ::luxe::tween::actuators::GenericActuator actuator = ( ( ::luxe::tween::actuators::GenericActuator)(::Type_obj::createInstance(customActuator,::cpp::VirtualArray_obj::__new(3)->init(0,target)->init(1,duration)->init(2,properties))) );
HXLINE( 279)				::Array< ::Dynamic> library = ::luxe::tween::Actuate_obj::getLibrary(actuator->target,null());
HXLINE( 281)				if (overwrite) {
HXLINE( 283)					int i = (library->length - (int)1);
HXLINE( 285)					while((i >= (int)0)){
HXLINE( 286)						library->__get(i).StaticCast<  ::luxe::tween::actuators::GenericActuator >()->stop(actuator->properties,false,false);
HXLINE( 287)						i = (i - (int)1);
            					}
HXLINE( 290)					library = ::luxe::tween::Actuate_obj::getLibrary(actuator->target,null());
            				}
HXLINE( 294)				library->push(actuator);
HXLINE( 295)				actuator->move();
HXLINE( 310)				return actuator;
            			}
            			else {
HXLINE( 314)				return ::luxe::tween::Actuate_obj::apply(target,properties,customActuator);
            			}
            		}
HXLINE( 320)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Actuate_obj,tween,return )

void Actuate_obj::unload( ::luxe::tween::actuators::GenericActuator actuator){
            	HX_STACKFRAME(&_hx_pos_d252c7502c09b7b9_325_unload)
HXLINE( 327)		 ::Dynamic target = actuator->target;
HXLINE( 329)		if (::luxe::tween::Actuate_obj::targetLibraries->exists(target)) {
HXLINE( 331)			( (::Array< ::Dynamic>)(::luxe::tween::Actuate_obj::targetLibraries->get(target)) )->remove(actuator);
HXLINE( 333)			if ((( (::Array< ::Dynamic>)(::luxe::tween::Actuate_obj::targetLibraries->get(target)) )->length == (int)0)) {
HXLINE( 335)				::luxe::tween::Actuate_obj::targetLibraries->remove(target);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Actuate_obj,unload,(void))

::Dynamic Actuate_obj::update( ::Dynamic target,Float duration,::cpp::VirtualArray start,::cpp::VirtualArray end,hx::Null< bool >  __o_overwrite){
bool overwrite = __o_overwrite.Default(true);
            	HX_STACKFRAME(&_hx_pos_d252c7502c09b7b9_354_update)
HXLINE( 356)		 ::Dynamic properties =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("start",62,74,0b,84),start)
            			->setFixed(1,HX_("end",db,03,4d,00),end));
HXLINE( 358)		return ::luxe::tween::Actuate_obj::tween(target,duration,properties,overwrite,hx::ClassOf< ::luxe::tween::actuators::MethodActuator >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Actuate_obj,update,return )


Actuate_obj::Actuate_obj()
{
}

bool Actuate_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { outValue = stop_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"apply") ) { outValue = apply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pause") ) { outValue = pause_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reset") ) { outValue = reset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"timer") ) { outValue = timer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tween") ) { outValue = tween_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resume") ) { outValue = resume_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unload") ) { outValue = unload_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"update") ) { outValue = update_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pauseAll") ) { outValue = pauseAll_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"resumeAll") ) { outValue = resumeAll_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getLibrary") ) { outValue = getLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"motionPath") ) { outValue = motionPath_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultEase") ) { outValue = ( defaultEase ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"defaultActuator") ) { outValue = ( defaultActuator ); return true; }
		if (HX_FIELD_EQ(inName,"targetLibraries") ) { outValue = ( targetLibraries ); return true; }
	}
	return false;
}

bool Actuate_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"defaultEase") ) { defaultEase=ioValue.Cast< ::Dynamic >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"defaultActuator") ) { defaultActuator=ioValue.Cast< hx::Class >(); return true; }
		if (HX_FIELD_EQ(inName,"targetLibraries") ) { targetLibraries=ioValue.Cast<  ::haxe::ds::ObjectMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Actuate_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Actuate_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::hx::Class*/ ,(void *) &Actuate_obj::defaultActuator,HX_HCSTRING("defaultActuator","\x1a","\xbb","\xb5","\xe9")},
	{hx::fsObject /*::luxe::tween::easing::IEasing*/ ,(void *) &Actuate_obj::defaultEase,HX_HCSTRING("defaultEase","\x4f","\x85","\xcb","\x14")},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(void *) &Actuate_obj::targetLibraries,HX_HCSTRING("targetLibraries","\x88","\xca","\xb7","\x7d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Actuate_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Actuate_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Actuate_obj::defaultActuator,"defaultActuator");
	HX_MARK_MEMBER_NAME(Actuate_obj::defaultEase,"defaultEase");
	HX_MARK_MEMBER_NAME(Actuate_obj::targetLibraries,"targetLibraries");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Actuate_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Actuate_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Actuate_obj::defaultActuator,"defaultActuator");
	HX_VISIT_MEMBER_NAME(Actuate_obj::defaultEase,"defaultEase");
	HX_VISIT_MEMBER_NAME(Actuate_obj::targetLibraries,"targetLibraries");
};

#endif

hx::Class Actuate_obj::__mClass;

static ::String Actuate_obj_sStaticFields[] = {
	HX_HCSTRING("defaultActuator","\x1a","\xbb","\xb5","\xe9"),
	HX_HCSTRING("defaultEase","\x4f","\x85","\xcb","\x14"),
	HX_HCSTRING("targetLibraries","\x88","\xca","\xb7","\x7d"),
	HX_HCSTRING("apply","\x6e","\x85","\x3b","\x24"),
	HX_HCSTRING("getLibrary","\x05","\xad","\xd1","\x8e"),
	HX_HCSTRING("motionPath","\xfb","\xea","\x66","\x3c"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("pauseAll","\xcb","\x17","\x7e","\x09"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("resumeAll","\x74","\xd1","\xee","\xfb"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("tween","\x6b","\xaa","\x70","\x19"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null())
};

void Actuate_obj::__register()
{
	hx::Object *dummy = new Actuate_obj;
	Actuate_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.tween.Actuate","\x34","\x39","\x1b","\xc4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Actuate_obj::__GetStatic;
	__mClass->mSetStaticField = &Actuate_obj::__SetStatic;
	__mClass->mMarkFunc = Actuate_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Actuate_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Actuate_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Actuate_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Actuate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Actuate_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Actuate_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d252c7502c09b7b9_17_boot)
HXDLIN(  17)		defaultActuator = hx::ClassOf< ::luxe::tween::actuators::SimpleActuator >();
            	}
{
            	HX_STACKFRAME(&_hx_pos_d252c7502c09b7b9_18_boot)
HXDLIN(  18)		defaultEase = ::luxe::tween::easing::Quad_obj::get_easeOut();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d252c7502c09b7b9_19_boot)
HXDLIN(  19)		targetLibraries =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace luxe
} // end namespace tween
