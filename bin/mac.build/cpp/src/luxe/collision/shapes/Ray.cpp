// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_collision_shapes_InfiniteState
#include <luxe/collision/shapes/InfiniteState.h>
#endif
#ifndef INCLUDED_luxe_collision_shapes_Ray
#include <luxe/collision/shapes/Ray.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_534e95eaeab05a20_25_new,"luxe.collision.shapes.Ray","new",0x020781b4,"luxe.collision.shapes.Ray.new","luxe/collision/shapes/Ray.hx",25,0x54c6da7b)
HX_LOCAL_STACK_FRAME(_hx_pos_534e95eaeab05a20_39_get_dir,"luxe.collision.shapes.Ray","get_dir",0xc849f138,"luxe.collision.shapes.Ray.get_dir","luxe/collision/shapes/Ray.hx",39,0x54c6da7b)
namespace luxe{
namespace collision{
namespace shapes{

void Ray_obj::__construct( ::phoenix::Vector _start, ::phoenix::Vector _end, ::luxe::collision::shapes::InfiniteState _infinite){
            	HX_GC_STACKFRAME(&_hx_pos_534e95eaeab05a20_25_new)
HXLINE(  27)		this->start = _start;
HXLINE(  28)		this->end = _end;
HXLINE(  29)		 ::luxe::collision::shapes::InfiniteState _hx_tmp;
HXDLIN(  29)		if (hx::IsNull( _infinite )) {
HXLINE(  29)			_hx_tmp = ::luxe::collision::shapes::InfiniteState_obj::not_infinite_dyn();
            		}
            		else {
HXLINE(  29)			_hx_tmp = _infinite;
            		}
HXDLIN(  29)		this->infinite = _hx_tmp;
HXLINE(  32)		Float _hx_tmp1 = (this->end->x - this->start->x);
HXDLIN(  32)		this->dir_cache =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp1,(this->end->y - this->start->y),null(),null());
            	}

Dynamic Ray_obj::__CreateEmpty() { return new Ray_obj; }

void *Ray_obj::_hx_vtable = 0;

Dynamic Ray_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ray_obj > _hx_result = new Ray_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Ray_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4211c000;
}

 ::phoenix::Vector Ray_obj::get_dir(){
            	HX_STACKFRAME(&_hx_pos_534e95eaeab05a20_39_get_dir)
HXLINE(  40)		{
HXLINE(  40)			 ::phoenix::Vector _this = this->dir_cache;
HXDLIN(  40)			Float _x = (this->end->x - this->start->x);
HXDLIN(  40)			_this->x = _x;
HXDLIN(  40)			if (!(_this->_construct)) {
HXLINE(  40)				bool _hx_tmp;
HXDLIN(  40)				if (hx::IsNotNull( _this->listen_x )) {
HXLINE(  40)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXLINE(  40)					_hx_tmp = false;
            				}
HXDLIN(  40)				if (_hx_tmp) {
HXLINE(  40)					_this->listen_x(_x);
            				}
            			}
            		}
HXLINE(  41)		{
HXLINE(  41)			 ::phoenix::Vector _this1 = this->dir_cache;
HXDLIN(  41)			Float _y = (this->end->y - this->start->y);
HXDLIN(  41)			_this1->y = _y;
HXDLIN(  41)			if (!(_this1->_construct)) {
HXLINE(  41)				bool _hx_tmp1;
HXDLIN(  41)				if (hx::IsNotNull( _this1->listen_y )) {
HXLINE(  41)					_hx_tmp1 = !(_this1->ignore_listeners);
            				}
            				else {
HXLINE(  41)					_hx_tmp1 = false;
            				}
HXDLIN(  41)				if (_hx_tmp1) {
HXLINE(  41)					_this1->listen_y(_y);
            				}
            			}
            		}
HXLINE(  42)		return this->dir_cache;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Ray_obj,get_dir,return )


hx::ObjectPtr< Ray_obj > Ray_obj::__new( ::phoenix::Vector _start, ::phoenix::Vector _end, ::luxe::collision::shapes::InfiniteState _infinite) {
	hx::ObjectPtr< Ray_obj > __this = new Ray_obj();
	__this->__construct(_start,_end,_infinite);
	return __this;
}

hx::ObjectPtr< Ray_obj > Ray_obj::__alloc(hx::Ctx *_hx_ctx, ::phoenix::Vector _start, ::phoenix::Vector _end, ::luxe::collision::shapes::InfiniteState _infinite) {
	Ray_obj *__this = (Ray_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Ray_obj), true, "luxe.collision.shapes.Ray"));
	*(void **)__this = Ray_obj::_hx_vtable;
	__this->__construct(_start,_end,_infinite);
	return __this;
}

Ray_obj::Ray_obj()
{
}

void Ray_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Ray);
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(end,"end");
	HX_MARK_MEMBER_NAME(infinite,"infinite");
	HX_MARK_MEMBER_NAME(dir_cache,"dir_cache");
	HX_MARK_END_CLASS();
}

void Ray_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(end,"end");
	HX_VISIT_MEMBER_NAME(infinite,"infinite");
	HX_VISIT_MEMBER_NAME(dir_cache,"dir_cache");
}

hx::Val Ray_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end ); }
		if (HX_FIELD_EQ(inName,"dir") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_dir() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_dir") ) { return hx::Val( get_dir_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"infinite") ) { return hx::Val( infinite ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dir_cache") ) { return hx::Val( dir_cache ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Ray_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"infinite") ) { infinite=inValue.Cast<  ::luxe::collision::shapes::InfiniteState >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dir_cache") ) { dir_cache=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Ray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("start","\x62","\x74","\x0b","\x84"));
	outFields->push(HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"));
	outFields->push(HX_HCSTRING("dir","\x4d","\x3d","\x4c","\x00"));
	outFields->push(HX_HCSTRING("infinite","\xd4","\x16","\x69","\xda"));
	outFields->push(HX_HCSTRING("dir_cache","\x90","\x96","\x88","\x9d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Ray_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Ray_obj,start),HX_HCSTRING("start","\x62","\x74","\x0b","\x84")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Ray_obj,end),HX_HCSTRING("end","\xdb","\x03","\x4d","\x00")},
	{hx::fsObject /*::luxe::collision::shapes::InfiniteState*/ ,(int)offsetof(Ray_obj,infinite),HX_HCSTRING("infinite","\xd4","\x16","\x69","\xda")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Ray_obj,dir_cache),HX_HCSTRING("dir_cache","\x90","\x96","\x88","\x9d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Ray_obj_sStaticStorageInfo = 0;
#endif

static ::String Ray_obj_sMemberFields[] = {
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("infinite","\xd4","\x16","\x69","\xda"),
	HX_HCSTRING("dir_cache","\x90","\x96","\x88","\x9d"),
	HX_HCSTRING("get_dir","\xe4","\x05","\xc1","\x26"),
	::String(null()) };

static void Ray_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ray_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ray_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ray_obj::__mClass,"__mClass");
};

#endif

hx::Class Ray_obj::__mClass;

void Ray_obj::__register()
{
	hx::Object *dummy = new Ray_obj;
	Ray_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.collision.shapes.Ray","\xc2","\xd7","\x57","\x11");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Ray_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Ray_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Ray_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ray_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ray_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace collision
} // end namespace shapes
