// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_luxe_collision_data_RayCollision
#include <luxe/collision/data/RayCollision.h>
#endif
#ifndef INCLUDED_luxe_collision_data_ShapeCollision
#include <luxe/collision/data/ShapeCollision.h>
#endif
#ifndef INCLUDED_luxe_collision_shapes_Circle
#include <luxe/collision/shapes/Circle.h>
#endif
#ifndef INCLUDED_luxe_collision_shapes_Polygon
#include <luxe/collision/shapes/Polygon.h>
#endif
#ifndef INCLUDED_luxe_collision_shapes_Ray
#include <luxe/collision/shapes/Ray.h>
#endif
#ifndef INCLUDED_luxe_collision_shapes_Shape
#include <luxe/collision/shapes/Shape.h>
#endif
#ifndef INCLUDED_phoenix_Matrix
#include <phoenix/Matrix.h>
#endif
#ifndef INCLUDED_phoenix_Quaternion
#include <phoenix/Quaternion.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1450d66fcb610088_9_new,"luxe.collision.shapes.Shape","new",0xc2131c6b,"luxe.collision.shapes.Shape.new","luxe/collision/shapes/Shape.hx",9,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_74_test,"luxe.collision.shapes.Shape","test",0x129d05e7,"luxe.collision.shapes.Shape.test","luxe/collision/shapes/Shape.hx",74,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_76_testCircle,"luxe.collision.shapes.Shape","testCircle",0x622ed357,"luxe.collision.shapes.Shape.testCircle","luxe/collision/shapes/Shape.hx",76,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_78_testPolygon,"luxe.collision.shapes.Shape","testPolygon",0xa3a4bf53,"luxe.collision.shapes.Shape.testPolygon","luxe/collision/shapes/Shape.hx",78,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_80_testRay,"luxe.collision.shapes.Shape","testRay",0x9482f243,"luxe.collision.shapes.Shape.testRay","luxe/collision/shapes/Shape.hx",80,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_83_destroy,"luxe.collision.shapes.Shape","destroy",0xfb43da85,"luxe.collision.shapes.Shape.destroy","luxe/collision/shapes/Shape.hx",83,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_95_refresh_transform,"luxe.collision.shapes.Shape","refresh_transform",0xc9c1ac13,"luxe.collision.shapes.Shape.refresh_transform","luxe/collision/shapes/Shape.hx",95,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_110_get_position,"luxe.collision.shapes.Shape","get_position",0x6d3eaf47,"luxe.collision.shapes.Shape.get_position","luxe/collision/shapes/Shape.hx",110,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_113_set_position,"luxe.collision.shapes.Shape","set_position",0x8237d2bb,"luxe.collision.shapes.Shape.set_position","luxe/collision/shapes/Shape.hx",113,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_127_get_x,"luxe.collision.shapes.Shape","get_x",0xba934a1a,"luxe.collision.shapes.Shape.get_x","luxe/collision/shapes/Shape.hx",127,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_130_set_x,"luxe.collision.shapes.Shape","set_x",0xa3624026,"luxe.collision.shapes.Shape.set_x","luxe/collision/shapes/Shape.hx",130,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_141_get_y,"luxe.collision.shapes.Shape","get_y",0xba934a1b,"luxe.collision.shapes.Shape.get_y","luxe/collision/shapes/Shape.hx",141,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_144_set_y,"luxe.collision.shapes.Shape","set_y",0xa3624027,"luxe.collision.shapes.Shape.set_y","luxe/collision/shapes/Shape.hx",144,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_155_get_rotation,"luxe.collision.shapes.Shape","get_rotation",0xaaca4bdc,"luxe.collision.shapes.Shape.get_rotation","luxe/collision/shapes/Shape.hx",155,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_158_set_rotation,"luxe.collision.shapes.Shape","set_rotation",0xbfc36f50,"luxe.collision.shapes.Shape.set_rotation","luxe/collision/shapes/Shape.hx",158,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_171_get_scaleX,"luxe.collision.shapes.Shape","get_scaleX",0x1fda75ac,"luxe.collision.shapes.Shape.get_scaleX","luxe/collision/shapes/Shape.hx",171,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_174_set_scaleX,"luxe.collision.shapes.Shape","set_scaleX",0x23581420,"luxe.collision.shapes.Shape.set_scaleX","luxe/collision/shapes/Shape.hx",174,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_184_get_scaleY,"luxe.collision.shapes.Shape","get_scaleY",0x1fda75ad,"luxe.collision.shapes.Shape.get_scaleY","luxe/collision/shapes/Shape.hx",184,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_187_set_scaleY,"luxe.collision.shapes.Shape","set_scaleY",0x23581421,"luxe.collision.shapes.Shape.set_scaleY","luxe/collision/shapes/Shape.hx",187,0xfa059164)
HX_LOCAL_STACK_FRAME(_hx_pos_1450d66fcb610088_197__pos_changed,"luxe.collision.shapes.Shape","_pos_changed",0xddc4249f,"luxe.collision.shapes.Shape._pos_changed","luxe/collision/shapes/Shape.hx",197,0xfa059164)
namespace luxe{
namespace collision{
namespace shapes{

void Shape_obj::__construct(Float _x,Float _y){
            	HX_GC_STACKFRAME(&_hx_pos_1450d66fcb610088_9_new)
HXLINE(  43)		this->_transformed = false;
HXLINE(  41)		this->_scaleY = ((Float)1);
HXLINE(  40)		this->_scaleX = ((Float)1);
HXLINE(  35)		this->_rotation_radians = ((Float)0);
HXLINE(  34)		this->_rotation = ((Float)0);
HXLINE(  15)		this->name = HX_("shape",21,e3,1c,7c);
HXLINE(  13)		this->active = true;
HXLINE(  53)		this->tags =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  55)		this->_position =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_x,_y,null(),null());
HXLINE(  56)		this->_scale =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)1,(int)1,null(),null());
HXLINE(  57)		this->_rotation_quat =  ::phoenix::Quaternion_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  58)		this->_rotation_euler =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  59)		this->_rotation = (int)0;
HXLINE(  61)		this->_scaleX = (int)1;
HXLINE(  62)		this->_scaleY = (int)1;
HXLINE(  64)		{
HXLINE(  64)			 ::phoenix::Vector _v = this->_position;
HXDLIN(  64)			 ::Dynamic listener = this->_pos_changed_dyn();
HXDLIN(  64)			_v->listen_x = listener;
HXDLIN(  64)			_v->listen_y = listener;
HXDLIN(  64)			_v->listen_z = listener;
            		}
HXLINE(  66)		this->_transformMatrix =  ::phoenix::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  67)		{
HXLINE(  67)			 ::phoenix::Matrix _this = this->_transformMatrix;
HXDLIN(  67)			{
HXLINE(  67)				::Array< Float > e = _this->elements;
HXDLIN(  67)				e[(int)0] = (int)1;
HXDLIN(  67)				e[(int)4] = (int)0;
HXDLIN(  67)				e[(int)8] = (int)0;
HXDLIN(  67)				e[(int)12] = this->_position->x;
HXDLIN(  67)				e[(int)1] = (int)0;
HXDLIN(  67)				e[(int)5] = (int)1;
HXDLIN(  67)				e[(int)9] = (int)0;
HXDLIN(  67)				e[(int)13] = this->_position->y;
HXDLIN(  67)				e[(int)2] = (int)0;
HXDLIN(  67)				e[(int)6] = (int)0;
HXDLIN(  67)				e[(int)10] = (int)1;
HXDLIN(  67)				e[(int)14] = (int)0;
HXDLIN(  67)				e[(int)3] = (int)0;
HXDLIN(  67)				e[(int)7] = (int)0;
HXDLIN(  67)				e[(int)11] = (int)0;
HXDLIN(  67)				e[(int)15] = (int)1;
            			}
            		}
            	}

Dynamic Shape_obj::__CreateEmpty() { return new Shape_obj; }

void *Shape_obj::_hx_vtable = 0;

Dynamic Shape_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shape_obj > _hx_result = new Shape_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Shape_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2003dd7f;
}

 ::luxe::collision::data::ShapeCollision Shape_obj::test( ::luxe::collision::shapes::Shape shape, ::luxe::collision::data::ShapeCollision into){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_74_test)
HXDLIN(  74)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shape_obj,test,return )

 ::luxe::collision::data::ShapeCollision Shape_obj::testCircle( ::luxe::collision::shapes::Circle circle, ::luxe::collision::data::ShapeCollision into,hx::Null< bool >  __o_flip){
bool flip = __o_flip.Default(false);
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_76_testCircle)
HXDLIN(  76)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Shape_obj,testCircle,return )

 ::luxe::collision::data::ShapeCollision Shape_obj::testPolygon( ::luxe::collision::shapes::Polygon polygon, ::luxe::collision::data::ShapeCollision into,hx::Null< bool >  __o_flip){
bool flip = __o_flip.Default(false);
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_78_testPolygon)
HXDLIN(  78)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Shape_obj,testPolygon,return )

 ::luxe::collision::data::RayCollision Shape_obj::testRay( ::luxe::collision::shapes::Ray ray, ::luxe::collision::data::RayCollision into){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_80_testRay)
HXDLIN(  80)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shape_obj,testRay,return )

void Shape_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_83_destroy)
HXLINE(  85)		this->_position = null();
HXLINE(  86)		this->_scale = null();
HXLINE(  87)		this->_transformMatrix = null();
HXLINE(  88)		this->_rotation_quat = null();
HXLINE(  89)		this->_rotation_euler = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,destroy,(void))

void Shape_obj::refresh_transform(){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_95_refresh_transform)
HXLINE(  97)		if (hx::IsNull( this->_position )) {
HXLINE(  97)			return;
            		}
HXLINE(  99)		{
HXLINE(  99)			 ::phoenix::Vector _this = this->_rotation_euler;
HXDLIN(  99)			Float _z = this->_rotation_radians;
HXDLIN(  99)			_this->z = _z;
HXDLIN(  99)			if (!(_this->_construct)) {
HXLINE(  99)				bool _hx_tmp;
HXDLIN(  99)				if (hx::IsNotNull( _this->listen_z )) {
HXLINE(  99)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXLINE(  99)					_hx_tmp = false;
            				}
HXDLIN(  99)				if (_hx_tmp) {
HXLINE(  99)					_this->listen_z(_z);
            				}
            			}
            		}
HXLINE( 100)		this->_rotation_quat->setFromEuler(this->_rotation_euler,null());
HXLINE( 102)		{
HXLINE( 102)			 ::phoenix::Matrix _this1 = this->_transformMatrix;
HXDLIN( 102)			 ::phoenix::Vector _position = this->_position;
HXDLIN( 102)			 ::phoenix::Quaternion _quaternion = this->_rotation_quat;
HXDLIN( 102)			 ::phoenix::Vector _scale = this->_scale;
HXDLIN( 102)			{
HXLINE( 102)				::Array< Float > te = _this1->elements;
HXDLIN( 102)				Float x2 = (_quaternion->x + _quaternion->x);
HXDLIN( 102)				Float y2 = (_quaternion->y + _quaternion->y);
HXDLIN( 102)				Float z2 = (_quaternion->z + _quaternion->z);
HXDLIN( 102)				Float xx = (_quaternion->x * x2);
HXDLIN( 102)				Float xy = (_quaternion->x * y2);
HXDLIN( 102)				Float xz = (_quaternion->x * z2);
HXDLIN( 102)				Float yy = (_quaternion->y * y2);
HXDLIN( 102)				Float yz = (_quaternion->y * z2);
HXDLIN( 102)				Float zz = (_quaternion->z * z2);
HXDLIN( 102)				Float wx = (_quaternion->w * x2);
HXDLIN( 102)				Float wy = (_quaternion->w * y2);
HXDLIN( 102)				Float wz = (_quaternion->w * z2);
HXDLIN( 102)				te[(int)0] = ((int)1 - (yy + zz));
HXDLIN( 102)				te[(int)4] = (xy - wz);
HXDLIN( 102)				te[(int)8] = (xz + wy);
HXDLIN( 102)				te[(int)1] = (xy + wz);
HXDLIN( 102)				te[(int)5] = ((int)1 - (xx + zz));
HXDLIN( 102)				te[(int)9] = (yz - wx);
HXDLIN( 102)				te[(int)2] = (xz - wy);
HXDLIN( 102)				te[(int)6] = (yz + wx);
HXDLIN( 102)				te[(int)10] = ((int)1 - (xx + yy));
HXDLIN( 102)				te[(int)3] = (int)0;
HXDLIN( 102)				te[(int)7] = (int)0;
HXDLIN( 102)				te[(int)11] = (int)0;
HXDLIN( 102)				te[(int)12] = (int)0;
HXDLIN( 102)				te[(int)13] = (int)0;
HXDLIN( 102)				te[(int)14] = (int)0;
HXDLIN( 102)				te[(int)15] = (int)1;
            			}
HXDLIN( 102)			{
HXLINE( 102)				::Array< Float > te1 = _this1->elements;
HXDLIN( 102)				Float _x = _scale->x;
HXDLIN( 102)				Float _y = _scale->y;
HXDLIN( 102)				Float _z1 = _scale->z;
HXDLIN( 102)				::Array< Float > te2 = te1;
HXDLIN( 102)				int _hx_tmp1 = (int)0;
HXDLIN( 102)				te2[_hx_tmp1] = (te2->__get(_hx_tmp1) * _x);
HXDLIN( 102)				::Array< Float > te3 = te1;
HXDLIN( 102)				int _hx_tmp2 = (int)4;
HXDLIN( 102)				te3[_hx_tmp2] = (te3->__get(_hx_tmp2) * _y);
HXDLIN( 102)				::Array< Float > te4 = te1;
HXDLIN( 102)				int _hx_tmp3 = (int)8;
HXDLIN( 102)				te4[_hx_tmp3] = (te4->__get(_hx_tmp3) * _z1);
HXDLIN( 102)				::Array< Float > te5 = te1;
HXDLIN( 102)				int _hx_tmp4 = (int)1;
HXDLIN( 102)				te5[_hx_tmp4] = (te5->__get(_hx_tmp4) * _x);
HXDLIN( 102)				::Array< Float > te6 = te1;
HXDLIN( 102)				int _hx_tmp5 = (int)5;
HXDLIN( 102)				te6[_hx_tmp5] = (te6->__get(_hx_tmp5) * _y);
HXDLIN( 102)				::Array< Float > te7 = te1;
HXDLIN( 102)				int _hx_tmp6 = (int)9;
HXDLIN( 102)				te7[_hx_tmp6] = (te7->__get(_hx_tmp6) * _z1);
HXDLIN( 102)				::Array< Float > te8 = te1;
HXDLIN( 102)				int _hx_tmp7 = (int)2;
HXDLIN( 102)				te8[_hx_tmp7] = (te8->__get(_hx_tmp7) * _x);
HXDLIN( 102)				::Array< Float > te9 = te1;
HXDLIN( 102)				int _hx_tmp8 = (int)6;
HXDLIN( 102)				te9[_hx_tmp8] = (te9->__get(_hx_tmp8) * _y);
HXDLIN( 102)				::Array< Float > te10 = te1;
HXDLIN( 102)				int _hx_tmp9 = (int)10;
HXDLIN( 102)				te10[_hx_tmp9] = (te10->__get(_hx_tmp9) * _z1);
HXDLIN( 102)				::Array< Float > te11 = te1;
HXDLIN( 102)				int _hx_tmp10 = (int)3;
HXDLIN( 102)				te11[_hx_tmp10] = (te11->__get(_hx_tmp10) * _x);
HXDLIN( 102)				::Array< Float > te12 = te1;
HXDLIN( 102)				int _hx_tmp11 = (int)7;
HXDLIN( 102)				te12[_hx_tmp11] = (te12->__get(_hx_tmp11) * _y);
HXDLIN( 102)				::Array< Float > te13 = te1;
HXDLIN( 102)				int _hx_tmp12 = (int)11;
HXDLIN( 102)				te13[_hx_tmp12] = (te13->__get(_hx_tmp12) * _z1);
            			}
HXDLIN( 102)			{
HXLINE( 102)				::Array< Float > te14 = _this1->elements;
HXDLIN( 102)				te14[(int)12] = _position->x;
HXDLIN( 102)				te14[(int)13] = _position->y;
HXDLIN( 102)				te14[(int)14] = _position->z;
            			}
            		}
HXLINE( 103)		this->_transformed = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,refresh_transform,(void))

 ::phoenix::Vector Shape_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_110_get_position)
HXDLIN( 110)		return this->_position;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_position,return )

 ::phoenix::Vector Shape_obj::set_position( ::phoenix::Vector v){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_113_set_position)
HXLINE( 115)		this->_position = v;
HXLINE( 116)		this->refresh_transform();
HXLINE( 118)		if (hx::IsNotNull( this->_position )) {
HXLINE( 118)			 ::phoenix::Vector _v = this->_position;
HXDLIN( 118)			 ::Dynamic listener = this->_pos_changed_dyn();
HXDLIN( 118)			_v->listen_x = listener;
HXDLIN( 118)			_v->listen_y = listener;
HXDLIN( 118)			_v->listen_z = listener;
            		}
HXLINE( 120)		return this->_position;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,set_position,return )

Float Shape_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_127_get_x)
HXDLIN( 127)		return this->_position->x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_x,return )

Float Shape_obj::set_x(Float x){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_130_set_x)
HXLINE( 131)		this->_position->ignore_listeners = true;
HXLINE( 132)		{
HXLINE( 132)			 ::phoenix::Vector _this = this->_position;
HXDLIN( 132)			_this->x = x;
HXDLIN( 132)			if (!(_this->_construct)) {
HXLINE( 132)				bool _hx_tmp;
HXDLIN( 132)				if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 132)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 132)					_hx_tmp = false;
            				}
HXDLIN( 132)				if (_hx_tmp) {
HXLINE( 132)					_this->listen_x(x);
            				}
            			}
            		}
HXLINE( 133)		this->refresh_transform();
HXLINE( 134)		this->_position->ignore_listeners = false;
HXLINE( 135)		return this->_position->x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,set_x,return )

Float Shape_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_141_get_y)
HXDLIN( 141)		return this->_position->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_y,return )

Float Shape_obj::set_y(Float y){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_144_set_y)
HXLINE( 145)		this->_position->ignore_listeners = true;
HXLINE( 146)		{
HXLINE( 146)			 ::phoenix::Vector _this = this->_position;
HXDLIN( 146)			_this->y = y;
HXDLIN( 146)			if (!(_this->_construct)) {
HXLINE( 146)				bool _hx_tmp;
HXDLIN( 146)				if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 146)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 146)					_hx_tmp = false;
            				}
HXDLIN( 146)				if (_hx_tmp) {
HXLINE( 146)					_this->listen_y(y);
            				}
            			}
            		}
HXLINE( 147)		this->refresh_transform();
HXLINE( 148)		this->_position->ignore_listeners = false;
HXLINE( 149)		return this->_position->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,set_y,return )

Float Shape_obj::get_rotation(){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_155_get_rotation)
HXDLIN( 155)		return this->_rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_rotation,return )

Float Shape_obj::set_rotation(Float v){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_158_set_rotation)
HXLINE( 160)		this->_rotation_radians = (v * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE( 162)		this->refresh_transform();
HXLINE( 164)		return (this->_rotation = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,set_rotation,return )

Float Shape_obj::get_scaleX(){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_171_get_scaleX)
HXDLIN( 171)		return this->_scaleX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_scaleX,return )

Float Shape_obj::set_scaleX(Float scale){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_174_set_scaleX)
HXLINE( 175)		this->_scaleX = scale;
HXLINE( 176)		{
HXLINE( 176)			 ::phoenix::Vector _this = this->_scale;
HXDLIN( 176)			Float _x = this->_scaleX;
HXDLIN( 176)			_this->x = _x;
HXDLIN( 176)			if (!(_this->_construct)) {
HXLINE( 176)				bool _hx_tmp;
HXDLIN( 176)				if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 176)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 176)					_hx_tmp = false;
            				}
HXDLIN( 176)				if (_hx_tmp) {
HXLINE( 176)					_this->listen_x(_x);
            				}
            			}
            		}
HXLINE( 177)		this->refresh_transform();
HXLINE( 178)		return this->_scaleX;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,set_scaleX,return )

Float Shape_obj::get_scaleY(){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_184_get_scaleY)
HXDLIN( 184)		return this->_scaleY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_scaleY,return )

Float Shape_obj::set_scaleY(Float scale){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_187_set_scaleY)
HXLINE( 188)		this->_scaleY = scale;
HXLINE( 189)		{
HXLINE( 189)			 ::phoenix::Vector _this = this->_scale;
HXDLIN( 189)			Float _y = this->_scaleY;
HXDLIN( 189)			_this->y = _y;
HXDLIN( 189)			if (!(_this->_construct)) {
HXLINE( 189)				bool _hx_tmp;
HXDLIN( 189)				if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 189)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 189)					_hx_tmp = false;
            				}
HXDLIN( 189)				if (_hx_tmp) {
HXLINE( 189)					_this->listen_y(_y);
            				}
            			}
            		}
HXLINE( 190)		this->refresh_transform();
HXLINE( 191)		return this->_scaleY;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,set_scaleY,return )

void Shape_obj::_pos_changed(Float _){
            	HX_STACKFRAME(&_hx_pos_1450d66fcb610088_197__pos_changed)
HXDLIN( 197)		this->refresh_transform();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,_pos_changed,(void))


hx::ObjectPtr< Shape_obj > Shape_obj::__new(Float _x,Float _y) {
	hx::ObjectPtr< Shape_obj > __this = new Shape_obj();
	__this->__construct(_x,_y);
	return __this;
}

hx::ObjectPtr< Shape_obj > Shape_obj::__alloc(hx::Ctx *_hx_ctx,Float _x,Float _y) {
	Shape_obj *__this = (Shape_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Shape_obj), true, "luxe.collision.shapes.Shape"));
	*(void **)__this = Shape_obj::_hx_vtable;
	__this->__construct(_x,_y);
	return __this;
}

Shape_obj::Shape_obj()
{
}

void Shape_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Shape);
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(tags,"tags");
	HX_MARK_MEMBER_NAME(_position,"_position");
	HX_MARK_MEMBER_NAME(_rotation,"_rotation");
	HX_MARK_MEMBER_NAME(_rotation_radians,"_rotation_radians");
	HX_MARK_MEMBER_NAME(_rotation_quat,"_rotation_quat");
	HX_MARK_MEMBER_NAME(_rotation_euler,"_rotation_euler");
	HX_MARK_MEMBER_NAME(_scale,"_scale");
	HX_MARK_MEMBER_NAME(_scaleX,"_scaleX");
	HX_MARK_MEMBER_NAME(_scaleY,"_scaleY");
	HX_MARK_MEMBER_NAME(_transformed,"_transformed");
	HX_MARK_MEMBER_NAME(_transformMatrix,"_transformMatrix");
	HX_MARK_END_CLASS();
}

void Shape_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(tags,"tags");
	HX_VISIT_MEMBER_NAME(_position,"_position");
	HX_VISIT_MEMBER_NAME(_rotation,"_rotation");
	HX_VISIT_MEMBER_NAME(_rotation_radians,"_rotation_radians");
	HX_VISIT_MEMBER_NAME(_rotation_quat,"_rotation_quat");
	HX_VISIT_MEMBER_NAME(_rotation_euler,"_rotation_euler");
	HX_VISIT_MEMBER_NAME(_scale,"_scale");
	HX_VISIT_MEMBER_NAME(_scaleX,"_scaleX");
	HX_VISIT_MEMBER_NAME(_scaleY,"_scaleY");
	HX_VISIT_MEMBER_NAME(_transformed,"_transformed");
	HX_VISIT_MEMBER_NAME(_transformMatrix,"_transformMatrix");
}

hx::Val Shape_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_x() ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_y() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"tags") ) { return hx::Val( tags ); }
		if (HX_FIELD_EQ(inName,"test") ) { return hx::Val( test_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleX() ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleY() ); }
		if (HX_FIELD_EQ(inName,"_scale") ) { return hx::Val( _scale ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_scaleX") ) { return hx::Val( _scaleX ); }
		if (HX_FIELD_EQ(inName,"_scaleY") ) { return hx::Val( _scaleY ); }
		if (HX_FIELD_EQ(inName,"testRay") ) { return hx::Val( testRay_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_position() ); }
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotation() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_position") ) { return hx::Val( _position ); }
		if (HX_FIELD_EQ(inName,"_rotation") ) { return hx::Val( _rotation ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testCircle") ) { return hx::Val( testCircle_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleX") ) { return hx::Val( get_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return hx::Val( set_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleY") ) { return hx::Val( get_scaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return hx::Val( set_scaleY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testPolygon") ) { return hx::Val( testPolygon_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_transformed") ) { return hx::Val( _transformed ); }
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return hx::Val( set_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return hx::Val( get_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"_pos_changed") ) { return hx::Val( _pos_changed_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_rotation_quat") ) { return hx::Val( _rotation_quat ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_rotation_euler") ) { return hx::Val( _rotation_euler ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_transformMatrix") ) { return hx::Val( _transformMatrix ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_rotation_radians") ) { return hx::Val( _rotation_radians ); }
		if (HX_FIELD_EQ(inName,"refresh_transform") ) { return hx::Val( refresh_transform_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Shape_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tags") ) { tags=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_scale") ) { _scale=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_scaleX") ) { _scaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scaleY") ) { _scaleY=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_position(inValue.Cast<  ::phoenix::Vector >()) ); }
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_position") ) { _position=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rotation") ) { _rotation=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_transformed") ) { _transformed=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_rotation_quat") ) { _rotation_quat=inValue.Cast<  ::phoenix::Quaternion >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_rotation_euler") ) { _rotation_euler=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_transformMatrix") ) { _transformMatrix=inValue.Cast<  ::phoenix::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_rotation_radians") ) { _rotation_radians=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Shape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("active","\xc6","\x41","\x46","\x16"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("tags","\xd9","\xb4","\xf6","\x4c"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("_position","\x08","\x98","\x90","\x12"));
	outFields->push(HX_HCSTRING("_rotation","\x9d","\x34","\x1c","\x50"));
	outFields->push(HX_HCSTRING("_rotation_radians","\x90","\x39","\x26","\x94"));
	outFields->push(HX_HCSTRING("_rotation_quat","\xf9","\x46","\x4a","\x1d"));
	outFields->push(HX_HCSTRING("_rotation_euler","\x07","\x29","\xed","\x9a"));
	outFields->push(HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74"));
	outFields->push(HX_HCSTRING("_scaleX","\x2d","\xfc","\x9c","\xaa"));
	outFields->push(HX_HCSTRING("_scaleY","\x2e","\xfc","\x9c","\xaa"));
	outFields->push(HX_HCSTRING("_transformed","\xcc","\x66","\xd4","\x98"));
	outFields->push(HX_HCSTRING("_transformMatrix","\x4e","\xf3","\xfc","\xe1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Shape_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Shape_obj,active),HX_HCSTRING("active","\xc6","\x41","\x46","\x16")},
	{hx::fsString,(int)offsetof(Shape_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Shape_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Shape_obj,tags),HX_HCSTRING("tags","\xd9","\xb4","\xf6","\x4c")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Shape_obj,_position),HX_HCSTRING("_position","\x08","\x98","\x90","\x12")},
	{hx::fsFloat,(int)offsetof(Shape_obj,_rotation),HX_HCSTRING("_rotation","\x9d","\x34","\x1c","\x50")},
	{hx::fsFloat,(int)offsetof(Shape_obj,_rotation_radians),HX_HCSTRING("_rotation_radians","\x90","\x39","\x26","\x94")},
	{hx::fsObject /*::phoenix::Quaternion*/ ,(int)offsetof(Shape_obj,_rotation_quat),HX_HCSTRING("_rotation_quat","\xf9","\x46","\x4a","\x1d")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Shape_obj,_rotation_euler),HX_HCSTRING("_rotation_euler","\x07","\x29","\xed","\x9a")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Shape_obj,_scale),HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74")},
	{hx::fsFloat,(int)offsetof(Shape_obj,_scaleX),HX_HCSTRING("_scaleX","\x2d","\xfc","\x9c","\xaa")},
	{hx::fsFloat,(int)offsetof(Shape_obj,_scaleY),HX_HCSTRING("_scaleY","\x2e","\xfc","\x9c","\xaa")},
	{hx::fsBool,(int)offsetof(Shape_obj,_transformed),HX_HCSTRING("_transformed","\xcc","\x66","\xd4","\x98")},
	{hx::fsObject /*::phoenix::Matrix*/ ,(int)offsetof(Shape_obj,_transformMatrix),HX_HCSTRING("_transformMatrix","\x4e","\xf3","\xfc","\xe1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Shape_obj_sStaticStorageInfo = 0;
#endif

static ::String Shape_obj_sMemberFields[] = {
	HX_HCSTRING("active","\xc6","\x41","\x46","\x16"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("tags","\xd9","\xb4","\xf6","\x4c"),
	HX_HCSTRING("_position","\x08","\x98","\x90","\x12"),
	HX_HCSTRING("_rotation","\x9d","\x34","\x1c","\x50"),
	HX_HCSTRING("_rotation_radians","\x90","\x39","\x26","\x94"),
	HX_HCSTRING("_rotation_quat","\xf9","\x46","\x4a","\x1d"),
	HX_HCSTRING("_rotation_euler","\x07","\x29","\xed","\x9a"),
	HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74"),
	HX_HCSTRING("_scaleX","\x2d","\xfc","\x9c","\xaa"),
	HX_HCSTRING("_scaleY","\x2e","\xfc","\x9c","\xaa"),
	HX_HCSTRING("_transformed","\xcc","\x66","\xd4","\x98"),
	HX_HCSTRING("_transformMatrix","\x4e","\xf3","\xfc","\xe1"),
	HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c"),
	HX_HCSTRING("testCircle","\x02","\xb8","\x01","\x6f"),
	HX_HCSTRING("testPolygon","\x48","\xf0","\x59","\xcf"),
	HX_HCSTRING("testRay","\xb8","\x44","\xc5","\xbd"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("refresh_transform","\xc8","\x82","\x85","\xfd"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_rotation","\x47","\xf1","\x9f","\xbd"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("get_scaleX","\x57","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleX","\xcb","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scaleY","\x58","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleY","\xcc","\xf8","\x2a","\x30"),
	HX_HCSTRING("_pos_changed","\x0a","\xca","\x99","\xf0"),
	::String(null()) };

static void Shape_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shape_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shape_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shape_obj::__mClass,"__mClass");
};

#endif

hx::Class Shape_obj::__mClass;

void Shape_obj::__register()
{
	hx::Object *dummy = new Shape_obj;
	Shape_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.collision.shapes.Shape","\xf9","\x0a","\xc4","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Shape_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Shape_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Shape_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shape_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shape_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace collision
} // end namespace shapes
