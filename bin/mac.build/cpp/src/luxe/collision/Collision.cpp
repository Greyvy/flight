// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_collision_Collision
#include <luxe/collision/Collision.h>
#endif
#ifndef INCLUDED_luxe_collision_Results_luxe_collision_data_RayCollision
#include <luxe/collision/Results_luxe_collision_data_RayCollision.h>
#endif
#ifndef INCLUDED_luxe_collision_Results_luxe_collision_data_RayIntersection
#include <luxe/collision/Results_luxe_collision_data_RayIntersection.h>
#endif
#ifndef INCLUDED_luxe_collision_Results_luxe_collision_data_ShapeCollision
#include <luxe/collision/Results_luxe_collision_data_ShapeCollision.h>
#endif
#ifndef INCLUDED_luxe_collision_data_RayCollision
#include <luxe/collision/data/RayCollision.h>
#endif
#ifndef INCLUDED_luxe_collision_data_RayIntersection
#include <luxe/collision/data/RayIntersection.h>
#endif
#ifndef INCLUDED_luxe_collision_data_ShapeCollision
#include <luxe/collision/data/ShapeCollision.h>
#endif
#ifndef INCLUDED_luxe_collision_sat_SAT2D
#include <luxe/collision/sat/SAT2D.h>
#endif
#ifndef INCLUDED_luxe_collision_shapes_Polygon
#include <luxe/collision/shapes/Polygon.h>
#endif
#ifndef INCLUDED_luxe_collision_shapes_Ray
#include <luxe/collision/shapes/Ray.h>
#endif
#ifndef INCLUDED_luxe_collision_shapes_Shape
#include <luxe/collision/shapes/Shape.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bf7c39fe74a86f35_15_shapeWithShape,"luxe.collision.Collision","shapeWithShape",0x6c3341aa,"luxe.collision.Collision.shapeWithShape","luxe/collision/Collision.hx",15,0x1f361322)
HX_LOCAL_STACK_FRAME(_hx_pos_bf7c39fe74a86f35_23_shapeWithShapes,"luxe.collision.Collision","shapeWithShapes",0x40a63389,"luxe.collision.Collision.shapeWithShapes","luxe/collision/Collision.hx",23,0x1f361322)
HX_LOCAL_STACK_FRAME(_hx_pos_bf7c39fe74a86f35_51_rayWithShape,"luxe.collision.Collision","rayWithShape",0xc26619c1,"luxe.collision.Collision.rayWithShape","luxe/collision/Collision.hx",51,0x1f361322)
HX_LOCAL_STACK_FRAME(_hx_pos_bf7c39fe74a86f35_59_rayWithShapes,"luxe.collision.Collision","rayWithShapes",0x56f06f92,"luxe.collision.Collision.rayWithShapes","luxe/collision/Collision.hx",59,0x1f361322)
HX_LOCAL_STACK_FRAME(_hx_pos_bf7c39fe74a86f35_85_rayWithRay,"luxe.collision.Collision","rayWithRay",0x22f7248a,"luxe.collision.Collision.rayWithRay","luxe/collision/Collision.hx",85,0x1f361322)
HX_LOCAL_STACK_FRAME(_hx_pos_bf7c39fe74a86f35_93_rayWithRays,"luxe.collision.Collision","rayWithRays",0x7548d4a9,"luxe.collision.Collision.rayWithRays","luxe/collision/Collision.hx",93,0x1f361322)
HX_LOCAL_STACK_FRAME(_hx_pos_bf7c39fe74a86f35_116_pointInPoly,"luxe.collision.Collision","pointInPoly",0xf7437571,"luxe.collision.Collision.pointInPoly","luxe/collision/Collision.hx",116,0x1f361322)
namespace luxe{
namespace collision{

void Collision_obj::__construct() { }

Dynamic Collision_obj::__CreateEmpty() { return new Collision_obj; }

void *Collision_obj::_hx_vtable = 0;

Dynamic Collision_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Collision_obj > _hx_result = new Collision_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Collision_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b213582;
}

 ::luxe::collision::data::ShapeCollision Collision_obj::shapeWithShape( ::luxe::collision::shapes::Shape shape1, ::luxe::collision::shapes::Shape shape2, ::luxe::collision::data::ShapeCollision into){
            	HX_STACKFRAME(&_hx_pos_bf7c39fe74a86f35_15_shapeWithShape)
HXDLIN(  15)		return shape1->test(shape2,into);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Collision_obj,shapeWithShape,return )

 ::luxe::collision::Results_luxe_collision_data_ShapeCollision Collision_obj::shapeWithShapes( ::luxe::collision::shapes::Shape shape1,::Array< ::Dynamic> shapes, ::luxe::collision::Results_luxe_collision_data_ShapeCollision into){
            	HX_GC_STACKFRAME(&_hx_pos_bf7c39fe74a86f35_23_shapeWithShapes)
HXLINE(  25)		 ::luxe::collision::Results_luxe_collision_data_ShapeCollision results;
HXLINE(  26)		if (hx::IsNotNull( into )) {
HXLINE(  27)			into->count = (int)0;
HXLINE(  25)			results = into;
            		}
            		else {
HXLINE(  25)			results =  ::luxe::collision::Results_luxe_collision_data_ShapeCollision_obj::__alloc( HX_CTX ,shapes->length);
            		}
HXLINE(  32)		{
HXLINE(  32)			int _g = (int)0;
HXDLIN(  32)			while((_g < shapes->length)){
HXLINE(  32)				 ::luxe::collision::shapes::Shape other_shape = shapes->__get(_g).StaticCast<  ::luxe::collision::shapes::Shape >();
HXDLIN(  32)				_g = (_g + (int)1);
HXLINE(  34)				if ((results->items->length == results->count)) {
HXLINE(  34)					::Array< ::Dynamic> results1 = results->items;
HXDLIN(  34)					results1->push( ::luxe::collision::data::ShapeCollision_obj::__alloc( HX_CTX ));
            				}
HXDLIN(  34)				 ::luxe::collision::data::ShapeCollision value = results->items->__get(results->count).StaticCast<  ::luxe::collision::data::ShapeCollision >();
HXLINE(  35)				 ::luxe::collision::data::ShapeCollision result = shape1->test(other_shape,value);
HXLINE(  36)				if (hx::IsNotNull( result )) {
HXLINE(  37)					results->items[results->count] = result;
HXDLIN(  37)					results->count++;
            				}
            			}
            		}
HXLINE(  42)		return results;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Collision_obj,shapeWithShapes,return )

 ::luxe::collision::data::RayCollision Collision_obj::rayWithShape( ::luxe::collision::shapes::Ray ray, ::luxe::collision::shapes::Shape shape, ::luxe::collision::data::RayCollision into){
            	HX_STACKFRAME(&_hx_pos_bf7c39fe74a86f35_51_rayWithShape)
HXDLIN(  51)		return shape->testRay(ray,into);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Collision_obj,rayWithShape,return )

 ::luxe::collision::Results_luxe_collision_data_RayCollision Collision_obj::rayWithShapes( ::luxe::collision::shapes::Ray ray,::Array< ::Dynamic> shapes, ::luxe::collision::Results_luxe_collision_data_RayCollision into){
            	HX_GC_STACKFRAME(&_hx_pos_bf7c39fe74a86f35_59_rayWithShapes)
HXLINE(  61)		 ::luxe::collision::Results_luxe_collision_data_RayCollision results;
HXLINE(  62)		if (hx::IsNotNull( into )) {
HXLINE(  63)			into->count = (int)0;
HXLINE(  61)			results = into;
            		}
            		else {
HXLINE(  61)			results =  ::luxe::collision::Results_luxe_collision_data_RayCollision_obj::__alloc( HX_CTX ,shapes->length);
            		}
HXLINE(  68)		{
HXLINE(  68)			int _g = (int)0;
HXDLIN(  68)			while((_g < shapes->length)){
HXLINE(  68)				 ::luxe::collision::shapes::Shape shape = shapes->__get(_g).StaticCast<  ::luxe::collision::shapes::Shape >();
HXDLIN(  68)				_g = (_g + (int)1);
HXLINE(  69)				if ((results->items->length == results->count)) {
HXLINE(  69)					::Array< ::Dynamic> results1 = results->items;
HXDLIN(  69)					results1->push( ::luxe::collision::data::RayCollision_obj::__alloc( HX_CTX ));
            				}
HXDLIN(  69)				 ::luxe::collision::data::RayCollision value = results->items->__get(results->count).StaticCast<  ::luxe::collision::data::RayCollision >();
HXLINE(  70)				 ::luxe::collision::data::RayCollision result = shape->testRay(ray,value);
HXLINE(  71)				if (hx::IsNotNull( result )) {
HXLINE(  72)					results->items[results->count] = result;
HXDLIN(  72)					results->count++;
            				}
            			}
            		}
HXLINE(  76)		return results;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Collision_obj,rayWithShapes,return )

 ::luxe::collision::data::RayIntersection Collision_obj::rayWithRay( ::luxe::collision::shapes::Ray ray1, ::luxe::collision::shapes::Ray ray2, ::luxe::collision::data::RayIntersection into){
            	HX_STACKFRAME(&_hx_pos_bf7c39fe74a86f35_85_rayWithRay)
HXDLIN(  85)		return ::luxe::collision::sat::SAT2D_obj::testRayVsRay(ray1,ray2,into);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Collision_obj,rayWithRay,return )

 ::luxe::collision::Results_luxe_collision_data_RayIntersection Collision_obj::rayWithRays( ::luxe::collision::shapes::Ray ray,::Array< ::Dynamic> rays, ::luxe::collision::Results_luxe_collision_data_RayIntersection into){
            	HX_GC_STACKFRAME(&_hx_pos_bf7c39fe74a86f35_93_rayWithRays)
HXLINE(  95)		 ::luxe::collision::Results_luxe_collision_data_RayIntersection results;
HXLINE(  96)		if (hx::IsNotNull( into )) {
HXLINE(  97)			into->count = (int)0;
HXLINE(  95)			results = into;
            		}
            		else {
HXLINE(  95)			results =  ::luxe::collision::Results_luxe_collision_data_RayIntersection_obj::__alloc( HX_CTX ,rays->length);
            		}
HXLINE( 102)		{
HXLINE( 102)			int _g = (int)0;
HXDLIN( 102)			while((_g < rays->length)){
HXLINE( 102)				 ::luxe::collision::shapes::Ray other = rays->__get(_g).StaticCast<  ::luxe::collision::shapes::Ray >();
HXDLIN( 102)				_g = (_g + (int)1);
HXLINE( 103)				if ((results->items->length == results->count)) {
HXLINE( 103)					::Array< ::Dynamic> results1 = results->items;
HXDLIN( 103)					results1->push( ::luxe::collision::data::RayIntersection_obj::__alloc( HX_CTX ));
            				}
HXDLIN( 103)				 ::luxe::collision::data::RayIntersection value = results->items->__get(results->count).StaticCast<  ::luxe::collision::data::RayIntersection >();
HXLINE( 104)				 ::luxe::collision::data::RayIntersection result = ::luxe::collision::sat::SAT2D_obj::testRayVsRay(ray,other,value);
HXLINE( 105)				if (hx::IsNotNull( result )) {
HXLINE( 106)					results->items[results->count] = result;
HXDLIN( 106)					results->count++;
            				}
            			}
            		}
HXLINE( 110)		return results;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Collision_obj,rayWithRays,return )

bool Collision_obj::pointInPoly(Float x,Float y, ::luxe::collision::shapes::Polygon poly){
            	HX_STACKFRAME(&_hx_pos_bf7c39fe74a86f35_116_pointInPoly)
HXLINE( 118)		int sides = poly->get_transformedVertices()->length;
HXLINE( 119)		::Array< ::Dynamic> verts = poly->get_transformedVertices();
HXLINE( 121)		int i = (int)0;
HXLINE( 122)		int j = (sides - (int)1);
HXLINE( 123)		bool oddNodes = false;
HXLINE( 125)		{
HXLINE( 125)			int _g1 = (int)0;
HXDLIN( 125)			int _g = sides;
HXDLIN( 125)			while((_g1 < _g)){
HXLINE( 125)				_g1 = (_g1 + (int)1);
HXDLIN( 125)				int i1 = (_g1 - (int)1);
HXLINE( 127)				bool _hx_tmp;
HXDLIN( 127)				bool _hx_tmp1;
HXDLIN( 127)				if ((verts->__get(i1).StaticCast<  ::phoenix::Vector >()->y < y)) {
HXLINE( 127)					_hx_tmp1 = (verts->__get(j).StaticCast<  ::phoenix::Vector >()->y >= y);
            				}
            				else {
HXLINE( 127)					_hx_tmp1 = false;
            				}
HXDLIN( 127)				if (!(_hx_tmp1)) {
HXLINE( 128)					if ((verts->__get(j).StaticCast<  ::phoenix::Vector >()->y < y)) {
HXLINE( 127)						_hx_tmp = (verts->__get(i1).StaticCast<  ::phoenix::Vector >()->y >= y);
            					}
            					else {
HXLINE( 127)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 127)					_hx_tmp = true;
            				}
HXDLIN( 127)				if (_hx_tmp) {
HXLINE( 130)					Float verts1 = verts->__get(i1).StaticCast<  ::phoenix::Vector >()->x;
HXLINE( 131)					Float _hx_tmp2 = (y - verts->__get(i1).StaticCast<  ::phoenix::Vector >()->y);
HXDLIN( 131)					Float _hx_tmp3 = ((Float)_hx_tmp2 / (Float)(verts->__get(j).StaticCast<  ::phoenix::Vector >()->y - verts->__get(i1).StaticCast<  ::phoenix::Vector >()->y));
HXLINE( 130)					if (((verts1 + (_hx_tmp3 * (verts->__get(j).StaticCast<  ::phoenix::Vector >()->x - verts->__get(i1).StaticCast<  ::phoenix::Vector >()->x))) < x)) {
HXLINE( 135)						oddNodes = !(oddNodes);
            					}
            				}
HXLINE( 140)				j = i1;
            			}
            		}
HXLINE( 144)		return oddNodes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Collision_obj,pointInPoly,return )


Collision_obj::Collision_obj()
{
}

bool Collision_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"rayWithRay") ) { outValue = rayWithRay_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"rayWithRays") ) { outValue = rayWithRays_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pointInPoly") ) { outValue = pointInPoly_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rayWithShape") ) { outValue = rayWithShape_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rayWithShapes") ) { outValue = rayWithShapes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shapeWithShape") ) { outValue = shapeWithShape_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"shapeWithShapes") ) { outValue = shapeWithShapes_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Collision_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Collision_obj_sStaticStorageInfo = 0;
#endif

static void Collision_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Collision_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Collision_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Collision_obj::__mClass,"__mClass");
};

#endif

hx::Class Collision_obj::__mClass;

static ::String Collision_obj_sStaticFields[] = {
	HX_HCSTRING("shapeWithShape","\xda","\x57","\x25","\x94"),
	HX_HCSTRING("shapeWithShapes","\x59","\x87","\x87","\x0c"),
	HX_HCSTRING("rayWithShape","\xf1","\x43","\x95","\xa0"),
	HX_HCSTRING("rayWithShapes","\x62","\x2f","\x06","\xe2"),
	HX_HCSTRING("rayWithRay","\xba","\x62","\x36","\xc4"),
	HX_HCSTRING("rayWithRays","\x79","\x00","\x60","\xeb"),
	HX_HCSTRING("pointInPoly","\x41","\xa1","\x5a","\x6d"),
	::String(null())
};

void Collision_obj::__register()
{
	hx::Object *dummy = new Collision_obj;
	Collision_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.collision.Collision","\x9e","\xac","\xe3","\x8f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Collision_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Collision_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Collision_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Collision_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Collision_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Collision_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Collision_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace collision
