// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_collision_ResultsIterator_luxe_collision_data_RayCollision
#include <luxe/collision/ResultsIterator_luxe_collision_data_RayCollision.h>
#endif
#ifndef INCLUDED_luxe_collision_Results_luxe_collision_data_RayCollision
#include <luxe/collision/Results_luxe_collision_data_RayCollision.h>
#endif
#ifndef INCLUDED_luxe_collision_data_RayCollision
#include <luxe/collision/data/RayCollision.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0ddd050d0f408ec9_169_new,"luxe.collision.Results_luxe_collision_data_RayCollision","new",0xaf1be916,"luxe.collision.Results_luxe_collision_data_RayCollision.new","luxe/collision/Collision.hx",169,0x1f361322)
HX_LOCAL_STACK_FRAME(_hx_pos_0ddd050d0f408ec9_188_push,"luxe.collision.Results_luxe_collision_data_RayCollision","push",0x8aae9864,"luxe.collision.Results_luxe_collision_data_RayCollision.push","luxe/collision/Collision.hx",188,0x1f361322)
HX_LOCAL_STACK_FRAME(_hx_pos_0ddd050d0f408ec9_198_get,"luxe.collision.Results_luxe_collision_data_RayCollision","get",0xaf16994c,"luxe.collision.Results_luxe_collision_data_RayCollision.get","luxe/collision/Collision.hx",198,0x1f361322)
HX_LOCAL_STACK_FRAME(_hx_pos_0ddd050d0f408ec9_209_pull,"luxe.collision.Results_luxe_collision_data_RayCollision","pull",0x8aae924f,"luxe.collision.Results_luxe_collision_data_RayCollision.pull","luxe/collision/Collision.hx",209,0x1f361322)
HX_LOCAL_STACK_FRAME(_hx_pos_0ddd050d0f408ec9_222_clear,"luxe.collision.Results_luxe_collision_data_RayCollision","clear",0x4be3a3c3,"luxe.collision.Results_luxe_collision_data_RayCollision.clear","luxe/collision/Collision.hx",222,0x1f361322)
HX_LOCAL_STACK_FRAME(_hx_pos_0ddd050d0f408ec9_229_iterator,"luxe.collision.Results_luxe_collision_data_RayCollision","iterator",0xa56edd78,"luxe.collision.Results_luxe_collision_data_RayCollision.iterator","luxe/collision/Collision.hx",229,0x1f361322)
HX_LOCAL_STACK_FRAME(_hx_pos_0ddd050d0f408ec9_234_get_length,"luxe.collision.Results_luxe_collision_data_RayCollision","get_length",0x2e570eb9,"luxe.collision.Results_luxe_collision_data_RayCollision.get_length","luxe/collision/Collision.hx",234,0x1f361322)
HX_LOCAL_STACK_FRAME(_hx_pos_0ddd050d0f408ec9_235_get_total,"luxe.collision.Results_luxe_collision_data_RayCollision","get_total",0xe0083551,"luxe.collision.Results_luxe_collision_data_RayCollision.get_total","luxe/collision/Collision.hx",235,0x1f361322)
namespace luxe{
namespace collision{

void Results_luxe_collision_data_RayCollision_obj::__construct(int size){
            	HX_GC_STACKFRAME(&_hx_pos_0ddd050d0f408ec9_169_new)
HXLINE( 179)		this->count = (int)0;
HXLINE( 184)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 184)		{
HXLINE( 184)			int _g2 = (int)0;
HXDLIN( 184)			int _g1 = size;
HXDLIN( 184)			while((_g2 < _g1)){
HXLINE( 184)				_g2 = (_g2 + (int)1);
HXDLIN( 184)				int i = (_g2 - (int)1);
HXDLIN( 184)				_g->push( ::luxe::collision::data::RayCollision_obj::__alloc( HX_CTX ));
            			}
            		}
HXDLIN( 184)		this->items = _g;
            	}

Dynamic Results_luxe_collision_data_RayCollision_obj::__CreateEmpty() { return new Results_luxe_collision_data_RayCollision_obj; }

void *Results_luxe_collision_data_RayCollision_obj::_hx_vtable = 0;

Dynamic Results_luxe_collision_data_RayCollision_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Results_luxe_collision_data_RayCollision_obj > _hx_result = new Results_luxe_collision_data_RayCollision_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Results_luxe_collision_data_RayCollision_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x545d446c;
}

void Results_luxe_collision_data_RayCollision_obj::push( ::luxe::collision::data::RayCollision value){
            	HX_STACKFRAME(&_hx_pos_0ddd050d0f408ec9_188_push)
HXLINE( 190)		this->items[this->count] = value;
HXLINE( 192)		this->count++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Results_luxe_collision_data_RayCollision_obj,push,(void))

 ::luxe::collision::data::RayCollision Results_luxe_collision_data_RayCollision_obj::get(int index){
            	HX_STACKFRAME(&_hx_pos_0ddd050d0f408ec9_198_get)
HXLINE( 200)		bool _hx_tmp;
HXDLIN( 200)		if ((index < (int)0)) {
HXLINE( 200)			_hx_tmp = (index > (this->count - (int)1));
            		}
            		else {
HXLINE( 200)			_hx_tmp = false;
            		}
HXDLIN( 200)		if (_hx_tmp) {
HXLINE( 200)			return null();
            		}
HXLINE( 202)		return this->items->__get(index).StaticCast<  ::luxe::collision::data::RayCollision >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Results_luxe_collision_data_RayCollision_obj,get,return )

 ::luxe::collision::data::RayCollision Results_luxe_collision_data_RayCollision_obj::pull(){
            	HX_GC_STACKFRAME(&_hx_pos_0ddd050d0f408ec9_209_pull)
HXLINE( 212)		if ((this->items->length == this->count)) {
HXLINE( 212)			::Array< ::Dynamic> _hx_tmp = this->items;
HXDLIN( 212)			_hx_tmp->push( ::luxe::collision::data::RayCollision_obj::__alloc( HX_CTX ));
            		}
HXLINE( 214)		return this->items->__get(this->count).StaticCast<  ::luxe::collision::data::RayCollision >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Results_luxe_collision_data_RayCollision_obj,pull,return )

 ::luxe::collision::Results_luxe_collision_data_RayCollision Results_luxe_collision_data_RayCollision_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_0ddd050d0f408ec9_222_clear)
HXLINE( 223)		this->count = (int)0;
HXLINE( 224)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Results_luxe_collision_data_RayCollision_obj,clear,return )

 ::luxe::collision::ResultsIterator_luxe_collision_data_RayCollision Results_luxe_collision_data_RayCollision_obj::iterator(){
            	HX_GC_STACKFRAME(&_hx_pos_0ddd050d0f408ec9_229_iterator)
HXDLIN( 229)		return  ::luxe::collision::ResultsIterator_luxe_collision_data_RayCollision_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Results_luxe_collision_data_RayCollision_obj,iterator,return )

int Results_luxe_collision_data_RayCollision_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_0ddd050d0f408ec9_234_get_length)
HXDLIN( 234)		return this->count;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Results_luxe_collision_data_RayCollision_obj,get_length,return )

int Results_luxe_collision_data_RayCollision_obj::get_total(){
            	HX_STACKFRAME(&_hx_pos_0ddd050d0f408ec9_235_get_total)
HXDLIN( 235)		return this->items->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Results_luxe_collision_data_RayCollision_obj,get_total,return )


hx::ObjectPtr< Results_luxe_collision_data_RayCollision_obj > Results_luxe_collision_data_RayCollision_obj::__new(int size) {
	hx::ObjectPtr< Results_luxe_collision_data_RayCollision_obj > __this = new Results_luxe_collision_data_RayCollision_obj();
	__this->__construct(size);
	return __this;
}

hx::ObjectPtr< Results_luxe_collision_data_RayCollision_obj > Results_luxe_collision_data_RayCollision_obj::__alloc(hx::Ctx *_hx_ctx,int size) {
	Results_luxe_collision_data_RayCollision_obj *__this = (Results_luxe_collision_data_RayCollision_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Results_luxe_collision_data_RayCollision_obj), true, "luxe.collision.Results_luxe_collision_data_RayCollision"));
	*(void **)__this = Results_luxe_collision_data_RayCollision_obj::_hx_vtable;
	__this->__construct(size);
	return __this;
}

Results_luxe_collision_data_RayCollision_obj::Results_luxe_collision_data_RayCollision_obj()
{
}

void Results_luxe_collision_data_RayCollision_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Results_luxe_collision_data_RayCollision);
	HX_MARK_MEMBER_NAME(items,"items");
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_END_CLASS();
}

void Results_luxe_collision_data_RayCollision_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(items,"items");
	HX_VISIT_MEMBER_NAME(count,"count");
}

hx::Val Results_luxe_collision_data_RayCollision_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn() ); }
		if (HX_FIELD_EQ(inName,"pull") ) { return hx::Val( pull_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"total") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_total() ); }
		if (HX_FIELD_EQ(inName,"items") ) { return hx::Val( items ); }
		if (HX_FIELD_EQ(inName,"count") ) { return hx::Val( count ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_total") ) { return hx::Val( get_total_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Results_luxe_collision_data_RayCollision_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"items") ) { items=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Results_luxe_collision_data_RayCollision_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("total","\xc4","\x53","\x32","\x14"));
	outFields->push(HX_HCSTRING("items","\x00","\xac","\x0c","\xc2"));
	outFields->push(HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Results_luxe_collision_data_RayCollision_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Results_luxe_collision_data_RayCollision_obj,items),HX_HCSTRING("items","\x00","\xac","\x0c","\xc2")},
	{hx::fsInt,(int)offsetof(Results_luxe_collision_data_RayCollision_obj,count),HX_HCSTRING("count","\xcf","\x44","\x63","\x4a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Results_luxe_collision_data_RayCollision_obj_sStaticStorageInfo = 0;
#endif

static ::String Results_luxe_collision_data_RayCollision_obj_sMemberFields[] = {
	HX_HCSTRING("items","\x00","\xac","\x0c","\xc2"),
	HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("pull","\xc5","\x0b","\x61","\x4a"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_total","\x1b","\xb0","\xdb","\x57"),
	::String(null()) };

static void Results_luxe_collision_data_RayCollision_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Results_luxe_collision_data_RayCollision_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Results_luxe_collision_data_RayCollision_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Results_luxe_collision_data_RayCollision_obj::__mClass,"__mClass");
};

#endif

hx::Class Results_luxe_collision_data_RayCollision_obj::__mClass;

void Results_luxe_collision_data_RayCollision_obj::__register()
{
	hx::Object *dummy = new Results_luxe_collision_data_RayCollision_obj;
	Results_luxe_collision_data_RayCollision_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.collision.Results_luxe_collision_data_RayCollision","\x24","\x66","\xc8","\xf2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Results_luxe_collision_data_RayCollision_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Results_luxe_collision_data_RayCollision_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Results_luxe_collision_data_RayCollision_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Results_luxe_collision_data_RayCollision_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Results_luxe_collision_data_RayCollision_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Results_luxe_collision_data_RayCollision_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace collision
