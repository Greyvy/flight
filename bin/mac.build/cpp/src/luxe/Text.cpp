// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Text
#include <luxe/Text.h>
#endif
#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_phoenix_Batcher
#include <phoenix/Batcher.h>
#endif
#ifndef INCLUDED_phoenix_BitmapFont
#include <phoenix/BitmapFont.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_Shader
#include <phoenix/Shader.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_GeometryState
#include <phoenix/geometry/GeometryState.h>
#endif
#ifndef INCLUDED_phoenix_geometry_TextGeometry
#include <phoenix/geometry/TextGeometry.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_966fca1201536e22_83_new,"luxe.Text","new",0xb745fff7,"luxe.Text.new","luxe/Text.hx",83,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_22_get_text,"luxe.Text","get_text",0xce5b753f,"luxe.Text.get_text","luxe/Text.hx",22,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_23_set_text,"luxe.Text","set_text",0x7cb8ceb3,"luxe.Text.set_text","luxe/Text.hx",23,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_25_get_font,"luxe.Text","get_font",0xc5220661,"luxe.Text.get_font","luxe/Text.hx",25,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_26_set_font,"luxe.Text","set_font",0x737f5fd5,"luxe.Text.set_font","luxe/Text.hx",26,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_28_get_point_size,"luxe.Text","get_point_size",0x5942c862,"luxe.Text.get_point_size","luxe/Text.hx",28,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_29_set_point_size,"luxe.Text","set_point_size",0x7962b0d6,"luxe.Text.set_point_size","luxe/Text.hx",29,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_31_get_letter_spacing,"luxe.Text","get_letter_spacing",0x47c962fc,"luxe.Text.get_letter_spacing","luxe/Text.hx",31,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_32_set_letter_spacing,"luxe.Text","set_letter_spacing",0x24789570,"luxe.Text.set_letter_spacing","luxe/Text.hx",32,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_34_get_line_spacing,"luxe.Text","get_line_spacing",0x41a5438a,"luxe.Text.get_line_spacing","luxe/Text.hx",34,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_35_set_line_spacing,"luxe.Text","set_line_spacing",0x97e730fe,"luxe.Text.set_line_spacing","luxe/Text.hx",35,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_38_get_bounds,"luxe.Text","get_bounds",0x41a7f787,"luxe.Text.get_bounds","luxe/Text.hx",38,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_39_set_bounds,"luxe.Text","set_bounds",0x452595fb,"luxe.Text.set_bounds","luxe/Text.hx",39,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_41_get_bounds_wrap,"luxe.Text","get_bounds_wrap",0x8356b4c2,"luxe.Text.get_bounds_wrap","luxe/Text.hx",41,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_42_set_bounds_wrap,"luxe.Text","set_bounds_wrap",0x7f2231ce,"luxe.Text.set_bounds_wrap","luxe/Text.hx",42,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_45_get_align,"luxe.Text","get_align",0xd5a32df3,"luxe.Text.get_align","luxe/Text.hx",45,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_46_set_align,"luxe.Text","set_align",0xb8f419ff,"luxe.Text.set_align","luxe/Text.hx",46,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_48_get_align_vertical,"luxe.Text","get_align_vertical",0x2d6aaf82,"luxe.Text.get_align_vertical","luxe/Text.hx",48,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_49_set_align_vertical,"luxe.Text","set_align_vertical",0x0a19e1f6,"luxe.Text.set_align_vertical","luxe/Text.hx",49,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_54_get_sdf,"luxe.Text","get_sdf",0x0583aa63,"luxe.Text.get_sdf","luxe/Text.hx",54,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_55_set_sdf,"luxe.Text","set_sdf",0xf8853b6f,"luxe.Text.set_sdf","luxe/Text.hx",55,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_58_get_smoothness,"luxe.Text","get_smoothness",0xa04d99d7,"luxe.Text.get_smoothness","luxe/Text.hx",58,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_59_set_smoothness,"luxe.Text","set_smoothness",0xc06d824b,"luxe.Text.set_smoothness","luxe/Text.hx",59,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_61_get_thickness,"luxe.Text","get_thickness",0x8e1ef7a2,"luxe.Text.get_thickness","luxe/Text.hx",61,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_62_set_thickness,"luxe.Text","set_thickness",0xd324d9ae,"luxe.Text.set_thickness","luxe/Text.hx",62,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_65_get_outline,"luxe.Text","get_outline",0x1f569630,"luxe.Text.get_outline","luxe/Text.hx",65,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_66_set_outline,"luxe.Text","set_outline",0x29c39d3c,"luxe.Text.set_outline","luxe/Text.hx",66,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_68_get_outline_color,"luxe.Text","get_outline_color",0xe9b512d4,"luxe.Text.get_outline_color","luxe/Text.hx",68,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_69_set_outline_color,"luxe.Text","set_outline_color",0x0d22eae0,"luxe.Text.set_outline_color","luxe/Text.hx",69,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_72_get_glow_threshold,"luxe.Text","get_glow_threshold",0x9478f34b,"luxe.Text.get_glow_threshold","luxe/Text.hx",72,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_73_set_glow_threshold,"luxe.Text","set_glow_threshold",0x712825bf,"luxe.Text.set_glow_threshold","luxe/Text.hx",73,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_75_get_glow_amount,"luxe.Text","get_glow_amount",0xdfe9de38,"luxe.Text.get_glow_amount","luxe/Text.hx",75,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_76_set_glow_amount,"luxe.Text","set_glow_amount",0xdbb55b44,"luxe.Text.set_glow_amount","luxe/Text.hx",76,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_78_get_glow_color,"luxe.Text","get_glow_color",0xd0b95103,"luxe.Text.get_glow_color","luxe/Text.hx",78,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_79_set_glow_color,"luxe.Text","set_glow_color",0xf0d93977,"luxe.Text.set_glow_color","luxe/Text.hx",79,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_154_point_inside,"luxe.Text","point_inside",0x10666cd4,"luxe.Text.point_inside","luxe/Text.hx",154,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_163_set_pos_from_transform,"luxe.Text","set_pos_from_transform",0x4f488928,"luxe.Text.set_pos_from_transform","luxe/Text.hx",163,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_179_on_geom_text_update,"luxe.Text","on_geom_text_update",0x5de0a94f,"luxe.Text.on_geom_text_update","luxe/Text.hx",179,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_183__update_bounds,"luxe.Text","_update_bounds",0xa85b9f35,"luxe.Text._update_bounds","luxe/Text.hx",183,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_966fca1201536e22_231_ondestroy,"luxe.Text","ondestroy",0x9f483892,"luxe.Text.ondestroy","luxe/Text.hx",231,0xeacedd78)
HX_LOCAL_STACK_FRAME(_hx_pos_cb12dcd1f65d1496_35_init,"luxe.Text","init",0xa2b2af99,"luxe.Text.init","luxe/macros/EntityRules.hx",35,0xed942299)
namespace luxe{

void Text_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_966fca1201536e22_83_new)
HXLINE(  86)		this->text_options = _options;
HXLINE(  87)		this->text_bounds =  ::phoenix::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  89)		 ::phoenix::Batcher _batcher = null();
HXLINE(  90)		bool _hx_tmp;
HXDLIN(  90)		if (hx::IsNotNull( _options->__Field(HX_("no_batcher_add",0b,25,c3,59),hx::paccDynamic) )) {
HXLINE(  90)			_hx_tmp = hx::IsEq( _options->__Field(HX_("no_batcher_add",0b,25,c3,59),hx::paccDynamic),false );
            		}
            		else {
HXLINE(  90)			_hx_tmp = true;
            		}
HXDLIN(  90)		if (_hx_tmp) {
HXLINE(  91)			if (hx::IsNotNull( ( ( ::phoenix::Batcher)(_options->__Field(HX_("batcher",a7,22,10,c0),hx::paccDynamic)) ) )) {
HXLINE(  92)				_batcher = ( ( ::phoenix::Batcher)(_options->__Field(HX_("batcher",a7,22,10,c0),hx::paccDynamic)) );
            			}
            			else {
HXLINE(  94)				_batcher = ::Luxe_obj::renderer->batcher;
            			}
            		}
HXLINE(  99)		this->geom =  ::phoenix::geometry::TextGeometry_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(24)
            			->setFixed(0,HX_("smoothness",c5,37,00,93), ::Dynamic(_options->__Field(HX_("smoothness",c5,37,00,93),hx::paccDynamic)))
            			->setFixed(1,HX_("outline_color",a6,5d,13,96), ::Dynamic(_options->__Field(HX_("outline_color",a6,5d,13,96),hx::paccDynamic)))
            			->setFixed(2,HX_("texture",db,c8,e0,9e), ::Dynamic(_options->__Field(HX_("texture",db,c8,e0,9e),hx::paccDynamic)))
            			->setFixed(3,HX_("visible",72,78,24,a3), ::Dynamic(_options->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)))
            			->setFixed(4,HX_("glow_threshold",39,20,9c,ba), ::Dynamic(_options->__Field(HX_("glow_threshold",39,20,9c,ba),hx::paccDynamic)))
            			->setFixed(5,HX_("batcher",a7,22,10,c0),_batcher)
            			->setFixed(6,HX_("glow_color",f1,ee,6b,c3), ::Dynamic(_options->__Field(HX_("glow_color",f1,ee,6b,c3),hx::paccDynamic)))
            			->setFixed(7,HX_("immediate",f1,13,f1,cf), ::Dynamic(_options->__Field(HX_("immediate",f1,13,f1,cf),hx::paccDynamic)))
            			->setFixed(8,HX_("depth",03,f1,29,d7), ::Dynamic(_options->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic)))
            			->setFixed(9,HX_("outline",82,17,be,e1), ::Dynamic(_options->__Field(HX_("outline",82,17,be,e1),hx::paccDynamic)))
            			->setFixed(10,HX_("bounds_wrap",14,47,ee,ec), ::Dynamic(_options->__Field(HX_("bounds_wrap",14,47,ee,ec),hx::paccDynamic)))
            			->setFixed(11,HX_("sdf",b5,9a,57,00), ::Dynamic(_options->__Field(HX_("sdf",b5,9a,57,00),hx::paccDynamic)))
            			->setFixed(12,HX_("shader",25,bf,20,1d), ::Dynamic(_options->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)))
            			->setFixed(13,HX_("align",c5,56,91,21), ::Dynamic(_options->__Field(HX_("align",c5,56,91,21),hx::paccDynamic)))
            			->setFixed(14,HX_("line_spacing",f8,b8,ad,3c), ::Dynamic(_options->__Field(HX_("line_spacing",f8,b8,ad,3c),hx::paccDynamic)))
            			->setFixed(15,HX_("font",cf,5d,c0,43), ::Dynamic(_options->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)))
            			->setFixed(16,HX_("glow_amount",8a,70,81,49), ::Dynamic(_options->__Field(HX_("glow_amount",8a,70,81,49),hx::paccDynamic)))
            			->setFixed(17,HX_("color",63,71,5c,4a), ::Dynamic(_options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)))
            			->setFixed(18,HX_("point_size",50,66,f5,4b), ::Dynamic(_options->__Field(HX_("point_size",50,66,f5,4b),hx::paccDynamic)))
            			->setFixed(19,HX_("text",ad,cc,f9,4c), ::Dynamic(_options->__Field(HX_("text",ad,cc,f9,4c),hx::paccDynamic)))
            			->setFixed(20,HX_("align_vertical",70,dc,8d,53), ::Dynamic(_options->__Field(HX_("align_vertical",70,dc,8d,53),hx::paccDynamic)))
            			->setFixed(21,HX_("thickness",74,f1,66,5a), ::Dynamic(_options->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic)))
            			->setFixed(22,HX_("bounds",75,86,1d,66), ::Dynamic(_options->__Field(HX_("bounds",75,86,1d,66),hx::paccDynamic)))
            			->setFixed(23,HX_("letter_spacing",ea,8f,ec,6d), ::Dynamic(_options->__Field(HX_("letter_spacing",ea,8f,ec,6d),hx::paccDynamic)))));
HXLINE( 140)		this->geom->emitter->on((int)1,this->on_geom_text_update_dyn());
HXLINE( 142)		_options->__SetField(HX_("geometry",b2,02,a9,d2),this->geom,hx::paccDynamic);
HXLINE( 143)		_options->__SetField(HX_("shader",25,bf,20,1d),this->geom->state->shader,hx::paccDynamic);
HXLINE( 146)		super::__construct(_options);
HXLINE( 148)		{
HXLINE( 148)			Float _x = this->get_pos()->x;
HXDLIN( 148)			Float _y = this->get_pos()->y;
HXDLIN( 148)			Float _tw = this->geom->text_width;
HXDLIN( 148)			Float _th = this->geom->text_height;
HXDLIN( 148)			Float _bw = this->geom->text_width;
HXDLIN( 148)			Float _bh = this->geom->text_height;
HXDLIN( 148)			if (hx::IsNotNull( this->get_bounds() )) {
HXLINE( 148)				_bh = this->get_bounds()->h;
HXDLIN( 148)				_bw = this->get_bounds()->w;
HXDLIN( 148)				_x = this->get_bounds()->x;
HXDLIN( 148)				_y = this->get_bounds()->y;
HXDLIN( 148)				int _g1 = this->get_align();
HXDLIN( 148)				Float _x1;
HXDLIN( 148)				switch((int)(_g1)){
            					case (int)1: {
HXLINE( 148)						_x1 = _tw;
            					}
            					break;
            					case (int)2: {
HXLINE( 148)						_x1 = ((Float)_tw / (Float)(int)2);
            					}
            					break;
            					default:{
HXLINE( 148)						_x1 = ((Float)0.0);
            					}
            				}
HXDLIN( 148)				_x = (_x + _x1);
HXDLIN( 148)				int _g11 = this->get_align_vertical();
HXDLIN( 148)				Float _y1;
HXDLIN( 148)				switch((int)(_g11)){
            					case (int)2: {
HXLINE( 148)						_y1 = (((Float)_bh / (Float)(int)2) - ((Float)_th / (Float)(int)2));
            					}
            					break;
            					case (int)4: {
HXLINE( 148)						_y1 = (_bh - _th);
            					}
            					break;
            					default:{
HXLINE( 148)						_y1 = ((Float)0.0);
            					}
            				}
HXDLIN( 148)				_y = (_y + _y1);
            			}
            			else {
HXLINE( 148)				int _g12 = this->get_align();
HXDLIN( 148)				Float _x2;
HXDLIN( 148)				switch((int)(_g12)){
            					case (int)1: {
HXLINE( 148)						_x2 = _tw;
            					}
            					break;
            					case (int)2: {
HXLINE( 148)						_x2 = ((Float)_tw / (Float)(int)2);
            					}
            					break;
            					default:{
HXLINE( 148)						_x2 = ((Float)0.0);
            					}
            				}
HXDLIN( 148)				_x = (_x - _x2);
HXDLIN( 148)				int _g13 = this->get_align_vertical();
HXDLIN( 148)				Float _y2;
HXDLIN( 148)				switch((int)(_g13)){
            					case (int)2: {
HXLINE( 148)						_y2 = ((Float)_th / (Float)(int)2);
            					}
            					break;
            					case (int)4: {
HXLINE( 148)						_y2 = _th;
            					}
            					break;
            					default:{
HXLINE( 148)						_y2 = ((Float)0.0);
            					}
            				}
HXDLIN( 148)				_y = (_y - _y2);
            			}
HXDLIN( 148)			this->text_bounds->set(_x,_y,_tw,_th);
            		}
            	}

Dynamic Text_obj::__CreateEmpty() { return new Text_obj; }

void *Text_obj::_hx_vtable = 0;

Dynamic Text_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Text_obj > _hx_result = new Text_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Text_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0bbca018) {
		if (inClassId<=(int)0x099ca90a) {
			if (inClassId<=(int)0x025d481e) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x025d481e;
			} else {
				return inClassId==(int)0x099ca90a;
			}
		} else {
			return inClassId==(int)0x0bbca018;
		}
	} else {
		return inClassId==(int)0x17ed3881 || inClassId==(int)0x3ae43e8b;
	}
}

::String Text_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_22_get_text)
HXDLIN(  22)		return this->geom->text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_text,return )

::String Text_obj::set_text(::String _s){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_23_set_text)
HXDLIN(  23)		return this->geom->set_text(_s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_text,return )

 ::phoenix::BitmapFont Text_obj::get_font(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_25_get_font)
HXDLIN(  25)		return this->geom->font;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_font,return )

 ::phoenix::BitmapFont Text_obj::set_font( ::phoenix::BitmapFont _f){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_26_set_font)
HXDLIN(  26)		return this->geom->set_font(_f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_font,return )

Float Text_obj::get_point_size(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_28_get_point_size)
HXDLIN(  28)		return this->geom->point_size;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_point_size,return )

Float Text_obj::set_point_size(Float _s){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_29_set_point_size)
HXDLIN(  29)		return this->geom->set_point_size(_s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_point_size,return )

Float Text_obj::get_letter_spacing(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_31_get_letter_spacing)
HXDLIN(  31)		return this->geom->letter_spacing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_letter_spacing,return )

Float Text_obj::set_letter_spacing(Float _s){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_32_set_letter_spacing)
HXDLIN(  32)		return this->geom->set_letter_spacing(_s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_letter_spacing,return )

Float Text_obj::get_line_spacing(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_34_get_line_spacing)
HXDLIN(  34)		return this->geom->line_spacing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_line_spacing,return )

Float Text_obj::set_line_spacing(Float _s){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_35_set_line_spacing)
HXDLIN(  35)		return this->geom->set_line_spacing(_s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_line_spacing,return )

 ::phoenix::Rectangle Text_obj::get_bounds(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_38_get_bounds)
HXDLIN(  38)		return this->geom->bounds;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_bounds,return )

 ::phoenix::Rectangle Text_obj::set_bounds( ::phoenix::Rectangle _b){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_39_set_bounds)
HXDLIN(  39)		return this->geom->set_bounds(_b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_bounds,return )

bool Text_obj::get_bounds_wrap(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_41_get_bounds_wrap)
HXDLIN(  41)		return this->geom->bounds_wrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_bounds_wrap,return )

bool Text_obj::set_bounds_wrap(bool _b){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_42_set_bounds_wrap)
HXDLIN(  42)		return this->geom->set_bounds_wrap(_b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_bounds_wrap,return )

int Text_obj::get_align(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_45_get_align)
HXDLIN(  45)		return this->geom->align;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_align,return )

int Text_obj::set_align(int _a){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_46_set_align)
HXDLIN(  46)		return this->geom->set_align(_a);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_align,return )

int Text_obj::get_align_vertical(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_48_get_align_vertical)
HXDLIN(  48)		return this->geom->align_vertical;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_align_vertical,return )

int Text_obj::set_align_vertical(int _a){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_49_set_align_vertical)
HXDLIN(  49)		return this->geom->set_align_vertical(_a);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_align_vertical,return )

bool Text_obj::get_sdf(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_54_get_sdf)
HXDLIN(  54)		return this->geom->sdf;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_sdf,return )

bool Text_obj::set_sdf(bool _s){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_55_set_sdf)
HXDLIN(  55)		return (this->geom->sdf = _s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_sdf,return )

Float Text_obj::get_smoothness(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_58_get_smoothness)
HXDLIN(  58)		return this->geom->smoothness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_smoothness,return )

Float Text_obj::set_smoothness(Float _s){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_59_set_smoothness)
HXDLIN(  59)		return this->geom->set_smoothness(_s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_smoothness,return )

Float Text_obj::get_thickness(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_61_get_thickness)
HXDLIN(  61)		return this->geom->thickness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_thickness,return )

Float Text_obj::set_thickness(Float _t){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_62_set_thickness)
HXDLIN(  62)		return this->geom->set_thickness(_t);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_thickness,return )

Float Text_obj::get_outline(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_65_get_outline)
HXDLIN(  65)		return this->geom->outline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_outline,return )

Float Text_obj::set_outline(Float _o){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_66_set_outline)
HXDLIN(  66)		return this->geom->set_outline(_o);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_outline,return )

 ::phoenix::Color Text_obj::get_outline_color(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_68_get_outline_color)
HXDLIN(  68)		return this->geom->outline_color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_outline_color,return )

 ::phoenix::Color Text_obj::set_outline_color( ::phoenix::Color _c){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_69_set_outline_color)
HXDLIN(  69)		return this->geom->set_outline_color(_c);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_outline_color,return )

Float Text_obj::get_glow_threshold(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_72_get_glow_threshold)
HXDLIN(  72)		return this->geom->glow_threshold;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_glow_threshold,return )

Float Text_obj::set_glow_threshold(Float _s){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_73_set_glow_threshold)
HXDLIN(  73)		return this->geom->set_glow_threshold(_s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_glow_threshold,return )

Float Text_obj::get_glow_amount(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_75_get_glow_amount)
HXDLIN(  75)		return this->geom->glow_amount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_glow_amount,return )

Float Text_obj::set_glow_amount(Float _e){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_76_set_glow_amount)
HXDLIN(  76)		return this->geom->set_glow_amount(_e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_glow_amount,return )

 ::phoenix::Color Text_obj::get_glow_color(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_78_get_glow_color)
HXDLIN(  78)		return this->geom->glow_color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_glow_color,return )

 ::phoenix::Color Text_obj::set_glow_color( ::phoenix::Color _c){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_79_set_glow_color)
HXDLIN(  79)		return this->geom->set_glow_color(_c);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_glow_color,return )

bool Text_obj::point_inside( ::phoenix::Vector p){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_154_point_inside)
HXLINE( 156)		{
HXLINE( 156)			Float _x = this->get_pos()->x;
HXDLIN( 156)			Float _y = this->get_pos()->y;
HXDLIN( 156)			Float _tw = this->geom->text_width;
HXDLIN( 156)			Float _th = this->geom->text_height;
HXDLIN( 156)			Float _bw = this->geom->text_width;
HXDLIN( 156)			Float _bh = this->geom->text_height;
HXDLIN( 156)			if (hx::IsNotNull( this->get_bounds() )) {
HXLINE( 156)				_bh = this->get_bounds()->h;
HXDLIN( 156)				_bw = this->get_bounds()->w;
HXDLIN( 156)				_x = this->get_bounds()->x;
HXDLIN( 156)				_y = this->get_bounds()->y;
HXDLIN( 156)				int _g1 = this->get_align();
HXDLIN( 156)				Float _x1;
HXDLIN( 156)				switch((int)(_g1)){
            					case (int)1: {
HXLINE( 156)						_x1 = _tw;
            					}
            					break;
            					case (int)2: {
HXLINE( 156)						_x1 = ((Float)_tw / (Float)(int)2);
            					}
            					break;
            					default:{
HXLINE( 156)						_x1 = ((Float)0.0);
            					}
            				}
HXDLIN( 156)				_x = (_x + _x1);
HXDLIN( 156)				int _g11 = this->get_align_vertical();
HXDLIN( 156)				Float _y1;
HXDLIN( 156)				switch((int)(_g11)){
            					case (int)2: {
HXLINE( 156)						_y1 = (((Float)_bh / (Float)(int)2) - ((Float)_th / (Float)(int)2));
            					}
            					break;
            					case (int)4: {
HXLINE( 156)						_y1 = (_bh - _th);
            					}
            					break;
            					default:{
HXLINE( 156)						_y1 = ((Float)0.0);
            					}
            				}
HXDLIN( 156)				_y = (_y + _y1);
            			}
            			else {
HXLINE( 156)				int _g12 = this->get_align();
HXDLIN( 156)				Float _x2;
HXDLIN( 156)				switch((int)(_g12)){
            					case (int)1: {
HXLINE( 156)						_x2 = _tw;
            					}
            					break;
            					case (int)2: {
HXLINE( 156)						_x2 = ((Float)_tw / (Float)(int)2);
            					}
            					break;
            					default:{
HXLINE( 156)						_x2 = ((Float)0.0);
            					}
            				}
HXDLIN( 156)				_x = (_x - _x2);
HXDLIN( 156)				int _g13 = this->get_align_vertical();
HXDLIN( 156)				Float _y2;
HXDLIN( 156)				switch((int)(_g13)){
            					case (int)2: {
HXLINE( 156)						_y2 = ((Float)_th / (Float)(int)2);
            					}
            					break;
            					case (int)4: {
HXLINE( 156)						_y2 = _th;
            					}
            					break;
            					default:{
HXLINE( 156)						_y2 = ((Float)0.0);
            					}
            				}
HXDLIN( 156)				_y = (_y - _y2);
            			}
HXDLIN( 156)			this->text_bounds->set(_x,_y,_tw,_th);
            		}
HXLINE( 157)		return this->text_bounds->point_inside(p);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,point_inside,return )

void Text_obj::set_pos_from_transform( ::phoenix::Vector _p){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_163_set_pos_from_transform)
HXLINE( 165)		this->super::set_pos_from_transform(_p);
HXLINE( 166)		{
HXLINE( 166)			Float _x = this->get_pos()->x;
HXDLIN( 166)			Float _y = this->get_pos()->y;
HXDLIN( 166)			Float _tw = this->geom->text_width;
HXDLIN( 166)			Float _th = this->geom->text_height;
HXDLIN( 166)			Float _bw = this->geom->text_width;
HXDLIN( 166)			Float _bh = this->geom->text_height;
HXDLIN( 166)			if (hx::IsNotNull( this->get_bounds() )) {
HXLINE( 166)				_bh = this->get_bounds()->h;
HXDLIN( 166)				_bw = this->get_bounds()->w;
HXDLIN( 166)				_x = this->get_bounds()->x;
HXDLIN( 166)				_y = this->get_bounds()->y;
HXDLIN( 166)				int _g1 = this->get_align();
HXDLIN( 166)				Float _x1;
HXDLIN( 166)				switch((int)(_g1)){
            					case (int)1: {
HXLINE( 166)						_x1 = _tw;
            					}
            					break;
            					case (int)2: {
HXLINE( 166)						_x1 = ((Float)_tw / (Float)(int)2);
            					}
            					break;
            					default:{
HXLINE( 166)						_x1 = ((Float)0.0);
            					}
            				}
HXDLIN( 166)				_x = (_x + _x1);
HXDLIN( 166)				int _g11 = this->get_align_vertical();
HXDLIN( 166)				Float _y1;
HXDLIN( 166)				switch((int)(_g11)){
            					case (int)2: {
HXLINE( 166)						_y1 = (((Float)_bh / (Float)(int)2) - ((Float)_th / (Float)(int)2));
            					}
            					break;
            					case (int)4: {
HXLINE( 166)						_y1 = (_bh - _th);
            					}
            					break;
            					default:{
HXLINE( 166)						_y1 = ((Float)0.0);
            					}
            				}
HXDLIN( 166)				_y = (_y + _y1);
            			}
            			else {
HXLINE( 166)				int _g12 = this->get_align();
HXDLIN( 166)				Float _x2;
HXDLIN( 166)				switch((int)(_g12)){
            					case (int)1: {
HXLINE( 166)						_x2 = _tw;
            					}
            					break;
            					case (int)2: {
HXLINE( 166)						_x2 = ((Float)_tw / (Float)(int)2);
            					}
            					break;
            					default:{
HXLINE( 166)						_x2 = ((Float)0.0);
            					}
            				}
HXDLIN( 166)				_x = (_x - _x2);
HXDLIN( 166)				int _g13 = this->get_align_vertical();
HXDLIN( 166)				Float _y2;
HXDLIN( 166)				switch((int)(_g13)){
            					case (int)2: {
HXLINE( 166)						_y2 = ((Float)_th / (Float)(int)2);
            					}
            					break;
            					case (int)4: {
HXLINE( 166)						_y2 = _th;
            					}
            					break;
            					default:{
HXLINE( 166)						_y2 = ((Float)0.0);
            					}
            				}
HXDLIN( 166)				_y = (_y - _y2);
            			}
HXDLIN( 166)			this->text_bounds->set(_x,_y,_tw,_th);
            		}
HXLINE( 167)		this->text_options->__SetField(HX_("pos",94,5d,55,00),this->get_pos(),hx::paccDynamic);
            	}


void Text_obj::on_geom_text_update( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_179_on_geom_text_update)
HXDLIN( 179)		Float _x = this->get_pos()->x;
HXDLIN( 179)		Float _y = this->get_pos()->y;
HXDLIN( 179)		Float _tw = this->geom->text_width;
HXDLIN( 179)		Float _th = this->geom->text_height;
HXDLIN( 179)		Float _bw = this->geom->text_width;
HXDLIN( 179)		Float _bh = this->geom->text_height;
HXDLIN( 179)		if (hx::IsNotNull( this->get_bounds() )) {
HXDLIN( 179)			_bh = this->get_bounds()->h;
HXDLIN( 179)			_bw = this->get_bounds()->w;
HXDLIN( 179)			_x = this->get_bounds()->x;
HXDLIN( 179)			_y = this->get_bounds()->y;
HXDLIN( 179)			int _g1 = this->get_align();
HXDLIN( 179)			Float _x1;
HXDLIN( 179)			switch((int)(_g1)){
            				case (int)1: {
HXDLIN( 179)					_x1 = _tw;
            				}
            				break;
            				case (int)2: {
HXDLIN( 179)					_x1 = ((Float)_tw / (Float)(int)2);
            				}
            				break;
            				default:{
HXDLIN( 179)					_x1 = ((Float)0.0);
            				}
            			}
HXDLIN( 179)			_x = (_x + _x1);
HXDLIN( 179)			int _g11 = this->get_align_vertical();
HXDLIN( 179)			Float _y1;
HXDLIN( 179)			switch((int)(_g11)){
            				case (int)2: {
HXDLIN( 179)					_y1 = (((Float)_bh / (Float)(int)2) - ((Float)_th / (Float)(int)2));
            				}
            				break;
            				case (int)4: {
HXDLIN( 179)					_y1 = (_bh - _th);
            				}
            				break;
            				default:{
HXDLIN( 179)					_y1 = ((Float)0.0);
            				}
            			}
HXDLIN( 179)			_y = (_y + _y1);
            		}
            		else {
HXDLIN( 179)			int _g12 = this->get_align();
HXDLIN( 179)			Float _x2;
HXDLIN( 179)			switch((int)(_g12)){
            				case (int)1: {
HXDLIN( 179)					_x2 = _tw;
            				}
            				break;
            				case (int)2: {
HXDLIN( 179)					_x2 = ((Float)_tw / (Float)(int)2);
            				}
            				break;
            				default:{
HXDLIN( 179)					_x2 = ((Float)0.0);
            				}
            			}
HXDLIN( 179)			_x = (_x - _x2);
HXDLIN( 179)			int _g13 = this->get_align_vertical();
HXDLIN( 179)			Float _y2;
HXDLIN( 179)			switch((int)(_g13)){
            				case (int)2: {
HXDLIN( 179)					_y2 = ((Float)_th / (Float)(int)2);
            				}
            				break;
            				case (int)4: {
HXDLIN( 179)					_y2 = _th;
            				}
            				break;
            				default:{
HXDLIN( 179)					_y2 = ((Float)0.0);
            				}
            			}
HXDLIN( 179)			_y = (_y - _y2);
            		}
HXDLIN( 179)		this->text_bounds->set(_x,_y,_tw,_th);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,on_geom_text_update,(void))

void Text_obj::_update_bounds(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_183__update_bounds)
HXLINE( 185)		Float _x = this->get_pos()->x;
HXLINE( 186)		Float _y = this->get_pos()->y;
HXLINE( 187)		Float _tw = this->geom->text_width;
HXLINE( 188)		Float _th = this->geom->text_height;
HXLINE( 189)		Float _bw = this->geom->text_width;
HXLINE( 190)		Float _bh = this->geom->text_height;
HXLINE( 192)		if (hx::IsNotNull( this->get_bounds() )) {
HXLINE( 193)			_bh = this->get_bounds()->h;
HXLINE( 194)			_bw = this->get_bounds()->w;
HXLINE( 195)			_x = this->get_bounds()->x;
HXLINE( 196)			_y = this->get_bounds()->y;
HXLINE( 198)			int _g1 = this->get_align();
HXDLIN( 198)			Float _x1;
HXDLIN( 198)			switch((int)(_g1)){
            				case (int)1: {
HXLINE( 198)					_x1 = _tw;
            				}
            				break;
            				case (int)2: {
HXLINE( 198)					_x1 = ((Float)_tw / (Float)(int)2);
            				}
            				break;
            				default:{
HXLINE( 198)					_x1 = ((Float)0.0);
            				}
            			}
HXDLIN( 198)			_x = (_x + _x1);
HXLINE( 204)			int _g11 = this->get_align_vertical();
HXDLIN( 204)			Float _y1;
HXDLIN( 204)			switch((int)(_g11)){
            				case (int)2: {
HXLINE( 204)					_y1 = (((Float)_bh / (Float)(int)2) - ((Float)_th / (Float)(int)2));
            				}
            				break;
            				case (int)4: {
HXLINE( 204)					_y1 = (_bh - _th);
            				}
            				break;
            				default:{
HXLINE( 204)					_y1 = ((Float)0.0);
            				}
            			}
HXDLIN( 204)			_y = (_y + _y1);
            		}
            		else {
HXLINE( 212)			int _g12 = this->get_align();
HXDLIN( 212)			Float _x2;
HXDLIN( 212)			switch((int)(_g12)){
            				case (int)1: {
HXLINE( 212)					_x2 = _tw;
            				}
            				break;
            				case (int)2: {
HXLINE( 212)					_x2 = ((Float)_tw / (Float)(int)2);
            				}
            				break;
            				default:{
HXLINE( 212)					_x2 = ((Float)0.0);
            				}
            			}
HXDLIN( 212)			_x = (_x - _x2);
HXLINE( 218)			int _g13 = this->get_align_vertical();
HXDLIN( 218)			Float _y2;
HXDLIN( 218)			switch((int)(_g13)){
            				case (int)2: {
HXLINE( 218)					_y2 = ((Float)_th / (Float)(int)2);
            				}
            				break;
            				case (int)4: {
HXLINE( 218)					_y2 = _th;
            				}
            				break;
            				default:{
HXLINE( 218)					_y2 = ((Float)0.0);
            				}
            			}
HXDLIN( 218)			_y = (_y - _y2);
            		}
HXLINE( 226)		this->text_bounds->set(_x,_y,_tw,_th);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,_update_bounds,(void))

void Text_obj::ondestroy(){
            	HX_STACKFRAME(&_hx_pos_966fca1201536e22_231_ondestroy)
HXLINE( 233)		this->geom = null();
HXLINE( 234)		this->text_options = null();
HXLINE( 235)		this->text_bounds = null();
HXLINE( 237)		this->super::ondestroy();
            	}


void Text_obj::init(){
            	HX_STACKFRAME(&_hx_pos_cb12dcd1f65d1496_35_init)
HXDLIN(  35)		this->super::init();
            	}



hx::ObjectPtr< Text_obj > Text_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< Text_obj > __this = new Text_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< Text_obj > Text_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	Text_obj *__this = (Text_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Text_obj), true, "luxe.Text"));
	*(void **)__this = Text_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

Text_obj::Text_obj()
{
}

void Text_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Text);
	HX_MARK_MEMBER_NAME(geom,"geom");
	HX_MARK_MEMBER_NAME(text_options,"text_options");
	HX_MARK_MEMBER_NAME(text_bounds,"text_bounds");
	 ::luxe::Visual_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Text_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(geom,"geom");
	HX_VISIT_MEMBER_NAME(text_options,"text_options");
	HX_VISIT_MEMBER_NAME(text_bounds,"text_bounds");
	 ::luxe::Visual_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Text_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sdf") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_sdf() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"geom") ) { return hx::Val( geom ); }
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_font() ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_align() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bounds() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_sdf") ) { return hx::Val( get_sdf_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_sdf") ) { return hx::Val( set_sdf_dyn() ); }
		if (HX_FIELD_EQ(inName,"outline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_outline() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_font") ) { return hx::Val( get_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return hx::Val( set_font_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_align") ) { return hx::Val( get_align_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_align") ) { return hx::Val( set_align_dyn() ); }
		if (HX_FIELD_EQ(inName,"thickness") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_thickness() ); }
		if (HX_FIELD_EQ(inName,"ondestroy") ) { return hx::Val( ondestroy_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"point_size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_point_size() ); }
		if (HX_FIELD_EQ(inName,"get_bounds") ) { return hx::Val( get_bounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bounds") ) { return hx::Val( set_bounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"smoothness") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_smoothness() ); }
		if (HX_FIELD_EQ(inName,"glow_color") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_glow_color() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bounds_wrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bounds_wrap() ); }
		if (HX_FIELD_EQ(inName,"get_outline") ) { return hx::Val( get_outline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_outline") ) { return hx::Val( set_outline_dyn() ); }
		if (HX_FIELD_EQ(inName,"glow_amount") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_glow_amount() ); }
		if (HX_FIELD_EQ(inName,"text_bounds") ) { return hx::Val( text_bounds ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"line_spacing") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_line_spacing() ); }
		if (HX_FIELD_EQ(inName,"text_options") ) { return hx::Val( text_options ); }
		if (HX_FIELD_EQ(inName,"point_inside") ) { return hx::Val( point_inside_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_thickness") ) { return hx::Val( get_thickness_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_thickness") ) { return hx::Val( set_thickness_dyn() ); }
		if (HX_FIELD_EQ(inName,"outline_color") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_outline_color() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_point_size") ) { return hx::Val( get_point_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_point_size") ) { return hx::Val( set_point_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"letter_spacing") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_letter_spacing() ); }
		if (HX_FIELD_EQ(inName,"align_vertical") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_align_vertical() ); }
		if (HX_FIELD_EQ(inName,"get_smoothness") ) { return hx::Val( get_smoothness_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_smoothness") ) { return hx::Val( set_smoothness_dyn() ); }
		if (HX_FIELD_EQ(inName,"glow_threshold") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_glow_threshold() ); }
		if (HX_FIELD_EQ(inName,"get_glow_color") ) { return hx::Val( get_glow_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_glow_color") ) { return hx::Val( set_glow_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"_update_bounds") ) { return hx::Val( _update_bounds_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_bounds_wrap") ) { return hx::Val( get_bounds_wrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bounds_wrap") ) { return hx::Val( set_bounds_wrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_glow_amount") ) { return hx::Val( get_glow_amount_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_glow_amount") ) { return hx::Val( set_glow_amount_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_line_spacing") ) { return hx::Val( get_line_spacing_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_line_spacing") ) { return hx::Val( set_line_spacing_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_outline_color") ) { return hx::Val( get_outline_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_outline_color") ) { return hx::Val( set_outline_color_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_letter_spacing") ) { return hx::Val( get_letter_spacing_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_letter_spacing") ) { return hx::Val( set_letter_spacing_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_align_vertical") ) { return hx::Val( get_align_vertical_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_align_vertical") ) { return hx::Val( set_align_vertical_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_glow_threshold") ) { return hx::Val( get_glow_threshold_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_glow_threshold") ) { return hx::Val( set_glow_threshold_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"on_geom_text_update") ) { return hx::Val( on_geom_text_update_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"set_pos_from_transform") ) { return hx::Val( set_pos_from_transform_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Text_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sdf") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sdf(inValue.Cast< bool >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"geom") ) { geom=inValue.Cast<  ::phoenix::geometry::TextGeometry >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_font(inValue.Cast<  ::phoenix::BitmapFont >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_align(inValue.Cast< int >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bounds(inValue.Cast<  ::phoenix::Rectangle >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"outline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_outline(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"thickness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_thickness(inValue.Cast< Float >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"point_size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_point_size(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"smoothness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_smoothness(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"glow_color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_glow_color(inValue.Cast<  ::phoenix::Color >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bounds_wrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bounds_wrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"glow_amount") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_glow_amount(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"text_bounds") ) { text_bounds=inValue.Cast<  ::phoenix::Rectangle >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"line_spacing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_line_spacing(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"text_options") ) { text_options=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"outline_color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_outline_color(inValue.Cast<  ::phoenix::Color >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"letter_spacing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_letter_spacing(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"align_vertical") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_align_vertical(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"glow_threshold") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_glow_threshold(inValue.Cast< Float >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Text_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("geom","\xbc","\xfe","\x61","\x44"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"));
	outFields->push(HX_HCSTRING("point_size","\x50","\x66","\xf5","\x4b"));
	outFields->push(HX_HCSTRING("letter_spacing","\xea","\x8f","\xec","\x6d"));
	outFields->push(HX_HCSTRING("line_spacing","\xf8","\xb8","\xad","\x3c"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("bounds_wrap","\x14","\x47","\xee","\xec"));
	outFields->push(HX_HCSTRING("align","\xc5","\x56","\x91","\x21"));
	outFields->push(HX_HCSTRING("align_vertical","\x70","\xdc","\x8d","\x53"));
	outFields->push(HX_HCSTRING("sdf","\xb5","\x9a","\x57","\x00"));
	outFields->push(HX_HCSTRING("smoothness","\xc5","\x37","\x00","\x93"));
	outFields->push(HX_HCSTRING("thickness","\x74","\xf1","\x66","\x5a"));
	outFields->push(HX_HCSTRING("outline","\x82","\x17","\xbe","\xe1"));
	outFields->push(HX_HCSTRING("outline_color","\xa6","\x5d","\x13","\x96"));
	outFields->push(HX_HCSTRING("glow_threshold","\x39","\x20","\x9c","\xba"));
	outFields->push(HX_HCSTRING("glow_amount","\x8a","\x70","\x81","\x49"));
	outFields->push(HX_HCSTRING("glow_color","\xf1","\xee","\x6b","\xc3"));
	outFields->push(HX_HCSTRING("text_options","\x8c","\x4e","\x80","\x74"));
	outFields->push(HX_HCSTRING("text_bounds","\x07","\x6b","\xc3","\xe2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Text_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::geometry::TextGeometry*/ ,(int)offsetof(Text_obj,geom),HX_HCSTRING("geom","\xbc","\xfe","\x61","\x44")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Text_obj,text_options),HX_HCSTRING("text_options","\x8c","\x4e","\x80","\x74")},
	{hx::fsObject /*::phoenix::Rectangle*/ ,(int)offsetof(Text_obj,text_bounds),HX_HCSTRING("text_bounds","\x07","\x6b","\xc3","\xe2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Text_obj_sStaticStorageInfo = 0;
#endif

static ::String Text_obj_sMemberFields[] = {
	HX_HCSTRING("geom","\xbc","\xfe","\x61","\x44"),
	HX_HCSTRING("get_text","\x36","\x88","\xb4","\xcc"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("get_font","\x58","\x19","\x7b","\xc3"),
	HX_HCSTRING("set_font","\xcc","\x72","\xd8","\x71"),
	HX_HCSTRING("get_point_size","\x99","\xee","\xea","\xc1"),
	HX_HCSTRING("set_point_size","\x0d","\xd7","\x0a","\xe2"),
	HX_HCSTRING("get_letter_spacing","\xb3","\x70","\x86","\x09"),
	HX_HCSTRING("set_letter_spacing","\x27","\xa3","\x35","\xe6"),
	HX_HCSTRING("get_line_spacing","\x81","\xa5","\x4c","\x41"),
	HX_HCSTRING("set_line_spacing","\xf5","\x92","\x8e","\x97"),
	HX_HCSTRING("get_bounds","\x3e","\xf6","\xa4","\x56"),
	HX_HCSTRING("set_bounds","\xb2","\x94","\x22","\x5a"),
	HX_HCSTRING("get_bounds_wrap","\xab","\xfe","\xcf","\xad"),
	HX_HCSTRING("set_bounds_wrap","\xb7","\x7b","\x9b","\xa9"),
	HX_HCSTRING("get_align","\x1c","\xb3","\x3a","\x65"),
	HX_HCSTRING("set_align","\x28","\x9f","\x8b","\x48"),
	HX_HCSTRING("get_align_vertical","\x39","\xbd","\x27","\xef"),
	HX_HCSTRING("set_align_vertical","\xad","\xef","\xd6","\xcb"),
	HX_HCSTRING("get_sdf","\x4c","\x63","\xcc","\x26"),
	HX_HCSTRING("set_sdf","\x58","\xf4","\xcd","\x19"),
	HX_HCSTRING("get_smoothness","\x0e","\xc0","\xf5","\x08"),
	HX_HCSTRING("set_smoothness","\x82","\xa8","\x15","\x29"),
	HX_HCSTRING("get_thickness","\x4b","\xc5","\xca","\x1b"),
	HX_HCSTRING("set_thickness","\x57","\xa7","\xd0","\x60"),
	HX_HCSTRING("get_outline","\x99","\x77","\xb8","\x67"),
	HX_HCSTRING("set_outline","\xa5","\x7e","\x25","\x72"),
	HX_HCSTRING("get_outline_color","\xfd","\x68","\x83","\x9c"),
	HX_HCSTRING("set_outline_color","\x09","\x41","\xf1","\xbf"),
	HX_HCSTRING("get_glow_threshold","\x02","\x01","\x36","\x56"),
	HX_HCSTRING("set_glow_threshold","\x76","\x33","\xe5","\x32"),
	HX_HCSTRING("get_glow_amount","\x21","\x28","\x63","\x0a"),
	HX_HCSTRING("set_glow_amount","\x2d","\xa5","\x2e","\x06"),
	HX_HCSTRING("get_glow_color","\x3a","\x77","\x61","\x39"),
	HX_HCSTRING("set_glow_color","\xae","\x5f","\x81","\x59"),
	HX_HCSTRING("text_options","\x8c","\x4e","\x80","\x74"),
	HX_HCSTRING("point_inside","\x4b","\xc7","\xa9","\x1d"),
	HX_HCSTRING("set_pos_from_transform","\x5f","\x3e","\x64","\xc7"),
	HX_HCSTRING("text_bounds","\x07","\x6b","\xc3","\xe2"),
	HX_HCSTRING("on_geom_text_update","\xb8","\x9b","\x8f","\x21"),
	HX_HCSTRING("_update_bounds","\x6c","\xc5","\x03","\x11"),
	HX_HCSTRING("ondestroy","\xbb","\xbd","\xdf","\x2e"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null()) };

static void Text_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Text_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Text_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Text_obj::__mClass,"__mClass");
};

#endif

hx::Class Text_obj::__mClass;

void Text_obj::__register()
{
	hx::Object *dummy = new Text_obj;
	Text_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Text","\x85","\x38","\x43","\xb6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Text_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Text_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Text_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Text_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Text_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Text_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
