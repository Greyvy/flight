// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Game
#include <luxe/Game.h>
#endif
#ifndef INCLUDED_luxe_GamepadEvent
#include <luxe/GamepadEvent.h>
#endif
#ifndef INCLUDED_luxe_GamepadEventType
#include <luxe/GamepadEventType.h>
#endif
#ifndef INCLUDED_luxe_Input
#include <luxe/Input.h>
#endif
#ifndef INCLUDED_luxe_InputEvent
#include <luxe/InputEvent.h>
#endif
#ifndef INCLUDED_luxe_InteractState
#include <luxe/InteractState.h>
#endif
#ifndef INCLUDED_luxe_KeyEvent
#include <luxe/KeyEvent.h>
#endif
#ifndef INCLUDED_luxe_MouseEvent
#include <luxe/MouseEvent.h>
#endif
#ifndef INCLUDED_luxe_TextEvent
#include <luxe/TextEvent.h>
#endif
#ifndef INCLUDED_luxe_TextEventType
#include <luxe/TextEventType.h>
#endif
#ifndef INCLUDED_luxe_TouchEvent
#include <luxe/TouchEvent.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_systems_input_Input
#include <snow/systems/input/Input.h>
#endif
#ifndef INCLUDED_snow_types_ModState
#include <snow/types/ModState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_28_new,"luxe.Input","new",0xd5d5d724,"luxe.Input.new","luxe/Input.hx",28,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_46_inputpressed,"luxe.Input","inputpressed",0x66d30494,"luxe.Input.inputpressed","luxe/Input.hx",46,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_51_inputreleased,"luxe.Input","inputreleased",0x98a70a8b,"luxe.Input.inputreleased","luxe/Input.hx",51,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_56_inputdown,"luxe.Input","inputdown",0x58f8fb30,"luxe.Input.inputdown","luxe/Input.hx",56,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_63_keypressed,"luxe.Input","keypressed",0x9327649f,"luxe.Input.keypressed","luxe/Input.hx",63,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_68_keyreleased,"luxe.Input","keyreleased",0x3626b420,"luxe.Input.keyreleased","luxe/Input.hx",68,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_73_keydown,"luxe.Input","keydown",0xb1f4f645,"luxe.Input.keydown","luxe/Input.hx",73,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_79_scanpressed,"luxe.Input","scanpressed",0x4c8f9989,"luxe.Input.scanpressed","luxe/Input.hx",79,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_84_scanreleased,"luxe.Input","scanreleased",0xb7eccbf6,"luxe.Input.scanreleased","luxe/Input.hx",84,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_89_scandown,"luxe.Input","scandown",0x9cf0eb1b,"luxe.Input.scandown","luxe/Input.hx",89,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_96_mousepressed,"luxe.Input","mousepressed",0xb04bfbd9,"luxe.Input.mousepressed","luxe/Input.hx",96,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_101_mousereleased,"luxe.Input","mousereleased",0x99066fa6,"luxe.Input.mousereleased","luxe/Input.hx",101,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_106_mousedown,"luxe.Input","mousedown",0x3e22f6cb,"luxe.Input.mousedown","luxe/Input.hx",106,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_113_gamepadpressed,"luxe.Input","gamepadpressed",0x00765fdd,"luxe.Input.gamepadpressed","luxe/Input.hx",113,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_118_gamepadreleased,"luxe.Input","gamepadreleased",0x6df38f22,"luxe.Input.gamepadreleased","luxe/Input.hx",118,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_123_gamepaddown,"luxe.Input","gamepaddown",0x38b3a847,"luxe.Input.gamepaddown","luxe/Input.hx",123,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_128_gamepadaxis,"luxe.Input","gamepadaxis",0x36becc86,"luxe.Input.gamepadaxis","luxe/Input.hx",128,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_135_bind_key,"luxe.Input","bind_key",0x3768d999,"luxe.Input.bind_key","luxe/Input.hx",135,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_147_unbind_key,"luxe.Input","unbind_key",0xffdbe7f2,"luxe.Input.unbind_key","luxe/Input.hx",147,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_157_bind_mouse,"luxe.Input","bind_mouse",0xb3ebd89f,"luxe.Input.bind_mouse","luxe/Input.hx",157,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_169_unbind_mouse,"luxe.Input","unbind_mouse",0xca01ef38,"luxe.Input.unbind_mouse","luxe/Input.hx",169,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_179_bind_gamepad,"luxe.Input","bind_gamepad",0x321db59b,"luxe.Input.bind_gamepad","luxe/Input.hx",179,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_191_unbind_gamepad,"luxe.Input","unbind_gamepad",0x8ad96474,"luxe.Input.unbind_gamepad","luxe/Input.hx",191,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_202_init,"luxe.Input","init",0x41ff1fcc,"luxe.Input.init","luxe/Input.hx",202,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0a4c631204aa6b8c_138_destroy,"luxe.Input","destroy",0x250ce5be,"luxe.Input.destroy","luxe/Log.hx",138,0xe5312153)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_222_process,"luxe.Input","process",0xf1d15b33,"luxe.Input.process","luxe/Input.hx",222,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_257_onmousedown,"luxe.Input","onmousedown",0xd525f2cc,"luxe.Input.onmousedown","luxe/Input.hx",257,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_271_onmouseup,"luxe.Input","onmouseup",0x05061245,"luxe.Input.onmouseup","luxe/Input.hx",271,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_285_onmousemove,"luxe.Input","onmousemove",0xdb18dd7b,"luxe.Input.onmousemove","luxe/Input.hx",285,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_297_onmousewheel,"luxe.Input","onmousewheel",0x97fd56f1,"luxe.Input.onmousewheel","luxe/Input.hx",297,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_313_onkeydown,"luxe.Input","onkeydown",0xf6014006,"luxe.Input.onkeydown","luxe/Input.hx",313,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_327_onkeyup,"luxe.Input","onkeyup",0xe295bcff,"luxe.Input.onkeyup","luxe/Input.hx",327,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_341_ontextinput,"luxe.Input","ontextinput",0x951a5202,"luxe.Input.ontextinput","luxe/Input.hx",341,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_361_ontouchdown,"luxe.Input","ontouchdown",0xee3dc966,"luxe.Input.ontouchdown","luxe/Input.hx",361,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_373_ontouchup,"luxe.Input","ontouchup",0x1d8b2e5f,"luxe.Input.ontouchup","luxe/Input.hx",373,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_385_ontouchmove,"luxe.Input","ontouchmove",0xf430b415,"luxe.Input.ontouchmove","luxe/Input.hx",385,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_399_ongamepadaxis,"luxe.Input","ongamepadaxis",0xd1798ac7,"luxe.Input.ongamepadaxis","luxe/Input.hx",399,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_411_ongamepaddown,"luxe.Input","ongamepaddown",0xd36e6688,"luxe.Input.ongamepaddown","luxe/Input.hx",411,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_425_ongamepadup,"luxe.Input","ongamepadup",0x3074df01,"luxe.Input.ongamepadup","luxe/Input.hx",425,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_439_ongamepaddevice,"luxe.Input","ongamepaddevice",0x960ca03c,"luxe.Input.ongamepaddevice","luxe/Input.hx",439,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_460_oninputdown,"luxe.Input","oninputdown",0xeffbf731,"luxe.Input.oninputdown","luxe/Input.hx",460,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_486_oninputup,"luxe.Input","oninputup",0x18b1c36a,"luxe.Input.oninputup","luxe/Input.hx",486,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_514_check_named_keys,"luxe.Input","check_named_keys",0x66d0b78d,"luxe.Input.check_named_keys","luxe/Input.hx",514,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_553_check_named_mouse,"luxe.Input","check_named_mouse",0xbd36266c,"luxe.Input.check_named_mouse","luxe/Input.hx",553,0x19edc1cd)
HX_LOCAL_STACK_FRAME(_hx_pos_0492d5b00f8cb3d3_591_check_named_gamepad_buttons,"luxe.Input","check_named_gamepad_buttons",0xe4db646a,"luxe.Input.check_named_gamepad_buttons","luxe/Input.hx",591,0x19edc1cd)
namespace luxe{

void Input_obj::__construct( ::luxe::Engine _core){
            	HX_GC_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_28_new)
HXLINE(  30)		this->core = _core;
HXLINE(  32)		this->key_event =  ::luxe::KeyEvent_obj::__alloc( HX_CTX );
HXLINE(  33)		this->text_event =  ::luxe::TextEvent_obj::__alloc( HX_CTX );
HXLINE(  34)		this->mouse_event =  ::luxe::MouseEvent_obj::__alloc( HX_CTX );
HXLINE(  35)		this->touch_event =  ::luxe::TouchEvent_obj::__alloc( HX_CTX );
HXLINE(  36)		this->gamepad_event =  ::luxe::GamepadEvent_obj::__alloc( HX_CTX );
HXLINE(  37)		this->input_event =  ::luxe::InputEvent_obj::__alloc( HX_CTX );
            	}

Dynamic Input_obj::__CreateEmpty() { return new Input_obj; }

void *Input_obj::_hx_vtable = 0;

Dynamic Input_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Input_obj > _hx_result = new Input_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Input_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4e902250;
}

bool Input_obj::inputpressed(::String _event){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_46_inputpressed)
HXDLIN(  46)		return this->_named_input_pressed->exists(_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,inputpressed,return )

bool Input_obj::inputreleased(::String _event){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_51_inputreleased)
HXDLIN(  51)		return this->_named_input_released->exists(_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,inputreleased,return )

bool Input_obj::inputdown(::String _event){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_56_inputdown)
HXDLIN(  56)		return this->_named_input_down->exists(_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,inputdown,return )

bool Input_obj::keypressed(int _code){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_63_keypressed)
HXDLIN(  63)		return this->core->app->input->keypressed(_code);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,keypressed,return )

bool Input_obj::keyreleased(int _code){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_68_keyreleased)
HXDLIN(  68)		return this->core->app->input->keyreleased(_code);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,keyreleased,return )

bool Input_obj::keydown(int _code){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_73_keydown)
HXDLIN(  73)		return this->core->app->input->keydown(_code);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,keydown,return )

bool Input_obj::scanpressed(int _code){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_79_scanpressed)
HXDLIN(  79)		return this->core->app->input->scanpressed(_code);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,scanpressed,return )

bool Input_obj::scanreleased(int _code){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_84_scanreleased)
HXDLIN(  84)		return this->core->app->input->scanreleased(_code);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,scanreleased,return )

bool Input_obj::scandown(int _code){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_89_scandown)
HXDLIN(  89)		return this->core->app->input->scandown(_code);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,scandown,return )

bool Input_obj::mousepressed(int _button){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_96_mousepressed)
HXDLIN(  96)		return this->core->app->input->mousepressed(_button);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,mousepressed,return )

bool Input_obj::mousereleased(int _button){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_101_mousereleased)
HXDLIN( 101)		return this->core->app->input->mousereleased(_button);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,mousereleased,return )

bool Input_obj::mousedown(int _button){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_106_mousedown)
HXDLIN( 106)		return this->core->app->input->mousedown(_button);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,mousedown,return )

bool Input_obj::gamepadpressed(int _gamepad,int _button){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_113_gamepadpressed)
HXDLIN( 113)		return this->core->app->input->gamepadpressed(_gamepad,_button);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,gamepadpressed,return )

bool Input_obj::gamepadreleased(int _gamepad,int _button){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_118_gamepadreleased)
HXDLIN( 118)		return this->core->app->input->gamepadreleased(_gamepad,_button);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,gamepadreleased,return )

bool Input_obj::gamepaddown(int _gamepad,int _button){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_123_gamepaddown)
HXDLIN( 123)		return this->core->app->input->gamepaddown(_gamepad,_button);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,gamepaddown,return )

Float Input_obj::gamepadaxis(int _gamepad,int _axis){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_128_gamepadaxis)
HXDLIN( 128)		return this->core->app->input->gamepadaxis(_gamepad,_axis);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,gamepadaxis,return )

void Input_obj::bind_key(::String _name,int _key){
            	HX_GC_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_135_bind_key)
HXLINE( 137)		if (!(this->key_bindings->exists(_name))) {
HXLINE( 138)			::Dynamic this1 = this->key_bindings;
HXDLIN( 138)			( ( ::haxe::ds::StringMap)(this1) )->set(_name, ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
            		}
HXLINE( 141)		 ::haxe::ds::IntMap _kb = this->key_bindings->get(_name).StaticCast<  ::haxe::ds::IntMap >();
HXLINE( 142)		_kb->set(_key,true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,bind_key,(void))

void Input_obj::unbind_key(::String _name,int _key){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_147_unbind_key)
HXLINE( 149)		if (!(this->key_bindings->exists(_name))) {
HXLINE( 149)			return;
            		}
HXLINE( 151)		 ::haxe::ds::IntMap _kb = this->key_bindings->get(_name).StaticCast<  ::haxe::ds::IntMap >();
HXLINE( 152)		_kb->remove(_key);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,unbind_key,(void))

void Input_obj::bind_mouse(::String _name,int _button){
            	HX_GC_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_157_bind_mouse)
HXLINE( 159)		if (!(this->mouse_bindings->exists(_name))) {
HXLINE( 160)			::Dynamic this1 = this->mouse_bindings;
HXDLIN( 160)			( ( ::haxe::ds::StringMap)(this1) )->set(_name, ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
            		}
HXLINE( 163)		 ::haxe::ds::IntMap _mb = this->mouse_bindings->get(_name).StaticCast<  ::haxe::ds::IntMap >();
HXLINE( 164)		_mb->set(_button,true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,bind_mouse,(void))

void Input_obj::unbind_mouse(::String _name,int _button){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_169_unbind_mouse)
HXLINE( 171)		if (!(this->mouse_bindings->exists(_name))) {
HXLINE( 171)			return;
            		}
HXLINE( 173)		 ::haxe::ds::IntMap _mb = this->mouse_bindings->get(_name).StaticCast<  ::haxe::ds::IntMap >();
HXLINE( 174)		_mb->remove(_button);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,unbind_mouse,(void))

void Input_obj::bind_gamepad(::String _name,int _gamepad_button, ::Dynamic _gamepad_id){
            	HX_GC_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_179_bind_gamepad)
HXLINE( 181)		if (!(this->gamepad_bindings->exists(_name))) {
HXLINE( 182)			::Dynamic this1 = this->gamepad_bindings;
HXDLIN( 182)			( ( ::haxe::ds::StringMap)(this1) )->set(_name, ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
            		}
HXLINE( 185)		 ::haxe::ds::IntMap _gp = this->gamepad_bindings->get(_name).StaticCast<  ::haxe::ds::IntMap >();
HXLINE( 186)		_gp->set(_gamepad_button,_gamepad_id);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Input_obj,bind_gamepad,(void))

void Input_obj::unbind_gamepad(::String _name,int _button){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_191_unbind_gamepad)
HXLINE( 193)		if (!(this->gamepad_bindings->exists(_name))) {
HXLINE( 193)			return;
            		}
HXLINE( 195)		 ::haxe::ds::IntMap _gp = this->gamepad_bindings->get(_name).StaticCast<  ::haxe::ds::IntMap >();
HXLINE( 196)		_gp->remove(_button);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,unbind_gamepad,(void))

void Input_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_202_init)
HXLINE( 204)		this->key_bindings =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 205)		this->mouse_bindings =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 206)		this->gamepad_bindings =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 208)		this->_named_input_down =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 209)		this->_named_input_pressed =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 210)		this->_named_input_released =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,init,(void))

void Input_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_0a4c631204aa6b8c_138_destroy)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,destroy,(void))

void Input_obj::process(){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_222_process)
HXLINE( 228)		{
HXLINE( 228)			 ::Dynamic _event = this->_named_input_pressed->keys();
HXDLIN( 228)			while(( (bool)(_event->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 228)				::String _event1 = ( (::String)(_event->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 230)				if (( (bool)(this->_named_input_pressed->get(_event1)) )) {
HXLINE( 231)					this->_named_input_pressed->remove(_event1);
            				}
            				else {
HXLINE( 233)					this->_named_input_pressed->set(_event1,true);
            				}
            			}
            		}
HXLINE( 241)		{
HXLINE( 241)			 ::Dynamic _event2 = this->_named_input_released->keys();
HXDLIN( 241)			while(( (bool)(_event2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 241)				::String _event3 = ( (::String)(_event2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 243)				if (( (bool)(this->_named_input_released->get(_event3)) )) {
HXLINE( 244)					this->_named_input_released->remove(_event3);
            				}
            				else {
HXLINE( 246)					this->_named_input_released->set(_event3,true);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,process,(void))

void Input_obj::onmousedown(int _x,int _y,int _button,Float _timestamp,int _window_id){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_257_onmousedown)
HXLINE( 259)		if (this->core->shutting_down) {
HXLINE( 259)			return;
            		}
HXLINE( 261)		this->mouse_event->set_press(_x,_y,_button,::luxe::InteractState_obj::down_dyn(),_timestamp,_window_id);
HXLINE( 263)		this->check_named_mouse(this->mouse_event,true);
HXLINE( 265)		this->core->emitter->emit((int)17,this->mouse_event);
HXLINE( 267)		this->core->game->onmousedown(this->mouse_event);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Input_obj,onmousedown,(void))

void Input_obj::onmouseup(int _x,int _y,int _button,Float _timestamp,int _window_id){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_271_onmouseup)
HXLINE( 273)		if (this->core->shutting_down) {
HXLINE( 273)			return;
            		}
HXLINE( 275)		this->mouse_event->set_press(_x,_y,_button,::luxe::InteractState_obj::up_dyn(),_timestamp,_window_id);
HXLINE( 277)		this->check_named_mouse(this->mouse_event,null());
HXLINE( 279)		this->core->emitter->emit((int)18,this->mouse_event);
HXLINE( 281)		this->core->game->onmouseup(this->mouse_event);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Input_obj,onmouseup,(void))

void Input_obj::onmousemove(int _x,int _y,int _x_rel,int _y_rel,Float _timestamp,int _window_id){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_285_onmousemove)
HXLINE( 287)		if (this->core->shutting_down) {
HXLINE( 287)			return;
            		}
HXLINE( 289)		this->mouse_event->set_move(_x,_y,_x_rel,_y_rel,_timestamp,_window_id);
HXLINE( 291)		this->core->emitter->emit((int)19,this->mouse_event);
HXLINE( 293)		this->core->game->onmousemove(this->mouse_event);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,onmousemove,(void))

void Input_obj::onmousewheel(Float _x,Float _y,Float _timestamp,int _window_id){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_297_onmousewheel)
HXLINE( 299)		if (this->core->shutting_down) {
HXLINE( 299)			return;
            		}
HXLINE( 301)		this->mouse_event->set_wheel(_x,_y,_timestamp,_window_id);
HXLINE( 303)		this->check_named_mouse(this->mouse_event,false);
HXLINE( 305)		this->core->emitter->emit((int)20,this->mouse_event);
HXLINE( 307)		this->core->game->onmousewheel(this->mouse_event);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Input_obj,onmousewheel,(void))

void Input_obj::onkeydown(int _keycode,int _scancode,bool _repeat, ::snow::types::ModState _mod,Float _timestamp,int _window_id){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_313_onkeydown)
HXLINE( 315)		if (this->core->shutting_down) {
HXLINE( 315)			return;
            		}
HXLINE( 317)		this->key_event->set(_keycode,_scancode,_repeat,_mod,::luxe::InteractState_obj::down_dyn(),_timestamp,_window_id);
HXLINE( 319)		this->check_named_keys(this->key_event,true);
HXLINE( 321)		this->core->emitter->emit((int)12,this->key_event);
HXLINE( 323)		this->core->game->onkeydown(this->key_event);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,onkeydown,(void))

void Input_obj::onkeyup(int _keycode,int _scancode,bool _repeat, ::snow::types::ModState _mod,Float _timestamp,int _window_id){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_327_onkeyup)
HXLINE( 329)		if (this->core->shutting_down) {
HXLINE( 329)			return;
            		}
HXLINE( 331)		this->key_event->set(_keycode,_scancode,_repeat,_mod,::luxe::InteractState_obj::up_dyn(),_timestamp,_window_id);
HXLINE( 333)		this->check_named_keys(this->key_event,null());
HXLINE( 335)		this->core->emitter->emit((int)13,this->key_event);
HXLINE( 337)		this->core->game->onkeyup(this->key_event);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,onkeyup,(void))

void Input_obj::ontextinput(::String _text,int _start,int _length,int _etype,Float _timestamp,int _window_id){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_341_ontextinput)
HXLINE( 343)		if (this->core->shutting_down) {
HXLINE( 343)			return;
            		}
HXLINE( 345)		 ::luxe::TextEventType _type;
HXDLIN( 345)		switch((int)(_etype)){
            			case (int)1: {
HXLINE( 345)				_type = ::luxe::TextEventType_obj::edit_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 345)				_type = ::luxe::TextEventType_obj::input_dyn();
            			}
            			break;
            			default:{
HXLINE( 348)				return;
            			}
            		}
HXLINE( 351)		this->text_event->set(_text,_start,_length,_type,_timestamp,_window_id);
HXLINE( 353)		this->core->emitter->emit((int)14,this->text_event);
HXLINE( 355)		this->core->game->ontextinput(this->text_event);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,ontextinput,(void))

void Input_obj::ontouchdown(Float _x,Float _y,Float _dx,Float _dy,int _touch_id,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_361_ontouchdown)
HXLINE( 363)		if (this->core->shutting_down) {
HXLINE( 363)			return;
            		}
HXLINE( 365)		this->touch_event->set(_x,_y,_dx,_dy,_touch_id,::luxe::InteractState_obj::down_dyn(),_timestamp);
HXLINE( 367)		this->core->emitter->emit((int)21,this->touch_event);
HXLINE( 369)		this->core->game->ontouchdown(this->touch_event);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,ontouchdown,(void))

void Input_obj::ontouchup(Float _x,Float _y,Float _dx,Float _dy,int _touch_id,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_373_ontouchup)
HXLINE( 375)		if (this->core->shutting_down) {
HXLINE( 375)			return;
            		}
HXLINE( 377)		this->touch_event->set(_x,_y,_dx,_dy,_touch_id,::luxe::InteractState_obj::up_dyn(),_timestamp);
HXLINE( 379)		this->core->emitter->emit((int)22,this->touch_event);
HXLINE( 381)		this->core->game->ontouchup(this->touch_event);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,ontouchup,(void))

void Input_obj::ontouchmove(Float _x,Float _y,Float _dx,Float _dy,int _touch_id,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_385_ontouchmove)
HXLINE( 387)		if (this->core->shutting_down) {
HXLINE( 387)			return;
            		}
HXLINE( 389)		this->touch_event->set(_x,_y,_dx,_dy,_touch_id,::luxe::InteractState_obj::move_dyn(),_timestamp);
HXLINE( 391)		this->core->emitter->emit((int)23,this->touch_event);
HXLINE( 393)		this->core->game->ontouchmove(this->touch_event);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,ontouchmove,(void))

void Input_obj::ongamepadaxis(int _gamepad,int _axis,Float _value,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_399_ongamepadaxis)
HXLINE( 401)		if (this->core->shutting_down) {
HXLINE( 401)			return;
            		}
HXLINE( 403)		this->gamepad_event->set_axis(_gamepad,_axis,_value,_timestamp);
HXLINE( 405)		this->core->emitter->emit((int)24,this->gamepad_event);
HXLINE( 407)		this->core->game->ongamepadaxis(this->gamepad_event);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Input_obj,ongamepadaxis,(void))

void Input_obj::ongamepaddown(int _gamepad,int _button,Float _value,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_411_ongamepaddown)
HXLINE( 413)		if (this->core->shutting_down) {
HXLINE( 413)			return;
            		}
HXLINE( 415)		this->gamepad_event->set_button(_gamepad,_button,_value,::luxe::InteractState_obj::down_dyn(),_timestamp);
HXLINE( 417)		this->check_named_gamepad_buttons(this->gamepad_event,true);
HXLINE( 419)		this->core->emitter->emit((int)25,this->gamepad_event);
HXLINE( 421)		this->core->game->ongamepaddown(this->gamepad_event);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Input_obj,ongamepaddown,(void))

void Input_obj::ongamepadup(int _gamepad,int _button,Float _value,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_425_ongamepadup)
HXLINE( 427)		if (this->core->shutting_down) {
HXLINE( 427)			return;
            		}
HXLINE( 429)		this->gamepad_event->set_button(_gamepad,_button,_value,::luxe::InteractState_obj::up_dyn(),_timestamp);
HXLINE( 431)		this->check_named_gamepad_buttons(this->gamepad_event,false);
HXLINE( 433)		this->core->emitter->emit((int)26,this->gamepad_event);
HXLINE( 435)		this->core->game->ongamepadup(this->gamepad_event);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Input_obj,ongamepadup,(void))

void Input_obj::ongamepaddevice(int _gamepad,::String _id,int _etype,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_439_ongamepaddevice)
HXLINE( 441)		if (this->core->shutting_down) {
HXLINE( 441)			return;
            		}
HXLINE( 443)		 ::luxe::GamepadEventType _type;
HXDLIN( 443)		switch((int)(_etype)){
            			case (int)1: {
HXLINE( 443)				_type = ::luxe::GamepadEventType_obj::device_added_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 443)				_type = ::luxe::GamepadEventType_obj::device_removed_dyn();
            			}
            			break;
            			case (int)3: {
HXLINE( 443)				_type = ::luxe::GamepadEventType_obj::device_remapped_dyn();
            			}
            			break;
            			default:{
HXLINE( 443)				_type = ::luxe::GamepadEventType_obj::unknown_dyn();
            			}
            		}
HXLINE( 450)		this->gamepad_event->set_device(_gamepad,_id,_type,_timestamp);
HXLINE( 452)		this->core->emitter->emit((int)27,this->gamepad_event);
HXLINE( 454)		this->core->game->ongamepaddevice(this->gamepad_event);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Input_obj,ongamepaddevice,(void))

void Input_obj::oninputdown(::String _name, ::luxe::KeyEvent _key_event, ::luxe::MouseEvent _mouse_event, ::luxe::TouchEvent _touch_event, ::luxe::GamepadEvent _gamepad_event){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_460_oninputdown)
HXLINE( 462)		if (this->core->shutting_down) {
HXLINE( 462)			return;
            		}
HXLINE( 464)		if (hx::IsNotNull( _key_event )) {
HXLINE( 465)			this->input_event->set_key(_name,::luxe::InteractState_obj::down_dyn(),_key_event);
            		}
            		else {
HXLINE( 467)			if (hx::IsNotNull( _mouse_event )) {
HXLINE( 468)				this->input_event->set_mouse(_name,::luxe::InteractState_obj::down_dyn(),_mouse_event);
            			}
            			else {
HXLINE( 470)				if (hx::IsNotNull( _touch_event )) {
HXLINE( 471)					this->input_event->set_touch(_name,::luxe::InteractState_obj::down_dyn(),_touch_event);
            				}
            				else {
HXLINE( 473)					if (hx::IsNotNull( _gamepad_event )) {
HXLINE( 474)						this->input_event->set_gamepad(_name,::luxe::InteractState_obj::down_dyn(),_gamepad_event);
            					}
            					else {
HXLINE( 477)						this->input_event->set_unknown(_name,::luxe::InteractState_obj::down_dyn());
            					}
            				}
            			}
            		}
HXLINE( 480)		this->core->emitter->emit((int)15,this->input_event);
HXLINE( 482)		this->core->game->oninputdown(this->input_event);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Input_obj,oninputdown,(void))

void Input_obj::oninputup(::String _name, ::luxe::KeyEvent _key_event, ::luxe::MouseEvent _mouse_event, ::luxe::TouchEvent _touch_event, ::luxe::GamepadEvent _gamepad_event){
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_486_oninputup)
HXLINE( 488)		if (this->core->shutting_down) {
HXLINE( 488)			return;
            		}
HXLINE( 490)		if (hx::IsNotNull( _key_event )) {
HXLINE( 491)			this->input_event->set_key(_name,::luxe::InteractState_obj::up_dyn(),_key_event);
            		}
            		else {
HXLINE( 493)			if (hx::IsNotNull( _mouse_event )) {
HXLINE( 494)				this->input_event->set_mouse(_name,::luxe::InteractState_obj::up_dyn(),_mouse_event);
            			}
            			else {
HXLINE( 496)				if (hx::IsNotNull( _touch_event )) {
HXLINE( 497)					this->input_event->set_touch(_name,::luxe::InteractState_obj::up_dyn(),_touch_event);
            				}
            				else {
HXLINE( 499)					if (hx::IsNotNull( _gamepad_event )) {
HXLINE( 500)						this->input_event->set_gamepad(_name,::luxe::InteractState_obj::up_dyn(),_gamepad_event);
            					}
            					else {
HXLINE( 503)						this->input_event->set_unknown(_name,::luxe::InteractState_obj::up_dyn());
            					}
            				}
            			}
            		}
HXLINE( 506)		this->core->emitter->emit((int)16,this->input_event);
HXLINE( 508)		this->core->game->oninputup(this->input_event);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Input_obj,oninputup,(void))

void Input_obj::check_named_keys( ::luxe::KeyEvent e,hx::Null< bool >  __o__down){
bool _down = __o__down.Default(false);
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_514_check_named_keys)
HXLINE( 516)		::Array< ::String > _fired = ::Array_obj< ::String >::__new(0);
HXLINE( 517)		{
HXLINE( 517)			 ::Dynamic _name = this->key_bindings->keys();
HXDLIN( 517)			while(( (bool)(_name->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 517)				::String _name1 = ( (::String)(_name->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 519)				 ::haxe::ds::IntMap _b = this->key_bindings->get(_name1).StaticCast<  ::haxe::ds::IntMap >();
HXLINE( 520)				bool _is_down_repeat;
HXDLIN( 520)				if (_down) {
HXLINE( 520)					_is_down_repeat = e->repeat;
            				}
            				else {
HXLINE( 520)					_is_down_repeat = false;
            				}
HXLINE( 521)				bool _hx_tmp;
HXDLIN( 521)				if (_b->exists(e->keycode)) {
HXLINE( 521)					_hx_tmp = !(_is_down_repeat);
            				}
            				else {
HXLINE( 521)					_hx_tmp = false;
            				}
HXDLIN( 521)				if (_hx_tmp) {
HXLINE( 522)					if (!(::Lambda_obj::has(_fired,_name1))) {
HXLINE( 523)						_fired->push(_name1);
            					}
            				}
            			}
            		}
HXLINE( 529)		{
HXLINE( 529)			int _g = (int)0;
HXDLIN( 529)			while((_g < _fired->length)){
HXLINE( 529)				::String _f = _fired->__get(_g);
HXDLIN( 529)				_g = (_g + (int)1);
HXLINE( 530)				if (_down) {
HXLINE( 533)					this->_named_input_pressed->set(_f,false);
HXLINE( 535)					this->_named_input_down->set(_f,true);
HXLINE( 537)					this->oninputdown(_f,e,null(),null(),null());
            				}
            				else {
HXLINE( 542)					this->_named_input_released->set(_f,false);
HXLINE( 544)					this->_named_input_down->remove(_f);
HXLINE( 546)					this->oninputup(_f,e,null(),null(),null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,check_named_keys,(void))

void Input_obj::check_named_mouse( ::luxe::MouseEvent e,hx::Null< bool >  __o__down){
bool _down = __o__down.Default(false);
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_553_check_named_mouse)
HXLINE( 555)		::Array< ::String > _fired = ::Array_obj< ::String >::__new(0);
HXLINE( 556)		{
HXLINE( 556)			 ::Dynamic _name = this->mouse_bindings->keys();
HXDLIN( 556)			while(( (bool)(_name->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 556)				::String _name1 = ( (::String)(_name->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 558)				 ::haxe::ds::IntMap _b = this->mouse_bindings->get(_name1).StaticCast<  ::haxe::ds::IntMap >();
HXLINE( 559)				if (_b->exists(e->button)) {
HXLINE( 560)					if (!(::Lambda_obj::has(_fired,_name1))) {
HXLINE( 561)						_fired->push(_name1);
            					}
            				}
            			}
            		}
HXLINE( 567)		{
HXLINE( 567)			int _g = (int)0;
HXDLIN( 567)			while((_g < _fired->length)){
HXLINE( 567)				::String _f = _fired->__get(_g);
HXDLIN( 567)				_g = (_g + (int)1);
HXLINE( 568)				if (_down) {
HXLINE( 571)					this->_named_input_pressed->set(_f,false);
HXLINE( 573)					this->_named_input_down->set(_f,true);
HXLINE( 575)					this->oninputdown(_f,null(),e,null(),null());
            				}
            				else {
HXLINE( 580)					this->_named_input_released->set(_f,false);
HXLINE( 582)					this->_named_input_down->remove(_f);
HXLINE( 584)					this->oninputup(_f,null(),e,null(),null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,check_named_mouse,(void))

void Input_obj::check_named_gamepad_buttons( ::luxe::GamepadEvent e,hx::Null< bool >  __o__down){
bool _down = __o__down.Default(false);
            	HX_STACKFRAME(&_hx_pos_0492d5b00f8cb3d3_591_check_named_gamepad_buttons)
HXLINE( 593)		::Array< ::String > _fired = ::Array_obj< ::String >::__new(0);
HXLINE( 594)		{
HXLINE( 594)			 ::Dynamic _name = this->gamepad_bindings->keys();
HXDLIN( 594)			while(( (bool)(_name->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 594)				::String _name1 = ( (::String)(_name->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 596)				 ::haxe::ds::IntMap _b = this->gamepad_bindings->get(_name1).StaticCast<  ::haxe::ds::IntMap >();
HXLINE( 597)				if (_b->exists(e->button)) {
HXLINE( 598)					 ::Dynamic _kb = _b->get(e->button);
HXLINE( 599)					bool _accepted_gamepad;
HXDLIN( 599)					if (hx::IsNotNull( _kb )) {
HXLINE( 599)						_accepted_gamepad = hx::IsEq( _kb,e->gamepad );
            					}
            					else {
HXLINE( 599)						_accepted_gamepad = true;
            					}
HXLINE( 600)					bool _hx_tmp;
HXDLIN( 600)					if (!(::Lambda_obj::has(_fired,_name1))) {
HXLINE( 600)						_hx_tmp = _accepted_gamepad;
            					}
            					else {
HXLINE( 600)						_hx_tmp = false;
            					}
HXDLIN( 600)					if (_hx_tmp) {
HXLINE( 601)						_fired->push(_name1);
            					}
            				}
            			}
            		}
HXLINE( 606)		{
HXLINE( 606)			int _g = (int)0;
HXDLIN( 606)			while((_g < _fired->length)){
HXLINE( 606)				::String _f = _fired->__get(_g);
HXDLIN( 606)				_g = (_g + (int)1);
HXLINE( 607)				if (_down) {
HXLINE( 610)					this->_named_input_pressed->set(_f,false);
HXLINE( 612)					this->_named_input_down->set(_f,true);
HXLINE( 614)					this->oninputdown(_f,null(),null(),null(),e);
            				}
            				else {
HXLINE( 619)					this->_named_input_released->set(_f,false);
HXLINE( 621)					this->_named_input_down->remove(_f);
HXLINE( 623)					this->oninputup(_f,null(),null(),null(),e);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,check_named_gamepad_buttons,(void))


hx::ObjectPtr< Input_obj > Input_obj::__new( ::luxe::Engine _core) {
	hx::ObjectPtr< Input_obj > __this = new Input_obj();
	__this->__construct(_core);
	return __this;
}

hx::ObjectPtr< Input_obj > Input_obj::__alloc(hx::Ctx *_hx_ctx, ::luxe::Engine _core) {
	Input_obj *__this = (Input_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Input_obj), true, "luxe.Input"));
	*(void **)__this = Input_obj::_hx_vtable;
	__this->__construct(_core);
	return __this;
}

Input_obj::Input_obj()
{
}

void Input_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Input);
	HX_MARK_MEMBER_NAME(core,"core");
	HX_MARK_MEMBER_NAME(key_bindings,"key_bindings");
	HX_MARK_MEMBER_NAME(mouse_bindings,"mouse_bindings");
	HX_MARK_MEMBER_NAME(gamepad_bindings,"gamepad_bindings");
	HX_MARK_MEMBER_NAME(_named_input_released,"_named_input_released");
	HX_MARK_MEMBER_NAME(_named_input_pressed,"_named_input_pressed");
	HX_MARK_MEMBER_NAME(_named_input_down,"_named_input_down");
	HX_MARK_MEMBER_NAME(key_event,"key_event");
	HX_MARK_MEMBER_NAME(text_event,"text_event");
	HX_MARK_MEMBER_NAME(mouse_event,"mouse_event");
	HX_MARK_MEMBER_NAME(touch_event,"touch_event");
	HX_MARK_MEMBER_NAME(gamepad_event,"gamepad_event");
	HX_MARK_MEMBER_NAME(input_event,"input_event");
	HX_MARK_END_CLASS();
}

void Input_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(core,"core");
	HX_VISIT_MEMBER_NAME(key_bindings,"key_bindings");
	HX_VISIT_MEMBER_NAME(mouse_bindings,"mouse_bindings");
	HX_VISIT_MEMBER_NAME(gamepad_bindings,"gamepad_bindings");
	HX_VISIT_MEMBER_NAME(_named_input_released,"_named_input_released");
	HX_VISIT_MEMBER_NAME(_named_input_pressed,"_named_input_pressed");
	HX_VISIT_MEMBER_NAME(_named_input_down,"_named_input_down");
	HX_VISIT_MEMBER_NAME(key_event,"key_event");
	HX_VISIT_MEMBER_NAME(text_event,"text_event");
	HX_VISIT_MEMBER_NAME(mouse_event,"mouse_event");
	HX_VISIT_MEMBER_NAME(touch_event,"touch_event");
	HX_VISIT_MEMBER_NAME(gamepad_event,"gamepad_event");
	HX_VISIT_MEMBER_NAME(input_event,"input_event");
}

hx::Val Input_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { return hx::Val( core ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"keydown") ) { return hx::Val( keydown_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"process") ) { return hx::Val( process_dyn() ); }
		if (HX_FIELD_EQ(inName,"onkeyup") ) { return hx::Val( onkeyup_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"scandown") ) { return hx::Val( scandown_dyn() ); }
		if (HX_FIELD_EQ(inName,"bind_key") ) { return hx::Val( bind_key_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"key_event") ) { return hx::Val( key_event ); }
		if (HX_FIELD_EQ(inName,"inputdown") ) { return hx::Val( inputdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"mousedown") ) { return hx::Val( mousedown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmouseup") ) { return hx::Val( onmouseup_dyn() ); }
		if (HX_FIELD_EQ(inName,"onkeydown") ) { return hx::Val( onkeydown_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontouchup") ) { return hx::Val( ontouchup_dyn() ); }
		if (HX_FIELD_EQ(inName,"oninputup") ) { return hx::Val( oninputup_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"text_event") ) { return hx::Val( text_event ); }
		if (HX_FIELD_EQ(inName,"keypressed") ) { return hx::Val( keypressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"unbind_key") ) { return hx::Val( unbind_key_dyn() ); }
		if (HX_FIELD_EQ(inName,"bind_mouse") ) { return hx::Val( bind_mouse_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mouse_event") ) { return hx::Val( mouse_event ); }
		if (HX_FIELD_EQ(inName,"touch_event") ) { return hx::Val( touch_event ); }
		if (HX_FIELD_EQ(inName,"input_event") ) { return hx::Val( input_event ); }
		if (HX_FIELD_EQ(inName,"keyreleased") ) { return hx::Val( keyreleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"scanpressed") ) { return hx::Val( scanpressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"gamepaddown") ) { return hx::Val( gamepaddown_dyn() ); }
		if (HX_FIELD_EQ(inName,"gamepadaxis") ) { return hx::Val( gamepadaxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmousedown") ) { return hx::Val( onmousedown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmousemove") ) { return hx::Val( onmousemove_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontextinput") ) { return hx::Val( ontextinput_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontouchdown") ) { return hx::Val( ontouchdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontouchmove") ) { return hx::Val( ontouchmove_dyn() ); }
		if (HX_FIELD_EQ(inName,"ongamepadup") ) { return hx::Val( ongamepadup_dyn() ); }
		if (HX_FIELD_EQ(inName,"oninputdown") ) { return hx::Val( oninputdown_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"key_bindings") ) { return hx::Val( key_bindings ); }
		if (HX_FIELD_EQ(inName,"inputpressed") ) { return hx::Val( inputpressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"scanreleased") ) { return hx::Val( scanreleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"mousepressed") ) { return hx::Val( mousepressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"unbind_mouse") ) { return hx::Val( unbind_mouse_dyn() ); }
		if (HX_FIELD_EQ(inName,"bind_gamepad") ) { return hx::Val( bind_gamepad_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmousewheel") ) { return hx::Val( onmousewheel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepad_event") ) { return hx::Val( gamepad_event ); }
		if (HX_FIELD_EQ(inName,"inputreleased") ) { return hx::Val( inputreleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"mousereleased") ) { return hx::Val( mousereleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"ongamepadaxis") ) { return hx::Val( ongamepadaxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"ongamepaddown") ) { return hx::Val( ongamepaddown_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mouse_bindings") ) { return hx::Val( mouse_bindings ); }
		if (HX_FIELD_EQ(inName,"gamepadpressed") ) { return hx::Val( gamepadpressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"unbind_gamepad") ) { return hx::Val( unbind_gamepad_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"gamepadreleased") ) { return hx::Val( gamepadreleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"ongamepaddevice") ) { return hx::Val( ongamepaddevice_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gamepad_bindings") ) { return hx::Val( gamepad_bindings ); }
		if (HX_FIELD_EQ(inName,"check_named_keys") ) { return hx::Val( check_named_keys_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_named_input_down") ) { return hx::Val( _named_input_down ); }
		if (HX_FIELD_EQ(inName,"check_named_mouse") ) { return hx::Val( check_named_mouse_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_named_input_pressed") ) { return hx::Val( _named_input_pressed ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_named_input_released") ) { return hx::Val( _named_input_released ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"check_named_gamepad_buttons") ) { return hx::Val( check_named_gamepad_buttons_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Input_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { core=inValue.Cast<  ::luxe::Engine >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"key_event") ) { key_event=inValue.Cast<  ::luxe::KeyEvent >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"text_event") ) { text_event=inValue.Cast<  ::luxe::TextEvent >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mouse_event") ) { mouse_event=inValue.Cast<  ::luxe::MouseEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touch_event") ) { touch_event=inValue.Cast<  ::luxe::TouchEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"input_event") ) { input_event=inValue.Cast<  ::luxe::InputEvent >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"key_bindings") ) { key_bindings=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepad_event") ) { gamepad_event=inValue.Cast<  ::luxe::GamepadEvent >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mouse_bindings") ) { mouse_bindings=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gamepad_bindings") ) { gamepad_bindings=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_named_input_down") ) { _named_input_down=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_named_input_pressed") ) { _named_input_pressed=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_named_input_released") ) { _named_input_released=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Input_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"));
	outFields->push(HX_HCSTRING("key_bindings","\x6e","\x13","\x38","\x46"));
	outFields->push(HX_HCSTRING("mouse_bindings","\x28","\xc6","\x4d","\x00"));
	outFields->push(HX_HCSTRING("gamepad_bindings","\x2c","\xcc","\xd5","\xc5"));
	outFields->push(HX_HCSTRING("_named_input_released","\xb7","\x45","\x2d","\x4a"));
	outFields->push(HX_HCSTRING("_named_input_pressed","\xe8","\x52","\xd1","\x13"));
	outFields->push(HX_HCSTRING("_named_input_down","\x5c","\x30","\x1f","\x6d"));
	outFields->push(HX_HCSTRING("key_event","\x3a","\x1a","\x1f","\xd5"));
	outFields->push(HX_HCSTRING("text_event","\xc8","\x1b","\x08","\x74"));
	outFields->push(HX_HCSTRING("mouse_event","\x40","\xcf","\x9f","\x32"));
	outFields->push(HX_HCSTRING("touch_event","\x5a","\x00","\x4e","\xa2"));
	outFields->push(HX_HCSTRING("gamepad_event","\xbc","\x9e","\xd9","\x5b"));
	outFields->push(HX_HCSTRING("input_event","\xe5","\x76","\x4b","\x32"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Input_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::Engine*/ ,(int)offsetof(Input_obj,core),HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Input_obj,key_bindings),HX_HCSTRING("key_bindings","\x6e","\x13","\x38","\x46")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Input_obj,mouse_bindings),HX_HCSTRING("mouse_bindings","\x28","\xc6","\x4d","\x00")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Input_obj,gamepad_bindings),HX_HCSTRING("gamepad_bindings","\x2c","\xcc","\xd5","\xc5")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Input_obj,_named_input_released),HX_HCSTRING("_named_input_released","\xb7","\x45","\x2d","\x4a")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Input_obj,_named_input_pressed),HX_HCSTRING("_named_input_pressed","\xe8","\x52","\xd1","\x13")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Input_obj,_named_input_down),HX_HCSTRING("_named_input_down","\x5c","\x30","\x1f","\x6d")},
	{hx::fsObject /*::luxe::KeyEvent*/ ,(int)offsetof(Input_obj,key_event),HX_HCSTRING("key_event","\x3a","\x1a","\x1f","\xd5")},
	{hx::fsObject /*::luxe::TextEvent*/ ,(int)offsetof(Input_obj,text_event),HX_HCSTRING("text_event","\xc8","\x1b","\x08","\x74")},
	{hx::fsObject /*::luxe::MouseEvent*/ ,(int)offsetof(Input_obj,mouse_event),HX_HCSTRING("mouse_event","\x40","\xcf","\x9f","\x32")},
	{hx::fsObject /*::luxe::TouchEvent*/ ,(int)offsetof(Input_obj,touch_event),HX_HCSTRING("touch_event","\x5a","\x00","\x4e","\xa2")},
	{hx::fsObject /*::luxe::GamepadEvent*/ ,(int)offsetof(Input_obj,gamepad_event),HX_HCSTRING("gamepad_event","\xbc","\x9e","\xd9","\x5b")},
	{hx::fsObject /*::luxe::InputEvent*/ ,(int)offsetof(Input_obj,input_event),HX_HCSTRING("input_event","\xe5","\x76","\x4b","\x32")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Input_obj_sStaticStorageInfo = 0;
#endif

static ::String Input_obj_sMemberFields[] = {
	HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"),
	HX_HCSTRING("key_bindings","\x6e","\x13","\x38","\x46"),
	HX_HCSTRING("mouse_bindings","\x28","\xc6","\x4d","\x00"),
	HX_HCSTRING("gamepad_bindings","\x2c","\xcc","\xd5","\xc5"),
	HX_HCSTRING("_named_input_released","\xb7","\x45","\x2d","\x4a"),
	HX_HCSTRING("_named_input_pressed","\xe8","\x52","\xd1","\x13"),
	HX_HCSTRING("_named_input_down","\x5c","\x30","\x1f","\x6d"),
	HX_HCSTRING("key_event","\x3a","\x1a","\x1f","\xd5"),
	HX_HCSTRING("text_event","\xc8","\x1b","\x08","\x74"),
	HX_HCSTRING("mouse_event","\x40","\xcf","\x9f","\x32"),
	HX_HCSTRING("touch_event","\x5a","\x00","\x4e","\xa2"),
	HX_HCSTRING("gamepad_event","\xbc","\x9e","\xd9","\x5b"),
	HX_HCSTRING("input_event","\xe5","\x76","\x4b","\x32"),
	HX_HCSTRING("inputpressed","\xd8","\x03","\xc2","\x04"),
	HX_HCSTRING("inputreleased","\xc7","\x66","\xd7","\x2b"),
	HX_HCSTRING("inputdown","\x6c","\x89","\xbf","\x1e"),
	HX_HCSTRING("keypressed","\xe3","\x4a","\x1d","\xdb"),
	HX_HCSTRING("keyreleased","\x5c","\x49","\x5a","\xe5"),
	HX_HCSTRING("keydown","\x81","\x3d","\x6e","\xb1"),
	HX_HCSTRING("scanpressed","\xc5","\x2e","\xc3","\xfb"),
	HX_HCSTRING("scanreleased","\x3a","\xcb","\xdb","\x55"),
	HX_HCSTRING("scandown","\x5f","\xf8","\x95","\x27"),
	HX_HCSTRING("mousepressed","\x1d","\xfb","\x3a","\x4e"),
	HX_HCSTRING("mousereleased","\xe2","\xcb","\x36","\x2c"),
	HX_HCSTRING("mousedown","\x07","\x85","\xe9","\x03"),
	HX_HCSTRING("gamepadpressed","\x21","\xb8","\x96","\x37"),
	HX_HCSTRING("gamepadreleased","\x5e","\x72","\x20","\x73"),
	HX_HCSTRING("gamepaddown","\x83","\x3d","\xe7","\xe7"),
	HX_HCSTRING("gamepadaxis","\xc2","\x61","\xf2","\xe5"),
	HX_HCSTRING("bind_key","\xdd","\xe6","\x0d","\xc2"),
	HX_HCSTRING("unbind_key","\x36","\xce","\xd1","\x47"),
	HX_HCSTRING("bind_mouse","\xe3","\xbe","\xe1","\xfb"),
	HX_HCSTRING("unbind_mouse","\x7c","\xee","\xf0","\x67"),
	HX_HCSTRING("bind_gamepad","\xdf","\xb4","\x0c","\xd0"),
	HX_HCSTRING("unbind_gamepad","\xb8","\xbc","\xf9","\xc1"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("process","\x6f","\xa2","\x4a","\xf1"),
	HX_HCSTRING("onmousedown","\x08","\x88","\x59","\x84"),
	HX_HCSTRING("onmouseup","\x81","\xa0","\xcc","\xca"),
	HX_HCSTRING("onmousemove","\xb7","\x72","\x4c","\x8a"),
	HX_HCSTRING("onmousewheel","\x35","\x56","\xec","\x35"),
	HX_HCSTRING("onkeydown","\x42","\xce","\xc7","\xbb"),
	HX_HCSTRING("onkeyup","\x3b","\x04","\x0f","\xe2"),
	HX_HCSTRING("ontextinput","\x3e","\xe7","\x4d","\x44"),
	HX_HCSTRING("ontouchdown","\xa2","\x5e","\x71","\x9d"),
	HX_HCSTRING("ontouchup","\x9b","\xbc","\x51","\xe3"),
	HX_HCSTRING("ontouchmove","\x51","\x49","\x64","\xa3"),
	HX_HCSTRING("ongamepadaxis","\x03","\xe7","\xa9","\x64"),
	HX_HCSTRING("ongamepaddown","\xc4","\xc2","\x9e","\x66"),
	HX_HCSTRING("ongamepadup","\x3d","\x74","\xa8","\xdf"),
	HX_HCSTRING("ongamepaddevice","\x78","\x83","\x39","\x9b"),
	HX_HCSTRING("oninputdown","\x6d","\x8c","\x2f","\x9f"),
	HX_HCSTRING("oninputup","\xa6","\x51","\x78","\xde"),
	HX_HCSTRING("check_named_keys","\xd1","\xa8","\xea","\xe8"),
	HX_HCSTRING("check_named_mouse","\xa8","\x50","\xcf","\x11"),
	HX_HCSTRING("check_named_gamepad_buttons","\xa6","\x31","\x6e","\x04"),
	::String(null()) };

static void Input_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Input_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Input_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Input_obj::__mClass,"__mClass");
};

#endif

hx::Class Input_obj::__mClass;

void Input_obj::__register()
{
	hx::Object *dummy = new Input_obj;
	Input_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Input","\x32","\xb5","\x12","\x75");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Input_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Input_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Input_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Input_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Input_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Input_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
