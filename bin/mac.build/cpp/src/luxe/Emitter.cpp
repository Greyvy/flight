// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_61ff1f52cff36728_19_new,"luxe.Emitter","new",0xbd9e6488,"luxe.Emitter.new","luxe/Emitter.hx",19,0xe597ef29)
HX_LOCAL_STACK_FRAME(_hx_pos_61ff1f52cff36728_38__emitter_destroy,"luxe.Emitter","_emitter_destroy",0x684a0f42,"luxe.Emitter._emitter_destroy","luxe/Emitter.hx",38,0xe597ef29)
HX_LOCAL_STACK_FRAME(_hx_pos_61ff1f52cff36728_60_emit,"luxe.Emitter","emit",0x270cad2b,"luxe.Emitter.emit","luxe/Emitter.hx",60,0xe597ef29)
HX_LOCAL_STACK_FRAME(_hx_pos_61ff1f52cff36728_86_on,"luxe.Emitter","on",0x64b989f7,"luxe.Emitter.on","luxe/Emitter.hx",86,0xe597ef29)
HX_LOCAL_STACK_FRAME(_hx_pos_61ff1f52cff36728_111_off,"luxe.Emitter","off",0xbd9f2797,"luxe.Emitter.off","luxe/Emitter.hx",111,0xe597ef29)
HX_LOCAL_STACK_FRAME(_hx_pos_61ff1f52cff36728_140_connections,"luxe.Emitter","connections",0x18f076bd,"luxe.Emitter.connections","luxe/Emitter.hx",140,0xe597ef29)
HX_LOCAL_STACK_FRAME(_hx_pos_61ff1f52cff36728_158__check,"luxe.Emitter","_check",0x5c9854e1,"luxe.Emitter._check","luxe/Emitter.hx",158,0xe597ef29)
namespace luxe{

void Emitter_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_61ff1f52cff36728_19_new)
HXLINE( 156)		this->_checking = false;
HXLINE(  31)		this->_to_remove =  ::List_obj::__alloc( HX_CTX );
HXLINE(  32)		this->connected =  ::List_obj::__alloc( HX_CTX );
HXLINE(  34)		this->bindings =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}

Dynamic Emitter_obj::__CreateEmpty() { return new Emitter_obj; }

void *Emitter_obj::_hx_vtable = 0;

Dynamic Emitter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Emitter_obj > _hx_result = new Emitter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Emitter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0bbca018;
}

void Emitter_obj::_emitter_destroy(){
            	HX_STACKFRAME(&_hx_pos_61ff1f52cff36728_38__emitter_destroy)
HXLINE(  39)		while((this->_to_remove->length > (int)0)){
HXLINE(  40)			 ::Dynamic _node = this->_to_remove->pop();
HXLINE(  41)			_node->__SetField(HX_("event",1a,c8,c4,75),null(),hx::paccDynamic);
HXLINE(  42)			_node->__SetField(HX_("handler",ca,af,d5,45),null(),hx::paccDynamic);
HXLINE(  43)			_node = null();
            		}
HXLINE(  46)		while((this->connected->length > (int)0)){
HXLINE(  47)			 ::Dynamic _node1 = this->connected->pop();
HXLINE(  48)			_node1->__SetField(HX_("event",1a,c8,c4,75),null(),hx::paccDynamic);
HXLINE(  49)			_node1->__SetField(HX_("handler",ca,af,d5,45),null(),hx::paccDynamic);
HXLINE(  50)			_node1 = null();
            		}
HXLINE(  53)		this->_to_remove = null();
HXLINE(  54)		this->connected = null();
HXLINE(  55)		this->bindings = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Emitter_obj,_emitter_destroy,(void))

void Emitter_obj::emit( ::Dynamic event, ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_61ff1f52cff36728_60_emit)
HXLINE(  62)		if (hx::IsNull( this->bindings )) {
HXLINE(  62)			return;
            		}
HXLINE(  64)		this->_check();
HXLINE(  66)		this->_checking = true;
HXLINE(  68)		::Array< ::Dynamic> _list = ( (::Array< ::Dynamic>)(this->bindings->get(( (int)(event) ))) );
HXLINE(  69)		bool _hx_tmp;
HXDLIN(  69)		if (hx::IsNotNull( _list )) {
HXLINE(  69)			_hx_tmp = (_list->length > (int)0);
            		}
            		else {
HXLINE(  69)			_hx_tmp = false;
            		}
HXDLIN(  69)		if (_hx_tmp) {
HXLINE(  70)			int _g = (int)0;
HXDLIN(  70)			while((_g < _list->length)){
HXLINE(  70)				 ::Dynamic handler = _list->__get(_g);
HXDLIN(  70)				_g = (_g + (int)1);
HXLINE(  72)				handler(data);
            			}
            		}
HXLINE(  76)		this->_checking = false;
HXLINE(  80)		this->_check();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Emitter_obj,emit,(void))

void Emitter_obj::on( ::Dynamic event, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_61ff1f52cff36728_86_on)
HXLINE(  88)		if (hx::IsNull( this->bindings )) {
HXLINE(  88)			return;
            		}
HXLINE(  90)		this->_check();
HXLINE(  94)		if (!(this->bindings->exists(( (int)(event) )))) {
HXLINE(  96)			this->bindings->set(( (int)(event) ),::Array_obj< ::Dynamic>::__new(1)->init(0,handler));
HXLINE(  97)			this->connected->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("handler",ca,af,d5,45),handler)
            				->setFixed(1,HX_("event",1a,c8,c4,75),event)));
            		}
            		else {
HXLINE( 100)			::Array< ::Dynamic> _list = ( (::Array< ::Dynamic>)(this->bindings->get(( (int)(event) ))) );
HXLINE( 101)			if ((_list->indexOf(handler,null()) == (int)-1)) {
HXLINE( 102)				_list->push(handler);
HXLINE( 103)				this->connected->push( ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("handler",ca,af,d5,45),handler)
            					->setFixed(1,HX_("event",1a,c8,c4,75),event)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Emitter_obj,on,(void))

bool Emitter_obj::off( ::Dynamic event, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_61ff1f52cff36728_111_off)
HXLINE( 113)		if (hx::IsNull( this->bindings )) {
HXLINE( 113)			return false;
            		}
HXLINE( 115)		this->_check();
HXLINE( 117)		bool _success = false;
HXLINE( 119)		if (this->bindings->exists(( (int)(event) ))) {
HXLINE( 123)			this->_to_remove->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("handler",ca,af,d5,45),handler)
            				->setFixed(1,HX_("event",1a,c8,c4,75),event)));
HXLINE( 125)			{
HXLINE( 125)				 ::_List::ListNode _g_head = this->connected->h;
HXDLIN( 125)				while(hx::IsNotNull( _g_head )){
HXLINE( 125)					 ::Dynamic val = _g_head->item;
HXDLIN( 125)					_g_head = _g_head->next;
HXDLIN( 125)					 ::Dynamic _info = val;
HXLINE( 126)					bool _hx_tmp;
HXDLIN( 126)					if (hx::IsEq(  ::Dynamic(_info->__Field(HX_("event",1a,c8,c4,75),hx::paccDynamic)),event )) {
HXLINE( 126)						_hx_tmp = hx::IsEq( _info->__Field(HX_("handler",ca,af,d5,45),hx::paccDynamic),handler );
            					}
            					else {
HXLINE( 126)						_hx_tmp = false;
            					}
HXDLIN( 126)					if (_hx_tmp) {
HXLINE( 127)						this->connected->remove(_info);
            					}
            				}
            			}
HXLINE( 132)			_success = true;
            		}
HXLINE( 136)		return _success;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Emitter_obj,off,return )

::Array< ::Dynamic> Emitter_obj::connections( ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_61ff1f52cff36728_140_connections)
HXLINE( 142)		if (hx::IsNull( this->connected )) {
HXLINE( 142)			return null();
            		}
HXLINE( 144)		::Array< ::Dynamic> _list = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 146)		{
HXLINE( 146)			 ::_List::ListNode _g_head = this->connected->h;
HXDLIN( 146)			while(hx::IsNotNull( _g_head )){
HXLINE( 146)				 ::Dynamic val = _g_head->item;
HXDLIN( 146)				_g_head = _g_head->next;
HXDLIN( 146)				 ::Dynamic _info = val;
HXLINE( 147)				if (hx::IsEq( _info->__Field(HX_("handler",ca,af,d5,45),hx::paccDynamic),handler )) {
HXLINE( 148)					_list->push(_info);
            				}
            			}
            		}
HXLINE( 152)		return _list;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Emitter_obj,connections,return )

void Emitter_obj::_check(){
            	HX_GC_STACKFRAME(&_hx_pos_61ff1f52cff36728_158__check)
HXLINE( 160)		bool _hx_tmp;
HXDLIN( 160)		if (!(this->_checking)) {
HXLINE( 160)			_hx_tmp = hx::IsNull( this->_to_remove );
            		}
            		else {
HXLINE( 160)			_hx_tmp = true;
            		}
HXDLIN( 160)		if (_hx_tmp) {
HXLINE( 161)			return;
            		}
HXLINE( 164)		this->_checking = true;
HXLINE( 166)		if ((this->_to_remove->length > (int)0)) {
HXLINE( 168)			{
HXLINE( 168)				 ::_List::ListNode _g_head = this->_to_remove->h;
HXDLIN( 168)				while(hx::IsNotNull( _g_head )){
HXLINE( 168)					 ::Dynamic val = _g_head->item;
HXDLIN( 168)					_g_head = _g_head->next;
HXDLIN( 168)					 ::Dynamic _node = val;
HXLINE( 170)					::Array< ::Dynamic> _list = ( (::Array< ::Dynamic>)(this->bindings->get(( (int)(_node->__Field(HX_("event",1a,c8,c4,75),hx::paccDynamic)) ))) );
HXLINE( 174)					if (hx::IsNotNull( _list )) {
HXLINE( 176)						_list->remove( ::Dynamic(_node->__Field(HX_("handler",ca,af,d5,45),hx::paccDynamic)));
HXLINE( 179)						if ((_list->length == (int)0)) {
HXLINE( 180)							this->bindings->remove(( (int)(_node->__Field(HX_("event",1a,c8,c4,75),hx::paccDynamic)) ));
            						}
            					}
            				}
            			}
HXLINE( 187)			this->_to_remove = null();
HXLINE( 188)			this->_to_remove =  ::List_obj::__alloc( HX_CTX );
            		}
HXLINE( 192)		this->_checking = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Emitter_obj,_check,(void))


hx::ObjectPtr< Emitter_obj > Emitter_obj::__new() {
	hx::ObjectPtr< Emitter_obj > __this = new Emitter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Emitter_obj > Emitter_obj::__alloc(hx::Ctx *_hx_ctx) {
	Emitter_obj *__this = (Emitter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Emitter_obj), true, "luxe.Emitter"));
	*(void **)__this = Emitter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Emitter_obj::Emitter_obj()
{
}

void Emitter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Emitter);
	HX_MARK_MEMBER_NAME(bindings,"bindings");
	HX_MARK_MEMBER_NAME(connected,"connected");
	HX_MARK_MEMBER_NAME(_to_remove,"_to_remove");
	HX_MARK_MEMBER_NAME(_checking,"_checking");
	HX_MARK_END_CLASS();
}

void Emitter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bindings,"bindings");
	HX_VISIT_MEMBER_NAME(connected,"connected");
	HX_VISIT_MEMBER_NAME(_to_remove,"_to_remove");
	HX_VISIT_MEMBER_NAME(_checking,"_checking");
}

hx::Val Emitter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"on") ) { return hx::Val( on_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"off") ) { return hx::Val( off_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"emit") ) { return hx::Val( emit_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_check") ) { return hx::Val( _check_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bindings") ) { return hx::Val( bindings ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { return hx::Val( connected ); }
		if (HX_FIELD_EQ(inName,"_checking") ) { return hx::Val( _checking ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_to_remove") ) { return hx::Val( _to_remove ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"connections") ) { return hx::Val( connections_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_emitter_destroy") ) { return hx::Val( _emitter_destroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Emitter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"bindings") ) { bindings=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { connected=inValue.Cast<  ::List >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_checking") ) { _checking=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_to_remove") ) { _to_remove=inValue.Cast<  ::List >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Emitter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bindings","\x8e","\x51","\xac","\xc8"));
	outFields->push(HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"));
	outFields->push(HX_HCSTRING("_to_remove","\x89","\x39","\xe5","\x30"));
	outFields->push(HX_HCSTRING("_checking","\x79","\x18","\x91","\xf4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Emitter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Emitter_obj,bindings),HX_HCSTRING("bindings","\x8e","\x51","\xac","\xc8")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Emitter_obj,connected),HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Emitter_obj,_to_remove),HX_HCSTRING("_to_remove","\x89","\x39","\xe5","\x30")},
	{hx::fsBool,(int)offsetof(Emitter_obj,_checking),HX_HCSTRING("_checking","\x79","\x18","\x91","\xf4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Emitter_obj_sStaticStorageInfo = 0;
#endif

static ::String Emitter_obj_sMemberFields[] = {
	HX_HCSTRING("bindings","\x8e","\x51","\xac","\xc8"),
	HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"),
	HX_HCSTRING("_to_remove","\x89","\x39","\xe5","\x30"),
	HX_HCSTRING("_emitter_destroy","\x6a","\x1c","\x8c","\x8c"),
	HX_HCSTRING("emit","\x53","\x9e","\x15","\x43"),
	HX_HCSTRING("on","\x1f","\x61","\x00","\x00"),
	HX_HCSTRING("off","\x6f","\x93","\x54","\x00"),
	HX_HCSTRING("connections","\x95","\x7a","\x39","\x7b"),
	HX_HCSTRING("_checking","\x79","\x18","\x91","\xf4"),
	HX_HCSTRING("_check","\x09","\xe0","\x9d","\x41"),
	::String(null()) };

static void Emitter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Emitter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Emitter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Emitter_obj::__mClass,"__mClass");
};

#endif

hx::Class Emitter_obj::__mClass;

void Emitter_obj::__register()
{
	hx::Object *dummy = new Emitter_obj;
	Emitter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Emitter","\x96","\xc0","\xe7","\xd1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Emitter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Emitter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Emitter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Emitter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Emitter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Emitter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
