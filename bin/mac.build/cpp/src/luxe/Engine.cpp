// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Resource
#include <haxe/Resource.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_luxe_Audio
#include <luxe/Audio.h>
#endif
#ifndef INCLUDED_luxe_Camera
#include <luxe/Camera.h>
#endif
#ifndef INCLUDED_luxe_Cursor
#include <luxe/Cursor.h>
#endif
#ifndef INCLUDED_luxe_Debug
#include <luxe/Debug.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Draw
#include <luxe/Draw.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_Events
#include <luxe/Events.h>
#endif
#ifndef INCLUDED_luxe_Game
#include <luxe/Game.h>
#endif
#ifndef INCLUDED_luxe_GamepadEvent
#include <luxe/GamepadEvent.h>
#endif
#ifndef INCLUDED_luxe_IO
#include <luxe/IO.h>
#endif
#ifndef INCLUDED_luxe_Input
#include <luxe/Input.h>
#endif
#ifndef INCLUDED_luxe_KeyEvent
#include <luxe/KeyEvent.h>
#endif
#ifndef INCLUDED_luxe_MouseEvent
#include <luxe/MouseEvent.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Parcel
#include <luxe/Parcel.h>
#endif
#ifndef INCLUDED_luxe_Physics
#include <luxe/Physics.h>
#endif
#ifndef INCLUDED_luxe_Resources
#include <luxe/Resources.h>
#endif
#ifndef INCLUDED_luxe_Scene
#include <luxe/Scene.h>
#endif
#ifndef INCLUDED_luxe_Screen
#include <luxe/Screen.h>
#endif
#ifndef INCLUDED_luxe_Tag
#include <luxe/Tag.h>
#endif
#ifndef INCLUDED_luxe_Timer
#include <luxe/Timer.h>
#endif
#ifndef INCLUDED_luxe_TouchEvent
#include <luxe/TouchEvent.h>
#endif
#ifndef INCLUDED_luxe_utils_Utils
#include <luxe/utils/Utils.h>
#endif
#ifndef INCLUDED_phoenix_Camera
#include <phoenix/Camera.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_api_buffers_TAError
#include <snow/api/buffers/TAError.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_Runtime
#include <snow/modules/sdl/Runtime.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Asset
#include <snow/systems/assets/Asset.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetImage
#include <snow/systems/assets/AssetImage.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Assets
#include <snow/systems/assets/Assets.h>
#endif
#ifndef INCLUDED_snow_types_Error
#include <snow/types/Error.h>
#endif
#ifndef INCLUDED_snow_types_ModState
#include <snow/types/ModState.h>
#endif
#ifndef INCLUDED_snow_types_SystemEvent
#include <snow/types/SystemEvent.h>
#endif
#ifndef INCLUDED_snow_types_WindowEvent
#include <snow/types/WindowEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_35_new,"luxe.Engine","new",0x68f3cf8c,"luxe.Engine.new","luxe/Engine.hx",35,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_89_run,"luxe.Engine","run",0x68f6e677,"luxe.Engine.run","luxe/Engine.hx",89,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_100_shutdown,"luxe.Engine","shutdown",0xfac37dea,"luxe.Engine.shutdown","luxe/Engine.hx",100,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_113_runtime_info,"luxe.Engine","runtime_info",0x2d29cbc9,"luxe.Engine.runtime_info","luxe/Engine.hx",113,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_120_on,"luxe.Engine","on",0xf7496b73,"luxe.Engine.on","luxe/Engine.hx",120,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_126_off,"luxe.Engine","off",0x68f4929b,"luxe.Engine.off","luxe/Engine.hx",126,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_132_emit,"luxe.Engine","emit",0x6674e5a7,"luxe.Engine.emit","luxe/Engine.hx",132,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_137_ready,"luxe.Engine","ready",0xb6b9c28f,"luxe.Engine.ready","luxe/Engine.hx",137,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_166_ready,"luxe.Engine","ready",0xb6b9c28f,"luxe.Engine.ready","luxe/Engine.hx",166,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_167_ready,"luxe.Engine","ready",0xb6b9c28f,"luxe.Engine.ready","luxe/Engine.hx",167,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_183_ondestroy,"luxe.Engine","ondestroy",0x5fb965e7,"luxe.Engine.ondestroy","luxe/Engine.hx",183,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_223_init,"luxe.Engine","init",0x691a8264,"luxe.Engine.init","luxe/Engine.hx",223,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_295_internal_pre_ready,"luxe.Engine","internal_pre_ready",0x89eba799,"luxe.Engine.internal_pre_ready","luxe/Engine.hx",295,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_311_internal_pre_ready,"luxe.Engine","internal_pre_ready",0x89eba799,"luxe.Engine.internal_pre_ready","luxe/Engine.hx",311,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_327_internal_ready,"luxe.Engine","internal_ready",0x7bd612f5,"luxe.Engine.internal_ready","luxe/Engine.hx",327,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_360_onevent,"luxe.Engine","onevent",0xa081fbc7,"luxe.Engine.onevent","luxe/Engine.hx",360,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_372_update,"luxe.Engine","update",0xb6444a5d,"luxe.Engine.update","luxe/Engine.hx",372,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_424_tick,"luxe.Engine","tick",0x705c0ab1,"luxe.Engine.tick","luxe/Engine.hx",424,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_441_render,"luxe.Engine","render",0x34682faa,"luxe.Engine.render","luxe/Engine.hx",441,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_465_ontickstart,"luxe.Engine","ontickstart",0x45416e12,"luxe.Engine.ontickstart","luxe/Engine.hx",465,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_473_ontickend,"luxe.Engine","ontickend",0x5618318b,"luxe.Engine.ontickend","luxe/Engine.hx",473,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_481_window_event,"luxe.Engine","window_event",0x4a3cf29f,"luxe.Engine.window_event","luxe/Engine.hx",481,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_549_onmousedown,"luxe.Engine","onmousedown",0xdd0e9334,"luxe.Engine.onmousedown","luxe/Engine.hx",549,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_562_onmouseup,"luxe.Engine","onmouseup",0xfba648ad,"luxe.Engine.onmouseup","luxe/Engine.hx",562,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_575_onmousemove,"luxe.Engine","onmousemove",0xe3017de3,"luxe.Engine.onmousemove","luxe/Engine.hx",575,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_588_onmousewheel,"luxe.Engine","onmousewheel",0x7ba11189,"luxe.Engine.onmousewheel","luxe/Engine.hx",588,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_598_onkeydown,"luxe.Engine","onkeydown",0xeca1766e,"luxe.Engine.onkeydown","luxe/Engine.hx",598,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_606_onkeyup,"luxe.Engine","onkeyup",0x09bc0967,"luxe.Engine.onkeyup","luxe/Engine.hx",606,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_614_ontextinput,"luxe.Engine","ontextinput",0x9d02f26a,"luxe.Engine.ontextinput","luxe/Engine.hx",614,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_624_ontouchdown,"luxe.Engine","ontouchdown",0xf62669ce,"luxe.Engine.ontouchdown","luxe/Engine.hx",624,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_632_ontouchup,"luxe.Engine","ontouchup",0x142b64c7,"luxe.Engine.ontouchup","luxe/Engine.hx",632,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_640_ontouchmove,"luxe.Engine","ontouchmove",0xfc19547d,"luxe.Engine.ontouchmove","luxe/Engine.hx",640,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_650_oninputdown,"luxe.Engine","oninputdown",0xf7e49799,"luxe.Engine.oninputdown","luxe/Engine.hx",650,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_658_oninputup,"luxe.Engine","oninputup",0x0f51f9d2,"luxe.Engine.oninputup","luxe/Engine.hx",658,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_668_ongamepadaxis,"luxe.Engine","ongamepadaxis",0x1d19152f,"luxe.Engine.ongamepadaxis","luxe/Engine.hx",668,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_676_ongamepaddown,"luxe.Engine","ongamepaddown",0x1f0df0f0,"luxe.Engine.ongamepaddown","luxe/Engine.hx",676,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_684_ongamepadup,"luxe.Engine","ongamepadup",0x385d7f69,"luxe.Engine.ongamepadup","luxe/Engine.hx",684,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_692_ongamepaddevice,"luxe.Engine","ongamepaddevice",0xb07194a4,"luxe.Engine.ongamepaddevice","luxe/Engine.hx",692,0xb793dd43)
HX_LOCAL_STACK_FRAME(_hx_pos_0cfdf84c6d0da272_704_config,"luxe.Engine","config",0xf7111b16,"luxe.Engine.config","luxe/Engine.hx",704,0xb793dd43)
namespace luxe{

void Engine_obj::__construct( ::luxe::Game _game){
            	HX_GC_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_35_new)
HXLINE( 221)		this->pixel_scale = ((Float)1);
HXLINE(  67)		this->running = false;
HXLINE(  65)		this->auto_render = true;
HXLINE(  64)		this->headless = false;
HXLINE(  63)		this->inited = false;
HXLINE(  62)		this->has_shutdown = false;
HXLINE(  61)		this->shutting_down = false;
HXLINE(  42)		this->build = HX_("+11d8d774bd",11,21,75,0f);
HXLINE(  41)		this->version = HX_("dev",d5,39,4c,00);
HXLINE(  72)		super::__construct();
HXLINE(  74)		this->game = _game;
HXLINE(  77)		this->emitter =  ::luxe::Emitter_obj::__alloc( HX_CTX );
HXLINE(  80)		::Luxe_obj::core = hx::ObjectPtr<OBJ_>(this);
HXLINE(  81)		::Luxe_obj::utils =  ::luxe::utils::Utils_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic Engine_obj::__CreateEmpty() { return new Engine_obj; }

void *Engine_obj::_hx_vtable = 0;

Dynamic Engine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Engine_obj > _hx_result = new Engine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Engine_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0f556d20) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0f556d20;
	} else {
		return inClassId==(int)0x7e2b5c5e;
	}
}

void Engine_obj::run(){
            	HX_GC_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_89_run)
HXLINE(  91)		if ((this->running != false)) {
HXLINE(  91)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion(HX_("running == false",24,b9,38,cd)));
            		}
HXLINE(  93)		this->running = true;
HXLINE(  95)		 ::snow::Snow_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,run,(void))

void Engine_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_100_shutdown)
HXLINE( 103)		this->shutting_down = true;
HXLINE( 106)		{
HXLINE( 106)			 ::Dynamic func = this->app->shutdown_dyn();
HXDLIN( 106)			if (hx::IsNotNull( func )) {
HXLINE( 106)				::snow::Snow_obj::next_queue->push(func);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,shutdown,(void))

::String Engine_obj::runtime_info(){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_113_runtime_info)
HXDLIN( 113)		::String _hx_tmp = ((HX_("",00,00,00,00) + this->build) + HX_(" / debug:",78,a2,67,75));
HXDLIN( 113)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->app->debug)) + HX_(" / os:",05,42,bc,f0));
HXDLIN( 113)		return (((_hx_tmp1 + this->app->os) + HX_(" / platform:",d6,0a,95,7c)) + this->app->platform);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,runtime_info,return )

void Engine_obj::on(int event, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_120_on)
HXDLIN( 120)		this->emitter->on(event,handler);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,on,(void))

bool Engine_obj::off(int event, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_126_off)
HXDLIN( 126)		return this->emitter->off(event,handler);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,off,return )

void Engine_obj::emit(int event, ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_132_emit)
HXDLIN( 132)		this->emitter->emit(event,data);
HXDLIN( 132)		return;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,emit,(void))

void Engine_obj::ready(){
            	HX_GC_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_137_ready)
HXDLIN( 137)		 ::luxe::Engine _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 145)		this->version = ::haxe::Resource_obj::getString(HX_("version",18,e7,f1,7c));
HXLINE( 147)		::String _hx_tmp = this->version;
HXDLIN( 147)		this->build = (_hx_tmp + ::haxe::Resource_obj::getString(HX_("build",2e,db,ea,ba)));
HXLINE( 149)		 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 149)		::String _hx_tmp2 = ((HX_("",00,00,00,00) + this->build) + HX_(" / debug:",78,a2,67,75));
HXDLIN( 149)		::String _hx_tmp3 = ((_hx_tmp2 + ::Std_obj::string(this->app->debug)) + HX_(" / os:",05,42,bc,f0));
HXDLIN( 149)		_hx_tmp1((HX_("   i / luxe / ",b3,3f,91,b8) + (((_hx_tmp3 + this->app->os) + HX_(" / platform:",d6,0a,95,7c)) + this->app->platform)),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),149,HX_("luxe.Engine",9a,59,e2,5b),HX_("ready",63,a0,ba,e6)));
HXLINE( 158)		this->headless = ( (bool)(this->game_config->__Field(HX_("headless",79,4c,d6,48),hx::paccDynamic)) );
HXLINE( 159)		if (!(this->headless)) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::luxe::Engine,_gthis) HXARGC(1)
            			void _hx_run( ::snow::systems::assets::AssetImage asset){
            				HX_GC_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_166_ready)
HXLINE( 166)				_gthis->init(asset);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::luxe::Engine,_gthis) HXARGC(1)
            			void _hx_run( ::Dynamic error){
            				HX_GC_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_167_ready)
HXLINE( 168)				 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN( 168)				_hx_tmp4((HX_("   i / luxe / ",b3,3f,91,b8) + HX_("failed to load default font, things will probably not look right... $error",6e,ca,21,30)),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),168,HX_("luxe.Engine",9a,59,e2,5b),HX_("ready",63,a0,ba,e6)));
HXLINE( 169)				_gthis->init(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 161)			::String _font_name = HX_("default.png",7c,fa,a2,05);
HXLINE( 162)			 ::haxe::io::Bytes _bytes = ::haxe::Resource_obj::getBytes(_font_name);
HXDLIN( 162)			 ::Dynamic _byteLength = null();
HXDLIN( 162)			if (hx::IsNull( _byteLength )) {
HXLINE( 162)				_byteLength = _bytes->length;
            			}
HXDLIN( 162)			::Array< unsigned char > _buffer = _bytes->b;
HXDLIN( 162)			int _byteOffset = (int)0;
HXDLIN( 162)			int _byteLength1 = _byteLength;
HXDLIN( 162)			 ::snow::api::buffers::ArrayBufferView _view =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,(int)4);
HXDLIN( 162)			int _bytes_per_elem = _view->bytesPerElement;
HXDLIN( 162)			if ((_byteOffset < (int)0)) {
HXLINE( 162)				HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be positive (> 0)",07,9d,c2,39)));
            			}
HXDLIN( 162)			if ((hx::Mod(_byteOffset,_bytes_per_elem) != (int)0)) {
HXLINE( 162)				HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            			}
HXDLIN( 162)			int _src_bytelen = _buffer->length;
HXDLIN( 162)			int _new_range = (_byteOffset + _byteLength1);
HXDLIN( 162)			if ((_new_range > _src_bytelen)) {
HXLINE( 162)				HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            			}
HXDLIN( 162)			_view->buffer = _buffer;
HXDLIN( 162)			_view->byteOffset = _byteOffset;
HXDLIN( 162)			_view->byteLength = _byteLength1;
HXDLIN( 162)			_view->length = ::Std_obj::_hx_int(((Float)_byteLength1 / (Float)_bytes_per_elem));
HXDLIN( 162)			 ::snow::api::buffers::ArrayBufferView _font_image = _view;
HXLINE( 163)			 ::snow::api::Promise _font_load = ::snow::systems::assets::AssetImage_obj::load_from_bytes(this->app->assets,_font_name,_font_image);
HXLINE( 165)			_font_load->then( ::Dynamic(new _hx_Closure_0(_gthis)),null())->error( ::Dynamic(new _hx_Closure_1(_gthis)));
            		}
            		else {
HXLINE( 174)			this->auto_render = false;
HXLINE( 175)			this->init(null());
            		}
            	}


void Engine_obj::ondestroy(){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_183_ondestroy)
HXLINE( 185)		this->shutting_down = true;
HXLINE( 187)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 187)		_hx_tmp((HX_("   i / luxe / ",b3,3f,91,b8) + HX_("shutting down...",ce,07,39,4e)),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),187,HX_("luxe.Engine",9a,59,e2,5b),HX_("ondestroy",bb,bd,df,2e)));
HXLINE( 190)		this->emitter->emit((int)8,null());
HXLINE( 191)		this->game->ondestroy();
HXLINE( 194)		if (hx::IsNotNull( this->renderer )) {
HXLINE( 195)			this->renderer->destroy();
            		}
HXLINE( 198)		this->physics->destroy();
HXLINE( 199)		this->input->destroy();
HXLINE( 200)		this->audio->destroy();
HXLINE( 201)		this->timer->destroy();
HXLINE( 202)		this->events->destroy();
HXLINE( 203)		this->debug->destroy();
HXLINE( 206)		this->emitter = null();
HXLINE( 207)		this->input = null();
HXLINE( 208)		this->audio = null();
HXLINE( 209)		this->events = null();
HXLINE( 210)		this->timer = null();
HXLINE( 211)		this->debug = null();
HXLINE( 212)		::Luxe_obj::utils = null();
HXLINE( 215)		this->has_shutdown = true;
HXLINE( 217)		 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 217)		_hx_tmp1((HX_("   i / luxe / ",b3,3f,91,b8) + HX_("goodbye.",7d,89,ec,41)),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),217,HX_("luxe.Engine",9a,59,e2,5b),HX_("ondestroy",bb,bd,df,2e)));
            	}


void Engine_obj::init( ::snow::systems::assets::AssetImage asset){
            	HX_GC_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_223_init)
HXLINE( 229)		::Luxe_obj::debug = (this->debug =  ::luxe::Debug_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this)));
HXLINE( 230)		::Luxe_obj::io = (this->io =  ::luxe::IO_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this)));
HXLINE( 232)		this->draw =  ::luxe::Draw_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 233)		this->timer =  ::luxe::Timer_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 234)		this->events =  ::luxe::Events_obj::__alloc( HX_CTX );
HXLINE( 235)		this->audio =  ::luxe::Audio_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 236)		this->input =  ::luxe::Input_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 237)		this->physics =  ::luxe::Physics_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 239)		this->resources =  ::luxe::Resources_obj::__alloc( HX_CTX );
HXLINE( 240)		::Luxe_obj::resources = this->resources;
HXLINE( 242)		if (!(this->headless)) {
HXLINE( 243)			this->renderer =  ::phoenix::Renderer_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),asset);
HXLINE( 244)			::Luxe_obj::renderer = this->renderer;
            		}
HXLINE( 247)		int _render_w = this->app->runtime->window_w;
HXLINE( 248)		int _render_h = this->app->runtime->window_h;
HXLINE( 253)		this->pixel_scale = this->app->runtime->window_device_pixel_ratio();
HXLINE( 254)		int _hx_tmp = ::Math_obj::floor(((Float)_render_w / (Float)this->pixel_scale));
HXDLIN( 254)		this->screen =  ::luxe::Screen_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),_hx_tmp,::Math_obj::floor(((Float)_render_h / (Float)this->pixel_scale)));
HXLINE( 257)		this->debug->init();
HXLINE( 258)		this->io->init();
HXLINE( 259)		this->timer->init();
HXLINE( 260)		this->audio->init();
HXLINE( 261)		this->input->init();
HXLINE( 263)		if (!(this->headless)) {
HXLINE( 264)			this->renderer->init();
            		}
HXLINE( 267)		this->physics->init();
HXLINE( 269)		::Luxe_obj::audio = this->audio;
HXLINE( 270)		::Luxe_obj::draw = this->draw;
HXLINE( 271)		::Luxe_obj::events = this->events;
HXLINE( 272)		::Luxe_obj::timer = this->timer;
HXLINE( 273)		::Luxe_obj::input = this->input;
HXLINE( 275)		if (!(this->headless)) {
HXLINE( 276)			::Luxe_obj::camera =  ::luxe::Camera_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("name",4b,72,ff,48),HX_("default camera",24,50,2a,4c))
            				->setFixed(1,HX_("view",65,32,4f,4e),this->renderer->camera)));
            		}
HXLINE( 279)		::Luxe_obj::physics = this->physics;
HXLINE( 281)		this->scene =  ::luxe::Scene_obj::__alloc( HX_CTX ,HX_("default scene",ad,c4,21,0a));
HXLINE( 282)		::Luxe_obj::scene = this->scene;
HXLINE( 284)		if (!(this->headless)) {
HXLINE( 285)			this->scene->add(::Luxe_obj::camera);
HXLINE( 286)			this->debug->create_debug_console();
            		}
HXLINE( 289)		this->internal_pre_ready();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,init,(void))

void Engine_obj::internal_pre_ready(){
            	HX_GC_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_295_internal_pre_ready)
HXDLIN( 295)		if (!(this->headless)) {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::Dynamic _error){
            				HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_311_internal_pre_ready)
HXLINE( 312)				 ::Dynamic _default_parcel1 = ::haxe::Log_obj::trace;
HXDLIN( 312)				_default_parcel1((HX_("   i / luxe / ",b3,3f,91,b8) + HX_("config / preload / failed to load",3f,55,a0,ff)),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),312,HX_("luxe.Engine",9a,59,e2,5b),HX_("internal_pre_ready",45,b5,6d,32)));
HXLINE( 313)				HX_STACK_DO_THROW(::snow::types::Error_obj::error(_error));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 300)			 ::luxe::Parcel _default_parcel =  ::luxe::Parcel_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(11)
            				->setFixed(0,HX_("oncomplete",d8,18,cd,83),this->internal_ready_dyn())
            				->setFixed(1,HX_("onfailed",1c,48,17,93), ::Dynamic(new _hx_Closure_0()))
            				->setFixed(2,HX_("bytes",6b,08,98,bd), ::Dynamic( ::Dynamic(this->game_config->__Field(HX_("preload",c9,47,43,35),hx::paccDynamic))->__Field(HX_("bytes",6b,08,98,bd),hx::paccDynamic)))
            				->setFixed(3,HX_("system",ef,96,e2,f2),this->resources)
            				->setFixed(4,HX_("id",db,5b,00,00),HX_("default_parcel",c7,bb,e2,bd))
            				->setFixed(5,HX_("fonts",c4,b7,91,04), ::Dynamic( ::Dynamic(this->game_config->__Field(HX_("preload",c9,47,43,35),hx::paccDynamic))->__Field(HX_("fonts",c4,b7,91,04),hx::paccDynamic)))
            				->setFixed(6,HX_("texts",26,4b,99,0d), ::Dynamic( ::Dynamic(this->game_config->__Field(HX_("preload",c9,47,43,35),hx::paccDynamic))->__Field(HX_("texts",26,4b,99,0d),hx::paccDynamic)))
            				->setFixed(7,HX_("sounds",c4,a8,2e,32), ::Dynamic( ::Dynamic(this->game_config->__Field(HX_("preload",c9,47,43,35),hx::paccDynamic))->__Field(HX_("sounds",c4,a8,2e,32),hx::paccDynamic)))
            				->setFixed(8,HX_("jsons",4b,a1,d1,54), ::Dynamic( ::Dynamic(this->game_config->__Field(HX_("preload",c9,47,43,35),hx::paccDynamic))->__Field(HX_("jsons",4b,a1,d1,54),hx::paccDynamic)))
            				->setFixed(9,HX_("shaders",ae,81,86,5f), ::Dynamic( ::Dynamic(this->game_config->__Field(HX_("preload",c9,47,43,35),hx::paccDynamic))->__Field(HX_("shaders",ae,81,86,5f),hx::paccDynamic)))
            				->setFixed(10,HX_("textures",38,f7,ce,65), ::Dynamic( ::Dynamic(this->game_config->__Field(HX_("preload",c9,47,43,35),hx::paccDynamic))->__Field(HX_("textures",38,f7,ce,65),hx::paccDynamic)))));
HXLINE( 317)			_default_parcel->load(null());
            		}
            		else {
HXLINE( 321)			this->internal_ready(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,internal_pre_ready,(void))

void Engine_obj::internal_ready( ::luxe::Parcel _){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_327_internal_ready)
HXLINE( 329)		if (!(this->headless)) {
HXLINE( 333)			this->debug->start(::luxe::Tag_obj::update,(int)50);
HXLINE( 334)			this->debug->start(::luxe::Tag_obj::tick,(int)50);
            		}
HXLINE( 341)		this->game->ready();
HXLINE( 344)		if (!(this->shutting_down)) {
HXLINE( 348)			this->emitter->emit((int)2,null());
HXLINE( 349)			this->inited = true;
HXLINE( 352)			this->physics->reset();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,internal_ready,(void))

void Engine_obj::onevent( ::snow::types::SystemEvent _event){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_360_onevent)
HXLINE( 362)		if (hx::IsNotNull( _event->window )) {
HXLINE( 363)			this->window_event(_event->window);
            		}
HXLINE( 366)		this->game->onevent(_event);
            	}


void Engine_obj::update(Float _delta){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_372_update)
HXLINE( 374)		if (this->has_shutdown) {
HXLINE( 374)			return;
            		}
HXLINE( 375)		if (!(this->inited)) {
HXLINE( 375)			return;
            		}
HXLINE( 380)		this->debug->end(::luxe::Tag_obj::update);
HXLINE( 381)		this->debug->start(::luxe::Tag_obj::update,null());
HXLINE( 388)		this->timer->process();
HXLINE( 392)		this->input->process();
HXLINE( 396)		this->audio->process();
HXLINE( 400)		this->events->process();
HXLINE( 405)		this->physics->process();
HXLINE( 408)		this->debug->start(::luxe::Tag_obj::updates,null());
HXLINE( 409)		this->emitter->emit((int)6,_delta);
HXLINE( 410)		this->debug->end(::luxe::Tag_obj::updates);
HXLINE( 413)		this->debug->start(::luxe::Tag_obj::game_update,null());
HXLINE( 414)		this->game->update(_delta);
HXLINE( 415)		this->debug->end(::luxe::Tag_obj::game_update);
HXLINE( 419)		this->debug->process();
            	}


void Engine_obj::tick(Float _delta){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_424_tick)
HXLINE( 426)		if (this->shutting_down) {
HXLINE( 426)			return;
            		}
HXLINE( 427)		if (!(this->inited)) {
HXLINE( 427)			return;
            		}
HXLINE( 430)		this->debug->end(::luxe::Tag_obj::tick);
HXLINE( 431)		this->debug->start(::luxe::Tag_obj::tick,null());
HXLINE( 434)		if (this->auto_render) {
HXLINE( 435)			this->render();
            		}
            	}


void Engine_obj::render(){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_441_render)
HXLINE( 443)		this->debug->start(::luxe::Tag_obj::render,null());
HXLINE( 445)		this->renderer->prerender();
HXLINE( 447)		this->emitter->emit((int)9,null());
HXLINE( 448)		this->game->onprerender();
HXLINE( 450)		this->emitter->emit((int)10,null());
HXLINE( 451)		this->game->onrender();
HXLINE( 452)		this->renderer->process();
HXLINE( 454)		this->emitter->emit((int)11,null());
HXLINE( 455)		this->game->onpostrender();
HXLINE( 457)		this->debug->end(::luxe::Tag_obj::render);
HXLINE( 459)		this->debug->render();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,render,(void))

void Engine_obj::ontickstart(){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_465_ontickstart)
HXDLIN( 465)		if (!(this->has_shutdown)) {
HXLINE( 466)			this->emitter->emit((int)4,null());
            		}
            	}


void Engine_obj::ontickend(){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_473_ontickend)
HXDLIN( 473)		if (!(this->has_shutdown)) {
HXLINE( 474)			this->emitter->emit((int)5,null());
            		}
            	}


void Engine_obj::window_event( ::snow::types::WindowEvent _event){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_481_window_event)
HXLINE( 483)		if (this->shutting_down) {
HXLINE( 483)			return;
            		}
HXLINE( 484)		if (!(this->inited)) {
HXLINE( 484)			return;
            		}
HXLINE( 487)		 ::Dynamic _render_w = _event->x;
HXLINE( 488)		 ::Dynamic _render_h = _event->y;
HXLINE( 492)		this->pixel_scale = this->app->runtime->window_device_pixel_ratio();
HXLINE( 496)		_event->x = ::Math_obj::floor(((Float)_render_w / (Float)this->pixel_scale));
HXLINE( 497)		_event->y = ::Math_obj::floor(((Float)_render_h / (Float)this->pixel_scale));
HXLINE( 499)		this->emitter->emit((int)28,_event);
HXLINE( 501)		{
HXLINE( 501)			int _g = _event->type;
HXDLIN( 501)			switch((int)(_g)){
            				case (int)4: {
HXLINE( 504)					this->emitter->emit((int)29,_event);
HXLINE( 505)					this->game->onwindowmoved(_event);
            				}
            				break;
            				case (int)5: {
HXLINE( 509)					this->screen->internal_resized(_event->x,_event->y);
HXLINE( 510)					this->renderer->internal_resized(_render_w,_render_h);
HXLINE( 511)					this->emitter->emit((int)30,_event);
HXLINE( 512)					this->game->onwindowresized(_event);
            				}
            				break;
            				case (int)6: {
HXLINE( 516)					this->screen->internal_resized(_event->x,_event->y);
HXLINE( 517)					this->renderer->internal_resized(_render_w,_render_h);
HXLINE( 518)					this->emitter->emit((int)31,_event);
HXLINE( 519)					this->game->onwindowsized(_event);
            				}
            				break;
            				case (int)7: {
HXLINE( 523)					this->emitter->emit((int)32,_event);
HXLINE( 524)					this->game->onwindowminimized(_event);
            				}
            				break;
            				case (int)9: {
HXLINE( 528)					this->emitter->emit((int)33,_event);
HXLINE( 529)					this->game->onwindowrestored(_event);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 536)		_event = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,window_event,(void))

void Engine_obj::onmousedown(int _x,int _y,int _button,Float _timestamp,int _window_id){
            	HX_GC_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_549_onmousedown)
HXLINE( 551)		if (!(this->inited)) {
HXLINE( 551)			return;
            		}
HXLINE( 553)		_x = ::Std_obj::_hx_int(((Float)_x / (Float)this->pixel_scale));
HXLINE( 554)		_y = ::Std_obj::_hx_int(((Float)_y / (Float)this->pixel_scale));
HXLINE( 556)		{
HXLINE( 556)			 ::luxe::Cursor _this = this->screen->cursor;
HXDLIN( 556)			_this->ignore = true;
HXDLIN( 556)			_this->pos =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_x,_y,null(),null());
HXDLIN( 556)			_this->ignore = false;
            		}
HXLINE( 558)		this->input->onmousedown(_x,_y,_button,_timestamp,_window_id);
            	}


void Engine_obj::onmouseup(int _x,int _y,int _button,Float _timestamp,int _window_id){
            	HX_GC_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_562_onmouseup)
HXLINE( 564)		if (!(this->inited)) {
HXLINE( 564)			return;
            		}
HXLINE( 566)		_x = ::Std_obj::_hx_int(((Float)_x / (Float)this->pixel_scale));
HXLINE( 567)		_y = ::Std_obj::_hx_int(((Float)_y / (Float)this->pixel_scale));
HXLINE( 569)		{
HXLINE( 569)			 ::luxe::Cursor _this = this->screen->cursor;
HXDLIN( 569)			_this->ignore = true;
HXDLIN( 569)			_this->pos =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_x,_y,null(),null());
HXDLIN( 569)			_this->ignore = false;
            		}
HXLINE( 571)		this->input->onmouseup(_x,_y,_button,_timestamp,_window_id);
            	}


void Engine_obj::onmousemove(int _x,int _y,int _x_rel,int _y_rel,Float _timestamp,int _window_id){
            	HX_GC_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_575_onmousemove)
HXLINE( 577)		if (!(this->inited)) {
HXLINE( 577)			return;
            		}
HXLINE( 579)		_x = ::Std_obj::_hx_int(((Float)_x / (Float)this->pixel_scale));
HXLINE( 580)		_y = ::Std_obj::_hx_int(((Float)_y / (Float)this->pixel_scale));
HXLINE( 582)		{
HXLINE( 582)			 ::luxe::Cursor _this = this->screen->cursor;
HXDLIN( 582)			_this->ignore = true;
HXDLIN( 582)			_this->pos =  ::phoenix::Vector_obj::__alloc( HX_CTX ,_x,_y,null(),null());
HXDLIN( 582)			_this->ignore = false;
            		}
HXLINE( 584)		this->input->onmousemove(_x,_y,_x_rel,_y_rel,_timestamp,_window_id);
            	}


void Engine_obj::onmousewheel(Float _x,Float _y,Float _timestamp,int _window_id){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_588_onmousewheel)
HXLINE( 590)		if (!(this->inited)) {
HXLINE( 590)			return;
            		}
HXLINE( 592)		this->input->onmousewheel(_x,_y,_timestamp,_window_id);
            	}


void Engine_obj::onkeydown(int _keycode,int _scancode,bool _repeat, ::snow::types::ModState _mod,Float _timestamp,int _window_id){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_598_onkeydown)
HXLINE( 600)		if (!(this->inited)) {
HXLINE( 600)			return;
            		}
HXLINE( 602)		this->input->onkeydown(_keycode,_scancode,_repeat,_mod,_timestamp,_window_id);
            	}


void Engine_obj::onkeyup(int _keycode,int _scancode,bool _repeat, ::snow::types::ModState _mod,Float _timestamp,int _window_id){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_606_onkeyup)
HXLINE( 608)		if (!(this->inited)) {
HXLINE( 608)			return;
            		}
HXLINE( 610)		this->input->onkeyup(_keycode,_scancode,_repeat,_mod,_timestamp,_window_id);
            	}


void Engine_obj::ontextinput(::String _text,int _start,int _length,int _etype,Float _timestamp,int _window_id){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_614_ontextinput)
HXLINE( 616)		if (!(this->inited)) {
HXLINE( 616)			return;
            		}
HXLINE( 618)		this->input->ontextinput(_text,_start,_length,_etype,_timestamp,_window_id);
            	}


void Engine_obj::ontouchdown(Float _x,Float _y,Float _dx,Float _dy,int _touch_id,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_624_ontouchdown)
HXLINE( 626)		if (!(this->inited)) {
HXLINE( 626)			return;
            		}
HXLINE( 628)		this->input->ontouchdown(_x,_y,_dx,_dy,_touch_id,_timestamp);
            	}


void Engine_obj::ontouchup(Float _x,Float _y,Float _dx,Float _dy,int _touch_id,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_632_ontouchup)
HXLINE( 634)		if (!(this->inited)) {
HXLINE( 634)			return;
            		}
HXLINE( 636)		this->input->ontouchup(_x,_y,_dx,_dy,_touch_id,_timestamp);
            	}


void Engine_obj::ontouchmove(Float _x,Float _y,Float _dx,Float _dy,int _touch_id,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_640_ontouchmove)
HXLINE( 642)		if (!(this->inited)) {
HXLINE( 642)			return;
            		}
HXLINE( 644)		this->input->ontouchmove(_x,_y,_dx,_dy,_touch_id,_timestamp);
            	}


void Engine_obj::oninputdown(::String _name, ::luxe::KeyEvent _key_event, ::luxe::MouseEvent _mouse_event, ::luxe::TouchEvent _touch_event, ::luxe::GamepadEvent _gamepad_event){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_650_oninputdown)
HXLINE( 652)		if (!(this->inited)) {
HXLINE( 652)			return;
            		}
HXLINE( 654)		this->input->oninputdown(_name,_key_event,_mouse_event,_touch_event,_gamepad_event);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Engine_obj,oninputdown,(void))

void Engine_obj::oninputup(::String _name, ::luxe::KeyEvent _key_event, ::luxe::MouseEvent _mouse_event, ::luxe::TouchEvent _touch_event, ::luxe::GamepadEvent _gamepad_event){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_658_oninputup)
HXLINE( 660)		if (!(this->inited)) {
HXLINE( 660)			return;
            		}
HXLINE( 662)		this->input->oninputup(_name,_key_event,_mouse_event,_touch_event,_gamepad_event);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Engine_obj,oninputup,(void))

void Engine_obj::ongamepadaxis(int _gamepad,int _axis,Float _value,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_668_ongamepadaxis)
HXLINE( 670)		if (!(this->inited)) {
HXLINE( 670)			return;
            		}
HXLINE( 672)		this->input->ongamepadaxis(_gamepad,_axis,_value,_timestamp);
            	}


void Engine_obj::ongamepaddown(int _gamepad,int _button,Float _value,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_676_ongamepaddown)
HXLINE( 678)		if (!(this->inited)) {
HXLINE( 678)			return;
            		}
HXLINE( 680)		this->input->ongamepaddown(_gamepad,_button,_value,_timestamp);
            	}


void Engine_obj::ongamepadup(int _gamepad,int _button,Float _value,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_684_ongamepadup)
HXLINE( 686)		if (!(this->inited)) {
HXLINE( 686)			return;
            		}
HXLINE( 688)		this->input->ongamepadup(_gamepad,_button,_value,_timestamp);
            	}


void Engine_obj::ongamepaddevice(int _gamepad,::String _id,int _etype,Float _timestamp){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_692_ongamepaddevice)
HXLINE( 694)		if (!(this->inited)) {
HXLINE( 694)			return;
            		}
HXLINE( 696)		this->input->ongamepaddevice(_gamepad,_id,_etype,_timestamp);
            	}


 ::Dynamic Engine_obj::config( ::Dynamic _config){
            	HX_STACKFRAME(&_hx_pos_0cfdf84c6d0da272_704_config)
HXLINE( 706)		if (hx::IsNull(  ::Dynamic(_config->__Field(HX_("user",4b,92,ad,4d),hx::paccDynamic)) )) {
HXLINE( 706)			_config->__SetField(HX_("user",4b,92,ad,4d), ::Dynamic(hx::Anon_obj::Create(0)),hx::paccDynamic);
            		}
HXLINE( 709)		this->game_config = _config;
HXLINE( 712)		 ::Dynamic(this->game_config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__SetField(HX_("title",98,15,3b,10),HX_("luxe game",9c,14,33,b3),hx::paccDynamic);
HXLINE( 713)		 ::Dynamic(this->game_config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__SetField(HX_("width",06,b6,62,ca),(int)960,hx::paccDynamic);
HXLINE( 714)		 ::Dynamic(this->game_config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__SetField(HX_("height",e7,07,4c,02),(int)640,hx::paccDynamic);
HXLINE( 715)		 ::Dynamic(this->game_config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__SetField(HX_("resizable",6b,37,50,a9),true,hx::paccDynamic);
HXLINE( 716)		 ::Dynamic(this->game_config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__SetField(HX_("fullscreen",3b,3a,b4,f9),false,hx::paccDynamic);
HXLINE( 717)		 ::Dynamic(this->game_config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__SetField(HX_("borderless",45,46,71,17),false,hx::paccDynamic);
HXLINE( 719)		this->game_config->__SetField(HX_("preload",c9,47,43,35), ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("bytes",6b,08,98,bd),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(1,HX_("fonts",c4,b7,91,04),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(2,HX_("texts",26,4b,99,0d),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(3,HX_("sounds",c4,a8,2e,32),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(4,HX_("jsons",4b,a1,d1,54),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(5,HX_("shaders",ae,81,86,5f),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(6,HX_("textures",38,f7,ce,65),::Array_obj< ::Dynamic>::__new(0))),hx::paccDynamic);
HXLINE( 730)		this->game_config = this->game->config(this->game_config);
HXLINE( 733)		return this->game_config;
            	}



hx::ObjectPtr< Engine_obj > Engine_obj::__new( ::luxe::Game _game) {
	hx::ObjectPtr< Engine_obj > __this = new Engine_obj();
	__this->__construct(_game);
	return __this;
}

hx::ObjectPtr< Engine_obj > Engine_obj::__alloc(hx::Ctx *_hx_ctx, ::luxe::Game _game) {
	Engine_obj *__this = (Engine_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Engine_obj), true, "luxe.Engine"));
	*(void **)__this = Engine_obj::_hx_vtable;
	__this->__construct(_game);
	return __this;
}

Engine_obj::Engine_obj()
{
}

void Engine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Engine);
	HX_MARK_MEMBER_NAME(game,"game");
	HX_MARK_MEMBER_NAME(game_config,"game_config");
	HX_MARK_MEMBER_NAME(version,"version");
	HX_MARK_MEMBER_NAME(build,"build");
	HX_MARK_MEMBER_NAME(emitter,"emitter");
	HX_MARK_MEMBER_NAME(debug,"debug");
	HX_MARK_MEMBER_NAME(io,"io");
	HX_MARK_MEMBER_NAME(draw,"draw");
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_MEMBER_NAME(events,"events");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(audio,"audio");
	HX_MARK_MEMBER_NAME(scene,"scene");
	HX_MARK_MEMBER_NAME(resources,"resources");
	HX_MARK_MEMBER_NAME(renderer,"renderer");
	HX_MARK_MEMBER_NAME(screen,"screen");
	HX_MARK_MEMBER_NAME(physics,"physics");
	HX_MARK_MEMBER_NAME(shutting_down,"shutting_down");
	HX_MARK_MEMBER_NAME(has_shutdown,"has_shutdown");
	HX_MARK_MEMBER_NAME(inited,"inited");
	HX_MARK_MEMBER_NAME(headless,"headless");
	HX_MARK_MEMBER_NAME(auto_render,"auto_render");
	HX_MARK_MEMBER_NAME(running,"running");
	HX_MARK_MEMBER_NAME(pixel_scale,"pixel_scale");
	 ::snow::App_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Engine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(game,"game");
	HX_VISIT_MEMBER_NAME(game_config,"game_config");
	HX_VISIT_MEMBER_NAME(version,"version");
	HX_VISIT_MEMBER_NAME(build,"build");
	HX_VISIT_MEMBER_NAME(emitter,"emitter");
	HX_VISIT_MEMBER_NAME(debug,"debug");
	HX_VISIT_MEMBER_NAME(io,"io");
	HX_VISIT_MEMBER_NAME(draw,"draw");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	HX_VISIT_MEMBER_NAME(events,"events");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(audio,"audio");
	HX_VISIT_MEMBER_NAME(scene,"scene");
	HX_VISIT_MEMBER_NAME(resources,"resources");
	HX_VISIT_MEMBER_NAME(renderer,"renderer");
	HX_VISIT_MEMBER_NAME(screen,"screen");
	HX_VISIT_MEMBER_NAME(physics,"physics");
	HX_VISIT_MEMBER_NAME(shutting_down,"shutting_down");
	HX_VISIT_MEMBER_NAME(has_shutdown,"has_shutdown");
	HX_VISIT_MEMBER_NAME(inited,"inited");
	HX_VISIT_MEMBER_NAME(headless,"headless");
	HX_VISIT_MEMBER_NAME(auto_render,"auto_render");
	HX_VISIT_MEMBER_NAME(running,"running");
	HX_VISIT_MEMBER_NAME(pixel_scale,"pixel_scale");
	 ::snow::App_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Engine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"io") ) { return hx::Val( io ); }
		if (HX_FIELD_EQ(inName,"on") ) { return hx::Val( on_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		if (HX_FIELD_EQ(inName,"off") ) { return hx::Val( off_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"game") ) { return hx::Val( game ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw ); }
		if (HX_FIELD_EQ(inName,"emit") ) { return hx::Val( emit_dyn() ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"tick") ) { return hx::Val( tick_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"build") ) { return hx::Val( build ); }
		if (HX_FIELD_EQ(inName,"debug") ) { return hx::Val( debug ); }
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer ); }
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input ); }
		if (HX_FIELD_EQ(inName,"audio") ) { return hx::Val( audio ); }
		if (HX_FIELD_EQ(inName,"scene") ) { return hx::Val( scene ); }
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( ready_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"events") ) { return hx::Val( events ); }
		if (HX_FIELD_EQ(inName,"screen") ) { return hx::Val( screen ); }
		if (HX_FIELD_EQ(inName,"inited") ) { return hx::Val( inited ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"config") ) { return hx::Val( config_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"version") ) { return hx::Val( version ); }
		if (HX_FIELD_EQ(inName,"emitter") ) { return hx::Val( emitter ); }
		if (HX_FIELD_EQ(inName,"physics") ) { return hx::Val( physics ); }
		if (HX_FIELD_EQ(inName,"running") ) { return hx::Val( running ); }
		if (HX_FIELD_EQ(inName,"onevent") ) { return hx::Val( onevent_dyn() ); }
		if (HX_FIELD_EQ(inName,"onkeyup") ) { return hx::Val( onkeyup_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderer") ) { return hx::Val( renderer ); }
		if (HX_FIELD_EQ(inName,"headless") ) { return hx::Val( headless ); }
		if (HX_FIELD_EQ(inName,"shutdown") ) { return hx::Val( shutdown_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"resources") ) { return hx::Val( resources ); }
		if (HX_FIELD_EQ(inName,"ondestroy") ) { return hx::Val( ondestroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontickend") ) { return hx::Val( ontickend_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmouseup") ) { return hx::Val( onmouseup_dyn() ); }
		if (HX_FIELD_EQ(inName,"onkeydown") ) { return hx::Val( onkeydown_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontouchup") ) { return hx::Val( ontouchup_dyn() ); }
		if (HX_FIELD_EQ(inName,"oninputup") ) { return hx::Val( oninputup_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"game_config") ) { return hx::Val( game_config ); }
		if (HX_FIELD_EQ(inName,"auto_render") ) { return hx::Val( auto_render ); }
		if (HX_FIELD_EQ(inName,"pixel_scale") ) { return hx::Val( pixel_scale ); }
		if (HX_FIELD_EQ(inName,"ontickstart") ) { return hx::Val( ontickstart_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmousedown") ) { return hx::Val( onmousedown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmousemove") ) { return hx::Val( onmousemove_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontextinput") ) { return hx::Val( ontextinput_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontouchdown") ) { return hx::Val( ontouchdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontouchmove") ) { return hx::Val( ontouchmove_dyn() ); }
		if (HX_FIELD_EQ(inName,"oninputdown") ) { return hx::Val( oninputdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"ongamepadup") ) { return hx::Val( ongamepadup_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"has_shutdown") ) { return hx::Val( has_shutdown ); }
		if (HX_FIELD_EQ(inName,"runtime_info") ) { return hx::Val( runtime_info_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_event") ) { return hx::Val( window_event_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmousewheel") ) { return hx::Val( onmousewheel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shutting_down") ) { return hx::Val( shutting_down ); }
		if (HX_FIELD_EQ(inName,"ongamepadaxis") ) { return hx::Val( ongamepadaxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"ongamepaddown") ) { return hx::Val( ongamepaddown_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"internal_ready") ) { return hx::Val( internal_ready_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"ongamepaddevice") ) { return hx::Val( ongamepaddevice_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"internal_pre_ready") ) { return hx::Val( internal_pre_ready_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Engine_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"io") ) { io=inValue.Cast<  ::luxe::IO >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"game") ) { game=inValue.Cast<  ::luxe::Game >(); return inValue; }
		if (HX_FIELD_EQ(inName,"draw") ) { draw=inValue.Cast<  ::luxe::Draw >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"build") ) { build=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debug") ) { debug=inValue.Cast<  ::luxe::Debug >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::luxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::luxe::Input >(); return inValue; }
		if (HX_FIELD_EQ(inName,"audio") ) { audio=inValue.Cast<  ::luxe::Audio >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scene") ) { scene=inValue.Cast<  ::luxe::Scene >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"events") ) { events=inValue.Cast<  ::luxe::Events >(); return inValue; }
		if (HX_FIELD_EQ(inName,"screen") ) { screen=inValue.Cast<  ::luxe::Screen >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inited") ) { inited=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"version") ) { version=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"emitter") ) { emitter=inValue.Cast<  ::luxe::Emitter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"physics") ) { physics=inValue.Cast<  ::luxe::Physics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"running") ) { running=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderer") ) { renderer=inValue.Cast<  ::phoenix::Renderer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"headless") ) { headless=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"resources") ) { resources=inValue.Cast<  ::luxe::Resources >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"game_config") ) { game_config=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"auto_render") ) { auto_render=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pixel_scale") ) { pixel_scale=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"has_shutdown") ) { has_shutdown=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shutting_down") ) { shutting_down=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Engine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("game","\xf2","\xf3","\x5e","\x44"));
	outFields->push(HX_HCSTRING("game_config","\xaf","\xb6","\xae","\x4d"));
	outFields->push(HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"));
	outFields->push(HX_HCSTRING("build","\x2e","\xdb","\xea","\xba"));
	outFields->push(HX_HCSTRING("emitter","\x6e","\x35","\xf6","\xbe"));
	outFields->push(HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7"));
	outFields->push(HX_HCSTRING("io","\xe6","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"));
	outFields->push(HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"));
	outFields->push(HX_HCSTRING("events","\x19","\x4f","\x6a","\x96"));
	outFields->push(HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"));
	outFields->push(HX_HCSTRING("audio","\xd6","\x78","\x80","\x27"));
	outFields->push(HX_HCSTRING("scene","\x4c","\xd9","\xd1","\x78"));
	outFields->push(HX_HCSTRING("resources","\xe5","\xd7","\xb0","\x39"));
	outFields->push(HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2"));
	outFields->push(HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47"));
	outFields->push(HX_HCSTRING("physics","\xc7","\x38","\x51","\xbe"));
	outFields->push(HX_HCSTRING("shutting_down","\xdf","\xe7","\x30","\x20"));
	outFields->push(HX_HCSTRING("has_shutdown","\x5b","\xf9","\x20","\x9e"));
	outFields->push(HX_HCSTRING("inited","\x6f","\x77","\x4c","\x97"));
	outFields->push(HX_HCSTRING("headless","\x79","\x4c","\xd6","\x48"));
	outFields->push(HX_HCSTRING("auto_render","\x66","\xf9","\x32","\x8c"));
	outFields->push(HX_HCSTRING("running","\xff","\x6d","\x69","\xeb"));
	outFields->push(HX_HCSTRING("pixel_scale","\xd1","\x84","\xae","\xb1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Engine_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::Game*/ ,(int)offsetof(Engine_obj,game),HX_HCSTRING("game","\xf2","\xf3","\x5e","\x44")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Engine_obj,game_config),HX_HCSTRING("game_config","\xaf","\xb6","\xae","\x4d")},
	{hx::fsString,(int)offsetof(Engine_obj,version),HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c")},
	{hx::fsString,(int)offsetof(Engine_obj,build),HX_HCSTRING("build","\x2e","\xdb","\xea","\xba")},
	{hx::fsObject /*::luxe::Emitter*/ ,(int)offsetof(Engine_obj,emitter),HX_HCSTRING("emitter","\x6e","\x35","\xf6","\xbe")},
	{hx::fsObject /*::luxe::Debug*/ ,(int)offsetof(Engine_obj,debug),HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7")},
	{hx::fsObject /*::luxe::IO*/ ,(int)offsetof(Engine_obj,io),HX_HCSTRING("io","\xe6","\x5b","\x00","\x00")},
	{hx::fsObject /*::luxe::Draw*/ ,(int)offsetof(Engine_obj,draw),HX_HCSTRING("draw","\x04","\x2c","\x70","\x42")},
	{hx::fsObject /*::luxe::Timer*/ ,(int)offsetof(Engine_obj,timer),HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{hx::fsObject /*::luxe::Events*/ ,(int)offsetof(Engine_obj,events),HX_HCSTRING("events","\x19","\x4f","\x6a","\x96")},
	{hx::fsObject /*::luxe::Input*/ ,(int)offsetof(Engine_obj,input),HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsObject /*::luxe::Audio*/ ,(int)offsetof(Engine_obj,audio),HX_HCSTRING("audio","\xd6","\x78","\x80","\x27")},
	{hx::fsObject /*::luxe::Scene*/ ,(int)offsetof(Engine_obj,scene),HX_HCSTRING("scene","\x4c","\xd9","\xd1","\x78")},
	{hx::fsObject /*::luxe::Resources*/ ,(int)offsetof(Engine_obj,resources),HX_HCSTRING("resources","\xe5","\xd7","\xb0","\x39")},
	{hx::fsObject /*::phoenix::Renderer*/ ,(int)offsetof(Engine_obj,renderer),HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2")},
	{hx::fsObject /*::luxe::Screen*/ ,(int)offsetof(Engine_obj,screen),HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47")},
	{hx::fsObject /*::luxe::Physics*/ ,(int)offsetof(Engine_obj,physics),HX_HCSTRING("physics","\xc7","\x38","\x51","\xbe")},
	{hx::fsBool,(int)offsetof(Engine_obj,shutting_down),HX_HCSTRING("shutting_down","\xdf","\xe7","\x30","\x20")},
	{hx::fsBool,(int)offsetof(Engine_obj,has_shutdown),HX_HCSTRING("has_shutdown","\x5b","\xf9","\x20","\x9e")},
	{hx::fsBool,(int)offsetof(Engine_obj,inited),HX_HCSTRING("inited","\x6f","\x77","\x4c","\x97")},
	{hx::fsBool,(int)offsetof(Engine_obj,headless),HX_HCSTRING("headless","\x79","\x4c","\xd6","\x48")},
	{hx::fsBool,(int)offsetof(Engine_obj,auto_render),HX_HCSTRING("auto_render","\x66","\xf9","\x32","\x8c")},
	{hx::fsBool,(int)offsetof(Engine_obj,running),HX_HCSTRING("running","\xff","\x6d","\x69","\xeb")},
	{hx::fsFloat,(int)offsetof(Engine_obj,pixel_scale),HX_HCSTRING("pixel_scale","\xd1","\x84","\xae","\xb1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Engine_obj_sStaticStorageInfo = 0;
#endif

static ::String Engine_obj_sMemberFields[] = {
	HX_HCSTRING("game","\xf2","\xf3","\x5e","\x44"),
	HX_HCSTRING("game_config","\xaf","\xb6","\xae","\x4d"),
	HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"),
	HX_HCSTRING("build","\x2e","\xdb","\xea","\xba"),
	HX_HCSTRING("emitter","\x6e","\x35","\xf6","\xbe"),
	HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7"),
	HX_HCSTRING("io","\xe6","\x5b","\x00","\x00"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("events","\x19","\x4f","\x6a","\x96"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("audio","\xd6","\x78","\x80","\x27"),
	HX_HCSTRING("scene","\x4c","\xd9","\xd1","\x78"),
	HX_HCSTRING("resources","\xe5","\xd7","\xb0","\x39"),
	HX_HCSTRING("renderer","\x43","\xc5","\xdb","\xb2"),
	HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47"),
	HX_HCSTRING("physics","\xc7","\x38","\x51","\xbe"),
	HX_HCSTRING("shutting_down","\xdf","\xe7","\x30","\x20"),
	HX_HCSTRING("has_shutdown","\x5b","\xf9","\x20","\x9e"),
	HX_HCSTRING("inited","\x6f","\x77","\x4c","\x97"),
	HX_HCSTRING("headless","\x79","\x4c","\xd6","\x48"),
	HX_HCSTRING("auto_render","\x66","\xf9","\x32","\x8c"),
	HX_HCSTRING("running","\xff","\x6d","\x69","\xeb"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("shutdown","\x96","\xfc","\x0b","\x6b"),
	HX_HCSTRING("runtime_info","\x75","\x10","\x75","\xe7"),
	HX_HCSTRING("on","\x1f","\x61","\x00","\x00"),
	HX_HCSTRING("off","\x6f","\x93","\x54","\x00"),
	HX_HCSTRING("emit","\x53","\x9e","\x15","\x43"),
	HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6"),
	HX_HCSTRING("ondestroy","\xbb","\xbd","\xdf","\x2e"),
	HX_HCSTRING("pixel_scale","\xd1","\x84","\xae","\xb1"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("internal_pre_ready","\x45","\xb5","\x6d","\x32"),
	HX_HCSTRING("internal_ready","\xa1","\xda","\xfc","\xd2"),
	HX_HCSTRING("onevent","\x9b","\xf6","\xd4","\x78"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("tick","\x5d","\xc3","\xfc","\x4c"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("ontickstart","\xe6","\x62","\x8c","\xec"),
	HX_HCSTRING("ontickend","\x5f","\x89","\x3e","\x25"),
	HX_HCSTRING("window_event","\x4b","\x37","\x88","\x04"),
	HX_HCSTRING("onmousedown","\x08","\x88","\x59","\x84"),
	HX_HCSTRING("onmouseup","\x81","\xa0","\xcc","\xca"),
	HX_HCSTRING("onmousemove","\xb7","\x72","\x4c","\x8a"),
	HX_HCSTRING("onmousewheel","\x35","\x56","\xec","\x35"),
	HX_HCSTRING("onkeydown","\x42","\xce","\xc7","\xbb"),
	HX_HCSTRING("onkeyup","\x3b","\x04","\x0f","\xe2"),
	HX_HCSTRING("ontextinput","\x3e","\xe7","\x4d","\x44"),
	HX_HCSTRING("ontouchdown","\xa2","\x5e","\x71","\x9d"),
	HX_HCSTRING("ontouchup","\x9b","\xbc","\x51","\xe3"),
	HX_HCSTRING("ontouchmove","\x51","\x49","\x64","\xa3"),
	HX_HCSTRING("oninputdown","\x6d","\x8c","\x2f","\x9f"),
	HX_HCSTRING("oninputup","\xa6","\x51","\x78","\xde"),
	HX_HCSTRING("ongamepadaxis","\x03","\xe7","\xa9","\x64"),
	HX_HCSTRING("ongamepaddown","\xc4","\xc2","\x9e","\x66"),
	HX_HCSTRING("ongamepadup","\x3d","\x74","\xa8","\xdf"),
	HX_HCSTRING("ongamepaddevice","\x78","\x83","\x39","\x9b"),
	HX_HCSTRING("config","\xc2","\x56","\xd2","\xc7"),
	::String(null()) };

static void Engine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Engine_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Engine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Engine_obj::__mClass,"__mClass");
};

#endif

hx::Class Engine_obj::__mClass;

void Engine_obj::__register()
{
	hx::Object *dummy = new Engine_obj;
	Engine_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Engine","\x9a","\x59","\xe2","\x5b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Engine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Engine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Engine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Engine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Engine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Engine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
