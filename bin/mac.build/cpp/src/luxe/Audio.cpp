// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_luxe_Audio
#include <luxe/Audio.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_systems_audio_Audio
#include <snow/systems/audio/Audio.h>
#endif
#ifndef INCLUDED_snow_systems_audio_AudioInstance
#include <snow/systems/audio/AudioInstance.h>
#endif
#ifndef INCLUDED_snow_systems_audio_AudioSource
#include <snow/systems/audio/AudioSource.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_21e609c7a1c9411b_20_new,"luxe.Audio","new",0x2e60e1f0,"luxe.Audio.new","luxe/Audio.hx",20,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_27_on,"luxe.Audio","on",0xe819b18f,"luxe.Audio.on","luxe/Audio.hx",27,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_31_off,"luxe.Audio","off",0x2e61a4ff,"luxe.Audio.off","luxe/Audio.hx",31,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_35_emit,"luxe.Audio","emit",0x6077eac3,"luxe.Audio.emit","luxe/Audio.hx",35,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_39_play,"luxe.Audio","play",0x67bc7a64,"luxe.Audio.play","luxe/Audio.hx",39,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_43_loop,"luxe.Audio","loop",0x6519f2d4,"luxe.Audio.loop","luxe/Audio.hx",43,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_47_pause,"luxe.Audio","pause",0x55f86c86,"luxe.Audio.pause","luxe/Audio.hx",47,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_51_unpause,"luxe.Audio","unpause",0x2c05e78d,"luxe.Audio.unpause","luxe/Audio.hx",51,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_55_stop,"luxe.Audio","stop",0x69be3c72,"luxe.Audio.stop","luxe/Audio.hx",55,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_59_volume,"luxe.Audio","volume",0x5335724a,"luxe.Audio.volume","luxe/Audio.hx",59,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_63_pan,"luxe.Audio","pan",0x2e6262ed,"luxe.Audio.pan","luxe/Audio.hx",63,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_67_pitch,"luxe.Audio","pitch",0x5b415150,"luxe.Audio.pitch","luxe/Audio.hx",67,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_71_position,"luxe.Audio","position",0x3253e519,"luxe.Audio.position","luxe/Audio.hx",71,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_75_state_of,"luxe.Audio","state_of",0xc6e0a635,"luxe.Audio.state_of","luxe/Audio.hx",75,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_79_loop_of,"luxe.Audio","loop_of",0x929300e2,"luxe.Audio.loop_of","luxe/Audio.hx",79,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_83_instance_of,"luxe.Audio","instance_of",0x5bf2a451,"luxe.Audio.instance_of","luxe/Audio.hx",83,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_87_volume_of,"luxe.Audio","volume_of",0x67700f2c,"luxe.Audio.volume_of","luxe/Audio.hx",87,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_91_pan_of,"luxe.Audio","pan_of",0xdeb6e669,"luxe.Audio.pan_of","luxe/Audio.hx",91,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_95_pitch_of,"luxe.Audio","pitch_of",0x22d0d7e6,"luxe.Audio.pitch_of","luxe/Audio.hx",95,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_99_position_of,"luxe.Audio","position_of",0x323807bd,"luxe.Audio.position_of","luxe/Audio.hx",99,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_103_suspend,"luxe.Audio","suspend",0x696c490c,"luxe.Audio.suspend","luxe/Audio.hx",103,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_107_resume,"luxe.Audio","resume",0xfc66b21d,"luxe.Audio.resume","luxe/Audio.hx",107,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_112_get_active,"luxe.Audio","get_active",0xea54f1ff,"luxe.Audio.get_active","luxe/Audio.hx",112,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_113_set_active,"luxe.Audio","set_active",0xedd29073,"luxe.Audio.set_active","luxe/Audio.hx",113,0xbb0b1481)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8e1528b280bbc1_138_init,"luxe.Audio","init",0x631d8780,"luxe.Audio.init","luxe/Log.hx",138,0xe5312153)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8e1528b280bbc1_138_destroy,"luxe.Audio","destroy",0x96a3468a,"luxe.Audio.destroy","luxe/Log.hx",138,0xe5312153)
HX_LOCAL_STACK_FRAME(_hx_pos_21e609c7a1c9411b_129_process,"luxe.Audio","process",0x6367bbff,"luxe.Audio.process","luxe/Audio.hx",129,0xbb0b1481)
namespace luxe{

void Audio_obj::__construct( ::luxe::Engine _core){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_20_new)
HXDLIN(  20)		this->core = _core;
            	}

Dynamic Audio_obj::__CreateEmpty() { return new Audio_obj; }

void *Audio_obj::_hx_vtable = 0;

Dynamic Audio_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Audio_obj > _hx_result = new Audio_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Audio_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x092c0500;
}

void Audio_obj::on(int _event, ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_27_on)
HXDLIN(  27)		this->core->app->audio->on_Int(_event,_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,on,(void))

bool Audio_obj::off(int _event, ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_31_off)
HXDLIN(  31)		return this->core->app->audio->off_Int(_event,_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,off,return )

void Audio_obj::emit(int _event, ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_35_emit)
HXDLIN(  35)		this->core->app->audio->emit_Int(_event,_handle);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,emit,(void))

 ::Dynamic Audio_obj::play( ::snow::systems::audio::AudioSource _source, ::Dynamic __o__volume, ::Dynamic __o__paused){
 ::Dynamic _volume = __o__volume.Default(((Float)1.0));
 ::Dynamic _paused = __o__paused.Default(false);
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_39_play)
HXDLIN(  39)		return this->core->app->audio->play(_source,_volume,_paused);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Audio_obj,play,return )

 ::Dynamic Audio_obj::loop( ::snow::systems::audio::AudioSource _source, ::Dynamic __o__volume, ::Dynamic __o__paused){
 ::Dynamic _volume = __o__volume.Default(((Float)1.0));
 ::Dynamic _paused = __o__paused.Default(false);
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_43_loop)
HXDLIN(  43)		return this->core->app->audio->loop(_source,_volume,_paused);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Audio_obj,loop,return )

void Audio_obj::pause( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_47_pause)
HXDLIN(  47)		this->core->app->audio->pause(_handle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,pause,(void))

void Audio_obj::unpause( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_51_unpause)
HXDLIN(  51)		this->core->app->audio->unpause(_handle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,unpause,(void))

void Audio_obj::stop( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_55_stop)
HXDLIN(  55)		this->core->app->audio->stop(_handle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,stop,(void))

void Audio_obj::volume( ::Dynamic _handle,Float _volume){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_59_volume)
HXDLIN(  59)		this->core->app->audio->volume(_handle,_volume);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,volume,(void))

void Audio_obj::pan( ::Dynamic _handle,Float _pan){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_63_pan)
HXDLIN(  63)		this->core->app->audio->pan(_handle,_pan);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,pan,(void))

void Audio_obj::pitch( ::Dynamic _handle,Float _pitch){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_67_pitch)
HXDLIN(  67)		this->core->app->audio->pitch(_handle,_pitch);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,pitch,(void))

void Audio_obj::position( ::Dynamic _handle,Float _position){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_71_position)
HXDLIN(  71)		this->core->app->audio->position(_handle,_position);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,position,(void))

int Audio_obj::state_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_75_state_of)
HXDLIN(  75)		return this->core->app->audio->state_of(_handle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,state_of,return )

bool Audio_obj::loop_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_79_loop_of)
HXDLIN(  79)		return this->core->app->audio->loop_of(_handle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,loop_of,return )

 ::snow::systems::audio::AudioInstance Audio_obj::instance_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_83_instance_of)
HXDLIN(  83)		return this->core->app->audio->instance_of(_handle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,instance_of,return )

Float Audio_obj::volume_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_87_volume_of)
HXDLIN(  87)		return this->core->app->audio->volume_of(_handle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,volume_of,return )

Float Audio_obj::pan_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_91_pan_of)
HXDLIN(  91)		return this->core->app->audio->pan_of(_handle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,pan_of,return )

Float Audio_obj::pitch_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_95_pitch_of)
HXDLIN(  95)		return this->core->app->audio->pitch_of(_handle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,pitch_of,return )

Float Audio_obj::position_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_99_position_of)
HXDLIN(  99)		return this->core->app->audio->position_of(_handle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,position_of,return )

void Audio_obj::suspend(){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_103_suspend)
HXDLIN( 103)		this->core->app->audio->suspend();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,suspend,(void))

void Audio_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_107_resume)
HXDLIN( 107)		this->core->app->audio->resume();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,resume,(void))

bool Audio_obj::get_active(){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_112_get_active)
HXDLIN( 112)		return this->core->app->audio->active;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,get_active,return )

bool Audio_obj::set_active(bool _val){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_113_set_active)
HXDLIN( 113)		return (this->core->app->audio->active = _val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,set_active,return )

void Audio_obj::init(){
            	HX_STACKFRAME(&_hx_pos_bd8e1528b280bbc1_138_init)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,init,(void))

void Audio_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_bd8e1528b280bbc1_138_destroy)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,destroy,(void))

void Audio_obj::process(){
            	HX_STACKFRAME(&_hx_pos_21e609c7a1c9411b_129_process)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,process,(void))


hx::ObjectPtr< Audio_obj > Audio_obj::__new( ::luxe::Engine _core) {
	hx::ObjectPtr< Audio_obj > __this = new Audio_obj();
	__this->__construct(_core);
	return __this;
}

hx::ObjectPtr< Audio_obj > Audio_obj::__alloc(hx::Ctx *_hx_ctx, ::luxe::Engine _core) {
	Audio_obj *__this = (Audio_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Audio_obj), true, "luxe.Audio"));
	*(void **)__this = Audio_obj::_hx_vtable;
	__this->__construct(_core);
	return __this;
}

Audio_obj::Audio_obj()
{
}

void Audio_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Audio);
	HX_MARK_MEMBER_NAME(core,"core");
	HX_MARK_END_CLASS();
}

void Audio_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(core,"core");
}

hx::Val Audio_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"on") ) { return hx::Val( on_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"off") ) { return hx::Val( off_dyn() ); }
		if (HX_FIELD_EQ(inName,"pan") ) { return hx::Val( pan_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { return hx::Val( core ); }
		if (HX_FIELD_EQ(inName,"emit") ) { return hx::Val( emit_dyn() ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"loop") ) { return hx::Val( loop_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		if (HX_FIELD_EQ(inName,"pitch") ) { return hx::Val( pitch_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_active() ); }
		if (HX_FIELD_EQ(inName,"volume") ) { return hx::Val( volume_dyn() ); }
		if (HX_FIELD_EQ(inName,"pan_of") ) { return hx::Val( pan_of_dyn() ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return hx::Val( resume_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"unpause") ) { return hx::Val( unpause_dyn() ); }
		if (HX_FIELD_EQ(inName,"loop_of") ) { return hx::Val( loop_of_dyn() ); }
		if (HX_FIELD_EQ(inName,"suspend") ) { return hx::Val( suspend_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"process") ) { return hx::Val( process_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position_dyn() ); }
		if (HX_FIELD_EQ(inName,"state_of") ) { return hx::Val( state_of_dyn() ); }
		if (HX_FIELD_EQ(inName,"pitch_of") ) { return hx::Val( pitch_of_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"volume_of") ) { return hx::Val( volume_of_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_active") ) { return hx::Val( get_active_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_active") ) { return hx::Val( set_active_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"instance_of") ) { return hx::Val( instance_of_dyn() ); }
		if (HX_FIELD_EQ(inName,"position_of") ) { return hx::Val( position_of_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Audio_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { core=inValue.Cast<  ::luxe::Engine >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_active(inValue.Cast< bool >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Audio_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"));
	outFields->push(HX_HCSTRING("active","\xc6","\x41","\x46","\x16"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Audio_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::Engine*/ ,(int)offsetof(Audio_obj,core),HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Audio_obj_sStaticStorageInfo = 0;
#endif

static ::String Audio_obj_sMemberFields[] = {
	HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"),
	HX_HCSTRING("on","\x1f","\x61","\x00","\x00"),
	HX_HCSTRING("off","\x6f","\x93","\x54","\x00"),
	HX_HCSTRING("emit","\x53","\x9e","\x15","\x43"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("loop","\x64","\xa6","\xb7","\x47"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("unpause","\xfd","\xcd","\xe8","\xb9"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("volume","\xda","\x29","\x53","\x5f"),
	HX_HCSTRING("pan","\x5d","\x51","\x55","\x00"),
	HX_HCSTRING("pitch","\xc0","\xbb","\xa0","\xc2"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("state_of","\xc5","\x61","\x87","\x5f"),
	HX_HCSTRING("loop_of","\x52","\xe7","\x75","\x20"),
	HX_HCSTRING("instance_of","\xc1","\x82","\x21","\x29"),
	HX_HCSTRING("volume_of","\x9c","\x71","\xad","\x60"),
	HX_HCSTRING("pan_of","\xf9","\x9d","\xd4","\xea"),
	HX_HCSTRING("pitch_of","\x76","\x93","\x77","\xbb"),
	HX_HCSTRING("position_of","\x2d","\xe6","\x66","\xff"),
	HX_HCSTRING("suspend","\x7c","\x2f","\x4f","\xf7"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("get_active","\x8f","\xb1","\xcd","\x06"),
	HX_HCSTRING("set_active","\x03","\x50","\x4b","\x0a"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("process","\x6f","\xa2","\x4a","\xf1"),
	::String(null()) };

static void Audio_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Audio_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Audio_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Audio_obj::__mClass,"__mClass");
};

#endif

hx::Class Audio_obj::__mClass;

void Audio_obj::__register()
{
	hx::Object *dummy = new Audio_obj;
	Audio_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Audio","\xfe","\x69","\x75","\xde");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Audio_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Audio_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Audio_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Audio_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Audio_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Audio_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
