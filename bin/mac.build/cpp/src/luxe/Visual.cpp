// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_phoenix_Batcher
#include <phoenix/Batcher.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Quaternion
#include <phoenix/Quaternion.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_Shader
#include <phoenix/Shader.h>
#endif
#ifndef INCLUDED_phoenix_Texture
#include <phoenix/Texture.h>
#endif
#ifndef INCLUDED_phoenix_Transform
#include <phoenix/Transform.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_GeometryState
#include <phoenix/geometry/GeometryState.h>
#endif
#ifndef INCLUDED_phoenix_geometry_QuadGeometry
#include <phoenix/geometry/QuadGeometry.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2df8cb75335b17ce_22_new,"luxe.Visual","new",0x85b8018a,"luxe.Visual.new","luxe/Visual.hx",22,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_140__create_geometry,"luxe.Visual","_create_geometry",0x0dc0f2ac,"luxe.Visual._create_geometry","luxe/Visual.hx",140,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_205_ondestroy,"luxe.Visual","ondestroy",0x45842a65,"luxe.Visual.ondestroy","luxe/Visual.hx",205,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_226_on_geometry_created,"luxe.Visual","on_geometry_created",0x622713a5,"luxe.Visual.on_geometry_created","luxe/Visual.hx",226,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_234_set_visible,"luxe.Visual","set_visible",0x8da44abf,"luxe.Visual.set_visible","luxe/Visual.hx",234,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_247_set_depth,"luxe.Visual","set_depth",0x14c8a610,"luxe.Visual.set_depth","luxe/Visual.hx",247,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_259_set_color,"luxe.Visual","set_color",0x87fb2670,"luxe.Visual.set_color","luxe/Visual.hx",259,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_269_set_texture,"luxe.Visual","set_texture",0x89609b28,"luxe.Visual.set_texture","luxe/Visual.hx",269,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_278_set_shader,"luxe.Visual","set_shader",0xca607578,"luxe.Visual.set_shader","luxe/Visual.hx",278,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_291_set_geometry,"luxe.Visual","set_geometry",0x180133c5,"luxe.Visual.set_geometry","luxe/Visual.hx",291,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_342_set_parent_from_transform,"luxe.Visual","set_parent_from_transform",0x5e81f8d9,"luxe.Visual.set_parent_from_transform","luxe/Visual.hx",342,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_353_set_rotation_from_transform,"luxe.Visual","set_rotation_from_transform",0x9fdb9485,"luxe.Visual.set_rotation_from_transform","luxe/Visual.hx",353,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_365_set_size,"luxe.Visual","set_size",0x32330c54,"luxe.Visual.set_size","luxe/Visual.hx",365,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_378_get_blend_disabled,"luxe.Visual","get_blend_disabled",0xd0d3cd49,"luxe.Visual.get_blend_disabled","luxe/Visual.hx",378,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_379_get_blend_src,"luxe.Visual","get_blend_src",0x3aedae37,"luxe.Visual.get_blend_src","luxe/Visual.hx",379,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_380_get_blend_dest,"luxe.Visual","get_blend_dest",0x4b16bfaf,"luxe.Visual.get_blend_dest","luxe/Visual.hx",380,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_381_get_blend_src_alpha,"luxe.Visual","get_blend_src_alpha",0x4dfea016,"luxe.Visual.get_blend_src_alpha","luxe/Visual.hx",381,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_382_get_blend_src_rgb,"luxe.Visual","get_blend_src_rgb",0x5888b5c5,"luxe.Visual.get_blend_src_rgb","luxe/Visual.hx",382,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_383_get_blend_dest_alpha,"luxe.Visual","get_blend_dest_alpha",0xcdda1b8e,"luxe.Visual.get_blend_dest_alpha","luxe/Visual.hx",383,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_384_get_blend_dest_rgb,"luxe.Visual","get_blend_dest_rgb",0x1923e33d,"luxe.Visual.get_blend_dest_rgb","luxe/Visual.hx",384,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_386_set_blend_disabled,"luxe.Visual","set_blend_disabled",0xad82ffbd,"luxe.Visual.set_blend_disabled","luxe/Visual.hx",386,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_391_set_blend_src,"luxe.Visual","set_blend_src",0x7ff39043,"luxe.Visual.set_blend_src","luxe/Visual.hx",391,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_397_set_blend_dest,"luxe.Visual","set_blend_dest",0x6b36a823,"luxe.Visual.set_blend_dest","luxe/Visual.hx",397,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_403_set_blend_src_alpha,"luxe.Visual","set_blend_src_alpha",0x8a9b9322,"luxe.Visual.set_blend_src_alpha","luxe/Visual.hx",403,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_408_set_blend_src_rgb,"luxe.Visual","set_blend_src_rgb",0x7bf68dd1,"luxe.Visual.set_blend_src_rgb","luxe/Visual.hx",408,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_413_set_blend_dest_alpha,"luxe.Visual","set_blend_dest_alpha",0x9a91d302,"luxe.Visual.set_blend_dest_alpha","luxe/Visual.hx",413,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_418_set_blend_dest_rgb,"luxe.Visual","set_blend_dest_rgb",0xf5d315b1,"luxe.Visual.set_blend_dest_rgb","luxe/Visual.hx",418,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_428_get_rotation_z,"luxe.Visual","get_rotation_z",0x34f3cf58,"luxe.Visual.get_rotation_z","luxe/Visual.hx",428,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_432_set_rotation_z,"luxe.Visual","set_rotation_z",0x5513b7cc,"luxe.Visual.set_rotation_z","luxe/Visual.hx",432,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_440_set_radians,"luxe.Visual","set_radians",0x117018bf,"luxe.Visual.set_radians","luxe/Visual.hx",440,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_452_get_radians,"luxe.Visual","get_radians",0x070311b3,"luxe.Visual.get_radians","luxe/Visual.hx",452,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_457_set_locked,"luxe.Visual","set_locked",0x0706bb5d,"luxe.Visual.set_locked","luxe/Visual.hx",457,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_470_set_clip_rect,"luxe.Visual","set_clip_rect",0xf17507c0,"luxe.Visual.set_clip_rect","luxe/Visual.hx",470,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_2df8cb75335b17ce_482__size_change,"luxe.Visual","_size_change",0xe1a11405,"luxe.Visual._size_change","luxe/Visual.hx",482,0xe3547505)
HX_LOCAL_STACK_FRAME(_hx_pos_7583d7405a00e313_35_init,"luxe.Visual","init",0x78020ea6,"luxe.Visual.init","luxe/macros/EntityRules.hx",35,0xed942299)
namespace luxe{

void Visual_obj::__construct( ::Dynamic _options){
            	HX_GC_STACKFRAME(&_hx_pos_2df8cb75335b17ce_22_new)
HXLINE( 289)		this->ignore_texture_on_geometry_change = false;
HXLINE( 139)		this->_creating_geometry = false;
HXLINE(  70)		this->_has_custom_origin = false;
HXLINE(  44)		this->radians = ((Float)0.0);
HXLINE(  40)		this->depth = ((Float)0.0);
HXLINE(  38)		this->visible = true;
HXLINE(  30)		this->locked = false;
HXLINE(  75)		if (hx::IsNull( _options )) {
HXLINE(  75)			HX_STACK_DO_THROW(::luxe::DebugError_obj::null_assertion((HX_("_options was null",3f,38,24,a1) + ((HX_(" ( ",18,6b,18,00) + HX_("Visual requires non-null options",f7,e4,5e,89)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE(  79)		this->_rotation_euler =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  80)		this->_rotation_quat =  ::phoenix::Quaternion_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  83)		super::__construct(_options);
HXLINE(  86)		this->set_color( ::phoenix::Color_obj::__alloc( HX_CTX ,null(),null(),null(),null()));
HXLINE(  87)		this->set_size( ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null()));
HXLINE(  90)		if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("texture",db,c8,e0,9e),hx::paccDynamic)) )) {
HXLINE(  91)			this->set_texture(( ( ::phoenix::Texture)(this->options->__Field(HX_("texture",db,c8,e0,9e),hx::paccDynamic)) ));
            		}
HXLINE(  94)		if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)) )) {
HXLINE(  95)			this->set_shader(( ( ::phoenix::Shader)(this->options->__Field(HX_("shader",25,bf,20,1d),hx::paccDynamic)) ));
            		}
HXLINE(  98)		if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)) )) {
HXLINE(  99)			this->set_color(( ( ::phoenix::Color)(this->options->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)) ));
            		}
HXLINE( 102)		if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic)) )) {
HXLINE( 103)			this->set_depth(( (Float)(this->options->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic)) ));
            		}
HXLINE( 106)		if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) )) {
HXLINE( 107)			this->set_visible(( (bool)(this->options->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ));
            		}
HXLINE( 113)		if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) )) {
HXLINE( 115)			this->set_size(( ( ::phoenix::Vector)(this->options->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) ));
HXLINE( 117)			this->_create_geometry();
            		}
            		else {
HXLINE( 122)			if (hx::IsNotNull( this->texture )) {
HXLINE( 124)				this->set_size( ::phoenix::Vector_obj::__alloc( HX_CTX ,this->texture->width,this->texture->height,null(),null()));
HXLINE( 125)				this->_create_geometry();
            			}
            			else {
HXLINE( 130)				this->set_size( ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)64,(int)64,null(),null()));
HXLINE( 131)				this->_create_geometry();
            			}
            		}
            	}

Dynamic Visual_obj::__CreateEmpty() { return new Visual_obj; }

void *Visual_obj::_hx_vtable = 0;

Dynamic Visual_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Visual_obj > _hx_result = new Visual_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Visual_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x099ca90a) {
		if (inClassId<=(int)0x025d481e) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x025d481e;
		} else {
			return inClassId==(int)0x099ca90a;
		}
	} else {
		return inClassId==(int)0x0bbca018 || inClassId==(int)0x17ed3881;
	}
}

void Visual_obj::_create_geometry(){
            	HX_GC_STACKFRAME(&_hx_pos_2df8cb75335b17ce_140__create_geometry)
HXLINE( 143)		if (hx::IsNull(  ::Dynamic(this->options->__Field(HX_("geometry",b2,02,a9,d2),hx::paccDynamic)) )) {
HXLINE( 145)			bool _hx_tmp;
HXDLIN( 145)			if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("no_geometry",b0,09,1b,da),hx::paccDynamic)) )) {
HXLINE( 145)				_hx_tmp = hx::IsEq(  ::Dynamic(this->options->__Field(HX_("no_geometry",b0,09,1b,da),hx::paccDynamic)),false );
            			}
            			else {
HXLINE( 145)				_hx_tmp = true;
            			}
HXDLIN( 145)			if (_hx_tmp) {
HXLINE( 147)				this->_creating_geometry = true;
HXLINE( 149)				 ::phoenix::Batcher _batcher = null();
HXLINE( 150)				bool _hx_tmp1;
HXDLIN( 150)				if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("no_batcher_add",0b,25,c3,59),hx::paccDynamic)) )) {
HXLINE( 150)					_hx_tmp1 = hx::IsEq(  ::Dynamic(this->options->__Field(HX_("no_batcher_add",0b,25,c3,59),hx::paccDynamic)),false );
            				}
            				else {
HXLINE( 150)					_hx_tmp1 = true;
            				}
HXDLIN( 150)				if (_hx_tmp1) {
HXLINE( 151)					if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("batcher",a7,22,10,c0),hx::paccDynamic)) )) {
HXLINE( 152)						_batcher = ( ( ::phoenix::Batcher)(this->options->__Field(HX_("batcher",a7,22,10,c0),hx::paccDynamic)) );
            					}
            					else {
HXLINE( 154)						_batcher = ::Luxe_obj::renderer->batcher;
            					}
            				}
HXLINE( 159)				::String _hx_tmp2 = (this->get_name() + HX_(".visual",6e,79,67,68));
HXLINE( 162)				Float _hx_tmp3 = this->size->x;
HXLINE( 163)				Float _hx_tmp4 = this->size->y;
HXLINE( 169)				 ::Dynamic _hx_tmp5;
HXDLIN( 169)				if (hx::IsNull(  ::Dynamic(this->options->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic)) )) {
HXLINE( 169)					_hx_tmp5 = (int)0;
            				}
            				else {
HXLINE( 169)					_hx_tmp5 = this->options->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic);
            				}
HXLINE( 170)				 ::Dynamic _hx_tmp6;
HXDLIN( 170)				if (hx::IsNull(  ::Dynamic(this->options->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) )) {
HXLINE( 170)					_hx_tmp6 = this->visible;
            				}
            				else {
HXLINE( 170)					_hx_tmp6 = this->options->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic);
            				}
HXLINE( 158)				this->set_geometry( ::phoenix::geometry::QuadGeometry_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(12)
            					->setFixed(0,HX_("texture",db,c8,e0,9e),this->texture)
            					->setFixed(1,HX_("visible",72,78,24,a3),_hx_tmp6)
            					->setFixed(2,HX_("batcher",a7,22,10,c0),_batcher)
            					->setFixed(3,HX_("depth",03,f1,29,d7),_hx_tmp5)
            					->setFixed(4,HX_("h",68,00,00,00),_hx_tmp4)
            					->setFixed(5,HX_("w",77,00,00,00),_hx_tmp3)
            					->setFixed(6,HX_("x",78,00,00,00),(int)0)
            					->setFixed(7,HX_("y",79,00,00,00),(int)0)
            					->setFixed(8,HX_("id",db,5b,00,00),_hx_tmp2)
            					->setFixed(9,HX_("shader",25,bf,20,1d),this->shader)
            					->setFixed(10,HX_("color",63,71,5c,4a),this->color)
            					->setFixed(11,HX_("scale",8a,ce,ce,78), ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)1,(int)1,(int)1,null())))));
HXLINE( 173)				this->_creating_geometry = false;
HXLINE( 176)				this->on_geometry_created();
            			}
            		}
            		else {
HXLINE( 182)			this->set_geometry(( ( ::phoenix::geometry::Geometry)(this->options->__Field(HX_("geometry",b2,02,a9,d2),hx::paccDynamic)) ));
            		}
HXLINE( 187)		if (hx::IsNotNull( this->geometry )) {
HXLINE( 188)			::String _hx_tmp7 = this->get_name();
HXDLIN( 188)			this->geometry->id = (_hx_tmp7 + HX_(".visual",6e,79,67,68));
HXLINE( 189)			::String _hx_tmp8 = this->get_name();
HXDLIN( 189)			this->geometry->transform->id = (_hx_tmp8 + HX_(".visual.transform",6c,86,5f,e2));
            		}
HXLINE( 193)		if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("origin",e6,19,01,4b),hx::paccDynamic)) )) {
HXLINE( 194)			this->_has_custom_origin = true;
HXLINE( 195)			this->set_origin(( ( ::phoenix::Vector)(this->options->__Field(HX_("origin",e6,19,01,4b),hx::paccDynamic)) ));
            		}
HXLINE( 199)		if (hx::IsNotNull(  ::Dynamic(this->options->__Field(HX_("rotation_z",f9,db,7e,e4),hx::paccDynamic)) )) {
HXLINE( 200)			this->set_rotation_z(( (Float)(this->options->__Field(HX_("rotation_z",f9,db,7e,e4),hx::paccDynamic)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Visual_obj,_create_geometry,(void))

void Visual_obj::ondestroy(){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_205_ondestroy)
HXLINE( 208)		bool _hx_tmp;
HXDLIN( 208)		if (hx::IsNotNull( this->geometry )) {
HXLINE( 208)			_hx_tmp = this->geometry->added;
            		}
            		else {
HXLINE( 208)			_hx_tmp = false;
            		}
HXDLIN( 208)		if (_hx_tmp) {
HXLINE( 209)			this->geometry->drop(true);
            		}
HXLINE( 213)		this->set_transform(null());
HXLINE( 214)		this->options = null();
HXLINE( 215)		this->set_geometry(null());
HXLINE( 216)		this->set_texture(null());
HXLINE( 217)		this->set_shader(null());
HXLINE( 218)		this->set_color(null());
HXLINE( 219)		this->set_size(null());
HXLINE( 220)		this->set_clip_rect(null());
HXLINE( 221)		this->_rotation_euler = null();
HXLINE( 222)		this->_rotation_quat = null();
            	}


void Visual_obj::on_geometry_created(){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_226_on_geometry_created)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Visual_obj,on_geometry_created,(void))

bool Visual_obj::set_visible(bool _v){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_234_set_visible)
HXLINE( 236)		this->visible = _v;
HXLINE( 239)		if (hx::IsNotNull( this->geometry )) {
HXLINE( 240)			this->geometry->set_visible(this->visible);
            		}
HXLINE( 243)		return this->visible;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_visible,return )

Float Visual_obj::set_depth(Float _v){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_247_set_depth)
HXLINE( 249)		if (hx::IsNotNull( this->geometry )) {
HXLINE( 250)			this->geometry->set_depth(_v);
            		}
HXLINE( 253)		return (this->depth = _v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_depth,return )

 ::phoenix::Color Visual_obj::set_color( ::phoenix::Color _c){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_259_set_color)
HXLINE( 261)		bool _hx_tmp;
HXDLIN( 261)		if (hx::IsNotNull( this->color )) {
HXLINE( 261)			_hx_tmp = hx::IsNotNull( this->geometry );
            		}
            		else {
HXLINE( 261)			_hx_tmp = false;
            		}
HXDLIN( 261)		if (_hx_tmp) {
HXLINE( 262)			this->geometry->set_color(_c);
            		}
HXLINE( 265)		return (this->color = _c);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_color,return )

 ::phoenix::Texture Visual_obj::set_texture( ::phoenix::Texture _t){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_269_set_texture)
HXLINE( 271)		bool _hx_tmp;
HXDLIN( 271)		if (hx::IsNotNull( this->geometry )) {
HXLINE( 271)			_hx_tmp = hx::IsNotEq( this->geometry->state->texture,_t );
            		}
            		else {
HXLINE( 271)			_hx_tmp = false;
            		}
HXDLIN( 271)		if (_hx_tmp) {
HXLINE( 272)			this->geometry->set_texture(_t);
            		}
HXLINE( 275)		return (this->texture = _t);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_texture,return )

 ::phoenix::Shader Visual_obj::set_shader( ::phoenix::Shader _s){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_278_set_shader)
HXLINE( 280)		bool _hx_tmp;
HXDLIN( 280)		if (hx::IsNotNull( this->geometry )) {
HXLINE( 280)			_hx_tmp = hx::IsNotEq( this->geometry->state->shader,_s );
            		}
            		else {
HXLINE( 280)			_hx_tmp = false;
            		}
HXDLIN( 280)		if (_hx_tmp) {
HXLINE( 281)			this->geometry->set_shader(_s);
            		}
HXLINE( 284)		return (this->shader = _s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_shader,return )

 ::phoenix::geometry::Geometry Visual_obj::set_geometry( ::phoenix::geometry::Geometry _g){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_291_set_geometry)
HXLINE( 294)		if (hx::IsEq( this->geometry,_g )) {
HXLINE( 295)			return this->geometry;
            		}
HXLINE( 299)		if (hx::IsNotNull( this->geometry )) {
HXLINE( 300)			this->geometry->drop(null());
            		}
HXLINE( 304)		this->geometry = _g;
HXLINE( 307)		if (hx::IsNotNull( this->geometry )) {
HXLINE( 310)			{
HXLINE( 310)				 ::phoenix::Transform _this = this->geometry->transform;
HXDLIN( 310)				 ::phoenix::Transform _p = this->get_transform();
HXDLIN( 310)				{
HXLINE( 310)					_this->dirty = true;
HXDLIN( 310)					bool _hx_tmp;
HXDLIN( 310)					bool _hx_tmp1;
HXDLIN( 310)					bool _hx_tmp2;
HXDLIN( 310)					if (_this->dirty) {
HXLINE( 310)						_hx_tmp2 = !(_this->_setup);
            					}
            					else {
HXLINE( 310)						_hx_tmp2 = false;
            					}
HXDLIN( 310)					if (_hx_tmp2) {
HXLINE( 310)						_hx_tmp1 = hx::IsNotNull( _this->_dirty_handlers );
            					}
            					else {
HXLINE( 310)						_hx_tmp1 = false;
            					}
HXDLIN( 310)					if (_hx_tmp1) {
HXLINE( 310)						_hx_tmp = (_this->_dirty_handlers->length > (int)0);
            					}
            					else {
HXLINE( 310)						_hx_tmp = false;
            					}
HXDLIN( 310)					if (_hx_tmp) {
HXLINE( 310)						int _g1 = (int)0;
HXDLIN( 310)						::Array< ::Dynamic> _g11 = _this->_dirty_handlers;
HXDLIN( 310)						while((_g1 < _g11->length)){
HXLINE( 310)							 ::Dynamic _handler = _g11->__get(_g1);
HXDLIN( 310)							_g1 = (_g1 + (int)1);
HXDLIN( 310)							if (hx::IsNotNull( _handler )) {
HXLINE( 310)								_handler(_this);
            							}
            						}
            					}
            				}
HXDLIN( 310)				if (hx::IsNotNull( _this->parent )) {
HXLINE( 310)					 ::phoenix::Transform _this1 = _this->parent;
HXDLIN( 310)					if (hx::IsNotNull( _this1->_clean_handlers )) {
HXLINE( 310)						_this1->_clean_handlers->remove(_this->on_parent_cleaned_dyn());
            					}
            				}
HXDLIN( 310)				_this->parent = _p;
HXDLIN( 310)				bool _hx_tmp3;
HXDLIN( 310)				if (hx::IsNotNull( _this->_parent_handlers )) {
HXLINE( 310)					_hx_tmp3 = (_this->_parent_handlers->length > (int)0);
            				}
            				else {
HXLINE( 310)					_hx_tmp3 = false;
            				}
HXDLIN( 310)				if (_hx_tmp3) {
HXLINE( 310)					 ::phoenix::Transform _parent = _this->parent;
HXDLIN( 310)					{
HXLINE( 310)						int _g2 = (int)0;
HXDLIN( 310)						::Array< ::Dynamic> _g12 = _this->_parent_handlers;
HXDLIN( 310)						while((_g2 < _g12->length)){
HXLINE( 310)							 ::Dynamic _handler1 = _g12->__get(_g2);
HXDLIN( 310)							_g2 = (_g2 + (int)1);
HXDLIN( 310)							if (hx::IsNotNull( _handler1 )) {
HXLINE( 310)								_handler1(_parent);
            							}
            						}
            					}
            				}
HXDLIN( 310)				if (hx::IsNotNull( _this->parent )) {
HXLINE( 310)					 ::phoenix::Transform _this2 = _this->parent;
HXDLIN( 310)					if (hx::IsNull( _this2->_clean_handlers )) {
HXLINE( 310)						_this2->_clean_handlers = ::Array_obj< ::Dynamic>::__new(0);
            					}
HXDLIN( 310)					_this2->_clean_handlers->push(_this->on_parent_cleaned_dyn());
            				}
            			}
HXLINE( 319)			if ((this->_creating_geometry == false)) {
HXLINE( 321)				this->geometry->set_color(this->color);
HXLINE( 322)				this->geometry->set_depth(this->depth);
HXLINE( 323)				this->geometry->set_visible(this->visible);
HXLINE( 326)				bool _hx_tmp4 = !(this->ignore_texture_on_geometry_change);
            			}
            		}
HXLINE( 335)		return this->geometry;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_geometry,return )

void Visual_obj::set_parent_from_transform( ::phoenix::Transform _parent){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_342_set_parent_from_transform)
HXLINE( 344)		this->super::set_parent_from_transform(_parent);
HXLINE( 346)		if (hx::IsNotNull( this->geometry )) {
HXLINE( 348)			 ::phoenix::Transform _this = this->geometry->transform;
HXDLIN( 348)			 ::phoenix::Transform _p = this->get_transform();
HXDLIN( 348)			{
HXLINE( 348)				_this->dirty = true;
HXDLIN( 348)				bool _hx_tmp;
HXDLIN( 348)				bool _hx_tmp1;
HXDLIN( 348)				bool _hx_tmp2;
HXDLIN( 348)				if (_this->dirty) {
HXLINE( 348)					_hx_tmp2 = !(_this->_setup);
            				}
            				else {
HXLINE( 348)					_hx_tmp2 = false;
            				}
HXDLIN( 348)				if (_hx_tmp2) {
HXLINE( 348)					_hx_tmp1 = hx::IsNotNull( _this->_dirty_handlers );
            				}
            				else {
HXLINE( 348)					_hx_tmp1 = false;
            				}
HXDLIN( 348)				if (_hx_tmp1) {
HXLINE( 348)					_hx_tmp = (_this->_dirty_handlers->length > (int)0);
            				}
            				else {
HXLINE( 348)					_hx_tmp = false;
            				}
HXDLIN( 348)				if (_hx_tmp) {
HXLINE( 348)					int _g = (int)0;
HXDLIN( 348)					::Array< ::Dynamic> _g1 = _this->_dirty_handlers;
HXDLIN( 348)					while((_g < _g1->length)){
HXLINE( 348)						 ::Dynamic _handler = _g1->__get(_g);
HXDLIN( 348)						_g = (_g + (int)1);
HXDLIN( 348)						if (hx::IsNotNull( _handler )) {
HXLINE( 348)							_handler(_this);
            						}
            					}
            				}
            			}
HXDLIN( 348)			if (hx::IsNotNull( _this->parent )) {
HXLINE( 348)				 ::phoenix::Transform _this1 = _this->parent;
HXDLIN( 348)				if (hx::IsNotNull( _this1->_clean_handlers )) {
HXLINE( 348)					_this1->_clean_handlers->remove(_this->on_parent_cleaned_dyn());
            				}
            			}
HXDLIN( 348)			_this->parent = _p;
HXDLIN( 348)			bool _hx_tmp3;
HXDLIN( 348)			if (hx::IsNotNull( _this->_parent_handlers )) {
HXLINE( 348)				_hx_tmp3 = (_this->_parent_handlers->length > (int)0);
            			}
            			else {
HXLINE( 348)				_hx_tmp3 = false;
            			}
HXDLIN( 348)			if (_hx_tmp3) {
HXLINE( 348)				 ::phoenix::Transform _parent1 = _this->parent;
HXDLIN( 348)				{
HXLINE( 348)					int _g2 = (int)0;
HXDLIN( 348)					::Array< ::Dynamic> _g11 = _this->_parent_handlers;
HXDLIN( 348)					while((_g2 < _g11->length)){
HXLINE( 348)						 ::Dynamic _handler1 = _g11->__get(_g2);
HXDLIN( 348)						_g2 = (_g2 + (int)1);
HXDLIN( 348)						if (hx::IsNotNull( _handler1 )) {
HXLINE( 348)							_handler1(_parent1);
            						}
            					}
            				}
            			}
HXDLIN( 348)			if (hx::IsNotNull( _this->parent )) {
HXLINE( 348)				 ::phoenix::Transform _this2 = _this->parent;
HXDLIN( 348)				if (hx::IsNull( _this2->_clean_handlers )) {
HXLINE( 348)					_this2->_clean_handlers = ::Array_obj< ::Dynamic>::__new(0);
            				}
HXDLIN( 348)				_this2->_clean_handlers->push(_this->on_parent_cleaned_dyn());
            			}
            		}
            	}


void Visual_obj::set_rotation_from_transform( ::phoenix::Quaternion _rotation){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_353_set_rotation_from_transform)
HXLINE( 355)		this->super::set_rotation_from_transform(_rotation);
HXLINE( 358)		{
HXLINE( 358)			 ::phoenix::Vector _this = this->_rotation_euler;
HXDLIN( 358)			int order = (int)0;
HXDLIN( 358)			Float sqx = (_rotation->x * _rotation->x);
HXDLIN( 358)			Float sqy = (_rotation->y * _rotation->y);
HXDLIN( 358)			Float sqz = (_rotation->z * _rotation->z);
HXDLIN( 358)			Float sqw = (_rotation->w * _rotation->w);
HXDLIN( 358)			Float _x = _this->x;
HXDLIN( 358)			Float _y = _this->y;
HXDLIN( 358)			Float _z = _this->z;
HXDLIN( 358)			if ((order == (int)0)) {
HXLINE( 358)				Float _x1 = (_rotation->x * _rotation->w);
HXDLIN( 358)				Float _x2 = ((int)2 * (_x1 - (_rotation->y * _rotation->z)));
HXDLIN( 358)				_x = ::Math_obj::atan2(_x2,(((sqw - sqx) - sqy) + sqz));
HXDLIN( 358)				Float value = (_rotation->x * _rotation->z);
HXDLIN( 358)				Float value1 = ((int)2 * (value + (_rotation->y * _rotation->w)));
HXDLIN( 358)				Float _y1;
HXDLIN( 358)				if ((value1 < (int)-1)) {
HXLINE( 358)					_y1 = (int)-1;
            				}
            				else {
HXLINE( 358)					if ((value1 > (int)1)) {
HXLINE( 358)						_y1 = (int)1;
            					}
            					else {
HXLINE( 358)						_y1 = value1;
            					}
            				}
HXDLIN( 358)				_y = ::Math_obj::asin(_y1);
HXDLIN( 358)				Float _z1 = (_rotation->z * _rotation->w);
HXDLIN( 358)				Float _z2 = ((int)2 * (_z1 - (_rotation->x * _rotation->y)));
HXDLIN( 358)				_z = ::Math_obj::atan2(_z2,(((sqw + sqx) - sqy) - sqz));
            			}
            			else {
HXLINE( 358)				if ((order == (int)1)) {
HXLINE( 358)					Float value2 = (_rotation->x * _rotation->w);
HXDLIN( 358)					Float value3 = ((int)2 * (value2 - (_rotation->y * _rotation->z)));
HXDLIN( 358)					Float _x3;
HXDLIN( 358)					if ((value3 < (int)-1)) {
HXLINE( 358)						_x3 = (int)-1;
            					}
            					else {
HXLINE( 358)						if ((value3 > (int)1)) {
HXLINE( 358)							_x3 = (int)1;
            						}
            						else {
HXLINE( 358)							_x3 = value3;
            						}
            					}
HXDLIN( 358)					_x = ::Math_obj::asin(_x3);
HXDLIN( 358)					Float _y2 = (_rotation->x * _rotation->z);
HXDLIN( 358)					Float _y3 = ((int)2 * (_y2 + (_rotation->y * _rotation->w)));
HXDLIN( 358)					_y = ::Math_obj::atan2(_y3,(((sqw - sqx) - sqy) + sqz));
HXDLIN( 358)					Float _z3 = (_rotation->x * _rotation->y);
HXDLIN( 358)					Float _z4 = ((int)2 * (_z3 + (_rotation->z * _rotation->w)));
HXDLIN( 358)					_z = ::Math_obj::atan2(_z4,(((sqw - sqx) + sqy) - sqz));
            				}
            				else {
HXLINE( 358)					if ((order == (int)2)) {
HXLINE( 358)						Float value4 = (_rotation->x * _rotation->w);
HXDLIN( 358)						Float value5 = ((int)2 * (value4 + (_rotation->y * _rotation->z)));
HXDLIN( 358)						Float _x4;
HXDLIN( 358)						if ((value5 < (int)-1)) {
HXLINE( 358)							_x4 = (int)-1;
            						}
            						else {
HXLINE( 358)							if ((value5 > (int)1)) {
HXLINE( 358)								_x4 = (int)1;
            							}
            							else {
HXLINE( 358)								_x4 = value5;
            							}
            						}
HXDLIN( 358)						_x = ::Math_obj::asin(_x4);
HXDLIN( 358)						Float _y4 = (_rotation->y * _rotation->w);
HXDLIN( 358)						Float _y5 = ((int)2 * (_y4 - (_rotation->z * _rotation->x)));
HXDLIN( 358)						_y = ::Math_obj::atan2(_y5,(((sqw - sqx) - sqy) + sqz));
HXDLIN( 358)						Float _z5 = (_rotation->z * _rotation->w);
HXDLIN( 358)						Float _z6 = ((int)2 * (_z5 - (_rotation->x * _rotation->y)));
HXDLIN( 358)						_z = ::Math_obj::atan2(_z6,(((sqw - sqx) + sqy) - sqz));
            					}
            					else {
HXLINE( 358)						if ((order == (int)3)) {
HXLINE( 358)							Float _x5 = (_rotation->x * _rotation->w);
HXDLIN( 358)							Float _x6 = ((int)2 * (_x5 + (_rotation->z * _rotation->y)));
HXDLIN( 358)							_x = ::Math_obj::atan2(_x6,(((sqw - sqx) - sqy) + sqz));
HXDLIN( 358)							Float value6 = (_rotation->y * _rotation->w);
HXDLIN( 358)							Float value7 = ((int)2 * (value6 - (_rotation->x * _rotation->z)));
HXDLIN( 358)							Float _y6;
HXDLIN( 358)							if ((value7 < (int)-1)) {
HXLINE( 358)								_y6 = (int)-1;
            							}
            							else {
HXLINE( 358)								if ((value7 > (int)1)) {
HXLINE( 358)									_y6 = (int)1;
            								}
            								else {
HXLINE( 358)									_y6 = value7;
            								}
            							}
HXDLIN( 358)							_y = ::Math_obj::asin(_y6);
HXDLIN( 358)							Float _z7 = (_rotation->x * _rotation->y);
HXDLIN( 358)							Float _z8 = ((int)2 * (_z7 + (_rotation->z * _rotation->w)));
HXDLIN( 358)							_z = ::Math_obj::atan2(_z8,(((sqw + sqx) - sqy) - sqz));
            						}
            						else {
HXLINE( 358)							if ((order == (int)4)) {
HXLINE( 358)								Float _x7 = (_rotation->x * _rotation->w);
HXDLIN( 358)								Float _x8 = ((int)2 * (_x7 - (_rotation->z * _rotation->y)));
HXDLIN( 358)								_x = ::Math_obj::atan2(_x8,(((sqw - sqx) + sqy) - sqz));
HXDLIN( 358)								Float _y7 = (_rotation->y * _rotation->w);
HXDLIN( 358)								Float _y8 = ((int)2 * (_y7 - (_rotation->x * _rotation->z)));
HXDLIN( 358)								_y = ::Math_obj::atan2(_y8,(((sqw + sqx) - sqy) - sqz));
HXDLIN( 358)								Float value8 = (_rotation->x * _rotation->y);
HXDLIN( 358)								Float value9 = ((int)2 * (value8 + (_rotation->z * _rotation->w)));
HXDLIN( 358)								Float _z9;
HXDLIN( 358)								if ((value9 < (int)-1)) {
HXLINE( 358)									_z9 = (int)-1;
            								}
            								else {
HXLINE( 358)									if ((value9 > (int)1)) {
HXLINE( 358)										_z9 = (int)1;
            									}
            									else {
HXLINE( 358)										_z9 = value9;
            									}
            								}
HXDLIN( 358)								_z = ::Math_obj::asin(_z9);
            							}
            							else {
HXLINE( 358)								if ((order == (int)5)) {
HXLINE( 358)									Float _x9 = (_rotation->x * _rotation->w);
HXDLIN( 358)									Float _x10 = ((int)2 * (_x9 + (_rotation->y * _rotation->z)));
HXDLIN( 358)									_x = ::Math_obj::atan2(_x10,(((sqw - sqx) + sqy) - sqz));
HXDLIN( 358)									Float _y9 = (_rotation->x * _rotation->z);
HXDLIN( 358)									Float _y10 = ((int)2 * (_y9 + (_rotation->y * _rotation->w)));
HXDLIN( 358)									_y = ::Math_obj::atan2(_y10,(((sqw + sqx) - sqy) - sqz));
HXDLIN( 358)									Float value10 = (_rotation->z * _rotation->w);
HXDLIN( 358)									Float value11 = ((int)2 * (value10 - (_rotation->x * _rotation->y)));
HXDLIN( 358)									Float _z10;
HXDLIN( 358)									if ((value11 < (int)-1)) {
HXLINE( 358)										_z10 = (int)-1;
            									}
            									else {
HXLINE( 358)										if ((value11 > (int)1)) {
HXLINE( 358)											_z10 = (int)1;
            										}
            										else {
HXLINE( 358)											_z10 = value11;
            										}
            									}
HXDLIN( 358)									_z = ::Math_obj::asin(_z10);
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 358)			{
HXLINE( 358)				bool prev = _this->ignore_listeners;
HXDLIN( 358)				_this->ignore_listeners = true;
HXDLIN( 358)				{
HXLINE( 358)					_this->x = _x;
HXDLIN( 358)					if (!(_this->_construct)) {
HXLINE( 358)						bool _hx_tmp;
HXDLIN( 358)						if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 358)							_hx_tmp = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 358)							_hx_tmp = false;
            						}
HXDLIN( 358)						if (_hx_tmp) {
HXLINE( 358)							_this->listen_x(_x);
            						}
            					}
            				}
HXDLIN( 358)				{
HXLINE( 358)					_this->y = _y;
HXDLIN( 358)					if (!(_this->_construct)) {
HXLINE( 358)						bool _hx_tmp1;
HXDLIN( 358)						if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 358)							_hx_tmp1 = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 358)							_hx_tmp1 = false;
            						}
HXDLIN( 358)						if (_hx_tmp1) {
HXLINE( 358)							_this->listen_y(_y);
            						}
            					}
            				}
HXDLIN( 358)				{
HXLINE( 358)					_this->z = _z;
HXDLIN( 358)					if (!(_this->_construct)) {
HXLINE( 358)						bool _hx_tmp2;
HXDLIN( 358)						if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 358)							_hx_tmp2 = !(_this->ignore_listeners);
            						}
            						else {
HXLINE( 358)							_hx_tmp2 = false;
            						}
HXDLIN( 358)						if (_hx_tmp2) {
HXLINE( 358)							_this->listen_z(_z);
            						}
            					}
            				}
HXDLIN( 358)				_this->ignore_listeners = prev;
HXDLIN( 358)				bool _hx_tmp3;
HXDLIN( 358)				if (hx::IsNotNull( _this->listen_x )) {
HXLINE( 358)					_hx_tmp3 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 358)					_hx_tmp3 = false;
            				}
HXDLIN( 358)				if (_hx_tmp3) {
HXLINE( 358)					_this->listen_x(_this->x);
            				}
HXDLIN( 358)				bool _hx_tmp4;
HXDLIN( 358)				if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 358)					_hx_tmp4 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 358)					_hx_tmp4 = false;
            				}
HXDLIN( 358)				if (_hx_tmp4) {
HXLINE( 358)					_this->listen_y(_this->y);
            				}
HXDLIN( 358)				bool _hx_tmp5;
HXDLIN( 358)				if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 358)					_hx_tmp5 = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 358)					_hx_tmp5 = false;
            				}
HXDLIN( 358)				if (_hx_tmp5) {
HXLINE( 358)					_this->listen_z(_this->z);
            				}
            			}
            		}
HXLINE( 359)		this->_rotation_quat->copy(_rotation);
            	}


 ::phoenix::Vector Visual_obj::set_size( ::phoenix::Vector _v){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_365_set_size)
HXLINE( 367)		this->size = _v;
HXLINE( 369)		if (hx::IsNotNull( this->size )) {
HXLINE( 370)			 ::phoenix::Vector _v1 = this->size;
HXDLIN( 370)			 ::Dynamic listener = this->_size_change_dyn();
HXDLIN( 370)			_v1->listen_x = listener;
HXDLIN( 370)			_v1->listen_y = listener;
HXDLIN( 370)			_v1->listen_z = listener;
            		}
HXLINE( 372)		return this->size;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_size,return )

bool Visual_obj::get_blend_disabled(){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_378_get_blend_disabled)
HXDLIN( 378)		return this->geometry->state->blend_disabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Visual_obj,get_blend_disabled,return )

int Visual_obj::get_blend_src(){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_379_get_blend_src)
HXDLIN( 379)		return this->geometry->state->blend_src_alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Visual_obj,get_blend_src,return )

int Visual_obj::get_blend_dest(){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_380_get_blend_dest)
HXDLIN( 380)		return this->geometry->state->blend_dest_alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Visual_obj,get_blend_dest,return )

int Visual_obj::get_blend_src_alpha(){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_381_get_blend_src_alpha)
HXDLIN( 381)		return this->geometry->state->blend_src_alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Visual_obj,get_blend_src_alpha,return )

int Visual_obj::get_blend_src_rgb(){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_382_get_blend_src_rgb)
HXDLIN( 382)		return this->geometry->state->blend_src_rgb;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Visual_obj,get_blend_src_rgb,return )

int Visual_obj::get_blend_dest_alpha(){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_383_get_blend_dest_alpha)
HXDLIN( 383)		return this->geometry->state->blend_dest_alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Visual_obj,get_blend_dest_alpha,return )

int Visual_obj::get_blend_dest_rgb(){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_384_get_blend_dest_rgb)
HXDLIN( 384)		return this->geometry->state->blend_dest_rgb;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Visual_obj,get_blend_dest_rgb,return )

bool Visual_obj::set_blend_disabled(bool val){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_386_set_blend_disabled)
HXLINE( 387)		this->geometry->set_blend_disabled(val);
HXLINE( 388)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_blend_disabled,return )

int Visual_obj::set_blend_src(int val){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_391_set_blend_src)
HXLINE( 392)		this->geometry->set_blend_src_alpha(val);
HXLINE( 393)		this->geometry->set_blend_src_rgb(val);
HXLINE( 394)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_blend_src,return )

int Visual_obj::set_blend_dest(int val){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_397_set_blend_dest)
HXLINE( 398)		this->geometry->set_blend_dest_alpha(val);
HXLINE( 399)		this->geometry->set_blend_dest_rgb(val);
HXLINE( 400)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_blend_dest,return )

int Visual_obj::set_blend_src_alpha(int val){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_403_set_blend_src_alpha)
HXLINE( 404)		this->geometry->set_blend_src_alpha(val);
HXLINE( 405)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_blend_src_alpha,return )

int Visual_obj::set_blend_src_rgb(int val){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_408_set_blend_src_rgb)
HXLINE( 409)		this->geometry->set_blend_src_rgb(val);
HXLINE( 410)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_blend_src_rgb,return )

int Visual_obj::set_blend_dest_alpha(int val){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_413_set_blend_dest_alpha)
HXLINE( 414)		this->geometry->set_blend_dest_alpha(val);
HXLINE( 415)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_blend_dest_alpha,return )

int Visual_obj::set_blend_dest_rgb(int val){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_418_set_blend_dest_rgb)
HXLINE( 419)		this->geometry->set_blend_dest_rgb(val);
HXLINE( 420)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_blend_dest_rgb,return )

Float Visual_obj::get_rotation_z(){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_428_get_rotation_z)
HXDLIN( 428)		return (this->get_radians() * ((Float)57.2957795130823797));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Visual_obj,get_rotation_z,return )

Float Visual_obj::set_rotation_z(Float _degrees){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_432_set_rotation_z)
HXLINE( 434)		this->set_radians((_degrees * ((Float)0.0174532925199432781)));
HXLINE( 436)		return _degrees;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_rotation_z,return )

Float Visual_obj::set_radians(Float _r){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_440_set_radians)
HXLINE( 442)		{
HXLINE( 442)			 ::phoenix::Vector _this = this->_rotation_euler;
HXDLIN( 442)			_this->z = _r;
HXDLIN( 442)			if (!(_this->_construct)) {
HXLINE( 442)				bool _hx_tmp;
HXDLIN( 442)				if (hx::IsNotNull( _this->listen_z )) {
HXLINE( 442)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 442)					_hx_tmp = false;
            				}
HXDLIN( 442)				if (_hx_tmp) {
HXLINE( 442)					_this->listen_z(_r);
            				}
            			}
            		}
HXLINE( 443)		this->_rotation_quat->setFromEuler(this->_rotation_euler,null());
HXLINE( 445)		this->set_rotation(this->_rotation_quat->clone());
HXLINE( 447)		return (this->radians = _r);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_radians,return )

Float Visual_obj::get_radians(){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_452_get_radians)
HXDLIN( 452)		return this->radians;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Visual_obj,get_radians,return )

bool Visual_obj::set_locked(bool _l){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_457_set_locked)
HXLINE( 459)		if (hx::IsNotNull( this->geometry )) {
HXLINE( 460)			this->geometry->set_locked(_l);
            		}
HXLINE( 463)		return (this->locked = _l);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_locked,return )

 ::phoenix::Rectangle Visual_obj::set_clip_rect( ::phoenix::Rectangle _val){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_470_set_clip_rect)
HXLINE( 472)		if (hx::IsNotNull( this->geometry )) {
HXLINE( 473)			this->geometry->set_clip_rect(_val);
            		}
HXLINE( 476)		return (this->clip_rect = _val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,set_clip_rect,return )

void Visual_obj::_size_change(Float _v){
            	HX_STACKFRAME(&_hx_pos_2df8cb75335b17ce_482__size_change)
HXDLIN( 482)		this->set_size(this->size);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Visual_obj,_size_change,(void))

void Visual_obj::init(){
            	HX_STACKFRAME(&_hx_pos_7583d7405a00e313_35_init)
HXDLIN(  35)		this->super::init();
            	}



hx::ObjectPtr< Visual_obj > Visual_obj::__new( ::Dynamic _options) {
	hx::ObjectPtr< Visual_obj > __this = new Visual_obj();
	__this->__construct(_options);
	return __this;
}

hx::ObjectPtr< Visual_obj > Visual_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic _options) {
	Visual_obj *__this = (Visual_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Visual_obj), true, "luxe.Visual"));
	*(void **)__this = Visual_obj::_hx_vtable;
	__this->__construct(_options);
	return __this;
}

Visual_obj::Visual_obj()
{
}

void Visual_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Visual);
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(geometry,"geometry");
	HX_MARK_MEMBER_NAME(locked,"locked");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(visible,"visible");
	HX_MARK_MEMBER_NAME(depth,"depth");
	HX_MARK_MEMBER_NAME(clip_rect,"clip_rect");
	HX_MARK_MEMBER_NAME(radians,"radians");
	HX_MARK_MEMBER_NAME(_rotation_euler,"_rotation_euler");
	HX_MARK_MEMBER_NAME(_rotation_quat,"_rotation_quat");
	HX_MARK_MEMBER_NAME(_has_custom_origin,"_has_custom_origin");
	HX_MARK_MEMBER_NAME(_creating_geometry,"_creating_geometry");
	HX_MARK_MEMBER_NAME(ignore_texture_on_geometry_change,"ignore_texture_on_geometry_change");
	 ::luxe::Entity_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Visual_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(geometry,"geometry");
	HX_VISIT_MEMBER_NAME(locked,"locked");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(visible,"visible");
	HX_VISIT_MEMBER_NAME(depth,"depth");
	HX_VISIT_MEMBER_NAME(clip_rect,"clip_rect");
	HX_VISIT_MEMBER_NAME(radians,"radians");
	HX_VISIT_MEMBER_NAME(_rotation_euler,"_rotation_euler");
	HX_VISIT_MEMBER_NAME(_rotation_quat,"_rotation_quat");
	HX_VISIT_MEMBER_NAME(_has_custom_origin,"_has_custom_origin");
	HX_VISIT_MEMBER_NAME(_creating_geometry,"_creating_geometry");
	HX_VISIT_MEMBER_NAME(ignore_texture_on_geometry_change,"ignore_texture_on_geometry_change");
	 ::luxe::Entity_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Visual_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"depth") ) { return hx::Val( depth ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"locked") ) { return hx::Val( locked ); }
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture ); }
		if (HX_FIELD_EQ(inName,"visible") ) { return hx::Val( visible ); }
		if (HX_FIELD_EQ(inName,"radians") ) { return hx::Val( inCallProp == hx::paccAlways ? get_radians() : radians ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"geometry") ) { return hx::Val( geometry ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clip_rect") ) { return hx::Val( clip_rect ); }
		if (HX_FIELD_EQ(inName,"blend_src") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blend_src() ); }
		if (HX_FIELD_EQ(inName,"ondestroy") ) { return hx::Val( ondestroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_depth") ) { return hx::Val( set_depth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rotation_z") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotation_z() ); }
		if (HX_FIELD_EQ(inName,"blend_dest") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blend_dest() ); }
		if (HX_FIELD_EQ(inName,"set_shader") ) { return hx::Val( set_shader_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_locked") ) { return hx::Val( set_locked_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_texture") ) { return hx::Val( set_texture_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_radians") ) { return hx::Val( set_radians_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_radians") ) { return hx::Val( get_radians_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_geometry") ) { return hx::Val( set_geometry_dyn() ); }
		if (HX_FIELD_EQ(inName,"_size_change") ) { return hx::Val( _size_change_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"blend_src_rgb") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blend_src_rgb() ); }
		if (HX_FIELD_EQ(inName,"get_blend_src") ) { return hx::Val( get_blend_src_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend_src") ) { return hx::Val( set_blend_src_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_clip_rect") ) { return hx::Val( set_clip_rect_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"blend_disabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blend_disabled() ); }
		if (HX_FIELD_EQ(inName,"blend_dest_rgb") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blend_dest_rgb() ); }
		if (HX_FIELD_EQ(inName,"_rotation_quat") ) { return hx::Val( _rotation_quat ); }
		if (HX_FIELD_EQ(inName,"get_blend_dest") ) { return hx::Val( get_blend_dest_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend_dest") ) { return hx::Val( set_blend_dest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rotation_z") ) { return hx::Val( get_rotation_z_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotation_z") ) { return hx::Val( set_rotation_z_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blend_src_alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blend_src_alpha() ); }
		if (HX_FIELD_EQ(inName,"_rotation_euler") ) { return hx::Val( _rotation_euler ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"blend_dest_alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blend_dest_alpha() ); }
		if (HX_FIELD_EQ(inName,"_create_geometry") ) { return hx::Val( _create_geometry_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_blend_src_rgb") ) { return hx::Val( get_blend_src_rgb_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend_src_rgb") ) { return hx::Val( set_blend_src_rgb_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_has_custom_origin") ) { return hx::Val( _has_custom_origin ); }
		if (HX_FIELD_EQ(inName,"_creating_geometry") ) { return hx::Val( _creating_geometry ); }
		if (HX_FIELD_EQ(inName,"get_blend_disabled") ) { return hx::Val( get_blend_disabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blend_dest_rgb") ) { return hx::Val( get_blend_dest_rgb_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend_disabled") ) { return hx::Val( set_blend_disabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend_dest_rgb") ) { return hx::Val( set_blend_dest_rgb_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"on_geometry_created") ) { return hx::Val( on_geometry_created_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blend_src_alpha") ) { return hx::Val( get_blend_src_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend_src_alpha") ) { return hx::Val( set_blend_src_alpha_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_blend_dest_alpha") ) { return hx::Val( get_blend_dest_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend_dest_alpha") ) { return hx::Val( set_blend_dest_alpha_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"set_parent_from_transform") ) { return hx::Val( set_parent_from_transform_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"set_rotation_from_transform") ) { return hx::Val( set_rotation_from_transform_dyn() ); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"ignore_texture_on_geometry_change") ) { return hx::Val( ignore_texture_on_geometry_change ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Visual_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size(inValue.Cast<  ::phoenix::Vector >()) );size=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast<  ::phoenix::Color >()) );color=inValue.Cast<  ::phoenix::Color >(); return inValue; }
		if (HX_FIELD_EQ(inName,"depth") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_depth(inValue.Cast< Float >()) );depth=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"locked") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_locked(inValue.Cast< bool >()) );locked=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shader") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_shader(inValue.Cast<  ::phoenix::Shader >()) );shader=inValue.Cast<  ::phoenix::Shader >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_texture(inValue.Cast<  ::phoenix::Texture >()) );texture=inValue.Cast<  ::phoenix::Texture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_visible(inValue.Cast< bool >()) );visible=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radians") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_radians(inValue.Cast< Float >()) );radians=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"geometry") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_geometry(inValue.Cast<  ::phoenix::geometry::Geometry >()) );geometry=inValue.Cast<  ::phoenix::geometry::Geometry >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clip_rect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_clip_rect(inValue.Cast<  ::phoenix::Rectangle >()) );clip_rect=inValue.Cast<  ::phoenix::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blend_src") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend_src(inValue.Cast< int >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rotation_z") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation_z(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"blend_dest") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend_dest(inValue.Cast< int >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"blend_src_rgb") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend_src_rgb(inValue.Cast< int >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"blend_disabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend_disabled(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"blend_dest_rgb") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend_dest_rgb(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"_rotation_quat") ) { _rotation_quat=inValue.Cast<  ::phoenix::Quaternion >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blend_src_alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend_src_alpha(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"_rotation_euler") ) { _rotation_euler=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"blend_dest_alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend_dest_alpha(inValue.Cast< int >()) ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_has_custom_origin") ) { _has_custom_origin=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_creating_geometry") ) { _creating_geometry=inValue.Cast< bool >(); return inValue; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"ignore_texture_on_geometry_change") ) { ignore_texture_on_geometry_change=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Visual_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("geometry","\xb2","\x02","\xa9","\xd2"));
	outFields->push(HX_HCSTRING("locked","\x0a","\x05","\xc7","\x59"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"));
	outFields->push(HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"));
	outFields->push(HX_HCSTRING("clip_rect","\x33","\x48","\xa2","\x89"));
	outFields->push(HX_HCSTRING("radians","\x72","\x46","\xf0","\x26"));
	outFields->push(HX_HCSTRING("rotation_z","\xf9","\xdb","\x7e","\xe4"));
	outFields->push(HX_HCSTRING("blend_disabled","\x6a","\x3e","\x58","\x24"));
	outFields->push(HX_HCSTRING("blend_src","\xb6","\xd0","\x20","\x18"));
	outFields->push(HX_HCSTRING("blend_dest","\x50","\xcc","\xa1","\xfa"));
	outFields->push(HX_HCSTRING("blend_src_alpha","\xd5","\x2b","\x5d","\x0e"));
	outFields->push(HX_HCSTRING("blend_src_rgb","\xc4","\x83","\xd8","\x0a"));
	outFields->push(HX_HCSTRING("blend_dest_alpha","\xef","\xd6","\x35","\x60"));
	outFields->push(HX_HCSTRING("blend_dest_rgb","\x5e","\x54","\xa8","\x6c"));
	outFields->push(HX_HCSTRING("_rotation_euler","\x07","\x29","\xed","\x9a"));
	outFields->push(HX_HCSTRING("_rotation_quat","\xf9","\x46","\x4a","\x1d"));
	outFields->push(HX_HCSTRING("_has_custom_origin","\xd0","\xa9","\xf2","\x40"));
	outFields->push(HX_HCSTRING("_creating_geometry","\x79","\xe8","\x48","\x20"));
	outFields->push(HX_HCSTRING("ignore_texture_on_geometry_change","\xae","\x6f","\xe7","\x0f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Visual_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Visual_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{hx::fsObject /*::phoenix::geometry::Geometry*/ ,(int)offsetof(Visual_obj,geometry),HX_HCSTRING("geometry","\xb2","\x02","\xa9","\xd2")},
	{hx::fsBool,(int)offsetof(Visual_obj,locked),HX_HCSTRING("locked","\x0a","\x05","\xc7","\x59")},
	{hx::fsObject /*::phoenix::Texture*/ ,(int)offsetof(Visual_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsObject /*::phoenix::Shader*/ ,(int)offsetof(Visual_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{hx::fsObject /*::phoenix::Color*/ ,(int)offsetof(Visual_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsBool,(int)offsetof(Visual_obj,visible),HX_HCSTRING("visible","\x72","\x78","\x24","\xa3")},
	{hx::fsFloat,(int)offsetof(Visual_obj,depth),HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7")},
	{hx::fsObject /*::phoenix::Rectangle*/ ,(int)offsetof(Visual_obj,clip_rect),HX_HCSTRING("clip_rect","\x33","\x48","\xa2","\x89")},
	{hx::fsFloat,(int)offsetof(Visual_obj,radians),HX_HCSTRING("radians","\x72","\x46","\xf0","\x26")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Visual_obj,_rotation_euler),HX_HCSTRING("_rotation_euler","\x07","\x29","\xed","\x9a")},
	{hx::fsObject /*::phoenix::Quaternion*/ ,(int)offsetof(Visual_obj,_rotation_quat),HX_HCSTRING("_rotation_quat","\xf9","\x46","\x4a","\x1d")},
	{hx::fsBool,(int)offsetof(Visual_obj,_has_custom_origin),HX_HCSTRING("_has_custom_origin","\xd0","\xa9","\xf2","\x40")},
	{hx::fsBool,(int)offsetof(Visual_obj,_creating_geometry),HX_HCSTRING("_creating_geometry","\x79","\xe8","\x48","\x20")},
	{hx::fsBool,(int)offsetof(Visual_obj,ignore_texture_on_geometry_change),HX_HCSTRING("ignore_texture_on_geometry_change","\xae","\x6f","\xe7","\x0f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Visual_obj_sStaticStorageInfo = 0;
#endif

static ::String Visual_obj_sMemberFields[] = {
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("geometry","\xb2","\x02","\xa9","\xd2"),
	HX_HCSTRING("locked","\x0a","\x05","\xc7","\x59"),
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"),
	HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"),
	HX_HCSTRING("clip_rect","\x33","\x48","\xa2","\x89"),
	HX_HCSTRING("radians","\x72","\x46","\xf0","\x26"),
	HX_HCSTRING("_rotation_euler","\x07","\x29","\xed","\x9a"),
	HX_HCSTRING("_rotation_quat","\xf9","\x46","\x4a","\x1d"),
	HX_HCSTRING("_has_custom_origin","\xd0","\xa9","\xf2","\x40"),
	HX_HCSTRING("_creating_geometry","\x79","\xe8","\x48","\x20"),
	HX_HCSTRING("_create_geometry","\x16","\x16","\x40","\x04"),
	HX_HCSTRING("ondestroy","\xbb","\xbd","\xdf","\x2e"),
	HX_HCSTRING("on_geometry_created","\x7b","\x6e","\x90","\xad"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("set_depth","\x66","\x39","\x24","\xfe"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("set_texture","\xfe","\x2f","\x48","\x2f"),
	HX_HCSTRING("set_shader","\x62","\xcd","\x25","\x11"),
	HX_HCSTRING("ignore_texture_on_geometry_change","\xae","\x6f","\xe7","\x0f"),
	HX_HCSTRING("set_geometry","\x2f","\xda","\xbb","\x9c"),
	HX_HCSTRING("set_parent_from_transform","\x2f","\x18","\x5c","\xed"),
	HX_HCSTRING("set_rotation_from_transform","\x5b","\xb5","\xfc","\x30"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("get_blend_disabled","\x33","\x1f","\xf2","\xbf"),
	HX_HCSTRING("get_blend_src","\x8d","\xa4","\x84","\xd9"),
	HX_HCSTRING("get_blend_dest","\x99","\x54","\x97","\x70"),
	HX_HCSTRING("get_blend_src_alpha","\xec","\xfa","\x67","\x99"),
	HX_HCSTRING("get_blend_src_rgb","\x1b","\x8f","\x48","\x11"),
	HX_HCSTRING("get_blend_dest_alpha","\xf8","\x3b","\xa0","\x7e"),
	HX_HCSTRING("get_blend_dest_rgb","\x27","\x35","\x42","\x08"),
	HX_HCSTRING("set_blend_disabled","\xa7","\x51","\xa1","\x9c"),
	HX_HCSTRING("set_blend_src","\x99","\x86","\x8a","\x1e"),
	HX_HCSTRING("set_blend_dest","\x0d","\x3d","\xb7","\x90"),
	HX_HCSTRING("set_blend_src_alpha","\xf8","\xed","\x04","\xd6"),
	HX_HCSTRING("set_blend_src_rgb","\x27","\x67","\xb6","\x34"),
	HX_HCSTRING("set_blend_dest_alpha","\x6c","\xf3","\x57","\x4b"),
	HX_HCSTRING("set_blend_dest_rgb","\x9b","\x67","\xf1","\xe4"),
	HX_HCSTRING("get_rotation_z","\x42","\x64","\x74","\x5a"),
	HX_HCSTRING("set_rotation_z","\xb6","\x4c","\x94","\x7a"),
	HX_HCSTRING("set_radians","\x95","\xad","\x57","\xb7"),
	HX_HCSTRING("get_radians","\x89","\xa6","\xea","\xac"),
	HX_HCSTRING("set_locked","\x47","\x13","\xcc","\x4d"),
	HX_HCSTRING("set_clip_rect","\x16","\xfe","\x0b","\x90"),
	HX_HCSTRING("_size_change","\x6f","\xba","\x5b","\x66"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null()) };

static void Visual_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Visual_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Visual_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Visual_obj::__mClass,"__mClass");
};

#endif

hx::Class Visual_obj::__mClass;

void Visual_obj::__register()
{
	hx::Object *dummy = new Visual_obj;
	Visual_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Visual","\x98","\x34","\xea","\x4e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Visual_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Visual_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Visual_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Visual_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Visual_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Visual_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
