// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_utils_Random
#include <luxe/utils/Random.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ce2a59b721fed29d_17_new,"luxe.utils.Random","new",0x045e4f6a,"luxe.utils.Random.new","luxe/utils/Random.hx",17,0x7d2aac44)
HX_LOCAL_STACK_FRAME(_hx_pos_ce2a59b721fed29d_34_get,"luxe.utils.Random","get",0x0458ffa0,"luxe.utils.Random.get","luxe/utils/Random.hx",34,0x7d2aac44)
HX_LOCAL_STACK_FRAME(_hx_pos_ce2a59b721fed29d_39_float,"luxe.utils.Random","float",0xfd869b26,"luxe.utils.Random.float","luxe/utils/Random.hx",39,0x7d2aac44)
HX_LOCAL_STACK_FRAME(_hx_pos_ce2a59b721fed29d_46_int,"luxe.utils.Random","int",0x045a8bf9,"luxe.utils.Random.int","luxe/utils/Random.hx",46,0x7d2aac44)
HX_LOCAL_STACK_FRAME(_hx_pos_ce2a59b721fed29d_54_bool,"luxe.utils.Random","bool",0xc6402de0,"luxe.utils.Random.bool","luxe/utils/Random.hx",54,0x7d2aac44)
HX_LOCAL_STACK_FRAME(_hx_pos_ce2a59b721fed29d_60_sign,"luxe.utils.Random","sign",0xd17839f3,"luxe.utils.Random.sign","luxe/utils/Random.hx",60,0x7d2aac44)
HX_LOCAL_STACK_FRAME(_hx_pos_ce2a59b721fed29d_66_bit,"luxe.utils.Random","bit",0x045537d7,"luxe.utils.Random.bit","luxe/utils/Random.hx",66,0x7d2aac44)
HX_LOCAL_STACK_FRAME(_hx_pos_ce2a59b721fed29d_70_reset,"luxe.utils.Random","reset",0xe1b81f59,"luxe.utils.Random.reset","luxe/utils/Random.hx",70,0x7d2aac44)
HX_LOCAL_STACK_FRAME(_hx_pos_ce2a59b721fed29d_80_set_initial,"luxe.utils.Random","set_initial",0x7a9610b1,"luxe.utils.Random.set_initial","luxe/utils/Random.hx",80,0x7d2aac44)
namespace luxe{
namespace utils{

void Random_obj::__construct(Float _initial_seed){
            	HX_STACKFRAME(&_hx_pos_ce2a59b721fed29d_17_new)
HXLINE(  20)		if (!((_initial_seed > (int)0))) {
HXLINE(  20)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion((HX_("_initial_seed > 0",59,32,8a,1b) + ((HX_(" ( ",18,6b,18,00) + HX_("initial negative seed will return negative random results, if this was intentional, define luxe_random_allow_negative_seed",cc,80,7b,8e)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE(  26)		this->initial = (this->seed = _initial_seed);
HXDLIN(  26)		this->seed = this->initial;
            	}

Dynamic Random_obj::__CreateEmpty() { return new Random_obj; }

void *Random_obj::_hx_vtable = 0;

Dynamic Random_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Random_obj > _hx_result = new Random_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Random_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x13fe925e;
}

Float Random_obj::get(){
            	HX_STACKFRAME(&_hx_pos_ce2a59b721fed29d_34_get)
HXDLIN(  34)		return (((Float)(this->seed = hx::Mod((this->seed * (int)16807),(int)2147483647)) / (Float)(int)2147483647) + ((Float)0.000000000233));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Random_obj,get,return )

Float Random_obj::_hx_float(Float min, ::Dynamic max){
            	HX_STACKFRAME(&_hx_pos_ce2a59b721fed29d_39_float)
HXLINE(  40)		if (hx::IsNull( max )) {
HXLINE(  40)			max = min;
HXDLIN(  40)			min = (int)0;
            		}
HXLINE(  41)		Float _hx_tmp = (((Float)(this->seed = hx::Mod((this->seed * (int)16807),(int)2147483647)) / (Float)(int)2147483647) + ((Float)0.000000000233));
HXDLIN(  41)		return ((_hx_tmp * (max - min)) + min);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Random_obj,_hx_float,return )

int Random_obj::_hx_int(Float min, ::Dynamic max){
            	HX_STACKFRAME(&_hx_pos_ce2a59b721fed29d_46_int)
HXLINE(  47)		if (hx::IsNull( max )) {
HXLINE(  47)			max = min;
HXDLIN(  47)			min = (int)0;
            		}
HXLINE(  48)		Float min1 = min;
HXDLIN(  48)		 ::Dynamic max1 = max;
HXDLIN(  48)		if (hx::IsNull( max1 )) {
HXLINE(  48)			max1 = min1;
HXDLIN(  48)			min1 = (int)0;
            		}
HXDLIN(  48)		Float _hx_tmp = (((Float)(this->seed = hx::Mod((this->seed * (int)16807),(int)2147483647)) / (Float)(int)2147483647) + ((Float)0.000000000233));
HXDLIN(  48)		return ::Math_obj::floor(((_hx_tmp * (max1 - min1)) + min1));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Random_obj,_hx_int,return )

bool Random_obj::_hx_bool(hx::Null< Float >  __o_chance){
Float chance = __o_chance.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_ce2a59b721fed29d_54_bool)
HXDLIN(  54)		return ((((Float)(this->seed = hx::Mod((this->seed * (int)16807),(int)2147483647)) / (Float)(int)2147483647) + ((Float)0.000000000233)) < chance);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Random_obj,_hx_bool,return )

int Random_obj::sign(hx::Null< Float >  __o_chance){
Float chance = __o_chance.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_ce2a59b721fed29d_60_sign)
HXDLIN(  60)		if (((((Float)(this->seed = hx::Mod((this->seed * (int)16807),(int)2147483647)) / (Float)(int)2147483647) + ((Float)0.000000000233)) < chance)) {
HXDLIN(  60)			return (int)1;
            		}
            		else {
HXDLIN(  60)			return (int)-1;
            		}
HXDLIN(  60)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Random_obj,sign,return )

int Random_obj::bit(hx::Null< Float >  __o_chance){
Float chance = __o_chance.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_ce2a59b721fed29d_66_bit)
HXDLIN(  66)		if (((((Float)(this->seed = hx::Mod((this->seed * (int)16807),(int)2147483647)) / (Float)(int)2147483647) + ((Float)0.000000000233)) < chance)) {
HXDLIN(  66)			return (int)1;
            		}
            		else {
HXDLIN(  66)			return (int)0;
            		}
HXDLIN(  66)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Random_obj,bit,return )

void Random_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_ce2a59b721fed29d_70_reset)
HXLINE(  71)		Float s = this->seed;
HXLINE(  72)		this->initial = (this->seed = s);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Random_obj,reset,(void))

Float Random_obj::set_initial(Float _initial){
            	HX_STACKFRAME(&_hx_pos_ce2a59b721fed29d_80_set_initial)
HXLINE(  81)		this->initial = (this->seed = _initial);
HXLINE(  82)		return this->initial;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Random_obj,set_initial,return )


hx::ObjectPtr< Random_obj > Random_obj::__new(Float _initial_seed) {
	hx::ObjectPtr< Random_obj > __this = new Random_obj();
	__this->__construct(_initial_seed);
	return __this;
}

hx::ObjectPtr< Random_obj > Random_obj::__alloc(hx::Ctx *_hx_ctx,Float _initial_seed) {
	Random_obj *__this = (Random_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Random_obj), false, "luxe.utils.Random"));
	*(void **)__this = Random_obj::_hx_vtable;
	__this->__construct(_initial_seed);
	return __this;
}

Random_obj::Random_obj()
{
}

hx::Val Random_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"int") ) { return hx::Val( _hx_int_dyn() ); }
		if (HX_FIELD_EQ(inName,"bit") ) { return hx::Val( bit_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"bool") ) { return hx::Val( _hx_bool_dyn() ); }
		if (HX_FIELD_EQ(inName,"sign") ) { return hx::Val( sign_dyn() ); }
		if (HX_FIELD_EQ(inName,"seed") ) { return hx::Val( seed ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"float") ) { return hx::Val( _hx_float_dyn() ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"initial") ) { return hx::Val( initial ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_initial") ) { return hx::Val( set_initial_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Random_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { seed=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"initial") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_initial(inValue.Cast< Float >()) );initial=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Random_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("seed","\x71","\x85","\x50","\x4c"));
	outFields->push(HX_HCSTRING("initial","\x84","\x10","\x9f","\xcb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Random_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Random_obj,seed),HX_HCSTRING("seed","\x71","\x85","\x50","\x4c")},
	{hx::fsFloat,(int)offsetof(Random_obj,initial),HX_HCSTRING("initial","\x84","\x10","\x9f","\xcb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Random_obj_sStaticStorageInfo = 0;
#endif

static ::String Random_obj_sMemberFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("float","\x9c","\xc5","\x96","\x02"),
	HX_HCSTRING("int","\xef","\x0c","\x50","\x00"),
	HX_HCSTRING("bool","\x2a","\x84","\x1b","\x41"),
	HX_HCSTRING("sign","\x3d","\x90","\x53","\x4c"),
	HX_HCSTRING("bit","\xcd","\xb8","\x4a","\x00"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("seed","\x71","\x85","\x50","\x4c"),
	HX_HCSTRING("initial","\x84","\x10","\x9f","\xcb"),
	HX_HCSTRING("set_initial","\xa7","\x77","\x06","\x5c"),
	::String(null()) };

static void Random_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Random_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Random_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Random_obj::__mClass,"__mClass");
};

#endif

hx::Class Random_obj::__mClass;

void Random_obj::__register()
{
	hx::Object *dummy = new Random_obj;
	Random_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.utils.Random","\x78","\x12","\x1c","\xd9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Random_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Random_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Random_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Random_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Random_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Random_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace utils
