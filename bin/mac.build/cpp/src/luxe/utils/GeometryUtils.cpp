// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_utils_GeometryUtils
#include <luxe/utils/GeometryUtils.h>
#endif
#ifndef INCLUDED_phoenix_Matrix
#include <phoenix/Matrix.h>
#endif
#ifndef INCLUDED_phoenix_Spatial
#include <phoenix/Spatial.h>
#endif
#ifndef INCLUDED_phoenix_Transform
#include <phoenix/Transform.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Vertex
#include <phoenix/geometry/Vertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_512337ae05fabc21_14_new,"luxe.utils.GeometryUtils","new",0xd5d0d83c,"luxe.utils.GeometryUtils.new","luxe/utils/GeometryUtils.hx",14,0x749c9d76)
HX_LOCAL_STACK_FRAME(_hx_pos_512337ae05fabc21_19_segments_for_smooth_circle,"luxe.utils.GeometryUtils","segments_for_smooth_circle",0xd8797010,"luxe.utils.GeometryUtils.segments_for_smooth_circle","luxe/utils/GeometryUtils.hx",19,0x749c9d76)
HX_LOCAL_STACK_FRAME(_hx_pos_512337ae05fabc21_23_random_point_in_unit_circle,"luxe.utils.GeometryUtils","random_point_in_unit_circle",0xf851d038,"luxe.utils.GeometryUtils.random_point_in_unit_circle","luxe/utils/GeometryUtils.hx",23,0x749c9d76)
HX_LOCAL_STACK_FRAME(_hx_pos_512337ae05fabc21_37_point_in_polygon,"luxe.utils.GeometryUtils","point_in_polygon",0xc66ebe53,"luxe.utils.GeometryUtils.point_in_polygon","luxe/utils/GeometryUtils.hx",37,0x749c9d76)
HX_LOCAL_STACK_FRAME(_hx_pos_512337ae05fabc21_64_point_in_geometry,"luxe.utils.GeometryUtils","point_in_geometry",0x80cfa4b9,"luxe.utils.GeometryUtils.point_in_geometry","luxe/utils/GeometryUtils.hx",64,0x749c9d76)
HX_LOCAL_STACK_FRAME(_hx_pos_512337ae05fabc21_106_intersect_ray_plane,"luxe.utils.GeometryUtils","intersect_ray_plane",0xfb92d043,"luxe.utils.GeometryUtils.intersect_ray_plane","luxe/utils/GeometryUtils.hx",106,0x749c9d76)
HX_LOCAL_STACK_FRAME(_hx_pos_512337ae05fabc21_10_boot,"luxe.utils.GeometryUtils","boot",0x39055cd6,"luxe.utils.GeometryUtils.boot","luxe/utils/GeometryUtils.hx",10,0x749c9d76)
namespace luxe{
namespace utils{

void GeometryUtils_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_512337ae05fabc21_14_new)
HXDLIN(  14)		this->_v_cache =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}

Dynamic GeometryUtils_obj::__CreateEmpty() { return new GeometryUtils_obj; }

void *GeometryUtils_obj::_hx_vtable = 0;

Dynamic GeometryUtils_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GeometryUtils_obj > _hx_result = new GeometryUtils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GeometryUtils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0f4f3324;
}

int GeometryUtils_obj::segments_for_smooth_circle(Float _radius,hx::Null< Float >  __o__smooth){
Float _smooth = __o__smooth.Default(5);
            	HX_STACKFRAME(&_hx_pos_512337ae05fabc21_19_segments_for_smooth_circle)
HXDLIN(  19)		return ::Std_obj::_hx_int((_smooth * ::Math_obj::sqrt(_radius)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(GeometryUtils_obj,segments_for_smooth_circle,return )

 ::phoenix::Vector GeometryUtils_obj::random_point_in_unit_circle(){
            	HX_GC_STACKFRAME(&_hx_pos_512337ae05fabc21_23_random_point_in_unit_circle)
HXLINE(  26)		Float _r = ::Math_obj::sqrt(::Math_obj::random());
HXLINE(  30)		Float _t = (((int)-1 + ((int)2 * ::Math_obj::random())) * ((Float)6.283185307179586));
HXLINE(  33)		Float _hx_tmp = (_r * ::Math_obj::cos(_t));
HXDLIN(  33)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp,(_r * ::Math_obj::sin(_t)),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeometryUtils_obj,random_point_in_unit_circle,return )

bool GeometryUtils_obj::point_in_polygon( ::phoenix::Vector _point, ::phoenix::Vector _offset,::Array< ::Dynamic> _verts){
            	HX_GC_STACKFRAME(&_hx_pos_512337ae05fabc21_37_point_in_polygon)
HXLINE(  39)		if (hx::IsNull( _offset )) {
HXLINE(  39)			_offset =  ::phoenix::Vector_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE(  41)		bool c = false;
HXLINE(  42)		int nvert = _verts->length;
HXLINE(  43)		int j = (nvert - (int)1);
HXLINE(  45)		{
HXLINE(  45)			int _g1 = (int)0;
HXDLIN(  45)			int _g = nvert;
HXDLIN(  45)			while((_g1 < _g)){
HXLINE(  45)				_g1 = (_g1 + (int)1);
HXDLIN(  45)				int i = (_g1 - (int)1);
HXLINE(  47)				bool _hx_tmp;
HXDLIN(  47)				bool _hx_tmp1 = ((_verts->__get(i).StaticCast<  ::phoenix::Vector >()->y + _offset->y) > _point->y);
HXDLIN(  47)				if ((_hx_tmp1 != ((_verts->__get(j).StaticCast<  ::phoenix::Vector >()->y + _offset->y) > _point->y))) {
HXLINE(  48)					Float _point1 = _point->x;
HXDLIN(  48)					Float _hx_tmp2 = (_verts->__get(j).StaticCast<  ::phoenix::Vector >()->x + _offset->x);
HXDLIN(  48)					Float _hx_tmp3 = (_hx_tmp2 - (_verts->__get(i).StaticCast<  ::phoenix::Vector >()->x + _offset->x));
HXDLIN(  48)					Float _point2 = _point->y;
HXDLIN(  48)					Float _hx_tmp4 = (_hx_tmp3 * (_point2 - (_verts->__get(i).StaticCast<  ::phoenix::Vector >()->y + _offset->y)));
HXLINE(  49)					Float _hx_tmp5 = (_verts->__get(j).StaticCast<  ::phoenix::Vector >()->y + _offset->y);
HXLINE(  48)					Float _hx_tmp6 = ((Float)_hx_tmp4 / (Float)(_hx_tmp5 - (_verts->__get(i).StaticCast<  ::phoenix::Vector >()->y + _offset->y)));
HXLINE(  47)					_hx_tmp = (_point1 < (_hx_tmp6 + (_verts->__get(i).StaticCast<  ::phoenix::Vector >()->x + _offset->x)));
            				}
            				else {
HXLINE(  47)					_hx_tmp = false;
            				}
HXDLIN(  47)				if (_hx_tmp) {
HXLINE(  50)					c = !(c);
            				}
HXLINE(  53)				j = i;
            			}
            		}
HXLINE(  56)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC3(GeometryUtils_obj,point_in_polygon,return )

bool GeometryUtils_obj::point_in_geometry( ::phoenix::Vector _point, ::phoenix::geometry::Geometry _geometry){
            	HX_STACKFRAME(&_hx_pos_512337ae05fabc21_64_point_in_geometry)
HXLINE(  66)		bool c = false;
HXLINE(  67)		int nvert = _geometry->vertices->length;
HXLINE(  68)		int j = (nvert - (int)1);
HXLINE(  70)		Float _px = _point->x;
HXLINE(  71)		Float _py = _point->y;
HXLINE(  73)		{
HXLINE(  73)			int _g1 = (int)0;
HXDLIN(  73)			int _g = nvert;
HXDLIN(  73)			while((_g1 < _g)){
HXLINE(  73)				_g1 = (_g1 + (int)1);
HXDLIN(  73)				int i = (_g1 - (int)1);
HXLINE(  75)				 ::phoenix::Vector _vert_i = _geometry->vertices->__get(i).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXLINE(  76)				 ::phoenix::Vector _vert_j = _geometry->vertices->__get(j).StaticCast<  ::phoenix::geometry::Vertex >()->pos;
HXLINE(  78)				{
HXLINE(  78)					 ::phoenix::Vector _this = this->_v_cache;
HXDLIN(  78)					Float _x = _vert_i->x;
HXDLIN(  78)					Float _y = _vert_i->y;
HXDLIN(  78)					bool prev = _this->ignore_listeners;
HXDLIN(  78)					_this->ignore_listeners = true;
HXDLIN(  78)					{
HXLINE(  78)						_this->x = _x;
HXDLIN(  78)						if (!(_this->_construct)) {
HXLINE(  78)							bool _hx_tmp;
HXDLIN(  78)							if (hx::IsNotNull( _this->listen_x )) {
HXLINE(  78)								_hx_tmp = !(_this->ignore_listeners);
            							}
            							else {
HXLINE(  78)								_hx_tmp = false;
            							}
HXDLIN(  78)							if (_hx_tmp) {
HXLINE(  78)								_this->listen_x(_x);
            							}
            						}
            					}
HXDLIN(  78)					{
HXLINE(  78)						_this->y = _y;
HXDLIN(  78)						if (!(_this->_construct)) {
HXLINE(  78)							bool _hx_tmp1;
HXDLIN(  78)							if (hx::IsNotNull( _this->listen_y )) {
HXLINE(  78)								_hx_tmp1 = !(_this->ignore_listeners);
            							}
            							else {
HXLINE(  78)								_hx_tmp1 = false;
            							}
HXDLIN(  78)							if (_hx_tmp1) {
HXLINE(  78)								_this->listen_y(_y);
            							}
            						}
            					}
HXDLIN(  78)					_this->ignore_listeners = prev;
HXDLIN(  78)					bool _hx_tmp2;
HXDLIN(  78)					if (hx::IsNotNull( _this->listen_x )) {
HXLINE(  78)						_hx_tmp2 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE(  78)						_hx_tmp2 = false;
            					}
HXDLIN(  78)					if (_hx_tmp2) {
HXLINE(  78)						_this->listen_x(_this->x);
            					}
HXDLIN(  78)					bool _hx_tmp3;
HXDLIN(  78)					if (hx::IsNotNull( _this->listen_y )) {
HXLINE(  78)						_hx_tmp3 = !(_this->ignore_listeners);
            					}
            					else {
HXLINE(  78)						_hx_tmp3 = false;
            					}
HXDLIN(  78)					if (_hx_tmp3) {
HXLINE(  78)						_this->listen_y(_this->y);
            					}
            				}
HXLINE(  79)				{
HXLINE(  79)					 ::phoenix::Vector _this1 = this->_v_cache;
HXDLIN(  79)					 ::phoenix::Transform _this2 = _geometry->transform;
HXDLIN(  79)					if (!(_this2->_destroying)) {
HXLINE(  79)						bool _hx_tmp4;
HXDLIN(  79)						if (hx::IsNotNull( _this2->parent )) {
HXLINE(  79)							_hx_tmp4 = _this2->parent->dirty;
            						}
            						else {
HXLINE(  79)							_hx_tmp4 = false;
            						}
HXDLIN(  79)						if (_hx_tmp4) {
HXLINE(  79)							_this2->parent->clean_check();
            						}
HXDLIN(  79)						bool _hx_tmp5;
HXDLIN(  79)						bool _hx_tmp6;
HXDLIN(  79)						if (_this2->dirty) {
HXLINE(  79)							_hx_tmp6 = !(_this2->_cleaning);
            						}
            						else {
HXLINE(  79)							_hx_tmp6 = false;
            						}
HXDLIN(  79)						if (_hx_tmp6) {
HXLINE(  79)							_hx_tmp5 = !(_this2->manual_update);
            						}
            						else {
HXLINE(  79)							_hx_tmp5 = false;
            						}
HXDLIN(  79)						if (_hx_tmp5) {
HXLINE(  79)							_this2->clean();
            						}
            					}
HXDLIN(  79)					Float _x1 = _this1->x;
HXDLIN(  79)					Float _y1 = _this1->y;
HXDLIN(  79)					Float _z = _this1->z;
HXDLIN(  79)					::Array< Float > e = _this2->world->matrix->elements;
HXDLIN(  79)					{
HXLINE(  79)						Float _x2 = ((((e->__get((int)0) * _x1) + (e->__get((int)4) * _y1)) + (e->__get((int)8) * _z)) + e->__get((int)12));
HXDLIN(  79)						Float _y2 = ((((e->__get((int)1) * _x1) + (e->__get((int)5) * _y1)) + (e->__get((int)9) * _z)) + e->__get((int)13));
HXDLIN(  79)						Float _z1 = ((((e->__get((int)2) * _x1) + (e->__get((int)6) * _y1)) + (e->__get((int)10) * _z)) + e->__get((int)14));
HXDLIN(  79)						bool prev1 = _this1->ignore_listeners;
HXDLIN(  79)						_this1->ignore_listeners = true;
HXDLIN(  79)						{
HXLINE(  79)							_this1->x = _x2;
HXDLIN(  79)							if (!(_this1->_construct)) {
HXLINE(  79)								bool _hx_tmp7;
HXDLIN(  79)								if (hx::IsNotNull( _this1->listen_x )) {
HXLINE(  79)									_hx_tmp7 = !(_this1->ignore_listeners);
            								}
            								else {
HXLINE(  79)									_hx_tmp7 = false;
            								}
HXDLIN(  79)								if (_hx_tmp7) {
HXLINE(  79)									_this1->listen_x(_x2);
            								}
            							}
            						}
HXDLIN(  79)						{
HXLINE(  79)							_this1->y = _y2;
HXDLIN(  79)							if (!(_this1->_construct)) {
HXLINE(  79)								bool _hx_tmp8;
HXDLIN(  79)								if (hx::IsNotNull( _this1->listen_y )) {
HXLINE(  79)									_hx_tmp8 = !(_this1->ignore_listeners);
            								}
            								else {
HXLINE(  79)									_hx_tmp8 = false;
            								}
HXDLIN(  79)								if (_hx_tmp8) {
HXLINE(  79)									_this1->listen_y(_y2);
            								}
            							}
            						}
HXDLIN(  79)						{
HXLINE(  79)							_this1->z = _z1;
HXDLIN(  79)							if (!(_this1->_construct)) {
HXLINE(  79)								bool _hx_tmp9;
HXDLIN(  79)								if (hx::IsNotNull( _this1->listen_z )) {
HXLINE(  79)									_hx_tmp9 = !(_this1->ignore_listeners);
            								}
            								else {
HXLINE(  79)									_hx_tmp9 = false;
            								}
HXDLIN(  79)								if (_hx_tmp9) {
HXLINE(  79)									_this1->listen_z(_z1);
            								}
            							}
            						}
HXDLIN(  79)						_this1->ignore_listeners = prev1;
HXDLIN(  79)						bool _hx_tmp10;
HXDLIN(  79)						if (hx::IsNotNull( _this1->listen_x )) {
HXLINE(  79)							_hx_tmp10 = !(_this1->ignore_listeners);
            						}
            						else {
HXLINE(  79)							_hx_tmp10 = false;
            						}
HXDLIN(  79)						if (_hx_tmp10) {
HXLINE(  79)							_this1->listen_x(_this1->x);
            						}
HXDLIN(  79)						bool _hx_tmp11;
HXDLIN(  79)						if (hx::IsNotNull( _this1->listen_y )) {
HXLINE(  79)							_hx_tmp11 = !(_this1->ignore_listeners);
            						}
            						else {
HXLINE(  79)							_hx_tmp11 = false;
            						}
HXDLIN(  79)						if (_hx_tmp11) {
HXLINE(  79)							_this1->listen_y(_this1->y);
            						}
HXDLIN(  79)						bool _hx_tmp12;
HXDLIN(  79)						if (hx::IsNotNull( _this1->listen_z )) {
HXLINE(  79)							_hx_tmp12 = !(_this1->ignore_listeners);
            						}
            						else {
HXLINE(  79)							_hx_tmp12 = false;
            						}
HXDLIN(  79)						if (_hx_tmp12) {
HXLINE(  79)							_this1->listen_z(_this1->z);
            						}
            					}
            				}
HXLINE(  81)				Float _vert_i_x = this->_v_cache->x;
HXLINE(  82)				Float _vert_i_y = this->_v_cache->y;
HXLINE(  84)				{
HXLINE(  84)					 ::phoenix::Vector _this3 = this->_v_cache;
HXDLIN(  84)					Float _x3 = _vert_j->x;
HXDLIN(  84)					Float _y3 = _vert_j->y;
HXDLIN(  84)					bool prev2 = _this3->ignore_listeners;
HXDLIN(  84)					_this3->ignore_listeners = true;
HXDLIN(  84)					{
HXLINE(  84)						_this3->x = _x3;
HXDLIN(  84)						if (!(_this3->_construct)) {
HXLINE(  84)							bool _hx_tmp13;
HXDLIN(  84)							if (hx::IsNotNull( _this3->listen_x )) {
HXLINE(  84)								_hx_tmp13 = !(_this3->ignore_listeners);
            							}
            							else {
HXLINE(  84)								_hx_tmp13 = false;
            							}
HXDLIN(  84)							if (_hx_tmp13) {
HXLINE(  84)								_this3->listen_x(_x3);
            							}
            						}
            					}
HXDLIN(  84)					{
HXLINE(  84)						_this3->y = _y3;
HXDLIN(  84)						if (!(_this3->_construct)) {
HXLINE(  84)							bool _hx_tmp14;
HXDLIN(  84)							if (hx::IsNotNull( _this3->listen_y )) {
HXLINE(  84)								_hx_tmp14 = !(_this3->ignore_listeners);
            							}
            							else {
HXLINE(  84)								_hx_tmp14 = false;
            							}
HXDLIN(  84)							if (_hx_tmp14) {
HXLINE(  84)								_this3->listen_y(_y3);
            							}
            						}
            					}
HXDLIN(  84)					_this3->ignore_listeners = prev2;
HXDLIN(  84)					bool _hx_tmp15;
HXDLIN(  84)					if (hx::IsNotNull( _this3->listen_x )) {
HXLINE(  84)						_hx_tmp15 = !(_this3->ignore_listeners);
            					}
            					else {
HXLINE(  84)						_hx_tmp15 = false;
            					}
HXDLIN(  84)					if (_hx_tmp15) {
HXLINE(  84)						_this3->listen_x(_this3->x);
            					}
HXDLIN(  84)					bool _hx_tmp16;
HXDLIN(  84)					if (hx::IsNotNull( _this3->listen_y )) {
HXLINE(  84)						_hx_tmp16 = !(_this3->ignore_listeners);
            					}
            					else {
HXLINE(  84)						_hx_tmp16 = false;
            					}
HXDLIN(  84)					if (_hx_tmp16) {
HXLINE(  84)						_this3->listen_y(_this3->y);
            					}
            				}
HXLINE(  85)				{
HXLINE(  85)					 ::phoenix::Vector _this4 = this->_v_cache;
HXDLIN(  85)					 ::phoenix::Transform _this5 = _geometry->transform;
HXDLIN(  85)					if (!(_this5->_destroying)) {
HXLINE(  85)						bool _hx_tmp17;
HXDLIN(  85)						if (hx::IsNotNull( _this5->parent )) {
HXLINE(  85)							_hx_tmp17 = _this5->parent->dirty;
            						}
            						else {
HXLINE(  85)							_hx_tmp17 = false;
            						}
HXDLIN(  85)						if (_hx_tmp17) {
HXLINE(  85)							_this5->parent->clean_check();
            						}
HXDLIN(  85)						bool _hx_tmp18;
HXDLIN(  85)						bool _hx_tmp19;
HXDLIN(  85)						if (_this5->dirty) {
HXLINE(  85)							_hx_tmp19 = !(_this5->_cleaning);
            						}
            						else {
HXLINE(  85)							_hx_tmp19 = false;
            						}
HXDLIN(  85)						if (_hx_tmp19) {
HXLINE(  85)							_hx_tmp18 = !(_this5->manual_update);
            						}
            						else {
HXLINE(  85)							_hx_tmp18 = false;
            						}
HXDLIN(  85)						if (_hx_tmp18) {
HXLINE(  85)							_this5->clean();
            						}
            					}
HXDLIN(  85)					Float _x4 = _this4->x;
HXDLIN(  85)					Float _y4 = _this4->y;
HXDLIN(  85)					Float _z2 = _this4->z;
HXDLIN(  85)					::Array< Float > e1 = _this5->world->matrix->elements;
HXDLIN(  85)					{
HXLINE(  85)						Float _x5 = ((((e1->__get((int)0) * _x4) + (e1->__get((int)4) * _y4)) + (e1->__get((int)8) * _z2)) + e1->__get((int)12));
HXDLIN(  85)						Float _y5 = ((((e1->__get((int)1) * _x4) + (e1->__get((int)5) * _y4)) + (e1->__get((int)9) * _z2)) + e1->__get((int)13));
HXDLIN(  85)						Float _z3 = ((((e1->__get((int)2) * _x4) + (e1->__get((int)6) * _y4)) + (e1->__get((int)10) * _z2)) + e1->__get((int)14));
HXDLIN(  85)						bool prev3 = _this4->ignore_listeners;
HXDLIN(  85)						_this4->ignore_listeners = true;
HXDLIN(  85)						{
HXLINE(  85)							_this4->x = _x5;
HXDLIN(  85)							if (!(_this4->_construct)) {
HXLINE(  85)								bool _hx_tmp20;
HXDLIN(  85)								if (hx::IsNotNull( _this4->listen_x )) {
HXLINE(  85)									_hx_tmp20 = !(_this4->ignore_listeners);
            								}
            								else {
HXLINE(  85)									_hx_tmp20 = false;
            								}
HXDLIN(  85)								if (_hx_tmp20) {
HXLINE(  85)									_this4->listen_x(_x5);
            								}
            							}
            						}
HXDLIN(  85)						{
HXLINE(  85)							_this4->y = _y5;
HXDLIN(  85)							if (!(_this4->_construct)) {
HXLINE(  85)								bool _hx_tmp21;
HXDLIN(  85)								if (hx::IsNotNull( _this4->listen_y )) {
HXLINE(  85)									_hx_tmp21 = !(_this4->ignore_listeners);
            								}
            								else {
HXLINE(  85)									_hx_tmp21 = false;
            								}
HXDLIN(  85)								if (_hx_tmp21) {
HXLINE(  85)									_this4->listen_y(_y5);
            								}
            							}
            						}
HXDLIN(  85)						{
HXLINE(  85)							_this4->z = _z3;
HXDLIN(  85)							if (!(_this4->_construct)) {
HXLINE(  85)								bool _hx_tmp22;
HXDLIN(  85)								if (hx::IsNotNull( _this4->listen_z )) {
HXLINE(  85)									_hx_tmp22 = !(_this4->ignore_listeners);
            								}
            								else {
HXLINE(  85)									_hx_tmp22 = false;
            								}
HXDLIN(  85)								if (_hx_tmp22) {
HXLINE(  85)									_this4->listen_z(_z3);
            								}
            							}
            						}
HXDLIN(  85)						_this4->ignore_listeners = prev3;
HXDLIN(  85)						bool _hx_tmp23;
HXDLIN(  85)						if (hx::IsNotNull( _this4->listen_x )) {
HXLINE(  85)							_hx_tmp23 = !(_this4->ignore_listeners);
            						}
            						else {
HXLINE(  85)							_hx_tmp23 = false;
            						}
HXDLIN(  85)						if (_hx_tmp23) {
HXLINE(  85)							_this4->listen_x(_this4->x);
            						}
HXDLIN(  85)						bool _hx_tmp24;
HXDLIN(  85)						if (hx::IsNotNull( _this4->listen_y )) {
HXLINE(  85)							_hx_tmp24 = !(_this4->ignore_listeners);
            						}
            						else {
HXLINE(  85)							_hx_tmp24 = false;
            						}
HXDLIN(  85)						if (_hx_tmp24) {
HXLINE(  85)							_this4->listen_y(_this4->y);
            						}
HXDLIN(  85)						bool _hx_tmp25;
HXDLIN(  85)						if (hx::IsNotNull( _this4->listen_z )) {
HXLINE(  85)							_hx_tmp25 = !(_this4->ignore_listeners);
            						}
            						else {
HXLINE(  85)							_hx_tmp25 = false;
            						}
HXDLIN(  85)						if (_hx_tmp25) {
HXLINE(  85)							_this4->listen_z(_this4->z);
            						}
            					}
            				}
HXLINE(  87)				Float _vert_j_x = this->_v_cache->x;
HXLINE(  88)				Float _vert_j_y = this->_v_cache->y;
HXLINE(  90)				bool _hx_tmp26;
HXDLIN(  90)				bool _hx_tmp27 = (_vert_i_y > _point->y);
HXDLIN(  90)				if ((_hx_tmp27 != (_vert_j_y > _point->y))) {
HXLINE(  91)					Float _point1 = _point->x;
HXDLIN(  91)					Float _hx_tmp28 = ((_vert_j_x - _vert_i_x) * (_point->y - _vert_i_y));
HXLINE(  90)					_hx_tmp26 = (_point1 < (((Float)_hx_tmp28 / (Float)(_vert_j_y - _vert_i_y)) + _vert_i_x));
            				}
            				else {
HXLINE(  90)					_hx_tmp26 = false;
            				}
HXDLIN(  90)				if (_hx_tmp26) {
HXLINE(  93)					c = !(c);
            				}
HXLINE(  96)				j = i;
            			}
            		}
HXLINE( 100)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GeometryUtils_obj,point_in_geometry,return )

 ::phoenix::Vector GeometryUtils_obj::intersect_ray_plane( ::phoenix::Vector _ray_start, ::phoenix::Vector _ray_dir, ::phoenix::Vector _plane_normal, ::phoenix::Vector _plane_point){
            	HX_GC_STACKFRAME(&_hx_pos_512337ae05fabc21_106_intersect_ray_plane)
HXLINE( 112)		Float other_z;
HXDLIN( 112)		Float other_y;
HXDLIN( 112)		Float other_x;
HXDLIN( 112)		Float other_w;
HXDLIN( 112)		 ::Dynamic other_listen_z;
HXDLIN( 112)		 ::Dynamic other_listen_y;
HXDLIN( 112)		 ::Dynamic other_listen_x;
HXDLIN( 112)		bool other_ignore_listeners;
HXDLIN( 112)		bool other__construct;
HXDLIN( 112)		Float _x = (_plane_point->x - _ray_start->x);
HXDLIN( 112)		Float _y = (_plane_point->y - _ray_start->y);
HXDLIN( 112)		Float _z = (_plane_point->z - _ray_start->z);
HXDLIN( 112)		other_x = ((Float)0);
HXDLIN( 112)		other_y = ((Float)0);
HXDLIN( 112)		other_z = ((Float)0);
HXDLIN( 112)		other_w = ((Float)0);
HXDLIN( 112)		other_ignore_listeners = false;
HXDLIN( 112)		other__construct = false;
HXDLIN( 112)		other__construct = true;
HXDLIN( 112)		other_x = _x;
HXDLIN( 112)		if (!(other__construct)) {
HXLINE( 112)			bool _hx_tmp;
HXDLIN( 112)			if (hx::IsNotNull( other_listen_x )) {
HXLINE( 112)				_hx_tmp = !(other_ignore_listeners);
            			}
            			else {
HXLINE( 112)				_hx_tmp = false;
            			}
HXDLIN( 112)			if (_hx_tmp) {
HXLINE( 112)				other_listen_x(_x);
            			}
            		}
HXDLIN( 112)		other_y = _y;
HXDLIN( 112)		if (!(other__construct)) {
HXLINE( 112)			bool _hx_tmp1;
HXDLIN( 112)			if (hx::IsNotNull( other_listen_y )) {
HXLINE( 112)				_hx_tmp1 = !(other_ignore_listeners);
            			}
            			else {
HXLINE( 112)				_hx_tmp1 = false;
            			}
HXDLIN( 112)			if (_hx_tmp1) {
HXLINE( 112)				other_listen_y(_y);
            			}
            		}
HXDLIN( 112)		other_z = _z;
HXDLIN( 112)		if (!(other__construct)) {
HXLINE( 112)			bool _hx_tmp2;
HXDLIN( 112)			if (hx::IsNotNull( other_listen_z )) {
HXLINE( 112)				_hx_tmp2 = !(other_ignore_listeners);
            			}
            			else {
HXLINE( 112)				_hx_tmp2 = false;
            			}
HXDLIN( 112)			if (_hx_tmp2) {
HXLINE( 112)				other_listen_z(_z);
            			}
            		}
HXDLIN( 112)		other_w = (int)0;
HXDLIN( 112)		other__construct = false;
HXDLIN( 112)		Float part1 = (_plane_normal->x * other_x);
HXDLIN( 112)		Float part11 = (part1 + (_plane_normal->y * other_y));
HXDLIN( 112)		Float part12 = (part11 + (_plane_normal->z * other_z));
HXLINE( 113)		Float part2 = (_plane_normal->x * _ray_dir->x);
HXDLIN( 113)		Float part21 = (part2 + (_plane_normal->y * _ray_dir->y));
HXDLIN( 113)		Float part22 = (part21 + (_plane_normal->z * _ray_dir->z));
HXLINE( 115)		Float T = ((Float)part12 / (Float)part22);
HXLINE( 117)		Float b_z;
HXDLIN( 117)		Float b_y;
HXDLIN( 117)		Float b_x;
HXDLIN( 117)		Float b_w;
HXDLIN( 117)		 ::Dynamic b_listen_z;
HXDLIN( 117)		 ::Dynamic b_listen_y;
HXDLIN( 117)		 ::Dynamic b_listen_x;
HXDLIN( 117)		bool b_ignore_listeners;
HXDLIN( 117)		bool b__construct;
HXDLIN( 117)		Float _x1 = (_ray_dir->x * T);
HXDLIN( 117)		Float _y1 = (_ray_dir->y * T);
HXDLIN( 117)		Float _z1 = (_ray_dir->z * T);
HXDLIN( 117)		b_x = ((Float)0);
HXDLIN( 117)		b_y = ((Float)0);
HXDLIN( 117)		b_z = ((Float)0);
HXDLIN( 117)		b_w = ((Float)0);
HXDLIN( 117)		b_ignore_listeners = false;
HXDLIN( 117)		b__construct = false;
HXDLIN( 117)		b__construct = true;
HXDLIN( 117)		b_x = _x1;
HXDLIN( 117)		if (!(b__construct)) {
HXLINE( 117)			bool _hx_tmp3;
HXDLIN( 117)			if (hx::IsNotNull( b_listen_x )) {
HXLINE( 117)				_hx_tmp3 = !(b_ignore_listeners);
            			}
            			else {
HXLINE( 117)				_hx_tmp3 = false;
            			}
HXDLIN( 117)			if (_hx_tmp3) {
HXLINE( 117)				b_listen_x(_x1);
            			}
            		}
HXDLIN( 117)		b_y = _y1;
HXDLIN( 117)		if (!(b__construct)) {
HXLINE( 117)			bool _hx_tmp4;
HXDLIN( 117)			if (hx::IsNotNull( b_listen_y )) {
HXLINE( 117)				_hx_tmp4 = !(b_ignore_listeners);
            			}
            			else {
HXLINE( 117)				_hx_tmp4 = false;
            			}
HXDLIN( 117)			if (_hx_tmp4) {
HXLINE( 117)				b_listen_y(_y1);
            			}
            		}
HXDLIN( 117)		b_z = _z1;
HXDLIN( 117)		if (!(b__construct)) {
HXLINE( 117)			bool _hx_tmp5;
HXDLIN( 117)			if (hx::IsNotNull( b_listen_z )) {
HXLINE( 117)				_hx_tmp5 = !(b_ignore_listeners);
            			}
            			else {
HXLINE( 117)				_hx_tmp5 = false;
            			}
HXDLIN( 117)			if (_hx_tmp5) {
HXLINE( 117)				b_listen_z(_z1);
            			}
            		}
HXDLIN( 117)		b_w = (int)0;
HXDLIN( 117)		b__construct = false;
HXDLIN( 117)		Float _hx_tmp6 = (_ray_start->x + b_x);
HXDLIN( 117)		Float _hx_tmp7 = (_ray_start->y + b_y);
HXDLIN( 117)		return  ::phoenix::Vector_obj::__alloc( HX_CTX ,_hx_tmp6,_hx_tmp7,(_ray_start->z + b_z),null());
            	}


HX_DEFINE_DYNAMIC_FUNC4(GeometryUtils_obj,intersect_ray_plane,return )

Float GeometryUtils_obj::two_pi;


hx::ObjectPtr< GeometryUtils_obj > GeometryUtils_obj::__new() {
	hx::ObjectPtr< GeometryUtils_obj > __this = new GeometryUtils_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< GeometryUtils_obj > GeometryUtils_obj::__alloc(hx::Ctx *_hx_ctx) {
	GeometryUtils_obj *__this = (GeometryUtils_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GeometryUtils_obj), true, "luxe.utils.GeometryUtils"));
	*(void **)__this = GeometryUtils_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GeometryUtils_obj::GeometryUtils_obj()
{
}

void GeometryUtils_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GeometryUtils);
	HX_MARK_MEMBER_NAME(_v_cache,"_v_cache");
	HX_MARK_END_CLASS();
}

void GeometryUtils_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_v_cache,"_v_cache");
}

hx::Val GeometryUtils_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_v_cache") ) { return hx::Val( _v_cache ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"point_in_polygon") ) { return hx::Val( point_in_polygon_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"point_in_geometry") ) { return hx::Val( point_in_geometry_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"intersect_ray_plane") ) { return hx::Val( intersect_ray_plane_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"segments_for_smooth_circle") ) { return hx::Val( segments_for_smooth_circle_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"random_point_in_unit_circle") ) { return hx::Val( random_point_in_unit_circle_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GeometryUtils_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_v_cache") ) { _v_cache=inValue.Cast<  ::phoenix::Vector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GeometryUtils_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_v_cache","\xfa","\xf7","\x98","\xa1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GeometryUtils_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(GeometryUtils_obj,_v_cache),HX_HCSTRING("_v_cache","\xfa","\xf7","\x98","\xa1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo GeometryUtils_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &GeometryUtils_obj::two_pi,HX_HCSTRING("two_pi","\x0c","\x0a","\xbc","\x2f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String GeometryUtils_obj_sMemberFields[] = {
	HX_HCSTRING("segments_for_smooth_circle","\x6c","\xfc","\xe4","\xef"),
	HX_HCSTRING("random_point_in_unit_circle","\x5c","\x14","\x01","\x5f"),
	HX_HCSTRING("point_in_polygon","\xaf","\x7f","\xd0","\xfb"),
	HX_HCSTRING("_v_cache","\xfa","\xf7","\x98","\xa1"),
	HX_HCSTRING("point_in_geometry","\xdd","\x13","\xf7","\x00"),
	HX_HCSTRING("intersect_ray_plane","\x67","\x50","\xcf","\x67"),
	::String(null()) };

static void GeometryUtils_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GeometryUtils_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GeometryUtils_obj::two_pi,"two_pi");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GeometryUtils_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GeometryUtils_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GeometryUtils_obj::two_pi,"two_pi");
};

#endif

hx::Class GeometryUtils_obj::__mClass;

static ::String GeometryUtils_obj_sStaticFields[] = {
	HX_HCSTRING("two_pi","\x0c","\x0a","\xbc","\x2f"),
	::String(null())
};

void GeometryUtils_obj::__register()
{
	hx::Object *dummy = new GeometryUtils_obj;
	GeometryUtils_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.utils.GeometryUtils","\x4a","\x4a","\x01","\xe0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GeometryUtils_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GeometryUtils_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GeometryUtils_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GeometryUtils_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GeometryUtils_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GeometryUtils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GeometryUtils_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GeometryUtils_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_512337ae05fabc21_10_boot)
HXDLIN(  10)		two_pi = ((Float)6.283185307179586);
            	}
}

} // end namespace luxe
} // end namespace utils
