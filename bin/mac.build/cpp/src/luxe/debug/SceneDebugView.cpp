// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_luxe_Component
#include <luxe/Component.h>
#endif
#ifndef INCLUDED_luxe_Debug
#include <luxe/Debug.h>
#endif
#ifndef INCLUDED_luxe_DebugError
#include <luxe/DebugError.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Entity
#include <luxe/Entity.h>
#endif
#ifndef INCLUDED_luxe_ID
#include <luxe/ID.h>
#endif
#ifndef INCLUDED_luxe_KeyEvent
#include <luxe/KeyEvent.h>
#endif
#ifndef INCLUDED_luxe_MouseEvent
#include <luxe/MouseEvent.h>
#endif
#ifndef INCLUDED_luxe_Objects
#include <luxe/Objects.h>
#endif
#ifndef INCLUDED_luxe_Scene
#include <luxe/Scene.h>
#endif
#ifndef INCLUDED_luxe_Text
#include <luxe/Text.h>
#endif
#ifndef INCLUDED_luxe_Visual
#include <luxe/Visual.h>
#endif
#ifndef INCLUDED_luxe_components_Components
#include <luxe/components/Components.h>
#endif
#ifndef INCLUDED_luxe_debug_DebugView
#include <luxe/debug/DebugView.h>
#endif
#ifndef INCLUDED_luxe_debug_Inspector
#include <luxe/debug/Inspector.h>
#endif
#ifndef INCLUDED_luxe_debug_SceneDebugView
#include <luxe/debug/SceneDebugView.h>
#endif
#ifndef INCLUDED_luxe_resource_Resource
#include <luxe/resource/Resource.h>
#endif
#ifndef INCLUDED_luxe_structural_OrderedMap_String_luxe_Component
#include <luxe/structural/OrderedMap_String_luxe_Component.h>
#endif
#ifndef INCLUDED_phoenix_Batcher
#include <phoenix/Batcher.h>
#endif
#ifndef INCLUDED_phoenix_BitmapFont
#include <phoenix/BitmapFont.h>
#endif
#ifndef INCLUDED_phoenix_Color
#include <phoenix/Color.h>
#endif
#ifndef INCLUDED_phoenix_Rectangle
#include <phoenix/Rectangle.h>
#endif
#ifndef INCLUDED_phoenix_Renderer
#include <phoenix/Renderer.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_snow_types_WindowEvent
#include <snow/types/WindowEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_10_new,"luxe.debug.SceneDebugView","new",0xe3b09b71,"luxe.debug.SceneDebugView.new","luxe/debug/SceneDebugView.hx",10,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_25_create,"luxe.debug.SceneDebugView","create",0x53c01c8b,"luxe.debug.SceneDebugView.create","luxe/debug/SceneDebugView.hx",25,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_50_add_scene,"luxe.debug.SceneDebugView","add_scene",0x10bccf3f,"luxe.debug.SceneDebugView.add_scene","luxe/debug/SceneDebugView.hx",50,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_58_remove_scene,"luxe.debug.SceneDebugView","remove_scene",0x527612a0,"luxe.debug.SceneDebugView.remove_scene","luxe/debug/SceneDebugView.hx",58,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_73_onkeydown,"luxe.debug.SceneDebugView","onkeydown",0xd43bbc13,"luxe.debug.SceneDebugView.onkeydown","luxe/debug/SceneDebugView.hx",73,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_80_toggle_ids,"luxe.debug.SceneDebugView","toggle_ids",0x38f48bdc,"luxe.debug.SceneDebugView.toggle_ids","luxe/debug/SceneDebugView.hx",80,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_86_tabs,"luxe.debug.SceneDebugView","tabs",0x5acb944d,"luxe.debug.SceneDebugView.tabs","luxe/debug/SceneDebugView.hx",86,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_92_list_entity,"luxe.debug.SceneDebugView","list_entity",0x6ce93435,"luxe.debug.SceneDebugView.list_entity","luxe/debug/SceneDebugView.hx",92,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_116_get_list,"luxe.debug.SceneDebugView","get_list",0x74e24f36,"luxe.debug.SceneDebugView.get_list","luxe/debug/SceneDebugView.hx",116,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_137_refresh,"luxe.debug.SceneDebugView","refresh",0xd00f016c,"luxe.debug.SceneDebugView.refresh","luxe/debug/SceneDebugView.hx",137,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_141_process,"luxe.debug.SceneDebugView","process",0xd438ca00,"luxe.debug.SceneDebugView.process","luxe/debug/SceneDebugView.hx",141,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_164_onmousewheel,"luxe.debug.SceneDebugView","onmousewheel",0xd9102104,"luxe.debug.SceneDebugView.onmousewheel","luxe/debug/SceneDebugView.hx",164,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_184_show,"luxe.debug.SceneDebugView","show",0x5a27b8cc,"luxe.debug.SceneDebugView.show","luxe/debug/SceneDebugView.hx",184,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_192_hide,"luxe.debug.SceneDebugView","hide",0x52e31891,"luxe.debug.SceneDebugView.hide","luxe/debug/SceneDebugView.hx",192,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_201_resize,"luxe.debug.SceneDebugView","resize",0xe02c0f83,"luxe.debug.SceneDebugView.resize","luxe/debug/SceneDebugView.hx",201,0xbfa62c1d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6e82300f0c9bf2_221_onwindowsized,"luxe.debug.SceneDebugView","onwindowsized",0x75635e25,"luxe.debug.SceneDebugView.onwindowsized","luxe/debug/SceneDebugView.hx",221,0xbfa62c1d)
namespace luxe{
namespace debug{

void SceneDebugView_obj::__construct( ::luxe::Debug _debug){
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_10_new)
HXLINE(  79)		this->hide_ids = true;
HXLINE(  24)		this->font_size = ((Float)15.0);
HXLINE(  23)		this->margin = (int)32;
HXLINE(  16)		super::__construct(_debug);
HXLINE(  18)		this->set_name(HX_("Scenes",c7,bd,60,73));
HXLINE(  19)		this->scenes = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic SceneDebugView_obj::__CreateEmpty() { return new SceneDebugView_obj; }

void *SceneDebugView_obj::_hx_vtable = 0;

Dynamic SceneDebugView_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SceneDebugView_obj > _hx_result = new SceneDebugView_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SceneDebugView_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0bbca018) {
		if (inClassId<=(int)0x099ca90a) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x099ca90a;
		} else {
			return inClassId==(int)0x0bbca018;
		}
	} else {
		return inClassId==(int)0x5fb4b7fb || inClassId==(int)0x6d8c6d05;
	}
}

void SceneDebugView_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_25_create)
HXLINE(  27)		 ::luxe::Debug debug = ::Luxe_obj::debug;
HXLINE(  33)		 ::phoenix::Color _hx_tmp =  ::phoenix::Color_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)1)->rgb((int)16121979);
HXLINE(  34)		 ::phoenix::Vector _hx_tmp1 =  ::phoenix::Vector_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null());
HXLINE(  35)		 ::phoenix::BitmapFont _hx_tmp2 = ::Luxe_obj::renderer->font;
HXLINE(  36)		::String _result = HX_("",00,00,00,00);
HXDLIN(  36)		{
HXLINE(  36)			int _g = (int)0;
HXDLIN(  36)			::Array< ::Dynamic> _g1 = this->scenes;
HXDLIN(  36)			while((_g < _g1->length)){
HXLINE(  36)				 ::luxe::Scene _scene = _g1->__get(_g).StaticCast<  ::luxe::Scene >();
HXDLIN(  36)				_g = (_g + (int)1);
HXDLIN(  36)				::String _id;
HXDLIN(  36)				if (this->hide_ids) {
HXLINE(  36)					_id = HX_("",00,00,00,00);
            				}
            				else {
HXLINE(  36)					_id = ((HX_("",00,00,00,00) + _scene->get_id()) + HX_(" ",20,00,00,00));
            				}
HXDLIN(  36)				_result = (_result + _id);
HXDLIN(  36)				_result = (_result + ((HX_("",00,00,00,00) + _scene->get_name()) + HX_(" ",20,00,00,00)));
HXDLIN(  36)				_result = (_result + ((HX_("( ",f8,22,00,00) + _scene->get_length()) + HX_(" )\n",e1,6b,18,00)));
HXDLIN(  36)				{
HXLINE(  36)					 ::Dynamic _entity = ::haxe::IMap_obj::iterator(_scene->entities);
HXDLIN(  36)					while(( (bool)(_entity->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  36)						 ::luxe::Entity _entity1 = ( ( ::luxe::Entity)(_entity->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  36)						::String _list = _result;
HXDLIN(  36)						int _depth = (int)1;
HXDLIN(  36)						::String _active;
HXDLIN(  36)						if (_entity1->get_active()) {
HXLINE(  36)							_active = HX_("",00,00,00,00);
            						}
            						else {
HXLINE(  36)							_active = HX_("/ inactive",7c,39,09,16);
            						}
HXDLIN(  36)						::String _pre;
HXDLIN(  36)						if ((_depth == (int)1)) {
HXLINE(  36)							::String res = HX_("",00,00,00,00);
HXDLIN(  36)							{
HXLINE(  36)								int _g11 = (int)0;
HXDLIN(  36)								int _g2 = _depth;
HXDLIN(  36)								while((_g11 < _g2)){
HXLINE(  36)									_g11 = (_g11 + (int)1);
HXDLIN(  36)									int i = (_g11 - (int)1);
HXDLIN(  36)									res = (res + HX_("    ",00,38,3f,15));
            								}
            							}
HXDLIN(  36)							_pre = res;
            						}
            						else {
HXLINE(  36)							::String res1 = HX_("",00,00,00,00);
HXDLIN(  36)							{
HXLINE(  36)								int _g12 = (int)0;
HXDLIN(  36)								int _g3 = _depth;
HXDLIN(  36)								while((_g12 < _g3)){
HXLINE(  36)									_g12 = (_g12 + (int)1);
HXDLIN(  36)									int i1 = (_g12 - (int)1);
HXDLIN(  36)									res1 = (res1 + HX_("    ",00,38,3f,15));
            								}
            							}
HXDLIN(  36)							_pre = (res1 + HX_("> ",22,36,00,00));
            						}
HXDLIN(  36)						::String _id1;
HXDLIN(  36)						if (this->hide_ids) {
HXLINE(  36)							_id1 = HX_("",00,00,00,00);
            						}
            						else {
HXLINE(  36)							_id1 = _entity1->get_id();
            						}
HXDLIN(  36)						int _comp_count = ::Lambda_obj::count(_entity1->_components->components,null());
HXDLIN(  36)						::String _comp = (HX_("\xe2""\x80""\xa2"" ",1c,e6,c3,95) + _comp_count);
HXDLIN(  36)						::String _childs = (HX_("> ",22,36,00,00) + _entity1->children->length);
HXDLIN(  36)						_list = (_list + (((((((((((HX_("",00,00,00,00) + _pre) + _id1) + HX_(" ",20,00,00,00)) + _entity1->get_name()) + HX_(" ",20,00,00,00)) + _childs) + HX_(" ",20,00,00,00)) + _comp) + HX_(" ",20,00,00,00)) + _active) + HX_("\n",0a,00,00,00)));
HXDLIN(  36)						{
HXLINE(  36)							 ::Dynamic _name = _entity1->_components->components->_keys->iterator();
HXDLIN(  36)							while(( (bool)(_name->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  36)								::String _name1 = ( (::String)(_name->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  36)								 ::luxe::Component comp = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_entity1->_components->components->map,_name1)) );
HXDLIN(  36)								::String _comp_id;
HXDLIN(  36)								if (this->hide_ids) {
HXLINE(  36)									_comp_id = HX_("",00,00,00,00);
            								}
            								else {
HXLINE(  36)									_comp_id = (HX_(" ",20,00,00,00) + comp->id);
            								}
HXDLIN(  36)								::String res2 = HX_("",00,00,00,00);
HXDLIN(  36)								{
HXLINE(  36)									int _g13 = (int)0;
HXDLIN(  36)									int _g4 = (_depth + (int)1);
HXDLIN(  36)									while((_g13 < _g4)){
HXLINE(  36)										_g13 = (_g13 + (int)1);
HXDLIN(  36)										int i2 = (_g13 - (int)1);
HXDLIN(  36)										res2 = (res2 + HX_("    ",00,38,3f,15));
            									}
            								}
HXDLIN(  36)								::String _list1 = res2;
HXDLIN(  36)								_list = (_list + (_list1 + ((((HX_("\xe2""\x80""\xa2""",84,ed,ab,00) + _comp_id) + HX_(" ",20,00,00,00)) + comp->name) + HX_("\n",0a,00,00,00))));
            							}
            						}
HXDLIN(  36)						{
HXLINE(  36)							int _g5 = (int)0;
HXDLIN(  36)							::Array< ::Dynamic> _g14 = _entity1->children;
HXDLIN(  36)							while((_g5 < _g14->length)){
HXLINE(  36)								 ::luxe::Entity _child = _g14->__get(_g5).StaticCast<  ::luxe::Entity >();
HXDLIN(  36)								_g5 = (_g5 + (int)1);
HXDLIN(  36)								_list = this->list_entity(_list,_child,(_depth + (int)2));
            							}
            						}
HXDLIN(  36)						_result = _list;
            					}
            				}
            			}
            		}
HXLINE(  29)		this->items_list =  ::luxe::Text_obj::__alloc( HX_CTX , ::Dynamic(hx::Anon_obj::Create(10)
            			->setFixed(0,HX_("visible",72,78,24,a3),false)
            			->setFixed(1,HX_("batcher",a7,22,10,c0),debug->batcher)
            			->setFixed(2,HX_("depth",03,f1,29,d7),((Float)999.3))
            			->setFixed(3,HX_("pos",94,5d,55,00),_hx_tmp1)
            			->setFixed(4,HX_("no_scene",8e,a7,34,10),true)
            			->setFixed(5,HX_("font",cf,5d,c0,43),_hx_tmp2)
            			->setFixed(6,HX_("name",4b,72,ff,48),HX_("debug.scene.list",fb,7c,82,23))
            			->setFixed(7,HX_("color",63,71,5c,4a),_hx_tmp)
            			->setFixed(8,HX_("point_size",50,66,f5,4b),this->font_size)
            			->setFixed(9,HX_("text",ad,cc,f9,4c),_result)));
HXLINE(  42)		this->items_list->geometry->id = HX_("debug.scene.list.geometry",85,6c,5b,b1);
HXLINE(  44)		this->resize();
            	}


void SceneDebugView_obj::add_scene( ::luxe::Scene _scene){
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_50_add_scene)
HXLINE(  52)		if ((this->scenes->indexOf(_scene,null()) != (int)-1)) {
HXLINE(  52)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion(HX_("scenes.indexOf(_scene) == -1",5a,3b,7b,64)));
            		}
HXLINE(  54)		this->scenes->push(_scene);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SceneDebugView_obj,add_scene,(void))

bool SceneDebugView_obj::remove_scene( ::luxe::Scene _scene){
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_58_remove_scene)
HXLINE(  61)		if ((this->scenes->indexOf(_scene,null()) == (int)-1)) {
HXLINE(  61)			HX_STACK_DO_THROW(::luxe::DebugError_obj::assertion(HX_("scenes.indexOf(_scene) != -1",3e,fd,42,45)));
            		}
HXLINE(  63)		bool _result = this->scenes->remove(_scene);
HXLINE(  65)		this->refresh();
HXLINE(  67)		return _result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SceneDebugView_obj,remove_scene,return )

void SceneDebugView_obj::onkeydown( ::luxe::KeyEvent e){
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_73_onkeydown)
HXDLIN(  73)		bool _hx_tmp;
HXDLIN(  73)		if ((e->keycode == (int)50)) {
HXDLIN(  73)			_hx_tmp = this->visible;
            		}
            		else {
HXDLIN(  73)			_hx_tmp = false;
            		}
HXDLIN(  73)		if (_hx_tmp) {
HXLINE(  74)			this->toggle_ids();
            		}
            	}


void SceneDebugView_obj::toggle_ids(){
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_80_toggle_ids)
HXLINE(  81)		this->hide_ids = !(this->hide_ids);
HXLINE(  82)		this->refresh();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SceneDebugView_obj,toggle_ids,(void))

::String SceneDebugView_obj::tabs(int _d){
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_86_tabs)
HXLINE(  87)		::String res = HX_("",00,00,00,00);
HXLINE(  88)		{
HXLINE(  88)			int _g1 = (int)0;
HXDLIN(  88)			int _g = _d;
HXDLIN(  88)			while((_g1 < _g)){
HXLINE(  88)				_g1 = (_g1 + (int)1);
HXDLIN(  88)				int i = (_g1 - (int)1);
HXDLIN(  88)				res = (res + HX_("    ",00,38,3f,15));
            			}
            		}
HXLINE(  89)		return res;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SceneDebugView_obj,tabs,return )

::String SceneDebugView_obj::list_entity(::String _list, ::luxe::Entity e,hx::Null< int >  __o__depth){
int _depth = __o__depth.Default(1);
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_92_list_entity)
HXLINE(  94)		::String _active;
HXDLIN(  94)		if (e->get_active()) {
HXLINE(  94)			_active = HX_("",00,00,00,00);
            		}
            		else {
HXLINE(  94)			_active = HX_("/ inactive",7c,39,09,16);
            		}
HXLINE(  95)		::String _pre;
HXDLIN(  95)		if ((_depth == (int)1)) {
HXLINE(  95)			::String res = HX_("",00,00,00,00);
HXDLIN(  95)			{
HXLINE(  95)				int _g1 = (int)0;
HXDLIN(  95)				int _g = _depth;
HXDLIN(  95)				while((_g1 < _g)){
HXLINE(  95)					_g1 = (_g1 + (int)1);
HXDLIN(  95)					int i = (_g1 - (int)1);
HXDLIN(  95)					res = (res + HX_("    ",00,38,3f,15));
            				}
            			}
HXDLIN(  95)			_pre = res;
            		}
            		else {
HXLINE(  95)			::String res1 = HX_("",00,00,00,00);
HXDLIN(  95)			{
HXLINE(  95)				int _g11 = (int)0;
HXDLIN(  95)				int _g2 = _depth;
HXDLIN(  95)				while((_g11 < _g2)){
HXLINE(  95)					_g11 = (_g11 + (int)1);
HXDLIN(  95)					int i1 = (_g11 - (int)1);
HXDLIN(  95)					res1 = (res1 + HX_("    ",00,38,3f,15));
            				}
            			}
HXDLIN(  95)			_pre = (res1 + HX_("> ",22,36,00,00));
            		}
HXLINE(  96)		::String _id;
HXDLIN(  96)		if (this->hide_ids) {
HXLINE(  96)			_id = HX_("",00,00,00,00);
            		}
            		else {
HXLINE(  96)			_id = e->get_id();
            		}
HXLINE(  97)		int _comp_count = ::Lambda_obj::count(e->_components->components,null());
HXLINE(  98)		::String _comp = (HX_("\xe2""\x80""\xa2"" ",1c,e6,c3,95) + _comp_count);
HXLINE(  99)		::String _childs = (HX_("> ",22,36,00,00) + e->children->length);
HXLINE( 101)		_list = (_list + (((((((((((HX_("",00,00,00,00) + _pre) + _id) + HX_(" ",20,00,00,00)) + e->get_name()) + HX_(" ",20,00,00,00)) + _childs) + HX_(" ",20,00,00,00)) + _comp) + HX_(" ",20,00,00,00)) + _active) + HX_("\n",0a,00,00,00)));
HXLINE( 103)		{
HXLINE( 103)			 ::Dynamic _name = e->_components->components->_keys->iterator();
HXDLIN( 103)			while(( (bool)(_name->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 103)				::String _name1 = ( (::String)(_name->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 104)				 ::luxe::Component comp = ( ( ::luxe::Component)(::haxe::IMap_obj::get(e->_components->components->map,_name1)) );
HXLINE( 105)				::String _comp_id;
HXDLIN( 105)				if (this->hide_ids) {
HXLINE( 105)					_comp_id = HX_("",00,00,00,00);
            				}
            				else {
HXLINE( 105)					_comp_id = (HX_(" ",20,00,00,00) + comp->id);
            				}
HXLINE( 106)				::String res2 = HX_("",00,00,00,00);
HXDLIN( 106)				{
HXLINE( 106)					int _g12 = (int)0;
HXDLIN( 106)					int _g3 = (_depth + (int)1);
HXDLIN( 106)					while((_g12 < _g3)){
HXLINE( 106)						_g12 = (_g12 + (int)1);
HXDLIN( 106)						int i2 = (_g12 - (int)1);
HXDLIN( 106)						res2 = (res2 + HX_("    ",00,38,3f,15));
            					}
            				}
HXDLIN( 106)				::String _list1 = res2;
HXDLIN( 106)				_list = (_list + (_list1 + ((((HX_("\xe2""\x80""\xa2""",84,ed,ab,00) + _comp_id) + HX_(" ",20,00,00,00)) + comp->name) + HX_("\n",0a,00,00,00))));
            			}
            		}
HXLINE( 109)		{
HXLINE( 109)			int _g4 = (int)0;
HXDLIN( 109)			::Array< ::Dynamic> _g13 = e->children;
HXDLIN( 109)			while((_g4 < _g13->length)){
HXLINE( 109)				 ::luxe::Entity _child = _g13->__get(_g4).StaticCast<  ::luxe::Entity >();
HXDLIN( 109)				_g4 = (_g4 + (int)1);
HXLINE( 110)				_list = this->list_entity(_list,_child,(_depth + (int)2));
            			}
            		}
HXLINE( 113)		return _list;
            	}


HX_DEFINE_DYNAMIC_FUNC3(SceneDebugView_obj,list_entity,return )

::String SceneDebugView_obj::get_list(){
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_116_get_list)
HXLINE( 118)		::String _result = HX_("",00,00,00,00);
HXLINE( 120)		{
HXLINE( 120)			int _g = (int)0;
HXDLIN( 120)			::Array< ::Dynamic> _g1 = this->scenes;
HXDLIN( 120)			while((_g < _g1->length)){
HXLINE( 120)				 ::luxe::Scene _scene = _g1->__get(_g).StaticCast<  ::luxe::Scene >();
HXDLIN( 120)				_g = (_g + (int)1);
HXLINE( 121)				::String _id;
HXDLIN( 121)				if (this->hide_ids) {
HXLINE( 121)					_id = HX_("",00,00,00,00);
            				}
            				else {
HXLINE( 121)					_id = ((HX_("",00,00,00,00) + _scene->get_id()) + HX_(" ",20,00,00,00));
            				}
HXLINE( 123)				_result = (_result + _id);
HXLINE( 124)				_result = (_result + ((HX_("",00,00,00,00) + _scene->get_name()) + HX_(" ",20,00,00,00)));
HXLINE( 125)				_result = (_result + ((HX_("( ",f8,22,00,00) + _scene->get_length()) + HX_(" )\n",e1,6b,18,00)));
HXLINE( 126)				{
HXLINE( 126)					 ::Dynamic _entity = _scene->entities->iterator();
HXDLIN( 126)					while(( (bool)(_entity->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 126)						 ::luxe::Entity _entity1 = ( ( ::luxe::Entity)(_entity->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 127)						::String _list = _result;
HXDLIN( 127)						int _depth = (int)1;
HXDLIN( 127)						::String _active;
HXDLIN( 127)						if (_entity1->get_active()) {
HXLINE( 127)							_active = HX_("",00,00,00,00);
            						}
            						else {
HXLINE( 127)							_active = HX_("/ inactive",7c,39,09,16);
            						}
HXDLIN( 127)						::String _pre;
HXDLIN( 127)						if ((_depth == (int)1)) {
HXLINE( 127)							::String res = HX_("",00,00,00,00);
HXDLIN( 127)							{
HXLINE( 127)								int _g11 = (int)0;
HXDLIN( 127)								int _g2 = _depth;
HXDLIN( 127)								while((_g11 < _g2)){
HXLINE( 127)									_g11 = (_g11 + (int)1);
HXDLIN( 127)									int i = (_g11 - (int)1);
HXDLIN( 127)									res = (res + HX_("    ",00,38,3f,15));
            								}
            							}
HXDLIN( 127)							_pre = res;
            						}
            						else {
HXLINE( 127)							::String res1 = HX_("",00,00,00,00);
HXDLIN( 127)							{
HXLINE( 127)								int _g12 = (int)0;
HXDLIN( 127)								int _g3 = _depth;
HXDLIN( 127)								while((_g12 < _g3)){
HXLINE( 127)									_g12 = (_g12 + (int)1);
HXDLIN( 127)									int i1 = (_g12 - (int)1);
HXDLIN( 127)									res1 = (res1 + HX_("    ",00,38,3f,15));
            								}
            							}
HXDLIN( 127)							_pre = (res1 + HX_("> ",22,36,00,00));
            						}
HXDLIN( 127)						::String _id1;
HXDLIN( 127)						if (this->hide_ids) {
HXLINE( 127)							_id1 = HX_("",00,00,00,00);
            						}
            						else {
HXLINE( 127)							_id1 = _entity1->get_id();
            						}
HXDLIN( 127)						int _comp_count = ::Lambda_obj::count(_entity1->_components->components,null());
HXDLIN( 127)						::String _comp = (HX_("\xe2""\x80""\xa2"" ",1c,e6,c3,95) + _comp_count);
HXDLIN( 127)						::String _childs = (HX_("> ",22,36,00,00) + _entity1->children->length);
HXDLIN( 127)						_list = (_list + (((((((((((HX_("",00,00,00,00) + _pre) + _id1) + HX_(" ",20,00,00,00)) + _entity1->get_name()) + HX_(" ",20,00,00,00)) + _childs) + HX_(" ",20,00,00,00)) + _comp) + HX_(" ",20,00,00,00)) + _active) + HX_("\n",0a,00,00,00)));
HXDLIN( 127)						{
HXLINE( 127)							 ::Dynamic _name = _entity1->_components->components->_keys->iterator();
HXDLIN( 127)							while(( (bool)(_name->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 127)								::String _name1 = ( (::String)(_name->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 127)								 ::luxe::Component comp = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_entity1->_components->components->map,_name1)) );
HXDLIN( 127)								::String _comp_id;
HXDLIN( 127)								if (this->hide_ids) {
HXLINE( 127)									_comp_id = HX_("",00,00,00,00);
            								}
            								else {
HXLINE( 127)									_comp_id = (HX_(" ",20,00,00,00) + comp->id);
            								}
HXDLIN( 127)								::String res2 = HX_("",00,00,00,00);
HXDLIN( 127)								{
HXLINE( 127)									int _g13 = (int)0;
HXDLIN( 127)									int _g4 = (_depth + (int)1);
HXDLIN( 127)									while((_g13 < _g4)){
HXLINE( 127)										_g13 = (_g13 + (int)1);
HXDLIN( 127)										int i2 = (_g13 - (int)1);
HXDLIN( 127)										res2 = (res2 + HX_("    ",00,38,3f,15));
            									}
            								}
HXDLIN( 127)								::String _list1 = res2;
HXDLIN( 127)								_list = (_list + (_list1 + ((((HX_("\xe2""\x80""\xa2""",84,ed,ab,00) + _comp_id) + HX_(" ",20,00,00,00)) + comp->name) + HX_("\n",0a,00,00,00))));
            							}
            						}
HXDLIN( 127)						{
HXLINE( 127)							int _g5 = (int)0;
HXDLIN( 127)							::Array< ::Dynamic> _g14 = _entity1->children;
HXDLIN( 127)							while((_g5 < _g14->length)){
HXLINE( 127)								 ::luxe::Entity _child = _g14->__get(_g5).StaticCast<  ::luxe::Entity >();
HXDLIN( 127)								_g5 = (_g5 + (int)1);
HXDLIN( 127)								_list = this->list_entity(_list,_child,(_depth + (int)2));
            							}
            						}
HXDLIN( 127)						_result = _list;
            					}
            				}
            			}
            		}
HXLINE( 131)		return _result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SceneDebugView_obj,get_list,return )

void SceneDebugView_obj::refresh(){
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_137_refresh)
HXDLIN( 137)		 ::luxe::Text _hx_tmp = this->items_list;
HXDLIN( 137)		::String _result = HX_("",00,00,00,00);
HXDLIN( 137)		{
HXDLIN( 137)			int _g = (int)0;
HXDLIN( 137)			::Array< ::Dynamic> _g1 = this->scenes;
HXDLIN( 137)			while((_g < _g1->length)){
HXDLIN( 137)				 ::luxe::Scene _scene = _g1->__get(_g).StaticCast<  ::luxe::Scene >();
HXDLIN( 137)				_g = (_g + (int)1);
HXDLIN( 137)				::String _id;
HXDLIN( 137)				if (this->hide_ids) {
HXDLIN( 137)					_id = HX_("",00,00,00,00);
            				}
            				else {
HXDLIN( 137)					_id = ((HX_("",00,00,00,00) + _scene->get_id()) + HX_(" ",20,00,00,00));
            				}
HXDLIN( 137)				_result = (_result + _id);
HXDLIN( 137)				_result = (_result + ((HX_("",00,00,00,00) + _scene->get_name()) + HX_(" ",20,00,00,00)));
HXDLIN( 137)				_result = (_result + ((HX_("( ",f8,22,00,00) + _scene->get_length()) + HX_(" )\n",e1,6b,18,00)));
HXDLIN( 137)				{
HXDLIN( 137)					 ::Dynamic _entity = ::haxe::IMap_obj::iterator(_scene->entities);
HXDLIN( 137)					while(( (bool)(_entity->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 137)						 ::luxe::Entity _entity1 = ( ( ::luxe::Entity)(_entity->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 137)						::String _list = _result;
HXDLIN( 137)						int _depth = (int)1;
HXDLIN( 137)						::String _active;
HXDLIN( 137)						if (_entity1->get_active()) {
HXDLIN( 137)							_active = HX_("",00,00,00,00);
            						}
            						else {
HXDLIN( 137)							_active = HX_("/ inactive",7c,39,09,16);
            						}
HXDLIN( 137)						::String _pre;
HXDLIN( 137)						if ((_depth == (int)1)) {
HXDLIN( 137)							::String res = HX_("",00,00,00,00);
HXDLIN( 137)							{
HXDLIN( 137)								int _g11 = (int)0;
HXDLIN( 137)								int _g2 = _depth;
HXDLIN( 137)								while((_g11 < _g2)){
HXDLIN( 137)									_g11 = (_g11 + (int)1);
HXDLIN( 137)									int i = (_g11 - (int)1);
HXDLIN( 137)									res = (res + HX_("    ",00,38,3f,15));
            								}
            							}
HXDLIN( 137)							_pre = res;
            						}
            						else {
HXDLIN( 137)							::String res1 = HX_("",00,00,00,00);
HXDLIN( 137)							{
HXDLIN( 137)								int _g12 = (int)0;
HXDLIN( 137)								int _g3 = _depth;
HXDLIN( 137)								while((_g12 < _g3)){
HXDLIN( 137)									_g12 = (_g12 + (int)1);
HXDLIN( 137)									int i1 = (_g12 - (int)1);
HXDLIN( 137)									res1 = (res1 + HX_("    ",00,38,3f,15));
            								}
            							}
HXDLIN( 137)							_pre = (res1 + HX_("> ",22,36,00,00));
            						}
HXDLIN( 137)						::String _id1;
HXDLIN( 137)						if (this->hide_ids) {
HXDLIN( 137)							_id1 = HX_("",00,00,00,00);
            						}
            						else {
HXDLIN( 137)							_id1 = _entity1->get_id();
            						}
HXDLIN( 137)						int _comp_count = ::Lambda_obj::count(_entity1->_components->components,null());
HXDLIN( 137)						::String _comp = (HX_("\xe2""\x80""\xa2"" ",1c,e6,c3,95) + _comp_count);
HXDLIN( 137)						::String _childs = (HX_("> ",22,36,00,00) + _entity1->children->length);
HXDLIN( 137)						_list = (_list + (((((((((((HX_("",00,00,00,00) + _pre) + _id1) + HX_(" ",20,00,00,00)) + _entity1->get_name()) + HX_(" ",20,00,00,00)) + _childs) + HX_(" ",20,00,00,00)) + _comp) + HX_(" ",20,00,00,00)) + _active) + HX_("\n",0a,00,00,00)));
HXDLIN( 137)						{
HXDLIN( 137)							 ::Dynamic _name = _entity1->_components->components->_keys->iterator();
HXDLIN( 137)							while(( (bool)(_name->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 137)								::String _name1 = ( (::String)(_name->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 137)								 ::luxe::Component comp = ( ( ::luxe::Component)(::haxe::IMap_obj::get(_entity1->_components->components->map,_name1)) );
HXDLIN( 137)								::String _comp_id;
HXDLIN( 137)								if (this->hide_ids) {
HXDLIN( 137)									_comp_id = HX_("",00,00,00,00);
            								}
            								else {
HXDLIN( 137)									_comp_id = (HX_(" ",20,00,00,00) + comp->id);
            								}
HXDLIN( 137)								::String res2 = HX_("",00,00,00,00);
HXDLIN( 137)								{
HXDLIN( 137)									int _g13 = (int)0;
HXDLIN( 137)									int _g4 = (_depth + (int)1);
HXDLIN( 137)									while((_g13 < _g4)){
HXDLIN( 137)										_g13 = (_g13 + (int)1);
HXDLIN( 137)										int i2 = (_g13 - (int)1);
HXDLIN( 137)										res2 = (res2 + HX_("    ",00,38,3f,15));
            									}
            								}
HXDLIN( 137)								::String _list1 = res2;
HXDLIN( 137)								_list = (_list + (_list1 + ((((HX_("\xe2""\x80""\xa2""",84,ed,ab,00) + _comp_id) + HX_(" ",20,00,00,00)) + comp->name) + HX_("\n",0a,00,00,00))));
            							}
            						}
HXDLIN( 137)						{
HXDLIN( 137)							int _g5 = (int)0;
HXDLIN( 137)							::Array< ::Dynamic> _g14 = _entity1->children;
HXDLIN( 137)							while((_g5 < _g14->length)){
HXDLIN( 137)								 ::luxe::Entity _child = _g14->__get(_g5).StaticCast<  ::luxe::Entity >();
HXDLIN( 137)								_g5 = (_g5 + (int)1);
HXDLIN( 137)								_list = this->list_entity(_list,_child,(_depth + (int)2));
            							}
            						}
HXDLIN( 137)						_result = _list;
            					}
            				}
            			}
            		}
HXDLIN( 137)		_hx_tmp->set_text(_result);
            	}


void SceneDebugView_obj::process(){
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_141_process)
HXLINE( 143)		if (!(this->visible)) {
HXLINE( 143)			return;
            		}
HXLINE( 145)		bool _has_changed = false;
HXLINE( 147)		{
HXLINE( 147)			int _g = (int)0;
HXDLIN( 147)			::Array< ::Dynamic> _g1 = this->scenes;
HXDLIN( 147)			while((_g < _g1->length)){
HXLINE( 147)				 ::luxe::Scene _scene = _g1->__get(_g).StaticCast<  ::luxe::Scene >();
HXDLIN( 147)				_g = (_g + (int)1);
HXLINE( 148)				if (_scene->_has_changed) {
HXLINE( 149)					_has_changed = true;
HXLINE( 150)					_scene->_has_changed = false;
            				}
            			}
            		}
HXLINE( 154)		if (_has_changed) {
HXLINE( 156)			this->refresh();
            		}
            	}


void SceneDebugView_obj::onmousewheel( ::luxe::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_164_onmousewheel)
HXLINE( 165)		Float h = this->items_list->text_bounds->h;
HXLINE( 166)		Float vh = (::Luxe_obj::debug->inspector->size->y - this->margin);
HXLINE( 167)		Float diff = (h - vh);
HXLINE( 169)		Float new_y = this->items_list->get_pos()->y;
HXLINE( 170)		Float max_y = ::Luxe_obj::debug->padding->y;
HXDLIN( 170)		Float max_y1 = (max_y + (this->margin * ((Float)1.5)));
HXLINE( 171)		Float min_y = max_y1;
HXLINE( 173)		if ((diff > (int)0)) {
HXLINE( 174)			min_y = (max_y1 - (diff + (this->margin * (int)2)));
            		}
HXLINE( 177)		new_y = (new_y - (((Float)this->margin / (Float)(int)2) * e->y));
HXLINE( 178)		if ((new_y < min_y)) {
HXLINE( 178)			new_y = min_y;
            		}
            		else {
HXLINE( 178)			if ((new_y > max_y1)) {
HXLINE( 178)				new_y = max_y1;
            			}
            			else {
HXLINE( 178)				new_y = new_y;
            			}
            		}
HXLINE( 179)		{
HXLINE( 179)			 ::phoenix::Vector _this = this->items_list->get_pos();
HXDLIN( 179)			_this->y = new_y;
HXDLIN( 179)			if (!(_this->_construct)) {
HXLINE( 179)				bool _hx_tmp;
HXDLIN( 179)				if (hx::IsNotNull( _this->listen_y )) {
HXLINE( 179)					_hx_tmp = !(_this->ignore_listeners);
            				}
            				else {
HXLINE( 179)					_hx_tmp = false;
            				}
HXDLIN( 179)				if (_hx_tmp) {
HXLINE( 179)					_this->listen_y(new_y);
            				}
            			}
            		}
            	}


void SceneDebugView_obj::show(){
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_184_show)
HXLINE( 186)		this->super::show();
HXLINE( 187)		this->refresh();
HXLINE( 188)		this->items_list->set_visible(true);
            	}


void SceneDebugView_obj::hide(){
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_192_hide)
HXLINE( 194)		this->super::hide();
HXLINE( 195)		this->items_list->set_visible(false);
            	}


void SceneDebugView_obj::resize(){
            	HX_GC_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_201_resize)
HXLINE( 203)		 ::luxe::Debug debug = ::Luxe_obj::debug;
HXLINE( 206)		Float debug1 = debug->inspector->pos->x;
HXDLIN( 206)		Float viewrect = (debug1 + ((Float)this->margin / (Float)(int)2));
HXLINE( 207)		Float debug2 = debug->inspector->pos->y;
HXDLIN( 207)		Float viewrect1 = (debug2 + (this->margin * ((Float)1.5)));
HXLINE( 208)		Float viewrect2 = (debug->inspector->size->x - this->margin);
HXLINE( 209)		Float viewrect3 = (debug->inspector->size->y - this->margin);
HXLINE( 205)		 ::phoenix::Rectangle viewrect4 =  ::phoenix::Rectangle_obj::__alloc( HX_CTX ,viewrect,viewrect1,viewrect2,(viewrect3 - (this->margin * ((Float)1.5))));
HXLINE( 212)		Float left = (debug->padding->x + this->margin);
HXLINE( 213)		Float debug3 = debug->padding->y;
HXDLIN( 213)		Float top = (debug3 + (this->margin * ((Float)1.5)));
HXLINE( 215)		if (hx::IsNotNull( this->items_list )) {
HXLINE( 216)			 ::luxe::Text _hx_tmp = this->items_list;
HXDLIN( 216)			_hx_tmp->set_pos( ::phoenix::Vector_obj::__alloc( HX_CTX ,left,top,null(),null()));
HXLINE( 217)			this->items_list->set_clip_rect(viewrect4);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SceneDebugView_obj,resize,(void))

void SceneDebugView_obj::onwindowsized( ::snow::types::WindowEvent e){
            	HX_STACKFRAME(&_hx_pos_2c6e82300f0c9bf2_221_onwindowsized)
HXDLIN( 221)		this->resize();
            	}



hx::ObjectPtr< SceneDebugView_obj > SceneDebugView_obj::__new( ::luxe::Debug _debug) {
	hx::ObjectPtr< SceneDebugView_obj > __this = new SceneDebugView_obj();
	__this->__construct(_debug);
	return __this;
}

hx::ObjectPtr< SceneDebugView_obj > SceneDebugView_obj::__alloc(hx::Ctx *_hx_ctx, ::luxe::Debug _debug) {
	SceneDebugView_obj *__this = (SceneDebugView_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SceneDebugView_obj), true, "luxe.debug.SceneDebugView"));
	*(void **)__this = SceneDebugView_obj::_hx_vtable;
	__this->__construct(_debug);
	return __this;
}

SceneDebugView_obj::SceneDebugView_obj()
{
}

void SceneDebugView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SceneDebugView);
	HX_MARK_MEMBER_NAME(items_list,"items_list");
	HX_MARK_MEMBER_NAME(margin,"margin");
	HX_MARK_MEMBER_NAME(font_size,"font_size");
	HX_MARK_MEMBER_NAME(scenes,"scenes");
	HX_MARK_MEMBER_NAME(hide_ids,"hide_ids");
	 ::luxe::debug::DebugView_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SceneDebugView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(items_list,"items_list");
	HX_VISIT_MEMBER_NAME(margin,"margin");
	HX_VISIT_MEMBER_NAME(font_size,"font_size");
	HX_VISIT_MEMBER_NAME(scenes,"scenes");
	HX_VISIT_MEMBER_NAME(hide_ids,"hide_ids");
	 ::luxe::debug::DebugView_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SceneDebugView_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"tabs") ) { return hx::Val( tabs_dyn() ); }
		if (HX_FIELD_EQ(inName,"show") ) { return hx::Val( show_dyn() ); }
		if (HX_FIELD_EQ(inName,"hide") ) { return hx::Val( hide_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"margin") ) { return hx::Val( margin ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"scenes") ) { return hx::Val( scenes ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"refresh") ) { return hx::Val( refresh_dyn() ); }
		if (HX_FIELD_EQ(inName,"process") ) { return hx::Val( process_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hide_ids") ) { return hx::Val( hide_ids ); }
		if (HX_FIELD_EQ(inName,"get_list") ) { return hx::Val( get_list_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"font_size") ) { return hx::Val( font_size ); }
		if (HX_FIELD_EQ(inName,"add_scene") ) { return hx::Val( add_scene_dyn() ); }
		if (HX_FIELD_EQ(inName,"onkeydown") ) { return hx::Val( onkeydown_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"items_list") ) { return hx::Val( items_list ); }
		if (HX_FIELD_EQ(inName,"toggle_ids") ) { return hx::Val( toggle_ids_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"list_entity") ) { return hx::Val( list_entity_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"remove_scene") ) { return hx::Val( remove_scene_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmousewheel") ) { return hx::Val( onmousewheel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onwindowsized") ) { return hx::Val( onwindowsized_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SceneDebugView_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"margin") ) { margin=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scenes") ) { scenes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hide_ids") ) { hide_ids=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"font_size") ) { font_size=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"items_list") ) { items_list=inValue.Cast<  ::luxe::Text >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SceneDebugView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("items_list","\x3d","\x0c","\x48","\xaf"));
	outFields->push(HX_HCSTRING("margin","\x2e","\x70","\x6d","\xba"));
	outFields->push(HX_HCSTRING("font_size","\x71","\xf0","\x12","\x18"));
	outFields->push(HX_HCSTRING("scenes","\xa7","\x49","\xcc","\x3e"));
	outFields->push(HX_HCSTRING("hide_ids","\xfb","\x06","\x10","\xad"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SceneDebugView_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::Text*/ ,(int)offsetof(SceneDebugView_obj,items_list),HX_HCSTRING("items_list","\x3d","\x0c","\x48","\xaf")},
	{hx::fsInt,(int)offsetof(SceneDebugView_obj,margin),HX_HCSTRING("margin","\x2e","\x70","\x6d","\xba")},
	{hx::fsFloat,(int)offsetof(SceneDebugView_obj,font_size),HX_HCSTRING("font_size","\x71","\xf0","\x12","\x18")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(SceneDebugView_obj,scenes),HX_HCSTRING("scenes","\xa7","\x49","\xcc","\x3e")},
	{hx::fsBool,(int)offsetof(SceneDebugView_obj,hide_ids),HX_HCSTRING("hide_ids","\xfb","\x06","\x10","\xad")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SceneDebugView_obj_sStaticStorageInfo = 0;
#endif

static ::String SceneDebugView_obj_sMemberFields[] = {
	HX_HCSTRING("items_list","\x3d","\x0c","\x48","\xaf"),
	HX_HCSTRING("margin","\x2e","\x70","\x6d","\xba"),
	HX_HCSTRING("font_size","\x71","\xf0","\x12","\x18"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("scenes","\xa7","\x49","\xcc","\x3e"),
	HX_HCSTRING("add_scene","\x6e","\xe1","\x48","\xf8"),
	HX_HCSTRING("remove_scene","\xd1","\x47","\x52","\xaf"),
	HX_HCSTRING("onkeydown","\x42","\xce","\xc7","\xbb"),
	HX_HCSTRING("hide_ids","\xfb","\x06","\x10","\xad"),
	HX_HCSTRING("toggle_ids","\xcd","\x62","\xf8","\xeb"),
	HX_HCSTRING("tabs","\x7e","\xb0","\xf6","\x4c"),
	HX_HCSTRING("list_entity","\x24","\x70","\x41","\x5d"),
	HX_HCSTRING("get_list","\xe7","\xd7","\x6d","\xc7"),
	HX_HCSTRING("refresh","\xdb","\xd9","\x20","\xed"),
	HX_HCSTRING("process","\x6f","\xa2","\x4a","\xf1"),
	HX_HCSTRING("onmousewheel","\x35","\x56","\xec","\x35"),
	HX_HCSTRING("show","\xfd","\xd4","\x52","\x4c"),
	HX_HCSTRING("hide","\xc2","\x34","\x0e","\x45"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("onwindowsized","\xd4","\xb3","\x35","\x59"),
	::String(null()) };

static void SceneDebugView_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SceneDebugView_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SceneDebugView_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SceneDebugView_obj::__mClass,"__mClass");
};

#endif

hx::Class SceneDebugView_obj::__mClass;

void SceneDebugView_obj::__register()
{
	hx::Object *dummy = new SceneDebugView_obj;
	SceneDebugView_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.debug.SceneDebugView","\xff","\x0e","\xa8","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SceneDebugView_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SceneDebugView_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SceneDebugView_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SceneDebugView_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SceneDebugView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SceneDebugView_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace debug
