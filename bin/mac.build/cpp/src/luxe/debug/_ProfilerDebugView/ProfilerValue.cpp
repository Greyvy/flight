// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_0a05af74edef3e68
#define INCLUDED_0a05af74edef3e68
#include "linc_timestamp.h"
#endif
#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_debug__ProfilerDebugView_ProfilerBar
#include <luxe/debug/_ProfilerDebugView/ProfilerBar.h>
#endif
#ifndef INCLUDED_luxe_debug__ProfilerDebugView_ProfilerValue
#include <luxe/debug/_ProfilerDebugView/ProfilerValue.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_Runtime
#include <snow/modules/sdl/Runtime.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7efcee61ddf8f601_250_new,"luxe.debug._ProfilerDebugView.ProfilerValue","new",0xd1df7caf,"luxe.debug._ProfilerDebugView.ProfilerValue.new","luxe/debug/ProfilerDebugView.hx",250,0xef83e3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_7efcee61ddf8f601_268_set,"luxe.debug._ProfilerDebugView.ProfilerValue","set",0xd1e347f1,"luxe.debug._ProfilerDebugView.ProfilerValue.set","luxe/debug/ProfilerDebugView.hx",268,0xef83e3c4)
namespace luxe{
namespace debug{
namespace _ProfilerDebugView{

void ProfilerValue_obj::__construct(::String _name, ::luxe::debug::_ProfilerDebugView::ProfilerBar _bar){
            	HX_STACKFRAME(&_hx_pos_7efcee61ddf8f601_250_new)
HXLINE( 260)		this->accum = ((Float)0);
HXLINE( 259)		this->count = (int)0;
HXLINE( 258)		this->hidden = false;
HXLINE( 257)		this->avg = (int)10;
HXLINE( 255)		this->start = ((Float)0.0);
HXLINE( 263)		this->name = _name;
HXDLIN( 263)		this->bar = _bar;
HXLINE( 264)		this->history = ::Array_obj< Float >::__new(0);
HXLINE( 265)		this->offsets = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic ProfilerValue_obj::__CreateEmpty() { return new ProfilerValue_obj; }

void *ProfilerValue_obj::_hx_vtable = 0;

Dynamic ProfilerValue_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ProfilerValue_obj > _hx_result = new ProfilerValue_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ProfilerValue_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x78281e3f;
}

void ProfilerValue_obj::set(){
            	HX_STACKFRAME(&_hx_pos_7efcee61ddf8f601_268_set)
HXLINE( 270)		 ::snow::Snow _this = ::Luxe_obj::core->app;
HXDLIN( 270)		Float _t = linc::timestamp::now();
HXDLIN( 270)		Float _t1 = ((_t - ::snow::modules::sdl::Runtime_obj::timestamp_start) - this->start);
HXLINE( 273)		{
HXLINE( 273)			int _g = (int)0;
HXDLIN( 273)			::Array< ::Dynamic> _g1 = this->offsets;
HXDLIN( 273)			while((_g < _g1->length)){
HXLINE( 273)				 ::luxe::debug::_ProfilerDebugView::ProfilerValue _offset = _g1->__get(_g).StaticCast<  ::luxe::debug::_ProfilerDebugView::ProfilerValue >();
HXDLIN( 273)				_g = (_g + (int)1);
HXLINE( 274)				::Array< Float > _offset1 = _offset->history;
HXDLIN( 274)				_t1 = (_t1 - _offset1->__get((_offset->history->length - (int)1)));
            			}
            		}
HXLINE( 278)		this->history->push(_t1);
HXLINE( 280)		if ((this->history->length > this->avg)) {
HXLINE( 281)			this->history->shift();
            		}
HXLINE( 284)		this->count++;
HXLINE( 286)		if ((this->count == this->avg)) {
HXLINE( 287)			Float _hx___t = ((Float)this->accum / (Float)this->avg);
HXLINE( 288)			this->bar->set_value(_hx___t);
HXLINE( 289)			this->accum = (int)0;
HXLINE( 290)			this->count = (int)0;
            		}
HXLINE( 293)		 ::luxe::debug::_ProfilerDebugView::ProfilerValue _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 293)		_hx_tmp->accum = (_hx_tmp->accum + _t1);
HXLINE( 295)		if (this->bar->visible) {
HXLINE( 296)			 ::luxe::debug::_ProfilerDebugView::ProfilerBar _hx_tmp1 = this->bar;
HXDLIN( 296)			Float n = ::Math_obj::pow((int)10,(int)4);
HXDLIN( 296)			_hx_tmp1->set_text(::Std_obj::string(((Float)::Std_obj::_hx_int(((_t1 * (int)1000) * n)) / (Float)n)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ProfilerValue_obj,set,(void))


hx::ObjectPtr< ProfilerValue_obj > ProfilerValue_obj::__new(::String _name, ::luxe::debug::_ProfilerDebugView::ProfilerBar _bar) {
	hx::ObjectPtr< ProfilerValue_obj > __this = new ProfilerValue_obj();
	__this->__construct(_name,_bar);
	return __this;
}

hx::ObjectPtr< ProfilerValue_obj > ProfilerValue_obj::__alloc(hx::Ctx *_hx_ctx,::String _name, ::luxe::debug::_ProfilerDebugView::ProfilerBar _bar) {
	ProfilerValue_obj *__this = (ProfilerValue_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ProfilerValue_obj), true, "luxe.debug._ProfilerDebugView.ProfilerValue"));
	*(void **)__this = ProfilerValue_obj::_hx_vtable;
	__this->__construct(_name,_bar);
	return __this;
}

ProfilerValue_obj::ProfilerValue_obj()
{
}

void ProfilerValue_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ProfilerValue);
	HX_MARK_MEMBER_NAME(offsets,"offsets");
	HX_MARK_MEMBER_NAME(bar,"bar");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(history,"history");
	HX_MARK_MEMBER_NAME(avg,"avg");
	HX_MARK_MEMBER_NAME(hidden,"hidden");
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_MEMBER_NAME(accum,"accum");
	HX_MARK_END_CLASS();
}

void ProfilerValue_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(offsets,"offsets");
	HX_VISIT_MEMBER_NAME(bar,"bar");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(history,"history");
	HX_VISIT_MEMBER_NAME(avg,"avg");
	HX_VISIT_MEMBER_NAME(hidden,"hidden");
	HX_VISIT_MEMBER_NAME(count,"count");
	HX_VISIT_MEMBER_NAME(accum,"accum");
}

hx::Val ProfilerValue_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { return hx::Val( bar ); }
		if (HX_FIELD_EQ(inName,"avg") ) { return hx::Val( avg ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		if (HX_FIELD_EQ(inName,"count") ) { return hx::Val( count ); }
		if (HX_FIELD_EQ(inName,"accum") ) { return hx::Val( accum ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"hidden") ) { return hx::Val( hidden ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsets") ) { return hx::Val( offsets ); }
		if (HX_FIELD_EQ(inName,"history") ) { return hx::Val( history ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ProfilerValue_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { bar=inValue.Cast<  ::luxe::debug::_ProfilerDebugView::ProfilerBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"avg") ) { avg=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"accum") ) { accum=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"hidden") ) { hidden=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsets") ) { offsets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"history") ) { history=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ProfilerValue_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("offsets","\x80","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("bar","\xd3","\xb1","\x4a","\x00"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("start","\x62","\x74","\x0b","\x84"));
	outFields->push(HX_HCSTRING("history","\x54","\x35","\x47","\x64"));
	outFields->push(HX_HCSTRING("avg","\xd2","\x01","\x4a","\x00"));
	outFields->push(HX_HCSTRING("hidden","\x6a","\xff","\x95","\x4c"));
	outFields->push(HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"));
	outFields->push(HX_HCSTRING("accum","\xd9","\xe9","\x99","\x1b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ProfilerValue_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(ProfilerValue_obj,offsets),HX_HCSTRING("offsets","\x80","\x09","\x65","\xd7")},
	{hx::fsObject /*::luxe::debug::_ProfilerDebugView::ProfilerBar*/ ,(int)offsetof(ProfilerValue_obj,bar),HX_HCSTRING("bar","\xd3","\xb1","\x4a","\x00")},
	{hx::fsString,(int)offsetof(ProfilerValue_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsFloat,(int)offsetof(ProfilerValue_obj,start),HX_HCSTRING("start","\x62","\x74","\x0b","\x84")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(ProfilerValue_obj,history),HX_HCSTRING("history","\x54","\x35","\x47","\x64")},
	{hx::fsInt,(int)offsetof(ProfilerValue_obj,avg),HX_HCSTRING("avg","\xd2","\x01","\x4a","\x00")},
	{hx::fsBool,(int)offsetof(ProfilerValue_obj,hidden),HX_HCSTRING("hidden","\x6a","\xff","\x95","\x4c")},
	{hx::fsInt,(int)offsetof(ProfilerValue_obj,count),HX_HCSTRING("count","\xcf","\x44","\x63","\x4a")},
	{hx::fsFloat,(int)offsetof(ProfilerValue_obj,accum),HX_HCSTRING("accum","\xd9","\xe9","\x99","\x1b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ProfilerValue_obj_sStaticStorageInfo = 0;
#endif

static ::String ProfilerValue_obj_sMemberFields[] = {
	HX_HCSTRING("offsets","\x80","\x09","\x65","\xd7"),
	HX_HCSTRING("bar","\xd3","\xb1","\x4a","\x00"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("history","\x54","\x35","\x47","\x64"),
	HX_HCSTRING("avg","\xd2","\x01","\x4a","\x00"),
	HX_HCSTRING("hidden","\x6a","\xff","\x95","\x4c"),
	HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"),
	HX_HCSTRING("accum","\xd9","\xe9","\x99","\x1b"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void ProfilerValue_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ProfilerValue_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ProfilerValue_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ProfilerValue_obj::__mClass,"__mClass");
};

#endif

hx::Class ProfilerValue_obj::__mClass;

void ProfilerValue_obj::__register()
{
	hx::Object *dummy = new ProfilerValue_obj;
	ProfilerValue_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.debug._ProfilerDebugView.ProfilerValue","\x3d","\xf9","\xc1","\xd8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ProfilerValue_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ProfilerValue_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ProfilerValue_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ProfilerValue_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ProfilerValue_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ProfilerValue_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace debug
} // end namespace _ProfilerDebugView
