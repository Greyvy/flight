// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_Luxe
#include <Luxe.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_luxe_Debug
#include <luxe/Debug.h>
#endif
#ifndef INCLUDED_luxe_Emitter
#include <luxe/Emitter.h>
#endif
#ifndef INCLUDED_luxe_Engine
#include <luxe/Engine.h>
#endif
#ifndef INCLUDED_luxe_Physics
#include <luxe/Physics.h>
#endif
#ifndef INCLUDED_luxe_PhysicsEngine
#include <luxe/PhysicsEngine.h>
#endif
#ifndef INCLUDED_luxe_Timer
#include <luxe/Timer.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_api_Timer
#include <snow/api/Timer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_df857d64a1662ab6_17_new,"luxe.Physics","new",0x78e08861,"luxe.Physics.new","luxe/Physics.hx",17,0xe794c970)
HX_LOCAL_STACK_FRAME(_hx_pos_df857d64a1662ab6_50_init,"luxe.Physics","init",0x484f83ef,"luxe.Physics.init","luxe/Physics.hx",50,0xe794c970)
HX_LOCAL_STACK_FRAME(_hx_pos_df857d64a1662ab6_62_reset,"luxe.Physics","reset",0x25f3c410,"luxe.Physics.reset","luxe/Physics.hx",62,0xe794c970)
HX_LOCAL_STACK_FRAME(_hx_pos_df857d64a1662ab6_82_fixed_update,"luxe.Physics","fixed_update",0x133e3493,"luxe.Physics.fixed_update","luxe/Physics.hx",82,0xe794c970)
HX_LOCAL_STACK_FRAME(_hx_pos_df857d64a1662ab6_98_add_engine,"luxe.Physics","add_engine",0x7161177f,"luxe.Physics.add_engine","luxe/Physics.hx",98,0xe794c970)
HX_LOCAL_STACK_FRAME(_hx_pos_df857d64a1662ab6_116_update,"luxe.Physics","update",0x8de504a8,"luxe.Physics.update","luxe/Physics.hx",116,0xe794c970)
HX_LOCAL_STACK_FRAME(_hx_pos_df857d64a1662ab6_122_process,"luxe.Physics","process",0xedf9eef0,"luxe.Physics.process","luxe/Physics.hx",122,0xe794c970)
HX_LOCAL_STACK_FRAME(_hx_pos_df857d64a1662ab6_128_render,"luxe.Physics","render",0x0c08e9f5,"luxe.Physics.render","luxe/Physics.hx",128,0xe794c970)
HX_LOCAL_STACK_FRAME(_hx_pos_df857d64a1662ab6_133_destroy,"luxe.Physics","destroy",0x2135797b,"luxe.Physics.destroy","luxe/Physics.hx",133,0xe794c970)
HX_LOCAL_STACK_FRAME(_hx_pos_df857d64a1662ab6_150_on,"luxe.Physics","on",0x66b6643e,"luxe.Physics.on","luxe/Physics.hx",150,0xe794c970)
HX_LOCAL_STACK_FRAME(_hx_pos_df857d64a1662ab6_154_off,"luxe.Physics","off",0x78e14b70,"luxe.Physics.off","luxe/Physics.hx",154,0xe794c970)
HX_LOCAL_STACK_FRAME(_hx_pos_df857d64a1662ab6_158_emit,"luxe.Physics","emit",0x45a9e732,"luxe.Physics.emit","luxe/Physics.hx",158,0xe794c970)
HX_LOCAL_STACK_FRAME(_hx_pos_df857d64a1662ab6_164_set_step_rate,"luxe.Physics","set_step_rate",0x5fde6d17,"luxe.Physics.set_step_rate","luxe/Physics.hx",164,0xe794c970)
HX_LOCAL_STACK_FRAME(_hx_pos_df857d64a1662ab6_79_boot,"luxe.Physics","boot",0x43afcd11,"luxe.Physics.boot","luxe/Physics.hx",79,0xe794c970)
namespace luxe{

void Physics_obj::__construct( ::luxe::Engine _core){
            	HX_GC_STACKFRAME(&_hx_pos_df857d64a1662ab6_17_new)
HXLINE(  34)		this->step_delta = ((Float)0.0166666666666666664);
HXLINE(  32)		this->step_rate = ((Float)0.0166666666666666664);
HXLINE(  43)		this->core = _core;
HXLINE(  44)		this->emitter =  ::luxe::Emitter_obj::__alloc( HX_CTX );
            	}

Dynamic Physics_obj::__CreateEmpty() { return new Physics_obj; }

void *Physics_obj::_hx_vtable = 0;

Dynamic Physics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Physics_obj > _hx_result = new Physics_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Physics_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b17a371;
}

void Physics_obj::init(){
            	HX_STACKFRAME(&_hx_pos_df857d64a1662ab6_50_init)
HXDLIN(  50)		this->engines = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Physics_obj,init,(void))

void Physics_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_df857d64a1662ab6_62_reset)
HXLINE(  65)		if (hx::IsNotNull( this->timer )) {
HXLINE(  66)			this->timer->stop();
HXLINE(  67)			this->timer = null();
            		}
HXLINE(  70)		if ((this->step_rate != (int)0)) {
HXLINE(  73)			this->timer = ::Luxe_obj::timer->schedule(this->step_rate,this->fixed_update_dyn(),true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Physics_obj,reset,(void))

void Physics_obj::fixed_update(){
            	HX_STACKFRAME(&_hx_pos_df857d64a1662ab6_82_fixed_update)
HXLINE(  84)		::Luxe_obj::debug->start(::luxe::Physics_obj::tag_physics,null());
HXLINE(  87)		this->emitter->emit((int)1,(this->step_delta * ::Luxe_obj::core->timescale));
HXLINE(  89)		this->update();
HXLINE(  91)		this->emitter->emit((int)2,(this->step_delta * ::Luxe_obj::core->timescale));
HXLINE(  93)		::Luxe_obj::debug->end(::luxe::Physics_obj::tag_physics);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Physics_obj,fixed_update,(void))

 ::Dynamic Physics_obj::add_engine(hx::Class type, ::Dynamic _data){
            	HX_STACKFRAME(&_hx_pos_df857d64a1662ab6_98_add_engine)
HXLINE( 100)		 ::Dynamic _engine_instance = ::Type_obj::createInstance(type,::cpp::VirtualArray_obj::__new(1)->init(0,_data));
HXLINE( 101)		 ::luxe::PhysicsEngine _physics_engine = ( ( ::luxe::PhysicsEngine)(_engine_instance) );
HXLINE( 104)		_physics_engine->init();
HXLINE( 107)		this->engines->push(_physics_engine);
HXLINE( 110)		return _engine_instance;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Physics_obj,add_engine,return )

void Physics_obj::update(){
            	HX_STACKFRAME(&_hx_pos_df857d64a1662ab6_116_update)
HXDLIN( 116)		int _g = (int)0;
HXDLIN( 116)		::Array< ::Dynamic> _g1 = this->engines;
HXDLIN( 116)		while((_g < _g1->length)){
HXDLIN( 116)			 ::luxe::PhysicsEngine engine = _g1->__get(_g).StaticCast<  ::luxe::PhysicsEngine >();
HXDLIN( 116)			_g = (_g + (int)1);
HXLINE( 117)			engine->update();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Physics_obj,update,(void))

void Physics_obj::process(){
            	HX_STACKFRAME(&_hx_pos_df857d64a1662ab6_122_process)
HXDLIN( 122)		int _g = (int)0;
HXDLIN( 122)		::Array< ::Dynamic> _g1 = this->engines;
HXDLIN( 122)		while((_g < _g1->length)){
HXDLIN( 122)			 ::luxe::PhysicsEngine engine = _g1->__get(_g).StaticCast<  ::luxe::PhysicsEngine >();
HXDLIN( 122)			_g = (_g + (int)1);
HXLINE( 123)			engine->process();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Physics_obj,process,(void))

void Physics_obj::render(){
            	HX_STACKFRAME(&_hx_pos_df857d64a1662ab6_128_render)
HXDLIN( 128)		int _g = (int)0;
HXDLIN( 128)		::Array< ::Dynamic> _g1 = this->engines;
HXDLIN( 128)		while((_g < _g1->length)){
HXDLIN( 128)			 ::luxe::PhysicsEngine engine = _g1->__get(_g).StaticCast<  ::luxe::PhysicsEngine >();
HXDLIN( 128)			_g = (_g + (int)1);
HXLINE( 129)			engine->render();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Physics_obj,render,(void))

void Physics_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_df857d64a1662ab6_133_destroy)
HXLINE( 135)		if (hx::IsNotNull( this->timer )) {
HXLINE( 136)			this->timer->stop();
            		}
HXLINE( 139)		this->timer = null();
HXLINE( 141)		{
HXLINE( 141)			int _g = (int)0;
HXDLIN( 141)			::Array< ::Dynamic> _g1 = this->engines;
HXDLIN( 141)			while((_g < _g1->length)){
HXLINE( 141)				 ::luxe::PhysicsEngine engine = _g1->__get(_g).StaticCast<  ::luxe::PhysicsEngine >();
HXDLIN( 141)				_g = (_g + (int)1);
HXLINE( 142)				engine->destroy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Physics_obj,destroy,(void))

void Physics_obj::on(int _event, ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_df857d64a1662ab6_150_on)
HXDLIN( 150)		this->emitter->on(_event,_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Physics_obj,on,(void))

bool Physics_obj::off(int _event, ::Dynamic _handler){
            	HX_STACKFRAME(&_hx_pos_df857d64a1662ab6_154_off)
HXDLIN( 154)		return this->emitter->off(_event,_handler);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Physics_obj,off,return )

void Physics_obj::emit(int _event,Float _float){
            	HX_STACKFRAME(&_hx_pos_df857d64a1662ab6_158_emit)
HXDLIN( 158)		this->emitter->emit(_event,_float);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Physics_obj,emit,(void))

Float Physics_obj::set_step_rate(Float _rate){
            	HX_STACKFRAME(&_hx_pos_df857d64a1662ab6_164_set_step_rate)
HXLINE( 167)		this->step_rate = _rate;
HXLINE( 168)		this->step_delta = this->step_rate;
HXLINE( 171)		this->reset();
HXLINE( 173)		return this->step_rate;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Physics_obj,set_step_rate,return )

::String Physics_obj::tag_physics;


hx::ObjectPtr< Physics_obj > Physics_obj::__new( ::luxe::Engine _core) {
	hx::ObjectPtr< Physics_obj > __this = new Physics_obj();
	__this->__construct(_core);
	return __this;
}

hx::ObjectPtr< Physics_obj > Physics_obj::__alloc(hx::Ctx *_hx_ctx, ::luxe::Engine _core) {
	Physics_obj *__this = (Physics_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Physics_obj), true, "luxe.Physics"));
	*(void **)__this = Physics_obj::_hx_vtable;
	__this->__construct(_core);
	return __this;
}

Physics_obj::Physics_obj()
{
}

void Physics_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Physics);
	HX_MARK_MEMBER_NAME(core,"core");
	HX_MARK_MEMBER_NAME(engines,"engines");
	HX_MARK_MEMBER_NAME(step_rate,"step_rate");
	HX_MARK_MEMBER_NAME(step_delta,"step_delta");
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_MEMBER_NAME(emitter,"emitter");
	HX_MARK_END_CLASS();
}

void Physics_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(core,"core");
	HX_VISIT_MEMBER_NAME(engines,"engines");
	HX_VISIT_MEMBER_NAME(step_rate,"step_rate");
	HX_VISIT_MEMBER_NAME(step_delta,"step_delta");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	HX_VISIT_MEMBER_NAME(emitter,"emitter");
}

hx::Val Physics_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"on") ) { return hx::Val( on_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"off") ) { return hx::Val( off_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { return hx::Val( core ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"emit") ) { return hx::Val( emit_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"engines") ) { return hx::Val( engines ); }
		if (HX_FIELD_EQ(inName,"emitter") ) { return hx::Val( emitter ); }
		if (HX_FIELD_EQ(inName,"process") ) { return hx::Val( process_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"step_rate") ) { return hx::Val( step_rate ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"step_delta") ) { return hx::Val( step_delta ); }
		if (HX_FIELD_EQ(inName,"add_engine") ) { return hx::Val( add_engine_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fixed_update") ) { return hx::Val( fixed_update_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_step_rate") ) { return hx::Val( set_step_rate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Physics_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"tag_physics") ) { outValue = ( tag_physics ); return true; }
	}
	return false;
}

hx::Val Physics_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { core=inValue.Cast<  ::luxe::Engine >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::snow::api::Timer >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"engines") ) { engines=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"emitter") ) { emitter=inValue.Cast<  ::luxe::Emitter >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"step_rate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_step_rate(inValue.Cast< Float >()) );step_rate=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"step_delta") ) { step_delta=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Physics_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"tag_physics") ) { tag_physics=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void Physics_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"));
	outFields->push(HX_HCSTRING("engines","\x71","\x82","\x3a","\xf7"));
	outFields->push(HX_HCSTRING("step_rate","\xf3","\x93","\xf3","\xdb"));
	outFields->push(HX_HCSTRING("step_delta","\x85","\x97","\x30","\x8c"));
	outFields->push(HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"));
	outFields->push(HX_HCSTRING("emitter","\x6e","\x35","\xf6","\xbe"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Physics_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::Engine*/ ,(int)offsetof(Physics_obj,core),HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Physics_obj,engines),HX_HCSTRING("engines","\x71","\x82","\x3a","\xf7")},
	{hx::fsFloat,(int)offsetof(Physics_obj,step_rate),HX_HCSTRING("step_rate","\xf3","\x93","\xf3","\xdb")},
	{hx::fsFloat,(int)offsetof(Physics_obj,step_delta),HX_HCSTRING("step_delta","\x85","\x97","\x30","\x8c")},
	{hx::fsObject /*::snow::api::Timer*/ ,(int)offsetof(Physics_obj,timer),HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{hx::fsObject /*::luxe::Emitter*/ ,(int)offsetof(Physics_obj,emitter),HX_HCSTRING("emitter","\x6e","\x35","\xf6","\xbe")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Physics_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Physics_obj::tag_physics,HX_HCSTRING("tag_physics","\xa2","\xd6","\x2a","\x18")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Physics_obj_sMemberFields[] = {
	HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"),
	HX_HCSTRING("engines","\x71","\x82","\x3a","\xf7"),
	HX_HCSTRING("step_rate","\xf3","\x93","\xf3","\xdb"),
	HX_HCSTRING("step_delta","\x85","\x97","\x30","\x8c"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("emitter","\x6e","\x35","\xf6","\xbe"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("fixed_update","\xb4","\x74","\xd7","\xb6"),
	HX_HCSTRING("add_engine","\x60","\x5d","\x34","\x05"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("process","\x6f","\xa2","\x4a","\xf1"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("on","\x1f","\x61","\x00","\x00"),
	HX_HCSTRING("off","\x6f","\x93","\x54","\x00"),
	HX_HCSTRING("emit","\x53","\x9e","\x15","\x43"),
	HX_HCSTRING("set_step_rate","\xd6","\x49","\x5d","\xe2"),
	::String(null()) };

static void Physics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Physics_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Physics_obj::tag_physics,"tag_physics");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Physics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Physics_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Physics_obj::tag_physics,"tag_physics");
};

#endif

hx::Class Physics_obj::__mClass;

static ::String Physics_obj_sStaticFields[] = {
	HX_HCSTRING("tag_physics","\xa2","\xd6","\x2a","\x18"),
	::String(null())
};

void Physics_obj::__register()
{
	hx::Object *dummy = new Physics_obj;
	Physics_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.Physics","\xef","\xc3","\x42","\xd1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Physics_obj::__GetStatic;
	__mClass->mSetStaticField = &Physics_obj::__SetStatic;
	__mClass->mMarkFunc = Physics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Physics_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Physics_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Physics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Physics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Physics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Physics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Physics_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_df857d64a1662ab6_79_boot)
HXDLIN(  79)		tag_physics = HX_("physics",c7,38,51,be);
            	}
}

} // end namespace luxe
