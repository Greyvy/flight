// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_luxe_structural_BalancedBSTIterator_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry
#include <luxe/structural/BalancedBSTIterator_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.h>
#endif
#ifndef INCLUDED_luxe_structural_BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry
#include <luxe/structural/BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.h>
#endif
#ifndef INCLUDED_luxe_structural_BalancedBSTTraverseMethod
#include <luxe/structural/BalancedBSTTraverseMethod.h>
#endif
#ifndef INCLUDED_luxe_structural_BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry
#include <luxe/structural/BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_Geometry
#include <phoenix/geometry/Geometry.h>
#endif
#ifndef INCLUDED_phoenix_geometry_GeometryKey
#include <phoenix/geometry/GeometryKey.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_236e7615e83a66d2_32_new,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","new",0xa9e9064f,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.new","luxe/structural/BalancedBST.hx",32,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_41_size,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","size",0x054d9bf2,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.size","luxe/structural/BalancedBST.hx",41,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_48_depth,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","depth",0xf8ebc0b2,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.depth","luxe/structural/BalancedBST.hx",48,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_53_insert,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","insert",0x05b12caa,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.insert","luxe/structural/BalancedBST.hx",53,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_64_contains,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","contains",0x203141d0,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.contains","luxe/structural/BalancedBST.hx",64,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_71_find,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","find",0xfcb5cb6a,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.find","luxe/structural/BalancedBST.hx",71,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_79_rank,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","rank",0x049e48dd,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.rank","luxe/structural/BalancedBST.hx",79,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_85_select,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","select",0xd207046d,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.select","luxe/structural/BalancedBST.hx",85,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_98_smallest,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","smallest",0x99977590,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.smallest","luxe/structural/BalancedBST.hx",98,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_111_largest,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","largest",0xad54968b,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.largest","luxe/structural/BalancedBST.hx",111,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_124_remove,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","remove",0x6c5c85b5,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.remove","luxe/structural/BalancedBST.hx",124,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_145_remove_smallest,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","remove_smallest",0xba8920e9,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.remove_smallest","luxe/structural/BalancedBST.hx",145,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_162_remove_largest,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","remove_largest",0x2e0d5952,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.remove_largest","luxe/structural/BalancedBST.hx",162,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_180_floor,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","floor",0x2458a17b,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.floor","luxe/structural/BalancedBST.hx",180,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_193_ceil,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","ceil",0xfab71a36,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.ceil","luxe/structural/BalancedBST.hx",193,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_211_toArray,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","toArray",0x63ac138d,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.toArray","luxe/structural/BalancedBST.hx",211,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_206_toArray,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","toArray",0x63ac138d,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.toArray","luxe/structural/BalancedBST.hx",206,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_224_keys,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","keys",0x0000dd25,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.keys","luxe/structural/BalancedBST.hx",224,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_219_keys,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","keys",0x0000dd25,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.keys","luxe/structural/BalancedBST.hx",219,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_235_iterator,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","iterator",0x8750319f,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.iterator","luxe/structural/BalancedBST.hx",235,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_242_traverse_node,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","traverse_node",0xc8c1599e,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.traverse_node","luxe/structural/BalancedBST.hx",242,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_272_get_empty,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","get_empty",0xfef86a13,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.get_empty","luxe/structural/BalancedBST.hx",272,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_277_node_depth,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_depth",0x642da5b7,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_depth","luxe/structural/BalancedBST.hx",277,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_295_node_count,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_count",0xd766f983,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_count","luxe/structural/BalancedBST.hx",295,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_300_node_insert,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_insert",0x7417ac05,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_insert","luxe/structural/BalancedBST.hx",300,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_343_node_update_count,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_update_count",0x2a8cc8a5,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_update_count","luxe/structural/BalancedBST.hx",343,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_352_node_find,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_find",0x534a2e05,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_find","luxe/structural/BalancedBST.hx",352,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_371_node_rank,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_rank",0x5b32ab78,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_rank","luxe/structural/BalancedBST.hx",371,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_390_node_select,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_select",0x406d83c8,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_select","luxe/structural/BalancedBST.hx",390,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_409_node_smallest,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_smallest",0x4e20c1ab,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_smallest","luxe/structural/BalancedBST.hx",409,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_422_node_largest,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_largest",0xd89d86d0,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_largest","luxe/structural/BalancedBST.hx",422,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_431_node_floor,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_floor",0x8f9a8680,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_floor","luxe/structural/BalancedBST.hx",431,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_456_node_ceil,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_ceil",0x514b7cd1,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_ceil","luxe/structural/BalancedBST.hx",456,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_485_node_remove_smallest,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_remove_smallest",0x9b535e2e,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_remove_smallest","luxe/structural/BalancedBST.hx",485,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_503_node_remove_largest,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_remove_largest",0x315b2bad,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_remove_largest","luxe/structural/BalancedBST.hx",503,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_525_node_remove,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","node_remove",0xdac30510,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.node_remove","luxe/structural/BalancedBST.hx",525,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_572_is_red,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","is_red",0xd983a0ad,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.is_red","luxe/structural/BalancedBST.hx",572,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_582_rotate_left,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","rotate_left",0xea10309a,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.rotate_left","luxe/structural/BalancedBST.hx",582,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_601_rotate_right,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","rotate_right",0x5b2763e9,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.rotate_right","luxe/structural/BalancedBST.hx",601,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_620_swap_color,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","swap_color",0x4e348968,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.swap_color","luxe/structural/BalancedBST.hx",620,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_628_move_red_left,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","move_red_left",0x490225d2,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.move_red_left","luxe/structural/BalancedBST.hx",628,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_640_move_red_right,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","move_red_right",0x0febffb1,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.move_red_right","luxe/structural/BalancedBST.hx",640,0xa0b365fc)
HX_LOCAL_STACK_FRAME(_hx_pos_236e7615e83a66d2_651_balance,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","balance",0x9525f68b,"luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.balance","luxe/structural/BalancedBST.hx",651,0xa0b365fc)
namespace luxe{
namespace structural{

void BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__construct( ::Dynamic compare_function){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_32_new)
HXDLIN(  32)		this->compare = compare_function;
            	}

Dynamic BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__CreateEmpty() { return new BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj; }

void *BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::_hx_vtable = 0;

Dynamic BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj > _hx_result = new BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x046b4e9b;
}

int BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::size(){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_41_size)
HXDLIN(  41)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node = this->root;
HXDLIN(  41)		if (hx::IsNull( _node )) {
HXDLIN(  41)			return (int)0;
            		}
            		else {
HXDLIN(  41)			return _node->nodecount;
            		}
HXDLIN(  41)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,size,return )

int BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::depth(){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_48_depth)
HXDLIN(  48)		return this->node_depth(this->root);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,depth,return )

void BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::insert( ::phoenix::geometry::GeometryKey _key, ::phoenix::geometry::Geometry _value){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_53_insert)
HXLINE(  55)		this->root = this->node_insert(this->root,_key,_value);
HXLINE(  56)		this->root->color = false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,insert,(void))

bool BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::contains( ::phoenix::geometry::GeometryKey _key){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_64_contains)
HXDLIN(  64)		return hx::IsNotNull( this->find(_key) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,contains,return )

 ::phoenix::geometry::Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::find( ::phoenix::geometry::GeometryKey _key){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_71_find)
HXDLIN(  71)		return this->node_find(this->root,_key);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,find,return )

int BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::rank( ::phoenix::geometry::GeometryKey _key){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_79_rank)
HXDLIN(  79)		return this->node_rank(_key,this->root);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,rank,return )

 ::phoenix::geometry::GeometryKey BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::select(int _rank){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_85_select)
HXLINE(  87)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node = this->node_select(this->root,_rank);
HXLINE(  89)		if (hx::IsNotNull( _node )) {
HXLINE(  90)			return _node->key;
            		}
            		else {
HXLINE(  92)			return null();
            		}
HXLINE(  89)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,select,return )

 ::phoenix::geometry::GeometryKey BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::smallest(){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_98_smallest)
HXLINE( 100)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node = this->node_smallest(this->root);
HXLINE( 102)		if (hx::IsNotNull( _node )) {
HXLINE( 103)			return _node->key;
            		}
            		else {
HXLINE( 105)			return null();
            		}
HXLINE( 102)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,smallest,return )

 ::phoenix::geometry::GeometryKey BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::largest(){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_111_largest)
HXLINE( 113)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node = this->node_largest(this->root);
HXLINE( 115)		if (hx::IsNotNull( _node )) {
HXLINE( 116)			return _node->key;
            		}
            		else {
HXLINE( 118)			return null();
            		}
HXLINE( 115)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,largest,return )

bool BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::remove( ::phoenix::geometry::GeometryKey _key){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_124_remove)
HXLINE( 126)		bool _hx_tmp;
HXDLIN( 126)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node = this->root->left;
HXDLIN( 126)		bool _hx_tmp1;
HXDLIN( 126)		if (hx::IsNull( _node )) {
HXLINE( 126)			_hx_tmp1 = false;
            		}
            		else {
HXLINE( 126)			_hx_tmp1 = (_node->color == true);
            		}
HXDLIN( 126)		if (!(_hx_tmp1)) {
HXLINE( 126)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = this->root->right;
HXDLIN( 126)			bool _hx_tmp2;
HXDLIN( 126)			if (hx::IsNull( _node1 )) {
HXLINE( 126)				_hx_tmp2 = false;
            			}
            			else {
HXLINE( 126)				_hx_tmp2 = (_node1->color == true);
            			}
HXDLIN( 126)			_hx_tmp = !(_hx_tmp2);
            		}
            		else {
HXLINE( 126)			_hx_tmp = false;
            		}
HXDLIN( 126)		if (_hx_tmp) {
HXLINE( 127)			this->root->color = true;
            		}
HXLINE( 130)		if (!(this->contains(_key))) {
HXLINE( 131)			return false;
            		}
HXLINE( 134)		this->root = this->node_remove(this->root,_key);
HXLINE( 136)		if (hx::IsNotNull( this->root )) {
HXLINE( 137)			this->root->color = false;
            		}
HXLINE( 140)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,remove,return )

bool BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::remove_smallest(){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_145_remove_smallest)
HXLINE( 147)		bool _hx_tmp;
HXDLIN( 147)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node = this->root->left;
HXDLIN( 147)		bool _hx_tmp1;
HXDLIN( 147)		if (hx::IsNull( _node )) {
HXLINE( 147)			_hx_tmp1 = false;
            		}
            		else {
HXLINE( 147)			_hx_tmp1 = (_node->color == true);
            		}
HXDLIN( 147)		if (!(_hx_tmp1)) {
HXLINE( 147)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = this->root->right;
HXDLIN( 147)			bool _hx_tmp2;
HXDLIN( 147)			if (hx::IsNull( _node1 )) {
HXLINE( 147)				_hx_tmp2 = false;
            			}
            			else {
HXLINE( 147)				_hx_tmp2 = (_node1->color == true);
            			}
HXDLIN( 147)			_hx_tmp = !(_hx_tmp2);
            		}
            		else {
HXLINE( 147)			_hx_tmp = false;
            		}
HXDLIN( 147)		if (_hx_tmp) {
HXLINE( 148)			this->root->color = true;
            		}
HXLINE( 151)		this->root = this->node_remove_smallest(this->root);
HXLINE( 153)		if (hx::IsNotNull( this->root )) {
HXLINE( 154)			this->root->color = false;
            		}
HXLINE( 157)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,remove_smallest,return )

bool BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::remove_largest(){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_162_remove_largest)
HXLINE( 165)		bool _hx_tmp;
HXDLIN( 165)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node = this->root->left;
HXDLIN( 165)		bool _hx_tmp1;
HXDLIN( 165)		if (hx::IsNull( _node )) {
HXLINE( 165)			_hx_tmp1 = false;
            		}
            		else {
HXLINE( 165)			_hx_tmp1 = (_node->color == true);
            		}
HXDLIN( 165)		if (!(_hx_tmp1)) {
HXLINE( 165)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = this->root->right;
HXDLIN( 165)			bool _hx_tmp2;
HXDLIN( 165)			if (hx::IsNull( _node1 )) {
HXLINE( 165)				_hx_tmp2 = false;
            			}
            			else {
HXLINE( 165)				_hx_tmp2 = (_node1->color == true);
            			}
HXDLIN( 165)			_hx_tmp = !(_hx_tmp2);
            		}
            		else {
HXLINE( 165)			_hx_tmp = false;
            		}
HXDLIN( 165)		if (_hx_tmp) {
HXLINE( 166)			this->root->color = true;
            		}
HXLINE( 169)		this->root = this->node_remove_largest(this->root);
HXLINE( 171)		if (hx::IsNotNull( this->root )) {
HXLINE( 172)			this->root->color = false;
            		}
HXLINE( 175)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,remove_largest,return )

 ::phoenix::geometry::GeometryKey BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::floor( ::phoenix::geometry::GeometryKey _key){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_180_floor)
HXLINE( 182)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node = this->node_floor(this->root,_key);
HXLINE( 184)		if (hx::IsNull( _node )) {
HXLINE( 185)			return null();
            		}
HXLINE( 188)		return _node->key;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,floor,return )

 ::phoenix::geometry::GeometryKey BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::ceil( ::phoenix::geometry::GeometryKey _key){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_193_ceil)
HXLINE( 195)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node = this->node_ceil(this->root,_key);
HXLINE( 197)		if (hx::IsNull( _node )) {
HXLINE( 198)			return null();
            		}
HXLINE( 201)		return _node->key;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,ceil,return )

::Array< ::Dynamic> BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::toArray(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,a) HXARGC(1)
            		void _hx_run( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            			HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_211_toArray)
HXLINE( 211)			a->push(_node->value);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_206_toArray)
HXLINE( 208)		::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 210)		this->traverse_node(this->root,::luxe::structural::BalancedBSTTraverseMethod_obj::order_retain_dyn(), ::Dynamic(new _hx_Closure_0(a)));
HXLINE( 214)		return a;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,toArray,return )

::Array< ::Dynamic> BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::keys(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,a) HXARGC(1)
            		void _hx_run( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            			HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_224_keys)
HXLINE( 224)			a->push(_node->key);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_219_keys)
HXLINE( 221)		::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 223)		this->traverse_node(this->root,::luxe::structural::BalancedBSTTraverseMethod_obj::order_retain_dyn(), ::Dynamic(new _hx_Closure_0(a)));
HXLINE( 227)		return a;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,keys,return )

 ::luxe::structural::BalancedBSTIterator_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::iterator(){
            	HX_GC_STACKFRAME(&_hx_pos_236e7615e83a66d2_235_iterator)
HXDLIN( 235)		return  ::luxe::structural::BalancedBSTIterator_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,iterator,return )

void BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::traverse_node( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node, ::luxe::structural::BalancedBSTTraverseMethod _method, ::Dynamic _on_traverse){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_242_traverse_node)
HXDLIN( 242)		if (hx::IsNotNull( _node )) {
HXLINE( 244)			switch((int)(_hx_getEnumValueIndex(_method))){
            				case (int)0: {
HXLINE( 247)					_on_traverse(_node);
HXLINE( 248)					this->traverse_node(_node->left,_method,_on_traverse);
HXLINE( 249)					this->traverse_node(_node->right,_method,_on_traverse);
            				}
            				break;
            				case (int)1: {
HXLINE( 252)					this->traverse_node(_node->left,_method,_on_traverse);
HXLINE( 253)					_on_traverse(_node);
HXLINE( 254)					this->traverse_node(_node->right,_method,_on_traverse);
            				}
            				break;
            				case (int)2: {
HXLINE( 257)					this->traverse_node(_node->left,_method,_on_traverse);
HXLINE( 258)					this->traverse_node(_node->right,_method,_on_traverse);
HXLINE( 259)					_on_traverse(_node);
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,traverse_node,(void))

bool BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::get_empty(){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_272_get_empty)
HXDLIN( 272)		return hx::IsNull( this->root );
            	}


HX_DEFINE_DYNAMIC_FUNC0(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,get_empty,return )

int BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_depth( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_277_node_depth)
HXLINE( 279)		if (hx::IsNull( _node )) {
HXLINE( 280)			return (int)0;
            		}
HXLINE( 284)		int _n_depth = this->node_depth(_node->left);
HXLINE( 283)		Float _n_depth1 = ::Math_obj::max(_n_depth,this->node_depth(_node->right));
HXLINE( 288)		return ((int)1 + ::Std_obj::_hx_int(_n_depth1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_depth,return )

int BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_count( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_295_node_count)
HXDLIN( 295)		if (hx::IsNull( _node )) {
HXDLIN( 295)			return (int)0;
            		}
            		else {
HXDLIN( 295)			return _node->nodecount;
            		}
HXDLIN( 295)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_count,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_insert( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node, ::phoenix::geometry::GeometryKey _key, ::phoenix::geometry::Geometry _value){
            	HX_GC_STACKFRAME(&_hx_pos_236e7615e83a66d2_300_node_insert)
HXLINE( 302)		if (hx::IsNull( _node )) {
HXLINE( 304)			return  ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__alloc( HX_CTX ,_key,_value,(int)1,true);
            		}
HXLINE( 308)		int comparison = ( (int)(this->compare(_key,_node->key)) );
HXLINE( 310)		if ((comparison < (int)0)) {
HXLINE( 312)			_node->left = this->node_insert(_node->left,_key,_value);
            		}
            		else {
HXLINE( 314)			if ((comparison > (int)0)) {
HXLINE( 316)				_node->right = this->node_insert(_node->right,_key,_value);
            			}
            			else {
HXLINE( 320)				_node->value = _value;
            			}
            		}
HXLINE( 324)		bool _hx_tmp;
HXDLIN( 324)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = _node->right;
HXDLIN( 324)		bool _hx_tmp1;
HXDLIN( 324)		if (hx::IsNull( _node1 )) {
HXLINE( 324)			_hx_tmp1 = false;
            		}
            		else {
HXLINE( 324)			_hx_tmp1 = (_node1->color == true);
            		}
HXDLIN( 324)		if (_hx_tmp1) {
HXLINE( 324)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node2 = _node->left;
HXDLIN( 324)			bool _hx_tmp2;
HXDLIN( 324)			if (hx::IsNull( _node2 )) {
HXLINE( 324)				_hx_tmp2 = false;
            			}
            			else {
HXLINE( 324)				_hx_tmp2 = (_node2->color == true);
            			}
HXDLIN( 324)			_hx_tmp = !(_hx_tmp2);
            		}
            		else {
HXLINE( 324)			_hx_tmp = false;
            		}
HXDLIN( 324)		if (_hx_tmp) {
HXLINE( 325)			_node = this->rotate_left(_node);
            		}
HXLINE( 328)		bool _hx_tmp3;
HXDLIN( 328)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node3 = _node->left;
HXDLIN( 328)		bool _hx_tmp4;
HXDLIN( 328)		if (hx::IsNull( _node3 )) {
HXLINE( 328)			_hx_tmp4 = false;
            		}
            		else {
HXLINE( 328)			_hx_tmp4 = (_node3->color == true);
            		}
HXDLIN( 328)		if (_hx_tmp4) {
HXLINE( 328)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node4 = _node->left->left;
HXDLIN( 328)			if (hx::IsNull( _node4 )) {
HXLINE( 328)				_hx_tmp3 = false;
            			}
            			else {
HXLINE( 328)				_hx_tmp3 = (_node4->color == true);
            			}
            		}
            		else {
HXLINE( 328)			_hx_tmp3 = false;
            		}
HXDLIN( 328)		if (_hx_tmp3) {
HXLINE( 329)			_node = this->rotate_right(_node);
            		}
HXLINE( 332)		bool _hx_tmp5;
HXDLIN( 332)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node5 = _node->left;
HXDLIN( 332)		bool _hx_tmp6;
HXDLIN( 332)		if (hx::IsNull( _node5 )) {
HXLINE( 332)			_hx_tmp6 = false;
            		}
            		else {
HXLINE( 332)			_hx_tmp6 = (_node5->color == true);
            		}
HXDLIN( 332)		if (_hx_tmp6) {
HXLINE( 332)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node6 = _node->right;
HXDLIN( 332)			if (hx::IsNull( _node6 )) {
HXLINE( 332)				_hx_tmp5 = false;
            			}
            			else {
HXLINE( 332)				_hx_tmp5 = (_node6->color == true);
            			}
            		}
            		else {
HXLINE( 332)			_hx_tmp5 = false;
            		}
HXDLIN( 332)		if (_hx_tmp5) {
HXLINE( 333)			this->swap_color(_node);
            		}
HXLINE( 336)		{
HXLINE( 336)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node7 = _node->left;
HXDLIN( 336)			int _hx_tmp7;
HXDLIN( 336)			if (hx::IsNull( _node7 )) {
HXLINE( 336)				_hx_tmp7 = (int)0;
            			}
            			else {
HXLINE( 336)				_hx_tmp7 = _node7->nodecount;
            			}
HXDLIN( 336)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node8 = _node->right;
HXDLIN( 336)			int _hx_tmp8;
HXDLIN( 336)			if (hx::IsNull( _node8 )) {
HXLINE( 336)				_hx_tmp8 = (int)0;
            			}
            			else {
HXLINE( 336)				_hx_tmp8 = _node8->nodecount;
            			}
HXDLIN( 336)			_node->nodecount = ((_hx_tmp7 + _hx_tmp8) + (int)1);
            		}
HXLINE( 338)		return _node;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_insert,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_update_count( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_343_node_update_count)
HXLINE( 345)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = _node->left;
HXDLIN( 345)		int _hx_tmp;
HXDLIN( 345)		if (hx::IsNull( _node1 )) {
HXLINE( 345)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 345)			_hx_tmp = _node1->nodecount;
            		}
HXDLIN( 345)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node2 = _node->right;
HXDLIN( 345)		int _hx_tmp1;
HXDLIN( 345)		if (hx::IsNull( _node2 )) {
HXLINE( 345)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE( 345)			_hx_tmp1 = _node2->nodecount;
            		}
HXDLIN( 345)		_node->nodecount = ((_hx_tmp + _hx_tmp1) + (int)1);
HXLINE( 347)		return _node;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_update_count,return )

 ::phoenix::geometry::Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_find( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node, ::phoenix::geometry::GeometryKey _key){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_352_node_find)
HXLINE( 354)		if (hx::IsNull( _node )) {
HXLINE( 355)			return null();
            		}
HXLINE( 358)		int comparison = ( (int)(this->compare(_key,_node->key)) );
HXLINE( 360)		if ((comparison < (int)0)) {
HXLINE( 361)			return this->node_find(_node->left,_key);
            		}
            		else {
HXLINE( 362)			if ((comparison > (int)0)) {
HXLINE( 363)				return this->node_find(_node->right,_key);
            			}
            			else {
HXLINE( 365)				return _node->value;
            			}
            		}
HXLINE( 360)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_find,return )

int BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_rank( ::phoenix::geometry::GeometryKey _key, ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_371_node_rank)
HXLINE( 373)		if (hx::IsNull( _node )) {
HXLINE( 374)			return (int)0;
            		}
HXLINE( 377)		int comparison = ( (int)(this->compare(_key,_node->key)) );
HXLINE( 379)		if ((comparison < (int)0)) {
HXLINE( 380)			return this->node_rank(_key,_node->left);
            		}
            		else {
HXLINE( 381)			if ((comparison > (int)0)) {
HXLINE( 382)				 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = _node->left;
HXDLIN( 382)				int _hx_tmp;
HXDLIN( 382)				if (hx::IsNull( _node1 )) {
HXLINE( 382)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE( 382)					_hx_tmp = _node1->nodecount;
            				}
HXDLIN( 382)				int _hx_tmp1 = ((int)1 + _hx_tmp);
HXDLIN( 382)				return (_hx_tmp1 + this->node_rank(_key,_node->right));
            			}
            			else {
HXLINE( 384)				 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node2 = _node->left;
HXDLIN( 384)				if (hx::IsNull( _node2 )) {
HXLINE( 384)					return (int)0;
            				}
            				else {
HXLINE( 384)					return _node2->nodecount;
            				}
            			}
            		}
HXLINE( 379)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_rank,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_select( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node,int _rank){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_390_node_select)
HXLINE( 392)		if (hx::IsNull( _node )) {
HXLINE( 393)			return null();
            		}
HXLINE( 396)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = _node->left;
HXDLIN( 396)		int _r;
HXDLIN( 396)		if (hx::IsNull( _node1 )) {
HXLINE( 396)			_r = (int)0;
            		}
            		else {
HXLINE( 396)			_r = _node1->nodecount;
            		}
HXLINE( 398)		if ((_r > _rank)) {
HXLINE( 399)			return this->node_select(_node->left,_rank);
            		}
            		else {
HXLINE( 400)			if ((_r < _rank)) {
HXLINE( 401)				 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node2 = _node->right;
HXDLIN( 401)				return this->node_select(_node2,((_rank - _r) - (int)1));
            			}
            			else {
HXLINE( 403)				return _node;
            			}
            		}
HXLINE( 398)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_select,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_smallest( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_409_node_smallest)
HXLINE( 411)		if (hx::IsNull( _node->left )) {
HXLINE( 412)			return _node;
            		}
HXLINE( 415)		return this->node_smallest(_node->left);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_smallest,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_largest( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_422_node_largest)
HXDLIN( 422)		if (hx::IsNull( _node->right )) {
HXLINE( 423)			return _node;
            		}
            		else {
HXLINE( 425)			return this->node_largest(_node->right);
            		}
HXLINE( 422)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_largest,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_floor( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node, ::phoenix::geometry::GeometryKey _key){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_431_node_floor)
HXLINE( 433)		if (hx::IsNull( _node )) {
HXLINE( 434)			return null();
            		}
HXLINE( 437)		int comparison = ( (int)(this->compare(_key,_node->key)) );
HXLINE( 439)		if ((comparison == (int)0)) {
HXLINE( 440)			return _node;
            		}
            		else {
HXLINE( 441)			if ((comparison < (int)0)) {
HXLINE( 442)				return this->node_floor(_node->left,_key);
            			}
            		}
HXLINE( 445)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _n = this->node_floor(_node->right,_key);
HXLINE( 447)		if (hx::IsNotNull( _n )) {
HXLINE( 448)			return _n;
            		}
            		else {
HXLINE( 450)			return _node;
            		}
HXLINE( 447)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_floor,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_ceil( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node, ::phoenix::geometry::GeometryKey _key){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_456_node_ceil)
HXLINE( 458)		if (hx::IsNull( _node )) {
HXLINE( 459)			return null();
            		}
HXLINE( 462)		int comparison = ( (int)(this->compare(_key,_node->key)) );
HXLINE( 464)		if ((comparison == (int)0)) {
HXLINE( 466)			return _node;
            		}
            		else {
HXLINE( 468)			if ((comparison < (int)0)) {
HXLINE( 470)				 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _n = this->node_ceil(_node->left,_key);
HXLINE( 472)				if (hx::IsNotNull( _n )) {
HXLINE( 473)					return _n;
            				}
            				else {
HXLINE( 475)					return _node;
            				}
            			}
            		}
HXLINE( 480)		return this->node_ceil(_node->right,_key);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_ceil,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_remove_smallest( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_485_node_remove_smallest)
HXLINE( 487)		if (hx::IsNull( _node->left )) {
HXLINE( 488)			return null();
            		}
HXLINE( 491)		bool _hx_tmp;
HXDLIN( 491)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = _node->left;
HXDLIN( 491)		bool _hx_tmp1;
HXDLIN( 491)		if (hx::IsNull( _node1 )) {
HXLINE( 491)			_hx_tmp1 = false;
            		}
            		else {
HXLINE( 491)			_hx_tmp1 = (_node1->color == true);
            		}
HXDLIN( 491)		if (!(_hx_tmp1)) {
HXLINE( 491)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node2 = _node->left->left;
HXDLIN( 491)			bool _hx_tmp2;
HXDLIN( 491)			if (hx::IsNull( _node2 )) {
HXLINE( 491)				_hx_tmp2 = false;
            			}
            			else {
HXLINE( 491)				_hx_tmp2 = (_node2->color == true);
            			}
HXDLIN( 491)			_hx_tmp = !(_hx_tmp2);
            		}
            		else {
HXLINE( 491)			_hx_tmp = false;
            		}
HXDLIN( 491)		if (_hx_tmp) {
HXLINE( 492)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node3 = _node;
HXDLIN( 492)			this->swap_color(_node3);
HXDLIN( 492)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node4 = _node3->right->left;
HXDLIN( 492)			bool _node5;
HXDLIN( 492)			if (hx::IsNull( _node4 )) {
HXLINE( 492)				_node5 = false;
            			}
            			else {
HXLINE( 492)				_node5 = (_node4->color == true);
            			}
HXDLIN( 492)			if (_node5) {
HXLINE( 492)				_node3->right = this->rotate_right(_node3->right);
HXDLIN( 492)				_node3 = this->rotate_left(_node3);
            			}
HXDLIN( 492)			_node = _node3;
            		}
HXLINE( 495)		_node->left = this->node_remove_smallest(_node->left);
HXLINE( 496)		{
HXLINE( 496)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node6 = _node->left;
HXDLIN( 496)			int _hx_tmp3;
HXDLIN( 496)			if (hx::IsNull( _node6 )) {
HXLINE( 496)				_hx_tmp3 = (int)0;
            			}
            			else {
HXLINE( 496)				_hx_tmp3 = _node6->nodecount;
            			}
HXDLIN( 496)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node7 = _node->right;
HXDLIN( 496)			int _hx_tmp4;
HXDLIN( 496)			if (hx::IsNull( _node7 )) {
HXLINE( 496)				_hx_tmp4 = (int)0;
            			}
            			else {
HXLINE( 496)				_hx_tmp4 = _node7->nodecount;
            			}
HXDLIN( 496)			_node->nodecount = ((_hx_tmp3 + _hx_tmp4) + (int)1);
            		}
HXLINE( 498)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node8 = _node;
HXDLIN( 498)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node9 = _node8->right;
HXDLIN( 498)		bool _hx_tmp5;
HXDLIN( 498)		if (hx::IsNull( _node9 )) {
HXLINE( 498)			_hx_tmp5 = false;
            		}
            		else {
HXLINE( 498)			_hx_tmp5 = (_node9->color == true);
            		}
HXDLIN( 498)		if (_hx_tmp5) {
HXLINE( 498)			_node8 = this->rotate_left(_node8);
            		}
HXDLIN( 498)		bool _hx_tmp6;
HXDLIN( 498)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node10 = _node8->left;
HXDLIN( 498)		bool _hx_tmp7;
HXDLIN( 498)		if (hx::IsNull( _node10 )) {
HXLINE( 498)			_hx_tmp7 = false;
            		}
            		else {
HXLINE( 498)			_hx_tmp7 = (_node10->color == true);
            		}
HXDLIN( 498)		if (_hx_tmp7) {
HXLINE( 498)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node11 = _node8->left->left;
HXDLIN( 498)			if (hx::IsNull( _node11 )) {
HXLINE( 498)				_hx_tmp6 = false;
            			}
            			else {
HXLINE( 498)				_hx_tmp6 = (_node11->color == true);
            			}
            		}
            		else {
HXLINE( 498)			_hx_tmp6 = false;
            		}
HXDLIN( 498)		if (_hx_tmp6) {
HXLINE( 498)			_node8 = this->rotate_right(_node8);
            		}
HXDLIN( 498)		bool _hx_tmp8;
HXDLIN( 498)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node12 = _node8->left;
HXDLIN( 498)		bool _hx_tmp9;
HXDLIN( 498)		if (hx::IsNull( _node12 )) {
HXLINE( 498)			_hx_tmp9 = false;
            		}
            		else {
HXLINE( 498)			_hx_tmp9 = (_node12->color == true);
            		}
HXDLIN( 498)		if (_hx_tmp9) {
HXLINE( 498)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node13 = _node8->right;
HXDLIN( 498)			if (hx::IsNull( _node13 )) {
HXLINE( 498)				_hx_tmp8 = false;
            			}
            			else {
HXLINE( 498)				_hx_tmp8 = (_node13->color == true);
            			}
            		}
            		else {
HXLINE( 498)			_hx_tmp8 = false;
            		}
HXDLIN( 498)		if (_hx_tmp8) {
HXLINE( 498)			this->swap_color(_node8);
            		}
HXDLIN( 498)		{
HXLINE( 498)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node14 = _node8->left;
HXDLIN( 498)			int _hx_tmp10;
HXDLIN( 498)			if (hx::IsNull( _node14 )) {
HXLINE( 498)				_hx_tmp10 = (int)0;
            			}
            			else {
HXLINE( 498)				_hx_tmp10 = _node14->nodecount;
            			}
HXDLIN( 498)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node15 = _node8->right;
HXDLIN( 498)			int _hx_tmp11;
HXDLIN( 498)			if (hx::IsNull( _node15 )) {
HXLINE( 498)				_hx_tmp11 = (int)0;
            			}
            			else {
HXLINE( 498)				_hx_tmp11 = _node15->nodecount;
            			}
HXDLIN( 498)			_node8->nodecount = ((_hx_tmp10 + _hx_tmp11) + (int)1);
            		}
HXDLIN( 498)		return _node8;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_remove_smallest,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_remove_largest( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_503_node_remove_largest)
HXLINE( 505)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = _node->left;
HXDLIN( 505)		bool _hx_tmp;
HXDLIN( 505)		if (hx::IsNull( _node1 )) {
HXLINE( 505)			_hx_tmp = false;
            		}
            		else {
HXLINE( 505)			_hx_tmp = (_node1->color == true);
            		}
HXDLIN( 505)		if (_hx_tmp) {
HXLINE( 506)			_node = this->rotate_right(_node);
            		}
HXLINE( 509)		if (hx::IsNull( _node->right )) {
HXLINE( 510)			return null();
            		}
HXLINE( 513)		bool _hx_tmp1;
HXDLIN( 513)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node2 = _node->right;
HXDLIN( 513)		bool _hx_tmp2;
HXDLIN( 513)		if (hx::IsNull( _node2 )) {
HXLINE( 513)			_hx_tmp2 = false;
            		}
            		else {
HXLINE( 513)			_hx_tmp2 = (_node2->color == true);
            		}
HXDLIN( 513)		if (!(_hx_tmp2)) {
HXLINE( 513)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node3 = _node->right->left;
HXDLIN( 513)			bool _hx_tmp3;
HXDLIN( 513)			if (hx::IsNull( _node3 )) {
HXLINE( 513)				_hx_tmp3 = false;
            			}
            			else {
HXLINE( 513)				_hx_tmp3 = (_node3->color == true);
            			}
HXDLIN( 513)			_hx_tmp1 = !(_hx_tmp3);
            		}
            		else {
HXLINE( 513)			_hx_tmp1 = false;
            		}
HXDLIN( 513)		if (_hx_tmp1) {
HXLINE( 514)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node4 = _node;
HXDLIN( 514)			this->swap_color(_node4);
HXDLIN( 514)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node5 = _node4->left->left;
HXDLIN( 514)			bool _node6;
HXDLIN( 514)			if (hx::IsNull( _node5 )) {
HXLINE( 514)				_node6 = false;
            			}
            			else {
HXLINE( 514)				_node6 = (_node5->color == true);
            			}
HXDLIN( 514)			if (_node6) {
HXLINE( 514)				_node4 = this->rotate_right(_node4);
            			}
HXDLIN( 514)			_node = _node4;
            		}
HXLINE( 517)		_node->right = this->node_remove_largest(_node->right);
HXLINE( 518)		{
HXLINE( 518)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node7 = _node->left;
HXDLIN( 518)			int _hx_tmp4;
HXDLIN( 518)			if (hx::IsNull( _node7 )) {
HXLINE( 518)				_hx_tmp4 = (int)0;
            			}
            			else {
HXLINE( 518)				_hx_tmp4 = _node7->nodecount;
            			}
HXDLIN( 518)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node8 = _node->right;
HXDLIN( 518)			int _hx_tmp5;
HXDLIN( 518)			if (hx::IsNull( _node8 )) {
HXLINE( 518)				_hx_tmp5 = (int)0;
            			}
            			else {
HXLINE( 518)				_hx_tmp5 = _node8->nodecount;
            			}
HXDLIN( 518)			_node->nodecount = ((_hx_tmp4 + _hx_tmp5) + (int)1);
            		}
HXLINE( 520)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node9 = _node;
HXDLIN( 520)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node10 = _node9->right;
HXDLIN( 520)		bool _hx_tmp6;
HXDLIN( 520)		if (hx::IsNull( _node10 )) {
HXLINE( 520)			_hx_tmp6 = false;
            		}
            		else {
HXLINE( 520)			_hx_tmp6 = (_node10->color == true);
            		}
HXDLIN( 520)		if (_hx_tmp6) {
HXLINE( 520)			_node9 = this->rotate_left(_node9);
            		}
HXDLIN( 520)		bool _hx_tmp7;
HXDLIN( 520)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node11 = _node9->left;
HXDLIN( 520)		bool _hx_tmp8;
HXDLIN( 520)		if (hx::IsNull( _node11 )) {
HXLINE( 520)			_hx_tmp8 = false;
            		}
            		else {
HXLINE( 520)			_hx_tmp8 = (_node11->color == true);
            		}
HXDLIN( 520)		if (_hx_tmp8) {
HXLINE( 520)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node12 = _node9->left->left;
HXDLIN( 520)			if (hx::IsNull( _node12 )) {
HXLINE( 520)				_hx_tmp7 = false;
            			}
            			else {
HXLINE( 520)				_hx_tmp7 = (_node12->color == true);
            			}
            		}
            		else {
HXLINE( 520)			_hx_tmp7 = false;
            		}
HXDLIN( 520)		if (_hx_tmp7) {
HXLINE( 520)			_node9 = this->rotate_right(_node9);
            		}
HXDLIN( 520)		bool _hx_tmp9;
HXDLIN( 520)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node13 = _node9->left;
HXDLIN( 520)		bool _hx_tmp10;
HXDLIN( 520)		if (hx::IsNull( _node13 )) {
HXLINE( 520)			_hx_tmp10 = false;
            		}
            		else {
HXLINE( 520)			_hx_tmp10 = (_node13->color == true);
            		}
HXDLIN( 520)		if (_hx_tmp10) {
HXLINE( 520)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node14 = _node9->right;
HXDLIN( 520)			if (hx::IsNull( _node14 )) {
HXLINE( 520)				_hx_tmp9 = false;
            			}
            			else {
HXLINE( 520)				_hx_tmp9 = (_node14->color == true);
            			}
            		}
            		else {
HXLINE( 520)			_hx_tmp9 = false;
            		}
HXDLIN( 520)		if (_hx_tmp9) {
HXLINE( 520)			this->swap_color(_node9);
            		}
HXDLIN( 520)		{
HXLINE( 520)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node15 = _node9->left;
HXDLIN( 520)			int _hx_tmp11;
HXDLIN( 520)			if (hx::IsNull( _node15 )) {
HXLINE( 520)				_hx_tmp11 = (int)0;
            			}
            			else {
HXLINE( 520)				_hx_tmp11 = _node15->nodecount;
            			}
HXDLIN( 520)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node16 = _node9->right;
HXDLIN( 520)			int _hx_tmp12;
HXDLIN( 520)			if (hx::IsNull( _node16 )) {
HXLINE( 520)				_hx_tmp12 = (int)0;
            			}
            			else {
HXLINE( 520)				_hx_tmp12 = _node16->nodecount;
            			}
HXDLIN( 520)			_node9->nodecount = ((_hx_tmp11 + _hx_tmp12) + (int)1);
            		}
HXDLIN( 520)		return _node9;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_remove_largest,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::node_remove( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node, ::phoenix::geometry::GeometryKey _key){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_525_node_remove)
HXLINE( 527)		int comparison = ( (int)(this->compare(_key,_node->key)) );
HXLINE( 529)		if ((comparison < (int)0)) {
HXLINE( 531)			bool _hx_tmp;
HXDLIN( 531)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = _node->left;
HXDLIN( 531)			bool _hx_tmp1;
HXDLIN( 531)			if (hx::IsNull( _node1 )) {
HXLINE( 531)				_hx_tmp1 = false;
            			}
            			else {
HXLINE( 531)				_hx_tmp1 = (_node1->color == true);
            			}
HXDLIN( 531)			if (!(_hx_tmp1)) {
HXLINE( 531)				 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node2 = _node->left->left;
HXDLIN( 531)				bool _hx_tmp2;
HXDLIN( 531)				if (hx::IsNull( _node2 )) {
HXLINE( 531)					_hx_tmp2 = false;
            				}
            				else {
HXLINE( 531)					_hx_tmp2 = (_node2->color == true);
            				}
HXDLIN( 531)				_hx_tmp = !(_hx_tmp2);
            			}
            			else {
HXLINE( 531)				_hx_tmp = false;
            			}
HXDLIN( 531)			if (_hx_tmp) {
HXLINE( 532)				 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node3 = _node;
HXDLIN( 532)				this->swap_color(_node3);
HXDLIN( 532)				 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node4 = _node3->right->left;
HXDLIN( 532)				bool _node5;
HXDLIN( 532)				if (hx::IsNull( _node4 )) {
HXLINE( 532)					_node5 = false;
            				}
            				else {
HXLINE( 532)					_node5 = (_node4->color == true);
            				}
HXDLIN( 532)				if (_node5) {
HXLINE( 532)					_node3->right = this->rotate_right(_node3->right);
HXDLIN( 532)					_node3 = this->rotate_left(_node3);
            				}
HXDLIN( 532)				_node = _node3;
            			}
HXLINE( 535)			_node->left = this->node_remove(_node->left,_key);
            		}
            		else {
HXLINE( 539)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node6 = _node->left;
HXDLIN( 539)			bool _hx_tmp3;
HXDLIN( 539)			if (hx::IsNull( _node6 )) {
HXLINE( 539)				_hx_tmp3 = false;
            			}
            			else {
HXLINE( 539)				_hx_tmp3 = (_node6->color == true);
            			}
HXDLIN( 539)			if (_hx_tmp3) {
HXLINE( 540)				_node = this->rotate_right(_node);
            			}
HXLINE( 543)			int comparison1 = ( (int)(this->compare(_key,_node->key)) );
HXLINE( 545)			bool _hx_tmp4;
HXDLIN( 545)			if ((comparison1 == (int)0)) {
HXLINE( 545)				_hx_tmp4 = hx::IsNull( _node->right );
            			}
            			else {
HXLINE( 545)				_hx_tmp4 = false;
            			}
HXDLIN( 545)			if (_hx_tmp4) {
HXLINE( 546)				return null();
            			}
HXLINE( 549)			bool _hx_tmp5;
HXDLIN( 549)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node7 = _node->right;
HXDLIN( 549)			bool _hx_tmp6;
HXDLIN( 549)			if (hx::IsNull( _node7 )) {
HXLINE( 549)				_hx_tmp6 = false;
            			}
            			else {
HXLINE( 549)				_hx_tmp6 = (_node7->color == true);
            			}
HXDLIN( 549)			if (!(_hx_tmp6)) {
HXLINE( 549)				 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node8 = _node->right->left;
HXDLIN( 549)				bool _hx_tmp7;
HXDLIN( 549)				if (hx::IsNull( _node8 )) {
HXLINE( 549)					_hx_tmp7 = false;
            				}
            				else {
HXLINE( 549)					_hx_tmp7 = (_node8->color == true);
            				}
HXDLIN( 549)				_hx_tmp5 = !(_hx_tmp7);
            			}
            			else {
HXLINE( 549)				_hx_tmp5 = false;
            			}
HXDLIN( 549)			if (_hx_tmp5) {
HXLINE( 550)				 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node9 = _node;
HXDLIN( 550)				this->swap_color(_node9);
HXDLIN( 550)				 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node10 = _node9->left->left;
HXDLIN( 550)				bool _node11;
HXDLIN( 550)				if (hx::IsNull( _node10 )) {
HXLINE( 550)					_node11 = false;
            				}
            				else {
HXLINE( 550)					_node11 = (_node10->color == true);
            				}
HXDLIN( 550)				if (_node11) {
HXLINE( 550)					_node9 = this->rotate_right(_node9);
            				}
HXDLIN( 550)				_node = _node9;
            			}
HXLINE( 553)			int comparison2 = ( (int)(this->compare(_key,_node->key)) );
HXLINE( 554)			if ((comparison2 == (int)0)) {
HXLINE( 556)				 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _n = this->node_smallest(_node->right);
HXLINE( 557)				_node->key = _n->key;
HXLINE( 558)				_node->value = _n->value;
HXLINE( 560)				_node->right = this->node_remove_smallest(_node->right);
            			}
            			else {
HXLINE( 563)				_node->right = this->node_remove(_node->right,_key);
            			}
            		}
HXLINE( 568)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node12 = _node;
HXDLIN( 568)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node13 = _node12->right;
HXDLIN( 568)		bool _hx_tmp8;
HXDLIN( 568)		if (hx::IsNull( _node13 )) {
HXLINE( 568)			_hx_tmp8 = false;
            		}
            		else {
HXLINE( 568)			_hx_tmp8 = (_node13->color == true);
            		}
HXDLIN( 568)		if (_hx_tmp8) {
HXLINE( 568)			_node12 = this->rotate_left(_node12);
            		}
HXDLIN( 568)		bool _hx_tmp9;
HXDLIN( 568)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node14 = _node12->left;
HXDLIN( 568)		bool _hx_tmp10;
HXDLIN( 568)		if (hx::IsNull( _node14 )) {
HXLINE( 568)			_hx_tmp10 = false;
            		}
            		else {
HXLINE( 568)			_hx_tmp10 = (_node14->color == true);
            		}
HXDLIN( 568)		if (_hx_tmp10) {
HXLINE( 568)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node15 = _node12->left->left;
HXDLIN( 568)			if (hx::IsNull( _node15 )) {
HXLINE( 568)				_hx_tmp9 = false;
            			}
            			else {
HXLINE( 568)				_hx_tmp9 = (_node15->color == true);
            			}
            		}
            		else {
HXLINE( 568)			_hx_tmp9 = false;
            		}
HXDLIN( 568)		if (_hx_tmp9) {
HXLINE( 568)			_node12 = this->rotate_right(_node12);
            		}
HXDLIN( 568)		bool _hx_tmp11;
HXDLIN( 568)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node16 = _node12->left;
HXDLIN( 568)		bool _hx_tmp12;
HXDLIN( 568)		if (hx::IsNull( _node16 )) {
HXLINE( 568)			_hx_tmp12 = false;
            		}
            		else {
HXLINE( 568)			_hx_tmp12 = (_node16->color == true);
            		}
HXDLIN( 568)		if (_hx_tmp12) {
HXLINE( 568)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node17 = _node12->right;
HXDLIN( 568)			if (hx::IsNull( _node17 )) {
HXLINE( 568)				_hx_tmp11 = false;
            			}
            			else {
HXLINE( 568)				_hx_tmp11 = (_node17->color == true);
            			}
            		}
            		else {
HXLINE( 568)			_hx_tmp11 = false;
            		}
HXDLIN( 568)		if (_hx_tmp11) {
HXLINE( 568)			this->swap_color(_node12);
            		}
HXDLIN( 568)		{
HXLINE( 568)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node18 = _node12->left;
HXDLIN( 568)			int _hx_tmp13;
HXDLIN( 568)			if (hx::IsNull( _node18 )) {
HXLINE( 568)				_hx_tmp13 = (int)0;
            			}
            			else {
HXLINE( 568)				_hx_tmp13 = _node18->nodecount;
            			}
HXDLIN( 568)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node19 = _node12->right;
HXDLIN( 568)			int _hx_tmp14;
HXDLIN( 568)			if (hx::IsNull( _node19 )) {
HXLINE( 568)				_hx_tmp14 = (int)0;
            			}
            			else {
HXLINE( 568)				_hx_tmp14 = _node19->nodecount;
            			}
HXDLIN( 568)			_node12->nodecount = ((_hx_tmp13 + _hx_tmp14) + (int)1);
            		}
HXDLIN( 568)		return _node12;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,node_remove,return )

bool BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::is_red( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_572_is_red)
HXLINE( 574)		if (hx::IsNull( _node )) {
HXLINE( 575)			return false;
            		}
HXLINE( 578)		return (_node->color == true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,is_red,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::rotate_left( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_582_rotate_left)
HXLINE( 584)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _n = _node->right;
HXLINE( 587)		_n->color = _node->color;
HXLINE( 588)		_node->color = true;
HXLINE( 590)		_node->right = _n->left;
HXLINE( 591)		_n->left = _node;
HXLINE( 594)		_n->nodecount = _node->nodecount;
HXLINE( 595)		{
HXLINE( 595)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = _node->left;
HXDLIN( 595)			int _hx_tmp;
HXDLIN( 595)			if (hx::IsNull( _node1 )) {
HXLINE( 595)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 595)				_hx_tmp = _node1->nodecount;
            			}
HXDLIN( 595)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node2 = _node->right;
HXDLIN( 595)			int _hx_tmp1;
HXDLIN( 595)			if (hx::IsNull( _node2 )) {
HXLINE( 595)				_hx_tmp1 = (int)0;
            			}
            			else {
HXLINE( 595)				_hx_tmp1 = _node2->nodecount;
            			}
HXDLIN( 595)			_node->nodecount = ((_hx_tmp + _hx_tmp1) + (int)1);
            		}
HXLINE( 597)		return _n;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,rotate_left,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::rotate_right( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_601_rotate_right)
HXLINE( 603)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _n = _node->left;
HXLINE( 606)		_n->color = _node->color;
HXLINE( 607)		_node->color = true;
HXLINE( 609)		_node->left = _n->right;
HXLINE( 610)		_n->right = _node;
HXLINE( 613)		_n->nodecount = _node->nodecount;
HXLINE( 614)		{
HXLINE( 614)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = _node->left;
HXDLIN( 614)			int _hx_tmp;
HXDLIN( 614)			if (hx::IsNull( _node1 )) {
HXLINE( 614)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 614)				_hx_tmp = _node1->nodecount;
            			}
HXDLIN( 614)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node2 = _node->right;
HXDLIN( 614)			int _hx_tmp1;
HXDLIN( 614)			if (hx::IsNull( _node2 )) {
HXLINE( 614)				_hx_tmp1 = (int)0;
            			}
            			else {
HXLINE( 614)				_hx_tmp1 = _node2->nodecount;
            			}
HXDLIN( 614)			_node->nodecount = ((_hx_tmp + _hx_tmp1) + (int)1);
            		}
HXLINE( 616)		return _n;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,rotate_right,return )

void BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::swap_color( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_620_swap_color)
HXLINE( 622)		_node->color = !(_node->color);
HXLINE( 623)		_node->left->color = !(_node->left->color);
HXLINE( 624)		_node->right->color = !(_node->right->color);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,swap_color,(void))

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::move_red_left( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_628_move_red_left)
HXLINE( 630)		this->swap_color(_node);
HXLINE( 632)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = _node->right->left;
HXDLIN( 632)		bool _hx_tmp;
HXDLIN( 632)		if (hx::IsNull( _node1 )) {
HXLINE( 632)			_hx_tmp = false;
            		}
            		else {
HXLINE( 632)			_hx_tmp = (_node1->color == true);
            		}
HXDLIN( 632)		if (_hx_tmp) {
HXLINE( 633)			_node->right = this->rotate_right(_node->right);
HXLINE( 634)			_node = this->rotate_left(_node);
            		}
HXLINE( 637)		return _node;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,move_red_left,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::move_red_right( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_640_move_red_right)
HXLINE( 642)		this->swap_color(_node);
HXLINE( 644)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = _node->left->left;
HXDLIN( 644)		bool _hx_tmp;
HXDLIN( 644)		if (hx::IsNull( _node1 )) {
HXLINE( 644)			_hx_tmp = false;
            		}
            		else {
HXLINE( 644)			_hx_tmp = (_node1->color == true);
            		}
HXDLIN( 644)		if (_hx_tmp) {
HXLINE( 645)			_node = this->rotate_right(_node);
            		}
HXLINE( 648)		return _node;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,move_red_right,return )

 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::balance( ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node){
            	HX_STACKFRAME(&_hx_pos_236e7615e83a66d2_651_balance)
HXLINE( 653)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node1 = _node->right;
HXDLIN( 653)		bool _hx_tmp;
HXDLIN( 653)		if (hx::IsNull( _node1 )) {
HXLINE( 653)			_hx_tmp = false;
            		}
            		else {
HXLINE( 653)			_hx_tmp = (_node1->color == true);
            		}
HXDLIN( 653)		if (_hx_tmp) {
HXLINE( 654)			_node = this->rotate_left(_node);
            		}
HXLINE( 657)		bool _hx_tmp1;
HXDLIN( 657)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node2 = _node->left;
HXDLIN( 657)		bool _hx_tmp2;
HXDLIN( 657)		if (hx::IsNull( _node2 )) {
HXLINE( 657)			_hx_tmp2 = false;
            		}
            		else {
HXLINE( 657)			_hx_tmp2 = (_node2->color == true);
            		}
HXDLIN( 657)		if (_hx_tmp2) {
HXLINE( 657)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node3 = _node->left->left;
HXDLIN( 657)			if (hx::IsNull( _node3 )) {
HXLINE( 657)				_hx_tmp1 = false;
            			}
            			else {
HXLINE( 657)				_hx_tmp1 = (_node3->color == true);
            			}
            		}
            		else {
HXLINE( 657)			_hx_tmp1 = false;
            		}
HXDLIN( 657)		if (_hx_tmp1) {
HXLINE( 658)			_node = this->rotate_right(_node);
            		}
HXLINE( 661)		bool _hx_tmp3;
HXDLIN( 661)		 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node4 = _node->left;
HXDLIN( 661)		bool _hx_tmp4;
HXDLIN( 661)		if (hx::IsNull( _node4 )) {
HXLINE( 661)			_hx_tmp4 = false;
            		}
            		else {
HXLINE( 661)			_hx_tmp4 = (_node4->color == true);
            		}
HXDLIN( 661)		if (_hx_tmp4) {
HXLINE( 661)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node5 = _node->right;
HXDLIN( 661)			if (hx::IsNull( _node5 )) {
HXLINE( 661)				_hx_tmp3 = false;
            			}
            			else {
HXLINE( 661)				_hx_tmp3 = (_node5->color == true);
            			}
            		}
            		else {
HXLINE( 661)			_hx_tmp3 = false;
            		}
HXDLIN( 661)		if (_hx_tmp3) {
HXLINE( 662)			this->swap_color(_node);
            		}
HXLINE( 665)		{
HXLINE( 665)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node6 = _node->left;
HXDLIN( 665)			int _hx_tmp5;
HXDLIN( 665)			if (hx::IsNull( _node6 )) {
HXLINE( 665)				_hx_tmp5 = (int)0;
            			}
            			else {
HXLINE( 665)				_hx_tmp5 = _node6->nodecount;
            			}
HXDLIN( 665)			 ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry _node7 = _node->right;
HXDLIN( 665)			int _hx_tmp6;
HXDLIN( 665)			if (hx::IsNull( _node7 )) {
HXLINE( 665)				_hx_tmp6 = (int)0;
            			}
            			else {
HXLINE( 665)				_hx_tmp6 = _node7->nodecount;
            			}
HXDLIN( 665)			_node->nodecount = ((_hx_tmp5 + _hx_tmp6) + (int)1);
            		}
HXLINE( 667)		return _node;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,balance,return )


hx::ObjectPtr< BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj > BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__new( ::Dynamic compare_function) {
	hx::ObjectPtr< BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj > __this = new BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj();
	__this->__construct(compare_function);
	return __this;
}

hx::ObjectPtr< BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj > BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic compare_function) {
	BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj *__this = (BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj), true, "luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"));
	*(void **)__this = BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::_hx_vtable;
	__this->__construct(compare_function);
	return __this;
}

BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj()
{
}

void BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry);
	HX_MARK_MEMBER_NAME(root,"root");
	HX_MARK_MEMBER_NAME(compare,"compare");
	HX_MARK_MEMBER_NAME(empty,"empty");
	HX_MARK_END_CLASS();
}

void BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(root,"root");
	HX_VISIT_MEMBER_NAME(compare,"compare");
	HX_VISIT_MEMBER_NAME(empty,"empty");
}

hx::Val BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return hx::Val( root ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		if (HX_FIELD_EQ(inName,"find") ) { return hx::Val( find_dyn() ); }
		if (HX_FIELD_EQ(inName,"rank") ) { return hx::Val( rank_dyn() ); }
		if (HX_FIELD_EQ(inName,"ceil") ) { return hx::Val( ceil_dyn() ); }
		if (HX_FIELD_EQ(inName,"keys") ) { return hx::Val( keys_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( inCallProp == hx::paccAlways ? get_empty() : empty ); }
		if (HX_FIELD_EQ(inName,"depth") ) { return hx::Val( depth_dyn() ); }
		if (HX_FIELD_EQ(inName,"floor") ) { return hx::Val( floor_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"select") ) { return hx::Val( select_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"is_red") ) { return hx::Val( is_red_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { return hx::Val( compare ); }
		if (HX_FIELD_EQ(inName,"largest") ) { return hx::Val( largest_dyn() ); }
		if (HX_FIELD_EQ(inName,"toArray") ) { return hx::Val( toArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"balance") ) { return hx::Val( balance_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"smallest") ) { return hx::Val( smallest_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_empty") ) { return hx::Val( get_empty_dyn() ); }
		if (HX_FIELD_EQ(inName,"node_find") ) { return hx::Val( node_find_dyn() ); }
		if (HX_FIELD_EQ(inName,"node_rank") ) { return hx::Val( node_rank_dyn() ); }
		if (HX_FIELD_EQ(inName,"node_ceil") ) { return hx::Val( node_ceil_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"node_depth") ) { return hx::Val( node_depth_dyn() ); }
		if (HX_FIELD_EQ(inName,"node_count") ) { return hx::Val( node_count_dyn() ); }
		if (HX_FIELD_EQ(inName,"node_floor") ) { return hx::Val( node_floor_dyn() ); }
		if (HX_FIELD_EQ(inName,"swap_color") ) { return hx::Val( swap_color_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"node_insert") ) { return hx::Val( node_insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"node_select") ) { return hx::Val( node_select_dyn() ); }
		if (HX_FIELD_EQ(inName,"node_remove") ) { return hx::Val( node_remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotate_left") ) { return hx::Val( rotate_left_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"node_largest") ) { return hx::Val( node_largest_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotate_right") ) { return hx::Val( rotate_right_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"traverse_node") ) { return hx::Val( traverse_node_dyn() ); }
		if (HX_FIELD_EQ(inName,"node_smallest") ) { return hx::Val( node_smallest_dyn() ); }
		if (HX_FIELD_EQ(inName,"move_red_left") ) { return hx::Val( move_red_left_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"remove_largest") ) { return hx::Val( remove_largest_dyn() ); }
		if (HX_FIELD_EQ(inName,"move_red_right") ) { return hx::Val( move_red_right_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"remove_smallest") ) { return hx::Val( remove_smallest_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"node_update_count") ) { return hx::Val( node_update_count_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"node_remove_largest") ) { return hx::Val( node_remove_largest_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"node_remove_smallest") ) { return hx::Val( node_remove_smallest_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast<  ::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"empty") ) { empty=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { compare=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	outFields->push(HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::luxe::structural::BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry*/ ,(int)offsetof(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,root),HX_HCSTRING("root","\x22","\xee","\xae","\x4b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,compare),HX_HCSTRING("compare","\xa5","\x18","\x69","\x83")},
	{hx::fsBool,(int)offsetof(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj,empty),HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj_sStaticStorageInfo = 0;
#endif

static ::String BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj_sMemberFields[] = {
	HX_HCSTRING("root","\x22","\xee","\xae","\x4b"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("find","\x39","\xd0","\xbb","\x43"),
	HX_HCSTRING("rank","\xac","\x4d","\xa4","\x4b"),
	HX_HCSTRING("select","\xfc","\x1a","\x33","\x6a"),
	HX_HCSTRING("smallest","\xdf","\x8d","\xe1","\xa5"),
	HX_HCSTRING("largest","\x1c","\x3d","\xbc","\x3b"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("remove_smallest","\x7a","\x40","\xc3","\x8c"),
	HX_HCSTRING("remove_largest","\xe1","\x16","\x19","\x66"),
	HX_HCSTRING("floor","\xcc","\xd1","\x96","\x02"),
	HX_HCSTRING("ceil","\x05","\x1f","\xbd","\x41"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("traverse_node","\xef","\xc2","\x11","\x17"),
	HX_HCSTRING("get_empty","\xe4","\x96","\x83","\xb3"),
	HX_HCSTRING("node_depth","\xc6","\xaf","\x69","\xa9"),
	HX_HCSTRING("node_count","\x92","\x03","\xa3","\x1c"),
	HX_HCSTRING("node_insert","\x16","\x6f","\x64","\xc3"),
	HX_HCSTRING("node_update_count","\x76","\xae","\x3a","\x97"),
	HX_HCSTRING("node_find","\xd6","\x5a","\xd5","\x07"),
	HX_HCSTRING("node_rank","\x49","\xd8","\xbd","\x0f"),
	HX_HCSTRING("node_select","\xd9","\x46","\xba","\x8f"),
	HX_HCSTRING("node_smallest","\xfc","\x2a","\x71","\x9c"),
	HX_HCSTRING("node_largest","\x9f","\x72","\x7b","\xec"),
	HX_HCSTRING("node_floor","\x8f","\x90","\xd6","\xd4"),
	HX_HCSTRING("node_ceil","\xa2","\xa9","\xd6","\x05"),
	HX_HCSTRING("node_remove_smallest","\xfd","\x30","\xc8","\x80"),
	HX_HCSTRING("node_remove_largest","\xbe","\xe7","\xaa","\x91"),
	HX_HCSTRING("node_remove","\x21","\xc8","\x0f","\x2a"),
	HX_HCSTRING("is_red","\x3c","\xb7","\xaf","\x71"),
	HX_HCSTRING("rotate_left","\xab","\xf3","\x5c","\x39"),
	HX_HCSTRING("rotate_right","\xb8","\x4f","\x05","\x6f"),
	HX_HCSTRING("swap_color","\x77","\x93","\x70","\x93"),
	HX_HCSTRING("move_red_left","\x23","\x8f","\x52","\x97"),
	HX_HCSTRING("move_red_right","\x40","\xbd","\xf7","\x47"),
	HX_HCSTRING("balance","\x1c","\x9d","\x8d","\x23"),
	::String(null()) };

static void BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__mClass,"__mClass");
};

#endif

hx::Class BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__mClass;

void BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::__register()
{
	hx::Object *dummy = new BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj;
	BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry","\xdd","\x32","\x9e","\x1b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace luxe
} // end namespace structural
