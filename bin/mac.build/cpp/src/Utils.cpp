// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Utils
#include <Utils.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_014701de542abb8a_20_round,"Utils","round",0x91d90e31,"Utils.round","Main.hx",20,0x087e5c05)

void Utils_obj::__construct() { }

Dynamic Utils_obj::__CreateEmpty() { return new Utils_obj; }

void *Utils_obj::_hx_vtable = 0;

Dynamic Utils_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Utils_obj > _hx_result = new Utils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Utils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3e0c1a11;
}

Float Utils_obj::round(Float number, ::Dynamic __o_precision){
 ::Dynamic precision = __o_precision.Default(2);
            	HX_STACKFRAME(&_hx_pos_014701de542abb8a_20_round)
HXLINE(  21)		number = (number * ::Math_obj::pow((int)10,precision));
HXLINE(  22)		int _hx_tmp = ::Math_obj::round(number);
HXDLIN(  22)		return ((Float)_hx_tmp / (Float)::Math_obj::pow((int)10,precision));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,round,return )


Utils_obj::Utils_obj()
{
}

bool Utils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"round") ) { outValue = round_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Utils_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Utils_obj_sStaticStorageInfo = 0;
#endif

static void Utils_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Utils_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Utils_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Utils_obj::__mClass,"__mClass");
};

#endif

hx::Class Utils_obj::__mClass;

static ::String Utils_obj_sStaticFields[] = {
	HX_HCSTRING("round","\x4e","\xf8","\x65","\xed"),
	::String(null())
};

void Utils_obj::__register()
{
	hx::Object *dummy = new Utils_obj;
	Utils_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Utils","\x11","\x1a","\x0c","\x3e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Utils_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Utils_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Utils_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Utils_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Utils_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Utils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Utils_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

