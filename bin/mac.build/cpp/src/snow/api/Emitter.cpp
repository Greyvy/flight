// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_snow_api_Emitter
#include <snow/api/Emitter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_99932b9d5266afc1_15_new,"snow.api.Emitter","new",0xe1632781,"snow.api.Emitter.new","snow/api/Emitter.hx",15,0x93fe0e11)
HX_LOCAL_STACK_FRAME(_hx_pos_99932b9d5266afc1_35_emit,"snow.api.Emitter","emit",0x4f728412,"snow.api.Emitter.emit","snow/api/Emitter.hx",35,0x93fe0e11)
HX_LOCAL_STACK_FRAME(_hx_pos_99932b9d5266afc1_54_on,"snow.api.Emitter","on",0x7e24091e,"snow.api.Emitter.on","snow/api/Emitter.hx",54,0x93fe0e11)
HX_LOCAL_STACK_FRAME(_hx_pos_99932b9d5266afc1_76_off,"snow.api.Emitter","off",0xe163ea90,"snow.api.Emitter.off","snow/api/Emitter.hx",76,0x93fe0e11)
HX_LOCAL_STACK_FRAME(_hx_pos_99932b9d5266afc1_105__check,"snow.api.Emitter","_check",0xcb4ef388,"snow.api.Emitter._check","snow/api/Emitter.hx",105,0x93fe0e11)
namespace snow{
namespace api{

void Emitter_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_99932b9d5266afc1_15_new)
HXLINE( 103)		this->_checking = false;
HXLINE(  27)		this->_to_remove =  ::List_obj::__alloc( HX_CTX );
HXLINE(  28)		this->connected =  ::List_obj::__alloc( HX_CTX );
HXLINE(  30)		this->bindings =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}

Dynamic Emitter_obj::__CreateEmpty() { return new Emitter_obj; }

void *Emitter_obj::_hx_vtable = 0;

Dynamic Emitter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Emitter_obj > _hx_result = new Emitter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Emitter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e48809b;
}

void Emitter_obj::emit( ::Dynamic event, ::Dynamic data, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_99932b9d5266afc1_35_emit)
HXLINE(  37)		this->_check();
HXLINE(  39)		::Array< ::Dynamic> list = ( (::Array< ::Dynamic>)(this->bindings->get(( (int)(event) ))) );
HXLINE(  40)		bool _hx_tmp;
HXDLIN(  40)		if (hx::IsNotNull( list )) {
HXLINE(  40)			_hx_tmp = (list->length > (int)0);
            		}
            		else {
HXLINE(  40)			_hx_tmp = false;
            		}
HXDLIN(  40)		if (_hx_tmp) {
HXLINE(  41)			int _g = (int)0;
HXDLIN(  41)			while((_g < list->length)){
HXLINE(  41)				 ::Dynamic handler = list->__get(_g);
HXDLIN(  41)				_g = (_g + (int)1);
HXLINE(  43)				handler(data);
            			}
            		}
HXLINE(  49)		this->_check();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Emitter_obj,emit,(void))

void Emitter_obj::on( ::Dynamic event, ::Dynamic handler, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_99932b9d5266afc1_54_on)
HXLINE(  56)		this->_check();
HXLINE(  60)		if (!(this->bindings->exists(( (int)(event) )))) {
HXLINE(  62)			this->bindings->set(( (int)(event) ),::Array_obj< ::Dynamic>::__new(1)->init(0,handler));
HXLINE(  63)			this->connected->push( ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("pos",94,5d,55,00),pos)
            				->setFixed(1,HX_("handler",ca,af,d5,45),handler)
            				->setFixed(2,HX_("event",1a,c8,c4,75),event)));
            		}
            		else {
HXLINE(  66)			::Array< ::Dynamic> list = ( (::Array< ::Dynamic>)(this->bindings->get(( (int)(event) ))) );
HXLINE(  67)			if ((list->indexOf(handler,null()) == (int)-1)) {
HXLINE(  68)				list->push(handler);
HXLINE(  69)				this->connected->push( ::Dynamic(hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("pos",94,5d,55,00),pos)
            					->setFixed(1,HX_("handler",ca,af,d5,45),handler)
            					->setFixed(2,HX_("event",1a,c8,c4,75),event)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Emitter_obj,on,(void))

bool Emitter_obj::off( ::Dynamic event, ::Dynamic handler, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_99932b9d5266afc1_76_off)
HXLINE(  78)		this->_check();
HXLINE(  80)		bool success = false;
HXLINE(  82)		if (this->bindings->exists(( (int)(event) ))) {
HXLINE(  86)			this->_to_remove->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("handler",ca,af,d5,45),handler)
            				->setFixed(1,HX_("event",1a,c8,c4,75),event)));
HXLINE(  88)			{
HXLINE(  88)				 ::_List::ListNode _g_head = this->connected->h;
HXDLIN(  88)				while(hx::IsNotNull( _g_head )){
HXLINE(  88)					 ::Dynamic val = _g_head->item;
HXDLIN(  88)					_g_head = _g_head->next;
HXDLIN(  88)					 ::Dynamic _info = val;
HXLINE(  89)					bool _hx_tmp;
HXDLIN(  89)					if (hx::IsEq(  ::Dynamic(_info->__Field(HX_("event",1a,c8,c4,75),hx::paccDynamic)),event )) {
HXLINE(  89)						_hx_tmp = hx::IsEq( _info->__Field(HX_("handler",ca,af,d5,45),hx::paccDynamic),handler );
            					}
            					else {
HXLINE(  89)						_hx_tmp = false;
            					}
HXDLIN(  89)					if (_hx_tmp) {
HXLINE(  90)						this->connected->remove(_info);
            					}
            				}
            			}
HXLINE(  95)			success = true;
            		}
HXLINE(  99)		return success;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Emitter_obj,off,return )

void Emitter_obj::_check(){
            	HX_GC_STACKFRAME(&_hx_pos_99932b9d5266afc1_105__check)
HXLINE( 107)		if (this->_checking) {
HXLINE( 108)			return;
            		}
HXLINE( 111)		this->_checking = true;
HXLINE( 113)		if ((this->_to_remove->length > (int)0)) {
HXLINE( 115)			{
HXLINE( 115)				 ::_List::ListNode _g_head = this->_to_remove->h;
HXDLIN( 115)				while(hx::IsNotNull( _g_head )){
HXLINE( 115)					 ::Dynamic val = _g_head->item;
HXDLIN( 115)					_g_head = _g_head->next;
HXDLIN( 115)					 ::Dynamic _node = val;
HXLINE( 117)					::Array< ::Dynamic> list = ( (::Array< ::Dynamic>)(this->bindings->get(( (int)(_node->__Field(HX_("event",1a,c8,c4,75),hx::paccDynamic)) ))) );
HXLINE( 118)					list->remove( ::Dynamic(_node->__Field(HX_("handler",ca,af,d5,45),hx::paccDynamic)));
HXLINE( 121)					if ((list->length == (int)0)) {
HXLINE( 122)						this->bindings->remove(( (int)(_node->__Field(HX_("event",1a,c8,c4,75),hx::paccDynamic)) ));
            					}
            				}
            			}
HXLINE( 127)			this->_to_remove = null();
HXLINE( 128)			this->_to_remove =  ::List_obj::__alloc( HX_CTX );
            		}
HXLINE( 132)		this->_checking = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Emitter_obj,_check,(void))


hx::ObjectPtr< Emitter_obj > Emitter_obj::__new() {
	hx::ObjectPtr< Emitter_obj > __this = new Emitter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Emitter_obj > Emitter_obj::__alloc(hx::Ctx *_hx_ctx) {
	Emitter_obj *__this = (Emitter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Emitter_obj), true, "snow.api.Emitter"));
	*(void **)__this = Emitter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Emitter_obj::Emitter_obj()
{
}

void Emitter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Emitter);
	HX_MARK_MEMBER_NAME(bindings,"bindings");
	HX_MARK_MEMBER_NAME(connected,"connected");
	HX_MARK_MEMBER_NAME(_to_remove,"_to_remove");
	HX_MARK_MEMBER_NAME(_checking,"_checking");
	HX_MARK_END_CLASS();
}

void Emitter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bindings,"bindings");
	HX_VISIT_MEMBER_NAME(connected,"connected");
	HX_VISIT_MEMBER_NAME(_to_remove,"_to_remove");
	HX_VISIT_MEMBER_NAME(_checking,"_checking");
}

hx::Val Emitter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"on") ) { return hx::Val( on_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"off") ) { return hx::Val( off_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"emit") ) { return hx::Val( emit_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_check") ) { return hx::Val( _check_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bindings") ) { return hx::Val( bindings ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { return hx::Val( connected ); }
		if (HX_FIELD_EQ(inName,"_checking") ) { return hx::Val( _checking ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_to_remove") ) { return hx::Val( _to_remove ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Emitter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"bindings") ) { bindings=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { connected=inValue.Cast<  ::List >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_checking") ) { _checking=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_to_remove") ) { _to_remove=inValue.Cast<  ::List >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Emitter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bindings","\x8e","\x51","\xac","\xc8"));
	outFields->push(HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"));
	outFields->push(HX_HCSTRING("_to_remove","\x89","\x39","\xe5","\x30"));
	outFields->push(HX_HCSTRING("_checking","\x79","\x18","\x91","\xf4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Emitter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Emitter_obj,bindings),HX_HCSTRING("bindings","\x8e","\x51","\xac","\xc8")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Emitter_obj,connected),HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Emitter_obj,_to_remove),HX_HCSTRING("_to_remove","\x89","\x39","\xe5","\x30")},
	{hx::fsBool,(int)offsetof(Emitter_obj,_checking),HX_HCSTRING("_checking","\x79","\x18","\x91","\xf4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Emitter_obj_sStaticStorageInfo = 0;
#endif

static ::String Emitter_obj_sMemberFields[] = {
	HX_HCSTRING("bindings","\x8e","\x51","\xac","\xc8"),
	HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"),
	HX_HCSTRING("_to_remove","\x89","\x39","\xe5","\x30"),
	HX_HCSTRING("emit","\x53","\x9e","\x15","\x43"),
	HX_HCSTRING("on","\x1f","\x61","\x00","\x00"),
	HX_HCSTRING("off","\x6f","\x93","\x54","\x00"),
	HX_HCSTRING("_checking","\x79","\x18","\x91","\xf4"),
	HX_HCSTRING("_check","\x09","\xe0","\x9d","\x41"),
	::String(null()) };

static void Emitter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Emitter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Emitter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Emitter_obj::__mClass,"__mClass");
};

#endif

hx::Class Emitter_obj::__mClass;

void Emitter_obj::__register()
{
	hx::Object *dummy = new Emitter_obj;
	Emitter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("snow.api.Emitter","\x0f","\x53","\xff","\x71");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Emitter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Emitter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Emitter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Emitter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Emitter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Emitter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace api
