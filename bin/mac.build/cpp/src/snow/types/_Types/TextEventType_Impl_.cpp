// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_snow_types__Types_TextEventType_Impl_
#include <snow/types/_Types/TextEventType_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8f1064e769c1eb0d_1037_toString,"snow.types._Types.TextEventType_Impl_","toString",0xe75afde7,"snow.types._Types.TextEventType_Impl_.toString","snow/types/Types.hx",1037,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_8f1064e769c1eb0d_1030_boot,"snow.types._Types.TextEventType_Impl_","boot",0x0083b7ed,"snow.types._Types.TextEventType_Impl_.boot","snow/types/Types.hx",1030,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_8f1064e769c1eb0d_1032_boot,"snow.types._Types.TextEventType_Impl_","boot",0x0083b7ed,"snow.types._Types.TextEventType_Impl_.boot","snow/types/Types.hx",1032,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_8f1064e769c1eb0d_1034_boot,"snow.types._Types.TextEventType_Impl_","boot",0x0083b7ed,"snow.types._Types.TextEventType_Impl_.boot","snow/types/Types.hx",1034,0x72b41ce7)
namespace snow{
namespace types{
namespace _Types{

void TextEventType_Impl__obj::__construct() { }

Dynamic TextEventType_Impl__obj::__CreateEmpty() { return new TextEventType_Impl__obj; }

void *TextEventType_Impl__obj::_hx_vtable = 0;

Dynamic TextEventType_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextEventType_Impl__obj > _hx_result = new TextEventType_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextEventType_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x34ef4a97;
}

int TextEventType_Impl__obj::te_unknown;

int TextEventType_Impl__obj::te_edit;

int TextEventType_Impl__obj::te_input;

::String TextEventType_Impl__obj::toString(int this1){
            	HX_STACKFRAME(&_hx_pos_8f1064e769c1eb0d_1037_toString)
HXDLIN(1037)		switch((int)(this1)){
            			case (int)0: {
HXLINE(1038)				return HX_("te_unknown",7c,3b,30,76);
            			}
            			break;
            			case (int)1: {
HXLINE(1039)				return HX_("te_edit",d8,26,e5,2f);
            			}
            			break;
            			case (int)2: {
HXLINE(1040)				return HX_("te_input",7c,9b,d8,0c);
            			}
            			break;
            			default:{
HXLINE(1041)				return (HX_("",00,00,00,00) + this1);
            			}
            		}
HXLINE(1037)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEventType_Impl__obj,toString,return )


TextEventType_Impl__obj::TextEventType_Impl__obj()
{
}

bool TextEventType_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TextEventType_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo TextEventType_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TextEventType_Impl__obj::te_unknown,HX_HCSTRING("te_unknown","\x7c","\x3b","\x30","\x76")},
	{hx::fsInt,(void *) &TextEventType_Impl__obj::te_edit,HX_HCSTRING("te_edit","\xd8","\x26","\xe5","\x2f")},
	{hx::fsInt,(void *) &TextEventType_Impl__obj::te_input,HX_HCSTRING("te_input","\x7c","\x9b","\xd8","\x0c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void TextEventType_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextEventType_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextEventType_Impl__obj::te_unknown,"te_unknown");
	HX_MARK_MEMBER_NAME(TextEventType_Impl__obj::te_edit,"te_edit");
	HX_MARK_MEMBER_NAME(TextEventType_Impl__obj::te_input,"te_input");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextEventType_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextEventType_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextEventType_Impl__obj::te_unknown,"te_unknown");
	HX_VISIT_MEMBER_NAME(TextEventType_Impl__obj::te_edit,"te_edit");
	HX_VISIT_MEMBER_NAME(TextEventType_Impl__obj::te_input,"te_input");
};

#endif

hx::Class TextEventType_Impl__obj::__mClass;

static ::String TextEventType_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("te_unknown","\x7c","\x3b","\x30","\x76"),
	HX_HCSTRING("te_edit","\xd8","\x26","\xe5","\x2f"),
	HX_HCSTRING("te_input","\x7c","\x9b","\xd8","\x0c"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null())
};

void TextEventType_Impl__obj::__register()
{
	hx::Object *dummy = new TextEventType_Impl__obj;
	TextEventType_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("snow.types._Types.TextEventType_Impl_","\x93","\xc6","\x2e","\x06");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextEventType_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TextEventType_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextEventType_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TextEventType_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextEventType_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextEventType_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextEventType_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextEventType_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_8f1064e769c1eb0d_1030_boot)
HXDLIN(1030)		te_unknown = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8f1064e769c1eb0d_1032_boot)
HXDLIN(1032)		te_edit = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8f1064e769c1eb0d_1034_boot)
HXDLIN(1034)		te_input = (int)2;
            	}
}

} // end namespace snow
} // end namespace types
} // end namespace _Types
