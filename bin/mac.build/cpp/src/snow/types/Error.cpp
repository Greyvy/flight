// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_snow_types_Error
#include <snow/types/Error.h>
#endif
namespace snow{
namespace types{

::snow::types::Error Error_obj::error( ::Dynamic value)
{
	return hx::CreateEnum< Error_obj >(HX_("error",c8,cb,29,73),0,1)->_hx_init(0,value);
}

::snow::types::Error Error_obj::init( ::Dynamic value)
{
	return hx::CreateEnum< Error_obj >(HX_("init",10,3b,bb,45),1,1)->_hx_init(0,value);
}

::snow::types::Error Error_obj::parse( ::Dynamic value)
{
	return hx::CreateEnum< Error_obj >(HX_("parse",33,90,55,bd),2,1)->_hx_init(0,value);
}

bool Error_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("error",c8,cb,29,73)) { outValue = Error_obj::error_dyn(); return true; }
	if (inName==HX_("init",10,3b,bb,45)) { outValue = Error_obj::init_dyn(); return true; }
	if (inName==HX_("parse",33,90,55,bd)) { outValue = Error_obj::parse_dyn(); return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Error_obj)

int Error_obj::__FindIndex(::String inName)
{
	if (inName==HX_("error",c8,cb,29,73)) return 0;
	if (inName==HX_("init",10,3b,bb,45)) return 1;
	if (inName==HX_("parse",33,90,55,bd)) return 2;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC1(Error_obj,error,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(Error_obj,init,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(Error_obj,parse,return)

int Error_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("error",c8,cb,29,73)) return 1;
	if (inName==HX_("init",10,3b,bb,45)) return 1;
	if (inName==HX_("parse",33,90,55,bd)) return 1;
	return super::__FindArgCount(inName);
}

hx::Val Error_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("error",c8,cb,29,73)) return error_dyn();
	if (inName==HX_("init",10,3b,bb,45)) return init_dyn();
	if (inName==HX_("parse",33,90,55,bd)) return parse_dyn();
	return super::__Field(inName,inCallProp);
}

static ::String Error_obj_sStaticFields[] = {
	HX_("error",c8,cb,29,73),
	HX_("init",10,3b,bb,45),
	HX_("parse",33,90,55,bd),
	::String(null())
};

static void Error_obj_sMarkStatics(HX_MARK_PARAMS) {
};

#ifdef HXCPP_VISIT_ALLOCS
static void Error_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Error_obj::__mClass,"__mClass");
};
#endif

hx::Class Error_obj::__mClass;

Dynamic __Create_Error_obj() { return new Error_obj; }

void Error_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("snow.types.Error","\x88","\xb3","\x2e","\x60"), hx::TCanCast< Error_obj >,Error_obj_sStaticFields,0,
	&__Create_Error_obj, &__Create,
	&super::__SGetClass(), &CreateError_obj, Error_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , Error_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Error_obj::__GetStatic;
}

void Error_obj::__boot()
{
}


} // end namespace snow
} // end namespace types
